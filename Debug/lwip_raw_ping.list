
lwip_raw_ping.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00011070  080002a0  080002a0  000102a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00001fb8  08011310  08011310  00021310  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080132c8  080132c8  00030090  2**0
                  CONTENTS
  4 .ARM          00000000  080132c8  080132c8  00030090  2**0
                  CONTENTS
  5 .preinit_array 00000000  080132c8  080132c8  00030090  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080132c8  080132c8  000232c8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080132cc  080132cc  000232cc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000090  24000000  080132d0  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000af14  24000090  08013360  00030090  2**2
                  ALLOC
 10 ._user_heap_stack 0000c004  2400afa4  08013360  0003afa4  2**0
                  ALLOC
 11 .lwip_sec     00041a00  30000000  30000000  00040000  2**2
                  ALLOC
 12 .ARM.attributes 0000002e  00000000  00000000  00030090  2**0
                  CONTENTS, READONLY
 13 .debug_info   00041cf7  00000000  00000000  000300be  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_abbrev 00007596  00000000  00000000  00071db5  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_aranges 00001a00  00000000  00000000  00079350  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_ranges 00001808  00000000  00000000  0007ad50  2**3
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_macro  00042295  00000000  00000000  0007c558  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_line   000250fd  00000000  00000000  000be7ed  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .debug_str    0016c7d3  00000000  00000000  000e38ea  2**0
                  CONTENTS, READONLY, DEBUGGING
 20 .comment      0000007b  00000000  00000000  002500bd  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00006c5c  00000000  00000000  00250138  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080002a0 <__do_global_dtors_aux>:
 80002a0:	b510      	push	{r4, lr}
 80002a2:	4c05      	ldr	r4, [pc, #20]	; (80002b8 <__do_global_dtors_aux+0x18>)
 80002a4:	7823      	ldrb	r3, [r4, #0]
 80002a6:	b933      	cbnz	r3, 80002b6 <__do_global_dtors_aux+0x16>
 80002a8:	4b04      	ldr	r3, [pc, #16]	; (80002bc <__do_global_dtors_aux+0x1c>)
 80002aa:	b113      	cbz	r3, 80002b2 <__do_global_dtors_aux+0x12>
 80002ac:	4804      	ldr	r0, [pc, #16]	; (80002c0 <__do_global_dtors_aux+0x20>)
 80002ae:	f3af 8000 	nop.w
 80002b2:	2301      	movs	r3, #1
 80002b4:	7023      	strb	r3, [r4, #0]
 80002b6:	bd10      	pop	{r4, pc}
 80002b8:	24000090 	.word	0x24000090
 80002bc:	00000000 	.word	0x00000000
 80002c0:	080112f8 	.word	0x080112f8

080002c4 <frame_dummy>:
 80002c4:	b508      	push	{r3, lr}
 80002c6:	4b03      	ldr	r3, [pc, #12]	; (80002d4 <frame_dummy+0x10>)
 80002c8:	b11b      	cbz	r3, 80002d2 <frame_dummy+0xe>
 80002ca:	4903      	ldr	r1, [pc, #12]	; (80002d8 <frame_dummy+0x14>)
 80002cc:	4803      	ldr	r0, [pc, #12]	; (80002dc <frame_dummy+0x18>)
 80002ce:	f3af 8000 	nop.w
 80002d2:	bd08      	pop	{r3, pc}
 80002d4:	00000000 	.word	0x00000000
 80002d8:	24000094 	.word	0x24000094
 80002dc:	080112f8 	.word	0x080112f8

080002e0 <memchr>:
 80002e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80002e4:	2a10      	cmp	r2, #16
 80002e6:	db2b      	blt.n	8000340 <memchr+0x60>
 80002e8:	f010 0f07 	tst.w	r0, #7
 80002ec:	d008      	beq.n	8000300 <memchr+0x20>
 80002ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002f2:	3a01      	subs	r2, #1
 80002f4:	428b      	cmp	r3, r1
 80002f6:	d02d      	beq.n	8000354 <memchr+0x74>
 80002f8:	f010 0f07 	tst.w	r0, #7
 80002fc:	b342      	cbz	r2, 8000350 <memchr+0x70>
 80002fe:	d1f6      	bne.n	80002ee <memchr+0xe>
 8000300:	b4f0      	push	{r4, r5, r6, r7}
 8000302:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000306:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800030a:	f022 0407 	bic.w	r4, r2, #7
 800030e:	f07f 0700 	mvns.w	r7, #0
 8000312:	2300      	movs	r3, #0
 8000314:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000318:	3c08      	subs	r4, #8
 800031a:	ea85 0501 	eor.w	r5, r5, r1
 800031e:	ea86 0601 	eor.w	r6, r6, r1
 8000322:	fa85 f547 	uadd8	r5, r5, r7
 8000326:	faa3 f587 	sel	r5, r3, r7
 800032a:	fa86 f647 	uadd8	r6, r6, r7
 800032e:	faa5 f687 	sel	r6, r5, r7
 8000332:	b98e      	cbnz	r6, 8000358 <memchr+0x78>
 8000334:	d1ee      	bne.n	8000314 <memchr+0x34>
 8000336:	bcf0      	pop	{r4, r5, r6, r7}
 8000338:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800033c:	f002 0207 	and.w	r2, r2, #7
 8000340:	b132      	cbz	r2, 8000350 <memchr+0x70>
 8000342:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000346:	3a01      	subs	r2, #1
 8000348:	ea83 0301 	eor.w	r3, r3, r1
 800034c:	b113      	cbz	r3, 8000354 <memchr+0x74>
 800034e:	d1f8      	bne.n	8000342 <memchr+0x62>
 8000350:	2000      	movs	r0, #0
 8000352:	4770      	bx	lr
 8000354:	3801      	subs	r0, #1
 8000356:	4770      	bx	lr
 8000358:	2d00      	cmp	r5, #0
 800035a:	bf06      	itte	eq
 800035c:	4635      	moveq	r5, r6
 800035e:	3803      	subeq	r0, #3
 8000360:	3807      	subne	r0, #7
 8000362:	f015 0f01 	tst.w	r5, #1
 8000366:	d107      	bne.n	8000378 <memchr+0x98>
 8000368:	3001      	adds	r0, #1
 800036a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800036e:	bf02      	ittt	eq
 8000370:	3001      	addeq	r0, #1
 8000372:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000376:	3001      	addeq	r0, #1
 8000378:	bcf0      	pop	{r4, r5, r6, r7}
 800037a:	3801      	subs	r0, #1
 800037c:	4770      	bx	lr
 800037e:	bf00      	nop

08000380 <LAN8742_RegisterBusIO>:
  * @param  ioctx: holds device IO functions.  
  * @retval LAN8742_STATUS_OK  if OK
  *         LAN8742_STATUS_ERROR if missing mandatory function
  */
int32_t  LAN8742_RegisterBusIO(lan8742_Object_t *pObj, lan8742_IOCtx_t *ioctx)
{
 8000380:	b480      	push	{r7}
 8000382:	b083      	sub	sp, #12
 8000384:	af00      	add	r7, sp, #0
 8000386:	6078      	str	r0, [r7, #4]
 8000388:	6039      	str	r1, [r7, #0]
  if(!pObj || !ioctx->ReadReg || !ioctx->WriteReg || !ioctx->GetTick)
 800038a:	687b      	ldr	r3, [r7, #4]
 800038c:	2b00      	cmp	r3, #0
 800038e:	d00b      	beq.n	80003a8 <LAN8742_RegisterBusIO+0x28>
 8000390:	683b      	ldr	r3, [r7, #0]
 8000392:	68db      	ldr	r3, [r3, #12]
 8000394:	2b00      	cmp	r3, #0
 8000396:	d007      	beq.n	80003a8 <LAN8742_RegisterBusIO+0x28>
 8000398:	683b      	ldr	r3, [r7, #0]
 800039a:	689b      	ldr	r3, [r3, #8]
 800039c:	2b00      	cmp	r3, #0
 800039e:	d003      	beq.n	80003a8 <LAN8742_RegisterBusIO+0x28>
 80003a0:	683b      	ldr	r3, [r7, #0]
 80003a2:	691b      	ldr	r3, [r3, #16]
 80003a4:	2b00      	cmp	r3, #0
 80003a6:	d102      	bne.n	80003ae <LAN8742_RegisterBusIO+0x2e>
  {
    return LAN8742_STATUS_ERROR;
 80003a8:	f04f 33ff 	mov.w	r3, #4294967295
 80003ac:	e014      	b.n	80003d8 <LAN8742_RegisterBusIO+0x58>
  }
  
  pObj->IO.Init = ioctx->Init;
 80003ae:	683b      	ldr	r3, [r7, #0]
 80003b0:	681a      	ldr	r2, [r3, #0]
 80003b2:	687b      	ldr	r3, [r7, #4]
 80003b4:	609a      	str	r2, [r3, #8]
  pObj->IO.DeInit = ioctx->DeInit;
 80003b6:	683b      	ldr	r3, [r7, #0]
 80003b8:	685a      	ldr	r2, [r3, #4]
 80003ba:	687b      	ldr	r3, [r7, #4]
 80003bc:	60da      	str	r2, [r3, #12]
  pObj->IO.ReadReg = ioctx->ReadReg;
 80003be:	683b      	ldr	r3, [r7, #0]
 80003c0:	68da      	ldr	r2, [r3, #12]
 80003c2:	687b      	ldr	r3, [r7, #4]
 80003c4:	615a      	str	r2, [r3, #20]
  pObj->IO.WriteReg = ioctx->WriteReg;
 80003c6:	683b      	ldr	r3, [r7, #0]
 80003c8:	689a      	ldr	r2, [r3, #8]
 80003ca:	687b      	ldr	r3, [r7, #4]
 80003cc:	611a      	str	r2, [r3, #16]
  pObj->IO.GetTick = ioctx->GetTick;
 80003ce:	683b      	ldr	r3, [r7, #0]
 80003d0:	691a      	ldr	r2, [r3, #16]
 80003d2:	687b      	ldr	r3, [r7, #4]
 80003d4:	619a      	str	r2, [r3, #24]
  
  return LAN8742_STATUS_OK;
 80003d6:	2300      	movs	r3, #0
}
 80003d8:	4618      	mov	r0, r3
 80003da:	370c      	adds	r7, #12
 80003dc:	46bd      	mov	sp, r7
 80003de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003e2:	4770      	bx	lr

080003e4 <LAN8742_Init>:
  *         LAN8742_STATUS_READ_ERROR if connot read register
  *         LAN8742_STATUS_WRITE_ERROR if connot write to register
  *         LAN8742_STATUS_RESET_TIMEOUT if cannot perform a software reset
  */
int32_t LAN8742_Init(ETH_HandleTypeDef *heth)
{
 80003e4:	b580      	push	{r7, lr}
 80003e6:	b084      	sub	sp, #16
 80003e8:	af00      	add	r7, sp, #0
 80003ea:	6078      	str	r0, [r7, #4]
    uint32_t phyreg = 0;
 80003ec:	2300      	movs	r3, #0
 80003ee:	60bb      	str	r3, [r7, #8]
    uint32_t TIME_Out = 0;
 80003f0:	2300      	movs	r3, #0
 80003f2:	60fb      	str	r3, [r7, #12]
    //software reset LAN8742A
    if(HAL_ETH_WritePHYRegister(heth, 0x00, LAN8742_BCR, LAN8742_BCR_SOFT_RESET) != HAL_OK)
 80003f4:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80003f8:	2200      	movs	r2, #0
 80003fa:	2100      	movs	r1, #0
 80003fc:	6878      	ldr	r0, [r7, #4]
 80003fe:	f001 f881 	bl	8001504 <HAL_ETH_WritePHYRegister>
 8000402:	4603      	mov	r3, r0
 8000404:	2b00      	cmp	r3, #0
 8000406:	d001      	beq.n	800040c <LAN8742_Init+0x28>
    {
        return HAL_ERROR;
 8000408:	2301      	movs	r3, #1
 800040a:	e027      	b.n	800045c <LAN8742_Init+0x78>
    }
    //LAN8742A reset delay
    HAL_Delay(0x00000F);
 800040c:	200f      	movs	r0, #15
 800040e:	f000 f8d5 	bl	80005bc <HAL_Delay>

    if((HAL_ETH_WritePHYRegister(heth, 0x00, LAN8742_BCR, LAN8742_BCR_AUTONEGO_EN)) != HAL_OK)
 8000412:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000416:	2200      	movs	r2, #0
 8000418:	2100      	movs	r1, #0
 800041a:	6878      	ldr	r0, [r7, #4]
 800041c:	f001 f872 	bl	8001504 <HAL_ETH_WritePHYRegister>
 8000420:	4603      	mov	r3, r0
 8000422:	2b00      	cmp	r3, #0
 8000424:	d001      	beq.n	800042a <LAN8742_Init+0x46>
    {
      return HAL_ERROR;
 8000426:	2301      	movs	r3, #1
 8000428:	e018      	b.n	800045c <LAN8742_Init+0x78>
    }
    //LAN8742A write delay
    HAL_Delay(0xF);
 800042a:	200f      	movs	r0, #15
 800042c:	f000 f8c6 	bl	80005bc <HAL_Delay>
    do
    {
      HAL_ETH_ReadPHYRegister(heth, 0x00, LAN8742_BSR, &phyreg);
 8000430:	f107 0308 	add.w	r3, r7, #8
 8000434:	2201      	movs	r2, #1
 8000436:	2100      	movs	r1, #0
 8000438:	6878      	ldr	r0, [r7, #4]
 800043a:	f001 f80f 	bl	800145c <HAL_ETH_ReadPHYRegister>
      TIME_Out++;
 800043e:	68fb      	ldr	r3, [r7, #12]
 8000440:	3301      	adds	r3, #1
 8000442:	60fb      	str	r3, [r7, #12]
      if(TIME_Out > 0x0000FFFF)
 8000444:	68fb      	ldr	r3, [r7, #12]
 8000446:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800044a:	d301      	bcc.n	8000450 <LAN8742_Init+0x6c>
        return HAL_TIMEOUT;
 800044c:	2303      	movs	r3, #3
 800044e:	e005      	b.n	800045c <LAN8742_Init+0x78>
    } while (((phyreg & LAN8742_BSR_AUTONEGO_CPLT) != LAN8742_BSR_AUTONEGO_CPLT));
 8000450:	68bb      	ldr	r3, [r7, #8]
 8000452:	f003 0320 	and.w	r3, r3, #32
 8000456:	2b00      	cmp	r3, #0
 8000458:	d0ea      	beq.n	8000430 <LAN8742_Init+0x4c>

    return HAL_OK;
 800045a:	2300      	movs	r3, #0
}
 800045c:	4618      	mov	r0, r3
 800045e:	3710      	adds	r7, #16
 8000460:	46bd      	mov	sp, r7
 8000462:	bd80      	pop	{r7, pc}

08000464 <LAN8742_GetLinkState>:
  *         LAN8742_STATUS_10MBITS_HALFDUPLEX  if 10Mb/s HD       
  *         LAN8742_STATUS_READ_ERROR if connot read register
  *         LAN8742_STATUS_WRITE_ERROR if connot write to register
  */
int32_t LAN8742_GetLinkState(ETH_HandleTypeDef *heth)
{
 8000464:	b580      	push	{r7, lr}
 8000466:	b084      	sub	sp, #16
 8000468:	af00      	add	r7, sp, #0
 800046a:	6078      	str	r0, [r7, #4]
	uint32_t phyreg = 0;
 800046c:	2300      	movs	r3, #0
 800046e:	60fb      	str	r3, [r7, #12]

	HAL_ETH_ReadPHYRegister(heth, 0x00, LAN8742_BSR, &phyreg);
 8000470:	f107 030c 	add.w	r3, r7, #12
 8000474:	2201      	movs	r2, #1
 8000476:	2100      	movs	r1, #0
 8000478:	6878      	ldr	r0, [r7, #4]
 800047a:	f000 ffef 	bl	800145c <HAL_ETH_ReadPHYRegister>

	if(HAL_ETH_ReadPHYRegister(heth, 0x00, LAN8742_PHYSCSR, &phyreg) == HAL_OK)
 800047e:	f107 030c 	add.w	r3, r7, #12
 8000482:	221f      	movs	r2, #31
 8000484:	2100      	movs	r1, #0
 8000486:	6878      	ldr	r0, [r7, #4]
 8000488:	f000 ffe8 	bl	800145c <HAL_ETH_ReadPHYRegister>
 800048c:	4603      	mov	r3, r0
 800048e:	2b00      	cmp	r3, #0
 8000490:	d101      	bne.n	8000496 <LAN8742_GetLinkState+0x32>
		return phyreg;
 8000492:	68fb      	ldr	r3, [r7, #12]
 8000494:	e000      	b.n	8000498 <LAN8742_GetLinkState+0x34>
	return 0;
 8000496:	2300      	movs	r3, #0
}
 8000498:	4618      	mov	r0, r3
 800049a:	3710      	adds	r7, #16
 800049c:	46bd      	mov	sp, r7
 800049e:	bd80      	pop	{r7, pc}

080004a0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80004a0:	b580      	push	{r7, lr}
 80004a2:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80004a4:	2003      	movs	r0, #3
 80004a6:	f000 f99b 	bl	80007e0 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 80004aa:	f002 ffb3 	bl	8003414 <HAL_RCC_GetSysClockFreq>
 80004ae:	4601      	mov	r1, r0
 80004b0:	4b13      	ldr	r3, [pc, #76]	; (8000500 <HAL_Init+0x60>)
 80004b2:	699b      	ldr	r3, [r3, #24]
 80004b4:	0a1b      	lsrs	r3, r3, #8
 80004b6:	f003 030f 	and.w	r3, r3, #15
 80004ba:	4a12      	ldr	r2, [pc, #72]	; (8000504 <HAL_Init+0x64>)
 80004bc:	5cd3      	ldrb	r3, [r2, r3]
 80004be:	f003 031f 	and.w	r3, r3, #31
 80004c2:	fa21 f303 	lsr.w	r3, r1, r3
 80004c6:	4a10      	ldr	r2, [pc, #64]	; (8000508 <HAL_Init+0x68>)
 80004c8:	6013      	str	r3, [r2, #0]

  /* Update the SystemD2Clock global variable */
  SystemD2Clock = (SystemCoreClock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80004ca:	4b0f      	ldr	r3, [pc, #60]	; (8000508 <HAL_Init+0x68>)
 80004cc:	681a      	ldr	r2, [r3, #0]
 80004ce:	4b0c      	ldr	r3, [pc, #48]	; (8000500 <HAL_Init+0x60>)
 80004d0:	699b      	ldr	r3, [r3, #24]
 80004d2:	f003 030f 	and.w	r3, r3, #15
 80004d6:	490b      	ldr	r1, [pc, #44]	; (8000504 <HAL_Init+0x64>)
 80004d8:	5ccb      	ldrb	r3, [r1, r3]
 80004da:	f003 031f 	and.w	r3, r3, #31
 80004de:	fa22 f303 	lsr.w	r3, r2, r3
 80004e2:	4a0a      	ldr	r2, [pc, #40]	; (800050c <HAL_Init+0x6c>)
 80004e4:	6013      	str	r3, [r2, #0]

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80004e6:	200f      	movs	r0, #15
 80004e8:	f000 f812 	bl	8000510 <HAL_InitTick>
 80004ec:	4603      	mov	r3, r0
 80004ee:	2b00      	cmp	r3, #0
 80004f0:	d001      	beq.n	80004f6 <HAL_Init+0x56>
  {
    return HAL_ERROR;
 80004f2:	2301      	movs	r3, #1
 80004f4:	e002      	b.n	80004fc <HAL_Init+0x5c>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 80004f6:	f00f fe37 	bl	8010168 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80004fa:	2300      	movs	r3, #0
}
 80004fc:	4618      	mov	r0, r3
 80004fe:	bd80      	pop	{r7, pc}
 8000500:	58024400 	.word	0x58024400
 8000504:	08013220 	.word	0x08013220
 8000508:	24000024 	.word	0x24000024
 800050c:	24000028 	.word	0x24000028

08000510 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000510:	b580      	push	{r7, lr}
 8000512:	b082      	sub	sp, #8
 8000514:	af00      	add	r7, sp, #0
 8000516:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8000518:	4b15      	ldr	r3, [pc, #84]	; (8000570 <HAL_InitTick+0x60>)
 800051a:	781b      	ldrb	r3, [r3, #0]
 800051c:	2b00      	cmp	r3, #0
 800051e:	d101      	bne.n	8000524 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8000520:	2301      	movs	r3, #1
 8000522:	e021      	b.n	8000568 <HAL_InitTick+0x58>
      return HAL_ERROR;
    }
  }
#else
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8000524:	4b13      	ldr	r3, [pc, #76]	; (8000574 <HAL_InitTick+0x64>)
 8000526:	681a      	ldr	r2, [r3, #0]
 8000528:	4b11      	ldr	r3, [pc, #68]	; (8000570 <HAL_InitTick+0x60>)
 800052a:	781b      	ldrb	r3, [r3, #0]
 800052c:	4619      	mov	r1, r3
 800052e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000532:	fbb3 f3f1 	udiv	r3, r3, r1
 8000536:	fbb2 f3f3 	udiv	r3, r2, r3
 800053a:	4618      	mov	r0, r3
 800053c:	f000 f983 	bl	8000846 <HAL_SYSTICK_Config>
 8000540:	4603      	mov	r3, r0
 8000542:	2b00      	cmp	r3, #0
 8000544:	d001      	beq.n	800054a <HAL_InitTick+0x3a>
  {
    return HAL_ERROR;
 8000546:	2301      	movs	r3, #1
 8000548:	e00e      	b.n	8000568 <HAL_InitTick+0x58>
  }
#endif

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800054a:	687b      	ldr	r3, [r7, #4]
 800054c:	2b0f      	cmp	r3, #15
 800054e:	d80a      	bhi.n	8000566 <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000550:	2200      	movs	r2, #0
 8000552:	6879      	ldr	r1, [r7, #4]
 8000554:	f04f 30ff 	mov.w	r0, #4294967295
 8000558:	f000 f94d 	bl	80007f6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800055c:	4a06      	ldr	r2, [pc, #24]	; (8000578 <HAL_InitTick+0x68>)
 800055e:	687b      	ldr	r3, [r7, #4]
 8000560:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000562:	2300      	movs	r3, #0
 8000564:	e000      	b.n	8000568 <HAL_InitTick+0x58>
    return HAL_ERROR;
 8000566:	2301      	movs	r3, #1
}
 8000568:	4618      	mov	r0, r3
 800056a:	3708      	adds	r7, #8
 800056c:	46bd      	mov	sp, r7
 800056e:	bd80      	pop	{r7, pc}
 8000570:	24000004 	.word	0x24000004
 8000574:	24000024 	.word	0x24000024
 8000578:	24000000 	.word	0x24000000

0800057c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800057c:	b480      	push	{r7}
 800057e:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000580:	4b06      	ldr	r3, [pc, #24]	; (800059c <HAL_IncTick+0x20>)
 8000582:	781b      	ldrb	r3, [r3, #0]
 8000584:	461a      	mov	r2, r3
 8000586:	4b06      	ldr	r3, [pc, #24]	; (80005a0 <HAL_IncTick+0x24>)
 8000588:	681b      	ldr	r3, [r3, #0]
 800058a:	4413      	add	r3, r2
 800058c:	4a04      	ldr	r2, [pc, #16]	; (80005a0 <HAL_IncTick+0x24>)
 800058e:	6013      	str	r3, [r2, #0]
}
 8000590:	bf00      	nop
 8000592:	46bd      	mov	sp, r7
 8000594:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000598:	4770      	bx	lr
 800059a:	bf00      	nop
 800059c:	24000004 	.word	0x24000004
 80005a0:	24004194 	.word	0x24004194

080005a4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80005a4:	b480      	push	{r7}
 80005a6:	af00      	add	r7, sp, #0
  return uwTick;
 80005a8:	4b03      	ldr	r3, [pc, #12]	; (80005b8 <HAL_GetTick+0x14>)
 80005aa:	681b      	ldr	r3, [r3, #0]
}
 80005ac:	4618      	mov	r0, r3
 80005ae:	46bd      	mov	sp, r7
 80005b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005b4:	4770      	bx	lr
 80005b6:	bf00      	nop
 80005b8:	24004194 	.word	0x24004194

080005bc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80005bc:	b580      	push	{r7, lr}
 80005be:	b084      	sub	sp, #16
 80005c0:	af00      	add	r7, sp, #0
 80005c2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80005c4:	f7ff ffee 	bl	80005a4 <HAL_GetTick>
 80005c8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80005ca:	687b      	ldr	r3, [r7, #4]
 80005cc:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80005ce:	68fb      	ldr	r3, [r7, #12]
 80005d0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80005d4:	d005      	beq.n	80005e2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80005d6:	4b09      	ldr	r3, [pc, #36]	; (80005fc <HAL_Delay+0x40>)
 80005d8:	781b      	ldrb	r3, [r3, #0]
 80005da:	461a      	mov	r2, r3
 80005dc:	68fb      	ldr	r3, [r7, #12]
 80005de:	4413      	add	r3, r2
 80005e0:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80005e2:	bf00      	nop
 80005e4:	f7ff ffde 	bl	80005a4 <HAL_GetTick>
 80005e8:	4602      	mov	r2, r0
 80005ea:	68bb      	ldr	r3, [r7, #8]
 80005ec:	1ad3      	subs	r3, r2, r3
 80005ee:	68fa      	ldr	r2, [r7, #12]
 80005f0:	429a      	cmp	r2, r3
 80005f2:	d8f7      	bhi.n	80005e4 <HAL_Delay+0x28>
  {
  }
}
 80005f4:	bf00      	nop
 80005f6:	3710      	adds	r7, #16
 80005f8:	46bd      	mov	sp, r7
 80005fa:	bd80      	pop	{r7, pc}
 80005fc:	24000004 	.word	0x24000004

08000600 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 8000600:	b480      	push	{r7}
 8000602:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 8000604:	4b03      	ldr	r3, [pc, #12]	; (8000614 <HAL_GetREVID+0x14>)
 8000606:	681b      	ldr	r3, [r3, #0]
 8000608:	0c1b      	lsrs	r3, r3, #16
}
 800060a:	4618      	mov	r0, r3
 800060c:	46bd      	mov	sp, r7
 800060e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000612:	4770      	bx	lr
 8000614:	5c001000 	.word	0x5c001000

08000618 <HAL_SYSCFG_ETHInterfaceSelect>:
  *   @arg SYSCFG_ETH_MII : Select the Media Independent Interface
  *   @arg SYSCFG_ETH_RMII: Select the Reduced Media Independent Interface
  * @retval None
  */
void HAL_SYSCFG_ETHInterfaceSelect(uint32_t SYSCFG_ETHInterface)
{
 8000618:	b480      	push	{r7}
 800061a:	b083      	sub	sp, #12
 800061c:	af00      	add	r7, sp, #0
 800061e:	6078      	str	r0, [r7, #4]
  /* Check the parameter */
  assert_param(IS_SYSCFG_ETHERNET_CONFIG(SYSCFG_ETHInterface));

  MODIFY_REG(SYSCFG->PMCR, SYSCFG_PMCR_EPIS_SEL, (uint32_t)(SYSCFG_ETHInterface));
 8000620:	4b06      	ldr	r3, [pc, #24]	; (800063c <HAL_SYSCFG_ETHInterfaceSelect+0x24>)
 8000622:	685b      	ldr	r3, [r3, #4]
 8000624:	f423 0260 	bic.w	r2, r3, #14680064	; 0xe00000
 8000628:	4904      	ldr	r1, [pc, #16]	; (800063c <HAL_SYSCFG_ETHInterfaceSelect+0x24>)
 800062a:	687b      	ldr	r3, [r7, #4]
 800062c:	4313      	orrs	r3, r2
 800062e:	604b      	str	r3, [r1, #4]
}
 8000630:	bf00      	nop
 8000632:	370c      	adds	r7, #12
 8000634:	46bd      	mov	sp, r7
 8000636:	f85d 7b04 	ldr.w	r7, [sp], #4
 800063a:	4770      	bx	lr
 800063c:	58000400 	.word	0x58000400

08000640 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000640:	b480      	push	{r7}
 8000642:	b085      	sub	sp, #20
 8000644:	af00      	add	r7, sp, #0
 8000646:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000648:	687b      	ldr	r3, [r7, #4]
 800064a:	f003 0307 	and.w	r3, r3, #7
 800064e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000650:	4b0b      	ldr	r3, [pc, #44]	; (8000680 <__NVIC_SetPriorityGrouping+0x40>)
 8000652:	68db      	ldr	r3, [r3, #12]
 8000654:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000656:	68ba      	ldr	r2, [r7, #8]
 8000658:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800065c:	4013      	ands	r3, r2
 800065e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000660:	68fb      	ldr	r3, [r7, #12]
 8000662:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000664:	68bb      	ldr	r3, [r7, #8]
 8000666:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8000668:	4b06      	ldr	r3, [pc, #24]	; (8000684 <__NVIC_SetPriorityGrouping+0x44>)
 800066a:	4313      	orrs	r3, r2
 800066c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800066e:	4a04      	ldr	r2, [pc, #16]	; (8000680 <__NVIC_SetPriorityGrouping+0x40>)
 8000670:	68bb      	ldr	r3, [r7, #8]
 8000672:	60d3      	str	r3, [r2, #12]
}
 8000674:	bf00      	nop
 8000676:	3714      	adds	r7, #20
 8000678:	46bd      	mov	sp, r7
 800067a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800067e:	4770      	bx	lr
 8000680:	e000ed00 	.word	0xe000ed00
 8000684:	05fa0000 	.word	0x05fa0000

08000688 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000688:	b480      	push	{r7}
 800068a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800068c:	4b04      	ldr	r3, [pc, #16]	; (80006a0 <__NVIC_GetPriorityGrouping+0x18>)
 800068e:	68db      	ldr	r3, [r3, #12]
 8000690:	0a1b      	lsrs	r3, r3, #8
 8000692:	f003 0307 	and.w	r3, r3, #7
}
 8000696:	4618      	mov	r0, r3
 8000698:	46bd      	mov	sp, r7
 800069a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800069e:	4770      	bx	lr
 80006a0:	e000ed00 	.word	0xe000ed00

080006a4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80006a4:	b480      	push	{r7}
 80006a6:	b083      	sub	sp, #12
 80006a8:	af00      	add	r7, sp, #0
 80006aa:	4603      	mov	r3, r0
 80006ac:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 80006ae:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80006b2:	2b00      	cmp	r3, #0
 80006b4:	db0b      	blt.n	80006ce <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80006b6:	88fb      	ldrh	r3, [r7, #6]
 80006b8:	f003 021f 	and.w	r2, r3, #31
 80006bc:	4907      	ldr	r1, [pc, #28]	; (80006dc <__NVIC_EnableIRQ+0x38>)
 80006be:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80006c2:	095b      	lsrs	r3, r3, #5
 80006c4:	2001      	movs	r0, #1
 80006c6:	fa00 f202 	lsl.w	r2, r0, r2
 80006ca:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80006ce:	bf00      	nop
 80006d0:	370c      	adds	r7, #12
 80006d2:	46bd      	mov	sp, r7
 80006d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006d8:	4770      	bx	lr
 80006da:	bf00      	nop
 80006dc:	e000e100 	.word	0xe000e100

080006e0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80006e0:	b480      	push	{r7}
 80006e2:	b083      	sub	sp, #12
 80006e4:	af00      	add	r7, sp, #0
 80006e6:	4603      	mov	r3, r0
 80006e8:	6039      	str	r1, [r7, #0]
 80006ea:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 80006ec:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80006f0:	2b00      	cmp	r3, #0
 80006f2:	db0a      	blt.n	800070a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80006f4:	683b      	ldr	r3, [r7, #0]
 80006f6:	b2da      	uxtb	r2, r3
 80006f8:	490c      	ldr	r1, [pc, #48]	; (800072c <__NVIC_SetPriority+0x4c>)
 80006fa:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80006fe:	0112      	lsls	r2, r2, #4
 8000700:	b2d2      	uxtb	r2, r2
 8000702:	440b      	add	r3, r1
 8000704:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000708:	e00a      	b.n	8000720 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800070a:	683b      	ldr	r3, [r7, #0]
 800070c:	b2da      	uxtb	r2, r3
 800070e:	4908      	ldr	r1, [pc, #32]	; (8000730 <__NVIC_SetPriority+0x50>)
 8000710:	88fb      	ldrh	r3, [r7, #6]
 8000712:	f003 030f 	and.w	r3, r3, #15
 8000716:	3b04      	subs	r3, #4
 8000718:	0112      	lsls	r2, r2, #4
 800071a:	b2d2      	uxtb	r2, r2
 800071c:	440b      	add	r3, r1
 800071e:	761a      	strb	r2, [r3, #24]
}
 8000720:	bf00      	nop
 8000722:	370c      	adds	r7, #12
 8000724:	46bd      	mov	sp, r7
 8000726:	f85d 7b04 	ldr.w	r7, [sp], #4
 800072a:	4770      	bx	lr
 800072c:	e000e100 	.word	0xe000e100
 8000730:	e000ed00 	.word	0xe000ed00

08000734 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000734:	b480      	push	{r7}
 8000736:	b089      	sub	sp, #36	; 0x24
 8000738:	af00      	add	r7, sp, #0
 800073a:	60f8      	str	r0, [r7, #12]
 800073c:	60b9      	str	r1, [r7, #8]
 800073e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000740:	68fb      	ldr	r3, [r7, #12]
 8000742:	f003 0307 	and.w	r3, r3, #7
 8000746:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000748:	69fb      	ldr	r3, [r7, #28]
 800074a:	f1c3 0307 	rsb	r3, r3, #7
 800074e:	2b04      	cmp	r3, #4
 8000750:	bf28      	it	cs
 8000752:	2304      	movcs	r3, #4
 8000754:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000756:	69fb      	ldr	r3, [r7, #28]
 8000758:	3304      	adds	r3, #4
 800075a:	2b06      	cmp	r3, #6
 800075c:	d902      	bls.n	8000764 <NVIC_EncodePriority+0x30>
 800075e:	69fb      	ldr	r3, [r7, #28]
 8000760:	3b03      	subs	r3, #3
 8000762:	e000      	b.n	8000766 <NVIC_EncodePriority+0x32>
 8000764:	2300      	movs	r3, #0
 8000766:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000768:	f04f 32ff 	mov.w	r2, #4294967295
 800076c:	69bb      	ldr	r3, [r7, #24]
 800076e:	fa02 f303 	lsl.w	r3, r2, r3
 8000772:	43da      	mvns	r2, r3
 8000774:	68bb      	ldr	r3, [r7, #8]
 8000776:	401a      	ands	r2, r3
 8000778:	697b      	ldr	r3, [r7, #20]
 800077a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800077c:	f04f 31ff 	mov.w	r1, #4294967295
 8000780:	697b      	ldr	r3, [r7, #20]
 8000782:	fa01 f303 	lsl.w	r3, r1, r3
 8000786:	43d9      	mvns	r1, r3
 8000788:	687b      	ldr	r3, [r7, #4]
 800078a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800078c:	4313      	orrs	r3, r2
         );
}
 800078e:	4618      	mov	r0, r3
 8000790:	3724      	adds	r7, #36	; 0x24
 8000792:	46bd      	mov	sp, r7
 8000794:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000798:	4770      	bx	lr
	...

0800079c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800079c:	b580      	push	{r7, lr}
 800079e:	b082      	sub	sp, #8
 80007a0:	af00      	add	r7, sp, #0
 80007a2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80007a4:	687b      	ldr	r3, [r7, #4]
 80007a6:	3b01      	subs	r3, #1
 80007a8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80007ac:	d301      	bcc.n	80007b2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80007ae:	2301      	movs	r3, #1
 80007b0:	e00f      	b.n	80007d2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80007b2:	4a0a      	ldr	r2, [pc, #40]	; (80007dc <SysTick_Config+0x40>)
 80007b4:	687b      	ldr	r3, [r7, #4]
 80007b6:	3b01      	subs	r3, #1
 80007b8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80007ba:	210f      	movs	r1, #15
 80007bc:	f04f 30ff 	mov.w	r0, #4294967295
 80007c0:	f7ff ff8e 	bl	80006e0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80007c4:	4b05      	ldr	r3, [pc, #20]	; (80007dc <SysTick_Config+0x40>)
 80007c6:	2200      	movs	r2, #0
 80007c8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80007ca:	4b04      	ldr	r3, [pc, #16]	; (80007dc <SysTick_Config+0x40>)
 80007cc:	2207      	movs	r2, #7
 80007ce:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80007d0:	2300      	movs	r3, #0
}
 80007d2:	4618      	mov	r0, r3
 80007d4:	3708      	adds	r7, #8
 80007d6:	46bd      	mov	sp, r7
 80007d8:	bd80      	pop	{r7, pc}
 80007da:	bf00      	nop
 80007dc:	e000e010 	.word	0xe000e010

080007e0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80007e0:	b580      	push	{r7, lr}
 80007e2:	b082      	sub	sp, #8
 80007e4:	af00      	add	r7, sp, #0
 80007e6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80007e8:	6878      	ldr	r0, [r7, #4]
 80007ea:	f7ff ff29 	bl	8000640 <__NVIC_SetPriorityGrouping>
}
 80007ee:	bf00      	nop
 80007f0:	3708      	adds	r7, #8
 80007f2:	46bd      	mov	sp, r7
 80007f4:	bd80      	pop	{r7, pc}

080007f6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80007f6:	b580      	push	{r7, lr}
 80007f8:	b086      	sub	sp, #24
 80007fa:	af00      	add	r7, sp, #0
 80007fc:	4603      	mov	r3, r0
 80007fe:	60b9      	str	r1, [r7, #8]
 8000800:	607a      	str	r2, [r7, #4]
 8000802:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8000804:	f7ff ff40 	bl	8000688 <__NVIC_GetPriorityGrouping>
 8000808:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800080a:	687a      	ldr	r2, [r7, #4]
 800080c:	68b9      	ldr	r1, [r7, #8]
 800080e:	6978      	ldr	r0, [r7, #20]
 8000810:	f7ff ff90 	bl	8000734 <NVIC_EncodePriority>
 8000814:	4602      	mov	r2, r0
 8000816:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800081a:	4611      	mov	r1, r2
 800081c:	4618      	mov	r0, r3
 800081e:	f7ff ff5f 	bl	80006e0 <__NVIC_SetPriority>
}
 8000822:	bf00      	nop
 8000824:	3718      	adds	r7, #24
 8000826:	46bd      	mov	sp, r7
 8000828:	bd80      	pop	{r7, pc}

0800082a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800082a:	b580      	push	{r7, lr}
 800082c:	b082      	sub	sp, #8
 800082e:	af00      	add	r7, sp, #0
 8000830:	4603      	mov	r3, r0
 8000832:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000834:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000838:	4618      	mov	r0, r3
 800083a:	f7ff ff33 	bl	80006a4 <__NVIC_EnableIRQ>
}
 800083e:	bf00      	nop
 8000840:	3708      	adds	r7, #8
 8000842:	46bd      	mov	sp, r7
 8000844:	bd80      	pop	{r7, pc}

08000846 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000846:	b580      	push	{r7, lr}
 8000848:	b082      	sub	sp, #8
 800084a:	af00      	add	r7, sp, #0
 800084c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800084e:	6878      	ldr	r0, [r7, #4]
 8000850:	f7ff ffa4 	bl	800079c <SysTick_Config>
 8000854:	4603      	mov	r3, r0
}
 8000856:	4618      	mov	r0, r3
 8000858:	3708      	adds	r7, #8
 800085a:	46bd      	mov	sp, r7
 800085c:	bd80      	pop	{r7, pc}
	...

08000860 <HAL_MPU_Disable>:
/**
  * @brief  Disables the MPU
  * @retval None
  */
void HAL_MPU_Disable(void)
{
 8000860:	b480      	push	{r7}
 8000862:	af00      	add	r7, sp, #0
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
 8000864:	f3bf 8f5f 	dmb	sy
  /* Make sure outstanding transfers are done */
  __DMB();

  /* Disable fault exceptions */
  SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTENA_Msk;
 8000868:	4b06      	ldr	r3, [pc, #24]	; (8000884 <HAL_MPU_Disable+0x24>)
 800086a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800086c:	4a05      	ldr	r2, [pc, #20]	; (8000884 <HAL_MPU_Disable+0x24>)
 800086e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000872:	6253      	str	r3, [r2, #36]	; 0x24

  /* Disable the MPU and clear the control register*/
  MPU->CTRL = 0;
 8000874:	4b04      	ldr	r3, [pc, #16]	; (8000888 <HAL_MPU_Disable+0x28>)
 8000876:	2200      	movs	r2, #0
 8000878:	605a      	str	r2, [r3, #4]
}
 800087a:	bf00      	nop
 800087c:	46bd      	mov	sp, r7
 800087e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000882:	4770      	bx	lr
 8000884:	e000ed00 	.word	0xe000ed00
 8000888:	e000ed90 	.word	0xe000ed90

0800088c <HAL_MPU_Enable>:
  *            @arg MPU_PRIVILEGED_DEFAULT
  *            @arg MPU_HFNMI_PRIVDEF
  * @retval None
  */
void HAL_MPU_Enable(uint32_t MPU_Control)
{
 800088c:	b480      	push	{r7}
 800088e:	b083      	sub	sp, #12
 8000890:	af00      	add	r7, sp, #0
 8000892:	6078      	str	r0, [r7, #4]
  /* Enable the MPU */
  MPU->CTRL = MPU_Control | MPU_CTRL_ENABLE_Msk;
 8000894:	4a0a      	ldr	r2, [pc, #40]	; (80008c0 <HAL_MPU_Enable+0x34>)
 8000896:	687b      	ldr	r3, [r7, #4]
 8000898:	f043 0301 	orr.w	r3, r3, #1
 800089c:	6053      	str	r3, [r2, #4]

  /* Enable fault exceptions */
  SCB->SHCSR |= SCB_SHCSR_MEMFAULTENA_Msk;
 800089e:	4b09      	ldr	r3, [pc, #36]	; (80008c4 <HAL_MPU_Enable+0x38>)
 80008a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80008a2:	4a08      	ldr	r2, [pc, #32]	; (80008c4 <HAL_MPU_Enable+0x38>)
 80008a4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80008a8:	6253      	str	r3, [r2, #36]	; 0x24
  __ASM volatile ("dsb 0xF":::"memory");
 80008aa:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 80008ae:	f3bf 8f6f 	isb	sy

  /* Ensure MPU setting take effects */
  __DSB();
  __ISB();
}
 80008b2:	bf00      	nop
 80008b4:	370c      	adds	r7, #12
 80008b6:	46bd      	mov	sp, r7
 80008b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008bc:	4770      	bx	lr
 80008be:	bf00      	nop
 80008c0:	e000ed90 	.word	0xe000ed90
 80008c4:	e000ed00 	.word	0xe000ed00

080008c8 <HAL_MPU_ConfigRegion>:
  * @param  MPU_Init Pointer to a MPU_Region_InitTypeDef structure that contains
  *                  the initialization and configuration information.
  * @retval None
  */
void HAL_MPU_ConfigRegion(MPU_Region_InitTypeDef *MPU_Init)
{
 80008c8:	b480      	push	{r7}
 80008ca:	b083      	sub	sp, #12
 80008cc:	af00      	add	r7, sp, #0
 80008ce:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_MPU_REGION_NUMBER(MPU_Init->Number));
  assert_param(IS_MPU_REGION_ENABLE(MPU_Init->Enable));

  /* Set the Region number */
  MPU->RNR = MPU_Init->Number;
 80008d0:	687b      	ldr	r3, [r7, #4]
 80008d2:	785a      	ldrb	r2, [r3, #1]
 80008d4:	4b1d      	ldr	r3, [pc, #116]	; (800094c <HAL_MPU_ConfigRegion+0x84>)
 80008d6:	609a      	str	r2, [r3, #8]

  if ((MPU_Init->Enable) != 0UL)
 80008d8:	687b      	ldr	r3, [r7, #4]
 80008da:	781b      	ldrb	r3, [r3, #0]
 80008dc:	2b00      	cmp	r3, #0
 80008de:	d029      	beq.n	8000934 <HAL_MPU_ConfigRegion+0x6c>
    assert_param(IS_MPU_ACCESS_CACHEABLE(MPU_Init->IsCacheable));
    assert_param(IS_MPU_ACCESS_BUFFERABLE(MPU_Init->IsBufferable));
    assert_param(IS_MPU_SUB_REGION_DISABLE(MPU_Init->SubRegionDisable));
    assert_param(IS_MPU_REGION_SIZE(MPU_Init->Size));

    MPU->RBAR = MPU_Init->BaseAddress;
 80008e0:	4a1a      	ldr	r2, [pc, #104]	; (800094c <HAL_MPU_ConfigRegion+0x84>)
 80008e2:	687b      	ldr	r3, [r7, #4]
 80008e4:	685b      	ldr	r3, [r3, #4]
 80008e6:	60d3      	str	r3, [r2, #12]
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 80008e8:	687b      	ldr	r3, [r7, #4]
 80008ea:	7b1b      	ldrb	r3, [r3, #12]
 80008ec:	071a      	lsls	r2, r3, #28
                ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 80008ee:	687b      	ldr	r3, [r7, #4]
 80008f0:	7adb      	ldrb	r3, [r3, #11]
 80008f2:	061b      	lsls	r3, r3, #24
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 80008f4:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 80008f6:	687b      	ldr	r3, [r7, #4]
 80008f8:	7a9b      	ldrb	r3, [r3, #10]
 80008fa:	04db      	lsls	r3, r3, #19
                ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 80008fc:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 80008fe:	687b      	ldr	r3, [r7, #4]
 8000900:	7b5b      	ldrb	r3, [r3, #13]
 8000902:	049b      	lsls	r3, r3, #18
                ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 8000904:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 8000906:	687b      	ldr	r3, [r7, #4]
 8000908:	7b9b      	ldrb	r3, [r3, #14]
 800090a:	045b      	lsls	r3, r3, #17
                ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 800090c:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 800090e:	687b      	ldr	r3, [r7, #4]
 8000910:	7bdb      	ldrb	r3, [r3, #15]
 8000912:	041b      	lsls	r3, r3, #16
                ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 8000914:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 8000916:	687b      	ldr	r3, [r7, #4]
 8000918:	7a5b      	ldrb	r3, [r3, #9]
 800091a:	021b      	lsls	r3, r3, #8
                ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 800091c:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 800091e:	687b      	ldr	r3, [r7, #4]
 8000920:	7a1b      	ldrb	r3, [r3, #8]
 8000922:	005b      	lsls	r3, r3, #1
                ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 8000924:	4313      	orrs	r3, r2
                ((uint32_t)MPU_Init->Enable                  << MPU_RASR_ENABLE_Pos);
 8000926:	687a      	ldr	r2, [r7, #4]
 8000928:	7812      	ldrb	r2, [r2, #0]
 800092a:	4611      	mov	r1, r2
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 800092c:	4a07      	ldr	r2, [pc, #28]	; (800094c <HAL_MPU_ConfigRegion+0x84>)
                ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 800092e:	430b      	orrs	r3, r1
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8000930:	6113      	str	r3, [r2, #16]
  else
  {
    MPU->RBAR = 0x00;
    MPU->RASR = 0x00;
  }
}
 8000932:	e005      	b.n	8000940 <HAL_MPU_ConfigRegion+0x78>
    MPU->RBAR = 0x00;
 8000934:	4b05      	ldr	r3, [pc, #20]	; (800094c <HAL_MPU_ConfigRegion+0x84>)
 8000936:	2200      	movs	r2, #0
 8000938:	60da      	str	r2, [r3, #12]
    MPU->RASR = 0x00;
 800093a:	4b04      	ldr	r3, [pc, #16]	; (800094c <HAL_MPU_ConfigRegion+0x84>)
 800093c:	2200      	movs	r2, #0
 800093e:	611a      	str	r2, [r3, #16]
}
 8000940:	bf00      	nop
 8000942:	370c      	adds	r7, #12
 8000944:	46bd      	mov	sp, r7
 8000946:	f85d 7b04 	ldr.w	r7, [sp], #4
 800094a:	4770      	bx	lr
 800094c:	e000ed90 	.word	0xe000ed90

08000950 <HAL_ETH_Init>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 8000950:	b580      	push	{r7, lr}
 8000952:	b084      	sub	sp, #16
 8000954:	af00      	add	r7, sp, #0
 8000956:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if(heth == NULL)
 8000958:	687b      	ldr	r3, [r7, #4]
 800095a:	2b00      	cmp	r3, #0
 800095c:	d101      	bne.n	8000962 <HAL_ETH_Init+0x12>
  {
    return HAL_ERROR;
 800095e:	2301      	movs	r3, #1
 8000960:	e0c6      	b.n	8000af0 <HAL_ETH_Init+0x1a0>
  }

#else

  /* Check the ETH peripheral state */
  if(heth->gState == HAL_ETH_STATE_RESET)
 8000962:	687b      	ldr	r3, [r7, #4]
 8000964:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8000966:	2b00      	cmp	r3, #0
 8000968:	d102      	bne.n	8000970 <HAL_ETH_Init+0x20>
  {
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 800096a:	6878      	ldr	r0, [r7, #4]
 800096c:	f00e fcd6 	bl	800f31c <HAL_ETH_MspInit>
  }
#endif /* (USE_HAL_ETH_REGISTER_CALLBACKS) */

  heth->gState = HAL_ETH_STATE_BUSY;
 8000970:	687b      	ldr	r3, [r7, #4]
 8000972:	2223      	movs	r2, #35	; 0x23
 8000974:	655a      	str	r2, [r3, #84]	; 0x54

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000976:	4b60      	ldr	r3, [pc, #384]	; (8000af8 <HAL_ETH_Init+0x1a8>)
 8000978:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800097c:	4a5e      	ldr	r2, [pc, #376]	; (8000af8 <HAL_ETH_Init+0x1a8>)
 800097e:	f043 0302 	orr.w	r3, r3, #2
 8000982:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8000986:	4b5c      	ldr	r3, [pc, #368]	; (8000af8 <HAL_ETH_Init+0x1a8>)
 8000988:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800098c:	f003 0302 	and.w	r3, r3, #2
 8000990:	60bb      	str	r3, [r7, #8]
 8000992:	68bb      	ldr	r3, [r7, #8]

  if(heth->Init.MediaInterface == HAL_ETH_MII_MODE)
 8000994:	687b      	ldr	r3, [r7, #4]
 8000996:	7a1b      	ldrb	r3, [r3, #8]
 8000998:	2b00      	cmp	r3, #0
 800099a:	d103      	bne.n	80009a4 <HAL_ETH_Init+0x54>
  {
    HAL_SYSCFG_ETHInterfaceSelect(SYSCFG_ETH_MII);
 800099c:	2000      	movs	r0, #0
 800099e:	f7ff fe3b 	bl	8000618 <HAL_SYSCFG_ETHInterfaceSelect>
 80009a2:	e003      	b.n	80009ac <HAL_ETH_Init+0x5c>
  }
  else
  {
    HAL_SYSCFG_ETHInterfaceSelect(SYSCFG_ETH_RMII);
 80009a4:	f44f 0000 	mov.w	r0, #8388608	; 0x800000
 80009a8:	f7ff fe36 	bl	8000618 <HAL_SYSCFG_ETHInterfaceSelect>
  }

  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  SET_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR);
 80009ac:	687b      	ldr	r3, [r7, #4]
 80009ae:	681b      	ldr	r3, [r3, #0]
 80009b0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80009b4:	681a      	ldr	r2, [r3, #0]
 80009b6:	687b      	ldr	r3, [r7, #4]
 80009b8:	681b      	ldr	r3, [r3, #0]
 80009ba:	f042 0201 	orr.w	r2, r2, #1
 80009be:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80009c2:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80009c4:	f7ff fdee 	bl	80005a4 <HAL_GetTick>
 80009c8:	60f8      	str	r0, [r7, #12]

  /* Wait for software reset */
  while (READ_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR) > 0U)
 80009ca:	e00f      	b.n	80009ec <HAL_ETH_Init+0x9c>
  {
    if(((HAL_GetTick() - tickstart ) > ETH_SWRESET_TIMEOUT))
 80009cc:	f7ff fdea 	bl	80005a4 <HAL_GetTick>
 80009d0:	4602      	mov	r2, r0
 80009d2:	68fb      	ldr	r3, [r7, #12]
 80009d4:	1ad3      	subs	r3, r2, r3
 80009d6:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 80009da:	d907      	bls.n	80009ec <HAL_ETH_Init+0x9c>
    {
      /* Set Error Code */
      heth->ErrorCode = HAL_ETH_ERROR_TIMEOUT;
 80009dc:	687b      	ldr	r3, [r7, #4]
 80009de:	2204      	movs	r2, #4
 80009e0:	65da      	str	r2, [r3, #92]	; 0x5c
      /* Set State as Error */
      heth->gState = HAL_ETH_STATE_ERROR;
 80009e2:	687b      	ldr	r3, [r7, #4]
 80009e4:	22e0      	movs	r2, #224	; 0xe0
 80009e6:	655a      	str	r2, [r3, #84]	; 0x54
      /* Return Error */
      return HAL_ERROR;
 80009e8:	2301      	movs	r3, #1
 80009ea:	e081      	b.n	8000af0 <HAL_ETH_Init+0x1a0>
  while (READ_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR) > 0U)
 80009ec:	687b      	ldr	r3, [r7, #4]
 80009ee:	681b      	ldr	r3, [r3, #0]
 80009f0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80009f4:	681b      	ldr	r3, [r3, #0]
 80009f6:	f003 0301 	and.w	r3, r3, #1
 80009fa:	2b00      	cmp	r3, #0
 80009fc:	d1e6      	bne.n	80009cc <HAL_ETH_Init+0x7c>
    }
  }

  /*------------------ MDIO CSR Clock Range Configuration --------------------*/
  ETH_MAC_MDIO_ClkConfig(heth);
 80009fe:	6878      	ldr	r0, [r7, #4]
 8000a00:	f001 fa5a 	bl	8001eb8 <ETH_MAC_MDIO_ClkConfig>

  /*------------------ MAC LPI 1US Tic Counter Configuration --------------------*/
  WRITE_REG(heth->Instance->MAC1USTCR, (((uint32_t)HAL_RCC_GetHCLKFreq() / ETH_MAC_US_TICK) - 1U));
 8000a04:	f002 fe78 	bl	80036f8 <HAL_RCC_GetHCLKFreq>
 8000a08:	4602      	mov	r2, r0
 8000a0a:	4b3c      	ldr	r3, [pc, #240]	; (8000afc <HAL_ETH_Init+0x1ac>)
 8000a0c:	fba3 2302 	umull	r2, r3, r3, r2
 8000a10:	0c9a      	lsrs	r2, r3, #18
 8000a12:	687b      	ldr	r3, [r7, #4]
 8000a14:	681b      	ldr	r3, [r3, #0]
 8000a16:	3a01      	subs	r2, #1
 8000a18:	f8c3 20dc 	str.w	r2, [r3, #220]	; 0xdc

  /*------------------ MAC, MTL and DMA default Configuration ----------------*/
  ETH_MACDMAConfig(heth);
 8000a1c:	6878      	ldr	r0, [r7, #4]
 8000a1e:	f001 f9ad 	bl	8001d7c <ETH_MACDMAConfig>

  /* SET DSL to 64 bit */
  MODIFY_REG(heth->Instance->DMACCR, ETH_DMACCR_DSL, ETH_DMACCR_DSL_64BIT);
 8000a22:	687b      	ldr	r3, [r7, #4]
 8000a24:	681b      	ldr	r3, [r3, #0]
 8000a26:	f503 5388 	add.w	r3, r3, #4352	; 0x1100
 8000a2a:	681b      	ldr	r3, [r3, #0]
 8000a2c:	f423 12e0 	bic.w	r2, r3, #1835008	; 0x1c0000
 8000a30:	687b      	ldr	r3, [r7, #4]
 8000a32:	681b      	ldr	r3, [r3, #0]
 8000a34:	f442 2200 	orr.w	r2, r2, #524288	; 0x80000
 8000a38:	f503 5388 	add.w	r3, r3, #4352	; 0x1100
 8000a3c:	601a      	str	r2, [r3, #0]

  /* Set Receive Buffers Length (must be a multiple of 4) */
  if ((heth->Init.RxBuffLen % 0x4U) != 0x0U)
 8000a3e:	687b      	ldr	r3, [r7, #4]
 8000a40:	695b      	ldr	r3, [r3, #20]
 8000a42:	f003 0303 	and.w	r3, r3, #3
 8000a46:	2b00      	cmp	r3, #0
 8000a48:	d007      	beq.n	8000a5a <HAL_ETH_Init+0x10a>
  {
    /* Set Error Code */
    heth->ErrorCode = HAL_ETH_ERROR_PARAM;
 8000a4a:	687b      	ldr	r3, [r7, #4]
 8000a4c:	2201      	movs	r2, #1
 8000a4e:	65da      	str	r2, [r3, #92]	; 0x5c
    /* Set State as Error */
    heth->gState = HAL_ETH_STATE_ERROR;
 8000a50:	687b      	ldr	r3, [r7, #4]
 8000a52:	22e0      	movs	r2, #224	; 0xe0
 8000a54:	655a      	str	r2, [r3, #84]	; 0x54
    /* Return Error */
    return HAL_ERROR;
 8000a56:	2301      	movs	r3, #1
 8000a58:	e04a      	b.n	8000af0 <HAL_ETH_Init+0x1a0>
  }
  else
  {
    MODIFY_REG(heth->Instance->DMACRCR, ETH_DMACRCR_RBSZ, ((heth->Init.RxBuffLen) << 1));
 8000a5a:	687b      	ldr	r3, [r7, #4]
 8000a5c:	681a      	ldr	r2, [r3, #0]
 8000a5e:	f241 1308 	movw	r3, #4360	; 0x1108
 8000a62:	4413      	add	r3, r2
 8000a64:	681a      	ldr	r2, [r3, #0]
 8000a66:	4b26      	ldr	r3, [pc, #152]	; (8000b00 <HAL_ETH_Init+0x1b0>)
 8000a68:	4013      	ands	r3, r2
 8000a6a:	687a      	ldr	r2, [r7, #4]
 8000a6c:	6952      	ldr	r2, [r2, #20]
 8000a6e:	0052      	lsls	r2, r2, #1
 8000a70:	6879      	ldr	r1, [r7, #4]
 8000a72:	6809      	ldr	r1, [r1, #0]
 8000a74:	431a      	orrs	r2, r3
 8000a76:	f241 1308 	movw	r3, #4360	; 0x1108
 8000a7a:	440b      	add	r3, r1
 8000a7c:	601a      	str	r2, [r3, #0]
  }

  /*------------------ DMA Tx Descriptors Configuration ----------------------*/
  ETH_DMATxDescListInit(heth);
 8000a7e:	6878      	ldr	r0, [r7, #4]
 8000a80:	f001 fa72 	bl	8001f68 <ETH_DMATxDescListInit>

  /*------------------ DMA Rx Descriptors Configuration ----------------------*/
  ETH_DMARxDescListInit(heth);
 8000a84:	6878      	ldr	r0, [r7, #4]
 8000a86:	f001 fab6 	bl	8001ff6 <ETH_DMARxDescListInit>

  /*--------------------- ETHERNET MAC Address Configuration ------------------*/
  /* Set MAC addr bits 32 to 47 */
  heth->Instance->MACA0HR = (((uint32_t)(heth->Init.MACAddr[5]) << 8) | (uint32_t)heth->Init.MACAddr[4]);
 8000a8a:	687b      	ldr	r3, [r7, #4]
 8000a8c:	685b      	ldr	r3, [r3, #4]
 8000a8e:	3305      	adds	r3, #5
 8000a90:	781b      	ldrb	r3, [r3, #0]
 8000a92:	021a      	lsls	r2, r3, #8
 8000a94:	687b      	ldr	r3, [r7, #4]
 8000a96:	685b      	ldr	r3, [r3, #4]
 8000a98:	3304      	adds	r3, #4
 8000a9a:	781b      	ldrb	r3, [r3, #0]
 8000a9c:	4619      	mov	r1, r3
 8000a9e:	687b      	ldr	r3, [r7, #4]
 8000aa0:	681b      	ldr	r3, [r3, #0]
 8000aa2:	430a      	orrs	r2, r1
 8000aa4:	f8c3 2300 	str.w	r2, [r3, #768]	; 0x300
  /* Set MAC addr bits 0 to 31 */
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 8000aa8:	687b      	ldr	r3, [r7, #4]
 8000aaa:	685b      	ldr	r3, [r3, #4]
 8000aac:	3303      	adds	r3, #3
 8000aae:	781b      	ldrb	r3, [r3, #0]
 8000ab0:	061a      	lsls	r2, r3, #24
 8000ab2:	687b      	ldr	r3, [r7, #4]
 8000ab4:	685b      	ldr	r3, [r3, #4]
 8000ab6:	3302      	adds	r3, #2
 8000ab8:	781b      	ldrb	r3, [r3, #0]
 8000aba:	041b      	lsls	r3, r3, #16
 8000abc:	431a      	orrs	r2, r3
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 8000abe:	687b      	ldr	r3, [r7, #4]
 8000ac0:	685b      	ldr	r3, [r3, #4]
 8000ac2:	3301      	adds	r3, #1
 8000ac4:	781b      	ldrb	r3, [r3, #0]
 8000ac6:	021b      	lsls	r3, r3, #8
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 8000ac8:	431a      	orrs	r2, r3
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 8000aca:	687b      	ldr	r3, [r7, #4]
 8000acc:	685b      	ldr	r3, [r3, #4]
 8000ace:	781b      	ldrb	r3, [r3, #0]
 8000ad0:	4619      	mov	r1, r3
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 8000ad2:	687b      	ldr	r3, [r7, #4]
 8000ad4:	681b      	ldr	r3, [r3, #0]
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 8000ad6:	430a      	orrs	r2, r1
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 8000ad8:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304

  heth->ErrorCode = HAL_ETH_ERROR_NONE;
 8000adc:	687b      	ldr	r3, [r7, #4]
 8000ade:	2200      	movs	r2, #0
 8000ae0:	65da      	str	r2, [r3, #92]	; 0x5c
  heth->gState = HAL_ETH_STATE_READY;
 8000ae2:	687b      	ldr	r3, [r7, #4]
 8000ae4:	2210      	movs	r2, #16
 8000ae6:	655a      	str	r2, [r3, #84]	; 0x54
  heth->RxState = HAL_ETH_STATE_READY;
 8000ae8:	687b      	ldr	r3, [r7, #4]
 8000aea:	2210      	movs	r2, #16
 8000aec:	659a      	str	r2, [r3, #88]	; 0x58

  return HAL_OK;
 8000aee:	2300      	movs	r3, #0
}
 8000af0:	4618      	mov	r0, r3
 8000af2:	3710      	adds	r7, #16
 8000af4:	46bd      	mov	sp, r7
 8000af6:	bd80      	pop	{r7, pc}
 8000af8:	58024400 	.word	0x58024400
 8000afc:	431bde83 	.word	0x431bde83
 8000b00:	ffff8001 	.word	0xffff8001

08000b04 <HAL_ETH_DescAssignMemory>:
  * @param  pBuffer1: address of buffer 1
  * @param  pBuffer2: address of buffer 2 if available
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_DescAssignMemory(ETH_HandleTypeDef *heth, uint32_t Index, uint8_t *pBuffer1, uint8_t *pBuffer2)
{
 8000b04:	b480      	push	{r7}
 8000b06:	b087      	sub	sp, #28
 8000b08:	af00      	add	r7, sp, #0
 8000b0a:	60f8      	str	r0, [r7, #12]
 8000b0c:	60b9      	str	r1, [r7, #8]
 8000b0e:	607a      	str	r2, [r7, #4]
 8000b10:	603b      	str	r3, [r7, #0]
  ETH_DMADescTypeDef *dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[Index];
 8000b12:	68fa      	ldr	r2, [r7, #12]
 8000b14:	68bb      	ldr	r3, [r7, #8]
 8000b16:	330a      	adds	r3, #10
 8000b18:	009b      	lsls	r3, r3, #2
 8000b1a:	4413      	add	r3, r2
 8000b1c:	685b      	ldr	r3, [r3, #4]
 8000b1e:	617b      	str	r3, [r7, #20]

  if((pBuffer1 == NULL) || (Index >= (uint32_t)ETH_RX_DESC_CNT))
 8000b20:	687b      	ldr	r3, [r7, #4]
 8000b22:	2b00      	cmp	r3, #0
 8000b24:	d002      	beq.n	8000b2c <HAL_ETH_DescAssignMemory+0x28>
 8000b26:	68bb      	ldr	r3, [r7, #8]
 8000b28:	2b03      	cmp	r3, #3
 8000b2a:	d904      	bls.n	8000b36 <HAL_ETH_DescAssignMemory+0x32>
  {
    /* Set Error Code */
    heth->ErrorCode = HAL_ETH_ERROR_PARAM;
 8000b2c:	68fb      	ldr	r3, [r7, #12]
 8000b2e:	2201      	movs	r2, #1
 8000b30:	65da      	str	r2, [r3, #92]	; 0x5c
    /* Return Error */
    return HAL_ERROR;
 8000b32:	2301      	movs	r3, #1
 8000b34:	e021      	b.n	8000b7a <HAL_ETH_DescAssignMemory+0x76>
  }

  /* write buffer address to RDES0 */
  WRITE_REG(dmarxdesc->DESC0, (uint32_t)pBuffer1);
 8000b36:	687a      	ldr	r2, [r7, #4]
 8000b38:	697b      	ldr	r3, [r7, #20]
 8000b3a:	601a      	str	r2, [r3, #0]
  /* store buffer address */
  WRITE_REG(dmarxdesc->BackupAddr0, (uint32_t)pBuffer1);
 8000b3c:	687a      	ldr	r2, [r7, #4]
 8000b3e:	697b      	ldr	r3, [r7, #20]
 8000b40:	611a      	str	r2, [r3, #16]
  /* set buffer address valid bit to RDES3 */
  SET_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCRF_BUF1V);
 8000b42:	697b      	ldr	r3, [r7, #20]
 8000b44:	68db      	ldr	r3, [r3, #12]
 8000b46:	f043 7280 	orr.w	r2, r3, #16777216	; 0x1000000
 8000b4a:	697b      	ldr	r3, [r7, #20]
 8000b4c:	60da      	str	r2, [r3, #12]

  if(pBuffer2 != NULL)
 8000b4e:	683b      	ldr	r3, [r7, #0]
 8000b50:	2b00      	cmp	r3, #0
 8000b52:	d00b      	beq.n	8000b6c <HAL_ETH_DescAssignMemory+0x68>
  {
    /* write buffer 2 address to RDES1 */
    WRITE_REG(dmarxdesc->DESC2, (uint32_t)pBuffer2);
 8000b54:	683a      	ldr	r2, [r7, #0]
 8000b56:	697b      	ldr	r3, [r7, #20]
 8000b58:	609a      	str	r2, [r3, #8]
     /* store buffer 2 address */
    WRITE_REG(dmarxdesc->BackupAddr1, (uint32_t)pBuffer2);
 8000b5a:	683a      	ldr	r2, [r7, #0]
 8000b5c:	697b      	ldr	r3, [r7, #20]
 8000b5e:	615a      	str	r2, [r3, #20]
    /* set buffer 2 address valid bit to RDES3 */
    SET_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCRF_BUF2V);
 8000b60:	697b      	ldr	r3, [r7, #20]
 8000b62:	68db      	ldr	r3, [r3, #12]
 8000b64:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 8000b68:	697b      	ldr	r3, [r7, #20]
 8000b6a:	60da      	str	r2, [r3, #12]
  }
  /* set OWN bit to RDES3 */
  SET_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCRF_OWN);
 8000b6c:	697b      	ldr	r3, [r7, #20]
 8000b6e:	68db      	ldr	r3, [r3, #12]
 8000b70:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8000b74:	697b      	ldr	r3, [r7, #20]
 8000b76:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8000b78:	2300      	movs	r3, #0
}
 8000b7a:	4618      	mov	r0, r3
 8000b7c:	371c      	adds	r7, #28
 8000b7e:	46bd      	mov	sp, r7
 8000b80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b84:	4770      	bx	lr

08000b86 <HAL_ETH_Start_IT>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Start_IT(ETH_HandleTypeDef *heth)
{
 8000b86:	b480      	push	{r7}
 8000b88:	b087      	sub	sp, #28
 8000b8a:	af00      	add	r7, sp, #0
 8000b8c:	6078      	str	r0, [r7, #4]
  uint32_t descindex = 0, counter;
 8000b8e:	2300      	movs	r3, #0
 8000b90:	617b      	str	r3, [r7, #20]
  ETH_DMADescTypeDef *dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descindex];
 8000b92:	687a      	ldr	r2, [r7, #4]
 8000b94:	697b      	ldr	r3, [r7, #20]
 8000b96:	330a      	adds	r3, #10
 8000b98:	009b      	lsls	r3, r3, #2
 8000b9a:	4413      	add	r3, r2
 8000b9c:	685b      	ldr	r3, [r3, #4]
 8000b9e:	60fb      	str	r3, [r7, #12]

  if(heth->gState == HAL_ETH_STATE_READY)
 8000ba0:	687b      	ldr	r3, [r7, #4]
 8000ba2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8000ba4:	2b10      	cmp	r3, #16
 8000ba6:	d17d      	bne.n	8000ca4 <HAL_ETH_Start_IT+0x11e>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 8000ba8:	687b      	ldr	r3, [r7, #4]
 8000baa:	2223      	movs	r2, #35	; 0x23
 8000bac:	655a      	str	r2, [r3, #84]	; 0x54

    /* Set IOC bit to all Rx descriptors */
    for(counter= 0; counter < (uint32_t)ETH_RX_DESC_CNT; counter++)
 8000bae:	2300      	movs	r3, #0
 8000bb0:	613b      	str	r3, [r7, #16]
 8000bb2:	e018      	b.n	8000be6 <HAL_ETH_Start_IT+0x60>
    {
      SET_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCRF_IOC);
 8000bb4:	68fb      	ldr	r3, [r7, #12]
 8000bb6:	68db      	ldr	r3, [r3, #12]
 8000bb8:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8000bbc:	68fb      	ldr	r3, [r7, #12]
 8000bbe:	60da      	str	r2, [r3, #12]
      INCR_RX_DESC_INDEX(descindex, 1U);
 8000bc0:	697b      	ldr	r3, [r7, #20]
 8000bc2:	3301      	adds	r3, #1
 8000bc4:	617b      	str	r3, [r7, #20]
 8000bc6:	697b      	ldr	r3, [r7, #20]
 8000bc8:	2b03      	cmp	r3, #3
 8000bca:	d902      	bls.n	8000bd2 <HAL_ETH_Start_IT+0x4c>
 8000bcc:	697b      	ldr	r3, [r7, #20]
 8000bce:	3b04      	subs	r3, #4
 8000bd0:	617b      	str	r3, [r7, #20]
      dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descindex];
 8000bd2:	687a      	ldr	r2, [r7, #4]
 8000bd4:	697b      	ldr	r3, [r7, #20]
 8000bd6:	330a      	adds	r3, #10
 8000bd8:	009b      	lsls	r3, r3, #2
 8000bda:	4413      	add	r3, r2
 8000bdc:	685b      	ldr	r3, [r3, #4]
 8000bde:	60fb      	str	r3, [r7, #12]
    for(counter= 0; counter < (uint32_t)ETH_RX_DESC_CNT; counter++)
 8000be0:	693b      	ldr	r3, [r7, #16]
 8000be2:	3301      	adds	r3, #1
 8000be4:	613b      	str	r3, [r7, #16]
 8000be6:	693b      	ldr	r3, [r7, #16]
 8000be8:	2b03      	cmp	r3, #3
 8000bea:	d9e3      	bls.n	8000bb4 <HAL_ETH_Start_IT+0x2e>
    }

    /* save IT mode to ETH Handle */
    heth->RxDescList.ItMode = 1U;
 8000bec:	687b      	ldr	r3, [r7, #4]
 8000bee:	2201      	movs	r2, #1
 8000bf0:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Enable the MAC transmission */
    SET_BIT(heth->Instance->MACCR, ETH_MACCR_TE);
 8000bf2:	687b      	ldr	r3, [r7, #4]
 8000bf4:	681b      	ldr	r3, [r3, #0]
 8000bf6:	681a      	ldr	r2, [r3, #0]
 8000bf8:	687b      	ldr	r3, [r7, #4]
 8000bfa:	681b      	ldr	r3, [r3, #0]
 8000bfc:	f042 0202 	orr.w	r2, r2, #2
 8000c00:	601a      	str	r2, [r3, #0]

    /* Enable the MAC reception */
    SET_BIT(heth->Instance->MACCR, ETH_MACCR_RE);
 8000c02:	687b      	ldr	r3, [r7, #4]
 8000c04:	681b      	ldr	r3, [r3, #0]
 8000c06:	681a      	ldr	r2, [r3, #0]
 8000c08:	687b      	ldr	r3, [r7, #4]
 8000c0a:	681b      	ldr	r3, [r3, #0]
 8000c0c:	f042 0201 	orr.w	r2, r2, #1
 8000c10:	601a      	str	r2, [r3, #0]

    /* Set the Flush Transmit FIFO bit */
    SET_BIT(heth->Instance->MTLTQOMR, ETH_MTLTQOMR_FTQ);
 8000c12:	687b      	ldr	r3, [r7, #4]
 8000c14:	681b      	ldr	r3, [r3, #0]
 8000c16:	f8d3 2d00 	ldr.w	r2, [r3, #3328]	; 0xd00
 8000c1a:	687b      	ldr	r3, [r7, #4]
 8000c1c:	681b      	ldr	r3, [r3, #0]
 8000c1e:	f042 0201 	orr.w	r2, r2, #1
 8000c22:	f8c3 2d00 	str.w	r2, [r3, #3328]	; 0xd00

    /* Enable the DMA transmission */
    SET_BIT(heth->Instance->DMACTCR, ETH_DMACTCR_ST);
 8000c26:	687b      	ldr	r3, [r7, #4]
 8000c28:	681a      	ldr	r2, [r3, #0]
 8000c2a:	f241 1304 	movw	r3, #4356	; 0x1104
 8000c2e:	4413      	add	r3, r2
 8000c30:	681b      	ldr	r3, [r3, #0]
 8000c32:	687a      	ldr	r2, [r7, #4]
 8000c34:	6811      	ldr	r1, [r2, #0]
 8000c36:	f043 0201 	orr.w	r2, r3, #1
 8000c3a:	f241 1304 	movw	r3, #4356	; 0x1104
 8000c3e:	440b      	add	r3, r1
 8000c40:	601a      	str	r2, [r3, #0]

    /* Enable the DMA reception */
    SET_BIT(heth->Instance->DMACRCR, ETH_DMACRCR_SR);
 8000c42:	687b      	ldr	r3, [r7, #4]
 8000c44:	681a      	ldr	r2, [r3, #0]
 8000c46:	f241 1308 	movw	r3, #4360	; 0x1108
 8000c4a:	4413      	add	r3, r2
 8000c4c:	681b      	ldr	r3, [r3, #0]
 8000c4e:	687a      	ldr	r2, [r7, #4]
 8000c50:	6811      	ldr	r1, [r2, #0]
 8000c52:	f043 0201 	orr.w	r2, r3, #1
 8000c56:	f241 1308 	movw	r3, #4360	; 0x1108
 8000c5a:	440b      	add	r3, r1
 8000c5c:	601a      	str	r2, [r3, #0]

    /* Clear Tx and Rx process stopped flags */
    heth->Instance->DMACSR |= (ETH_DMACSR_TPS | ETH_DMACSR_RPS);
 8000c5e:	687b      	ldr	r3, [r7, #4]
 8000c60:	681b      	ldr	r3, [r3, #0]
 8000c62:	f503 538b 	add.w	r3, r3, #4448	; 0x1160
 8000c66:	681a      	ldr	r2, [r3, #0]
 8000c68:	687b      	ldr	r3, [r7, #4]
 8000c6a:	681b      	ldr	r3, [r3, #0]
 8000c6c:	f442 7281 	orr.w	r2, r2, #258	; 0x102
 8000c70:	f503 538b 	add.w	r3, r3, #4448	; 0x1160
 8000c74:	601a      	str	r2, [r3, #0]

    heth->gState = HAL_ETH_STATE_READY;
 8000c76:	687b      	ldr	r3, [r7, #4]
 8000c78:	2210      	movs	r2, #16
 8000c7a:	655a      	str	r2, [r3, #84]	; 0x54
    heth->RxState = HAL_ETH_STATE_BUSY_RX;
 8000c7c:	687b      	ldr	r3, [r7, #4]
 8000c7e:	2222      	movs	r2, #34	; 0x22
 8000c80:	659a      	str	r2, [r3, #88]	; 0x58
    /* Enable ETH DMA interrupts:
    - Tx complete interrupt
    - Rx complete interrupt
    - Fatal bus interrupt
    */
    __HAL_ETH_DMA_ENABLE_IT(heth, (ETH_DMACIER_NIE | ETH_DMACIER_RIE | ETH_DMACIER_TIE  |
 8000c82:	687b      	ldr	r3, [r7, #4]
 8000c84:	681a      	ldr	r2, [r3, #0]
 8000c86:	f241 1334 	movw	r3, #4404	; 0x1134
 8000c8a:	4413      	add	r3, r2
 8000c8c:	681b      	ldr	r3, [r3, #0]
 8000c8e:	687a      	ldr	r2, [r7, #4]
 8000c90:	6811      	ldr	r1, [r2, #0]
 8000c92:	f24d 0241 	movw	r2, #53313	; 0xd041
 8000c96:	431a      	orrs	r2, r3
 8000c98:	f241 1334 	movw	r3, #4404	; 0x1134
 8000c9c:	440b      	add	r3, r1
 8000c9e:	601a      	str	r2, [r3, #0]
                                   ETH_DMACIER_FBEE | ETH_DMACIER_AIE));

    return HAL_OK;
 8000ca0:	2300      	movs	r3, #0
 8000ca2:	e000      	b.n	8000ca6 <HAL_ETH_Start_IT+0x120>
  }
  else
  {
    return HAL_ERROR;
 8000ca4:	2301      	movs	r3, #1
  }
}
 8000ca6:	4618      	mov	r0, r3
 8000ca8:	371c      	adds	r7, #28
 8000caa:	46bd      	mov	sp, r7
 8000cac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cb0:	4770      	bx	lr

08000cb2 <HAL_ETH_Transmit>:
  * @param  pTxConfig: Hold the configuration of packet to be transmitted
  * @param  Timeout: timeout value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Transmit(ETH_HandleTypeDef *heth, ETH_TxPacketConfig *pTxConfig, uint32_t Timeout)
{
 8000cb2:	b580      	push	{r7, lr}
 8000cb4:	b086      	sub	sp, #24
 8000cb6:	af00      	add	r7, sp, #0
 8000cb8:	60f8      	str	r0, [r7, #12]
 8000cba:	60b9      	str	r1, [r7, #8]
 8000cbc:	607a      	str	r2, [r7, #4]
  uint32_t tickstart;
  const ETH_DMADescTypeDef *dmatxdesc;

  if(pTxConfig == NULL)
 8000cbe:	68bb      	ldr	r3, [r7, #8]
 8000cc0:	2b00      	cmp	r3, #0
 8000cc2:	d107      	bne.n	8000cd4 <HAL_ETH_Transmit+0x22>
  {
    heth->ErrorCode |= HAL_ETH_ERROR_PARAM;
 8000cc4:	68fb      	ldr	r3, [r7, #12]
 8000cc6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000cc8:	f043 0201 	orr.w	r2, r3, #1
 8000ccc:	68fb      	ldr	r3, [r7, #12]
 8000cce:	65da      	str	r2, [r3, #92]	; 0x5c
    return HAL_ERROR;
 8000cd0:	2301      	movs	r3, #1
 8000cd2:	e076      	b.n	8000dc2 <HAL_ETH_Transmit+0x110>
  }

  if(heth->gState == HAL_ETH_STATE_READY)
 8000cd4:	68fb      	ldr	r3, [r7, #12]
 8000cd6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8000cd8:	2b10      	cmp	r3, #16
 8000cda:	d171      	bne.n	8000dc0 <HAL_ETH_Transmit+0x10e>
  {
    /* Config DMA Tx descriptor by Tx Packet info */
    if (ETH_Prepare_Tx_Descriptors(heth, pTxConfig, 0) != HAL_ETH_ERROR_NONE)
 8000cdc:	2200      	movs	r2, #0
 8000cde:	68b9      	ldr	r1, [r7, #8]
 8000ce0:	68f8      	ldr	r0, [r7, #12]
 8000ce2:	f001 f9e5 	bl	80020b0 <ETH_Prepare_Tx_Descriptors>
 8000ce6:	4603      	mov	r3, r0
 8000ce8:	2b00      	cmp	r3, #0
 8000cea:	d007      	beq.n	8000cfc <HAL_ETH_Transmit+0x4a>
    {
      /* Set the ETH error code */
      heth->ErrorCode |= HAL_ETH_ERROR_BUSY;
 8000cec:	68fb      	ldr	r3, [r7, #12]
 8000cee:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000cf0:	f043 0202 	orr.w	r2, r3, #2
 8000cf4:	68fb      	ldr	r3, [r7, #12]
 8000cf6:	65da      	str	r2, [r3, #92]	; 0x5c
      return HAL_ERROR;
 8000cf8:	2301      	movs	r3, #1
 8000cfa:	e062      	b.n	8000dc2 <HAL_ETH_Transmit+0x110>
    }

    dmatxdesc = (ETH_DMADescTypeDef *)(&heth->TxDescList)->TxDesc[heth->TxDescList.CurTxDesc];
 8000cfc:	68fb      	ldr	r3, [r7, #12]
 8000cfe:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8000d00:	68fb      	ldr	r3, [r7, #12]
 8000d02:	3206      	adds	r2, #6
 8000d04:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000d08:	617b      	str	r3, [r7, #20]

    /* Incr current tx desc index */
    INCR_TX_DESC_INDEX(heth->TxDescList.CurTxDesc, 1U);
 8000d0a:	68fb      	ldr	r3, [r7, #12]
 8000d0c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000d0e:	1c5a      	adds	r2, r3, #1
 8000d10:	68fb      	ldr	r3, [r7, #12]
 8000d12:	629a      	str	r2, [r3, #40]	; 0x28
 8000d14:	68fb      	ldr	r3, [r7, #12]
 8000d16:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000d18:	2b03      	cmp	r3, #3
 8000d1a:	d904      	bls.n	8000d26 <HAL_ETH_Transmit+0x74>
 8000d1c:	68fb      	ldr	r3, [r7, #12]
 8000d1e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000d20:	1f1a      	subs	r2, r3, #4
 8000d22:	68fb      	ldr	r3, [r7, #12]
 8000d24:	629a      	str	r2, [r3, #40]	; 0x28

    /* Start transmission */
    /* issue a poll command to Tx DMA by writing address of next immediate free descriptor */
    WRITE_REG(heth->Instance->DMACTDTPR, (uint32_t)(heth->TxDescList.TxDesc[heth->TxDescList.CurTxDesc]));
 8000d26:	68fb      	ldr	r3, [r7, #12]
 8000d28:	6a99      	ldr	r1, [r3, #40]	; 0x28
 8000d2a:	68fb      	ldr	r3, [r7, #12]
 8000d2c:	681b      	ldr	r3, [r3, #0]
 8000d2e:	68fa      	ldr	r2, [r7, #12]
 8000d30:	3106      	adds	r1, #6
 8000d32:	f852 2021 	ldr.w	r2, [r2, r1, lsl #2]
 8000d36:	f503 5389 	add.w	r3, r3, #4384	; 0x1120
 8000d3a:	601a      	str	r2, [r3, #0]

    tickstart = HAL_GetTick();
 8000d3c:	f7ff fc32 	bl	80005a4 <HAL_GetTick>
 8000d40:	6138      	str	r0, [r7, #16]

    /* Wait for data to be transmitted or timeout occured */
    while((dmatxdesc->DESC3 & ETH_DMATXNDESCWBF_OWN) != (uint32_t)RESET)
 8000d42:	e034      	b.n	8000dae <HAL_ETH_Transmit+0xfc>
    {
      if((heth->Instance->DMACSR & ETH_DMACSR_FBE) != (uint32_t)RESET)
 8000d44:	68fb      	ldr	r3, [r7, #12]
 8000d46:	681b      	ldr	r3, [r3, #0]
 8000d48:	f503 538b 	add.w	r3, r3, #4448	; 0x1160
 8000d4c:	681b      	ldr	r3, [r3, #0]
 8000d4e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000d52:	2b00      	cmp	r3, #0
 8000d54:	d011      	beq.n	8000d7a <HAL_ETH_Transmit+0xc8>
      {
        heth->ErrorCode |= HAL_ETH_ERROR_DMA;
 8000d56:	68fb      	ldr	r3, [r7, #12]
 8000d58:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000d5a:	f043 0208 	orr.w	r2, r3, #8
 8000d5e:	68fb      	ldr	r3, [r7, #12]
 8000d60:	65da      	str	r2, [r3, #92]	; 0x5c
        heth->DMAErrorCode = heth->Instance->DMACSR;
 8000d62:	68fb      	ldr	r3, [r7, #12]
 8000d64:	681b      	ldr	r3, [r3, #0]
 8000d66:	f503 538b 	add.w	r3, r3, #4448	; 0x1160
 8000d6a:	681a      	ldr	r2, [r3, #0]
 8000d6c:	68fb      	ldr	r3, [r7, #12]
 8000d6e:	661a      	str	r2, [r3, #96]	; 0x60
        /* Set ETH HAL State to Ready */
        heth->gState = HAL_ETH_STATE_ERROR;
 8000d70:	68fb      	ldr	r3, [r7, #12]
 8000d72:	22e0      	movs	r2, #224	; 0xe0
 8000d74:	655a      	str	r2, [r3, #84]	; 0x54
        /* Return function status */
        return HAL_ERROR;
 8000d76:	2301      	movs	r3, #1
 8000d78:	e023      	b.n	8000dc2 <HAL_ETH_Transmit+0x110>
      }

      /* Check for the Timeout */
      if(Timeout != HAL_MAX_DELAY)
 8000d7a:	687b      	ldr	r3, [r7, #4]
 8000d7c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000d80:	d015      	beq.n	8000dae <HAL_ETH_Transmit+0xfc>
      {
        if(((HAL_GetTick() - tickstart ) > Timeout) || (Timeout == 0U))
 8000d82:	f7ff fc0f 	bl	80005a4 <HAL_GetTick>
 8000d86:	4602      	mov	r2, r0
 8000d88:	693b      	ldr	r3, [r7, #16]
 8000d8a:	1ad3      	subs	r3, r2, r3
 8000d8c:	687a      	ldr	r2, [r7, #4]
 8000d8e:	429a      	cmp	r2, r3
 8000d90:	d302      	bcc.n	8000d98 <HAL_ETH_Transmit+0xe6>
 8000d92:	687b      	ldr	r3, [r7, #4]
 8000d94:	2b00      	cmp	r3, #0
 8000d96:	d10a      	bne.n	8000dae <HAL_ETH_Transmit+0xfc>
        {
          heth->ErrorCode |= HAL_ETH_ERROR_TIMEOUT;
 8000d98:	68fb      	ldr	r3, [r7, #12]
 8000d9a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000d9c:	f043 0204 	orr.w	r2, r3, #4
 8000da0:	68fb      	ldr	r3, [r7, #12]
 8000da2:	65da      	str	r2, [r3, #92]	; 0x5c
          heth->gState = HAL_ETH_STATE_READY;
 8000da4:	68fb      	ldr	r3, [r7, #12]
 8000da6:	2210      	movs	r2, #16
 8000da8:	655a      	str	r2, [r3, #84]	; 0x54
          return HAL_ERROR;
 8000daa:	2301      	movs	r3, #1
 8000dac:	e009      	b.n	8000dc2 <HAL_ETH_Transmit+0x110>
    while((dmatxdesc->DESC3 & ETH_DMATXNDESCWBF_OWN) != (uint32_t)RESET)
 8000dae:	697b      	ldr	r3, [r7, #20]
 8000db0:	68db      	ldr	r3, [r3, #12]
 8000db2:	2b00      	cmp	r3, #0
 8000db4:	dbc6      	blt.n	8000d44 <HAL_ETH_Transmit+0x92>
        }
      }
    }

    /* Set ETH HAL State to Ready */
    heth->gState = HAL_ETH_STATE_READY;
 8000db6:	68fb      	ldr	r3, [r7, #12]
 8000db8:	2210      	movs	r2, #16
 8000dba:	655a      	str	r2, [r3, #84]	; 0x54

    /* Return function status */
    return HAL_OK;
 8000dbc:	2300      	movs	r3, #0
 8000dbe:	e000      	b.n	8000dc2 <HAL_ETH_Transmit+0x110>
  }
  else
  {
    return HAL_ERROR;
 8000dc0:	2301      	movs	r3, #1
  }
}
 8000dc2:	4618      	mov	r0, r3
 8000dc4:	3718      	adds	r7, #24
 8000dc6:	46bd      	mov	sp, r7
 8000dc8:	bd80      	pop	{r7, pc}

08000dca <HAL_ETH_IsRxDataAvailable>:
  *         the configuration information for ETHERNET module
  * @retval  1: A Packet is received
  *          0: no Packet received
  */
uint8_t HAL_ETH_IsRxDataAvailable(ETH_HandleTypeDef *heth)
{
 8000dca:	b480      	push	{r7}
 8000dcc:	b089      	sub	sp, #36	; 0x24
 8000dce:	af00      	add	r7, sp, #0
 8000dd0:	6078      	str	r0, [r7, #4]
  ETH_RxDescListTypeDef *dmarxdesclist = &heth->RxDescList;
 8000dd2:	687b      	ldr	r3, [r7, #4]
 8000dd4:	332c      	adds	r3, #44	; 0x2c
 8000dd6:	60bb      	str	r3, [r7, #8]
  uint32_t descidx = dmarxdesclist->CurRxDesc;
 8000dd8:	68bb      	ldr	r3, [r7, #8]
 8000dda:	691b      	ldr	r3, [r3, #16]
 8000ddc:	61fb      	str	r3, [r7, #28]
  ETH_DMADescTypeDef *dmarxdesc = (ETH_DMADescTypeDef *)dmarxdesclist->RxDesc[descidx];
 8000dde:	68bb      	ldr	r3, [r7, #8]
 8000de0:	69fa      	ldr	r2, [r7, #28]
 8000de2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000de6:	61bb      	str	r3, [r7, #24]
  uint32_t descscancnt = 0;
 8000de8:	2300      	movs	r3, #0
 8000dea:	617b      	str	r3, [r7, #20]
  uint32_t appdesccnt = 0, firstappdescidx = 0;
 8000dec:	2300      	movs	r3, #0
 8000dee:	613b      	str	r3, [r7, #16]
 8000df0:	2300      	movs	r3, #0
 8000df2:	60fb      	str	r3, [r7, #12]

  if(dmarxdesclist->AppDescNbr != 0U)
 8000df4:	68bb      	ldr	r3, [r7, #8]
 8000df6:	699b      	ldr	r3, [r3, #24]
 8000df8:	2b00      	cmp	r3, #0
 8000dfa:	d06b      	beq.n	8000ed4 <HAL_ETH_IsRxDataAvailable+0x10a>
  {
    /* data already received by not yet processed*/
    return 0;
 8000dfc:	2300      	movs	r3, #0
 8000dfe:	e0bc      	b.n	8000f7a <HAL_ETH_IsRxDataAvailable+0x1b0>
  }

  /* Check if descriptor is not owned by DMA */
  while((READ_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCWBF_OWN) == (uint32_t)RESET) && (descscancnt < (uint32_t)ETH_RX_DESC_CNT))
  {
    descscancnt++;
 8000e00:	697b      	ldr	r3, [r7, #20]
 8000e02:	3301      	adds	r3, #1
 8000e04:	617b      	str	r3, [r7, #20]

    /* Check if last descriptor */
    if(READ_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCWBF_LD) != (uint32_t)RESET)
 8000e06:	69bb      	ldr	r3, [r7, #24]
 8000e08:	68db      	ldr	r3, [r3, #12]
 8000e0a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000e0e:	2b00      	cmp	r3, #0
 8000e10:	d036      	beq.n	8000e80 <HAL_ETH_IsRxDataAvailable+0xb6>
    {
      /* Increment the number of descriptors to be passed to the application */
      appdesccnt += 1U;
 8000e12:	693b      	ldr	r3, [r7, #16]
 8000e14:	3301      	adds	r3, #1
 8000e16:	613b      	str	r3, [r7, #16]

      if(appdesccnt == 1U)
 8000e18:	693b      	ldr	r3, [r7, #16]
 8000e1a:	2b01      	cmp	r3, #1
 8000e1c:	d101      	bne.n	8000e22 <HAL_ETH_IsRxDataAvailable+0x58>
      {
        WRITE_REG(firstappdescidx, descidx);
 8000e1e:	69fb      	ldr	r3, [r7, #28]
 8000e20:	60fb      	str	r3, [r7, #12]
      }

      /* Increment current rx descriptor index */
      INCR_RX_DESC_INDEX(descidx, 1U);
 8000e22:	69fb      	ldr	r3, [r7, #28]
 8000e24:	3301      	adds	r3, #1
 8000e26:	61fb      	str	r3, [r7, #28]
 8000e28:	69fb      	ldr	r3, [r7, #28]
 8000e2a:	2b03      	cmp	r3, #3
 8000e2c:	d902      	bls.n	8000e34 <HAL_ETH_IsRxDataAvailable+0x6a>
 8000e2e:	69fb      	ldr	r3, [r7, #28]
 8000e30:	3b04      	subs	r3, #4
 8000e32:	61fb      	str	r3, [r7, #28]

      /* Check for Context descriptor */
      /* Get current descriptor address */
      dmarxdesc = (ETH_DMADescTypeDef *)dmarxdesclist->RxDesc[descidx];
 8000e34:	68bb      	ldr	r3, [r7, #8]
 8000e36:	69fa      	ldr	r2, [r7, #28]
 8000e38:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000e3c:	61bb      	str	r3, [r7, #24]

      if(READ_BIT(dmarxdesc->DESC3,  ETH_DMARXNDESCWBF_OWN)  == (uint32_t)RESET)
 8000e3e:	69bb      	ldr	r3, [r7, #24]
 8000e40:	68db      	ldr	r3, [r3, #12]
 8000e42:	2b00      	cmp	r3, #0
 8000e44:	db11      	blt.n	8000e6a <HAL_ETH_IsRxDataAvailable+0xa0>
      {
        if(READ_BIT(dmarxdesc->DESC3,  ETH_DMARXNDESCWBF_CTXT)  != (uint32_t)RESET)
 8000e46:	69bb      	ldr	r3, [r7, #24]
 8000e48:	68db      	ldr	r3, [r3, #12]
 8000e4a:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8000e4e:	2b00      	cmp	r3, #0
 8000e50:	d00b      	beq.n	8000e6a <HAL_ETH_IsRxDataAvailable+0xa0>
        {
          /* Increment the number of descriptors to be passed to the application */
          dmarxdesclist->AppContextDesc = 1;
 8000e52:	68bb      	ldr	r3, [r7, #8]
 8000e54:	2201      	movs	r2, #1
 8000e56:	61da      	str	r2, [r3, #28]
          /* Increment current rx descriptor index */
          INCR_RX_DESC_INDEX(descidx, 1U);
 8000e58:	69fb      	ldr	r3, [r7, #28]
 8000e5a:	3301      	adds	r3, #1
 8000e5c:	61fb      	str	r3, [r7, #28]
 8000e5e:	69fb      	ldr	r3, [r7, #28]
 8000e60:	2b03      	cmp	r3, #3
 8000e62:	d902      	bls.n	8000e6a <HAL_ETH_IsRxDataAvailable+0xa0>
 8000e64:	69fb      	ldr	r3, [r7, #28]
 8000e66:	3b04      	subs	r3, #4
 8000e68:	61fb      	str	r3, [r7, #28]
        }
      }
      /* Fill information to Rx descriptors list */
      dmarxdesclist->CurRxDesc = descidx;
 8000e6a:	68bb      	ldr	r3, [r7, #8]
 8000e6c:	69fa      	ldr	r2, [r7, #28]
 8000e6e:	611a      	str	r2, [r3, #16]
      dmarxdesclist->FirstAppDesc = firstappdescidx;
 8000e70:	68bb      	ldr	r3, [r7, #8]
 8000e72:	68fa      	ldr	r2, [r7, #12]
 8000e74:	615a      	str	r2, [r3, #20]
      dmarxdesclist->AppDescNbr = appdesccnt;
 8000e76:	68bb      	ldr	r3, [r7, #8]
 8000e78:	693a      	ldr	r2, [r7, #16]
 8000e7a:	619a      	str	r2, [r3, #24]

      /* Return function status */
      return 1;
 8000e7c:	2301      	movs	r3, #1
 8000e7e:	e07c      	b.n	8000f7a <HAL_ETH_IsRxDataAvailable+0x1b0>
    }
    /* Check if first descriptor */
    else if(READ_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCWBF_FD) != (uint32_t)RESET)
 8000e80:	69bb      	ldr	r3, [r7, #24]
 8000e82:	68db      	ldr	r3, [r3, #12]
 8000e84:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8000e88:	2b00      	cmp	r3, #0
 8000e8a:	d012      	beq.n	8000eb2 <HAL_ETH_IsRxDataAvailable+0xe8>
    {
      WRITE_REG(firstappdescidx, descidx);
 8000e8c:	69fb      	ldr	r3, [r7, #28]
 8000e8e:	60fb      	str	r3, [r7, #12]
      /* Increment the number of descriptors to be passed to the application */
      appdesccnt = 1U;
 8000e90:	2301      	movs	r3, #1
 8000e92:	613b      	str	r3, [r7, #16]

      /* Increment current rx descriptor index */
      INCR_RX_DESC_INDEX(descidx, 1U);
 8000e94:	69fb      	ldr	r3, [r7, #28]
 8000e96:	3301      	adds	r3, #1
 8000e98:	61fb      	str	r3, [r7, #28]
 8000e9a:	69fb      	ldr	r3, [r7, #28]
 8000e9c:	2b03      	cmp	r3, #3
 8000e9e:	d902      	bls.n	8000ea6 <HAL_ETH_IsRxDataAvailable+0xdc>
 8000ea0:	69fb      	ldr	r3, [r7, #28]
 8000ea2:	3b04      	subs	r3, #4
 8000ea4:	61fb      	str	r3, [r7, #28]
      /* Get current descriptor address */
      dmarxdesc = (ETH_DMADescTypeDef *)dmarxdesclist->RxDesc[descidx];
 8000ea6:	68bb      	ldr	r3, [r7, #8]
 8000ea8:	69fa      	ldr	r2, [r7, #28]
 8000eaa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000eae:	61bb      	str	r3, [r7, #24]
 8000eb0:	e010      	b.n	8000ed4 <HAL_ETH_IsRxDataAvailable+0x10a>
    }
    /* It should be an intermediate descriptor */
    else
    {
      /* Increment the number of descriptors to be passed to the application */
      appdesccnt += 1U;
 8000eb2:	693b      	ldr	r3, [r7, #16]
 8000eb4:	3301      	adds	r3, #1
 8000eb6:	613b      	str	r3, [r7, #16]

      /* Increment current rx descriptor index */
      INCR_RX_DESC_INDEX(descidx, 1U);
 8000eb8:	69fb      	ldr	r3, [r7, #28]
 8000eba:	3301      	adds	r3, #1
 8000ebc:	61fb      	str	r3, [r7, #28]
 8000ebe:	69fb      	ldr	r3, [r7, #28]
 8000ec0:	2b03      	cmp	r3, #3
 8000ec2:	d902      	bls.n	8000eca <HAL_ETH_IsRxDataAvailable+0x100>
 8000ec4:	69fb      	ldr	r3, [r7, #28]
 8000ec6:	3b04      	subs	r3, #4
 8000ec8:	61fb      	str	r3, [r7, #28]
      /* Get current descriptor address */
      dmarxdesc = (ETH_DMADescTypeDef *)dmarxdesclist->RxDesc[descidx];
 8000eca:	68bb      	ldr	r3, [r7, #8]
 8000ecc:	69fa      	ldr	r2, [r7, #28]
 8000ece:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000ed2:	61bb      	str	r3, [r7, #24]
  while((READ_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCWBF_OWN) == (uint32_t)RESET) && (descscancnt < (uint32_t)ETH_RX_DESC_CNT))
 8000ed4:	69bb      	ldr	r3, [r7, #24]
 8000ed6:	68db      	ldr	r3, [r3, #12]
 8000ed8:	2b00      	cmp	r3, #0
 8000eda:	db02      	blt.n	8000ee2 <HAL_ETH_IsRxDataAvailable+0x118>
 8000edc:	697b      	ldr	r3, [r7, #20]
 8000ede:	2b03      	cmp	r3, #3
 8000ee0:	d98e      	bls.n	8000e00 <HAL_ETH_IsRxDataAvailable+0x36>
    }
  }

  /* Build Descriptors if an incomplete Packet is received */
  if(appdesccnt > 0U)
 8000ee2:	693b      	ldr	r3, [r7, #16]
 8000ee4:	2b00      	cmp	r3, #0
 8000ee6:	d044      	beq.n	8000f72 <HAL_ETH_IsRxDataAvailable+0x1a8>
  {
    descidx = firstappdescidx;
 8000ee8:	68fb      	ldr	r3, [r7, #12]
 8000eea:	61fb      	str	r3, [r7, #28]
    dmarxdesc = (ETH_DMADescTypeDef *)dmarxdesclist->RxDesc[descidx];
 8000eec:	68bb      	ldr	r3, [r7, #8]
 8000eee:	69fa      	ldr	r2, [r7, #28]
 8000ef0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000ef4:	61bb      	str	r3, [r7, #24]

    for(descscancnt = 0; descscancnt < appdesccnt; descscancnt++)
 8000ef6:	2300      	movs	r3, #0
 8000ef8:	617b      	str	r3, [r7, #20]
 8000efa:	e036      	b.n	8000f6a <HAL_ETH_IsRxDataAvailable+0x1a0>
    {
      WRITE_REG(dmarxdesc->DESC0, dmarxdesc->BackupAddr0);
 8000efc:	69bb      	ldr	r3, [r7, #24]
 8000efe:	691a      	ldr	r2, [r3, #16]
 8000f00:	69bb      	ldr	r3, [r7, #24]
 8000f02:	601a      	str	r2, [r3, #0]
      WRITE_REG(dmarxdesc->DESC3, ETH_DMARXNDESCRF_BUF1V);
 8000f04:	69bb      	ldr	r3, [r7, #24]
 8000f06:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8000f0a:	60da      	str	r2, [r3, #12]

      if (READ_REG(dmarxdesc->BackupAddr1) != ((uint32_t)RESET))
 8000f0c:	69bb      	ldr	r3, [r7, #24]
 8000f0e:	695b      	ldr	r3, [r3, #20]
 8000f10:	2b00      	cmp	r3, #0
 8000f12:	d009      	beq.n	8000f28 <HAL_ETH_IsRxDataAvailable+0x15e>
      {
        WRITE_REG(dmarxdesc->DESC2, dmarxdesc->BackupAddr1);
 8000f14:	69bb      	ldr	r3, [r7, #24]
 8000f16:	695a      	ldr	r2, [r3, #20]
 8000f18:	69bb      	ldr	r3, [r7, #24]
 8000f1a:	609a      	str	r2, [r3, #8]
        SET_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCRF_BUF2V);
 8000f1c:	69bb      	ldr	r3, [r7, #24]
 8000f1e:	68db      	ldr	r3, [r3, #12]
 8000f20:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 8000f24:	69bb      	ldr	r3, [r7, #24]
 8000f26:	60da      	str	r2, [r3, #12]
      }

      SET_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCRF_OWN);
 8000f28:	69bb      	ldr	r3, [r7, #24]
 8000f2a:	68db      	ldr	r3, [r3, #12]
 8000f2c:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8000f30:	69bb      	ldr	r3, [r7, #24]
 8000f32:	60da      	str	r2, [r3, #12]

      if(dmarxdesclist->ItMode != ((uint32_t)RESET))
 8000f34:	68bb      	ldr	r3, [r7, #8]
 8000f36:	6a1b      	ldr	r3, [r3, #32]
 8000f38:	2b00      	cmp	r3, #0
 8000f3a:	d005      	beq.n	8000f48 <HAL_ETH_IsRxDataAvailable+0x17e>
      {
        SET_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCRF_IOC);
 8000f3c:	69bb      	ldr	r3, [r7, #24]
 8000f3e:	68db      	ldr	r3, [r3, #12]
 8000f40:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8000f44:	69bb      	ldr	r3, [r7, #24]
 8000f46:	60da      	str	r2, [r3, #12]
      }

      /* Increment rx descriptor index */
      INCR_RX_DESC_INDEX(descidx, 1U);
 8000f48:	69fb      	ldr	r3, [r7, #28]
 8000f4a:	3301      	adds	r3, #1
 8000f4c:	61fb      	str	r3, [r7, #28]
 8000f4e:	69fb      	ldr	r3, [r7, #28]
 8000f50:	2b03      	cmp	r3, #3
 8000f52:	d902      	bls.n	8000f5a <HAL_ETH_IsRxDataAvailable+0x190>
 8000f54:	69fb      	ldr	r3, [r7, #28]
 8000f56:	3b04      	subs	r3, #4
 8000f58:	61fb      	str	r3, [r7, #28]
      /* Get descriptor address */
      dmarxdesc = (ETH_DMADescTypeDef *)dmarxdesclist->RxDesc[descidx];
 8000f5a:	68bb      	ldr	r3, [r7, #8]
 8000f5c:	69fa      	ldr	r2, [r7, #28]
 8000f5e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000f62:	61bb      	str	r3, [r7, #24]
    for(descscancnt = 0; descscancnt < appdesccnt; descscancnt++)
 8000f64:	697b      	ldr	r3, [r7, #20]
 8000f66:	3301      	adds	r3, #1
 8000f68:	617b      	str	r3, [r7, #20]
 8000f6a:	697a      	ldr	r2, [r7, #20]
 8000f6c:	693b      	ldr	r3, [r7, #16]
 8000f6e:	429a      	cmp	r2, r3
 8000f70:	d3c4      	bcc.n	8000efc <HAL_ETH_IsRxDataAvailable+0x132>
    }
  }

  /* Fill information to Rx descriptors list: No received Packet */
  dmarxdesclist->AppDescNbr = 0U;
 8000f72:	68bb      	ldr	r3, [r7, #8]
 8000f74:	2200      	movs	r2, #0
 8000f76:	619a      	str	r2, [r3, #24]

  return 0;
 8000f78:	2300      	movs	r3, #0
}
 8000f7a:	4618      	mov	r0, r3
 8000f7c:	3724      	adds	r7, #36	; 0x24
 8000f7e:	46bd      	mov	sp, r7
 8000f80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f84:	4770      	bx	lr

08000f86 <HAL_ETH_GetRxDataBuffer>:
  *         the configuration information for ETHERNET module
  * @param  RxBuffer: Pointer to a ETH_BufferTypeDef structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_GetRxDataBuffer(ETH_HandleTypeDef *heth, ETH_BufferTypeDef *RxBuffer)
{
 8000f86:	b580      	push	{r7, lr}
 8000f88:	b08a      	sub	sp, #40	; 0x28
 8000f8a:	af00      	add	r7, sp, #0
 8000f8c:	6078      	str	r0, [r7, #4]
 8000f8e:	6039      	str	r1, [r7, #0]
  ETH_RxDescListTypeDef *dmarxdesclist = &heth->RxDescList;
 8000f90:	687b      	ldr	r3, [r7, #4]
 8000f92:	332c      	adds	r3, #44	; 0x2c
 8000f94:	613b      	str	r3, [r7, #16]
  uint32_t descidx = dmarxdesclist->FirstAppDesc;
 8000f96:	693b      	ldr	r3, [r7, #16]
 8000f98:	695b      	ldr	r3, [r3, #20]
 8000f9a:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t index, accumulatedlen = 0, lastdesclen;
 8000f9c:	2300      	movs	r3, #0
 8000f9e:	61fb      	str	r3, [r7, #28]
  __IO const ETH_DMADescTypeDef *dmarxdesc = (ETH_DMADescTypeDef *)dmarxdesclist->RxDesc[descidx];
 8000fa0:	693b      	ldr	r3, [r7, #16]
 8000fa2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000fa4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000fa8:	61bb      	str	r3, [r7, #24]
  ETH_BufferTypeDef *rxbuff = RxBuffer;
 8000faa:	683b      	ldr	r3, [r7, #0]
 8000fac:	617b      	str	r3, [r7, #20]

  if(rxbuff == NULL)
 8000fae:	697b      	ldr	r3, [r7, #20]
 8000fb0:	2b00      	cmp	r3, #0
 8000fb2:	d104      	bne.n	8000fbe <HAL_ETH_GetRxDataBuffer+0x38>
  {
    heth->ErrorCode = HAL_ETH_ERROR_PARAM;
 8000fb4:	687b      	ldr	r3, [r7, #4]
 8000fb6:	2201      	movs	r2, #1
 8000fb8:	65da      	str	r2, [r3, #92]	; 0x5c
    return HAL_ERROR;
 8000fba:	2301      	movs	r3, #1
 8000fbc:	e07d      	b.n	80010ba <HAL_ETH_GetRxDataBuffer+0x134>
  }

  if(dmarxdesclist->AppDescNbr == 0U)
 8000fbe:	693b      	ldr	r3, [r7, #16]
 8000fc0:	699b      	ldr	r3, [r3, #24]
 8000fc2:	2b00      	cmp	r3, #0
 8000fc4:	d10f      	bne.n	8000fe6 <HAL_ETH_GetRxDataBuffer+0x60>
  {
    if(HAL_ETH_IsRxDataAvailable(heth) == 0U)
 8000fc6:	6878      	ldr	r0, [r7, #4]
 8000fc8:	f7ff feff 	bl	8000dca <HAL_ETH_IsRxDataAvailable>
 8000fcc:	4603      	mov	r3, r0
 8000fce:	2b00      	cmp	r3, #0
 8000fd0:	d101      	bne.n	8000fd6 <HAL_ETH_GetRxDataBuffer+0x50>
    {
      /* No data to be transferred to the application */
      return HAL_ERROR;
 8000fd2:	2301      	movs	r3, #1
 8000fd4:	e071      	b.n	80010ba <HAL_ETH_GetRxDataBuffer+0x134>
    }
    else
    {
      descidx = dmarxdesclist->FirstAppDesc;
 8000fd6:	693b      	ldr	r3, [r7, #16]
 8000fd8:	695b      	ldr	r3, [r3, #20]
 8000fda:	627b      	str	r3, [r7, #36]	; 0x24
      dmarxdesc = (ETH_DMADescTypeDef *)dmarxdesclist->RxDesc[descidx];
 8000fdc:	693b      	ldr	r3, [r7, #16]
 8000fde:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000fe0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000fe4:	61bb      	str	r3, [r7, #24]
    }
  }

  /* Get intermediate descriptors buffers: in case of the Packet is splitted into multi descriptors */
  for(index = 0; index < (dmarxdesclist->AppDescNbr - 1U); index++)
 8000fe6:	2300      	movs	r3, #0
 8000fe8:	623b      	str	r3, [r7, #32]
 8000fea:	e031      	b.n	8001050 <HAL_ETH_GetRxDataBuffer+0xca>
  {
    /* Get Address and length of the first buffer address */
    rxbuff->buffer = (uint8_t *) dmarxdesc->BackupAddr0;
 8000fec:	69bb      	ldr	r3, [r7, #24]
 8000fee:	691b      	ldr	r3, [r3, #16]
 8000ff0:	461a      	mov	r2, r3
 8000ff2:	697b      	ldr	r3, [r7, #20]
 8000ff4:	601a      	str	r2, [r3, #0]
    rxbuff->len =  heth->Init.RxBuffLen;
 8000ff6:	687b      	ldr	r3, [r7, #4]
 8000ff8:	695a      	ldr	r2, [r3, #20]
 8000ffa:	697b      	ldr	r3, [r7, #20]
 8000ffc:	605a      	str	r2, [r3, #4]

    /* Check if the second buffer address of this descriptor is valid */
    if(dmarxdesc->BackupAddr1 != 0U)
 8000ffe:	69bb      	ldr	r3, [r7, #24]
 8001000:	695b      	ldr	r3, [r3, #20]
 8001002:	2b00      	cmp	r3, #0
 8001004:	d00b      	beq.n	800101e <HAL_ETH_GetRxDataBuffer+0x98>
    {
      /* Point to next buffer */
      rxbuff = (struct __ETH_BufferTypeDef *)rxbuff->next;
 8001006:	697b      	ldr	r3, [r7, #20]
 8001008:	689b      	ldr	r3, [r3, #8]
 800100a:	617b      	str	r3, [r7, #20]
      /* Get Address and length of the second buffer address */
      rxbuff->buffer = (uint8_t *) dmarxdesc->BackupAddr1;
 800100c:	69bb      	ldr	r3, [r7, #24]
 800100e:	695b      	ldr	r3, [r3, #20]
 8001010:	461a      	mov	r2, r3
 8001012:	697b      	ldr	r3, [r7, #20]
 8001014:	601a      	str	r2, [r3, #0]
      rxbuff->len =  heth->Init.RxBuffLen;
 8001016:	687b      	ldr	r3, [r7, #4]
 8001018:	695a      	ldr	r2, [r3, #20]
 800101a:	697b      	ldr	r3, [r7, #20]
 800101c:	605a      	str	r2, [r3, #4]
    {
      /* Nothing to do here */
    }

    /* get total length until this descriptor */
    accumulatedlen = READ_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCWBF_PL);
 800101e:	69bb      	ldr	r3, [r7, #24]
 8001020:	68db      	ldr	r3, [r3, #12]
 8001022:	f3c3 030e 	ubfx	r3, r3, #0, #15
 8001026:	61fb      	str	r3, [r7, #28]

    /* Increment to next descriptor */
    INCR_RX_DESC_INDEX(descidx, 1U);
 8001028:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800102a:	3301      	adds	r3, #1
 800102c:	627b      	str	r3, [r7, #36]	; 0x24
 800102e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001030:	2b03      	cmp	r3, #3
 8001032:	d902      	bls.n	800103a <HAL_ETH_GetRxDataBuffer+0xb4>
 8001034:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001036:	3b04      	subs	r3, #4
 8001038:	627b      	str	r3, [r7, #36]	; 0x24
    dmarxdesc = (ETH_DMADescTypeDef *)dmarxdesclist->RxDesc[descidx];
 800103a:	693b      	ldr	r3, [r7, #16]
 800103c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800103e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001042:	61bb      	str	r3, [r7, #24]

    /* Point to next buffer */
    rxbuff = (struct __ETH_BufferTypeDef *)rxbuff->next;
 8001044:	697b      	ldr	r3, [r7, #20]
 8001046:	689b      	ldr	r3, [r3, #8]
 8001048:	617b      	str	r3, [r7, #20]
  for(index = 0; index < (dmarxdesclist->AppDescNbr - 1U); index++)
 800104a:	6a3b      	ldr	r3, [r7, #32]
 800104c:	3301      	adds	r3, #1
 800104e:	623b      	str	r3, [r7, #32]
 8001050:	693b      	ldr	r3, [r7, #16]
 8001052:	699b      	ldr	r3, [r3, #24]
 8001054:	3b01      	subs	r3, #1
 8001056:	6a3a      	ldr	r2, [r7, #32]
 8001058:	429a      	cmp	r2, r3
 800105a:	d3c7      	bcc.n	8000fec <HAL_ETH_GetRxDataBuffer+0x66>
  }

  /* last descriptor data length */
  lastdesclen = READ_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCWBF_PL) - accumulatedlen;
 800105c:	69bb      	ldr	r3, [r7, #24]
 800105e:	68db      	ldr	r3, [r3, #12]
 8001060:	f3c3 020e 	ubfx	r2, r3, #0, #15
 8001064:	69fb      	ldr	r3, [r7, #28]
 8001066:	1ad3      	subs	r3, r2, r3
 8001068:	60fb      	str	r3, [r7, #12]

  /* Get Address of the first buffer address */
  rxbuff->buffer = (uint8_t *) dmarxdesc->BackupAddr0;
 800106a:	69bb      	ldr	r3, [r7, #24]
 800106c:	691b      	ldr	r3, [r3, #16]
 800106e:	461a      	mov	r2, r3
 8001070:	697b      	ldr	r3, [r7, #20]
 8001072:	601a      	str	r2, [r3, #0]

  /* data is in only one buffer */
  if(lastdesclen <= heth->Init.RxBuffLen)
 8001074:	687b      	ldr	r3, [r7, #4]
 8001076:	695b      	ldr	r3, [r3, #20]
 8001078:	68fa      	ldr	r2, [r7, #12]
 800107a:	429a      	cmp	r2, r3
 800107c:	d803      	bhi.n	8001086 <HAL_ETH_GetRxDataBuffer+0x100>
  {
    rxbuff->len = lastdesclen;
 800107e:	697b      	ldr	r3, [r7, #20]
 8001080:	68fa      	ldr	r2, [r7, #12]
 8001082:	605a      	str	r2, [r3, #4]
 8001084:	e018      	b.n	80010b8 <HAL_ETH_GetRxDataBuffer+0x132>
  }
  /* data is in two buffers */
  else if(dmarxdesc->BackupAddr1 != 0U)
 8001086:	69bb      	ldr	r3, [r7, #24]
 8001088:	695b      	ldr	r3, [r3, #20]
 800108a:	2b00      	cmp	r3, #0
 800108c:	d012      	beq.n	80010b4 <HAL_ETH_GetRxDataBuffer+0x12e>
  {
    /* Get the Length of the first buffer address */
    rxbuff->len = heth->Init.RxBuffLen;
 800108e:	687b      	ldr	r3, [r7, #4]
 8001090:	695a      	ldr	r2, [r3, #20]
 8001092:	697b      	ldr	r3, [r7, #20]
 8001094:	605a      	str	r2, [r3, #4]
    /* Point to next buffer */
    rxbuff = (struct __ETH_BufferTypeDef *)rxbuff->next;
 8001096:	697b      	ldr	r3, [r7, #20]
 8001098:	689b      	ldr	r3, [r3, #8]
 800109a:	617b      	str	r3, [r7, #20]
    /* Get the Address the Length of the second buffer address */
    rxbuff->buffer = (uint8_t *) dmarxdesc->BackupAddr1;
 800109c:	69bb      	ldr	r3, [r7, #24]
 800109e:	695b      	ldr	r3, [r3, #20]
 80010a0:	461a      	mov	r2, r3
 80010a2:	697b      	ldr	r3, [r7, #20]
 80010a4:	601a      	str	r2, [r3, #0]
    rxbuff->len =  lastdesclen - (heth->Init.RxBuffLen);
 80010a6:	687b      	ldr	r3, [r7, #4]
 80010a8:	695b      	ldr	r3, [r3, #20]
 80010aa:	68fa      	ldr	r2, [r7, #12]
 80010ac:	1ad2      	subs	r2, r2, r3
 80010ae:	697b      	ldr	r3, [r7, #20]
 80010b0:	605a      	str	r2, [r3, #4]
 80010b2:	e001      	b.n	80010b8 <HAL_ETH_GetRxDataBuffer+0x132>
  }
  else /* Buffer 2 not valid*/
  {
    return HAL_ERROR;
 80010b4:	2301      	movs	r3, #1
 80010b6:	e000      	b.n	80010ba <HAL_ETH_GetRxDataBuffer+0x134>
  }

  return HAL_OK;
 80010b8:	2300      	movs	r3, #0
}
 80010ba:	4618      	mov	r0, r3
 80010bc:	3728      	adds	r7, #40	; 0x28
 80010be:	46bd      	mov	sp, r7
 80010c0:	bd80      	pop	{r7, pc}

080010c2 <HAL_ETH_GetRxDataLength>:
  *         the configuration information for ETHERNET module
  * @param  Length: parameter to hold Rx packet length
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_ETH_GetRxDataLength(ETH_HandleTypeDef *heth, uint32_t *Length)
{
 80010c2:	b580      	push	{r7, lr}
 80010c4:	b086      	sub	sp, #24
 80010c6:	af00      	add	r7, sp, #0
 80010c8:	6078      	str	r0, [r7, #4]
 80010ca:	6039      	str	r1, [r7, #0]
  ETH_RxDescListTypeDef *dmarxdesclist = &heth->RxDescList;
 80010cc:	687b      	ldr	r3, [r7, #4]
 80010ce:	332c      	adds	r3, #44	; 0x2c
 80010d0:	613b      	str	r3, [r7, #16]
  uint32_t descidx = dmarxdesclist->FirstAppDesc;
 80010d2:	693b      	ldr	r3, [r7, #16]
 80010d4:	695b      	ldr	r3, [r3, #20]
 80010d6:	617b      	str	r3, [r7, #20]
  __IO const ETH_DMADescTypeDef *dmarxdesc;

  if(dmarxdesclist->AppDescNbr == 0U)
 80010d8:	693b      	ldr	r3, [r7, #16]
 80010da:	699b      	ldr	r3, [r3, #24]
 80010dc:	2b00      	cmp	r3, #0
 80010de:	d107      	bne.n	80010f0 <HAL_ETH_GetRxDataLength+0x2e>
  {
    if(HAL_ETH_IsRxDataAvailable(heth) == 0U)
 80010e0:	6878      	ldr	r0, [r7, #4]
 80010e2:	f7ff fe72 	bl	8000dca <HAL_ETH_IsRxDataAvailable>
 80010e6:	4603      	mov	r3, r0
 80010e8:	2b00      	cmp	r3, #0
 80010ea:	d101      	bne.n	80010f0 <HAL_ETH_GetRxDataLength+0x2e>
    {
      /* No data to be transferred to the application */
      return HAL_ERROR;
 80010ec:	2301      	movs	r3, #1
 80010ee:	e017      	b.n	8001120 <HAL_ETH_GetRxDataLength+0x5e>
    }
  }

  /* Get index of last descriptor */
  INCR_RX_DESC_INDEX(descidx, (dmarxdesclist->AppDescNbr - 1U));
 80010f0:	693b      	ldr	r3, [r7, #16]
 80010f2:	699a      	ldr	r2, [r3, #24]
 80010f4:	697b      	ldr	r3, [r7, #20]
 80010f6:	4413      	add	r3, r2
 80010f8:	3b01      	subs	r3, #1
 80010fa:	617b      	str	r3, [r7, #20]
 80010fc:	697b      	ldr	r3, [r7, #20]
 80010fe:	2b03      	cmp	r3, #3
 8001100:	d902      	bls.n	8001108 <HAL_ETH_GetRxDataLength+0x46>
 8001102:	697b      	ldr	r3, [r7, #20]
 8001104:	3b04      	subs	r3, #4
 8001106:	617b      	str	r3, [r7, #20]
  /* Point to last descriptor */
  dmarxdesc = (ETH_DMADescTypeDef *)dmarxdesclist->RxDesc[descidx];
 8001108:	693b      	ldr	r3, [r7, #16]
 800110a:	697a      	ldr	r2, [r7, #20]
 800110c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001110:	60fb      	str	r3, [r7, #12]

  *Length = READ_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCWBF_PL);
 8001112:	68fb      	ldr	r3, [r7, #12]
 8001114:	68db      	ldr	r3, [r3, #12]
 8001116:	f3c3 020e 	ubfx	r2, r3, #0, #15
 800111a:	683b      	ldr	r3, [r7, #0]
 800111c:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 800111e:	2300      	movs	r3, #0
}
 8001120:	4618      	mov	r0, r3
 8001122:	3718      	adds	r7, #24
 8001124:	46bd      	mov	sp, r7
 8001126:	bd80      	pop	{r7, pc}

08001128 <HAL_ETH_BuildRxDescriptors>:
* @param  heth: pointer to a ETH_HandleTypeDef structure that contains
*         the configuration information for ETHERNET module
* @retval HAL status.
*/
HAL_StatusTypeDef HAL_ETH_BuildRxDescriptors(ETH_HandleTypeDef *heth)
{
 8001128:	b480      	push	{r7}
 800112a:	b089      	sub	sp, #36	; 0x24
 800112c:	af00      	add	r7, sp, #0
 800112e:	6078      	str	r0, [r7, #4]
  ETH_RxDescListTypeDef *dmarxdesclist = &heth->RxDescList;
 8001130:	687b      	ldr	r3, [r7, #4]
 8001132:	332c      	adds	r3, #44	; 0x2c
 8001134:	60fb      	str	r3, [r7, #12]
  uint32_t descindex = dmarxdesclist->FirstAppDesc;
 8001136:	68fb      	ldr	r3, [r7, #12]
 8001138:	695b      	ldr	r3, [r3, #20]
 800113a:	61fb      	str	r3, [r7, #28]
  __IO ETH_DMADescTypeDef *dmarxdesc = (ETH_DMADescTypeDef *)dmarxdesclist->RxDesc[descindex];
 800113c:	68fb      	ldr	r3, [r7, #12]
 800113e:	69fa      	ldr	r2, [r7, #28]
 8001140:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001144:	61bb      	str	r3, [r7, #24]
  uint32_t totalappdescnbr = dmarxdesclist->AppDescNbr;
 8001146:	68fb      	ldr	r3, [r7, #12]
 8001148:	699b      	ldr	r3, [r3, #24]
 800114a:	617b      	str	r3, [r7, #20]
  uint32_t descscan;

  if(dmarxdesclist->AppDescNbr == 0U)
 800114c:	68fb      	ldr	r3, [r7, #12]
 800114e:	699b      	ldr	r3, [r3, #24]
 8001150:	2b00      	cmp	r3, #0
 8001152:	d101      	bne.n	8001158 <HAL_ETH_BuildRxDescriptors+0x30>
  {
    /* No Rx descriptors to build */
    return HAL_ERROR;
 8001154:	2301      	movs	r3, #1
 8001156:	e055      	b.n	8001204 <HAL_ETH_BuildRxDescriptors+0xdc>
  }

  if(dmarxdesclist->AppContextDesc != 0U)
 8001158:	68fb      	ldr	r3, [r7, #12]
 800115a:	69db      	ldr	r3, [r3, #28]
 800115c:	2b00      	cmp	r3, #0
 800115e:	d002      	beq.n	8001166 <HAL_ETH_BuildRxDescriptors+0x3e>
  {
    /* A context descriptor is available */
    totalappdescnbr += 1U;
 8001160:	697b      	ldr	r3, [r7, #20]
 8001162:	3301      	adds	r3, #1
 8001164:	617b      	str	r3, [r7, #20]
  }

  for(descscan =0; descscan < totalappdescnbr; descscan++)
 8001166:	2300      	movs	r3, #0
 8001168:	613b      	str	r3, [r7, #16]
 800116a:	e03c      	b.n	80011e6 <HAL_ETH_BuildRxDescriptors+0xbe>
  {
    WRITE_REG(dmarxdesc->DESC0, dmarxdesc->BackupAddr0);
 800116c:	69bb      	ldr	r3, [r7, #24]
 800116e:	691a      	ldr	r2, [r3, #16]
 8001170:	69bb      	ldr	r3, [r7, #24]
 8001172:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmarxdesc->DESC3, ETH_DMARXNDESCRF_BUF1V);
 8001174:	69bb      	ldr	r3, [r7, #24]
 8001176:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800117a:	60da      	str	r2, [r3, #12]

    if (READ_REG(dmarxdesc->BackupAddr1) != 0U)
 800117c:	69bb      	ldr	r3, [r7, #24]
 800117e:	695b      	ldr	r3, [r3, #20]
 8001180:	2b00      	cmp	r3, #0
 8001182:	d009      	beq.n	8001198 <HAL_ETH_BuildRxDescriptors+0x70>
    {
      WRITE_REG(dmarxdesc->DESC2, dmarxdesc->BackupAddr1);
 8001184:	69bb      	ldr	r3, [r7, #24]
 8001186:	695a      	ldr	r2, [r3, #20]
 8001188:	69bb      	ldr	r3, [r7, #24]
 800118a:	609a      	str	r2, [r3, #8]
      SET_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCRF_BUF2V);
 800118c:	69bb      	ldr	r3, [r7, #24]
 800118e:	68db      	ldr	r3, [r3, #12]
 8001190:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 8001194:	69bb      	ldr	r3, [r7, #24]
 8001196:	60da      	str	r2, [r3, #12]
    }

    SET_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCRF_OWN);
 8001198:	69bb      	ldr	r3, [r7, #24]
 800119a:	68db      	ldr	r3, [r3, #12]
 800119c:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 80011a0:	69bb      	ldr	r3, [r7, #24]
 80011a2:	60da      	str	r2, [r3, #12]

    if(dmarxdesclist->ItMode != 0U)
 80011a4:	68fb      	ldr	r3, [r7, #12]
 80011a6:	6a1b      	ldr	r3, [r3, #32]
 80011a8:	2b00      	cmp	r3, #0
 80011aa:	d005      	beq.n	80011b8 <HAL_ETH_BuildRxDescriptors+0x90>
    {
      SET_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCRF_IOC);
 80011ac:	69bb      	ldr	r3, [r7, #24]
 80011ae:	68db      	ldr	r3, [r3, #12]
 80011b0:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 80011b4:	69bb      	ldr	r3, [r7, #24]
 80011b6:	60da      	str	r2, [r3, #12]
    }

    if(descscan < (dmarxdesclist->AppDescNbr - 1U))
 80011b8:	68fb      	ldr	r3, [r7, #12]
 80011ba:	699b      	ldr	r3, [r3, #24]
 80011bc:	3b01      	subs	r3, #1
 80011be:	693a      	ldr	r2, [r7, #16]
 80011c0:	429a      	cmp	r2, r3
 80011c2:	d20d      	bcs.n	80011e0 <HAL_ETH_BuildRxDescriptors+0xb8>
    {
      /* Increment rx descriptor index */
      INCR_RX_DESC_INDEX(descindex, 1U);
 80011c4:	69fb      	ldr	r3, [r7, #28]
 80011c6:	3301      	adds	r3, #1
 80011c8:	61fb      	str	r3, [r7, #28]
 80011ca:	69fb      	ldr	r3, [r7, #28]
 80011cc:	2b03      	cmp	r3, #3
 80011ce:	d902      	bls.n	80011d6 <HAL_ETH_BuildRxDescriptors+0xae>
 80011d0:	69fb      	ldr	r3, [r7, #28]
 80011d2:	3b04      	subs	r3, #4
 80011d4:	61fb      	str	r3, [r7, #28]
      /* Get descriptor address */
      dmarxdesc = (ETH_DMADescTypeDef *)dmarxdesclist->RxDesc[descindex];
 80011d6:	68fb      	ldr	r3, [r7, #12]
 80011d8:	69fa      	ldr	r2, [r7, #28]
 80011da:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80011de:	61bb      	str	r3, [r7, #24]
  for(descscan =0; descscan < totalappdescnbr; descscan++)
 80011e0:	693b      	ldr	r3, [r7, #16]
 80011e2:	3301      	adds	r3, #1
 80011e4:	613b      	str	r3, [r7, #16]
 80011e6:	693a      	ldr	r2, [r7, #16]
 80011e8:	697b      	ldr	r3, [r7, #20]
 80011ea:	429a      	cmp	r2, r3
 80011ec:	d3be      	bcc.n	800116c <HAL_ETH_BuildRxDescriptors+0x44>
    }
  }

  /* Set the Tail pointer address to the last rx descriptor hold by the app */
  WRITE_REG(heth->Instance->DMACRDTPR, (uint32_t)dmarxdesc);
 80011ee:	687b      	ldr	r3, [r7, #4]
 80011f0:	6819      	ldr	r1, [r3, #0]
 80011f2:	69ba      	ldr	r2, [r7, #24]
 80011f4:	f241 1328 	movw	r3, #4392	; 0x1128
 80011f8:	440b      	add	r3, r1
 80011fa:	601a      	str	r2, [r3, #0]

  /* reset the Application desc number */
  WRITE_REG(dmarxdesclist->AppDescNbr, 0);
 80011fc:	68fb      	ldr	r3, [r7, #12]
 80011fe:	2200      	movs	r2, #0
 8001200:	619a      	str	r2, [r3, #24]

  return HAL_OK;
 8001202:	2300      	movs	r3, #0
}
 8001204:	4618      	mov	r0, r3
 8001206:	3724      	adds	r7, #36	; 0x24
 8001208:	46bd      	mov	sp, r7
 800120a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800120e:	4770      	bx	lr

08001210 <HAL_ETH_IRQHandler>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
void HAL_ETH_IRQHandler(ETH_HandleTypeDef *heth)
{
 8001210:	b580      	push	{r7, lr}
 8001212:	b082      	sub	sp, #8
 8001214:	af00      	add	r7, sp, #0
 8001216:	6078      	str	r0, [r7, #4]
  /* Packet received */
  if (__HAL_ETH_DMA_GET_IT(heth, ETH_DMACSR_RI))
 8001218:	687b      	ldr	r3, [r7, #4]
 800121a:	681b      	ldr	r3, [r3, #0]
 800121c:	f503 538b 	add.w	r3, r3, #4448	; 0x1160
 8001220:	681b      	ldr	r3, [r3, #0]
 8001222:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001226:	2b40      	cmp	r3, #64	; 0x40
 8001228:	d113      	bne.n	8001252 <HAL_ETH_IRQHandler+0x42>
  {
    if(__HAL_ETH_DMA_GET_IT_SOURCE(heth, ETH_DMACIER_RIE))
 800122a:	687b      	ldr	r3, [r7, #4]
 800122c:	681a      	ldr	r2, [r3, #0]
 800122e:	f241 1334 	movw	r3, #4404	; 0x1134
 8001232:	4413      	add	r3, r2
 8001234:	681b      	ldr	r3, [r3, #0]
 8001236:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800123a:	2b40      	cmp	r3, #64	; 0x40
 800123c:	d109      	bne.n	8001252 <HAL_ETH_IRQHandler+0x42>
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
      /*Call registered Receive complete callback*/
      heth->RxCpltCallback(heth);
#else
      /* Receive complete callback */
      HAL_ETH_RxCpltCallback(heth);
 800123e:	6878      	ldr	r0, [r7, #4]
 8001240:	f00e f952 	bl	800f4e8 <HAL_ETH_RxCpltCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */

      /* Clear the Eth DMA Rx IT pending bits */
      __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMACSR_RI | ETH_DMACSR_NIS);
 8001244:	687b      	ldr	r3, [r7, #4]
 8001246:	681b      	ldr	r3, [r3, #0]
 8001248:	f503 538b 	add.w	r3, r3, #4448	; 0x1160
 800124c:	f248 0240 	movw	r2, #32832	; 0x8040
 8001250:	601a      	str	r2, [r3, #0]
    }
  }

  /* Packet transmitted */
  if (__HAL_ETH_DMA_GET_IT(heth, ETH_DMACSR_TI))
 8001252:	687b      	ldr	r3, [r7, #4]
 8001254:	681b      	ldr	r3, [r3, #0]
 8001256:	f503 538b 	add.w	r3, r3, #4448	; 0x1160
 800125a:	681b      	ldr	r3, [r3, #0]
 800125c:	f003 0301 	and.w	r3, r3, #1
 8001260:	2b01      	cmp	r3, #1
 8001262:	d113      	bne.n	800128c <HAL_ETH_IRQHandler+0x7c>
  {
    if(__HAL_ETH_DMA_GET_IT_SOURCE(heth, ETH_DMACIER_TIE))
 8001264:	687b      	ldr	r3, [r7, #4]
 8001266:	681a      	ldr	r2, [r3, #0]
 8001268:	f241 1334 	movw	r3, #4404	; 0x1134
 800126c:	4413      	add	r3, r2
 800126e:	681b      	ldr	r3, [r3, #0]
 8001270:	f003 0301 	and.w	r3, r3, #1
 8001274:	2b01      	cmp	r3, #1
 8001276:	d109      	bne.n	800128c <HAL_ETH_IRQHandler+0x7c>
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
        /*Call registered Transmit complete callback*/
        heth->TxCpltCallback(heth);
#else
      /* Transfer complete callback */
      HAL_ETH_TxCpltCallback(heth);
 8001278:	6878      	ldr	r0, [r7, #4]
 800127a:	f000 f8b3 	bl	80013e4 <HAL_ETH_TxCpltCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */

      /* Clear the Eth DMA Tx IT pending bits */
      __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMACSR_TI | ETH_DMACSR_NIS);
 800127e:	687b      	ldr	r3, [r7, #4]
 8001280:	681b      	ldr	r3, [r3, #0]
 8001282:	f503 538b 	add.w	r3, r3, #4448	; 0x1160
 8001286:	f248 0201 	movw	r2, #32769	; 0x8001
 800128a:	601a      	str	r2, [r3, #0]
    }
  }


  /* ETH DMA Error */
  if(__HAL_ETH_DMA_GET_IT(heth, ETH_DMACSR_AIS))
 800128c:	687b      	ldr	r3, [r7, #4]
 800128e:	681b      	ldr	r3, [r3, #0]
 8001290:	f503 538b 	add.w	r3, r3, #4448	; 0x1160
 8001294:	681b      	ldr	r3, [r3, #0]
 8001296:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800129a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800129e:	d149      	bne.n	8001334 <HAL_ETH_IRQHandler+0x124>
  {
    if(__HAL_ETH_DMA_GET_IT_SOURCE(heth, ETH_DMACIER_AIE))
 80012a0:	687b      	ldr	r3, [r7, #4]
 80012a2:	681a      	ldr	r2, [r3, #0]
 80012a4:	f241 1334 	movw	r3, #4404	; 0x1134
 80012a8:	4413      	add	r3, r2
 80012aa:	681b      	ldr	r3, [r3, #0]
 80012ac:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80012b0:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80012b4:	d13e      	bne.n	8001334 <HAL_ETH_IRQHandler+0x124>
    {
      heth->ErrorCode |= HAL_ETH_ERROR_DMA;
 80012b6:	687b      	ldr	r3, [r7, #4]
 80012b8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80012ba:	f043 0208 	orr.w	r2, r3, #8
 80012be:	687b      	ldr	r3, [r7, #4]
 80012c0:	65da      	str	r2, [r3, #92]	; 0x5c

      /* if fatal bus error occured */
      if (__HAL_ETH_DMA_GET_IT(heth, ETH_DMACSR_FBE))
 80012c2:	687b      	ldr	r3, [r7, #4]
 80012c4:	681b      	ldr	r3, [r3, #0]
 80012c6:	f503 538b 	add.w	r3, r3, #4448	; 0x1160
 80012ca:	681b      	ldr	r3, [r3, #0]
 80012cc:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80012d0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80012d4:	d11b      	bne.n	800130e <HAL_ETH_IRQHandler+0xfe>
      {
        /* Get DMA error code  */
        heth->DMAErrorCode = READ_BIT(heth->Instance->DMACSR, (ETH_DMACSR_FBE | ETH_DMACSR_TPS | ETH_DMACSR_RPS));
 80012d6:	687b      	ldr	r3, [r7, #4]
 80012d8:	681b      	ldr	r3, [r3, #0]
 80012da:	f503 538b 	add.w	r3, r3, #4448	; 0x1160
 80012de:	681a      	ldr	r2, [r3, #0]
 80012e0:	f241 1302 	movw	r3, #4354	; 0x1102
 80012e4:	4013      	ands	r3, r2
 80012e6:	687a      	ldr	r2, [r7, #4]
 80012e8:	6613      	str	r3, [r2, #96]	; 0x60

        /* Disable all interrupts */
        __HAL_ETH_DMA_DISABLE_IT(heth, ETH_DMACIER_NIE | ETH_DMACIER_AIE);
 80012ea:	687b      	ldr	r3, [r7, #4]
 80012ec:	681a      	ldr	r2, [r3, #0]
 80012ee:	f241 1334 	movw	r3, #4404	; 0x1134
 80012f2:	4413      	add	r3, r2
 80012f4:	681b      	ldr	r3, [r3, #0]
 80012f6:	687a      	ldr	r2, [r7, #4]
 80012f8:	6811      	ldr	r1, [r2, #0]
 80012fa:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80012fe:	f241 1334 	movw	r3, #4404	; 0x1134
 8001302:	440b      	add	r3, r1
 8001304:	601a      	str	r2, [r3, #0]

        /* Set HAL state to ERROR */
        heth->gState = HAL_ETH_STATE_ERROR;
 8001306:	687b      	ldr	r3, [r7, #4]
 8001308:	22e0      	movs	r2, #224	; 0xe0
 800130a:	655a      	str	r2, [r3, #84]	; 0x54
 800130c:	e00f      	b.n	800132e <HAL_ETH_IRQHandler+0x11e>
      }
      else
      {
        /* Get DMA error status  */
       heth->DMAErrorCode = READ_BIT(heth->Instance->DMACSR, (ETH_DMACSR_CDE | ETH_DMACSR_ETI | ETH_DMACSR_RWT |
 800130e:	687b      	ldr	r3, [r7, #4]
 8001310:	681b      	ldr	r3, [r3, #0]
 8001312:	f503 538b 	add.w	r3, r3, #4448	; 0x1160
 8001316:	681b      	ldr	r3, [r3, #0]
 8001318:	f403 42cd 	and.w	r2, r3, #26240	; 0x6680
 800131c:	687b      	ldr	r3, [r7, #4]
 800131e:	661a      	str	r2, [r3, #96]	; 0x60
                                                       ETH_DMACSR_RBU | ETH_DMACSR_AIS));

        /* Clear the interrupt summary flag */
        __HAL_ETH_DMA_CLEAR_IT(heth, (ETH_DMACSR_CDE | ETH_DMACSR_ETI | ETH_DMACSR_RWT |
 8001320:	687b      	ldr	r3, [r7, #4]
 8001322:	681b      	ldr	r3, [r3, #0]
 8001324:	f503 538b 	add.w	r3, r3, #4448	; 0x1160
 8001328:	f44f 42cd 	mov.w	r2, #26240	; 0x6680
 800132c:	601a      	str	r2, [r3, #0]
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
      /* Call registered DMA Error callback*/
      heth->DMAErrorCallback(heth);
#else
      /* Ethernet DMA Error callback */
      HAL_ETH_DMAErrorCallback(heth);
 800132e:	6878      	ldr	r0, [r7, #4]
 8001330:	f000 f862 	bl	80013f8 <HAL_ETH_DMAErrorCallback>

    }
  }

  /* ETH MAC Error IT */
  if(__HAL_ETH_MAC_GET_IT(heth, (ETH_MACIER_RXSTSIE | ETH_MACIER_TXSTSIE)))
 8001334:	687b      	ldr	r3, [r7, #4]
 8001336:	681b      	ldr	r3, [r3, #0]
 8001338:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800133c:	f403 43c0 	and.w	r3, r3, #24576	; 0x6000
 8001340:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8001344:	d10e      	bne.n	8001364 <HAL_ETH_IRQHandler+0x154>
  {
    /* Get MAC Rx Tx status and clear Status register pending bit */
    heth->MACErrorCode = READ_REG(heth->Instance->MACRXTXSR);
 8001346:	687b      	ldr	r3, [r7, #4]
 8001348:	681b      	ldr	r3, [r3, #0]
 800134a:	f8d3 20b8 	ldr.w	r2, [r3, #184]	; 0xb8
 800134e:	687b      	ldr	r3, [r7, #4]
 8001350:	665a      	str	r2, [r3, #100]	; 0x64

    heth->gState = HAL_ETH_STATE_ERROR;
 8001352:	687b      	ldr	r3, [r7, #4]
 8001354:	22e0      	movs	r2, #224	; 0xe0
 8001356:	655a      	str	r2, [r3, #84]	; 0x54
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    /* Call registered MAC Error callback*/
    heth->DMAErrorCallback(heth);
#else
    /* Ethernet MAC Error callback */
    HAL_ETH_MACErrorCallback(heth);
 8001358:	6878      	ldr	r0, [r7, #4]
 800135a:	f000 f857 	bl	800140c <HAL_ETH_MACErrorCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */

    heth->MACErrorCode = (uint32_t)(0x0U);
 800135e:	687b      	ldr	r3, [r7, #4]
 8001360:	2200      	movs	r2, #0
 8001362:	665a      	str	r2, [r3, #100]	; 0x64
  }

  /* ETH PMT IT */
  if(__HAL_ETH_MAC_GET_IT(heth, ETH_MAC_PMT_IT))
 8001364:	687b      	ldr	r3, [r7, #4]
 8001366:	681b      	ldr	r3, [r3, #0]
 8001368:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800136c:	f003 0310 	and.w	r3, r3, #16
 8001370:	2b10      	cmp	r3, #16
 8001372:	d10d      	bne.n	8001390 <HAL_ETH_IRQHandler+0x180>
  {
    /* Get MAC Wake-up source and clear the status register pending bit */
    heth->MACWakeUpEvent = READ_BIT(heth->Instance->MACPCSR, (ETH_MACPCSR_RWKPRCVD | ETH_MACPCSR_MGKPRCVD));
 8001374:	687b      	ldr	r3, [r7, #4]
 8001376:	681b      	ldr	r3, [r3, #0]
 8001378:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 800137c:	f003 0260 	and.w	r2, r3, #96	; 0x60
 8001380:	687b      	ldr	r3, [r7, #4]
 8001382:	669a      	str	r2, [r3, #104]	; 0x68
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    /* Call registered PMT callback*/
    heth->PMTCallback(heth);
#else
    /* Ethernet PMT callback */
    HAL_ETH_PMTCallback(heth);
 8001384:	6878      	ldr	r0, [r7, #4]
 8001386:	f000 f84b 	bl	8001420 <HAL_ETH_PMTCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */

    heth->MACWakeUpEvent = (uint32_t)(0x0U);
 800138a:	687b      	ldr	r3, [r7, #4]
 800138c:	2200      	movs	r2, #0
 800138e:	669a      	str	r2, [r3, #104]	; 0x68
  }

  /* ETH EEE IT */
  if(__HAL_ETH_MAC_GET_IT(heth, ETH_MAC_LPI_IT))
 8001390:	687b      	ldr	r3, [r7, #4]
 8001392:	681b      	ldr	r3, [r3, #0]
 8001394:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8001398:	f003 0320 	and.w	r3, r3, #32
 800139c:	2b20      	cmp	r3, #32
 800139e:	d10d      	bne.n	80013bc <HAL_ETH_IRQHandler+0x1ac>
  {
    /* Get MAC LPI interrupt source and clear the status register pending bit */
    heth->MACLPIEvent = READ_BIT(heth->Instance->MACPCSR, 0x0000000FU);
 80013a0:	687b      	ldr	r3, [r7, #4]
 80013a2:	681b      	ldr	r3, [r3, #0]
 80013a4:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 80013a8:	f003 020f 	and.w	r2, r3, #15
 80013ac:	687b      	ldr	r3, [r7, #4]
 80013ae:	66da      	str	r2, [r3, #108]	; 0x6c
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    /* Call registered EEE callback*/
    heth->EEECallback(heth);
#else
    /* Ethernet EEE callback */
    HAL_ETH_EEECallback(heth);
 80013b0:	6878      	ldr	r0, [r7, #4]
 80013b2:	f000 f83f 	bl	8001434 <HAL_ETH_EEECallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */

    heth->MACLPIEvent = (uint32_t)(0x0U);
 80013b6:	687b      	ldr	r3, [r7, #4]
 80013b8:	2200      	movs	r2, #0
 80013ba:	66da      	str	r2, [r3, #108]	; 0x6c
#endif
    }
  }
#else
  /* check ETH WAKEUP exti flag */
  if(__HAL_ETH_WAKEUP_EXTI_GET_FLAG(ETH_WAKEUP_EXTI_LINE) != (uint32_t)RESET)
 80013bc:	4b08      	ldr	r3, [pc, #32]	; (80013e0 <HAL_ETH_IRQHandler+0x1d0>)
 80013be:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80013c0:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80013c4:	2b00      	cmp	r3, #0
 80013c6:	d006      	beq.n	80013d6 <HAL_ETH_IRQHandler+0x1c6>
  {
    /* Clear ETH WAKEUP Exti pending bit */
    __HAL_ETH_WAKEUP_EXTI_CLEAR_FLAG(ETH_WAKEUP_EXTI_LINE);
 80013c8:	4b05      	ldr	r3, [pc, #20]	; (80013e0 <HAL_ETH_IRQHandler+0x1d0>)
 80013ca:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 80013ce:	629a      	str	r2, [r3, #40]	; 0x28
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
      /* Call registered WakeUp callback*/
      heth->WakeUpCallback(heth);
#else
      /* ETH WAKEUP callback */
      HAL_ETH_WakeUpCallback(heth);
 80013d0:	6878      	ldr	r0, [r7, #4]
 80013d2:	f000 f839 	bl	8001448 <HAL_ETH_WakeUpCallback>
#endif
  }
#endif
}
 80013d6:	bf00      	nop
 80013d8:	3708      	adds	r7, #8
 80013da:	46bd      	mov	sp, r7
 80013dc:	bd80      	pop	{r7, pc}
 80013de:	bf00      	nop
 80013e0:	58000080 	.word	0x58000080

080013e4 <HAL_ETH_TxCpltCallback>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_TxCpltCallback(ETH_HandleTypeDef *heth)
{
 80013e4:	b480      	push	{r7}
 80013e6:	b083      	sub	sp, #12
 80013e8:	af00      	add	r7, sp, #0
 80013ea:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);
  /* NOTE : This function Should not be modified, when the callback is needed,
  the HAL_ETH_TxCpltCallback could be implemented in the user file
  */
}
 80013ec:	bf00      	nop
 80013ee:	370c      	adds	r7, #12
 80013f0:	46bd      	mov	sp, r7
 80013f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013f6:	4770      	bx	lr

080013f8 <HAL_ETH_DMAErrorCallback>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_DMAErrorCallback(ETH_HandleTypeDef *heth)
{
 80013f8:	b480      	push	{r7}
 80013fa:	b083      	sub	sp, #12
 80013fc:	af00      	add	r7, sp, #0
 80013fe:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);
  /* NOTE : This function Should not be modified, when the callback is needed,
  the HAL_ETH_DMAErrorCallback could be implemented in the user file
  */
}
 8001400:	bf00      	nop
 8001402:	370c      	adds	r7, #12
 8001404:	46bd      	mov	sp, r7
 8001406:	f85d 7b04 	ldr.w	r7, [sp], #4
 800140a:	4770      	bx	lr

0800140c <HAL_ETH_MACErrorCallback>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_MACErrorCallback(ETH_HandleTypeDef *heth)
{
 800140c:	b480      	push	{r7}
 800140e:	b083      	sub	sp, #12
 8001410:	af00      	add	r7, sp, #0
 8001412:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);
  /* NOTE : This function Should not be modified, when the callback is needed,
  the HAL_ETH_MACErrorCallback could be implemented in the user file
  */
}
 8001414:	bf00      	nop
 8001416:	370c      	adds	r7, #12
 8001418:	46bd      	mov	sp, r7
 800141a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800141e:	4770      	bx	lr

08001420 <HAL_ETH_PMTCallback>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_PMTCallback(ETH_HandleTypeDef *heth)
{
 8001420:	b480      	push	{r7}
 8001422:	b083      	sub	sp, #12
 8001424:	af00      	add	r7, sp, #0
 8001426:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);
  /* NOTE : This function Should not be modified, when the callback is needed,
  the HAL_ETH_PMTCallback could be implemented in the user file
  */
}
 8001428:	bf00      	nop
 800142a:	370c      	adds	r7, #12
 800142c:	46bd      	mov	sp, r7
 800142e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001432:	4770      	bx	lr

08001434 <HAL_ETH_EEECallback>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_EEECallback(ETH_HandleTypeDef *heth)
{
 8001434:	b480      	push	{r7}
 8001436:	b083      	sub	sp, #12
 8001438:	af00      	add	r7, sp, #0
 800143a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);
  /* NOTE : This function Should not be modified, when the callback is needed,
  the HAL_ETH_EEECallback could be implemented in the user file
  */
}
 800143c:	bf00      	nop
 800143e:	370c      	adds	r7, #12
 8001440:	46bd      	mov	sp, r7
 8001442:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001446:	4770      	bx	lr

08001448 <HAL_ETH_WakeUpCallback>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_WakeUpCallback(ETH_HandleTypeDef *heth)
{
 8001448:	b480      	push	{r7}
 800144a:	b083      	sub	sp, #12
 800144c:	af00      	add	r7, sp, #0
 800144e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ETH_WakeUpCallback could be implemented in the user file
   */
}
 8001450:	bf00      	nop
 8001452:	370c      	adds	r7, #12
 8001454:	46bd      	mov	sp, r7
 8001456:	f85d 7b04 	ldr.w	r7, [sp], #4
 800145a:	4770      	bx	lr

0800145c <HAL_ETH_ReadPHYRegister>:
  * @param  PHYReg: PHY register address, must be a value from 0 to 31
  * @param pRegValue: parameter to hold read value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_ReadPHYRegister(ETH_HandleTypeDef *heth, uint32_t PHYAddr, uint32_t PHYReg, uint32_t *pRegValue)
{
 800145c:	b580      	push	{r7, lr}
 800145e:	b086      	sub	sp, #24
 8001460:	af00      	add	r7, sp, #0
 8001462:	60f8      	str	r0, [r7, #12]
 8001464:	60b9      	str	r1, [r7, #8]
 8001466:	607a      	str	r2, [r7, #4]
 8001468:	603b      	str	r3, [r7, #0]
  uint32_t tmpreg, tickstart;

  /* Check for the Busy flag */
  if(READ_BIT(heth->Instance->MACMDIOAR, ETH_MACMDIOAR_MB) != 0U)
 800146a:	68fb      	ldr	r3, [r7, #12]
 800146c:	681b      	ldr	r3, [r3, #0]
 800146e:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8001472:	f003 0301 	and.w	r3, r3, #1
 8001476:	2b00      	cmp	r3, #0
 8001478:	d001      	beq.n	800147e <HAL_ETH_ReadPHYRegister+0x22>
  {
    return HAL_ERROR;
 800147a:	2301      	movs	r3, #1
 800147c:	e03e      	b.n	80014fc <HAL_ETH_ReadPHYRegister+0xa0>
  }

  /* Get the  MACMDIOAR value */
  WRITE_REG(tmpreg, heth->Instance->MACMDIOAR);
 800147e:	68fb      	ldr	r3, [r7, #12]
 8001480:	681b      	ldr	r3, [r3, #0]
 8001482:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8001486:	617b      	str	r3, [r7, #20]
     - Set the PHY device address
     - Set the PHY register address
     - Set the read mode
     - Set the MII Busy bit */

  MODIFY_REG(tmpreg, ETH_MACMDIOAR_PA, (PHYAddr <<21));
 8001488:	697b      	ldr	r3, [r7, #20]
 800148a:	f023 7278 	bic.w	r2, r3, #65011712	; 0x3e00000
 800148e:	68bb      	ldr	r3, [r7, #8]
 8001490:	055b      	lsls	r3, r3, #21
 8001492:	4313      	orrs	r3, r2
 8001494:	617b      	str	r3, [r7, #20]
  MODIFY_REG(tmpreg, ETH_MACMDIOAR_RDA, (PHYReg << 16));
 8001496:	697b      	ldr	r3, [r7, #20]
 8001498:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 800149c:	687b      	ldr	r3, [r7, #4]
 800149e:	041b      	lsls	r3, r3, #16
 80014a0:	4313      	orrs	r3, r2
 80014a2:	617b      	str	r3, [r7, #20]
  MODIFY_REG(tmpreg, ETH_MACMDIOAR_MOC, ETH_MACMDIOAR_MOC_RD);
 80014a4:	697b      	ldr	r3, [r7, #20]
 80014a6:	f043 030c 	orr.w	r3, r3, #12
 80014aa:	617b      	str	r3, [r7, #20]
  SET_BIT(tmpreg, ETH_MACMDIOAR_MB);
 80014ac:	697b      	ldr	r3, [r7, #20]
 80014ae:	f043 0301 	orr.w	r3, r3, #1
 80014b2:	617b      	str	r3, [r7, #20]

  /* Write the result value into the MDII Address register */
  WRITE_REG(heth->Instance->MACMDIOAR, tmpreg);
 80014b4:	68fb      	ldr	r3, [r7, #12]
 80014b6:	681b      	ldr	r3, [r3, #0]
 80014b8:	697a      	ldr	r2, [r7, #20]
 80014ba:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

  tickstart = HAL_GetTick();
 80014be:	f7ff f871 	bl	80005a4 <HAL_GetTick>
 80014c2:	6138      	str	r0, [r7, #16]

  /* Wait for the Busy flag */
  while(READ_BIT(heth->Instance->MACMDIOAR, ETH_MACMDIOAR_MB) > 0U)
 80014c4:	e009      	b.n	80014da <HAL_ETH_ReadPHYRegister+0x7e>
  {
    if(((HAL_GetTick() - tickstart ) > ETH_MDIO_BUS_TIMEOUT))
 80014c6:	f7ff f86d 	bl	80005a4 <HAL_GetTick>
 80014ca:	4602      	mov	r2, r0
 80014cc:	693b      	ldr	r3, [r7, #16]
 80014ce:	1ad3      	subs	r3, r2, r3
 80014d0:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80014d4:	d901      	bls.n	80014da <HAL_ETH_ReadPHYRegister+0x7e>
    {
      return HAL_ERROR;
 80014d6:	2301      	movs	r3, #1
 80014d8:	e010      	b.n	80014fc <HAL_ETH_ReadPHYRegister+0xa0>
  while(READ_BIT(heth->Instance->MACMDIOAR, ETH_MACMDIOAR_MB) > 0U)
 80014da:	68fb      	ldr	r3, [r7, #12]
 80014dc:	681b      	ldr	r3, [r3, #0]
 80014de:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80014e2:	f003 0301 	and.w	r3, r3, #1
 80014e6:	2b00      	cmp	r3, #0
 80014e8:	d1ed      	bne.n	80014c6 <HAL_ETH_ReadPHYRegister+0x6a>
    }
  }

  /* Get MACMIIDR value */
  WRITE_REG(*pRegValue, (uint16_t)heth->Instance->MACMDIODR);
 80014ea:	68fb      	ldr	r3, [r7, #12]
 80014ec:	681b      	ldr	r3, [r3, #0]
 80014ee:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 80014f2:	b29b      	uxth	r3, r3
 80014f4:	461a      	mov	r2, r3
 80014f6:	683b      	ldr	r3, [r7, #0]
 80014f8:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 80014fa:	2300      	movs	r3, #0
}
 80014fc:	4618      	mov	r0, r3
 80014fe:	3718      	adds	r7, #24
 8001500:	46bd      	mov	sp, r7
 8001502:	bd80      	pop	{r7, pc}

08001504 <HAL_ETH_WritePHYRegister>:
  * @param  PHYReg: PHY register address, must be a value from 0 to 31
  * @param  RegValue: the value to write
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_WritePHYRegister(ETH_HandleTypeDef *heth, uint32_t PHYAddr, uint32_t PHYReg, uint32_t RegValue)
{
 8001504:	b580      	push	{r7, lr}
 8001506:	b086      	sub	sp, #24
 8001508:	af00      	add	r7, sp, #0
 800150a:	60f8      	str	r0, [r7, #12]
 800150c:	60b9      	str	r1, [r7, #8]
 800150e:	607a      	str	r2, [r7, #4]
 8001510:	603b      	str	r3, [r7, #0]
  uint32_t tmpreg, tickstart;

  /* Check for the Busy flag */
  if(READ_BIT(heth->Instance->MACMDIOAR, ETH_MACMDIOAR_MB) != 0U)
 8001512:	68fb      	ldr	r3, [r7, #12]
 8001514:	681b      	ldr	r3, [r3, #0]
 8001516:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800151a:	f003 0301 	and.w	r3, r3, #1
 800151e:	2b00      	cmp	r3, #0
 8001520:	d001      	beq.n	8001526 <HAL_ETH_WritePHYRegister+0x22>
  {
    return HAL_ERROR;
 8001522:	2301      	movs	r3, #1
 8001524:	e03c      	b.n	80015a0 <HAL_ETH_WritePHYRegister+0x9c>
  }

  /* Get the  MACMDIOAR value */
  WRITE_REG(tmpreg, heth->Instance->MACMDIOAR);
 8001526:	68fb      	ldr	r3, [r7, #12]
 8001528:	681b      	ldr	r3, [r3, #0]
 800152a:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800152e:	617b      	str	r3, [r7, #20]
     - Set the PHY device address
     - Set the PHY register address
     - Set the write mode
     - Set the MII Busy bit */

  MODIFY_REG(tmpreg, ETH_MACMDIOAR_PA, (PHYAddr <<21));
 8001530:	697b      	ldr	r3, [r7, #20]
 8001532:	f023 7278 	bic.w	r2, r3, #65011712	; 0x3e00000
 8001536:	68bb      	ldr	r3, [r7, #8]
 8001538:	055b      	lsls	r3, r3, #21
 800153a:	4313      	orrs	r3, r2
 800153c:	617b      	str	r3, [r7, #20]
  MODIFY_REG(tmpreg, ETH_MACMDIOAR_RDA, (PHYReg << 16));
 800153e:	697b      	ldr	r3, [r7, #20]
 8001540:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8001544:	687b      	ldr	r3, [r7, #4]
 8001546:	041b      	lsls	r3, r3, #16
 8001548:	4313      	orrs	r3, r2
 800154a:	617b      	str	r3, [r7, #20]
  MODIFY_REG(tmpreg, ETH_MACMDIOAR_MOC, ETH_MACMDIOAR_MOC_WR);
 800154c:	697b      	ldr	r3, [r7, #20]
 800154e:	f023 030c 	bic.w	r3, r3, #12
 8001552:	f043 0304 	orr.w	r3, r3, #4
 8001556:	617b      	str	r3, [r7, #20]
  SET_BIT(tmpreg, ETH_MACMDIOAR_MB);
 8001558:	697b      	ldr	r3, [r7, #20]
 800155a:	f043 0301 	orr.w	r3, r3, #1
 800155e:	617b      	str	r3, [r7, #20]


  /* Give the value to the MII data register */
  WRITE_REG(ETH->MACMDIODR, (uint16_t)RegValue);
 8001560:	683b      	ldr	r3, [r7, #0]
 8001562:	b29a      	uxth	r2, r3
 8001564:	4b10      	ldr	r3, [pc, #64]	; (80015a8 <HAL_ETH_WritePHYRegister+0xa4>)
 8001566:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  /* Write the result value into the MII Address register */
  WRITE_REG(ETH->MACMDIOAR, tmpreg);
 800156a:	4a0f      	ldr	r2, [pc, #60]	; (80015a8 <HAL_ETH_WritePHYRegister+0xa4>)
 800156c:	697b      	ldr	r3, [r7, #20]
 800156e:	f8c2 3200 	str.w	r3, [r2, #512]	; 0x200

  tickstart = HAL_GetTick();
 8001572:	f7ff f817 	bl	80005a4 <HAL_GetTick>
 8001576:	6138      	str	r0, [r7, #16]

  /* Wait for the Busy flag */
  while(READ_BIT(heth->Instance->MACMDIOAR, ETH_MACMDIOAR_MB) > 0U)
 8001578:	e009      	b.n	800158e <HAL_ETH_WritePHYRegister+0x8a>
  {
    if(((HAL_GetTick() - tickstart ) > ETH_MDIO_BUS_TIMEOUT))
 800157a:	f7ff f813 	bl	80005a4 <HAL_GetTick>
 800157e:	4602      	mov	r2, r0
 8001580:	693b      	ldr	r3, [r7, #16]
 8001582:	1ad3      	subs	r3, r2, r3
 8001584:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001588:	d901      	bls.n	800158e <HAL_ETH_WritePHYRegister+0x8a>
    {
      return HAL_ERROR;
 800158a:	2301      	movs	r3, #1
 800158c:	e008      	b.n	80015a0 <HAL_ETH_WritePHYRegister+0x9c>
  while(READ_BIT(heth->Instance->MACMDIOAR, ETH_MACMDIOAR_MB) > 0U)
 800158e:	68fb      	ldr	r3, [r7, #12]
 8001590:	681b      	ldr	r3, [r3, #0]
 8001592:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8001596:	f003 0301 	and.w	r3, r3, #1
 800159a:	2b00      	cmp	r3, #0
 800159c:	d1ed      	bne.n	800157a <HAL_ETH_WritePHYRegister+0x76>
    }
  }

  return HAL_OK;
 800159e:	2300      	movs	r3, #0
}
 80015a0:	4618      	mov	r0, r3
 80015a2:	3718      	adds	r7, #24
 80015a4:	46bd      	mov	sp, r7
 80015a6:	bd80      	pop	{r7, pc}
 80015a8:	40028000 	.word	0x40028000

080015ac <HAL_ETH_GetMACConfig>:
  * @param  macconf: pointer to a ETH_MACConfigTypeDef structure that will hold
  *         the configuration of the MAC.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_ETH_GetMACConfig(ETH_HandleTypeDef *heth, ETH_MACConfigTypeDef *macconf)
{
 80015ac:	b480      	push	{r7}
 80015ae:	b083      	sub	sp, #12
 80015b0:	af00      	add	r7, sp, #0
 80015b2:	6078      	str	r0, [r7, #4]
 80015b4:	6039      	str	r1, [r7, #0]
  if (macconf == NULL)
 80015b6:	683b      	ldr	r3, [r7, #0]
 80015b8:	2b00      	cmp	r3, #0
 80015ba:	d101      	bne.n	80015c0 <HAL_ETH_GetMACConfig+0x14>
  {
    return HAL_ERROR;
 80015bc:	2301      	movs	r3, #1
 80015be:	e1c3      	b.n	8001948 <HAL_ETH_GetMACConfig+0x39c>
  }

  /* Get MAC parameters */
  macconf->PreambleLength = READ_BIT(heth->Instance->MACCR, ETH_MACCR_PRELEN);
 80015c0:	687b      	ldr	r3, [r7, #4]
 80015c2:	681b      	ldr	r3, [r3, #0]
 80015c4:	681b      	ldr	r3, [r3, #0]
 80015c6:	f003 020c 	and.w	r2, r3, #12
 80015ca:	683b      	ldr	r3, [r7, #0]
 80015cc:	62da      	str	r2, [r3, #44]	; 0x2c
  macconf->DeferralCheck = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_DC)>> 4) > 0U) ? ENABLE : DISABLE;
 80015ce:	687b      	ldr	r3, [r7, #4]
 80015d0:	681b      	ldr	r3, [r3, #0]
 80015d2:	681b      	ldr	r3, [r3, #0]
 80015d4:	f003 0310 	and.w	r3, r3, #16
 80015d8:	2b00      	cmp	r3, #0
 80015da:	bf14      	ite	ne
 80015dc:	2301      	movne	r3, #1
 80015de:	2300      	moveq	r3, #0
 80015e0:	b2db      	uxtb	r3, r3
 80015e2:	461a      	mov	r2, r3
 80015e4:	683b      	ldr	r3, [r7, #0]
 80015e6:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
  macconf->BackOffLimit = READ_BIT(heth->Instance->MACCR, ETH_MACCR_BL);
 80015ea:	687b      	ldr	r3, [r7, #4]
 80015ec:	681b      	ldr	r3, [r3, #0]
 80015ee:	681b      	ldr	r3, [r3, #0]
 80015f0:	f003 0260 	and.w	r2, r3, #96	; 0x60
 80015f4:	683b      	ldr	r3, [r7, #0]
 80015f6:	625a      	str	r2, [r3, #36]	; 0x24
  macconf->RetryTransmission = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_DR) >> 8) == 0U) ? ENABLE : DISABLE;
 80015f8:	687b      	ldr	r3, [r7, #4]
 80015fa:	681b      	ldr	r3, [r3, #0]
 80015fc:	681b      	ldr	r3, [r3, #0]
 80015fe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001602:	2b00      	cmp	r3, #0
 8001604:	bf0c      	ite	eq
 8001606:	2301      	moveq	r3, #1
 8001608:	2300      	movne	r3, #0
 800160a:	b2db      	uxtb	r3, r3
 800160c:	461a      	mov	r2, r3
 800160e:	683b      	ldr	r3, [r7, #0]
 8001610:	f883 2020 	strb.w	r2, [r3, #32]
  macconf->CarrierSenseDuringTransmit = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_DCRS) >> 9) > 0U) ? ENABLE : DISABLE;
 8001614:	687b      	ldr	r3, [r7, #4]
 8001616:	681b      	ldr	r3, [r3, #0]
 8001618:	681b      	ldr	r3, [r3, #0]
 800161a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800161e:	2b00      	cmp	r3, #0
 8001620:	bf14      	ite	ne
 8001622:	2301      	movne	r3, #1
 8001624:	2300      	moveq	r3, #0
 8001626:	b2db      	uxtb	r3, r3
 8001628:	461a      	mov	r2, r3
 800162a:	683b      	ldr	r3, [r7, #0]
 800162c:	77da      	strb	r2, [r3, #31]
  macconf->ReceiveOwn = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_DO) >> 10) == 0U) ? ENABLE : DISABLE;
 800162e:	687b      	ldr	r3, [r7, #4]
 8001630:	681b      	ldr	r3, [r3, #0]
 8001632:	681b      	ldr	r3, [r3, #0]
 8001634:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001638:	2b00      	cmp	r3, #0
 800163a:	bf0c      	ite	eq
 800163c:	2301      	moveq	r3, #1
 800163e:	2300      	movne	r3, #0
 8001640:	b2db      	uxtb	r3, r3
 8001642:	461a      	mov	r2, r3
 8001644:	683b      	ldr	r3, [r7, #0]
 8001646:	779a      	strb	r2, [r3, #30]
  macconf->CarrierSenseBeforeTransmit = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_ECRSFD) >> 11) > 0U) ? ENABLE : DISABLE;
 8001648:	687b      	ldr	r3, [r7, #4]
 800164a:	681b      	ldr	r3, [r3, #0]
 800164c:	681b      	ldr	r3, [r3, #0]
 800164e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001652:	2b00      	cmp	r3, #0
 8001654:	bf14      	ite	ne
 8001656:	2301      	movne	r3, #1
 8001658:	2300      	moveq	r3, #0
 800165a:	b2db      	uxtb	r3, r3
 800165c:	461a      	mov	r2, r3
 800165e:	683b      	ldr	r3, [r7, #0]
 8001660:	775a      	strb	r2, [r3, #29]
  macconf->LoopbackMode = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_LM) >> 12) > 0U) ? ENABLE : DISABLE;
 8001662:	687b      	ldr	r3, [r7, #4]
 8001664:	681b      	ldr	r3, [r3, #0]
 8001666:	681b      	ldr	r3, [r3, #0]
 8001668:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800166c:	2b00      	cmp	r3, #0
 800166e:	bf14      	ite	ne
 8001670:	2301      	movne	r3, #1
 8001672:	2300      	moveq	r3, #0
 8001674:	b2db      	uxtb	r3, r3
 8001676:	461a      	mov	r2, r3
 8001678:	683b      	ldr	r3, [r7, #0]
 800167a:	771a      	strb	r2, [r3, #28]
  macconf->DuplexMode = READ_BIT(heth->Instance->MACCR, ETH_MACCR_DM);
 800167c:	687b      	ldr	r3, [r7, #4]
 800167e:	681b      	ldr	r3, [r3, #0]
 8001680:	681b      	ldr	r3, [r3, #0]
 8001682:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8001686:	683b      	ldr	r3, [r7, #0]
 8001688:	619a      	str	r2, [r3, #24]
  macconf->Speed = READ_BIT(heth->Instance->MACCR, ETH_MACCR_FES);
 800168a:	687b      	ldr	r3, [r7, #4]
 800168c:	681b      	ldr	r3, [r3, #0]
 800168e:	681b      	ldr	r3, [r3, #0]
 8001690:	f403 4280 	and.w	r2, r3, #16384	; 0x4000
 8001694:	683b      	ldr	r3, [r7, #0]
 8001696:	615a      	str	r2, [r3, #20]
  macconf->JumboPacket = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_JE) >> 16) > 0U) ? ENABLE : DISABLE;
 8001698:	687b      	ldr	r3, [r7, #4]
 800169a:	681b      	ldr	r3, [r3, #0]
 800169c:	681b      	ldr	r3, [r3, #0]
 800169e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80016a2:	2b00      	cmp	r3, #0
 80016a4:	bf14      	ite	ne
 80016a6:	2301      	movne	r3, #1
 80016a8:	2300      	moveq	r3, #0
 80016aa:	b2db      	uxtb	r3, r3
 80016ac:	461a      	mov	r2, r3
 80016ae:	683b      	ldr	r3, [r7, #0]
 80016b0:	749a      	strb	r2, [r3, #18]
  macconf->Jabber = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_JD) >>17) == 0U) ? ENABLE : DISABLE;
 80016b2:	687b      	ldr	r3, [r7, #4]
 80016b4:	681b      	ldr	r3, [r3, #0]
 80016b6:	681b      	ldr	r3, [r3, #0]
 80016b8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80016bc:	2b00      	cmp	r3, #0
 80016be:	bf0c      	ite	eq
 80016c0:	2301      	moveq	r3, #1
 80016c2:	2300      	movne	r3, #0
 80016c4:	b2db      	uxtb	r3, r3
 80016c6:	461a      	mov	r2, r3
 80016c8:	683b      	ldr	r3, [r7, #0]
 80016ca:	745a      	strb	r2, [r3, #17]
  macconf->Watchdog = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_WD) >>19) == 0U) ? ENABLE : DISABLE;
 80016cc:	687b      	ldr	r3, [r7, #4]
 80016ce:	681b      	ldr	r3, [r3, #0]
 80016d0:	681b      	ldr	r3, [r3, #0]
 80016d2:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80016d6:	2b00      	cmp	r3, #0
 80016d8:	bf0c      	ite	eq
 80016da:	2301      	moveq	r3, #1
 80016dc:	2300      	movne	r3, #0
 80016de:	b2db      	uxtb	r3, r3
 80016e0:	461a      	mov	r2, r3
 80016e2:	683b      	ldr	r3, [r7, #0]
 80016e4:	741a      	strb	r2, [r3, #16]
  macconf->AutomaticPadCRCStrip = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_ACS) >> 20) > 0U) ? ENABLE : DISABLE;
 80016e6:	687b      	ldr	r3, [r7, #4]
 80016e8:	681b      	ldr	r3, [r3, #0]
 80016ea:	681b      	ldr	r3, [r3, #0]
 80016ec:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80016f0:	2b00      	cmp	r3, #0
 80016f2:	bf14      	ite	ne
 80016f4:	2301      	movne	r3, #1
 80016f6:	2300      	moveq	r3, #0
 80016f8:	b2db      	uxtb	r3, r3
 80016fa:	461a      	mov	r2, r3
 80016fc:	683b      	ldr	r3, [r7, #0]
 80016fe:	73da      	strb	r2, [r3, #15]
  macconf->CRCStripTypePacket = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_CST) >> 21) > 0U) ? ENABLE : DISABLE;
 8001700:	687b      	ldr	r3, [r7, #4]
 8001702:	681b      	ldr	r3, [r3, #0]
 8001704:	681b      	ldr	r3, [r3, #0]
 8001706:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800170a:	2b00      	cmp	r3, #0
 800170c:	bf14      	ite	ne
 800170e:	2301      	movne	r3, #1
 8001710:	2300      	moveq	r3, #0
 8001712:	b2db      	uxtb	r3, r3
 8001714:	461a      	mov	r2, r3
 8001716:	683b      	ldr	r3, [r7, #0]
 8001718:	739a      	strb	r2, [r3, #14]
  macconf->Support2KPacket = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_S2KP) >> 22) > 0U) ? ENABLE : DISABLE;
 800171a:	687b      	ldr	r3, [r7, #4]
 800171c:	681b      	ldr	r3, [r3, #0]
 800171e:	681b      	ldr	r3, [r3, #0]
 8001720:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001724:	2b00      	cmp	r3, #0
 8001726:	bf14      	ite	ne
 8001728:	2301      	movne	r3, #1
 800172a:	2300      	moveq	r3, #0
 800172c:	b2db      	uxtb	r3, r3
 800172e:	461a      	mov	r2, r3
 8001730:	683b      	ldr	r3, [r7, #0]
 8001732:	735a      	strb	r2, [r3, #13]
  macconf->GiantPacketSizeLimitControl = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_GPSLCE) >> 23) > 0U) ? ENABLE : DISABLE;
 8001734:	687b      	ldr	r3, [r7, #4]
 8001736:	681b      	ldr	r3, [r3, #0]
 8001738:	681b      	ldr	r3, [r3, #0]
 800173a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800173e:	2b00      	cmp	r3, #0
 8001740:	bf14      	ite	ne
 8001742:	2301      	movne	r3, #1
 8001744:	2300      	moveq	r3, #0
 8001746:	b2db      	uxtb	r3, r3
 8001748:	461a      	mov	r2, r3
 800174a:	683b      	ldr	r3, [r7, #0]
 800174c:	731a      	strb	r2, [r3, #12]
  macconf->InterPacketGapVal = READ_BIT(heth->Instance->MACCR, ETH_MACCR_IPG);
 800174e:	687b      	ldr	r3, [r7, #4]
 8001750:	681b      	ldr	r3, [r3, #0]
 8001752:	681b      	ldr	r3, [r3, #0]
 8001754:	f003 62e0 	and.w	r2, r3, #117440512	; 0x7000000
 8001758:	683b      	ldr	r3, [r7, #0]
 800175a:	609a      	str	r2, [r3, #8]
  macconf->ChecksumOffload = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_IPC) >> 27) > 0U) ? ENABLE : DISABLE;
 800175c:	687b      	ldr	r3, [r7, #4]
 800175e:	681b      	ldr	r3, [r3, #0]
 8001760:	681b      	ldr	r3, [r3, #0]
 8001762:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8001766:	2b00      	cmp	r3, #0
 8001768:	bf14      	ite	ne
 800176a:	2301      	movne	r3, #1
 800176c:	2300      	moveq	r3, #0
 800176e:	b2db      	uxtb	r3, r3
 8001770:	461a      	mov	r2, r3
 8001772:	683b      	ldr	r3, [r7, #0]
 8001774:	711a      	strb	r2, [r3, #4]
  macconf->SourceAddrControl = READ_BIT(heth->Instance->MACCR, ETH_MACCR_SARC);
 8001776:	687b      	ldr	r3, [r7, #4]
 8001778:	681b      	ldr	r3, [r3, #0]
 800177a:	681b      	ldr	r3, [r3, #0]
 800177c:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 8001780:	683b      	ldr	r3, [r7, #0]
 8001782:	601a      	str	r2, [r3, #0]

  macconf->GiantPacketSizeLimit = READ_BIT(heth->Instance->MACECR, ETH_MACECR_GPSL);
 8001784:	687b      	ldr	r3, [r7, #4]
 8001786:	681b      	ldr	r3, [r3, #0]
 8001788:	685b      	ldr	r3, [r3, #4]
 800178a:	f3c3 020d 	ubfx	r2, r3, #0, #14
 800178e:	683b      	ldr	r3, [r7, #0]
 8001790:	635a      	str	r2, [r3, #52]	; 0x34
  macconf->CRCCheckingRxPackets = ((READ_BIT(heth->Instance->MACECR, ETH_MACECR_DCRCC) >> 16) == 0U) ? ENABLE : DISABLE;
 8001792:	687b      	ldr	r3, [r7, #4]
 8001794:	681b      	ldr	r3, [r3, #0]
 8001796:	685b      	ldr	r3, [r3, #4]
 8001798:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800179c:	2b00      	cmp	r3, #0
 800179e:	bf0c      	ite	eq
 80017a0:	2301      	moveq	r3, #1
 80017a2:	2300      	movne	r3, #0
 80017a4:	b2db      	uxtb	r3, r3
 80017a6:	461a      	mov	r2, r3
 80017a8:	683b      	ldr	r3, [r7, #0]
 80017aa:	f883 2032 	strb.w	r2, [r3, #50]	; 0x32
  macconf->SlowProtocolDetect = ((READ_BIT(heth->Instance->MACECR, ETH_MACECR_SPEN) >> 17) > 0U) ? ENABLE : DISABLE;
 80017ae:	687b      	ldr	r3, [r7, #4]
 80017b0:	681b      	ldr	r3, [r3, #0]
 80017b2:	685b      	ldr	r3, [r3, #4]
 80017b4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80017b8:	2b00      	cmp	r3, #0
 80017ba:	bf14      	ite	ne
 80017bc:	2301      	movne	r3, #1
 80017be:	2300      	moveq	r3, #0
 80017c0:	b2db      	uxtb	r3, r3
 80017c2:	461a      	mov	r2, r3
 80017c4:	683b      	ldr	r3, [r7, #0]
 80017c6:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
  macconf->UnicastSlowProtocolPacketDetect = ((READ_BIT(heth->Instance->MACECR, ETH_MACECR_USP) >> 18) > 0U) ? ENABLE : DISABLE;
 80017ca:	687b      	ldr	r3, [r7, #4]
 80017cc:	681b      	ldr	r3, [r3, #0]
 80017ce:	685b      	ldr	r3, [r3, #4]
 80017d0:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80017d4:	2b00      	cmp	r3, #0
 80017d6:	bf14      	ite	ne
 80017d8:	2301      	movne	r3, #1
 80017da:	2300      	moveq	r3, #0
 80017dc:	b2db      	uxtb	r3, r3
 80017de:	461a      	mov	r2, r3
 80017e0:	683b      	ldr	r3, [r7, #0]
 80017e2:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  macconf->ExtendedInterPacketGap = ((READ_BIT(heth->Instance->MACECR, ETH_MACECR_EIPGEN) >> 24) > 0U) ? ENABLE : DISABLE;
 80017e6:	687b      	ldr	r3, [r7, #4]
 80017e8:	681b      	ldr	r3, [r3, #0]
 80017ea:	685b      	ldr	r3, [r3, #4]
 80017ec:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80017f0:	2b00      	cmp	r3, #0
 80017f2:	bf14      	ite	ne
 80017f4:	2301      	movne	r3, #1
 80017f6:	2300      	moveq	r3, #0
 80017f8:	b2db      	uxtb	r3, r3
 80017fa:	461a      	mov	r2, r3
 80017fc:	683b      	ldr	r3, [r7, #0]
 80017fe:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  macconf->ExtendedInterPacketGapVal = READ_BIT(heth->Instance->MACECR, ETH_MACECR_EIPG) >> 25;
 8001802:	687b      	ldr	r3, [r7, #4]
 8001804:	681b      	ldr	r3, [r3, #0]
 8001806:	685b      	ldr	r3, [r3, #4]
 8001808:	0e5b      	lsrs	r3, r3, #25
 800180a:	f003 021f 	and.w	r2, r3, #31
 800180e:	683b      	ldr	r3, [r7, #0]
 8001810:	63da      	str	r2, [r3, #60]	; 0x3c


  macconf->ProgrammableWatchdog = ((READ_BIT(heth->Instance->MACWTR, ETH_MACWTR_PWE) >> 8) > 0U) ? ENABLE : DISABLE;
 8001812:	687b      	ldr	r3, [r7, #4]
 8001814:	681b      	ldr	r3, [r3, #0]
 8001816:	68db      	ldr	r3, [r3, #12]
 8001818:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800181c:	2b00      	cmp	r3, #0
 800181e:	bf14      	ite	ne
 8001820:	2301      	movne	r3, #1
 8001822:	2300      	moveq	r3, #0
 8001824:	b2db      	uxtb	r3, r3
 8001826:	461a      	mov	r2, r3
 8001828:	683b      	ldr	r3, [r7, #0]
 800182a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  macconf->WatchdogTimeout = READ_BIT(heth->Instance->MACWTR, ETH_MACWTR_WTO);
 800182e:	687b      	ldr	r3, [r7, #4]
 8001830:	681b      	ldr	r3, [r3, #0]
 8001832:	68db      	ldr	r3, [r3, #12]
 8001834:	f003 020f 	and.w	r2, r3, #15
 8001838:	683b      	ldr	r3, [r7, #0]
 800183a:	645a      	str	r2, [r3, #68]	; 0x44

  macconf->TransmitFlowControl = ((READ_BIT(heth->Instance->MACTFCR, ETH_MACTFCR_TFE) >> 1) > 0U) ? ENABLE : DISABLE;
 800183c:	687b      	ldr	r3, [r7, #4]
 800183e:	681b      	ldr	r3, [r3, #0]
 8001840:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001842:	f003 0302 	and.w	r3, r3, #2
 8001846:	2b00      	cmp	r3, #0
 8001848:	bf14      	ite	ne
 800184a:	2301      	movne	r3, #1
 800184c:	2300      	moveq	r3, #0
 800184e:	b2db      	uxtb	r3, r3
 8001850:	461a      	mov	r2, r3
 8001852:	683b      	ldr	r3, [r7, #0]
 8001854:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
  macconf->ZeroQuantaPause = ((READ_BIT(heth->Instance->MACTFCR, ETH_MACTFCR_DZPQ) >> 7) == 0U) ? ENABLE : DISABLE;
 8001858:	687b      	ldr	r3, [r7, #4]
 800185a:	681b      	ldr	r3, [r3, #0]
 800185c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800185e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001862:	2b00      	cmp	r3, #0
 8001864:	bf0c      	ite	eq
 8001866:	2301      	moveq	r3, #1
 8001868:	2300      	movne	r3, #0
 800186a:	b2db      	uxtb	r3, r3
 800186c:	461a      	mov	r2, r3
 800186e:	683b      	ldr	r3, [r7, #0]
 8001870:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
  macconf->PauseLowThreshold = READ_BIT(heth->Instance->MACTFCR, ETH_MACTFCR_PLT);
 8001874:	687b      	ldr	r3, [r7, #4]
 8001876:	681b      	ldr	r3, [r3, #0]
 8001878:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800187a:	f003 0270 	and.w	r2, r3, #112	; 0x70
 800187e:	683b      	ldr	r3, [r7, #0]
 8001880:	651a      	str	r2, [r3, #80]	; 0x50
  macconf->PauseTime = (READ_BIT(heth->Instance->MACTFCR, ETH_MACTFCR_PT) >> 16);
 8001882:	687b      	ldr	r3, [r7, #4]
 8001884:	681b      	ldr	r3, [r3, #0]
 8001886:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001888:	0c1b      	lsrs	r3, r3, #16
 800188a:	b29a      	uxth	r2, r3
 800188c:	683b      	ldr	r3, [r7, #0]
 800188e:	649a      	str	r2, [r3, #72]	; 0x48


  macconf->ReceiveFlowControl = (READ_BIT(heth->Instance->MACRFCR, ETH_MACRFCR_RFE) > 0U) ? ENABLE : DISABLE;
 8001890:	687b      	ldr	r3, [r7, #4]
 8001892:	681b      	ldr	r3, [r3, #0]
 8001894:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001898:	f003 0301 	and.w	r3, r3, #1
 800189c:	2b00      	cmp	r3, #0
 800189e:	bf14      	ite	ne
 80018a0:	2301      	movne	r3, #1
 80018a2:	2300      	moveq	r3, #0
 80018a4:	b2db      	uxtb	r3, r3
 80018a6:	461a      	mov	r2, r3
 80018a8:	683b      	ldr	r3, [r7, #0]
 80018aa:	f883 2056 	strb.w	r2, [r3, #86]	; 0x56
  macconf->UnicastPausePacketDetect = ((READ_BIT(heth->Instance->MACRFCR, ETH_MACRFCR_UP) >> 1) > 0U) ? ENABLE : DISABLE;
 80018ae:	687b      	ldr	r3, [r7, #4]
 80018b0:	681b      	ldr	r3, [r3, #0]
 80018b2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80018b6:	f003 0302 	and.w	r3, r3, #2
 80018ba:	2b00      	cmp	r3, #0
 80018bc:	bf14      	ite	ne
 80018be:	2301      	movne	r3, #1
 80018c0:	2300      	moveq	r3, #0
 80018c2:	b2db      	uxtb	r3, r3
 80018c4:	461a      	mov	r2, r3
 80018c6:	683b      	ldr	r3, [r7, #0]
 80018c8:	f883 2055 	strb.w	r2, [r3, #85]	; 0x55

  macconf->TransmitQueueMode = READ_BIT(heth->Instance->MTLTQOMR, (ETH_MTLTQOMR_TTC | ETH_MTLTQOMR_TSF));
 80018cc:	687b      	ldr	r3, [r7, #4]
 80018ce:	681b      	ldr	r3, [r3, #0]
 80018d0:	f8d3 3d00 	ldr.w	r3, [r3, #3328]	; 0xd00
 80018d4:	f003 0272 	and.w	r2, r3, #114	; 0x72
 80018d8:	683b      	ldr	r3, [r7, #0]
 80018da:	659a      	str	r2, [r3, #88]	; 0x58

  macconf->ReceiveQueueMode = READ_BIT(heth->Instance->MTLRQOMR, (ETH_MTLRQOMR_RTC | ETH_MTLRQOMR_RSF));
 80018dc:	687b      	ldr	r3, [r7, #4]
 80018de:	681b      	ldr	r3, [r3, #0]
 80018e0:	f8d3 3d30 	ldr.w	r3, [r3, #3376]	; 0xd30
 80018e4:	f003 0223 	and.w	r2, r3, #35	; 0x23
 80018e8:	683b      	ldr	r3, [r7, #0]
 80018ea:	65da      	str	r2, [r3, #92]	; 0x5c
  macconf->ForwardRxUndersizedGoodPacket = ((READ_BIT(heth->Instance->MTLRQOMR, ETH_MTLRQOMR_FUP) >> 3) > 0U) ? ENABLE : DISABLE;
 80018ec:	687b      	ldr	r3, [r7, #4]
 80018ee:	681b      	ldr	r3, [r3, #0]
 80018f0:	f8d3 3d30 	ldr.w	r3, [r3, #3376]	; 0xd30
 80018f4:	f003 0308 	and.w	r3, r3, #8
 80018f8:	2b00      	cmp	r3, #0
 80018fa:	bf14      	ite	ne
 80018fc:	2301      	movne	r3, #1
 80018fe:	2300      	moveq	r3, #0
 8001900:	b2db      	uxtb	r3, r3
 8001902:	461a      	mov	r2, r3
 8001904:	683b      	ldr	r3, [r7, #0]
 8001906:	f883 2062 	strb.w	r2, [r3, #98]	; 0x62
  macconf->ForwardRxErrorPacket = ((READ_BIT(heth->Instance->MTLRQOMR, ETH_MTLRQOMR_FEP) >> 4) > 0U) ? ENABLE : DISABLE;
 800190a:	687b      	ldr	r3, [r7, #4]
 800190c:	681b      	ldr	r3, [r3, #0]
 800190e:	f8d3 3d30 	ldr.w	r3, [r3, #3376]	; 0xd30
 8001912:	f003 0310 	and.w	r3, r3, #16
 8001916:	2b00      	cmp	r3, #0
 8001918:	bf14      	ite	ne
 800191a:	2301      	movne	r3, #1
 800191c:	2300      	moveq	r3, #0
 800191e:	b2db      	uxtb	r3, r3
 8001920:	461a      	mov	r2, r3
 8001922:	683b      	ldr	r3, [r7, #0]
 8001924:	f883 2061 	strb.w	r2, [r3, #97]	; 0x61
  macconf->DropTCPIPChecksumErrorPacket = ((READ_BIT(heth->Instance->MTLRQOMR, ETH_MTLRQOMR_DISTCPEF) >> 6) == 0U) ? ENABLE : DISABLE;
 8001928:	687b      	ldr	r3, [r7, #4]
 800192a:	681b      	ldr	r3, [r3, #0]
 800192c:	f8d3 3d30 	ldr.w	r3, [r3, #3376]	; 0xd30
 8001930:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001934:	2b00      	cmp	r3, #0
 8001936:	bf0c      	ite	eq
 8001938:	2301      	moveq	r3, #1
 800193a:	2300      	movne	r3, #0
 800193c:	b2db      	uxtb	r3, r3
 800193e:	461a      	mov	r2, r3
 8001940:	683b      	ldr	r3, [r7, #0]
 8001942:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60

  return HAL_OK;
 8001946:	2300      	movs	r3, #0
}
 8001948:	4618      	mov	r0, r3
 800194a:	370c      	adds	r7, #12
 800194c:	46bd      	mov	sp, r7
 800194e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001952:	4770      	bx	lr

08001954 <HAL_ETH_SetMACConfig>:
  * @param  macconf: pointer to a ETH_MACConfigTypeDef structure that contains
  *         the configuration of the MAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_SetMACConfig(ETH_HandleTypeDef *heth,  ETH_MACConfigTypeDef *macconf)
{
 8001954:	b580      	push	{r7, lr}
 8001956:	b082      	sub	sp, #8
 8001958:	af00      	add	r7, sp, #0
 800195a:	6078      	str	r0, [r7, #4]
 800195c:	6039      	str	r1, [r7, #0]
  if(macconf == NULL)
 800195e:	683b      	ldr	r3, [r7, #0]
 8001960:	2b00      	cmp	r3, #0
 8001962:	d101      	bne.n	8001968 <HAL_ETH_SetMACConfig+0x14>
  {
    return HAL_ERROR;
 8001964:	2301      	movs	r3, #1
 8001966:	e00a      	b.n	800197e <HAL_ETH_SetMACConfig+0x2a>
  }

  if(heth->RxState == HAL_ETH_STATE_READY)
 8001968:	687b      	ldr	r3, [r7, #4]
 800196a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800196c:	2b10      	cmp	r3, #16
 800196e:	d105      	bne.n	800197c <HAL_ETH_SetMACConfig+0x28>
  {
    ETH_SetMACConfig(heth, macconf);
 8001970:	6839      	ldr	r1, [r7, #0]
 8001972:	6878      	ldr	r0, [r7, #4]
 8001974:	f000 f860 	bl	8001a38 <ETH_SetMACConfig>

    return HAL_OK;
 8001978:	2300      	movs	r3, #0
 800197a:	e000      	b.n	800197e <HAL_ETH_SetMACConfig+0x2a>
  }
  else
  {
    return HAL_ERROR;
 800197c:	2301      	movs	r3, #1
  }
}
 800197e:	4618      	mov	r0, r3
 8001980:	3708      	adds	r7, #8
 8001982:	46bd      	mov	sp, r7
 8001984:	bd80      	pop	{r7, pc}
	...

08001988 <HAL_ETH_SetMDIOClockRange>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
void HAL_ETH_SetMDIOClockRange(ETH_HandleTypeDef *heth)
{
 8001988:	b580      	push	{r7, lr}
 800198a:	b084      	sub	sp, #16
 800198c:	af00      	add	r7, sp, #0
 800198e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg, hclk;

  /* Get the ETHERNET MACMDIOAR value */
  tmpreg = (heth->Instance)->MACMDIOAR;
 8001990:	687b      	ldr	r3, [r7, #4]
 8001992:	681b      	ldr	r3, [r3, #0]
 8001994:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8001998:	60fb      	str	r3, [r7, #12]

	/* Clear CSR Clock Range bits */
  tmpreg &= ~ETH_MACMDIOAR_CR;
 800199a:	68fb      	ldr	r3, [r7, #12]
 800199c:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 80019a0:	60fb      	str	r3, [r7, #12]

	/* Get hclk frequency value */
  hclk = HAL_RCC_GetHCLKFreq();
 80019a2:	f001 fea9 	bl	80036f8 <HAL_RCC_GetHCLKFreq>
 80019a6:	60b8      	str	r0, [r7, #8]

	/* Set CR bits depending on hclk value */
  if((hclk >= 20000000U)&&(hclk < 35000000U))
 80019a8:	68bb      	ldr	r3, [r7, #8]
 80019aa:	4a1e      	ldr	r2, [pc, #120]	; (8001a24 <HAL_ETH_SetMDIOClockRange+0x9c>)
 80019ac:	4293      	cmp	r3, r2
 80019ae:	d908      	bls.n	80019c2 <HAL_ETH_SetMDIOClockRange+0x3a>
 80019b0:	68bb      	ldr	r3, [r7, #8]
 80019b2:	4a1d      	ldr	r2, [pc, #116]	; (8001a28 <HAL_ETH_SetMDIOClockRange+0xa0>)
 80019b4:	4293      	cmp	r3, r2
 80019b6:	d804      	bhi.n	80019c2 <HAL_ETH_SetMDIOClockRange+0x3a>
  {
    /* CSR Clock Range between 20-35 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV16;
 80019b8:	68fb      	ldr	r3, [r7, #12]
 80019ba:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80019be:	60fb      	str	r3, [r7, #12]
 80019c0:	e027      	b.n	8001a12 <HAL_ETH_SetMDIOClockRange+0x8a>
  }
  else if((hclk >= 35000000U)&&(hclk < 60000000U))
 80019c2:	68bb      	ldr	r3, [r7, #8]
 80019c4:	4a18      	ldr	r2, [pc, #96]	; (8001a28 <HAL_ETH_SetMDIOClockRange+0xa0>)
 80019c6:	4293      	cmp	r3, r2
 80019c8:	d908      	bls.n	80019dc <HAL_ETH_SetMDIOClockRange+0x54>
 80019ca:	68bb      	ldr	r3, [r7, #8]
 80019cc:	4a17      	ldr	r2, [pc, #92]	; (8001a2c <HAL_ETH_SetMDIOClockRange+0xa4>)
 80019ce:	4293      	cmp	r3, r2
 80019d0:	d804      	bhi.n	80019dc <HAL_ETH_SetMDIOClockRange+0x54>
  {
    /* CSR Clock Range between 35-60 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV26;
 80019d2:	68fb      	ldr	r3, [r7, #12]
 80019d4:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 80019d8:	60fb      	str	r3, [r7, #12]
 80019da:	e01a      	b.n	8001a12 <HAL_ETH_SetMDIOClockRange+0x8a>
  }
  else if((hclk >= 60000000U)&&(hclk < 100000000U))
 80019dc:	68bb      	ldr	r3, [r7, #8]
 80019de:	4a13      	ldr	r2, [pc, #76]	; (8001a2c <HAL_ETH_SetMDIOClockRange+0xa4>)
 80019e0:	4293      	cmp	r3, r2
 80019e2:	d903      	bls.n	80019ec <HAL_ETH_SetMDIOClockRange+0x64>
 80019e4:	68bb      	ldr	r3, [r7, #8]
 80019e6:	4a12      	ldr	r2, [pc, #72]	; (8001a30 <HAL_ETH_SetMDIOClockRange+0xa8>)
 80019e8:	4293      	cmp	r3, r2
 80019ea:	d911      	bls.n	8001a10 <HAL_ETH_SetMDIOClockRange+0x88>
  {
    /* CSR Clock Range between 60-100 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV42;
  }
  else if((hclk >= 100000000U)&&(hclk < 150000000U))
 80019ec:	68bb      	ldr	r3, [r7, #8]
 80019ee:	4a10      	ldr	r2, [pc, #64]	; (8001a30 <HAL_ETH_SetMDIOClockRange+0xa8>)
 80019f0:	4293      	cmp	r3, r2
 80019f2:	d908      	bls.n	8001a06 <HAL_ETH_SetMDIOClockRange+0x7e>
 80019f4:	68bb      	ldr	r3, [r7, #8]
 80019f6:	4a0f      	ldr	r2, [pc, #60]	; (8001a34 <HAL_ETH_SetMDIOClockRange+0xac>)
 80019f8:	4293      	cmp	r3, r2
 80019fa:	d804      	bhi.n	8001a06 <HAL_ETH_SetMDIOClockRange+0x7e>
  {
    /* CSR Clock Range between 100-150 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV62;
 80019fc:	68fb      	ldr	r3, [r7, #12]
 80019fe:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001a02:	60fb      	str	r3, [r7, #12]
 8001a04:	e005      	b.n	8001a12 <HAL_ETH_SetMDIOClockRange+0x8a>
  }
  else /* (hclk >= 150000000)&&(hclk <= 200000000) */
  {
    /* CSR Clock Range between 150-200 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV102;
 8001a06:	68fb      	ldr	r3, [r7, #12]
 8001a08:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001a0c:	60fb      	str	r3, [r7, #12]
 8001a0e:	e000      	b.n	8001a12 <HAL_ETH_SetMDIOClockRange+0x8a>
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV42;
 8001a10:	bf00      	nop
  }

  /* Configure the CSR Clock Range */
  (heth->Instance)->MACMDIOAR = (uint32_t)tmpreg;
 8001a12:	687b      	ldr	r3, [r7, #4]
 8001a14:	681b      	ldr	r3, [r3, #0]
 8001a16:	68fa      	ldr	r2, [r7, #12]
 8001a18:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
}
 8001a1c:	bf00      	nop
 8001a1e:	3710      	adds	r7, #16
 8001a20:	46bd      	mov	sp, r7
 8001a22:	bd80      	pop	{r7, pc}
 8001a24:	01312cff 	.word	0x01312cff
 8001a28:	02160ebf 	.word	0x02160ebf
 8001a2c:	039386ff 	.word	0x039386ff
 8001a30:	05f5e0ff 	.word	0x05f5e0ff
 8001a34:	08f0d17f 	.word	0x08f0d17f

08001a38 <ETH_SetMACConfig>:
/**
  * @}
  */

static void ETH_SetMACConfig(ETH_HandleTypeDef *heth,  ETH_MACConfigTypeDef *macconf)
{
 8001a38:	b480      	push	{r7}
 8001a3a:	b085      	sub	sp, #20
 8001a3c:	af00      	add	r7, sp, #0
 8001a3e:	6078      	str	r0, [r7, #4]
 8001a40:	6039      	str	r1, [r7, #0]
  uint32_t macregval;

  /*------------------------ MACCR Configuration --------------------*/
  macregval =(macconf->InterPacketGapVal |
 8001a42:	683b      	ldr	r3, [r7, #0]
 8001a44:	689a      	ldr	r2, [r3, #8]
              macconf->SourceAddrControl |
 8001a46:	683b      	ldr	r3, [r7, #0]
 8001a48:	681b      	ldr	r3, [r3, #0]
  macregval =(macconf->InterPacketGapVal |
 8001a4a:	431a      	orrs	r2, r3
                ((uint32_t)macconf->ChecksumOffload<< 27) |
 8001a4c:	683b      	ldr	r3, [r7, #0]
 8001a4e:	791b      	ldrb	r3, [r3, #4]
 8001a50:	06db      	lsls	r3, r3, #27
              macconf->SourceAddrControl |
 8001a52:	431a      	orrs	r2, r3
                  ((uint32_t)macconf->GiantPacketSizeLimitControl << 23) |
 8001a54:	683b      	ldr	r3, [r7, #0]
 8001a56:	7b1b      	ldrb	r3, [r3, #12]
 8001a58:	05db      	lsls	r3, r3, #23
                ((uint32_t)macconf->ChecksumOffload<< 27) |
 8001a5a:	431a      	orrs	r2, r3
                    ((uint32_t)macconf->Support2KPacket  << 22) |
 8001a5c:	683b      	ldr	r3, [r7, #0]
 8001a5e:	7b5b      	ldrb	r3, [r3, #13]
 8001a60:	059b      	lsls	r3, r3, #22
                  ((uint32_t)macconf->GiantPacketSizeLimitControl << 23) |
 8001a62:	431a      	orrs	r2, r3
                      ((uint32_t)macconf->CRCStripTypePacket << 21) |
 8001a64:	683b      	ldr	r3, [r7, #0]
 8001a66:	7b9b      	ldrb	r3, [r3, #14]
 8001a68:	055b      	lsls	r3, r3, #21
                    ((uint32_t)macconf->Support2KPacket  << 22) |
 8001a6a:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 20) |
 8001a6c:	683b      	ldr	r3, [r7, #0]
 8001a6e:	7bdb      	ldrb	r3, [r3, #15]
 8001a70:	051b      	lsls	r3, r3, #20
                      ((uint32_t)macconf->CRCStripTypePacket << 21) |
 8001a72:	4313      	orrs	r3, r2
                          ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 19) |
 8001a74:	683a      	ldr	r2, [r7, #0]
 8001a76:	7c12      	ldrb	r2, [r2, #16]
 8001a78:	2a00      	cmp	r2, #0
 8001a7a:	d102      	bne.n	8001a82 <ETH_SetMACConfig+0x4a>
 8001a7c:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8001a80:	e000      	b.n	8001a84 <ETH_SetMACConfig+0x4c>
 8001a82:	2200      	movs	r2, #0
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 20) |
 8001a84:	4313      	orrs	r3, r2
                            ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 17) |
 8001a86:	683a      	ldr	r2, [r7, #0]
 8001a88:	7c52      	ldrb	r2, [r2, #17]
 8001a8a:	2a00      	cmp	r2, #0
 8001a8c:	d102      	bne.n	8001a94 <ETH_SetMACConfig+0x5c>
 8001a8e:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8001a92:	e000      	b.n	8001a96 <ETH_SetMACConfig+0x5e>
 8001a94:	2200      	movs	r2, #0
                          ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 19) |
 8001a96:	431a      	orrs	r2, r3
                              ((uint32_t)macconf->JumboPacket << 16) |
 8001a98:	683b      	ldr	r3, [r7, #0]
 8001a9a:	7c9b      	ldrb	r3, [r3, #18]
 8001a9c:	041b      	lsls	r3, r3, #16
                            ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 17) |
 8001a9e:	431a      	orrs	r2, r3
                                macconf->Speed |
 8001aa0:	683b      	ldr	r3, [r7, #0]
 8001aa2:	695b      	ldr	r3, [r3, #20]
                              ((uint32_t)macconf->JumboPacket << 16) |
 8001aa4:	431a      	orrs	r2, r3
                                  macconf->DuplexMode |
 8001aa6:	683b      	ldr	r3, [r7, #0]
 8001aa8:	699b      	ldr	r3, [r3, #24]
                                macconf->Speed |
 8001aaa:	431a      	orrs	r2, r3
                                    ((uint32_t)macconf->LoopbackMode << 12) |
 8001aac:	683b      	ldr	r3, [r7, #0]
 8001aae:	7f1b      	ldrb	r3, [r3, #28]
 8001ab0:	031b      	lsls	r3, r3, #12
                                  macconf->DuplexMode |
 8001ab2:	431a      	orrs	r2, r3
                                      ((uint32_t)macconf->CarrierSenseBeforeTransmit << 11)|
 8001ab4:	683b      	ldr	r3, [r7, #0]
 8001ab6:	7f5b      	ldrb	r3, [r3, #29]
 8001ab8:	02db      	lsls	r3, r3, #11
                                    ((uint32_t)macconf->LoopbackMode << 12) |
 8001aba:	4313      	orrs	r3, r2
                                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 10)|
 8001abc:	683a      	ldr	r2, [r7, #0]
 8001abe:	7f92      	ldrb	r2, [r2, #30]
 8001ac0:	2a00      	cmp	r2, #0
 8001ac2:	d102      	bne.n	8001aca <ETH_SetMACConfig+0x92>
 8001ac4:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001ac8:	e000      	b.n	8001acc <ETH_SetMACConfig+0x94>
 8001aca:	2200      	movs	r2, #0
                                      ((uint32_t)macconf->CarrierSenseBeforeTransmit << 11)|
 8001acc:	431a      	orrs	r2, r3
                                          ((uint32_t)macconf->CarrierSenseDuringTransmit << 9)|
 8001ace:	683b      	ldr	r3, [r7, #0]
 8001ad0:	7fdb      	ldrb	r3, [r3, #31]
 8001ad2:	025b      	lsls	r3, r3, #9
                                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 10)|
 8001ad4:	4313      	orrs	r3, r2
                                            ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 8)|
 8001ad6:	683a      	ldr	r2, [r7, #0]
 8001ad8:	f892 2020 	ldrb.w	r2, [r2, #32]
 8001adc:	2a00      	cmp	r2, #0
 8001ade:	d102      	bne.n	8001ae6 <ETH_SetMACConfig+0xae>
 8001ae0:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001ae4:	e000      	b.n	8001ae8 <ETH_SetMACConfig+0xb0>
 8001ae6:	2200      	movs	r2, #0
                                          ((uint32_t)macconf->CarrierSenseDuringTransmit << 9)|
 8001ae8:	431a      	orrs	r2, r3
                                              macconf->BackOffLimit |
 8001aea:	683b      	ldr	r3, [r7, #0]
 8001aec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                                            ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 8)|
 8001aee:	431a      	orrs	r2, r3
                                                ((uint32_t)macconf->DeferralCheck << 4)|
 8001af0:	683b      	ldr	r3, [r7, #0]
 8001af2:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8001af6:	011b      	lsls	r3, r3, #4
                                              macconf->BackOffLimit |
 8001af8:	431a      	orrs	r2, r3
                                                  macconf->PreambleLength);
 8001afa:	683b      	ldr	r3, [r7, #0]
 8001afc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
  macregval =(macconf->InterPacketGapVal |
 8001afe:	4313      	orrs	r3, r2
 8001b00:	60fb      	str	r3, [r7, #12]

  /* Write to MACCR */
  MODIFY_REG(heth->Instance->MACCR, ETH_MACCR_MASK, macregval);
 8001b02:	687b      	ldr	r3, [r7, #4]
 8001b04:	681b      	ldr	r3, [r3, #0]
 8001b06:	681a      	ldr	r2, [r3, #0]
 8001b08:	4b56      	ldr	r3, [pc, #344]	; (8001c64 <ETH_SetMACConfig+0x22c>)
 8001b0a:	4013      	ands	r3, r2
 8001b0c:	687a      	ldr	r2, [r7, #4]
 8001b0e:	6812      	ldr	r2, [r2, #0]
 8001b10:	68f9      	ldr	r1, [r7, #12]
 8001b12:	430b      	orrs	r3, r1
 8001b14:	6013      	str	r3, [r2, #0]

  /*------------------------ MACECR Configuration --------------------*/
  macregval = ((macconf->ExtendedInterPacketGapVal << 25)|
 8001b16:	683b      	ldr	r3, [r7, #0]
 8001b18:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001b1a:	065a      	lsls	r2, r3, #25
               ((uint32_t)macconf->ExtendedInterPacketGap << 24)|
 8001b1c:	683b      	ldr	r3, [r7, #0]
 8001b1e:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8001b22:	061b      	lsls	r3, r3, #24
  macregval = ((macconf->ExtendedInterPacketGapVal << 25)|
 8001b24:	431a      	orrs	r2, r3
                 ((uint32_t)macconf->UnicastSlowProtocolPacketDetect << 18)|
 8001b26:	683b      	ldr	r3, [r7, #0]
 8001b28:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8001b2c:	049b      	lsls	r3, r3, #18
               ((uint32_t)macconf->ExtendedInterPacketGap << 24)|
 8001b2e:	431a      	orrs	r2, r3
                   ((uint32_t)macconf->SlowProtocolDetect << 17)|
 8001b30:	683b      	ldr	r3, [r7, #0]
 8001b32:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8001b36:	045b      	lsls	r3, r3, #17
                 ((uint32_t)macconf->UnicastSlowProtocolPacketDetect << 18)|
 8001b38:	4313      	orrs	r3, r2
                     ((uint32_t)((macconf->CRCCheckingRxPackets == DISABLE) ? 1U : 0U)<< 16) |
 8001b3a:	683a      	ldr	r2, [r7, #0]
 8001b3c:	f892 2032 	ldrb.w	r2, [r2, #50]	; 0x32
 8001b40:	2a00      	cmp	r2, #0
 8001b42:	d102      	bne.n	8001b4a <ETH_SetMACConfig+0x112>
 8001b44:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8001b48:	e000      	b.n	8001b4c <ETH_SetMACConfig+0x114>
 8001b4a:	2200      	movs	r2, #0
                   ((uint32_t)macconf->SlowProtocolDetect << 17)|
 8001b4c:	431a      	orrs	r2, r3
                       macconf->GiantPacketSizeLimit);
 8001b4e:	683b      	ldr	r3, [r7, #0]
 8001b50:	6b5b      	ldr	r3, [r3, #52]	; 0x34
  macregval = ((macconf->ExtendedInterPacketGapVal << 25)|
 8001b52:	4313      	orrs	r3, r2
 8001b54:	60fb      	str	r3, [r7, #12]

  /* Write to MACECR */
  MODIFY_REG(heth->Instance->MACECR, ETH_MACECR_MASK, macregval);
 8001b56:	687b      	ldr	r3, [r7, #4]
 8001b58:	681b      	ldr	r3, [r3, #0]
 8001b5a:	685a      	ldr	r2, [r3, #4]
 8001b5c:	4b42      	ldr	r3, [pc, #264]	; (8001c68 <ETH_SetMACConfig+0x230>)
 8001b5e:	4013      	ands	r3, r2
 8001b60:	687a      	ldr	r2, [r7, #4]
 8001b62:	6812      	ldr	r2, [r2, #0]
 8001b64:	68f9      	ldr	r1, [r7, #12]
 8001b66:	430b      	orrs	r3, r1
 8001b68:	6053      	str	r3, [r2, #4]

  /*------------------------ MACWTR Configuration --------------------*/
  macregval = (((uint32_t)macconf->ProgrammableWatchdog << 8) |
 8001b6a:	683b      	ldr	r3, [r7, #0]
 8001b6c:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8001b70:	021a      	lsls	r2, r3, #8
               macconf->WatchdogTimeout);
 8001b72:	683b      	ldr	r3, [r7, #0]
 8001b74:	6c5b      	ldr	r3, [r3, #68]	; 0x44
  macregval = (((uint32_t)macconf->ProgrammableWatchdog << 8) |
 8001b76:	4313      	orrs	r3, r2
 8001b78:	60fb      	str	r3, [r7, #12]

  /* Write to MACWTR */
  MODIFY_REG(heth->Instance->MACWTR, ETH_MACWTR_MASK, macregval);
 8001b7a:	687b      	ldr	r3, [r7, #4]
 8001b7c:	681b      	ldr	r3, [r3, #0]
 8001b7e:	68da      	ldr	r2, [r3, #12]
 8001b80:	4b3a      	ldr	r3, [pc, #232]	; (8001c6c <ETH_SetMACConfig+0x234>)
 8001b82:	4013      	ands	r3, r2
 8001b84:	687a      	ldr	r2, [r7, #4]
 8001b86:	6812      	ldr	r2, [r2, #0]
 8001b88:	68f9      	ldr	r1, [r7, #12]
 8001b8a:	430b      	orrs	r3, r1
 8001b8c:	60d3      	str	r3, [r2, #12]

  /*------------------------ MACTFCR Configuration --------------------*/
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 8001b8e:	683b      	ldr	r3, [r7, #0]
 8001b90:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 8001b94:	005a      	lsls	r2, r3, #1
               macconf->PauseLowThreshold |
 8001b96:	683b      	ldr	r3, [r7, #0]
 8001b98:	6d1b      	ldr	r3, [r3, #80]	; 0x50
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 8001b9a:	4313      	orrs	r3, r2
                 ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U)<< 7) |
 8001b9c:	683a      	ldr	r2, [r7, #0]
 8001b9e:	f892 204c 	ldrb.w	r2, [r2, #76]	; 0x4c
 8001ba2:	2a00      	cmp	r2, #0
 8001ba4:	d101      	bne.n	8001baa <ETH_SetMACConfig+0x172>
 8001ba6:	2280      	movs	r2, #128	; 0x80
 8001ba8:	e000      	b.n	8001bac <ETH_SetMACConfig+0x174>
 8001baa:	2200      	movs	r2, #0
               macconf->PauseLowThreshold |
 8001bac:	431a      	orrs	r2, r3
                   (macconf->PauseTime << 16));
 8001bae:	683b      	ldr	r3, [r7, #0]
 8001bb0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001bb2:	041b      	lsls	r3, r3, #16
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 8001bb4:	4313      	orrs	r3, r2
 8001bb6:	60fb      	str	r3, [r7, #12]

  /* Write to MACTFCR */
  MODIFY_REG(heth->Instance->MACTFCR, ETH_MACTFCR_MASK, macregval);
 8001bb8:	687b      	ldr	r3, [r7, #4]
 8001bba:	681b      	ldr	r3, [r3, #0]
 8001bbc:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8001bbe:	f64f 730d 	movw	r3, #65293	; 0xff0d
 8001bc2:	4013      	ands	r3, r2
 8001bc4:	687a      	ldr	r2, [r7, #4]
 8001bc6:	6812      	ldr	r2, [r2, #0]
 8001bc8:	68f9      	ldr	r1, [r7, #12]
 8001bca:	430b      	orrs	r3, r1
 8001bcc:	6713      	str	r3, [r2, #112]	; 0x70

  /*------------------------ MACRFCR Configuration --------------------*/
  macregval = ((uint32_t)macconf->ReceiveFlowControl |
 8001bce:	683b      	ldr	r3, [r7, #0]
 8001bd0:	f893 3056 	ldrb.w	r3, [r3, #86]	; 0x56
 8001bd4:	461a      	mov	r2, r3
               ((uint32_t)macconf->UnicastPausePacketDetect << 1));
 8001bd6:	683b      	ldr	r3, [r7, #0]
 8001bd8:	f893 3055 	ldrb.w	r3, [r3, #85]	; 0x55
 8001bdc:	005b      	lsls	r3, r3, #1
  macregval = ((uint32_t)macconf->ReceiveFlowControl |
 8001bde:	4313      	orrs	r3, r2
 8001be0:	60fb      	str	r3, [r7, #12]

  /* Write to MACRFCR */
  MODIFY_REG(heth->Instance->MACRFCR, ETH_MACRFCR_MASK, macregval);
 8001be2:	687b      	ldr	r3, [r7, #4]
 8001be4:	681b      	ldr	r3, [r3, #0]
 8001be6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001bea:	f023 0103 	bic.w	r1, r3, #3
 8001bee:	687b      	ldr	r3, [r7, #4]
 8001bf0:	681b      	ldr	r3, [r3, #0]
 8001bf2:	68fa      	ldr	r2, [r7, #12]
 8001bf4:	430a      	orrs	r2, r1
 8001bf6:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /*------------------------ MTLTQOMR Configuration --------------------*/
  /* Write to MTLTQOMR */
  MODIFY_REG(heth->Instance->MTLTQOMR, ETH_MTLTQOMR_MASK, macconf->TransmitQueueMode);
 8001bfa:	687b      	ldr	r3, [r7, #4]
 8001bfc:	681b      	ldr	r3, [r3, #0]
 8001bfe:	f8d3 3d00 	ldr.w	r3, [r3, #3328]	; 0xd00
 8001c02:	f023 0172 	bic.w	r1, r3, #114	; 0x72
 8001c06:	683b      	ldr	r3, [r7, #0]
 8001c08:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8001c0a:	687b      	ldr	r3, [r7, #4]
 8001c0c:	681b      	ldr	r3, [r3, #0]
 8001c0e:	430a      	orrs	r2, r1
 8001c10:	f8c3 2d00 	str.w	r2, [r3, #3328]	; 0xd00

  /*------------------------ MTLRQOMR Configuration --------------------*/
  macregval = (macconf->ReceiveQueueMode |
 8001c14:	683b      	ldr	r3, [r7, #0]
 8001c16:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
               ((uint32_t)((macconf->DropTCPIPChecksumErrorPacket == DISABLE) ? 1U : 0U) << 6) |
 8001c18:	683a      	ldr	r2, [r7, #0]
 8001c1a:	f892 2060 	ldrb.w	r2, [r2, #96]	; 0x60
 8001c1e:	2a00      	cmp	r2, #0
 8001c20:	d101      	bne.n	8001c26 <ETH_SetMACConfig+0x1ee>
 8001c22:	2240      	movs	r2, #64	; 0x40
 8001c24:	e000      	b.n	8001c28 <ETH_SetMACConfig+0x1f0>
 8001c26:	2200      	movs	r2, #0
  macregval = (macconf->ReceiveQueueMode |
 8001c28:	431a      	orrs	r2, r3
                 ((uint32_t)macconf->ForwardRxErrorPacket << 4) |
 8001c2a:	683b      	ldr	r3, [r7, #0]
 8001c2c:	f893 3061 	ldrb.w	r3, [r3, #97]	; 0x61
 8001c30:	011b      	lsls	r3, r3, #4
               ((uint32_t)((macconf->DropTCPIPChecksumErrorPacket == DISABLE) ? 1U : 0U) << 6) |
 8001c32:	431a      	orrs	r2, r3
                   ((uint32_t)macconf->ForwardRxUndersizedGoodPacket << 3));
 8001c34:	683b      	ldr	r3, [r7, #0]
 8001c36:	f893 3062 	ldrb.w	r3, [r3, #98]	; 0x62
 8001c3a:	00db      	lsls	r3, r3, #3
  macregval = (macconf->ReceiveQueueMode |
 8001c3c:	4313      	orrs	r3, r2
 8001c3e:	60fb      	str	r3, [r7, #12]

  /* Write to MTLRQOMR */
  MODIFY_REG(heth->Instance->MTLRQOMR, ETH_MTLRQOMR_MASK, macregval);
 8001c40:	687b      	ldr	r3, [r7, #4]
 8001c42:	681b      	ldr	r3, [r3, #0]
 8001c44:	f8d3 3d30 	ldr.w	r3, [r3, #3376]	; 0xd30
 8001c48:	f023 017b 	bic.w	r1, r3, #123	; 0x7b
 8001c4c:	687b      	ldr	r3, [r7, #4]
 8001c4e:	681b      	ldr	r3, [r3, #0]
 8001c50:	68fa      	ldr	r2, [r7, #12]
 8001c52:	430a      	orrs	r2, r1
 8001c54:	f8c3 2d30 	str.w	r2, [r3, #3376]	; 0xd30
}
 8001c58:	bf00      	nop
 8001c5a:	3714      	adds	r7, #20
 8001c5c:	46bd      	mov	sp, r7
 8001c5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c62:	4770      	bx	lr
 8001c64:	00048083 	.word	0x00048083
 8001c68:	c0f88000 	.word	0xc0f88000
 8001c6c:	fffffef0 	.word	0xfffffef0

08001c70 <ETH_SetDMAConfig>:

static void ETH_SetDMAConfig(ETH_HandleTypeDef *heth,  ETH_DMAConfigTypeDef *dmaconf)
{
 8001c70:	b480      	push	{r7}
 8001c72:	b085      	sub	sp, #20
 8001c74:	af00      	add	r7, sp, #0
 8001c76:	6078      	str	r0, [r7, #4]
 8001c78:	6039      	str	r1, [r7, #0]
  uint32_t dmaregval;

  /*------------------------ DMAMR Configuration --------------------*/
  MODIFY_REG(heth->Instance->DMAMR, ETH_DMAMR_MASK, dmaconf->DMAArbitration);
 8001c7a:	687b      	ldr	r3, [r7, #4]
 8001c7c:	681b      	ldr	r3, [r3, #0]
 8001c7e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001c82:	681a      	ldr	r2, [r3, #0]
 8001c84:	4b38      	ldr	r3, [pc, #224]	; (8001d68 <ETH_SetDMAConfig+0xf8>)
 8001c86:	4013      	ands	r3, r2
 8001c88:	683a      	ldr	r2, [r7, #0]
 8001c8a:	6812      	ldr	r2, [r2, #0]
 8001c8c:	6879      	ldr	r1, [r7, #4]
 8001c8e:	6809      	ldr	r1, [r1, #0]
 8001c90:	431a      	orrs	r2, r3
 8001c92:	f501 5380 	add.w	r3, r1, #4096	; 0x1000
 8001c96:	601a      	str	r2, [r3, #0]

  /*------------------------ DMASBMR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 8001c98:	683b      	ldr	r3, [r7, #0]
 8001c9a:	791b      	ldrb	r3, [r3, #4]
 8001c9c:	031a      	lsls	r2, r3, #12
               dmaconf->BurstMode |
 8001c9e:	683b      	ldr	r3, [r7, #0]
 8001ca0:	689b      	ldr	r3, [r3, #8]
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 8001ca2:	431a      	orrs	r2, r3
                 ((uint32_t)dmaconf->RebuildINCRxBurst << 15));
 8001ca4:	683b      	ldr	r3, [r7, #0]
 8001ca6:	7b1b      	ldrb	r3, [r3, #12]
 8001ca8:	03db      	lsls	r3, r3, #15
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 8001caa:	4313      	orrs	r3, r2
 8001cac:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(heth->Instance->DMASBMR, ETH_DMASBMR_MASK, dmaregval);
 8001cae:	687b      	ldr	r3, [r7, #4]
 8001cb0:	681a      	ldr	r2, [r3, #0]
 8001cb2:	f241 0304 	movw	r3, #4100	; 0x1004
 8001cb6:	4413      	add	r3, r2
 8001cb8:	681a      	ldr	r2, [r3, #0]
 8001cba:	4b2c      	ldr	r3, [pc, #176]	; (8001d6c <ETH_SetDMAConfig+0xfc>)
 8001cbc:	4013      	ands	r3, r2
 8001cbe:	687a      	ldr	r2, [r7, #4]
 8001cc0:	6811      	ldr	r1, [r2, #0]
 8001cc2:	68fa      	ldr	r2, [r7, #12]
 8001cc4:	431a      	orrs	r2, r3
 8001cc6:	f241 0304 	movw	r3, #4100	; 0x1004
 8001cca:	440b      	add	r3, r1
 8001ccc:	601a      	str	r2, [r3, #0]

  /*------------------------ DMACCR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->PBLx8Mode << 16) |
 8001cce:	683b      	ldr	r3, [r7, #0]
 8001cd0:	7b5b      	ldrb	r3, [r3, #13]
 8001cd2:	041a      	lsls	r2, r3, #16
               dmaconf->MaximumSegmentSize);
 8001cd4:	683b      	ldr	r3, [r7, #0]
 8001cd6:	6a1b      	ldr	r3, [r3, #32]
  dmaregval = (((uint32_t)dmaconf->PBLx8Mode << 16) |
 8001cd8:	4313      	orrs	r3, r2
 8001cda:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(heth->Instance->DMACCR, ETH_DMACCR_MASK, dmaregval);
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	681b      	ldr	r3, [r3, #0]
 8001ce0:	f503 5388 	add.w	r3, r3, #4352	; 0x1100
 8001ce4:	681a      	ldr	r2, [r3, #0]
 8001ce6:	4b22      	ldr	r3, [pc, #136]	; (8001d70 <ETH_SetDMAConfig+0x100>)
 8001ce8:	4013      	ands	r3, r2
 8001cea:	687a      	ldr	r2, [r7, #4]
 8001cec:	6811      	ldr	r1, [r2, #0]
 8001cee:	68fa      	ldr	r2, [r7, #12]
 8001cf0:	431a      	orrs	r2, r3
 8001cf2:	f501 5388 	add.w	r3, r1, #4352	; 0x1100
 8001cf6:	601a      	str	r2, [r3, #0]

  /*------------------------ DMACTCR Configuration --------------------*/
  dmaregval = (dmaconf->TxDMABurstLength |
 8001cf8:	683b      	ldr	r3, [r7, #0]
 8001cfa:	691a      	ldr	r2, [r3, #16]
               ((uint32_t)dmaconf->SecondPacketOperate << 4)|
 8001cfc:	683b      	ldr	r3, [r7, #0]
 8001cfe:	7d1b      	ldrb	r3, [r3, #20]
 8001d00:	011b      	lsls	r3, r3, #4
  dmaregval = (dmaconf->TxDMABurstLength |
 8001d02:	431a      	orrs	r2, r3
                 ((uint32_t)dmaconf->TCPSegmentation << 12));
 8001d04:	683b      	ldr	r3, [r7, #0]
 8001d06:	7f5b      	ldrb	r3, [r3, #29]
 8001d08:	031b      	lsls	r3, r3, #12
  dmaregval = (dmaconf->TxDMABurstLength |
 8001d0a:	4313      	orrs	r3, r2
 8001d0c:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(heth->Instance->DMACTCR, ETH_DMACTCR_MASK, dmaregval);
 8001d0e:	687b      	ldr	r3, [r7, #4]
 8001d10:	681a      	ldr	r2, [r3, #0]
 8001d12:	f241 1304 	movw	r3, #4356	; 0x1104
 8001d16:	4413      	add	r3, r2
 8001d18:	681a      	ldr	r2, [r3, #0]
 8001d1a:	4b16      	ldr	r3, [pc, #88]	; (8001d74 <ETH_SetDMAConfig+0x104>)
 8001d1c:	4013      	ands	r3, r2
 8001d1e:	687a      	ldr	r2, [r7, #4]
 8001d20:	6811      	ldr	r1, [r2, #0]
 8001d22:	68fa      	ldr	r2, [r7, #12]
 8001d24:	431a      	orrs	r2, r3
 8001d26:	f241 1304 	movw	r3, #4356	; 0x1104
 8001d2a:	440b      	add	r3, r1
 8001d2c:	601a      	str	r2, [r3, #0]

  /*------------------------ DMACRCR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->FlushRxPacket  << 31) |
 8001d2e:	683b      	ldr	r3, [r7, #0]
 8001d30:	7f1b      	ldrb	r3, [r3, #28]
 8001d32:	07da      	lsls	r2, r3, #31
               dmaconf->RxDMABurstLength);
 8001d34:	683b      	ldr	r3, [r7, #0]
 8001d36:	699b      	ldr	r3, [r3, #24]
  dmaregval = (((uint32_t)dmaconf->FlushRxPacket  << 31) |
 8001d38:	4313      	orrs	r3, r2
 8001d3a:	60fb      	str	r3, [r7, #12]

  /* Write to DMACRCR */
  MODIFY_REG(heth->Instance->DMACRCR, ETH_DMACRCR_MASK, dmaregval);
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	681a      	ldr	r2, [r3, #0]
 8001d40:	f241 1308 	movw	r3, #4360	; 0x1108
 8001d44:	4413      	add	r3, r2
 8001d46:	681a      	ldr	r2, [r3, #0]
 8001d48:	4b0b      	ldr	r3, [pc, #44]	; (8001d78 <ETH_SetDMAConfig+0x108>)
 8001d4a:	4013      	ands	r3, r2
 8001d4c:	687a      	ldr	r2, [r7, #4]
 8001d4e:	6811      	ldr	r1, [r2, #0]
 8001d50:	68fa      	ldr	r2, [r7, #12]
 8001d52:	431a      	orrs	r2, r3
 8001d54:	f241 1308 	movw	r3, #4360	; 0x1108
 8001d58:	440b      	add	r3, r1
 8001d5a:	601a      	str	r2, [r3, #0]
}
 8001d5c:	bf00      	nop
 8001d5e:	3714      	adds	r7, #20
 8001d60:	46bd      	mov	sp, r7
 8001d62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d66:	4770      	bx	lr
 8001d68:	ffff87fd 	.word	0xffff87fd
 8001d6c:	ffff2ffe 	.word	0xffff2ffe
 8001d70:	fffec000 	.word	0xfffec000
 8001d74:	ffc0efef 	.word	0xffc0efef
 8001d78:	7fc0ffff 	.word	0x7fc0ffff

08001d7c <ETH_MACDMAConfig>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth)
{
 8001d7c:	b580      	push	{r7, lr}
 8001d7e:	b0a4      	sub	sp, #144	; 0x90
 8001d80:	af00      	add	r7, sp, #0
 8001d82:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef macDefaultConf;
  ETH_DMAConfigTypeDef dmaDefaultConf;

  /*--------------- ETHERNET MAC registers default Configuration --------------*/
  macDefaultConf.AutomaticPadCRCStrip = ENABLE;
 8001d84:	2301      	movs	r3, #1
 8001d86:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
  macDefaultConf.BackOffLimit = ETH_BACKOFFLIMIT_10;
 8001d8a:	2300      	movs	r3, #0
 8001d8c:	653b      	str	r3, [r7, #80]	; 0x50
  macDefaultConf.CarrierSenseBeforeTransmit = DISABLE;
 8001d8e:	2300      	movs	r3, #0
 8001d90:	f887 3049 	strb.w	r3, [r7, #73]	; 0x49
  macDefaultConf.CarrierSenseDuringTransmit = DISABLE;
 8001d94:	2300      	movs	r3, #0
 8001d96:	f887 304b 	strb.w	r3, [r7, #75]	; 0x4b
  macDefaultConf.ChecksumOffload = ENABLE;
 8001d9a:	2301      	movs	r3, #1
 8001d9c:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
  macDefaultConf.CRCCheckingRxPackets = ENABLE;
 8001da0:	2301      	movs	r3, #1
 8001da2:	f887 305e 	strb.w	r3, [r7, #94]	; 0x5e
  macDefaultConf.CRCStripTypePacket = ENABLE;
 8001da6:	2301      	movs	r3, #1
 8001da8:	f887 303a 	strb.w	r3, [r7, #58]	; 0x3a
  macDefaultConf.DeferralCheck = DISABLE;
 8001dac:	2300      	movs	r3, #0
 8001dae:	f887 3054 	strb.w	r3, [r7, #84]	; 0x54
  macDefaultConf.DropTCPIPChecksumErrorPacket = ENABLE;
 8001db2:	2301      	movs	r3, #1
 8001db4:	f887 308c 	strb.w	r3, [r7, #140]	; 0x8c
  macDefaultConf.DuplexMode = ETH_FULLDUPLEX_MODE;
 8001db8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001dbc:	647b      	str	r3, [r7, #68]	; 0x44
  macDefaultConf.ExtendedInterPacketGap = DISABLE;
 8001dbe:	2300      	movs	r3, #0
 8001dc0:	f887 3064 	strb.w	r3, [r7, #100]	; 0x64
  macDefaultConf.ExtendedInterPacketGapVal = 0x0;
 8001dc4:	2300      	movs	r3, #0
 8001dc6:	66bb      	str	r3, [r7, #104]	; 0x68
  macDefaultConf.ForwardRxErrorPacket = DISABLE;
 8001dc8:	2300      	movs	r3, #0
 8001dca:	f887 308d 	strb.w	r3, [r7, #141]	; 0x8d
  macDefaultConf.ForwardRxUndersizedGoodPacket = DISABLE;
 8001dce:	2300      	movs	r3, #0
 8001dd0:	f887 308e 	strb.w	r3, [r7, #142]	; 0x8e
  macDefaultConf.GiantPacketSizeLimit = 0x618;
 8001dd4:	f44f 63c3 	mov.w	r3, #1560	; 0x618
 8001dd8:	663b      	str	r3, [r7, #96]	; 0x60
  macDefaultConf.GiantPacketSizeLimitControl = DISABLE;
 8001dda:	2300      	movs	r3, #0
 8001ddc:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
  macDefaultConf.InterPacketGapVal = ETH_INTERPACKETGAP_96BIT;
 8001de0:	2300      	movs	r3, #0
 8001de2:	637b      	str	r3, [r7, #52]	; 0x34
  macDefaultConf.Jabber = ENABLE;
 8001de4:	2301      	movs	r3, #1
 8001de6:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d
  macDefaultConf.JumboPacket = DISABLE;
 8001dea:	2300      	movs	r3, #0
 8001dec:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
  macDefaultConf.LoopbackMode = DISABLE;
 8001df0:	2300      	movs	r3, #0
 8001df2:	f887 3048 	strb.w	r3, [r7, #72]	; 0x48
  macDefaultConf.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS_4;
 8001df6:	2300      	movs	r3, #0
 8001df8:	67fb      	str	r3, [r7, #124]	; 0x7c
  macDefaultConf.PauseTime = 0x0;
 8001dfa:	2300      	movs	r3, #0
 8001dfc:	677b      	str	r3, [r7, #116]	; 0x74
  macDefaultConf.PreambleLength = ETH_PREAMBLELENGTH_7;
 8001dfe:	2300      	movs	r3, #0
 8001e00:	65bb      	str	r3, [r7, #88]	; 0x58
  macDefaultConf.ProgrammableWatchdog = DISABLE;
 8001e02:	2300      	movs	r3, #0
 8001e04:	f887 306c 	strb.w	r3, [r7, #108]	; 0x6c
  macDefaultConf.ReceiveFlowControl = DISABLE;
 8001e08:	2300      	movs	r3, #0
 8001e0a:	f887 3082 	strb.w	r3, [r7, #130]	; 0x82
  macDefaultConf.ReceiveOwn = ENABLE;
 8001e0e:	2301      	movs	r3, #1
 8001e10:	f887 304a 	strb.w	r3, [r7, #74]	; 0x4a
  macDefaultConf.ReceiveQueueMode = ETH_RECEIVESTOREFORWARD;
 8001e14:	2320      	movs	r3, #32
 8001e16:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  macDefaultConf.RetryTransmission = ENABLE;
 8001e1a:	2301      	movs	r3, #1
 8001e1c:	f887 304c 	strb.w	r3, [r7, #76]	; 0x4c
  macDefaultConf.SlowProtocolDetect = DISABLE;
 8001e20:	2300      	movs	r3, #0
 8001e22:	f887 305d 	strb.w	r3, [r7, #93]	; 0x5d
  macDefaultConf.SourceAddrControl = ETH_SOURCEADDRESS_REPLACE_ADDR0;
 8001e26:	f04f 5340 	mov.w	r3, #805306368	; 0x30000000
 8001e2a:	62fb      	str	r3, [r7, #44]	; 0x2c
  macDefaultConf.Speed = ETH_SPEED_100M;
 8001e2c:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8001e30:	643b      	str	r3, [r7, #64]	; 0x40
  macDefaultConf.Support2KPacket = DISABLE;
 8001e32:	2300      	movs	r3, #0
 8001e34:	f887 3039 	strb.w	r3, [r7, #57]	; 0x39
  macDefaultConf.TransmitQueueMode = ETH_TRANSMITSTOREFORWARD;
 8001e38:	2302      	movs	r3, #2
 8001e3a:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  macDefaultConf.TransmitFlowControl = DISABLE;
 8001e3e:	2300      	movs	r3, #0
 8001e40:	f887 3080 	strb.w	r3, [r7, #128]	; 0x80
  macDefaultConf.UnicastPausePacketDetect = DISABLE;
 8001e44:	2300      	movs	r3, #0
 8001e46:	f887 3081 	strb.w	r3, [r7, #129]	; 0x81
  macDefaultConf.UnicastSlowProtocolPacketDetect = DISABLE;
 8001e4a:	2300      	movs	r3, #0
 8001e4c:	f887 305c 	strb.w	r3, [r7, #92]	; 0x5c
  macDefaultConf.Watchdog = ENABLE;
 8001e50:	2301      	movs	r3, #1
 8001e52:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c
  macDefaultConf.WatchdogTimeout =  ETH_MACWTR_WTO_2KB;
 8001e56:	2300      	movs	r3, #0
 8001e58:	673b      	str	r3, [r7, #112]	; 0x70
  macDefaultConf.ZeroQuantaPause = ENABLE;
 8001e5a:	2301      	movs	r3, #1
 8001e5c:	f887 3078 	strb.w	r3, [r7, #120]	; 0x78

  /* MAC default configuration */
  ETH_SetMACConfig(heth, &macDefaultConf);
 8001e60:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001e64:	4619      	mov	r1, r3
 8001e66:	6878      	ldr	r0, [r7, #4]
 8001e68:	f7ff fde6 	bl	8001a38 <ETH_SetMACConfig>

  /*--------------- ETHERNET DMA registers default Configuration --------------*/
  dmaDefaultConf.AddressAlignedBeats = ENABLE;
 8001e6c:	2301      	movs	r3, #1
 8001e6e:	733b      	strb	r3, [r7, #12]
  dmaDefaultConf.BurstMode = ETH_BURSTLENGTH_FIXED;
 8001e70:	2301      	movs	r3, #1
 8001e72:	613b      	str	r3, [r7, #16]
  dmaDefaultConf.DMAArbitration = ETH_DMAARBITRATION_RX1_TX1;
 8001e74:	2300      	movs	r3, #0
 8001e76:	60bb      	str	r3, [r7, #8]
  dmaDefaultConf.FlushRxPacket = DISABLE;
 8001e78:	2300      	movs	r3, #0
 8001e7a:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  dmaDefaultConf.PBLx8Mode = DISABLE;
 8001e7e:	2300      	movs	r3, #0
 8001e80:	757b      	strb	r3, [r7, #21]
  dmaDefaultConf.RebuildINCRxBurst = DISABLE;
 8001e82:	2300      	movs	r3, #0
 8001e84:	753b      	strb	r3, [r7, #20]
  dmaDefaultConf.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 8001e86:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8001e8a:	623b      	str	r3, [r7, #32]
  dmaDefaultConf.SecondPacketOperate = DISABLE;
 8001e8c:	2300      	movs	r3, #0
 8001e8e:	773b      	strb	r3, [r7, #28]
  dmaDefaultConf.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 8001e90:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8001e94:	61bb      	str	r3, [r7, #24]
  dmaDefaultConf.TCPSegmentation = DISABLE;
 8001e96:	2300      	movs	r3, #0
 8001e98:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  dmaDefaultConf.MaximumSegmentSize = 536;
 8001e9c:	f44f 7306 	mov.w	r3, #536	; 0x218
 8001ea0:	62bb      	str	r3, [r7, #40]	; 0x28

  /* DMA default configuration */
  ETH_SetDMAConfig(heth, &dmaDefaultConf);
 8001ea2:	f107 0308 	add.w	r3, r7, #8
 8001ea6:	4619      	mov	r1, r3
 8001ea8:	6878      	ldr	r0, [r7, #4]
 8001eaa:	f7ff fee1 	bl	8001c70 <ETH_SetDMAConfig>
}
 8001eae:	bf00      	nop
 8001eb0:	3790      	adds	r7, #144	; 0x90
 8001eb2:	46bd      	mov	sp, r7
 8001eb4:	bd80      	pop	{r7, pc}
	...

08001eb8 <ETH_MAC_MDIO_ClkConfig>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_MAC_MDIO_ClkConfig(ETH_HandleTypeDef *heth)
{
 8001eb8:	b580      	push	{r7, lr}
 8001eba:	b084      	sub	sp, #16
 8001ebc:	af00      	add	r7, sp, #0
 8001ebe:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg, hclk;

  /* Get the ETHERNET MACMDIOAR value */
  tmpreg = (heth->Instance)->MACMDIOAR;
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	681b      	ldr	r3, [r3, #0]
 8001ec4:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8001ec8:	60fb      	str	r3, [r7, #12]

  /* Clear CSR Clock Range bits */
  tmpreg &= ~ETH_MACMDIOAR_CR;
 8001eca:	68fb      	ldr	r3, [r7, #12]
 8001ecc:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8001ed0:	60fb      	str	r3, [r7, #12]

  /* Get hclk frequency value */
  hclk = HAL_RCC_GetHCLKFreq();
 8001ed2:	f001 fc11 	bl	80036f8 <HAL_RCC_GetHCLKFreq>
 8001ed6:	60b8      	str	r0, [r7, #8]

  /* Set CR bits depending on hclk value */
  if((hclk >= 20000000U)&&(hclk < 35000000U))
 8001ed8:	68bb      	ldr	r3, [r7, #8]
 8001eda:	4a1e      	ldr	r2, [pc, #120]	; (8001f54 <ETH_MAC_MDIO_ClkConfig+0x9c>)
 8001edc:	4293      	cmp	r3, r2
 8001ede:	d908      	bls.n	8001ef2 <ETH_MAC_MDIO_ClkConfig+0x3a>
 8001ee0:	68bb      	ldr	r3, [r7, #8]
 8001ee2:	4a1d      	ldr	r2, [pc, #116]	; (8001f58 <ETH_MAC_MDIO_ClkConfig+0xa0>)
 8001ee4:	4293      	cmp	r3, r2
 8001ee6:	d804      	bhi.n	8001ef2 <ETH_MAC_MDIO_ClkConfig+0x3a>
  {
    /* CSR Clock Range between 20-35 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV16;
 8001ee8:	68fb      	ldr	r3, [r7, #12]
 8001eea:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001eee:	60fb      	str	r3, [r7, #12]
 8001ef0:	e027      	b.n	8001f42 <ETH_MAC_MDIO_ClkConfig+0x8a>
  }
  else if((hclk >= 35000000U)&&(hclk < 60000000U))
 8001ef2:	68bb      	ldr	r3, [r7, #8]
 8001ef4:	4a18      	ldr	r2, [pc, #96]	; (8001f58 <ETH_MAC_MDIO_ClkConfig+0xa0>)
 8001ef6:	4293      	cmp	r3, r2
 8001ef8:	d908      	bls.n	8001f0c <ETH_MAC_MDIO_ClkConfig+0x54>
 8001efa:	68bb      	ldr	r3, [r7, #8]
 8001efc:	4a17      	ldr	r2, [pc, #92]	; (8001f5c <ETH_MAC_MDIO_ClkConfig+0xa4>)
 8001efe:	4293      	cmp	r3, r2
 8001f00:	d804      	bhi.n	8001f0c <ETH_MAC_MDIO_ClkConfig+0x54>
  {
    /* CSR Clock Range between 35-60 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV26;
 8001f02:	68fb      	ldr	r3, [r7, #12]
 8001f04:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 8001f08:	60fb      	str	r3, [r7, #12]
 8001f0a:	e01a      	b.n	8001f42 <ETH_MAC_MDIO_ClkConfig+0x8a>
  }
  else if((hclk >= 60000000U)&&(hclk < 100000000U))
 8001f0c:	68bb      	ldr	r3, [r7, #8]
 8001f0e:	4a13      	ldr	r2, [pc, #76]	; (8001f5c <ETH_MAC_MDIO_ClkConfig+0xa4>)
 8001f10:	4293      	cmp	r3, r2
 8001f12:	d903      	bls.n	8001f1c <ETH_MAC_MDIO_ClkConfig+0x64>
 8001f14:	68bb      	ldr	r3, [r7, #8]
 8001f16:	4a12      	ldr	r2, [pc, #72]	; (8001f60 <ETH_MAC_MDIO_ClkConfig+0xa8>)
 8001f18:	4293      	cmp	r3, r2
 8001f1a:	d911      	bls.n	8001f40 <ETH_MAC_MDIO_ClkConfig+0x88>
  {
    /* CSR Clock Range between 60-100 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV42;
  }
  else if((hclk >= 100000000U)&&(hclk < 150000000U))
 8001f1c:	68bb      	ldr	r3, [r7, #8]
 8001f1e:	4a10      	ldr	r2, [pc, #64]	; (8001f60 <ETH_MAC_MDIO_ClkConfig+0xa8>)
 8001f20:	4293      	cmp	r3, r2
 8001f22:	d908      	bls.n	8001f36 <ETH_MAC_MDIO_ClkConfig+0x7e>
 8001f24:	68bb      	ldr	r3, [r7, #8]
 8001f26:	4a0f      	ldr	r2, [pc, #60]	; (8001f64 <ETH_MAC_MDIO_ClkConfig+0xac>)
 8001f28:	4293      	cmp	r3, r2
 8001f2a:	d804      	bhi.n	8001f36 <ETH_MAC_MDIO_ClkConfig+0x7e>
  {
    /* CSR Clock Range between 100-150 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV62;
 8001f2c:	68fb      	ldr	r3, [r7, #12]
 8001f2e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001f32:	60fb      	str	r3, [r7, #12]
 8001f34:	e005      	b.n	8001f42 <ETH_MAC_MDIO_ClkConfig+0x8a>
  }
  else /* (hclk >= 150000000)&&(hclk <= 200000000) */
  {
    /* CSR Clock Range between 150-200 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV102;
 8001f36:	68fb      	ldr	r3, [r7, #12]
 8001f38:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001f3c:	60fb      	str	r3, [r7, #12]
 8001f3e:	e000      	b.n	8001f42 <ETH_MAC_MDIO_ClkConfig+0x8a>
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV42;
 8001f40:	bf00      	nop
  }

  /* Configure the CSR Clock Range */
  (heth->Instance)->MACMDIOAR = (uint32_t)tmpreg;
 8001f42:	687b      	ldr	r3, [r7, #4]
 8001f44:	681b      	ldr	r3, [r3, #0]
 8001f46:	68fa      	ldr	r2, [r7, #12]
 8001f48:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
}
 8001f4c:	bf00      	nop
 8001f4e:	3710      	adds	r7, #16
 8001f50:	46bd      	mov	sp, r7
 8001f52:	bd80      	pop	{r7, pc}
 8001f54:	01312cff 	.word	0x01312cff
 8001f58:	02160ebf 	.word	0x02160ebf
 8001f5c:	039386ff 	.word	0x039386ff
 8001f60:	05f5e0ff 	.word	0x05f5e0ff
 8001f64:	08f0d17f 	.word	0x08f0d17f

08001f68 <ETH_DMATxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMATxDescListInit(ETH_HandleTypeDef *heth)
{
 8001f68:	b480      	push	{r7}
 8001f6a:	b085      	sub	sp, #20
 8001f6c:	af00      	add	r7, sp, #0
 8001f6e:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmatxdesc;
  uint32_t i;

  /* Fill each DMATxDesc descriptor with the right values */
  for(i=0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8001f70:	2300      	movs	r3, #0
 8001f72:	60fb      	str	r3, [r7, #12]
 8001f74:	e01d      	b.n	8001fb2 <ETH_DMATxDescListInit+0x4a>
  {
    dmatxdesc = heth->Init.TxDesc + i;
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	68d9      	ldr	r1, [r3, #12]
 8001f7a:	68fa      	ldr	r2, [r7, #12]
 8001f7c:	4613      	mov	r3, r2
 8001f7e:	005b      	lsls	r3, r3, #1
 8001f80:	4413      	add	r3, r2
 8001f82:	00db      	lsls	r3, r3, #3
 8001f84:	440b      	add	r3, r1
 8001f86:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmatxdesc->DESC0, 0x0);
 8001f88:	68bb      	ldr	r3, [r7, #8]
 8001f8a:	2200      	movs	r2, #0
 8001f8c:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmatxdesc->DESC1, 0x0);
 8001f8e:	68bb      	ldr	r3, [r7, #8]
 8001f90:	2200      	movs	r2, #0
 8001f92:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmatxdesc->DESC2, 0x0);
 8001f94:	68bb      	ldr	r3, [r7, #8]
 8001f96:	2200      	movs	r2, #0
 8001f98:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmatxdesc->DESC3, 0x0);
 8001f9a:	68bb      	ldr	r3, [r7, #8]
 8001f9c:	2200      	movs	r2, #0
 8001f9e:	60da      	str	r2, [r3, #12]

    WRITE_REG(heth->TxDescList.TxDesc[i], (uint32_t)dmatxdesc);
 8001fa0:	68b9      	ldr	r1, [r7, #8]
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	68fa      	ldr	r2, [r7, #12]
 8001fa6:	3206      	adds	r2, #6
 8001fa8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  for(i=0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8001fac:	68fb      	ldr	r3, [r7, #12]
 8001fae:	3301      	adds	r3, #1
 8001fb0:	60fb      	str	r3, [r7, #12]
 8001fb2:	68fb      	ldr	r3, [r7, #12]
 8001fb4:	2b03      	cmp	r3, #3
 8001fb6:	d9de      	bls.n	8001f76 <ETH_DMATxDescListInit+0xe>
  }

  heth->TxDescList.CurTxDesc = 0;
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	2200      	movs	r2, #0
 8001fbc:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set Transmit Descriptor Ring Length */
  WRITE_REG(heth->Instance->DMACTDRLR, (ETH_TX_DESC_CNT -1));
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	681a      	ldr	r2, [r3, #0]
 8001fc2:	f241 132c 	movw	r3, #4396	; 0x112c
 8001fc6:	4413      	add	r3, r2
 8001fc8:	2203      	movs	r2, #3
 8001fca:	601a      	str	r2, [r3, #0]

  /* Set Transmit Descriptor List Address */
  WRITE_REG(heth->Instance->DMACTDLAR, (uint32_t) heth->Init.TxDesc);
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	68d9      	ldr	r1, [r3, #12]
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	681a      	ldr	r2, [r3, #0]
 8001fd4:	f241 1314 	movw	r3, #4372	; 0x1114
 8001fd8:	4413      	add	r3, r2
 8001fda:	6019      	str	r1, [r3, #0]

  /* Set Transmit Descriptor Tail pointer */
  WRITE_REG(heth->Instance->DMACTDTPR, (uint32_t) heth->Init.TxDesc);
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	68da      	ldr	r2, [r3, #12]
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	681b      	ldr	r3, [r3, #0]
 8001fe4:	f503 5389 	add.w	r3, r3, #4384	; 0x1120
 8001fe8:	601a      	str	r2, [r3, #0]
}
 8001fea:	bf00      	nop
 8001fec:	3714      	adds	r7, #20
 8001fee:	46bd      	mov	sp, r7
 8001ff0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ff4:	4770      	bx	lr

08001ff6 <ETH_DMARxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMARxDescListInit(ETH_HandleTypeDef *heth)
{
 8001ff6:	b480      	push	{r7}
 8001ff8:	b085      	sub	sp, #20
 8001ffa:	af00      	add	r7, sp, #0
 8001ffc:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t i;

  for(i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8001ffe:	2300      	movs	r3, #0
 8002000:	60fb      	str	r3, [r7, #12]
 8002002:	e024      	b.n	800204e <ETH_DMARxDescListInit+0x58>
  {
    dmarxdesc =  heth->Init.RxDesc + i;
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	6919      	ldr	r1, [r3, #16]
 8002008:	68fa      	ldr	r2, [r7, #12]
 800200a:	4613      	mov	r3, r2
 800200c:	005b      	lsls	r3, r3, #1
 800200e:	4413      	add	r3, r2
 8002010:	00db      	lsls	r3, r3, #3
 8002012:	440b      	add	r3, r1
 8002014:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmarxdesc->DESC0, 0x0);
 8002016:	68bb      	ldr	r3, [r7, #8]
 8002018:	2200      	movs	r2, #0
 800201a:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmarxdesc->DESC1, 0x0);
 800201c:	68bb      	ldr	r3, [r7, #8]
 800201e:	2200      	movs	r2, #0
 8002020:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmarxdesc->DESC2, 0x0);
 8002022:	68bb      	ldr	r3, [r7, #8]
 8002024:	2200      	movs	r2, #0
 8002026:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmarxdesc->DESC3, 0x0);
 8002028:	68bb      	ldr	r3, [r7, #8]
 800202a:	2200      	movs	r2, #0
 800202c:	60da      	str	r2, [r3, #12]
    WRITE_REG(dmarxdesc->BackupAddr0, 0x0);
 800202e:	68bb      	ldr	r3, [r7, #8]
 8002030:	2200      	movs	r2, #0
 8002032:	611a      	str	r2, [r3, #16]
    WRITE_REG(dmarxdesc->BackupAddr1, 0x0);
 8002034:	68bb      	ldr	r3, [r7, #8]
 8002036:	2200      	movs	r2, #0
 8002038:	615a      	str	r2, [r3, #20]

    /* Set Rx descritors adresses */
    WRITE_REG(heth->RxDescList.RxDesc[i], (uint32_t)dmarxdesc);
 800203a:	68ba      	ldr	r2, [r7, #8]
 800203c:	6879      	ldr	r1, [r7, #4]
 800203e:	68fb      	ldr	r3, [r7, #12]
 8002040:	330a      	adds	r3, #10
 8002042:	009b      	lsls	r3, r3, #2
 8002044:	440b      	add	r3, r1
 8002046:	605a      	str	r2, [r3, #4]
  for(i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8002048:	68fb      	ldr	r3, [r7, #12]
 800204a:	3301      	adds	r3, #1
 800204c:	60fb      	str	r3, [r7, #12]
 800204e:	68fb      	ldr	r3, [r7, #12]
 8002050:	2b03      	cmp	r3, #3
 8002052:	d9d7      	bls.n	8002004 <ETH_DMARxDescListInit+0xe>
  }

  WRITE_REG(heth->RxDescList.CurRxDesc, 0);
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	2200      	movs	r2, #0
 8002058:	63da      	str	r2, [r3, #60]	; 0x3c
  WRITE_REG(heth->RxDescList.FirstAppDesc, 0);
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	2200      	movs	r2, #0
 800205e:	641a      	str	r2, [r3, #64]	; 0x40
  WRITE_REG(heth->RxDescList.AppDescNbr, 0);
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	2200      	movs	r2, #0
 8002064:	645a      	str	r2, [r3, #68]	; 0x44
  WRITE_REG(heth->RxDescList.ItMode, 0);
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	2200      	movs	r2, #0
 800206a:	64da      	str	r2, [r3, #76]	; 0x4c
  WRITE_REG(heth->RxDescList.AppContextDesc, 0);
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	2200      	movs	r2, #0
 8002070:	649a      	str	r2, [r3, #72]	; 0x48

  /* Set Receive Descriptor Ring Length */
  WRITE_REG(heth->Instance->DMACRDRLR, ((uint32_t)(ETH_RX_DESC_CNT - 1)));
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	681a      	ldr	r2, [r3, #0]
 8002076:	f241 1330 	movw	r3, #4400	; 0x1130
 800207a:	4413      	add	r3, r2
 800207c:	2203      	movs	r2, #3
 800207e:	601a      	str	r2, [r3, #0]

  /* Set Receive Descriptor List Address */
  WRITE_REG(heth->Instance->DMACRDLAR, (uint32_t) heth->Init.RxDesc);
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	6919      	ldr	r1, [r3, #16]
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	681a      	ldr	r2, [r3, #0]
 8002088:	f241 131c 	movw	r3, #4380	; 0x111c
 800208c:	4413      	add	r3, r2
 800208e:	6019      	str	r1, [r3, #0]

  /* Set Receive Descriptor Tail pointer Address */
  WRITE_REG(heth->Instance->DMACRDTPR, ((uint32_t)(heth->Init.RxDesc + (((uint32_t)(ETH_RX_DESC_CNT - 1))*sizeof(ETH_DMADescTypeDef)))));
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	691b      	ldr	r3, [r3, #16]
 8002094:	f503 61d8 	add.w	r1, r3, #1728	; 0x6c0
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	681a      	ldr	r2, [r3, #0]
 800209c:	f241 1328 	movw	r3, #4392	; 0x1128
 80020a0:	4413      	add	r3, r2
 80020a2:	6019      	str	r1, [r3, #0]
}
 80020a4:	bf00      	nop
 80020a6:	3714      	adds	r7, #20
 80020a8:	46bd      	mov	sp, r7
 80020aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020ae:	4770      	bx	lr

080020b0 <ETH_Prepare_Tx_Descriptors>:
  * @param  pTxConfig: Tx packet configuration
  * @param  ItMode: Enable or disable Tx EOT interrept
  * @retval Status
  */
static uint32_t ETH_Prepare_Tx_Descriptors(ETH_HandleTypeDef *heth, ETH_TxPacketConfig *pTxConfig, uint32_t ItMode)
{
 80020b0:	b480      	push	{r7}
 80020b2:	b08d      	sub	sp, #52	; 0x34
 80020b4:	af00      	add	r7, sp, #0
 80020b6:	60f8      	str	r0, [r7, #12]
 80020b8:	60b9      	str	r1, [r7, #8]
 80020ba:	607a      	str	r2, [r7, #4]
  ETH_TxDescListTypeDef *dmatxdesclist = &heth->TxDescList;
 80020bc:	68fb      	ldr	r3, [r7, #12]
 80020be:	3318      	adds	r3, #24
 80020c0:	61bb      	str	r3, [r7, #24]
  uint32_t descidx = dmatxdesclist->CurTxDesc;
 80020c2:	69bb      	ldr	r3, [r7, #24]
 80020c4:	691b      	ldr	r3, [r3, #16]
 80020c6:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t firstdescidx = dmatxdesclist->CurTxDesc;
 80020c8:	69bb      	ldr	r3, [r7, #24]
 80020ca:	691b      	ldr	r3, [r3, #16]
 80020cc:	617b      	str	r3, [r7, #20]
  uint32_t descnbr = 0, idx;
 80020ce:	2300      	movs	r3, #0
 80020d0:	62bb      	str	r3, [r7, #40]	; 0x28
  ETH_DMADescTypeDef *dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 80020d2:	69bb      	ldr	r3, [r7, #24]
 80020d4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80020d6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80020da:	623b      	str	r3, [r7, #32]

  ETH_BufferTypeDef  *txbuffer = pTxConfig->TxBuffer;
 80020dc:	68bb      	ldr	r3, [r7, #8]
 80020de:	689b      	ldr	r3, [r3, #8]
 80020e0:	61fb      	str	r3, [r7, #28]

  /* Current Tx Descriptor Owned by DMA: cannot be used by the application  */
  if(READ_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCWBF_OWN) == ETH_DMATXNDESCWBF_OWN)
 80020e2:	6a3b      	ldr	r3, [r7, #32]
 80020e4:	68db      	ldr	r3, [r3, #12]
 80020e6:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80020ea:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80020ee:	d101      	bne.n	80020f4 <ETH_Prepare_Tx_Descriptors+0x44>
  {
    return HAL_ETH_ERROR_BUSY;
 80020f0:	2302      	movs	r3, #2
 80020f2:	e223      	b.n	800253c <ETH_Prepare_Tx_Descriptors+0x48c>

  /***************************************************************************/
  /*****************    Context descriptor configuration (Optional) **********/
  /***************************************************************************/
  /* If VLAN tag is enabled for this packet */
  if(READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_VLANTAG) != 0U)
 80020f4:	68bb      	ldr	r3, [r7, #8]
 80020f6:	681b      	ldr	r3, [r3, #0]
 80020f8:	f003 0304 	and.w	r3, r3, #4
 80020fc:	2b00      	cmp	r3, #0
 80020fe:	d044      	beq.n	800218a <ETH_Prepare_Tx_Descriptors+0xda>
  {
    /* Set vlan tag value */
    MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXCDESC_VT, pTxConfig->VlanTag);
 8002100:	6a3b      	ldr	r3, [r7, #32]
 8002102:	68da      	ldr	r2, [r3, #12]
 8002104:	4b72      	ldr	r3, [pc, #456]	; (80022d0 <ETH_Prepare_Tx_Descriptors+0x220>)
 8002106:	4013      	ands	r3, r2
 8002108:	68ba      	ldr	r2, [r7, #8]
 800210a:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800210c:	431a      	orrs	r2, r3
 800210e:	6a3b      	ldr	r3, [r7, #32]
 8002110:	60da      	str	r2, [r3, #12]
    /* Set vlan tag valid bit */
    SET_BIT(dmatxdesc->DESC3, ETH_DMATXCDESC_VLTV);
 8002112:	6a3b      	ldr	r3, [r7, #32]
 8002114:	68db      	ldr	r3, [r3, #12]
 8002116:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800211a:	6a3b      	ldr	r3, [r7, #32]
 800211c:	60da      	str	r2, [r3, #12]
    /* Set the descriptor as the vlan input source */
    SET_BIT(heth->Instance->MACVIR, ETH_MACVIR_VLTI);
 800211e:	68fb      	ldr	r3, [r7, #12]
 8002120:	681b      	ldr	r3, [r3, #0]
 8002122:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8002124:	68fb      	ldr	r3, [r7, #12]
 8002126:	681b      	ldr	r3, [r3, #0]
 8002128:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 800212c:	661a      	str	r2, [r3, #96]	; 0x60

    /* if inner VLAN is enabled */
    if(READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_INNERVLANTAG) != 0U)
 800212e:	68bb      	ldr	r3, [r7, #8]
 8002130:	681b      	ldr	r3, [r3, #0]
 8002132:	f003 0308 	and.w	r3, r3, #8
 8002136:	2b00      	cmp	r3, #0
 8002138:	d027      	beq.n	800218a <ETH_Prepare_Tx_Descriptors+0xda>
    {
      /* Set inner vlan tag value */
      MODIFY_REG(dmatxdesc->DESC2, ETH_DMATXCDESC_IVT, (pTxConfig->InnerVlanTag << 16));
 800213a:	6a3b      	ldr	r3, [r7, #32]
 800213c:	689b      	ldr	r3, [r3, #8]
 800213e:	b29a      	uxth	r2, r3
 8002140:	68bb      	ldr	r3, [r7, #8]
 8002142:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002144:	041b      	lsls	r3, r3, #16
 8002146:	431a      	orrs	r2, r3
 8002148:	6a3b      	ldr	r3, [r7, #32]
 800214a:	609a      	str	r2, [r3, #8]
      /* Set inner vlan tag valid bit */
      SET_BIT(dmatxdesc->DESC3, ETH_DMATXCDESC_IVLTV);
 800214c:	6a3b      	ldr	r3, [r7, #32]
 800214e:	68db      	ldr	r3, [r3, #12]
 8002150:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8002154:	6a3b      	ldr	r3, [r7, #32]
 8002156:	60da      	str	r2, [r3, #12]

      /* Set Vlan Tag control */
      MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXCDESC_IVTIR, pTxConfig->InnerVlanCtrl);
 8002158:	6a3b      	ldr	r3, [r7, #32]
 800215a:	68db      	ldr	r3, [r3, #12]
 800215c:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8002160:	68bb      	ldr	r3, [r7, #8]
 8002162:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002164:	431a      	orrs	r2, r3
 8002166:	6a3b      	ldr	r3, [r7, #32]
 8002168:	60da      	str	r2, [r3, #12]

      /* Set the descriptor as the inner vlan input source */
      SET_BIT(heth->Instance->MACIVIR, ETH_MACIVIR_VLTI);
 800216a:	68fb      	ldr	r3, [r7, #12]
 800216c:	681b      	ldr	r3, [r3, #0]
 800216e:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8002170:	68fb      	ldr	r3, [r7, #12]
 8002172:	681b      	ldr	r3, [r3, #0]
 8002174:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8002178:	665a      	str	r2, [r3, #100]	; 0x64
      /* Enable double VLAN processing */
      SET_BIT(heth->Instance->MACVTR, ETH_MACVTR_EDVLP);
 800217a:	68fb      	ldr	r3, [r7, #12]
 800217c:	681b      	ldr	r3, [r3, #0]
 800217e:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8002180:	68fb      	ldr	r3, [r7, #12]
 8002182:	681b      	ldr	r3, [r3, #0]
 8002184:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 8002188:	651a      	str	r2, [r3, #80]	; 0x50
    }
  }

  /* if tcp segementation is enabled for this packet */
  if(READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_TSO) != 0U)
 800218a:	68bb      	ldr	r3, [r7, #8]
 800218c:	681b      	ldr	r3, [r3, #0]
 800218e:	f003 0310 	and.w	r3, r3, #16
 8002192:	2b00      	cmp	r3, #0
 8002194:	d00e      	beq.n	80021b4 <ETH_Prepare_Tx_Descriptors+0x104>
  {
    /* Set MSS value */
    MODIFY_REG(dmatxdesc->DESC2, ETH_DMATXCDESC_MSS, pTxConfig->MaxSegmentSize);
 8002196:	6a3b      	ldr	r3, [r7, #32]
 8002198:	689a      	ldr	r2, [r3, #8]
 800219a:	4b4e      	ldr	r3, [pc, #312]	; (80022d4 <ETH_Prepare_Tx_Descriptors+0x224>)
 800219c:	4013      	ands	r3, r2
 800219e:	68ba      	ldr	r2, [r7, #8]
 80021a0:	6992      	ldr	r2, [r2, #24]
 80021a2:	431a      	orrs	r2, r3
 80021a4:	6a3b      	ldr	r3, [r7, #32]
 80021a6:	609a      	str	r2, [r3, #8]
    /* Set MSS valid bit */
    SET_BIT(dmatxdesc->DESC3, ETH_DMATXCDESC_TCMSSV);
 80021a8:	6a3b      	ldr	r3, [r7, #32]
 80021aa:	68db      	ldr	r3, [r3, #12]
 80021ac:	f043 6280 	orr.w	r2, r3, #67108864	; 0x4000000
 80021b0:	6a3b      	ldr	r3, [r7, #32]
 80021b2:	60da      	str	r2, [r3, #12]
  }

  if((READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_VLANTAG) != 0U)|| (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_TSO) != 0U))
 80021b4:	68bb      	ldr	r3, [r7, #8]
 80021b6:	681b      	ldr	r3, [r3, #0]
 80021b8:	f003 0304 	and.w	r3, r3, #4
 80021bc:	2b00      	cmp	r3, #0
 80021be:	d105      	bne.n	80021cc <ETH_Prepare_Tx_Descriptors+0x11c>
 80021c0:	68bb      	ldr	r3, [r7, #8]
 80021c2:	681b      	ldr	r3, [r3, #0]
 80021c4:	f003 0310 	and.w	r3, r3, #16
 80021c8:	2b00      	cmp	r3, #0
 80021ca:	d030      	beq.n	800222e <ETH_Prepare_Tx_Descriptors+0x17e>
  {
    /* Set as context descriptor */
    SET_BIT(dmatxdesc->DESC3, ETH_DMATXCDESC_CTXT);
 80021cc:	6a3b      	ldr	r3, [r7, #32]
 80021ce:	68db      	ldr	r3, [r3, #12]
 80021d0:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 80021d4:	6a3b      	ldr	r3, [r7, #32]
 80021d6:	60da      	str	r2, [r3, #12]
    /* Set own bit */
    SET_BIT(dmatxdesc->DESC3, ETH_DMATXCDESC_OWN);
 80021d8:	6a3b      	ldr	r3, [r7, #32]
 80021da:	68db      	ldr	r3, [r3, #12]
 80021dc:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 80021e0:	6a3b      	ldr	r3, [r7, #32]
 80021e2:	60da      	str	r2, [r3, #12]
    /* Increment current tx descriptor index */
    INCR_TX_DESC_INDEX(descidx, 1U);
 80021e4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80021e6:	3301      	adds	r3, #1
 80021e8:	62fb      	str	r3, [r7, #44]	; 0x2c
 80021ea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80021ec:	2b03      	cmp	r3, #3
 80021ee:	d902      	bls.n	80021f6 <ETH_Prepare_Tx_Descriptors+0x146>
 80021f0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80021f2:	3b04      	subs	r3, #4
 80021f4:	62fb      	str	r3, [r7, #44]	; 0x2c
    /* Get current descriptor address */
    dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 80021f6:	69bb      	ldr	r3, [r7, #24]
 80021f8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80021fa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80021fe:	623b      	str	r3, [r7, #32]

    descnbr += 1U;
 8002200:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002202:	3301      	adds	r3, #1
 8002204:	62bb      	str	r3, [r7, #40]	; 0x28

    /* Current Tx Descriptor Owned by DMA: cannot be used by the application  */
    if(READ_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCWBF_OWN) == ETH_DMATXNDESCWBF_OWN)
 8002206:	6a3b      	ldr	r3, [r7, #32]
 8002208:	68db      	ldr	r3, [r3, #12]
 800220a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800220e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8002212:	d10c      	bne.n	800222e <ETH_Prepare_Tx_Descriptors+0x17e>
    {
      dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[firstdescidx];
 8002214:	69bb      	ldr	r3, [r7, #24]
 8002216:	697a      	ldr	r2, [r7, #20]
 8002218:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800221c:	623b      	str	r3, [r7, #32]
      /* Clear own bit */
      CLEAR_BIT(dmatxdesc->DESC3, ETH_DMATXCDESC_OWN);
 800221e:	6a3b      	ldr	r3, [r7, #32]
 8002220:	68db      	ldr	r3, [r3, #12]
 8002222:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8002226:	6a3b      	ldr	r3, [r7, #32]
 8002228:	60da      	str	r2, [r3, #12]

      return HAL_ETH_ERROR_BUSY;
 800222a:	2302      	movs	r3, #2
 800222c:	e186      	b.n	800253c <ETH_Prepare_Tx_Descriptors+0x48c>

  /***************************************************************************/
  /*****************    Normal descriptors configuration     *****************/
  /***************************************************************************/

  descnbr += 1U;
 800222e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002230:	3301      	adds	r3, #1
 8002232:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Set header or buffer 1 address */
  WRITE_REG(dmatxdesc->DESC0, (uint32_t)txbuffer->buffer);
 8002234:	69fb      	ldr	r3, [r7, #28]
 8002236:	681b      	ldr	r3, [r3, #0]
 8002238:	461a      	mov	r2, r3
 800223a:	6a3b      	ldr	r3, [r7, #32]
 800223c:	601a      	str	r2, [r3, #0]
  /* Set header or buffer 1 Length */
  MODIFY_REG(dmatxdesc->DESC2, ETH_DMATXNDESCRF_B1L, txbuffer->len);
 800223e:	6a3b      	ldr	r3, [r7, #32]
 8002240:	689a      	ldr	r2, [r3, #8]
 8002242:	4b24      	ldr	r3, [pc, #144]	; (80022d4 <ETH_Prepare_Tx_Descriptors+0x224>)
 8002244:	4013      	ands	r3, r2
 8002246:	69fa      	ldr	r2, [r7, #28]
 8002248:	6852      	ldr	r2, [r2, #4]
 800224a:	431a      	orrs	r2, r3
 800224c:	6a3b      	ldr	r3, [r7, #32]
 800224e:	609a      	str	r2, [r3, #8]

  if(txbuffer->next != NULL)
 8002250:	69fb      	ldr	r3, [r7, #28]
 8002252:	689b      	ldr	r3, [r3, #8]
 8002254:	2b00      	cmp	r3, #0
 8002256:	d012      	beq.n	800227e <ETH_Prepare_Tx_Descriptors+0x1ce>
  {
    txbuffer = txbuffer->next;
 8002258:	69fb      	ldr	r3, [r7, #28]
 800225a:	689b      	ldr	r3, [r3, #8]
 800225c:	61fb      	str	r3, [r7, #28]
    /* Set buffer 2 address */
    WRITE_REG(dmatxdesc->DESC1, (uint32_t)txbuffer->buffer);
 800225e:	69fb      	ldr	r3, [r7, #28]
 8002260:	681b      	ldr	r3, [r3, #0]
 8002262:	461a      	mov	r2, r3
 8002264:	6a3b      	ldr	r3, [r7, #32]
 8002266:	605a      	str	r2, [r3, #4]
    /* Set buffer 2 Length */
    MODIFY_REG(dmatxdesc->DESC2, ETH_DMATXNDESCRF_B2L, (txbuffer->len << 16));
 8002268:	6a3b      	ldr	r3, [r7, #32]
 800226a:	689a      	ldr	r2, [r3, #8]
 800226c:	4b1a      	ldr	r3, [pc, #104]	; (80022d8 <ETH_Prepare_Tx_Descriptors+0x228>)
 800226e:	4013      	ands	r3, r2
 8002270:	69fa      	ldr	r2, [r7, #28]
 8002272:	6852      	ldr	r2, [r2, #4]
 8002274:	0412      	lsls	r2, r2, #16
 8002276:	431a      	orrs	r2, r3
 8002278:	6a3b      	ldr	r3, [r7, #32]
 800227a:	609a      	str	r2, [r3, #8]
 800227c:	e008      	b.n	8002290 <ETH_Prepare_Tx_Descriptors+0x1e0>
  }
  else
  {
    WRITE_REG(dmatxdesc->DESC1, 0x0);
 800227e:	6a3b      	ldr	r3, [r7, #32]
 8002280:	2200      	movs	r2, #0
 8002282:	605a      	str	r2, [r3, #4]
    /* Set buffer 2 Length */
    MODIFY_REG(dmatxdesc->DESC2, ETH_DMATXNDESCRF_B2L, 0x0U);
 8002284:	6a3b      	ldr	r3, [r7, #32]
 8002286:	689a      	ldr	r2, [r3, #8]
 8002288:	4b13      	ldr	r3, [pc, #76]	; (80022d8 <ETH_Prepare_Tx_Descriptors+0x228>)
 800228a:	4013      	ands	r3, r2
 800228c:	6a3a      	ldr	r2, [r7, #32]
 800228e:	6093      	str	r3, [r2, #8]
  }

  if(READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_TSO) != 0U)
 8002290:	68bb      	ldr	r3, [r7, #8]
 8002292:	681b      	ldr	r3, [r3, #0]
 8002294:	f003 0310 	and.w	r3, r3, #16
 8002298:	2b00      	cmp	r3, #0
 800229a:	d021      	beq.n	80022e0 <ETH_Prepare_Tx_Descriptors+0x230>
  {
    /* Set TCP Header length */
    MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_THL, (pTxConfig->TCPHeaderLen << 19));
 800229c:	6a3b      	ldr	r3, [r7, #32]
 800229e:	68db      	ldr	r3, [r3, #12]
 80022a0:	f423 02f0 	bic.w	r2, r3, #7864320	; 0x780000
 80022a4:	68bb      	ldr	r3, [r7, #8]
 80022a6:	6a1b      	ldr	r3, [r3, #32]
 80022a8:	04db      	lsls	r3, r3, #19
 80022aa:	431a      	orrs	r2, r3
 80022ac:	6a3b      	ldr	r3, [r7, #32]
 80022ae:	60da      	str	r2, [r3, #12]
    /* Set TCP payload length */
    MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_TPL, pTxConfig->PayloadLen);
 80022b0:	6a3b      	ldr	r3, [r7, #32]
 80022b2:	68da      	ldr	r2, [r3, #12]
 80022b4:	4b09      	ldr	r3, [pc, #36]	; (80022dc <ETH_Prepare_Tx_Descriptors+0x22c>)
 80022b6:	4013      	ands	r3, r2
 80022b8:	68ba      	ldr	r2, [r7, #8]
 80022ba:	69d2      	ldr	r2, [r2, #28]
 80022bc:	431a      	orrs	r2, r3
 80022be:	6a3b      	ldr	r3, [r7, #32]
 80022c0:	60da      	str	r2, [r3, #12]
    /* Set TCP Segmentation Enabled bit */
    SET_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_TSE);
 80022c2:	6a3b      	ldr	r3, [r7, #32]
 80022c4:	68db      	ldr	r3, [r3, #12]
 80022c6:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 80022ca:	6a3b      	ldr	r3, [r7, #32]
 80022cc:	60da      	str	r2, [r3, #12]
 80022ce:	e02e      	b.n	800232e <ETH_Prepare_Tx_Descriptors+0x27e>
 80022d0:	ffff0000 	.word	0xffff0000
 80022d4:	ffffc000 	.word	0xffffc000
 80022d8:	c000ffff 	.word	0xc000ffff
 80022dc:	fffc0000 	.word	0xfffc0000
  }
  else
  {
    MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_FL, pTxConfig->Length);
 80022e0:	6a3b      	ldr	r3, [r7, #32]
 80022e2:	68da      	ldr	r2, [r3, #12]
 80022e4:	4b98      	ldr	r3, [pc, #608]	; (8002548 <ETH_Prepare_Tx_Descriptors+0x498>)
 80022e6:	4013      	ands	r3, r2
 80022e8:	68ba      	ldr	r2, [r7, #8]
 80022ea:	6852      	ldr	r2, [r2, #4]
 80022ec:	431a      	orrs	r2, r3
 80022ee:	6a3b      	ldr	r3, [r7, #32]
 80022f0:	60da      	str	r2, [r3, #12]

    if(READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_CSUM) != 0U)
 80022f2:	68bb      	ldr	r3, [r7, #8]
 80022f4:	681b      	ldr	r3, [r3, #0]
 80022f6:	f003 0301 	and.w	r3, r3, #1
 80022fa:	2b00      	cmp	r3, #0
 80022fc:	d008      	beq.n	8002310 <ETH_Prepare_Tx_Descriptors+0x260>
    {
      MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_CIC, pTxConfig->ChecksumCtrl);
 80022fe:	6a3b      	ldr	r3, [r7, #32]
 8002300:	68db      	ldr	r3, [r3, #12]
 8002302:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002306:	68bb      	ldr	r3, [r7, #8]
 8002308:	695b      	ldr	r3, [r3, #20]
 800230a:	431a      	orrs	r2, r3
 800230c:	6a3b      	ldr	r3, [r7, #32]
 800230e:	60da      	str	r2, [r3, #12]
    }

    if(READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_CRCPAD) != 0U)
 8002310:	68bb      	ldr	r3, [r7, #8]
 8002312:	681b      	ldr	r3, [r3, #0]
 8002314:	f003 0320 	and.w	r3, r3, #32
 8002318:	2b00      	cmp	r3, #0
 800231a:	d008      	beq.n	800232e <ETH_Prepare_Tx_Descriptors+0x27e>
    {
      MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_CPC, pTxConfig->CRCPadCtrl);
 800231c:	6a3b      	ldr	r3, [r7, #32]
 800231e:	68db      	ldr	r3, [r3, #12]
 8002320:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002324:	68bb      	ldr	r3, [r7, #8]
 8002326:	691b      	ldr	r3, [r3, #16]
 8002328:	431a      	orrs	r2, r3
 800232a:	6a3b      	ldr	r3, [r7, #32]
 800232c:	60da      	str	r2, [r3, #12]
    }
  }

  if(READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_VLANTAG) != 0U)
 800232e:	68bb      	ldr	r3, [r7, #8]
 8002330:	681b      	ldr	r3, [r3, #0]
 8002332:	f003 0304 	and.w	r3, r3, #4
 8002336:	2b00      	cmp	r3, #0
 8002338:	d008      	beq.n	800234c <ETH_Prepare_Tx_Descriptors+0x29c>
  {
    /* Set Vlan Tag control */
    MODIFY_REG(dmatxdesc->DESC2, ETH_DMATXNDESCRF_VTIR, pTxConfig->VlanCtrl);
 800233a:	6a3b      	ldr	r3, [r7, #32]
 800233c:	689b      	ldr	r3, [r3, #8]
 800233e:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8002342:	68bb      	ldr	r3, [r7, #8]
 8002344:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002346:	431a      	orrs	r2, r3
 8002348:	6a3b      	ldr	r3, [r7, #32]
 800234a:	609a      	str	r2, [r3, #8]
  }

  /* Mark it as First Descriptor */
  SET_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_FD);
 800234c:	6a3b      	ldr	r3, [r7, #32]
 800234e:	68db      	ldr	r3, [r3, #12]
 8002350:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8002354:	6a3b      	ldr	r3, [r7, #32]
 8002356:	60da      	str	r2, [r3, #12]
  /* Mark it as NORMAL descriptor */
  CLEAR_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_CTXT);
 8002358:	6a3b      	ldr	r3, [r7, #32]
 800235a:	68db      	ldr	r3, [r3, #12]
 800235c:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 8002360:	6a3b      	ldr	r3, [r7, #32]
 8002362:	60da      	str	r2, [r3, #12]
  /* set OWN bit of FIRST descriptor */
  SET_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_OWN);
 8002364:	6a3b      	ldr	r3, [r7, #32]
 8002366:	68db      	ldr	r3, [r3, #12]
 8002368:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 800236c:	6a3b      	ldr	r3, [r7, #32]
 800236e:	60da      	str	r2, [r3, #12]

  /* If source address insertion/replacement is enabled for this packet */
  if(READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_SAIC) != 0U)
 8002370:	68bb      	ldr	r3, [r7, #8]
 8002372:	681b      	ldr	r3, [r3, #0]
 8002374:	f003 0302 	and.w	r3, r3, #2
 8002378:	2b00      	cmp	r3, #0
 800237a:	f000 80c0 	beq.w	80024fe <ETH_Prepare_Tx_Descriptors+0x44e>
  {
    MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_SAIC, pTxConfig->SrcAddrCtrl);
 800237e:	6a3b      	ldr	r3, [r7, #32]
 8002380:	68db      	ldr	r3, [r3, #12]
 8002382:	f023 7260 	bic.w	r2, r3, #58720256	; 0x3800000
 8002386:	68bb      	ldr	r3, [r7, #8]
 8002388:	68db      	ldr	r3, [r3, #12]
 800238a:	431a      	orrs	r2, r3
 800238c:	6a3b      	ldr	r3, [r7, #32]
 800238e:	60da      	str	r2, [r3, #12]
  }

  /* only if the packet is splitted into more than one descriptors > 1 */
  while (txbuffer->next != NULL)
 8002390:	e0b5      	b.n	80024fe <ETH_Prepare_Tx_Descriptors+0x44e>
  {
    /* Clear the LD bit of previous descriptor */
    CLEAR_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_LD);
 8002392:	6a3b      	ldr	r3, [r7, #32]
 8002394:	68db      	ldr	r3, [r3, #12]
 8002396:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 800239a:	6a3b      	ldr	r3, [r7, #32]
 800239c:	60da      	str	r2, [r3, #12]
    /* Increment current tx descriptor index */
    INCR_TX_DESC_INDEX(descidx, 1U);
 800239e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80023a0:	3301      	adds	r3, #1
 80023a2:	62fb      	str	r3, [r7, #44]	; 0x2c
 80023a4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80023a6:	2b03      	cmp	r3, #3
 80023a8:	d902      	bls.n	80023b0 <ETH_Prepare_Tx_Descriptors+0x300>
 80023aa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80023ac:	3b04      	subs	r3, #4
 80023ae:	62fb      	str	r3, [r7, #44]	; 0x2c
    /* Get current descriptor address */
    dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 80023b0:	69bb      	ldr	r3, [r7, #24]
 80023b2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80023b4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80023b8:	623b      	str	r3, [r7, #32]

    /* Clear the FD bit of new Descriptor */
    CLEAR_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_FD);
 80023ba:	6a3b      	ldr	r3, [r7, #32]
 80023bc:	68db      	ldr	r3, [r3, #12]
 80023be:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 80023c2:	6a3b      	ldr	r3, [r7, #32]
 80023c4:	60da      	str	r2, [r3, #12]

    /* Current Tx Descriptor Owned by DMA: cannot be used by the application  */
    if(READ_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_OWN) == ETH_DMATXNDESCRF_OWN)
 80023c6:	6a3b      	ldr	r3, [r7, #32]
 80023c8:	68db      	ldr	r3, [r3, #12]
 80023ca:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80023ce:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80023d2:	d126      	bne.n	8002422 <ETH_Prepare_Tx_Descriptors+0x372>
    {
      descidx = firstdescidx;
 80023d4:	697b      	ldr	r3, [r7, #20]
 80023d6:	62fb      	str	r3, [r7, #44]	; 0x2c
      dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 80023d8:	69bb      	ldr	r3, [r7, #24]
 80023da:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80023dc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80023e0:	623b      	str	r3, [r7, #32]

      /* clear previous desc own bit */
      for(idx = 0; idx < descnbr; idx ++)
 80023e2:	2300      	movs	r3, #0
 80023e4:	627b      	str	r3, [r7, #36]	; 0x24
 80023e6:	e016      	b.n	8002416 <ETH_Prepare_Tx_Descriptors+0x366>
      {
        CLEAR_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_OWN);
 80023e8:	6a3b      	ldr	r3, [r7, #32]
 80023ea:	68db      	ldr	r3, [r3, #12]
 80023ec:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80023f0:	6a3b      	ldr	r3, [r7, #32]
 80023f2:	60da      	str	r2, [r3, #12]

        /* Increment current tx descriptor index */
        INCR_TX_DESC_INDEX(descidx, 1U);
 80023f4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80023f6:	3301      	adds	r3, #1
 80023f8:	62fb      	str	r3, [r7, #44]	; 0x2c
 80023fa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80023fc:	2b03      	cmp	r3, #3
 80023fe:	d902      	bls.n	8002406 <ETH_Prepare_Tx_Descriptors+0x356>
 8002400:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002402:	3b04      	subs	r3, #4
 8002404:	62fb      	str	r3, [r7, #44]	; 0x2c
        /* Get current descriptor address */
        dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 8002406:	69bb      	ldr	r3, [r7, #24]
 8002408:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800240a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800240e:	623b      	str	r3, [r7, #32]
      for(idx = 0; idx < descnbr; idx ++)
 8002410:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002412:	3301      	adds	r3, #1
 8002414:	627b      	str	r3, [r7, #36]	; 0x24
 8002416:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002418:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800241a:	429a      	cmp	r2, r3
 800241c:	d3e4      	bcc.n	80023e8 <ETH_Prepare_Tx_Descriptors+0x338>
      }

      return HAL_ETH_ERROR_BUSY;
 800241e:	2302      	movs	r3, #2
 8002420:	e08c      	b.n	800253c <ETH_Prepare_Tx_Descriptors+0x48c>
    }

    descnbr += 1U;
 8002422:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002424:	3301      	adds	r3, #1
 8002426:	62bb      	str	r3, [r7, #40]	; 0x28

    /* Get the next Tx buffer in the list */
    txbuffer = (struct __ETH_BufferTypeDef *)txbuffer->next;
 8002428:	69fb      	ldr	r3, [r7, #28]
 800242a:	689b      	ldr	r3, [r3, #8]
 800242c:	61fb      	str	r3, [r7, #28]

    /* Set header or buffer 1 address */
    WRITE_REG(dmatxdesc->DESC0, (uint32_t)txbuffer->buffer);
 800242e:	69fb      	ldr	r3, [r7, #28]
 8002430:	681b      	ldr	r3, [r3, #0]
 8002432:	461a      	mov	r2, r3
 8002434:	6a3b      	ldr	r3, [r7, #32]
 8002436:	601a      	str	r2, [r3, #0]
    /* Set header or buffer 1 Length */
    MODIFY_REG(dmatxdesc->DESC2, ETH_DMATXNDESCRF_B1L, txbuffer->len);
 8002438:	6a3b      	ldr	r3, [r7, #32]
 800243a:	689a      	ldr	r2, [r3, #8]
 800243c:	4b43      	ldr	r3, [pc, #268]	; (800254c <ETH_Prepare_Tx_Descriptors+0x49c>)
 800243e:	4013      	ands	r3, r2
 8002440:	69fa      	ldr	r2, [r7, #28]
 8002442:	6852      	ldr	r2, [r2, #4]
 8002444:	431a      	orrs	r2, r3
 8002446:	6a3b      	ldr	r3, [r7, #32]
 8002448:	609a      	str	r2, [r3, #8]

    if (txbuffer->next != NULL)
 800244a:	69fb      	ldr	r3, [r7, #28]
 800244c:	689b      	ldr	r3, [r3, #8]
 800244e:	2b00      	cmp	r3, #0
 8002450:	d012      	beq.n	8002478 <ETH_Prepare_Tx_Descriptors+0x3c8>
    {
      /* Get the next Tx buffer in the list */
      txbuffer = (struct __ETH_BufferTypeDef *)txbuffer->next;
 8002452:	69fb      	ldr	r3, [r7, #28]
 8002454:	689b      	ldr	r3, [r3, #8]
 8002456:	61fb      	str	r3, [r7, #28]
      /* Set buffer 2 address */
      WRITE_REG(dmatxdesc->DESC1, (uint32_t)txbuffer->buffer);
 8002458:	69fb      	ldr	r3, [r7, #28]
 800245a:	681b      	ldr	r3, [r3, #0]
 800245c:	461a      	mov	r2, r3
 800245e:	6a3b      	ldr	r3, [r7, #32]
 8002460:	605a      	str	r2, [r3, #4]
      /* Set buffer 2 Length */
      MODIFY_REG(dmatxdesc->DESC2, ETH_DMATXNDESCRF_B2L, (txbuffer->len << 16));
 8002462:	6a3b      	ldr	r3, [r7, #32]
 8002464:	689a      	ldr	r2, [r3, #8]
 8002466:	4b3a      	ldr	r3, [pc, #232]	; (8002550 <ETH_Prepare_Tx_Descriptors+0x4a0>)
 8002468:	4013      	ands	r3, r2
 800246a:	69fa      	ldr	r2, [r7, #28]
 800246c:	6852      	ldr	r2, [r2, #4]
 800246e:	0412      	lsls	r2, r2, #16
 8002470:	431a      	orrs	r2, r3
 8002472:	6a3b      	ldr	r3, [r7, #32]
 8002474:	609a      	str	r2, [r3, #8]
 8002476:	e008      	b.n	800248a <ETH_Prepare_Tx_Descriptors+0x3da>
    }
    else
    {
      WRITE_REG(dmatxdesc->DESC1, 0x0);
 8002478:	6a3b      	ldr	r3, [r7, #32]
 800247a:	2200      	movs	r2, #0
 800247c:	605a      	str	r2, [r3, #4]
      /* Set buffer 2 Length */
      MODIFY_REG(dmatxdesc->DESC2, ETH_DMATXNDESCRF_B2L, 0x0U);
 800247e:	6a3b      	ldr	r3, [r7, #32]
 8002480:	689a      	ldr	r2, [r3, #8]
 8002482:	4b33      	ldr	r3, [pc, #204]	; (8002550 <ETH_Prepare_Tx_Descriptors+0x4a0>)
 8002484:	4013      	ands	r3, r2
 8002486:	6a3a      	ldr	r2, [r7, #32]
 8002488:	6093      	str	r3, [r2, #8]
    }

    if(READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_TSO) != 0U)
 800248a:	68bb      	ldr	r3, [r7, #8]
 800248c:	681b      	ldr	r3, [r3, #0]
 800248e:	f003 0310 	and.w	r3, r3, #16
 8002492:	2b00      	cmp	r3, #0
 8002494:	d00f      	beq.n	80024b6 <ETH_Prepare_Tx_Descriptors+0x406>
    {
      /* Set TCP payload length */
      MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_TPL, pTxConfig->PayloadLen);
 8002496:	6a3b      	ldr	r3, [r7, #32]
 8002498:	68da      	ldr	r2, [r3, #12]
 800249a:	4b2e      	ldr	r3, [pc, #184]	; (8002554 <ETH_Prepare_Tx_Descriptors+0x4a4>)
 800249c:	4013      	ands	r3, r2
 800249e:	68ba      	ldr	r2, [r7, #8]
 80024a0:	69d2      	ldr	r2, [r2, #28]
 80024a2:	431a      	orrs	r2, r3
 80024a4:	6a3b      	ldr	r3, [r7, #32]
 80024a6:	60da      	str	r2, [r3, #12]
      /* Set TCP Segmentation Enabled bit */
      SET_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_TSE);
 80024a8:	6a3b      	ldr	r3, [r7, #32]
 80024aa:	68db      	ldr	r3, [r3, #12]
 80024ac:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 80024b0:	6a3b      	ldr	r3, [r7, #32]
 80024b2:	60da      	str	r2, [r3, #12]
 80024b4:	e017      	b.n	80024e6 <ETH_Prepare_Tx_Descriptors+0x436>
    }
    else
    {
      /* Set the packet length */
      MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_FL, pTxConfig->Length);
 80024b6:	6a3b      	ldr	r3, [r7, #32]
 80024b8:	68da      	ldr	r2, [r3, #12]
 80024ba:	4b23      	ldr	r3, [pc, #140]	; (8002548 <ETH_Prepare_Tx_Descriptors+0x498>)
 80024bc:	4013      	ands	r3, r2
 80024be:	68ba      	ldr	r2, [r7, #8]
 80024c0:	6852      	ldr	r2, [r2, #4]
 80024c2:	431a      	orrs	r2, r3
 80024c4:	6a3b      	ldr	r3, [r7, #32]
 80024c6:	60da      	str	r2, [r3, #12]

      if(READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_CSUM) != 0U)
 80024c8:	68bb      	ldr	r3, [r7, #8]
 80024ca:	681b      	ldr	r3, [r3, #0]
 80024cc:	f003 0301 	and.w	r3, r3, #1
 80024d0:	2b00      	cmp	r3, #0
 80024d2:	d008      	beq.n	80024e6 <ETH_Prepare_Tx_Descriptors+0x436>
      {
        /* Checksum Insertion Control */
        MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_CIC, pTxConfig->ChecksumCtrl);
 80024d4:	6a3b      	ldr	r3, [r7, #32]
 80024d6:	68db      	ldr	r3, [r3, #12]
 80024d8:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80024dc:	68bb      	ldr	r3, [r7, #8]
 80024de:	695b      	ldr	r3, [r3, #20]
 80024e0:	431a      	orrs	r2, r3
 80024e2:	6a3b      	ldr	r3, [r7, #32]
 80024e4:	60da      	str	r2, [r3, #12]
      }
    }

    /* Set Own bit */
    SET_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_OWN);
 80024e6:	6a3b      	ldr	r3, [r7, #32]
 80024e8:	68db      	ldr	r3, [r3, #12]
 80024ea:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 80024ee:	6a3b      	ldr	r3, [r7, #32]
 80024f0:	60da      	str	r2, [r3, #12]
    /* Mark it as NORMAL descriptor */
    CLEAR_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_CTXT);
 80024f2:	6a3b      	ldr	r3, [r7, #32]
 80024f4:	68db      	ldr	r3, [r3, #12]
 80024f6:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 80024fa:	6a3b      	ldr	r3, [r7, #32]
 80024fc:	60da      	str	r2, [r3, #12]
  while (txbuffer->next != NULL)
 80024fe:	69fb      	ldr	r3, [r7, #28]
 8002500:	689b      	ldr	r3, [r3, #8]
 8002502:	2b00      	cmp	r3, #0
 8002504:	f47f af45 	bne.w	8002392 <ETH_Prepare_Tx_Descriptors+0x2e2>
  }

  if(ItMode != ((uint32_t)RESET))
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	2b00      	cmp	r3, #0
 800250c:	d006      	beq.n	800251c <ETH_Prepare_Tx_Descriptors+0x46c>
  {
    /* Set Interrupt on completition bit */
    SET_BIT(dmatxdesc->DESC2, ETH_DMATXNDESCRF_IOC);
 800250e:	6a3b      	ldr	r3, [r7, #32]
 8002510:	689b      	ldr	r3, [r3, #8]
 8002512:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8002516:	6a3b      	ldr	r3, [r7, #32]
 8002518:	609a      	str	r2, [r3, #8]
 800251a:	e005      	b.n	8002528 <ETH_Prepare_Tx_Descriptors+0x478>
  }
  else
  {
    /* Clear Interrupt on completition bit */
    CLEAR_BIT(dmatxdesc->DESC2, ETH_DMATXNDESCRF_IOC);
 800251c:	6a3b      	ldr	r3, [r7, #32]
 800251e:	689b      	ldr	r3, [r3, #8]
 8002520:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8002524:	6a3b      	ldr	r3, [r7, #32]
 8002526:	609a      	str	r2, [r3, #8]
  }

  /* Mark it as LAST descriptor */
  SET_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_LD);
 8002528:	6a3b      	ldr	r3, [r7, #32]
 800252a:	68db      	ldr	r3, [r3, #12]
 800252c:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8002530:	6a3b      	ldr	r3, [r7, #32]
 8002532:	60da      	str	r2, [r3, #12]

  dmatxdesclist->CurTxDesc = descidx;
 8002534:	69bb      	ldr	r3, [r7, #24]
 8002536:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002538:	611a      	str	r2, [r3, #16]

  /* Return function status */
  return HAL_ETH_ERROR_NONE;
 800253a:	2300      	movs	r3, #0
}
 800253c:	4618      	mov	r0, r3
 800253e:	3734      	adds	r7, #52	; 0x34
 8002540:	46bd      	mov	sp, r7
 8002542:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002546:	4770      	bx	lr
 8002548:	ffff8000 	.word	0xffff8000
 800254c:	ffffc000 	.word	0xffffc000
 8002550:	c000ffff 	.word	0xc000ffff
 8002554:	fffc0000 	.word	0xfffc0000

08002558 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002558:	b480      	push	{r7}
 800255a:	b089      	sub	sp, #36	; 0x24
 800255c:	af00      	add	r7, sp, #0
 800255e:	6078      	str	r0, [r7, #4]
 8002560:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8002562:	2300      	movs	r3, #0
 8002564:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8002566:	4b89      	ldr	r3, [pc, #548]	; (800278c <HAL_GPIO_Init+0x234>)
 8002568:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 800256a:	e194      	b.n	8002896 <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 800256c:	683b      	ldr	r3, [r7, #0]
 800256e:	681a      	ldr	r2, [r3, #0]
 8002570:	2101      	movs	r1, #1
 8002572:	69fb      	ldr	r3, [r7, #28]
 8002574:	fa01 f303 	lsl.w	r3, r1, r3
 8002578:	4013      	ands	r3, r2
 800257a:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 800257c:	693b      	ldr	r3, [r7, #16]
 800257e:	2b00      	cmp	r3, #0
 8002580:	f000 8186 	beq.w	8002890 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002584:	683b      	ldr	r3, [r7, #0]
 8002586:	685b      	ldr	r3, [r3, #4]
 8002588:	2b02      	cmp	r3, #2
 800258a:	d003      	beq.n	8002594 <HAL_GPIO_Init+0x3c>
 800258c:	683b      	ldr	r3, [r7, #0]
 800258e:	685b      	ldr	r3, [r3, #4]
 8002590:	2b12      	cmp	r3, #18
 8002592:	d123      	bne.n	80025dc <HAL_GPIO_Init+0x84>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002594:	69fb      	ldr	r3, [r7, #28]
 8002596:	08da      	lsrs	r2, r3, #3
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	3208      	adds	r2, #8
 800259c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80025a0:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 80025a2:	69fb      	ldr	r3, [r7, #28]
 80025a4:	f003 0307 	and.w	r3, r3, #7
 80025a8:	009b      	lsls	r3, r3, #2
 80025aa:	220f      	movs	r2, #15
 80025ac:	fa02 f303 	lsl.w	r3, r2, r3
 80025b0:	43db      	mvns	r3, r3
 80025b2:	69ba      	ldr	r2, [r7, #24]
 80025b4:	4013      	ands	r3, r2
 80025b6:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 80025b8:	683b      	ldr	r3, [r7, #0]
 80025ba:	691a      	ldr	r2, [r3, #16]
 80025bc:	69fb      	ldr	r3, [r7, #28]
 80025be:	f003 0307 	and.w	r3, r3, #7
 80025c2:	009b      	lsls	r3, r3, #2
 80025c4:	fa02 f303 	lsl.w	r3, r2, r3
 80025c8:	69ba      	ldr	r2, [r7, #24]
 80025ca:	4313      	orrs	r3, r2
 80025cc:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80025ce:	69fb      	ldr	r3, [r7, #28]
 80025d0:	08da      	lsrs	r2, r3, #3
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	3208      	adds	r2, #8
 80025d6:	69b9      	ldr	r1, [r7, #24]
 80025d8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	681b      	ldr	r3, [r3, #0]
 80025e0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 80025e2:	69fb      	ldr	r3, [r7, #28]
 80025e4:	005b      	lsls	r3, r3, #1
 80025e6:	2203      	movs	r2, #3
 80025e8:	fa02 f303 	lsl.w	r3, r2, r3
 80025ec:	43db      	mvns	r3, r3
 80025ee:	69ba      	ldr	r2, [r7, #24]
 80025f0:	4013      	ands	r3, r2
 80025f2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80025f4:	683b      	ldr	r3, [r7, #0]
 80025f6:	685b      	ldr	r3, [r3, #4]
 80025f8:	f003 0203 	and.w	r2, r3, #3
 80025fc:	69fb      	ldr	r3, [r7, #28]
 80025fe:	005b      	lsls	r3, r3, #1
 8002600:	fa02 f303 	lsl.w	r3, r2, r3
 8002604:	69ba      	ldr	r2, [r7, #24]
 8002606:	4313      	orrs	r3, r2
 8002608:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	69ba      	ldr	r2, [r7, #24]
 800260e:	601a      	str	r2, [r3, #0]

      /* In case of Output or Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002610:	683b      	ldr	r3, [r7, #0]
 8002612:	685b      	ldr	r3, [r3, #4]
 8002614:	2b01      	cmp	r3, #1
 8002616:	d00b      	beq.n	8002630 <HAL_GPIO_Init+0xd8>
 8002618:	683b      	ldr	r3, [r7, #0]
 800261a:	685b      	ldr	r3, [r3, #4]
 800261c:	2b02      	cmp	r3, #2
 800261e:	d007      	beq.n	8002630 <HAL_GPIO_Init+0xd8>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002620:	683b      	ldr	r3, [r7, #0]
 8002622:	685b      	ldr	r3, [r3, #4]
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002624:	2b11      	cmp	r3, #17
 8002626:	d003      	beq.n	8002630 <HAL_GPIO_Init+0xd8>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002628:	683b      	ldr	r3, [r7, #0]
 800262a:	685b      	ldr	r3, [r3, #4]
 800262c:	2b12      	cmp	r3, #18
 800262e:	d130      	bne.n	8002692 <HAL_GPIO_Init+0x13a>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	689b      	ldr	r3, [r3, #8]
 8002634:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8002636:	69fb      	ldr	r3, [r7, #28]
 8002638:	005b      	lsls	r3, r3, #1
 800263a:	2203      	movs	r2, #3
 800263c:	fa02 f303 	lsl.w	r3, r2, r3
 8002640:	43db      	mvns	r3, r3
 8002642:	69ba      	ldr	r2, [r7, #24]
 8002644:	4013      	ands	r3, r2
 8002646:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002648:	683b      	ldr	r3, [r7, #0]
 800264a:	68da      	ldr	r2, [r3, #12]
 800264c:	69fb      	ldr	r3, [r7, #28]
 800264e:	005b      	lsls	r3, r3, #1
 8002650:	fa02 f303 	lsl.w	r3, r2, r3
 8002654:	69ba      	ldr	r2, [r7, #24]
 8002656:	4313      	orrs	r3, r2
 8002658:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	69ba      	ldr	r2, [r7, #24]
 800265e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	685b      	ldr	r3, [r3, #4]
 8002664:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8002666:	2201      	movs	r2, #1
 8002668:	69fb      	ldr	r3, [r7, #28]
 800266a:	fa02 f303 	lsl.w	r3, r2, r3
 800266e:	43db      	mvns	r3, r3
 8002670:	69ba      	ldr	r2, [r7, #24]
 8002672:	4013      	ands	r3, r2
 8002674:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8002676:	683b      	ldr	r3, [r7, #0]
 8002678:	685b      	ldr	r3, [r3, #4]
 800267a:	091b      	lsrs	r3, r3, #4
 800267c:	f003 0201 	and.w	r2, r3, #1
 8002680:	69fb      	ldr	r3, [r7, #28]
 8002682:	fa02 f303 	lsl.w	r3, r2, r3
 8002686:	69ba      	ldr	r2, [r7, #24]
 8002688:	4313      	orrs	r3, r2
 800268a:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	69ba      	ldr	r2, [r7, #24]
 8002690:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	68db      	ldr	r3, [r3, #12]
 8002696:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8002698:	69fb      	ldr	r3, [r7, #28]
 800269a:	005b      	lsls	r3, r3, #1
 800269c:	2203      	movs	r2, #3
 800269e:	fa02 f303 	lsl.w	r3, r2, r3
 80026a2:	43db      	mvns	r3, r3
 80026a4:	69ba      	ldr	r2, [r7, #24]
 80026a6:	4013      	ands	r3, r2
 80026a8:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 80026aa:	683b      	ldr	r3, [r7, #0]
 80026ac:	689a      	ldr	r2, [r3, #8]
 80026ae:	69fb      	ldr	r3, [r7, #28]
 80026b0:	005b      	lsls	r3, r3, #1
 80026b2:	fa02 f303 	lsl.w	r3, r2, r3
 80026b6:	69ba      	ldr	r2, [r7, #24]
 80026b8:	4313      	orrs	r3, r2
 80026ba:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	69ba      	ldr	r2, [r7, #24]
 80026c0:	60da      	str	r2, [r3, #12]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80026c2:	683b      	ldr	r3, [r7, #0]
 80026c4:	685b      	ldr	r3, [r3, #4]
 80026c6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80026ca:	2b00      	cmp	r3, #0
 80026cc:	f000 80e0 	beq.w	8002890 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80026d0:	4b2f      	ldr	r3, [pc, #188]	; (8002790 <HAL_GPIO_Init+0x238>)
 80026d2:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80026d6:	4a2e      	ldr	r2, [pc, #184]	; (8002790 <HAL_GPIO_Init+0x238>)
 80026d8:	f043 0302 	orr.w	r3, r3, #2
 80026dc:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 80026e0:	4b2b      	ldr	r3, [pc, #172]	; (8002790 <HAL_GPIO_Init+0x238>)
 80026e2:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80026e6:	f003 0302 	and.w	r3, r3, #2
 80026ea:	60fb      	str	r3, [r7, #12]
 80026ec:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80026ee:	4a29      	ldr	r2, [pc, #164]	; (8002794 <HAL_GPIO_Init+0x23c>)
 80026f0:	69fb      	ldr	r3, [r7, #28]
 80026f2:	089b      	lsrs	r3, r3, #2
 80026f4:	3302      	adds	r3, #2
 80026f6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80026fa:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 80026fc:	69fb      	ldr	r3, [r7, #28]
 80026fe:	f003 0303 	and.w	r3, r3, #3
 8002702:	009b      	lsls	r3, r3, #2
 8002704:	220f      	movs	r2, #15
 8002706:	fa02 f303 	lsl.w	r3, r2, r3
 800270a:	43db      	mvns	r3, r3
 800270c:	69ba      	ldr	r2, [r7, #24]
 800270e:	4013      	ands	r3, r2
 8002710:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	4a20      	ldr	r2, [pc, #128]	; (8002798 <HAL_GPIO_Init+0x240>)
 8002716:	4293      	cmp	r3, r2
 8002718:	d052      	beq.n	80027c0 <HAL_GPIO_Init+0x268>
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	4a1f      	ldr	r2, [pc, #124]	; (800279c <HAL_GPIO_Init+0x244>)
 800271e:	4293      	cmp	r3, r2
 8002720:	d031      	beq.n	8002786 <HAL_GPIO_Init+0x22e>
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	4a1e      	ldr	r2, [pc, #120]	; (80027a0 <HAL_GPIO_Init+0x248>)
 8002726:	4293      	cmp	r3, r2
 8002728:	d02b      	beq.n	8002782 <HAL_GPIO_Init+0x22a>
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	4a1d      	ldr	r2, [pc, #116]	; (80027a4 <HAL_GPIO_Init+0x24c>)
 800272e:	4293      	cmp	r3, r2
 8002730:	d025      	beq.n	800277e <HAL_GPIO_Init+0x226>
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	4a1c      	ldr	r2, [pc, #112]	; (80027a8 <HAL_GPIO_Init+0x250>)
 8002736:	4293      	cmp	r3, r2
 8002738:	d01f      	beq.n	800277a <HAL_GPIO_Init+0x222>
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	4a1b      	ldr	r2, [pc, #108]	; (80027ac <HAL_GPIO_Init+0x254>)
 800273e:	4293      	cmp	r3, r2
 8002740:	d019      	beq.n	8002776 <HAL_GPIO_Init+0x21e>
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	4a1a      	ldr	r2, [pc, #104]	; (80027b0 <HAL_GPIO_Init+0x258>)
 8002746:	4293      	cmp	r3, r2
 8002748:	d013      	beq.n	8002772 <HAL_GPIO_Init+0x21a>
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	4a19      	ldr	r2, [pc, #100]	; (80027b4 <HAL_GPIO_Init+0x25c>)
 800274e:	4293      	cmp	r3, r2
 8002750:	d00d      	beq.n	800276e <HAL_GPIO_Init+0x216>
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	4a18      	ldr	r2, [pc, #96]	; (80027b8 <HAL_GPIO_Init+0x260>)
 8002756:	4293      	cmp	r3, r2
 8002758:	d007      	beq.n	800276a <HAL_GPIO_Init+0x212>
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	4a17      	ldr	r2, [pc, #92]	; (80027bc <HAL_GPIO_Init+0x264>)
 800275e:	4293      	cmp	r3, r2
 8002760:	d101      	bne.n	8002766 <HAL_GPIO_Init+0x20e>
 8002762:	2309      	movs	r3, #9
 8002764:	e02d      	b.n	80027c2 <HAL_GPIO_Init+0x26a>
 8002766:	230a      	movs	r3, #10
 8002768:	e02b      	b.n	80027c2 <HAL_GPIO_Init+0x26a>
 800276a:	2308      	movs	r3, #8
 800276c:	e029      	b.n	80027c2 <HAL_GPIO_Init+0x26a>
 800276e:	2307      	movs	r3, #7
 8002770:	e027      	b.n	80027c2 <HAL_GPIO_Init+0x26a>
 8002772:	2306      	movs	r3, #6
 8002774:	e025      	b.n	80027c2 <HAL_GPIO_Init+0x26a>
 8002776:	2305      	movs	r3, #5
 8002778:	e023      	b.n	80027c2 <HAL_GPIO_Init+0x26a>
 800277a:	2304      	movs	r3, #4
 800277c:	e021      	b.n	80027c2 <HAL_GPIO_Init+0x26a>
 800277e:	2303      	movs	r3, #3
 8002780:	e01f      	b.n	80027c2 <HAL_GPIO_Init+0x26a>
 8002782:	2302      	movs	r3, #2
 8002784:	e01d      	b.n	80027c2 <HAL_GPIO_Init+0x26a>
 8002786:	2301      	movs	r3, #1
 8002788:	e01b      	b.n	80027c2 <HAL_GPIO_Init+0x26a>
 800278a:	bf00      	nop
 800278c:	58000080 	.word	0x58000080
 8002790:	58024400 	.word	0x58024400
 8002794:	58000400 	.word	0x58000400
 8002798:	58020000 	.word	0x58020000
 800279c:	58020400 	.word	0x58020400
 80027a0:	58020800 	.word	0x58020800
 80027a4:	58020c00 	.word	0x58020c00
 80027a8:	58021000 	.word	0x58021000
 80027ac:	58021400 	.word	0x58021400
 80027b0:	58021800 	.word	0x58021800
 80027b4:	58021c00 	.word	0x58021c00
 80027b8:	58022000 	.word	0x58022000
 80027bc:	58022400 	.word	0x58022400
 80027c0:	2300      	movs	r3, #0
 80027c2:	69fa      	ldr	r2, [r7, #28]
 80027c4:	f002 0203 	and.w	r2, r2, #3
 80027c8:	0092      	lsls	r2, r2, #2
 80027ca:	4093      	lsls	r3, r2
 80027cc:	69ba      	ldr	r2, [r7, #24]
 80027ce:	4313      	orrs	r3, r2
 80027d0:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80027d2:	4938      	ldr	r1, [pc, #224]	; (80028b4 <HAL_GPIO_Init+0x35c>)
 80027d4:	69fb      	ldr	r3, [r7, #28]
 80027d6:	089b      	lsrs	r3, r3, #2
 80027d8:	3302      	adds	r3, #2
 80027da:	69ba      	ldr	r2, [r7, #24]
 80027dc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 80027e0:	697b      	ldr	r3, [r7, #20]
 80027e2:	681b      	ldr	r3, [r3, #0]
 80027e4:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80027e6:	693b      	ldr	r3, [r7, #16]
 80027e8:	43db      	mvns	r3, r3
 80027ea:	69ba      	ldr	r2, [r7, #24]
 80027ec:	4013      	ands	r3, r2
 80027ee:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80027f0:	683b      	ldr	r3, [r7, #0]
 80027f2:	685b      	ldr	r3, [r3, #4]
 80027f4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80027f8:	2b00      	cmp	r3, #0
 80027fa:	d003      	beq.n	8002804 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 80027fc:	69ba      	ldr	r2, [r7, #24]
 80027fe:	693b      	ldr	r3, [r7, #16]
 8002800:	4313      	orrs	r3, r2
 8002802:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8002804:	697b      	ldr	r3, [r7, #20]
 8002806:	69ba      	ldr	r2, [r7, #24]
 8002808:	601a      	str	r2, [r3, #0]

        temp = EXTI_CurrentCPU->EMR1;
 800280a:	697b      	ldr	r3, [r7, #20]
 800280c:	685b      	ldr	r3, [r3, #4]
 800280e:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8002810:	693b      	ldr	r3, [r7, #16]
 8002812:	43db      	mvns	r3, r3
 8002814:	69ba      	ldr	r2, [r7, #24]
 8002816:	4013      	ands	r3, r2
 8002818:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800281a:	683b      	ldr	r3, [r7, #0]
 800281c:	685b      	ldr	r3, [r3, #4]
 800281e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002822:	2b00      	cmp	r3, #0
 8002824:	d003      	beq.n	800282e <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8002826:	69ba      	ldr	r2, [r7, #24]
 8002828:	693b      	ldr	r3, [r7, #16]
 800282a:	4313      	orrs	r3, r2
 800282c:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 800282e:	697b      	ldr	r3, [r7, #20]
 8002830:	69ba      	ldr	r2, [r7, #24]
 8002832:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8002834:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002838:	681b      	ldr	r3, [r3, #0]
 800283a:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800283c:	693b      	ldr	r3, [r7, #16]
 800283e:	43db      	mvns	r3, r3
 8002840:	69ba      	ldr	r2, [r7, #24]
 8002842:	4013      	ands	r3, r2
 8002844:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002846:	683b      	ldr	r3, [r7, #0]
 8002848:	685b      	ldr	r3, [r3, #4]
 800284a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800284e:	2b00      	cmp	r3, #0
 8002850:	d003      	beq.n	800285a <HAL_GPIO_Init+0x302>
        {
          temp |= iocurrent;
 8002852:	69ba      	ldr	r2, [r7, #24]
 8002854:	693b      	ldr	r3, [r7, #16]
 8002856:	4313      	orrs	r3, r2
 8002858:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 800285a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800285e:	69bb      	ldr	r3, [r7, #24]
 8002860:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8002862:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002866:	685b      	ldr	r3, [r3, #4]
 8002868:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800286a:	693b      	ldr	r3, [r7, #16]
 800286c:	43db      	mvns	r3, r3
 800286e:	69ba      	ldr	r2, [r7, #24]
 8002870:	4013      	ands	r3, r2
 8002872:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002874:	683b      	ldr	r3, [r7, #0]
 8002876:	685b      	ldr	r3, [r3, #4]
 8002878:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800287c:	2b00      	cmp	r3, #0
 800287e:	d003      	beq.n	8002888 <HAL_GPIO_Init+0x330>
        {
          temp |= iocurrent;
 8002880:	69ba      	ldr	r2, [r7, #24]
 8002882:	693b      	ldr	r3, [r7, #16]
 8002884:	4313      	orrs	r3, r2
 8002886:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8002888:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800288c:	69bb      	ldr	r3, [r7, #24]
 800288e:	6053      	str	r3, [r2, #4]
      }
    }

    position++;
 8002890:	69fb      	ldr	r3, [r7, #28]
 8002892:	3301      	adds	r3, #1
 8002894:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8002896:	683b      	ldr	r3, [r7, #0]
 8002898:	681a      	ldr	r2, [r3, #0]
 800289a:	69fb      	ldr	r3, [r7, #28]
 800289c:	fa22 f303 	lsr.w	r3, r2, r3
 80028a0:	2b00      	cmp	r3, #0
 80028a2:	f47f ae63 	bne.w	800256c <HAL_GPIO_Init+0x14>
  }
}
 80028a6:	bf00      	nop
 80028a8:	3724      	adds	r7, #36	; 0x24
 80028aa:	46bd      	mov	sp, r7
 80028ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028b0:	4770      	bx	lr
 80028b2:	bf00      	nop
 80028b4:	58000400 	.word	0x58000400

080028b8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80028b8:	b480      	push	{r7}
 80028ba:	b083      	sub	sp, #12
 80028bc:	af00      	add	r7, sp, #0
 80028be:	6078      	str	r0, [r7, #4]
 80028c0:	460b      	mov	r3, r1
 80028c2:	807b      	strh	r3, [r7, #2]
 80028c4:	4613      	mov	r3, r2
 80028c6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80028c8:	787b      	ldrb	r3, [r7, #1]
 80028ca:	2b00      	cmp	r3, #0
 80028cc:	d003      	beq.n	80028d6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80028ce:	887a      	ldrh	r2, [r7, #2]
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 80028d4:	e003      	b.n	80028de <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 80028d6:	887b      	ldrh	r3, [r7, #2]
 80028d8:	041a      	lsls	r2, r3, #16
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	619a      	str	r2, [r3, #24]
}
 80028de:	bf00      	nop
 80028e0:	370c      	adds	r7, #12
 80028e2:	46bd      	mov	sp, r7
 80028e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028e8:	4770      	bx	lr
	...

080028ec <HAL_PWREx_ConfigSupply>:
  *            @arg PWR_EXTERNAL_SOURCE_SUPPLY          The LDO regulator is Bypassed.
  *                                                     The Vcore Power Domains are supplied from external source.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply(uint32_t SupplySource)
{
 80028ec:	b580      	push	{r7, lr}
 80028ee:	b084      	sub	sp, #16
 80028f0:	af00      	add	r7, sp, #0
 80028f2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_PWR_SUPPLY(SupplySource));

  if(!__HAL_PWR_GET_FLAG(PWR_FLAG_SCUEN))
 80028f4:	4b18      	ldr	r3, [pc, #96]	; (8002958 <HAL_PWREx_ConfigSupply+0x6c>)
 80028f6:	68db      	ldr	r3, [r3, #12]
 80028f8:	f003 0304 	and.w	r3, r3, #4
 80028fc:	2b04      	cmp	r3, #4
 80028fe:	d008      	beq.n	8002912 <HAL_PWREx_ConfigSupply+0x26>
  {
    if((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8002900:	4b15      	ldr	r3, [pc, #84]	; (8002958 <HAL_PWREx_ConfigSupply+0x6c>)
 8002902:	68db      	ldr	r3, [r3, #12]
 8002904:	f003 0307 	and.w	r3, r3, #7
 8002908:	687a      	ldr	r2, [r7, #4]
 800290a:	429a      	cmp	r2, r3
 800290c:	d001      	beq.n	8002912 <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new regulator config */
      return HAL_ERROR;
 800290e:	2301      	movs	r3, #1
 8002910:	e01d      	b.n	800294e <HAL_PWREx_ConfigSupply+0x62>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG(PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8002912:	4b11      	ldr	r3, [pc, #68]	; (8002958 <HAL_PWREx_ConfigSupply+0x6c>)
 8002914:	68db      	ldr	r3, [r3, #12]
 8002916:	f023 0207 	bic.w	r2, r3, #7
 800291a:	490f      	ldr	r1, [pc, #60]	; (8002958 <HAL_PWREx_ConfigSupply+0x6c>)
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	4313      	orrs	r3, r2
 8002920:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002922:	f7fd fe3f 	bl	80005a4 <HAL_GetTick>
 8002926:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ACTVOSRDY))
 8002928:	e009      	b.n	800293e <HAL_PWREx_ConfigSupply+0x52>
  {
    if((HAL_GetTick() - tickstart ) > PWR_FLAG_SETTING_DELAY_US)
 800292a:	f7fd fe3b 	bl	80005a4 <HAL_GetTick>
 800292e:	4602      	mov	r2, r0
 8002930:	68fb      	ldr	r3, [r7, #12]
 8002932:	1ad3      	subs	r3, r2, r3
 8002934:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002938:	d901      	bls.n	800293e <HAL_PWREx_ConfigSupply+0x52>
    {
      return HAL_TIMEOUT;
 800293a:	2303      	movs	r3, #3
 800293c:	e007      	b.n	800294e <HAL_PWREx_ConfigSupply+0x62>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ACTVOSRDY))
 800293e:	4b06      	ldr	r3, [pc, #24]	; (8002958 <HAL_PWREx_ConfigSupply+0x6c>)
 8002940:	685b      	ldr	r3, [r3, #4]
 8002942:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002946:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800294a:	d1ee      	bne.n	800292a <HAL_PWREx_ConfigSupply+0x3e>
    }
  }

  return HAL_OK;
 800294c:	2300      	movs	r3, #0
}
 800294e:	4618      	mov	r0, r3
 8002950:	3710      	adds	r7, #16
 8002952:	46bd      	mov	sp, r7
 8002954:	bd80      	pop	{r7, pc}
 8002956:	bf00      	nop
 8002958:	58024800 	.word	0x58024800

0800295c <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800295c:	b580      	push	{r7, lr}
 800295e:	b08a      	sub	sp, #40	; 0x28
 8002960:	af00      	add	r7, sp, #0
 8002962:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

    /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	2b00      	cmp	r3, #0
 8002968:	d101      	bne.n	800296e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800296a:	2301      	movs	r3, #1
 800296c:	e3a4      	b.n	80030b8 <HAL_RCC_OscConfig+0x75c>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	681b      	ldr	r3, [r3, #0]
 8002972:	f003 0301 	and.w	r3, r3, #1
 8002976:	2b00      	cmp	r3, #0
 8002978:	f000 8087 	beq.w	8002a8a <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800297c:	4b9a      	ldr	r3, [pc, #616]	; (8002be8 <HAL_RCC_OscConfig+0x28c>)
 800297e:	691b      	ldr	r3, [r3, #16]
 8002980:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8002984:	627b      	str	r3, [r7, #36]	; 0x24
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8002986:	4b98      	ldr	r3, [pc, #608]	; (8002be8 <HAL_RCC_OscConfig+0x28c>)
 8002988:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800298a:	623b      	str	r3, [r7, #32]
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 800298c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800298e:	2b10      	cmp	r3, #16
 8002990:	d007      	beq.n	80029a2 <HAL_RCC_OscConfig+0x46>
 8002992:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002994:	2b18      	cmp	r3, #24
 8002996:	d110      	bne.n	80029ba <HAL_RCC_OscConfig+0x5e>
 8002998:	6a3b      	ldr	r3, [r7, #32]
 800299a:	f003 0303 	and.w	r3, r3, #3
 800299e:	2b02      	cmp	r3, #2
 80029a0:	d10b      	bne.n	80029ba <HAL_RCC_OscConfig+0x5e>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80029a2:	4b91      	ldr	r3, [pc, #580]	; (8002be8 <HAL_RCC_OscConfig+0x28c>)
 80029a4:	681b      	ldr	r3, [r3, #0]
 80029a6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80029aa:	2b00      	cmp	r3, #0
 80029ac:	d06c      	beq.n	8002a88 <HAL_RCC_OscConfig+0x12c>
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	685b      	ldr	r3, [r3, #4]
 80029b2:	2b00      	cmp	r3, #0
 80029b4:	d168      	bne.n	8002a88 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80029b6:	2301      	movs	r3, #1
 80029b8:	e37e      	b.n	80030b8 <HAL_RCC_OscConfig+0x75c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	685b      	ldr	r3, [r3, #4]
 80029be:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80029c2:	d106      	bne.n	80029d2 <HAL_RCC_OscConfig+0x76>
 80029c4:	4b88      	ldr	r3, [pc, #544]	; (8002be8 <HAL_RCC_OscConfig+0x28c>)
 80029c6:	681b      	ldr	r3, [r3, #0]
 80029c8:	4a87      	ldr	r2, [pc, #540]	; (8002be8 <HAL_RCC_OscConfig+0x28c>)
 80029ca:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80029ce:	6013      	str	r3, [r2, #0]
 80029d0:	e02e      	b.n	8002a30 <HAL_RCC_OscConfig+0xd4>
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	685b      	ldr	r3, [r3, #4]
 80029d6:	2b00      	cmp	r3, #0
 80029d8:	d10c      	bne.n	80029f4 <HAL_RCC_OscConfig+0x98>
 80029da:	4b83      	ldr	r3, [pc, #524]	; (8002be8 <HAL_RCC_OscConfig+0x28c>)
 80029dc:	681b      	ldr	r3, [r3, #0]
 80029de:	4a82      	ldr	r2, [pc, #520]	; (8002be8 <HAL_RCC_OscConfig+0x28c>)
 80029e0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80029e4:	6013      	str	r3, [r2, #0]
 80029e6:	4b80      	ldr	r3, [pc, #512]	; (8002be8 <HAL_RCC_OscConfig+0x28c>)
 80029e8:	681b      	ldr	r3, [r3, #0]
 80029ea:	4a7f      	ldr	r2, [pc, #508]	; (8002be8 <HAL_RCC_OscConfig+0x28c>)
 80029ec:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80029f0:	6013      	str	r3, [r2, #0]
 80029f2:	e01d      	b.n	8002a30 <HAL_RCC_OscConfig+0xd4>
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	685b      	ldr	r3, [r3, #4]
 80029f8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80029fc:	d10c      	bne.n	8002a18 <HAL_RCC_OscConfig+0xbc>
 80029fe:	4b7a      	ldr	r3, [pc, #488]	; (8002be8 <HAL_RCC_OscConfig+0x28c>)
 8002a00:	681b      	ldr	r3, [r3, #0]
 8002a02:	4a79      	ldr	r2, [pc, #484]	; (8002be8 <HAL_RCC_OscConfig+0x28c>)
 8002a04:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002a08:	6013      	str	r3, [r2, #0]
 8002a0a:	4b77      	ldr	r3, [pc, #476]	; (8002be8 <HAL_RCC_OscConfig+0x28c>)
 8002a0c:	681b      	ldr	r3, [r3, #0]
 8002a0e:	4a76      	ldr	r2, [pc, #472]	; (8002be8 <HAL_RCC_OscConfig+0x28c>)
 8002a10:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002a14:	6013      	str	r3, [r2, #0]
 8002a16:	e00b      	b.n	8002a30 <HAL_RCC_OscConfig+0xd4>
 8002a18:	4b73      	ldr	r3, [pc, #460]	; (8002be8 <HAL_RCC_OscConfig+0x28c>)
 8002a1a:	681b      	ldr	r3, [r3, #0]
 8002a1c:	4a72      	ldr	r2, [pc, #456]	; (8002be8 <HAL_RCC_OscConfig+0x28c>)
 8002a1e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002a22:	6013      	str	r3, [r2, #0]
 8002a24:	4b70      	ldr	r3, [pc, #448]	; (8002be8 <HAL_RCC_OscConfig+0x28c>)
 8002a26:	681b      	ldr	r3, [r3, #0]
 8002a28:	4a6f      	ldr	r2, [pc, #444]	; (8002be8 <HAL_RCC_OscConfig+0x28c>)
 8002a2a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002a2e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	685b      	ldr	r3, [r3, #4]
 8002a34:	2b00      	cmp	r3, #0
 8002a36:	d013      	beq.n	8002a60 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002a38:	f7fd fdb4 	bl	80005a4 <HAL_GetTick>
 8002a3c:	61f8      	str	r0, [r7, #28]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8002a3e:	e008      	b.n	8002a52 <HAL_RCC_OscConfig+0xf6>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002a40:	f7fd fdb0 	bl	80005a4 <HAL_GetTick>
 8002a44:	4602      	mov	r2, r0
 8002a46:	69fb      	ldr	r3, [r7, #28]
 8002a48:	1ad3      	subs	r3, r2, r3
 8002a4a:	2b64      	cmp	r3, #100	; 0x64
 8002a4c:	d901      	bls.n	8002a52 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8002a4e:	2303      	movs	r3, #3
 8002a50:	e332      	b.n	80030b8 <HAL_RCC_OscConfig+0x75c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8002a52:	4b65      	ldr	r3, [pc, #404]	; (8002be8 <HAL_RCC_OscConfig+0x28c>)
 8002a54:	681b      	ldr	r3, [r3, #0]
 8002a56:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002a5a:	2b00      	cmp	r3, #0
 8002a5c:	d0f0      	beq.n	8002a40 <HAL_RCC_OscConfig+0xe4>
 8002a5e:	e014      	b.n	8002a8a <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002a60:	f7fd fda0 	bl	80005a4 <HAL_GetTick>
 8002a64:	61f8      	str	r0, [r7, #28]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8002a66:	e008      	b.n	8002a7a <HAL_RCC_OscConfig+0x11e>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002a68:	f7fd fd9c 	bl	80005a4 <HAL_GetTick>
 8002a6c:	4602      	mov	r2, r0
 8002a6e:	69fb      	ldr	r3, [r7, #28]
 8002a70:	1ad3      	subs	r3, r2, r3
 8002a72:	2b64      	cmp	r3, #100	; 0x64
 8002a74:	d901      	bls.n	8002a7a <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8002a76:	2303      	movs	r3, #3
 8002a78:	e31e      	b.n	80030b8 <HAL_RCC_OscConfig+0x75c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8002a7a:	4b5b      	ldr	r3, [pc, #364]	; (8002be8 <HAL_RCC_OscConfig+0x28c>)
 8002a7c:	681b      	ldr	r3, [r3, #0]
 8002a7e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002a82:	2b00      	cmp	r3, #0
 8002a84:	d1f0      	bne.n	8002a68 <HAL_RCC_OscConfig+0x10c>
 8002a86:	e000      	b.n	8002a8a <HAL_RCC_OscConfig+0x12e>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002a88:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	681b      	ldr	r3, [r3, #0]
 8002a8e:	f003 0302 	and.w	r3, r3, #2
 8002a92:	2b00      	cmp	r3, #0
 8002a94:	f000 80b0 	beq.w	8002bf8 <HAL_RCC_OscConfig+0x29c>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002a98:	4b53      	ldr	r3, [pc, #332]	; (8002be8 <HAL_RCC_OscConfig+0x28c>)
 8002a9a:	691b      	ldr	r3, [r3, #16]
 8002a9c:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8002aa0:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8002aa2:	4b51      	ldr	r3, [pc, #324]	; (8002be8 <HAL_RCC_OscConfig+0x28c>)
 8002aa4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002aa6:	617b      	str	r3, [r7, #20]
    if((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8002aa8:	69bb      	ldr	r3, [r7, #24]
 8002aaa:	2b00      	cmp	r3, #0
 8002aac:	d007      	beq.n	8002abe <HAL_RCC_OscConfig+0x162>
 8002aae:	69bb      	ldr	r3, [r7, #24]
 8002ab0:	2b18      	cmp	r3, #24
 8002ab2:	d149      	bne.n	8002b48 <HAL_RCC_OscConfig+0x1ec>
 8002ab4:	697b      	ldr	r3, [r7, #20]
 8002ab6:	f003 0303 	and.w	r3, r3, #3
 8002aba:	2b00      	cmp	r3, #0
 8002abc:	d144      	bne.n	8002b48 <HAL_RCC_OscConfig+0x1ec>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002abe:	4b4a      	ldr	r3, [pc, #296]	; (8002be8 <HAL_RCC_OscConfig+0x28c>)
 8002ac0:	681b      	ldr	r3, [r3, #0]
 8002ac2:	f003 0304 	and.w	r3, r3, #4
 8002ac6:	2b00      	cmp	r3, #0
 8002ac8:	d005      	beq.n	8002ad6 <HAL_RCC_OscConfig+0x17a>
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	68db      	ldr	r3, [r3, #12]
 8002ace:	2b00      	cmp	r3, #0
 8002ad0:	d101      	bne.n	8002ad6 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8002ad2:	2301      	movs	r3, #1
 8002ad4:	e2f0      	b.n	80030b8 <HAL_RCC_OscConfig+0x75c>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
      /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8002ad6:	4b44      	ldr	r3, [pc, #272]	; (8002be8 <HAL_RCC_OscConfig+0x28c>)
 8002ad8:	681b      	ldr	r3, [r3, #0]
 8002ada:	f023 0219 	bic.w	r2, r3, #25
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	68db      	ldr	r3, [r3, #12]
 8002ae2:	4941      	ldr	r1, [pc, #260]	; (8002be8 <HAL_RCC_OscConfig+0x28c>)
 8002ae4:	4313      	orrs	r3, r2
 8002ae6:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002ae8:	f7fd fd5c 	bl	80005a4 <HAL_GetTick>
 8002aec:	61f8      	str	r0, [r7, #28]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002aee:	e008      	b.n	8002b02 <HAL_RCC_OscConfig+0x1a6>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002af0:	f7fd fd58 	bl	80005a4 <HAL_GetTick>
 8002af4:	4602      	mov	r2, r0
 8002af6:	69fb      	ldr	r3, [r7, #28]
 8002af8:	1ad3      	subs	r3, r2, r3
 8002afa:	2b02      	cmp	r3, #2
 8002afc:	d901      	bls.n	8002b02 <HAL_RCC_OscConfig+0x1a6>
          {
            return HAL_TIMEOUT;
 8002afe:	2303      	movs	r3, #3
 8002b00:	e2da      	b.n	80030b8 <HAL_RCC_OscConfig+0x75c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002b02:	4b39      	ldr	r3, [pc, #228]	; (8002be8 <HAL_RCC_OscConfig+0x28c>)
 8002b04:	681b      	ldr	r3, [r3, #0]
 8002b06:	f003 0304 	and.w	r3, r3, #4
 8002b0a:	2b00      	cmp	r3, #0
 8002b0c:	d0f0      	beq.n	8002af0 <HAL_RCC_OscConfig+0x194>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002b0e:	f7fd fd77 	bl	8000600 <HAL_GetREVID>
 8002b12:	4602      	mov	r2, r0
 8002b14:	f241 0303 	movw	r3, #4099	; 0x1003
 8002b18:	429a      	cmp	r2, r3
 8002b1a:	d80a      	bhi.n	8002b32 <HAL_RCC_OscConfig+0x1d6>
 8002b1c:	4b32      	ldr	r3, [pc, #200]	; (8002be8 <HAL_RCC_OscConfig+0x28c>)
 8002b1e:	685b      	ldr	r3, [r3, #4]
 8002b20:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	691b      	ldr	r3, [r3, #16]
 8002b28:	031b      	lsls	r3, r3, #12
 8002b2a:	492f      	ldr	r1, [pc, #188]	; (8002be8 <HAL_RCC_OscConfig+0x28c>)
 8002b2c:	4313      	orrs	r3, r2
 8002b2e:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002b30:	e062      	b.n	8002bf8 <HAL_RCC_OscConfig+0x29c>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002b32:	4b2d      	ldr	r3, [pc, #180]	; (8002be8 <HAL_RCC_OscConfig+0x28c>)
 8002b34:	685b      	ldr	r3, [r3, #4]
 8002b36:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	691b      	ldr	r3, [r3, #16]
 8002b3e:	061b      	lsls	r3, r3, #24
 8002b40:	4929      	ldr	r1, [pc, #164]	; (8002be8 <HAL_RCC_OscConfig+0x28c>)
 8002b42:	4313      	orrs	r3, r2
 8002b44:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002b46:	e057      	b.n	8002bf8 <HAL_RCC_OscConfig+0x29c>
    }

    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	68db      	ldr	r3, [r3, #12]
 8002b4c:	2b00      	cmp	r3, #0
 8002b4e:	d038      	beq.n	8002bc2 <HAL_RCC_OscConfig+0x266>
      {
     /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8002b50:	4b25      	ldr	r3, [pc, #148]	; (8002be8 <HAL_RCC_OscConfig+0x28c>)
 8002b52:	681b      	ldr	r3, [r3, #0]
 8002b54:	f023 0219 	bic.w	r2, r3, #25
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	68db      	ldr	r3, [r3, #12]
 8002b5c:	4922      	ldr	r1, [pc, #136]	; (8002be8 <HAL_RCC_OscConfig+0x28c>)
 8002b5e:	4313      	orrs	r3, r2
 8002b60:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002b62:	f7fd fd1f 	bl	80005a4 <HAL_GetTick>
 8002b66:	61f8      	str	r0, [r7, #28]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002b68:	e008      	b.n	8002b7c <HAL_RCC_OscConfig+0x220>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002b6a:	f7fd fd1b 	bl	80005a4 <HAL_GetTick>
 8002b6e:	4602      	mov	r2, r0
 8002b70:	69fb      	ldr	r3, [r7, #28]
 8002b72:	1ad3      	subs	r3, r2, r3
 8002b74:	2b02      	cmp	r3, #2
 8002b76:	d901      	bls.n	8002b7c <HAL_RCC_OscConfig+0x220>
          {
            return HAL_TIMEOUT;
 8002b78:	2303      	movs	r3, #3
 8002b7a:	e29d      	b.n	80030b8 <HAL_RCC_OscConfig+0x75c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002b7c:	4b1a      	ldr	r3, [pc, #104]	; (8002be8 <HAL_RCC_OscConfig+0x28c>)
 8002b7e:	681b      	ldr	r3, [r3, #0]
 8002b80:	f003 0304 	and.w	r3, r3, #4
 8002b84:	2b00      	cmp	r3, #0
 8002b86:	d0f0      	beq.n	8002b6a <HAL_RCC_OscConfig+0x20e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002b88:	f7fd fd3a 	bl	8000600 <HAL_GetREVID>
 8002b8c:	4602      	mov	r2, r0
 8002b8e:	f241 0303 	movw	r3, #4099	; 0x1003
 8002b92:	429a      	cmp	r2, r3
 8002b94:	d80a      	bhi.n	8002bac <HAL_RCC_OscConfig+0x250>
 8002b96:	4b14      	ldr	r3, [pc, #80]	; (8002be8 <HAL_RCC_OscConfig+0x28c>)
 8002b98:	685b      	ldr	r3, [r3, #4]
 8002b9a:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	691b      	ldr	r3, [r3, #16]
 8002ba2:	031b      	lsls	r3, r3, #12
 8002ba4:	4910      	ldr	r1, [pc, #64]	; (8002be8 <HAL_RCC_OscConfig+0x28c>)
 8002ba6:	4313      	orrs	r3, r2
 8002ba8:	604b      	str	r3, [r1, #4]
 8002baa:	e025      	b.n	8002bf8 <HAL_RCC_OscConfig+0x29c>
 8002bac:	4b0e      	ldr	r3, [pc, #56]	; (8002be8 <HAL_RCC_OscConfig+0x28c>)
 8002bae:	685b      	ldr	r3, [r3, #4]
 8002bb0:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	691b      	ldr	r3, [r3, #16]
 8002bb8:	061b      	lsls	r3, r3, #24
 8002bba:	490b      	ldr	r1, [pc, #44]	; (8002be8 <HAL_RCC_OscConfig+0x28c>)
 8002bbc:	4313      	orrs	r3, r2
 8002bbe:	604b      	str	r3, [r1, #4]
 8002bc0:	e01a      	b.n	8002bf8 <HAL_RCC_OscConfig+0x29c>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002bc2:	4b09      	ldr	r3, [pc, #36]	; (8002be8 <HAL_RCC_OscConfig+0x28c>)
 8002bc4:	681b      	ldr	r3, [r3, #0]
 8002bc6:	4a08      	ldr	r2, [pc, #32]	; (8002be8 <HAL_RCC_OscConfig+0x28c>)
 8002bc8:	f023 0301 	bic.w	r3, r3, #1
 8002bcc:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002bce:	f7fd fce9 	bl	80005a4 <HAL_GetTick>
 8002bd2:	61f8      	str	r0, [r7, #28]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8002bd4:	e00a      	b.n	8002bec <HAL_RCC_OscConfig+0x290>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002bd6:	f7fd fce5 	bl	80005a4 <HAL_GetTick>
 8002bda:	4602      	mov	r2, r0
 8002bdc:	69fb      	ldr	r3, [r7, #28]
 8002bde:	1ad3      	subs	r3, r2, r3
 8002be0:	2b02      	cmp	r3, #2
 8002be2:	d903      	bls.n	8002bec <HAL_RCC_OscConfig+0x290>
          {
            return HAL_TIMEOUT;
 8002be4:	2303      	movs	r3, #3
 8002be6:	e267      	b.n	80030b8 <HAL_RCC_OscConfig+0x75c>
 8002be8:	58024400 	.word	0x58024400
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8002bec:	4ba0      	ldr	r3, [pc, #640]	; (8002e70 <HAL_RCC_OscConfig+0x514>)
 8002bee:	681b      	ldr	r3, [r3, #0]
 8002bf0:	f003 0304 	and.w	r3, r3, #4
 8002bf4:	2b00      	cmp	r3, #0
 8002bf6:	d1ee      	bne.n	8002bd6 <HAL_RCC_OscConfig+0x27a>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	681b      	ldr	r3, [r3, #0]
 8002bfc:	f003 0310 	and.w	r3, r3, #16
 8002c00:	2b00      	cmp	r3, #0
 8002c02:	f000 808f 	beq.w	8002d24 <HAL_RCC_OscConfig+0x3c8>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002c06:	4b9a      	ldr	r3, [pc, #616]	; (8002e70 <HAL_RCC_OscConfig+0x514>)
 8002c08:	691b      	ldr	r3, [r3, #16]
 8002c0a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8002c0e:	613b      	str	r3, [r7, #16]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8002c10:	4b97      	ldr	r3, [pc, #604]	; (8002e70 <HAL_RCC_OscConfig+0x514>)
 8002c12:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002c14:	60fb      	str	r3, [r7, #12]
    if((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8002c16:	693b      	ldr	r3, [r7, #16]
 8002c18:	2b08      	cmp	r3, #8
 8002c1a:	d007      	beq.n	8002c2c <HAL_RCC_OscConfig+0x2d0>
 8002c1c:	693b      	ldr	r3, [r7, #16]
 8002c1e:	2b18      	cmp	r3, #24
 8002c20:	d12d      	bne.n	8002c7e <HAL_RCC_OscConfig+0x322>
 8002c22:	68fb      	ldr	r3, [r7, #12]
 8002c24:	f003 0303 	and.w	r3, r3, #3
 8002c28:	2b01      	cmp	r3, #1
 8002c2a:	d128      	bne.n	8002c7e <HAL_RCC_OscConfig+0x322>
    {
      /* When CSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8002c2c:	4b90      	ldr	r3, [pc, #576]	; (8002e70 <HAL_RCC_OscConfig+0x514>)
 8002c2e:	681b      	ldr	r3, [r3, #0]
 8002c30:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002c34:	2b00      	cmp	r3, #0
 8002c36:	d005      	beq.n	8002c44 <HAL_RCC_OscConfig+0x2e8>
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	69db      	ldr	r3, [r3, #28]
 8002c3c:	2b80      	cmp	r3, #128	; 0x80
 8002c3e:	d001      	beq.n	8002c44 <HAL_RCC_OscConfig+0x2e8>
      {
        return HAL_ERROR;
 8002c40:	2301      	movs	r3, #1
 8002c42:	e239      	b.n	80030b8 <HAL_RCC_OscConfig+0x75c>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8002c44:	f7fd fcdc 	bl	8000600 <HAL_GetREVID>
 8002c48:	4602      	mov	r2, r0
 8002c4a:	f241 0303 	movw	r3, #4099	; 0x1003
 8002c4e:	429a      	cmp	r2, r3
 8002c50:	d80a      	bhi.n	8002c68 <HAL_RCC_OscConfig+0x30c>
 8002c52:	4b87      	ldr	r3, [pc, #540]	; (8002e70 <HAL_RCC_OscConfig+0x514>)
 8002c54:	685b      	ldr	r3, [r3, #4]
 8002c56:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	6a1b      	ldr	r3, [r3, #32]
 8002c5e:	069b      	lsls	r3, r3, #26
 8002c60:	4983      	ldr	r1, [pc, #524]	; (8002e70 <HAL_RCC_OscConfig+0x514>)
 8002c62:	4313      	orrs	r3, r2
 8002c64:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8002c66:	e05d      	b.n	8002d24 <HAL_RCC_OscConfig+0x3c8>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8002c68:	4b81      	ldr	r3, [pc, #516]	; (8002e70 <HAL_RCC_OscConfig+0x514>)
 8002c6a:	68db      	ldr	r3, [r3, #12]
 8002c6c:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	6a1b      	ldr	r3, [r3, #32]
 8002c74:	061b      	lsls	r3, r3, #24
 8002c76:	497e      	ldr	r1, [pc, #504]	; (8002e70 <HAL_RCC_OscConfig+0x514>)
 8002c78:	4313      	orrs	r3, r2
 8002c7a:	60cb      	str	r3, [r1, #12]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8002c7c:	e052      	b.n	8002d24 <HAL_RCC_OscConfig+0x3c8>
      }
    }
    else
    {
      /* Check the CSI State */
      if((RCC_OscInitStruct->CSIState)!= RCC_CSI_OFF)
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	69db      	ldr	r3, [r3, #28]
 8002c82:	2b00      	cmp	r3, #0
 8002c84:	d035      	beq.n	8002cf2 <HAL_RCC_OscConfig+0x396>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8002c86:	4b7a      	ldr	r3, [pc, #488]	; (8002e70 <HAL_RCC_OscConfig+0x514>)
 8002c88:	681b      	ldr	r3, [r3, #0]
 8002c8a:	4a79      	ldr	r2, [pc, #484]	; (8002e70 <HAL_RCC_OscConfig+0x514>)
 8002c8c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002c90:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002c92:	f7fd fc87 	bl	80005a4 <HAL_GetTick>
 8002c96:	61f8      	str	r0, [r7, #28]

        /* Wait till CSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8002c98:	e008      	b.n	8002cac <HAL_RCC_OscConfig+0x350>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 8002c9a:	f7fd fc83 	bl	80005a4 <HAL_GetTick>
 8002c9e:	4602      	mov	r2, r0
 8002ca0:	69fb      	ldr	r3, [r7, #28]
 8002ca2:	1ad3      	subs	r3, r2, r3
 8002ca4:	2b02      	cmp	r3, #2
 8002ca6:	d901      	bls.n	8002cac <HAL_RCC_OscConfig+0x350>
          {
            return HAL_TIMEOUT;
 8002ca8:	2303      	movs	r3, #3
 8002caa:	e205      	b.n	80030b8 <HAL_RCC_OscConfig+0x75c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8002cac:	4b70      	ldr	r3, [pc, #448]	; (8002e70 <HAL_RCC_OscConfig+0x514>)
 8002cae:	681b      	ldr	r3, [r3, #0]
 8002cb0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002cb4:	2b00      	cmp	r3, #0
 8002cb6:	d0f0      	beq.n	8002c9a <HAL_RCC_OscConfig+0x33e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8002cb8:	f7fd fca2 	bl	8000600 <HAL_GetREVID>
 8002cbc:	4602      	mov	r2, r0
 8002cbe:	f241 0303 	movw	r3, #4099	; 0x1003
 8002cc2:	429a      	cmp	r2, r3
 8002cc4:	d80a      	bhi.n	8002cdc <HAL_RCC_OscConfig+0x380>
 8002cc6:	4b6a      	ldr	r3, [pc, #424]	; (8002e70 <HAL_RCC_OscConfig+0x514>)
 8002cc8:	685b      	ldr	r3, [r3, #4]
 8002cca:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	6a1b      	ldr	r3, [r3, #32]
 8002cd2:	069b      	lsls	r3, r3, #26
 8002cd4:	4966      	ldr	r1, [pc, #408]	; (8002e70 <HAL_RCC_OscConfig+0x514>)
 8002cd6:	4313      	orrs	r3, r2
 8002cd8:	604b      	str	r3, [r1, #4]
 8002cda:	e023      	b.n	8002d24 <HAL_RCC_OscConfig+0x3c8>
 8002cdc:	4b64      	ldr	r3, [pc, #400]	; (8002e70 <HAL_RCC_OscConfig+0x514>)
 8002cde:	68db      	ldr	r3, [r3, #12]
 8002ce0:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	6a1b      	ldr	r3, [r3, #32]
 8002ce8:	061b      	lsls	r3, r3, #24
 8002cea:	4961      	ldr	r1, [pc, #388]	; (8002e70 <HAL_RCC_OscConfig+0x514>)
 8002cec:	4313      	orrs	r3, r2
 8002cee:	60cb      	str	r3, [r1, #12]
 8002cf0:	e018      	b.n	8002d24 <HAL_RCC_OscConfig+0x3c8>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8002cf2:	4b5f      	ldr	r3, [pc, #380]	; (8002e70 <HAL_RCC_OscConfig+0x514>)
 8002cf4:	681b      	ldr	r3, [r3, #0]
 8002cf6:	4a5e      	ldr	r2, [pc, #376]	; (8002e70 <HAL_RCC_OscConfig+0x514>)
 8002cf8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002cfc:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002cfe:	f7fd fc51 	bl	80005a4 <HAL_GetTick>
 8002d02:	61f8      	str	r0, [r7, #28]

        /* Wait till CSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8002d04:	e008      	b.n	8002d18 <HAL_RCC_OscConfig+0x3bc>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 8002d06:	f7fd fc4d 	bl	80005a4 <HAL_GetTick>
 8002d0a:	4602      	mov	r2, r0
 8002d0c:	69fb      	ldr	r3, [r7, #28]
 8002d0e:	1ad3      	subs	r3, r2, r3
 8002d10:	2b02      	cmp	r3, #2
 8002d12:	d901      	bls.n	8002d18 <HAL_RCC_OscConfig+0x3bc>
          {
            return HAL_TIMEOUT;
 8002d14:	2303      	movs	r3, #3
 8002d16:	e1cf      	b.n	80030b8 <HAL_RCC_OscConfig+0x75c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8002d18:	4b55      	ldr	r3, [pc, #340]	; (8002e70 <HAL_RCC_OscConfig+0x514>)
 8002d1a:	681b      	ldr	r3, [r3, #0]
 8002d1c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002d20:	2b00      	cmp	r3, #0
 8002d22:	d1f0      	bne.n	8002d06 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	681b      	ldr	r3, [r3, #0]
 8002d28:	f003 0308 	and.w	r3, r3, #8
 8002d2c:	2b00      	cmp	r3, #0
 8002d2e:	d036      	beq.n	8002d9e <HAL_RCC_OscConfig+0x442>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	695b      	ldr	r3, [r3, #20]
 8002d34:	2b00      	cmp	r3, #0
 8002d36:	d019      	beq.n	8002d6c <HAL_RCC_OscConfig+0x410>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002d38:	4b4d      	ldr	r3, [pc, #308]	; (8002e70 <HAL_RCC_OscConfig+0x514>)
 8002d3a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002d3c:	4a4c      	ldr	r2, [pc, #304]	; (8002e70 <HAL_RCC_OscConfig+0x514>)
 8002d3e:	f043 0301 	orr.w	r3, r3, #1
 8002d42:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002d44:	f7fd fc2e 	bl	80005a4 <HAL_GetTick>
 8002d48:	61f8      	str	r0, [r7, #28]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8002d4a:	e008      	b.n	8002d5e <HAL_RCC_OscConfig+0x402>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002d4c:	f7fd fc2a 	bl	80005a4 <HAL_GetTick>
 8002d50:	4602      	mov	r2, r0
 8002d52:	69fb      	ldr	r3, [r7, #28]
 8002d54:	1ad3      	subs	r3, r2, r3
 8002d56:	2b02      	cmp	r3, #2
 8002d58:	d901      	bls.n	8002d5e <HAL_RCC_OscConfig+0x402>
        {
          return HAL_TIMEOUT;
 8002d5a:	2303      	movs	r3, #3
 8002d5c:	e1ac      	b.n	80030b8 <HAL_RCC_OscConfig+0x75c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8002d5e:	4b44      	ldr	r3, [pc, #272]	; (8002e70 <HAL_RCC_OscConfig+0x514>)
 8002d60:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002d62:	f003 0302 	and.w	r3, r3, #2
 8002d66:	2b00      	cmp	r3, #0
 8002d68:	d0f0      	beq.n	8002d4c <HAL_RCC_OscConfig+0x3f0>
 8002d6a:	e018      	b.n	8002d9e <HAL_RCC_OscConfig+0x442>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002d6c:	4b40      	ldr	r3, [pc, #256]	; (8002e70 <HAL_RCC_OscConfig+0x514>)
 8002d6e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002d70:	4a3f      	ldr	r2, [pc, #252]	; (8002e70 <HAL_RCC_OscConfig+0x514>)
 8002d72:	f023 0301 	bic.w	r3, r3, #1
 8002d76:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002d78:	f7fd fc14 	bl	80005a4 <HAL_GetTick>
 8002d7c:	61f8      	str	r0, [r7, #28]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8002d7e:	e008      	b.n	8002d92 <HAL_RCC_OscConfig+0x436>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002d80:	f7fd fc10 	bl	80005a4 <HAL_GetTick>
 8002d84:	4602      	mov	r2, r0
 8002d86:	69fb      	ldr	r3, [r7, #28]
 8002d88:	1ad3      	subs	r3, r2, r3
 8002d8a:	2b02      	cmp	r3, #2
 8002d8c:	d901      	bls.n	8002d92 <HAL_RCC_OscConfig+0x436>
        {
          return HAL_TIMEOUT;
 8002d8e:	2303      	movs	r3, #3
 8002d90:	e192      	b.n	80030b8 <HAL_RCC_OscConfig+0x75c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8002d92:	4b37      	ldr	r3, [pc, #220]	; (8002e70 <HAL_RCC_OscConfig+0x514>)
 8002d94:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002d96:	f003 0302 	and.w	r3, r3, #2
 8002d9a:	2b00      	cmp	r3, #0
 8002d9c:	d1f0      	bne.n	8002d80 <HAL_RCC_OscConfig+0x424>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	681b      	ldr	r3, [r3, #0]
 8002da2:	f003 0320 	and.w	r3, r3, #32
 8002da6:	2b00      	cmp	r3, #0
 8002da8:	d036      	beq.n	8002e18 <HAL_RCC_OscConfig+0x4bc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if((RCC_OscInitStruct->HSI48State)!= RCC_HSI48_OFF)
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	699b      	ldr	r3, [r3, #24]
 8002dae:	2b00      	cmp	r3, #0
 8002db0:	d019      	beq.n	8002de6 <HAL_RCC_OscConfig+0x48a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8002db2:	4b2f      	ldr	r3, [pc, #188]	; (8002e70 <HAL_RCC_OscConfig+0x514>)
 8002db4:	681b      	ldr	r3, [r3, #0]
 8002db6:	4a2e      	ldr	r2, [pc, #184]	; (8002e70 <HAL_RCC_OscConfig+0x514>)
 8002db8:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8002dbc:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8002dbe:	f7fd fbf1 	bl	80005a4 <HAL_GetTick>
 8002dc2:	61f8      	str	r0, [r7, #28]

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8002dc4:	e008      	b.n	8002dd8 <HAL_RCC_OscConfig+0x47c>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 8002dc6:	f7fd fbed 	bl	80005a4 <HAL_GetTick>
 8002dca:	4602      	mov	r2, r0
 8002dcc:	69fb      	ldr	r3, [r7, #28]
 8002dce:	1ad3      	subs	r3, r2, r3
 8002dd0:	2b02      	cmp	r3, #2
 8002dd2:	d901      	bls.n	8002dd8 <HAL_RCC_OscConfig+0x47c>
        {
          return HAL_TIMEOUT;
 8002dd4:	2303      	movs	r3, #3
 8002dd6:	e16f      	b.n	80030b8 <HAL_RCC_OscConfig+0x75c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8002dd8:	4b25      	ldr	r3, [pc, #148]	; (8002e70 <HAL_RCC_OscConfig+0x514>)
 8002dda:	681b      	ldr	r3, [r3, #0]
 8002ddc:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002de0:	2b00      	cmp	r3, #0
 8002de2:	d0f0      	beq.n	8002dc6 <HAL_RCC_OscConfig+0x46a>
 8002de4:	e018      	b.n	8002e18 <HAL_RCC_OscConfig+0x4bc>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8002de6:	4b22      	ldr	r3, [pc, #136]	; (8002e70 <HAL_RCC_OscConfig+0x514>)
 8002de8:	681b      	ldr	r3, [r3, #0]
 8002dea:	4a21      	ldr	r2, [pc, #132]	; (8002e70 <HAL_RCC_OscConfig+0x514>)
 8002dec:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8002df0:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8002df2:	f7fd fbd7 	bl	80005a4 <HAL_GetTick>
 8002df6:	61f8      	str	r0, [r7, #28]

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8002df8:	e008      	b.n	8002e0c <HAL_RCC_OscConfig+0x4b0>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 8002dfa:	f7fd fbd3 	bl	80005a4 <HAL_GetTick>
 8002dfe:	4602      	mov	r2, r0
 8002e00:	69fb      	ldr	r3, [r7, #28]
 8002e02:	1ad3      	subs	r3, r2, r3
 8002e04:	2b02      	cmp	r3, #2
 8002e06:	d901      	bls.n	8002e0c <HAL_RCC_OscConfig+0x4b0>
        {
          return HAL_TIMEOUT;
 8002e08:	2303      	movs	r3, #3
 8002e0a:	e155      	b.n	80030b8 <HAL_RCC_OscConfig+0x75c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8002e0c:	4b18      	ldr	r3, [pc, #96]	; (8002e70 <HAL_RCC_OscConfig+0x514>)
 8002e0e:	681b      	ldr	r3, [r3, #0]
 8002e10:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002e14:	2b00      	cmp	r3, #0
 8002e16:	d1f0      	bne.n	8002dfa <HAL_RCC_OscConfig+0x49e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	681b      	ldr	r3, [r3, #0]
 8002e1c:	f003 0304 	and.w	r3, r3, #4
 8002e20:	2b00      	cmp	r3, #0
 8002e22:	f000 8086 	beq.w	8002f32 <HAL_RCC_OscConfig+0x5d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8002e26:	4b13      	ldr	r3, [pc, #76]	; (8002e74 <HAL_RCC_OscConfig+0x518>)
 8002e28:	681b      	ldr	r3, [r3, #0]
 8002e2a:	4a12      	ldr	r2, [pc, #72]	; (8002e74 <HAL_RCC_OscConfig+0x518>)
 8002e2c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002e30:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8002e32:	f7fd fbb7 	bl	80005a4 <HAL_GetTick>
 8002e36:	61f8      	str	r0, [r7, #28]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002e38:	e008      	b.n	8002e4c <HAL_RCC_OscConfig+0x4f0>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8002e3a:	f7fd fbb3 	bl	80005a4 <HAL_GetTick>
 8002e3e:	4602      	mov	r2, r0
 8002e40:	69fb      	ldr	r3, [r7, #28]
 8002e42:	1ad3      	subs	r3, r2, r3
 8002e44:	2b64      	cmp	r3, #100	; 0x64
 8002e46:	d901      	bls.n	8002e4c <HAL_RCC_OscConfig+0x4f0>
      {
        return HAL_TIMEOUT;
 8002e48:	2303      	movs	r3, #3
 8002e4a:	e135      	b.n	80030b8 <HAL_RCC_OscConfig+0x75c>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002e4c:	4b09      	ldr	r3, [pc, #36]	; (8002e74 <HAL_RCC_OscConfig+0x518>)
 8002e4e:	681b      	ldr	r3, [r3, #0]
 8002e50:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002e54:	2b00      	cmp	r3, #0
 8002e56:	d0f0      	beq.n	8002e3a <HAL_RCC_OscConfig+0x4de>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	689b      	ldr	r3, [r3, #8]
 8002e5c:	2b01      	cmp	r3, #1
 8002e5e:	d10b      	bne.n	8002e78 <HAL_RCC_OscConfig+0x51c>
 8002e60:	4b03      	ldr	r3, [pc, #12]	; (8002e70 <HAL_RCC_OscConfig+0x514>)
 8002e62:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002e64:	4a02      	ldr	r2, [pc, #8]	; (8002e70 <HAL_RCC_OscConfig+0x514>)
 8002e66:	f043 0301 	orr.w	r3, r3, #1
 8002e6a:	6713      	str	r3, [r2, #112]	; 0x70
 8002e6c:	e032      	b.n	8002ed4 <HAL_RCC_OscConfig+0x578>
 8002e6e:	bf00      	nop
 8002e70:	58024400 	.word	0x58024400
 8002e74:	58024800 	.word	0x58024800
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	689b      	ldr	r3, [r3, #8]
 8002e7c:	2b00      	cmp	r3, #0
 8002e7e:	d10c      	bne.n	8002e9a <HAL_RCC_OscConfig+0x53e>
 8002e80:	4b8f      	ldr	r3, [pc, #572]	; (80030c0 <HAL_RCC_OscConfig+0x764>)
 8002e82:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002e84:	4a8e      	ldr	r2, [pc, #568]	; (80030c0 <HAL_RCC_OscConfig+0x764>)
 8002e86:	f023 0301 	bic.w	r3, r3, #1
 8002e8a:	6713      	str	r3, [r2, #112]	; 0x70
 8002e8c:	4b8c      	ldr	r3, [pc, #560]	; (80030c0 <HAL_RCC_OscConfig+0x764>)
 8002e8e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002e90:	4a8b      	ldr	r2, [pc, #556]	; (80030c0 <HAL_RCC_OscConfig+0x764>)
 8002e92:	f023 0304 	bic.w	r3, r3, #4
 8002e96:	6713      	str	r3, [r2, #112]	; 0x70
 8002e98:	e01c      	b.n	8002ed4 <HAL_RCC_OscConfig+0x578>
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	689b      	ldr	r3, [r3, #8]
 8002e9e:	2b05      	cmp	r3, #5
 8002ea0:	d10c      	bne.n	8002ebc <HAL_RCC_OscConfig+0x560>
 8002ea2:	4b87      	ldr	r3, [pc, #540]	; (80030c0 <HAL_RCC_OscConfig+0x764>)
 8002ea4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002ea6:	4a86      	ldr	r2, [pc, #536]	; (80030c0 <HAL_RCC_OscConfig+0x764>)
 8002ea8:	f043 0304 	orr.w	r3, r3, #4
 8002eac:	6713      	str	r3, [r2, #112]	; 0x70
 8002eae:	4b84      	ldr	r3, [pc, #528]	; (80030c0 <HAL_RCC_OscConfig+0x764>)
 8002eb0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002eb2:	4a83      	ldr	r2, [pc, #524]	; (80030c0 <HAL_RCC_OscConfig+0x764>)
 8002eb4:	f043 0301 	orr.w	r3, r3, #1
 8002eb8:	6713      	str	r3, [r2, #112]	; 0x70
 8002eba:	e00b      	b.n	8002ed4 <HAL_RCC_OscConfig+0x578>
 8002ebc:	4b80      	ldr	r3, [pc, #512]	; (80030c0 <HAL_RCC_OscConfig+0x764>)
 8002ebe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002ec0:	4a7f      	ldr	r2, [pc, #508]	; (80030c0 <HAL_RCC_OscConfig+0x764>)
 8002ec2:	f023 0301 	bic.w	r3, r3, #1
 8002ec6:	6713      	str	r3, [r2, #112]	; 0x70
 8002ec8:	4b7d      	ldr	r3, [pc, #500]	; (80030c0 <HAL_RCC_OscConfig+0x764>)
 8002eca:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002ecc:	4a7c      	ldr	r2, [pc, #496]	; (80030c0 <HAL_RCC_OscConfig+0x764>)
 8002ece:	f023 0304 	bic.w	r3, r3, #4
 8002ed2:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	689b      	ldr	r3, [r3, #8]
 8002ed8:	2b00      	cmp	r3, #0
 8002eda:	d015      	beq.n	8002f08 <HAL_RCC_OscConfig+0x5ac>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002edc:	f7fd fb62 	bl	80005a4 <HAL_GetTick>
 8002ee0:	61f8      	str	r0, [r7, #28]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8002ee2:	e00a      	b.n	8002efa <HAL_RCC_OscConfig+0x59e>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002ee4:	f7fd fb5e 	bl	80005a4 <HAL_GetTick>
 8002ee8:	4602      	mov	r2, r0
 8002eea:	69fb      	ldr	r3, [r7, #28]
 8002eec:	1ad3      	subs	r3, r2, r3
 8002eee:	f241 3288 	movw	r2, #5000	; 0x1388
 8002ef2:	4293      	cmp	r3, r2
 8002ef4:	d901      	bls.n	8002efa <HAL_RCC_OscConfig+0x59e>
        {
          return HAL_TIMEOUT;
 8002ef6:	2303      	movs	r3, #3
 8002ef8:	e0de      	b.n	80030b8 <HAL_RCC_OscConfig+0x75c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8002efa:	4b71      	ldr	r3, [pc, #452]	; (80030c0 <HAL_RCC_OscConfig+0x764>)
 8002efc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002efe:	f003 0302 	and.w	r3, r3, #2
 8002f02:	2b00      	cmp	r3, #0
 8002f04:	d0ee      	beq.n	8002ee4 <HAL_RCC_OscConfig+0x588>
 8002f06:	e014      	b.n	8002f32 <HAL_RCC_OscConfig+0x5d6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002f08:	f7fd fb4c 	bl	80005a4 <HAL_GetTick>
 8002f0c:	61f8      	str	r0, [r7, #28]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8002f0e:	e00a      	b.n	8002f26 <HAL_RCC_OscConfig+0x5ca>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002f10:	f7fd fb48 	bl	80005a4 <HAL_GetTick>
 8002f14:	4602      	mov	r2, r0
 8002f16:	69fb      	ldr	r3, [r7, #28]
 8002f18:	1ad3      	subs	r3, r2, r3
 8002f1a:	f241 3288 	movw	r2, #5000	; 0x1388
 8002f1e:	4293      	cmp	r3, r2
 8002f20:	d901      	bls.n	8002f26 <HAL_RCC_OscConfig+0x5ca>
        {
          return HAL_TIMEOUT;
 8002f22:	2303      	movs	r3, #3
 8002f24:	e0c8      	b.n	80030b8 <HAL_RCC_OscConfig+0x75c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8002f26:	4b66      	ldr	r3, [pc, #408]	; (80030c0 <HAL_RCC_OscConfig+0x764>)
 8002f28:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002f2a:	f003 0302 	and.w	r3, r3, #2
 8002f2e:	2b00      	cmp	r3, #0
 8002f30:	d1ee      	bne.n	8002f10 <HAL_RCC_OscConfig+0x5b4>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f36:	2b00      	cmp	r3, #0
 8002f38:	f000 80bd 	beq.w	80030b6 <HAL_RCC_OscConfig+0x75a>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8002f3c:	4b60      	ldr	r3, [pc, #384]	; (80030c0 <HAL_RCC_OscConfig+0x764>)
 8002f3e:	691b      	ldr	r3, [r3, #16]
 8002f40:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8002f44:	2b18      	cmp	r3, #24
 8002f46:	f000 80b4 	beq.w	80030b2 <HAL_RCC_OscConfig+0x756>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f4e:	2b02      	cmp	r3, #2
 8002f50:	f040 8095 	bne.w	800307e <HAL_RCC_OscConfig+0x722>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002f54:	4b5a      	ldr	r3, [pc, #360]	; (80030c0 <HAL_RCC_OscConfig+0x764>)
 8002f56:	681b      	ldr	r3, [r3, #0]
 8002f58:	4a59      	ldr	r2, [pc, #356]	; (80030c0 <HAL_RCC_OscConfig+0x764>)
 8002f5a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002f5e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002f60:	f7fd fb20 	bl	80005a4 <HAL_GetTick>
 8002f64:	61f8      	str	r0, [r7, #28]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8002f66:	e008      	b.n	8002f7a <HAL_RCC_OscConfig+0x61e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002f68:	f7fd fb1c 	bl	80005a4 <HAL_GetTick>
 8002f6c:	4602      	mov	r2, r0
 8002f6e:	69fb      	ldr	r3, [r7, #28]
 8002f70:	1ad3      	subs	r3, r2, r3
 8002f72:	2b02      	cmp	r3, #2
 8002f74:	d901      	bls.n	8002f7a <HAL_RCC_OscConfig+0x61e>
          {
            return HAL_TIMEOUT;
 8002f76:	2303      	movs	r3, #3
 8002f78:	e09e      	b.n	80030b8 <HAL_RCC_OscConfig+0x75c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8002f7a:	4b51      	ldr	r3, [pc, #324]	; (80030c0 <HAL_RCC_OscConfig+0x764>)
 8002f7c:	681b      	ldr	r3, [r3, #0]
 8002f7e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002f82:	2b00      	cmp	r3, #0
 8002f84:	d1f0      	bne.n	8002f68 <HAL_RCC_OscConfig+0x60c>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002f86:	4b4e      	ldr	r3, [pc, #312]	; (80030c0 <HAL_RCC_OscConfig+0x764>)
 8002f88:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002f8a:	4b4e      	ldr	r3, [pc, #312]	; (80030c4 <HAL_RCC_OscConfig+0x768>)
 8002f8c:	4013      	ands	r3, r2
 8002f8e:	687a      	ldr	r2, [r7, #4]
 8002f90:	6a91      	ldr	r1, [r2, #40]	; 0x28
 8002f92:	687a      	ldr	r2, [r7, #4]
 8002f94:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8002f96:	0112      	lsls	r2, r2, #4
 8002f98:	430a      	orrs	r2, r1
 8002f9a:	4949      	ldr	r1, [pc, #292]	; (80030c0 <HAL_RCC_OscConfig+0x764>)
 8002f9c:	4313      	orrs	r3, r2
 8002f9e:	628b      	str	r3, [r1, #40]	; 0x28
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002fa4:	3b01      	subs	r3, #1
 8002fa6:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002fae:	3b01      	subs	r3, #1
 8002fb0:	025b      	lsls	r3, r3, #9
 8002fb2:	b29b      	uxth	r3, r3
 8002fb4:	431a      	orrs	r2, r3
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002fba:	3b01      	subs	r3, #1
 8002fbc:	041b      	lsls	r3, r3, #16
 8002fbe:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8002fc2:	431a      	orrs	r2, r3
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002fc8:	3b01      	subs	r3, #1
 8002fca:	061b      	lsls	r3, r3, #24
 8002fcc:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8002fd0:	493b      	ldr	r1, [pc, #236]	; (80030c0 <HAL_RCC_OscConfig+0x764>)
 8002fd2:	4313      	orrs	r3, r2
 8002fd4:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

         /* Disable PLLFRACN . */
         __HAL_RCC_PLLFRACN_DISABLE();
 8002fd6:	4b3a      	ldr	r3, [pc, #232]	; (80030c0 <HAL_RCC_OscConfig+0x764>)
 8002fd8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002fda:	4a39      	ldr	r2, [pc, #228]	; (80030c0 <HAL_RCC_OscConfig+0x764>)
 8002fdc:	f023 0301 	bic.w	r3, r3, #1
 8002fe0:	62d3      	str	r3, [r2, #44]	; 0x2c

         /* Configure PLL  PLL1FRACN */
         __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8002fe2:	4b37      	ldr	r3, [pc, #220]	; (80030c0 <HAL_RCC_OscConfig+0x764>)
 8002fe4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002fe6:	4b38      	ldr	r3, [pc, #224]	; (80030c8 <HAL_RCC_OscConfig+0x76c>)
 8002fe8:	4013      	ands	r3, r2
 8002fea:	687a      	ldr	r2, [r7, #4]
 8002fec:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8002fee:	00d2      	lsls	r2, r2, #3
 8002ff0:	4933      	ldr	r1, [pc, #204]	; (80030c0 <HAL_RCC_OscConfig+0x764>)
 8002ff2:	4313      	orrs	r3, r2
 8002ff4:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8002ff6:	4b32      	ldr	r3, [pc, #200]	; (80030c0 <HAL_RCC_OscConfig+0x764>)
 8002ff8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002ffa:	f023 020c 	bic.w	r2, r3, #12
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003002:	492f      	ldr	r1, [pc, #188]	; (80030c0 <HAL_RCC_OscConfig+0x764>)
 8003004:	4313      	orrs	r3, r2
 8003006:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8003008:	4b2d      	ldr	r3, [pc, #180]	; (80030c0 <HAL_RCC_OscConfig+0x764>)
 800300a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800300c:	f023 0202 	bic.w	r2, r3, #2
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003014:	492a      	ldr	r1, [pc, #168]	; (80030c0 <HAL_RCC_OscConfig+0x764>)
 8003016:	4313      	orrs	r3, r2
 8003018:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 800301a:	4b29      	ldr	r3, [pc, #164]	; (80030c0 <HAL_RCC_OscConfig+0x764>)
 800301c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800301e:	4a28      	ldr	r2, [pc, #160]	; (80030c0 <HAL_RCC_OscConfig+0x764>)
 8003020:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003024:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003026:	4b26      	ldr	r3, [pc, #152]	; (80030c0 <HAL_RCC_OscConfig+0x764>)
 8003028:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800302a:	4a25      	ldr	r2, [pc, #148]	; (80030c0 <HAL_RCC_OscConfig+0x764>)
 800302c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003030:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8003032:	4b23      	ldr	r3, [pc, #140]	; (80030c0 <HAL_RCC_OscConfig+0x764>)
 8003034:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003036:	4a22      	ldr	r2, [pc, #136]	; (80030c0 <HAL_RCC_OscConfig+0x764>)
 8003038:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800303c:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
         __HAL_RCC_PLLFRACN_ENABLE();
 800303e:	4b20      	ldr	r3, [pc, #128]	; (80030c0 <HAL_RCC_OscConfig+0x764>)
 8003040:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003042:	4a1f      	ldr	r2, [pc, #124]	; (80030c0 <HAL_RCC_OscConfig+0x764>)
 8003044:	f043 0301 	orr.w	r3, r3, #1
 8003048:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800304a:	4b1d      	ldr	r3, [pc, #116]	; (80030c0 <HAL_RCC_OscConfig+0x764>)
 800304c:	681b      	ldr	r3, [r3, #0]
 800304e:	4a1c      	ldr	r2, [pc, #112]	; (80030c0 <HAL_RCC_OscConfig+0x764>)
 8003050:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003054:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003056:	f7fd faa5 	bl	80005a4 <HAL_GetTick>
 800305a:	61f8      	str	r0, [r7, #28]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800305c:	e008      	b.n	8003070 <HAL_RCC_OscConfig+0x714>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800305e:	f7fd faa1 	bl	80005a4 <HAL_GetTick>
 8003062:	4602      	mov	r2, r0
 8003064:	69fb      	ldr	r3, [r7, #28]
 8003066:	1ad3      	subs	r3, r2, r3
 8003068:	2b02      	cmp	r3, #2
 800306a:	d901      	bls.n	8003070 <HAL_RCC_OscConfig+0x714>
          {
            return HAL_TIMEOUT;
 800306c:	2303      	movs	r3, #3
 800306e:	e023      	b.n	80030b8 <HAL_RCC_OscConfig+0x75c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8003070:	4b13      	ldr	r3, [pc, #76]	; (80030c0 <HAL_RCC_OscConfig+0x764>)
 8003072:	681b      	ldr	r3, [r3, #0]
 8003074:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003078:	2b00      	cmp	r3, #0
 800307a:	d0f0      	beq.n	800305e <HAL_RCC_OscConfig+0x702>
 800307c:	e01b      	b.n	80030b6 <HAL_RCC_OscConfig+0x75a>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800307e:	4b10      	ldr	r3, [pc, #64]	; (80030c0 <HAL_RCC_OscConfig+0x764>)
 8003080:	681b      	ldr	r3, [r3, #0]
 8003082:	4a0f      	ldr	r2, [pc, #60]	; (80030c0 <HAL_RCC_OscConfig+0x764>)
 8003084:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003088:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800308a:	f7fd fa8b 	bl	80005a4 <HAL_GetTick>
 800308e:	61f8      	str	r0, [r7, #28]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8003090:	e008      	b.n	80030a4 <HAL_RCC_OscConfig+0x748>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003092:	f7fd fa87 	bl	80005a4 <HAL_GetTick>
 8003096:	4602      	mov	r2, r0
 8003098:	69fb      	ldr	r3, [r7, #28]
 800309a:	1ad3      	subs	r3, r2, r3
 800309c:	2b02      	cmp	r3, #2
 800309e:	d901      	bls.n	80030a4 <HAL_RCC_OscConfig+0x748>
          {
            return HAL_TIMEOUT;
 80030a0:	2303      	movs	r3, #3
 80030a2:	e009      	b.n	80030b8 <HAL_RCC_OscConfig+0x75c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80030a4:	4b06      	ldr	r3, [pc, #24]	; (80030c0 <HAL_RCC_OscConfig+0x764>)
 80030a6:	681b      	ldr	r3, [r3, #0]
 80030a8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80030ac:	2b00      	cmp	r3, #0
 80030ae:	d1f0      	bne.n	8003092 <HAL_RCC_OscConfig+0x736>
 80030b0:	e001      	b.n	80030b6 <HAL_RCC_OscConfig+0x75a>
        }
      }
    }
    else
    {
      return HAL_ERROR;
 80030b2:	2301      	movs	r3, #1
 80030b4:	e000      	b.n	80030b8 <HAL_RCC_OscConfig+0x75c>
    }
  }
  return HAL_OK;
 80030b6:	2300      	movs	r3, #0
}
 80030b8:	4618      	mov	r0, r3
 80030ba:	3728      	adds	r7, #40	; 0x28
 80030bc:	46bd      	mov	sp, r7
 80030be:	bd80      	pop	{r7, pc}
 80030c0:	58024400 	.word	0x58024400
 80030c4:	fffffc0c 	.word	0xfffffc0c
 80030c8:	ffff0007 	.word	0xffff0007

080030cc <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80030cc:	b580      	push	{r7, lr}
 80030ce:	b084      	sub	sp, #16
 80030d0:	af00      	add	r7, sp, #0
 80030d2:	6078      	str	r0, [r7, #4]
 80030d4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;

   /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	2b00      	cmp	r3, #0
 80030da:	d101      	bne.n	80030e0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80030dc:	2301      	movs	r3, #1
 80030de:	e18d      	b.n	80033fc <HAL_RCC_ClockConfig+0x330>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80030e0:	4b8a      	ldr	r3, [pc, #552]	; (800330c <HAL_RCC_ClockConfig+0x240>)
 80030e2:	681b      	ldr	r3, [r3, #0]
 80030e4:	f003 030f 	and.w	r3, r3, #15
 80030e8:	683a      	ldr	r2, [r7, #0]
 80030ea:	429a      	cmp	r2, r3
 80030ec:	d910      	bls.n	8003110 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80030ee:	4b87      	ldr	r3, [pc, #540]	; (800330c <HAL_RCC_ClockConfig+0x240>)
 80030f0:	681b      	ldr	r3, [r3, #0]
 80030f2:	f023 020f 	bic.w	r2, r3, #15
 80030f6:	4985      	ldr	r1, [pc, #532]	; (800330c <HAL_RCC_ClockConfig+0x240>)
 80030f8:	683b      	ldr	r3, [r7, #0]
 80030fa:	4313      	orrs	r3, r2
 80030fc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80030fe:	4b83      	ldr	r3, [pc, #524]	; (800330c <HAL_RCC_ClockConfig+0x240>)
 8003100:	681b      	ldr	r3, [r3, #0]
 8003102:	f003 030f 	and.w	r3, r3, #15
 8003106:	683a      	ldr	r2, [r7, #0]
 8003108:	429a      	cmp	r2, r3
 800310a:	d001      	beq.n	8003110 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 800310c:	2301      	movs	r3, #1
 800310e:	e175      	b.n	80033fc <HAL_RCC_ClockConfig+0x330>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	681b      	ldr	r3, [r3, #0]
 8003114:	f003 0304 	and.w	r3, r3, #4
 8003118:	2b00      	cmp	r3, #0
 800311a:	d010      	beq.n	800313e <HAL_RCC_ClockConfig+0x72>
  {
    if((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	691a      	ldr	r2, [r3, #16]
 8003120:	4b7b      	ldr	r3, [pc, #492]	; (8003310 <HAL_RCC_ClockConfig+0x244>)
 8003122:	699b      	ldr	r3, [r3, #24]
 8003124:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8003128:	429a      	cmp	r2, r3
 800312a:	d908      	bls.n	800313e <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 800312c:	4b78      	ldr	r3, [pc, #480]	; (8003310 <HAL_RCC_ClockConfig+0x244>)
 800312e:	699b      	ldr	r3, [r3, #24]
 8003130:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	691b      	ldr	r3, [r3, #16]
 8003138:	4975      	ldr	r1, [pc, #468]	; (8003310 <HAL_RCC_ClockConfig+0x244>)
 800313a:	4313      	orrs	r3, r2
 800313c:	618b      	str	r3, [r1, #24]
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	681b      	ldr	r3, [r3, #0]
 8003142:	f003 0308 	and.w	r3, r3, #8
 8003146:	2b00      	cmp	r3, #0
 8003148:	d010      	beq.n	800316c <HAL_RCC_ClockConfig+0xa0>
  {
    if((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	695a      	ldr	r2, [r3, #20]
 800314e:	4b70      	ldr	r3, [pc, #448]	; (8003310 <HAL_RCC_ClockConfig+0x244>)
 8003150:	69db      	ldr	r3, [r3, #28]
 8003152:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8003156:	429a      	cmp	r2, r3
 8003158:	d908      	bls.n	800316c <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800315a:	4b6d      	ldr	r3, [pc, #436]	; (8003310 <HAL_RCC_ClockConfig+0x244>)
 800315c:	69db      	ldr	r3, [r3, #28]
 800315e:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	695b      	ldr	r3, [r3, #20]
 8003166:	496a      	ldr	r1, [pc, #424]	; (8003310 <HAL_RCC_ClockConfig+0x244>)
 8003168:	4313      	orrs	r3, r2
 800316a:	61cb      	str	r3, [r1, #28]
    }
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	681b      	ldr	r3, [r3, #0]
 8003170:	f003 0310 	and.w	r3, r3, #16
 8003174:	2b00      	cmp	r3, #0
 8003176:	d010      	beq.n	800319a <HAL_RCC_ClockConfig+0xce>
  {
    if((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	699a      	ldr	r2, [r3, #24]
 800317c:	4b64      	ldr	r3, [pc, #400]	; (8003310 <HAL_RCC_ClockConfig+0x244>)
 800317e:	69db      	ldr	r3, [r3, #28]
 8003180:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8003184:	429a      	cmp	r2, r3
 8003186:	d908      	bls.n	800319a <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8003188:	4b61      	ldr	r3, [pc, #388]	; (8003310 <HAL_RCC_ClockConfig+0x244>)
 800318a:	69db      	ldr	r3, [r3, #28]
 800318c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	699b      	ldr	r3, [r3, #24]
 8003194:	495e      	ldr	r1, [pc, #376]	; (8003310 <HAL_RCC_ClockConfig+0x244>)
 8003196:	4313      	orrs	r3, r2
 8003198:	61cb      	str	r3, [r1, #28]
    }
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	681b      	ldr	r3, [r3, #0]
 800319e:	f003 0320 	and.w	r3, r3, #32
 80031a2:	2b00      	cmp	r3, #0
 80031a4:	d010      	beq.n	80031c8 <HAL_RCC_ClockConfig+0xfc>
  {
    if((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	69da      	ldr	r2, [r3, #28]
 80031aa:	4b59      	ldr	r3, [pc, #356]	; (8003310 <HAL_RCC_ClockConfig+0x244>)
 80031ac:	6a1b      	ldr	r3, [r3, #32]
 80031ae:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80031b2:	429a      	cmp	r2, r3
 80031b4:	d908      	bls.n	80031c8 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 80031b6:	4b56      	ldr	r3, [pc, #344]	; (8003310 <HAL_RCC_ClockConfig+0x244>)
 80031b8:	6a1b      	ldr	r3, [r3, #32]
 80031ba:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	69db      	ldr	r3, [r3, #28]
 80031c2:	4953      	ldr	r1, [pc, #332]	; (8003310 <HAL_RCC_ClockConfig+0x244>)
 80031c4:	4313      	orrs	r3, r2
 80031c6:	620b      	str	r3, [r1, #32]
    }
  }

   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	681b      	ldr	r3, [r3, #0]
 80031cc:	f003 0302 	and.w	r3, r3, #2
 80031d0:	2b00      	cmp	r3, #0
 80031d2:	d010      	beq.n	80031f6 <HAL_RCC_ClockConfig+0x12a>
  {
    if((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	68da      	ldr	r2, [r3, #12]
 80031d8:	4b4d      	ldr	r3, [pc, #308]	; (8003310 <HAL_RCC_ClockConfig+0x244>)
 80031da:	699b      	ldr	r3, [r3, #24]
 80031dc:	f003 030f 	and.w	r3, r3, #15
 80031e0:	429a      	cmp	r2, r3
 80031e2:	d908      	bls.n	80031f6 <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80031e4:	4b4a      	ldr	r3, [pc, #296]	; (8003310 <HAL_RCC_ClockConfig+0x244>)
 80031e6:	699b      	ldr	r3, [r3, #24]
 80031e8:	f023 020f 	bic.w	r2, r3, #15
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	68db      	ldr	r3, [r3, #12]
 80031f0:	4947      	ldr	r1, [pc, #284]	; (8003310 <HAL_RCC_ClockConfig+0x244>)
 80031f2:	4313      	orrs	r3, r2
 80031f4:	618b      	str	r3, [r1, #24]
    }
  }

    /*------------------------- SYSCLK Configuration -------------------------*/
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	681b      	ldr	r3, [r3, #0]
 80031fa:	f003 0301 	and.w	r3, r3, #1
 80031fe:	2b00      	cmp	r3, #0
 8003200:	d055      	beq.n	80032ae <HAL_RCC_ClockConfig+0x1e2>
    {
      assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
      assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8003202:	4b43      	ldr	r3, [pc, #268]	; (8003310 <HAL_RCC_ClockConfig+0x244>)
 8003204:	699b      	ldr	r3, [r3, #24]
 8003206:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	689b      	ldr	r3, [r3, #8]
 800320e:	4940      	ldr	r1, [pc, #256]	; (8003310 <HAL_RCC_ClockConfig+0x244>)
 8003210:	4313      	orrs	r3, r2
 8003212:	618b      	str	r3, [r1, #24]
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	685b      	ldr	r3, [r3, #4]
 8003218:	2b02      	cmp	r3, #2
 800321a:	d107      	bne.n	800322c <HAL_RCC_ClockConfig+0x160>
      {
        /* Check the HSE ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800321c:	4b3c      	ldr	r3, [pc, #240]	; (8003310 <HAL_RCC_ClockConfig+0x244>)
 800321e:	681b      	ldr	r3, [r3, #0]
 8003220:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003224:	2b00      	cmp	r3, #0
 8003226:	d121      	bne.n	800326c <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8003228:	2301      	movs	r3, #1
 800322a:	e0e7      	b.n	80033fc <HAL_RCC_ClockConfig+0x330>
        }
      }
      /* PLL is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	685b      	ldr	r3, [r3, #4]
 8003230:	2b03      	cmp	r3, #3
 8003232:	d107      	bne.n	8003244 <HAL_RCC_ClockConfig+0x178>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8003234:	4b36      	ldr	r3, [pc, #216]	; (8003310 <HAL_RCC_ClockConfig+0x244>)
 8003236:	681b      	ldr	r3, [r3, #0]
 8003238:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800323c:	2b00      	cmp	r3, #0
 800323e:	d115      	bne.n	800326c <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8003240:	2301      	movs	r3, #1
 8003242:	e0db      	b.n	80033fc <HAL_RCC_ClockConfig+0x330>
        }
      }
      /* CSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	685b      	ldr	r3, [r3, #4]
 8003248:	2b01      	cmp	r3, #1
 800324a:	d107      	bne.n	800325c <HAL_RCC_ClockConfig+0x190>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800324c:	4b30      	ldr	r3, [pc, #192]	; (8003310 <HAL_RCC_ClockConfig+0x244>)
 800324e:	681b      	ldr	r3, [r3, #0]
 8003250:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003254:	2b00      	cmp	r3, #0
 8003256:	d109      	bne.n	800326c <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8003258:	2301      	movs	r3, #1
 800325a:	e0cf      	b.n	80033fc <HAL_RCC_ClockConfig+0x330>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800325c:	4b2c      	ldr	r3, [pc, #176]	; (8003310 <HAL_RCC_ClockConfig+0x244>)
 800325e:	681b      	ldr	r3, [r3, #0]
 8003260:	f003 0304 	and.w	r3, r3, #4
 8003264:	2b00      	cmp	r3, #0
 8003266:	d101      	bne.n	800326c <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8003268:	2301      	movs	r3, #1
 800326a:	e0c7      	b.n	80033fc <HAL_RCC_ClockConfig+0x330>
        }
      }
      MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800326c:	4b28      	ldr	r3, [pc, #160]	; (8003310 <HAL_RCC_ClockConfig+0x244>)
 800326e:	691b      	ldr	r3, [r3, #16]
 8003270:	f023 0207 	bic.w	r2, r3, #7
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	685b      	ldr	r3, [r3, #4]
 8003278:	4925      	ldr	r1, [pc, #148]	; (8003310 <HAL_RCC_ClockConfig+0x244>)
 800327a:	4313      	orrs	r3, r2
 800327c:	610b      	str	r3, [r1, #16]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800327e:	f7fd f991 	bl	80005a4 <HAL_GetTick>
 8003282:	60f8      	str	r0, [r7, #12]

        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003284:	e00a      	b.n	800329c <HAL_RCC_ClockConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003286:	f7fd f98d 	bl	80005a4 <HAL_GetTick>
 800328a:	4602      	mov	r2, r0
 800328c:	68fb      	ldr	r3, [r7, #12]
 800328e:	1ad3      	subs	r3, r2, r3
 8003290:	f241 3288 	movw	r2, #5000	; 0x1388
 8003294:	4293      	cmp	r3, r2
 8003296:	d901      	bls.n	800329c <HAL_RCC_ClockConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 8003298:	2303      	movs	r3, #3
 800329a:	e0af      	b.n	80033fc <HAL_RCC_ClockConfig+0x330>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800329c:	4b1c      	ldr	r3, [pc, #112]	; (8003310 <HAL_RCC_ClockConfig+0x244>)
 800329e:	691b      	ldr	r3, [r3, #16]
 80032a0:	f003 0238 	and.w	r2, r3, #56	; 0x38
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	685b      	ldr	r3, [r3, #4]
 80032a8:	00db      	lsls	r3, r3, #3
 80032aa:	429a      	cmp	r2, r3
 80032ac:	d1eb      	bne.n	8003286 <HAL_RCC_ClockConfig+0x1ba>

    }

    /* Decreasing the BUS frequency divider */
   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	681b      	ldr	r3, [r3, #0]
 80032b2:	f003 0302 	and.w	r3, r3, #2
 80032b6:	2b00      	cmp	r3, #0
 80032b8:	d010      	beq.n	80032dc <HAL_RCC_ClockConfig+0x210>
  {
    if((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	68da      	ldr	r2, [r3, #12]
 80032be:	4b14      	ldr	r3, [pc, #80]	; (8003310 <HAL_RCC_ClockConfig+0x244>)
 80032c0:	699b      	ldr	r3, [r3, #24]
 80032c2:	f003 030f 	and.w	r3, r3, #15
 80032c6:	429a      	cmp	r2, r3
 80032c8:	d208      	bcs.n	80032dc <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80032ca:	4b11      	ldr	r3, [pc, #68]	; (8003310 <HAL_RCC_ClockConfig+0x244>)
 80032cc:	699b      	ldr	r3, [r3, #24]
 80032ce:	f023 020f 	bic.w	r2, r3, #15
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	68db      	ldr	r3, [r3, #12]
 80032d6:	490e      	ldr	r1, [pc, #56]	; (8003310 <HAL_RCC_ClockConfig+0x244>)
 80032d8:	4313      	orrs	r3, r2
 80032da:	618b      	str	r3, [r1, #24]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80032dc:	4b0b      	ldr	r3, [pc, #44]	; (800330c <HAL_RCC_ClockConfig+0x240>)
 80032de:	681b      	ldr	r3, [r3, #0]
 80032e0:	f003 030f 	and.w	r3, r3, #15
 80032e4:	683a      	ldr	r2, [r7, #0]
 80032e6:	429a      	cmp	r2, r3
 80032e8:	d214      	bcs.n	8003314 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80032ea:	4b08      	ldr	r3, [pc, #32]	; (800330c <HAL_RCC_ClockConfig+0x240>)
 80032ec:	681b      	ldr	r3, [r3, #0]
 80032ee:	f023 020f 	bic.w	r2, r3, #15
 80032f2:	4906      	ldr	r1, [pc, #24]	; (800330c <HAL_RCC_ClockConfig+0x240>)
 80032f4:	683b      	ldr	r3, [r7, #0]
 80032f6:	4313      	orrs	r3, r2
 80032f8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80032fa:	4b04      	ldr	r3, [pc, #16]	; (800330c <HAL_RCC_ClockConfig+0x240>)
 80032fc:	681b      	ldr	r3, [r3, #0]
 80032fe:	f003 030f 	and.w	r3, r3, #15
 8003302:	683a      	ldr	r2, [r7, #0]
 8003304:	429a      	cmp	r2, r3
 8003306:	d005      	beq.n	8003314 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8003308:	2301      	movs	r3, #1
 800330a:	e077      	b.n	80033fc <HAL_RCC_ClockConfig+0x330>
 800330c:	52002000 	.word	0x52002000
 8003310:	58024400 	.word	0x58024400
    }
 }

  /*-------------------------- D1PCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	681b      	ldr	r3, [r3, #0]
 8003318:	f003 0304 	and.w	r3, r3, #4
 800331c:	2b00      	cmp	r3, #0
 800331e:	d010      	beq.n	8003342 <HAL_RCC_ClockConfig+0x276>
 {
   if((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	691a      	ldr	r2, [r3, #16]
 8003324:	4b37      	ldr	r3, [pc, #220]	; (8003404 <HAL_RCC_ClockConfig+0x338>)
 8003326:	699b      	ldr	r3, [r3, #24]
 8003328:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800332c:	429a      	cmp	r2, r3
 800332e:	d208      	bcs.n	8003342 <HAL_RCC_ClockConfig+0x276>
   {
     assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
     MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8003330:	4b34      	ldr	r3, [pc, #208]	; (8003404 <HAL_RCC_ClockConfig+0x338>)
 8003332:	699b      	ldr	r3, [r3, #24]
 8003334:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	691b      	ldr	r3, [r3, #16]
 800333c:	4931      	ldr	r1, [pc, #196]	; (8003404 <HAL_RCC_ClockConfig+0x338>)
 800333e:	4313      	orrs	r3, r2
 8003340:	618b      	str	r3, [r1, #24]
   }
 }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	681b      	ldr	r3, [r3, #0]
 8003346:	f003 0308 	and.w	r3, r3, #8
 800334a:	2b00      	cmp	r3, #0
 800334c:	d010      	beq.n	8003370 <HAL_RCC_ClockConfig+0x2a4>
 {
   if((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	695a      	ldr	r2, [r3, #20]
 8003352:	4b2c      	ldr	r3, [pc, #176]	; (8003404 <HAL_RCC_ClockConfig+0x338>)
 8003354:	69db      	ldr	r3, [r3, #28]
 8003356:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800335a:	429a      	cmp	r2, r3
 800335c:	d208      	bcs.n	8003370 <HAL_RCC_ClockConfig+0x2a4>
   {
     assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800335e:	4b29      	ldr	r3, [pc, #164]	; (8003404 <HAL_RCC_ClockConfig+0x338>)
 8003360:	69db      	ldr	r3, [r3, #28]
 8003362:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	695b      	ldr	r3, [r3, #20]
 800336a:	4926      	ldr	r1, [pc, #152]	; (8003404 <HAL_RCC_ClockConfig+0x338>)
 800336c:	4313      	orrs	r3, r2
 800336e:	61cb      	str	r3, [r1, #28]
   }
 }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	681b      	ldr	r3, [r3, #0]
 8003374:	f003 0310 	and.w	r3, r3, #16
 8003378:	2b00      	cmp	r3, #0
 800337a:	d010      	beq.n	800339e <HAL_RCC_ClockConfig+0x2d2>
 {
   if((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	699a      	ldr	r2, [r3, #24]
 8003380:	4b20      	ldr	r3, [pc, #128]	; (8003404 <HAL_RCC_ClockConfig+0x338>)
 8003382:	69db      	ldr	r3, [r3, #28]
 8003384:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8003388:	429a      	cmp	r2, r3
 800338a:	d208      	bcs.n	800339e <HAL_RCC_ClockConfig+0x2d2>
   {
     assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 800338c:	4b1d      	ldr	r3, [pc, #116]	; (8003404 <HAL_RCC_ClockConfig+0x338>)
 800338e:	69db      	ldr	r3, [r3, #28]
 8003390:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	699b      	ldr	r3, [r3, #24]
 8003398:	491a      	ldr	r1, [pc, #104]	; (8003404 <HAL_RCC_ClockConfig+0x338>)
 800339a:	4313      	orrs	r3, r2
 800339c:	61cb      	str	r3, [r1, #28]
   }
 }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	681b      	ldr	r3, [r3, #0]
 80033a2:	f003 0320 	and.w	r3, r3, #32
 80033a6:	2b00      	cmp	r3, #0
 80033a8:	d010      	beq.n	80033cc <HAL_RCC_ClockConfig+0x300>
 {
   if((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	69da      	ldr	r2, [r3, #28]
 80033ae:	4b15      	ldr	r3, [pc, #84]	; (8003404 <HAL_RCC_ClockConfig+0x338>)
 80033b0:	6a1b      	ldr	r3, [r3, #32]
 80033b2:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80033b6:	429a      	cmp	r2, r3
 80033b8:	d208      	bcs.n	80033cc <HAL_RCC_ClockConfig+0x300>
   {
     assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
     MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 80033ba:	4b12      	ldr	r3, [pc, #72]	; (8003404 <HAL_RCC_ClockConfig+0x338>)
 80033bc:	6a1b      	ldr	r3, [r3, #32]
 80033be:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	69db      	ldr	r3, [r3, #28]
 80033c6:	490f      	ldr	r1, [pc, #60]	; (8003404 <HAL_RCC_ClockConfig+0x338>)
 80033c8:	4313      	orrs	r3, r2
 80033ca:	620b      	str	r3, [r1, #32]
   }
 }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 80033cc:	f000 f822 	bl	8003414 <HAL_RCC_GetSysClockFreq>
 80033d0:	4601      	mov	r1, r0
 80033d2:	4b0c      	ldr	r3, [pc, #48]	; (8003404 <HAL_RCC_ClockConfig+0x338>)
 80033d4:	699b      	ldr	r3, [r3, #24]
 80033d6:	0a1b      	lsrs	r3, r3, #8
 80033d8:	f003 030f 	and.w	r3, r3, #15
 80033dc:	4a0a      	ldr	r2, [pc, #40]	; (8003408 <HAL_RCC_ClockConfig+0x33c>)
 80033de:	5cd3      	ldrb	r3, [r2, r3]
 80033e0:	f003 031f 	and.w	r3, r3, #31
 80033e4:	fa21 f303 	lsr.w	r3, r1, r3
 80033e8:	4a08      	ldr	r2, [pc, #32]	; (800340c <HAL_RCC_ClockConfig+0x340>)
 80033ea:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick (uwTickPrio);
 80033ec:	4b08      	ldr	r3, [pc, #32]	; (8003410 <HAL_RCC_ClockConfig+0x344>)
 80033ee:	681b      	ldr	r3, [r3, #0]
 80033f0:	4618      	mov	r0, r3
 80033f2:	f7fd f88d 	bl	8000510 <HAL_InitTick>
 80033f6:	4603      	mov	r3, r0
 80033f8:	72fb      	strb	r3, [r7, #11]

  return halstatus;
 80033fa:	7afb      	ldrb	r3, [r7, #11]
}
 80033fc:	4618      	mov	r0, r3
 80033fe:	3710      	adds	r7, #16
 8003400:	46bd      	mov	sp, r7
 8003402:	bd80      	pop	{r7, pc}
 8003404:	58024400 	.word	0x58024400
 8003408:	08013220 	.word	0x08013220
 800340c:	24000024 	.word	0x24000024
 8003410:	24000000 	.word	0x24000000

08003414 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003414:	b480      	push	{r7}
 8003416:	b089      	sub	sp, #36	; 0x24
 8003418:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 800341a:	4baf      	ldr	r3, [pc, #700]	; (80036d8 <HAL_RCC_GetSysClockFreq+0x2c4>)
 800341c:	691b      	ldr	r3, [r3, #16]
 800341e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8003422:	2b18      	cmp	r3, #24
 8003424:	f200 814e 	bhi.w	80036c4 <HAL_RCC_GetSysClockFreq+0x2b0>
 8003428:	a201      	add	r2, pc, #4	; (adr r2, 8003430 <HAL_RCC_GetSysClockFreq+0x1c>)
 800342a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800342e:	bf00      	nop
 8003430:	08003495 	.word	0x08003495
 8003434:	080036c5 	.word	0x080036c5
 8003438:	080036c5 	.word	0x080036c5
 800343c:	080036c5 	.word	0x080036c5
 8003440:	080036c5 	.word	0x080036c5
 8003444:	080036c5 	.word	0x080036c5
 8003448:	080036c5 	.word	0x080036c5
 800344c:	080036c5 	.word	0x080036c5
 8003450:	080034bb 	.word	0x080034bb
 8003454:	080036c5 	.word	0x080036c5
 8003458:	080036c5 	.word	0x080036c5
 800345c:	080036c5 	.word	0x080036c5
 8003460:	080036c5 	.word	0x080036c5
 8003464:	080036c5 	.word	0x080036c5
 8003468:	080036c5 	.word	0x080036c5
 800346c:	080036c5 	.word	0x080036c5
 8003470:	080034c1 	.word	0x080034c1
 8003474:	080036c5 	.word	0x080036c5
 8003478:	080036c5 	.word	0x080036c5
 800347c:	080036c5 	.word	0x080036c5
 8003480:	080036c5 	.word	0x080036c5
 8003484:	080036c5 	.word	0x080036c5
 8003488:	080036c5 	.word	0x080036c5
 800348c:	080036c5 	.word	0x080036c5
 8003490:	080034c7 	.word	0x080034c7
  {
  case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

   if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8003494:	4b90      	ldr	r3, [pc, #576]	; (80036d8 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8003496:	681b      	ldr	r3, [r3, #0]
 8003498:	f003 0320 	and.w	r3, r3, #32
 800349c:	2b00      	cmp	r3, #0
 800349e:	d009      	beq.n	80034b4 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t) (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 80034a0:	4b8d      	ldr	r3, [pc, #564]	; (80036d8 <HAL_RCC_GetSysClockFreq+0x2c4>)
 80034a2:	681b      	ldr	r3, [r3, #0]
 80034a4:	08db      	lsrs	r3, r3, #3
 80034a6:	f003 0303 	and.w	r3, r3, #3
 80034aa:	4a8c      	ldr	r2, [pc, #560]	; (80036dc <HAL_RCC_GetSysClockFreq+0x2c8>)
 80034ac:	fa22 f303 	lsr.w	r3, r2, r3
 80034b0:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

    break;
 80034b2:	e10a      	b.n	80036ca <HAL_RCC_GetSysClockFreq+0x2b6>
        sysclockfreq = (uint32_t) HSI_VALUE;
 80034b4:	4b89      	ldr	r3, [pc, #548]	; (80036dc <HAL_RCC_GetSysClockFreq+0x2c8>)
 80034b6:	61bb      	str	r3, [r7, #24]
    break;
 80034b8:	e107      	b.n	80036ca <HAL_RCC_GetSysClockFreq+0x2b6>

  case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
    sysclockfreq = CSI_VALUE;
 80034ba:	4b89      	ldr	r3, [pc, #548]	; (80036e0 <HAL_RCC_GetSysClockFreq+0x2cc>)
 80034bc:	61bb      	str	r3, [r7, #24]
    break;
 80034be:	e104      	b.n	80036ca <HAL_RCC_GetSysClockFreq+0x2b6>

  case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    sysclockfreq = HSE_VALUE;
 80034c0:	4b88      	ldr	r3, [pc, #544]	; (80036e4 <HAL_RCC_GetSysClockFreq+0x2d0>)
 80034c2:	61bb      	str	r3, [r7, #24]
    break;
 80034c4:	e101      	b.n	80036ca <HAL_RCC_GetSysClockFreq+0x2b6>
  case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80034c6:	4b84      	ldr	r3, [pc, #528]	; (80036d8 <HAL_RCC_GetSysClockFreq+0x2c4>)
 80034c8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80034ca:	f003 0303 	and.w	r3, r3, #3
 80034ce:	617b      	str	r3, [r7, #20]
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 80034d0:	4b81      	ldr	r3, [pc, #516]	; (80036d8 <HAL_RCC_GetSysClockFreq+0x2c4>)
 80034d2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80034d4:	091b      	lsrs	r3, r3, #4
 80034d6:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80034da:	613b      	str	r3, [r7, #16]
    pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN)>>RCC_PLLCFGR_PLL1FRACEN_Pos);
 80034dc:	4b7e      	ldr	r3, [pc, #504]	; (80036d8 <HAL_RCC_GetSysClockFreq+0x2c4>)
 80034de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80034e0:	f003 0301 	and.w	r3, r3, #1
 80034e4:	60fb      	str	r3, [r7, #12]
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 80034e6:	4b7c      	ldr	r3, [pc, #496]	; (80036d8 <HAL_RCC_GetSysClockFreq+0x2c4>)
 80034e8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80034ea:	08db      	lsrs	r3, r3, #3
 80034ec:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80034f0:	68fa      	ldr	r2, [r7, #12]
 80034f2:	fb02 f303 	mul.w	r3, r2, r3
 80034f6:	ee07 3a90 	vmov	s15, r3
 80034fa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80034fe:	edc7 7a02 	vstr	s15, [r7, #8]

    if (pllm != 0U)
 8003502:	693b      	ldr	r3, [r7, #16]
 8003504:	2b00      	cmp	r3, #0
 8003506:	f000 80da 	beq.w	80036be <HAL_RCC_GetSysClockFreq+0x2aa>
    {
      switch (pllsource)
 800350a:	697b      	ldr	r3, [r7, #20]
 800350c:	2b01      	cmp	r3, #1
 800350e:	d05a      	beq.n	80035c6 <HAL_RCC_GetSysClockFreq+0x1b2>
 8003510:	2b01      	cmp	r3, #1
 8003512:	d302      	bcc.n	800351a <HAL_RCC_GetSysClockFreq+0x106>
 8003514:	2b02      	cmp	r3, #2
 8003516:	d078      	beq.n	800360a <HAL_RCC_GetSysClockFreq+0x1f6>
 8003518:	e099      	b.n	800364e <HAL_RCC_GetSysClockFreq+0x23a>
      {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

       if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800351a:	4b6f      	ldr	r3, [pc, #444]	; (80036d8 <HAL_RCC_GetSysClockFreq+0x2c4>)
 800351c:	681b      	ldr	r3, [r3, #0]
 800351e:	f003 0320 	and.w	r3, r3, #32
 8003522:	2b00      	cmp	r3, #0
 8003524:	d02d      	beq.n	8003582 <HAL_RCC_GetSysClockFreq+0x16e>
        {
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8003526:	4b6c      	ldr	r3, [pc, #432]	; (80036d8 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8003528:	681b      	ldr	r3, [r3, #0]
 800352a:	08db      	lsrs	r3, r3, #3
 800352c:	f003 0303 	and.w	r3, r3, #3
 8003530:	4a6a      	ldr	r2, [pc, #424]	; (80036dc <HAL_RCC_GetSysClockFreq+0x2c8>)
 8003532:	fa22 f303 	lsr.w	r3, r2, r3
 8003536:	607b      	str	r3, [r7, #4]
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	ee07 3a90 	vmov	s15, r3
 800353e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003542:	693b      	ldr	r3, [r7, #16]
 8003544:	ee07 3a90 	vmov	s15, r3
 8003548:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800354c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003550:	4b61      	ldr	r3, [pc, #388]	; (80036d8 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8003552:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003554:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003558:	ee07 3a90 	vmov	s15, r3
 800355c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003560:	ed97 6a02 	vldr	s12, [r7, #8]
 8003564:	eddf 5a60 	vldr	s11, [pc, #384]	; 80036e8 <HAL_RCC_GetSysClockFreq+0x2d4>
 8003568:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800356c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003570:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003574:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003578:	ee67 7a27 	vmul.f32	s15, s14, s15
 800357c:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
        }
        break;
 8003580:	e087      	b.n	8003692 <HAL_RCC_GetSysClockFreq+0x27e>
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8003582:	693b      	ldr	r3, [r7, #16]
 8003584:	ee07 3a90 	vmov	s15, r3
 8003588:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800358c:	eddf 6a57 	vldr	s13, [pc, #348]	; 80036ec <HAL_RCC_GetSysClockFreq+0x2d8>
 8003590:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003594:	4b50      	ldr	r3, [pc, #320]	; (80036d8 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8003596:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003598:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800359c:	ee07 3a90 	vmov	s15, r3
 80035a0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80035a4:	ed97 6a02 	vldr	s12, [r7, #8]
 80035a8:	eddf 5a4f 	vldr	s11, [pc, #316]	; 80036e8 <HAL_RCC_GetSysClockFreq+0x2d4>
 80035ac:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80035b0:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80035b4:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80035b8:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80035bc:	ee67 7a27 	vmul.f32	s15, s14, s15
 80035c0:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80035c4:	e065      	b.n	8003692 <HAL_RCC_GetSysClockFreq+0x27e>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80035c6:	693b      	ldr	r3, [r7, #16]
 80035c8:	ee07 3a90 	vmov	s15, r3
 80035cc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80035d0:	eddf 6a47 	vldr	s13, [pc, #284]	; 80036f0 <HAL_RCC_GetSysClockFreq+0x2dc>
 80035d4:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80035d8:	4b3f      	ldr	r3, [pc, #252]	; (80036d8 <HAL_RCC_GetSysClockFreq+0x2c4>)
 80035da:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80035dc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80035e0:	ee07 3a90 	vmov	s15, r3
 80035e4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80035e8:	ed97 6a02 	vldr	s12, [r7, #8]
 80035ec:	eddf 5a3e 	vldr	s11, [pc, #248]	; 80036e8 <HAL_RCC_GetSysClockFreq+0x2d4>
 80035f0:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80035f4:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80035f8:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80035fc:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003600:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003604:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8003608:	e043      	b.n	8003692 <HAL_RCC_GetSysClockFreq+0x27e>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800360a:	693b      	ldr	r3, [r7, #16]
 800360c:	ee07 3a90 	vmov	s15, r3
 8003610:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003614:	eddf 6a37 	vldr	s13, [pc, #220]	; 80036f4 <HAL_RCC_GetSysClockFreq+0x2e0>
 8003618:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800361c:	4b2e      	ldr	r3, [pc, #184]	; (80036d8 <HAL_RCC_GetSysClockFreq+0x2c4>)
 800361e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003620:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003624:	ee07 3a90 	vmov	s15, r3
 8003628:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800362c:	ed97 6a02 	vldr	s12, [r7, #8]
 8003630:	eddf 5a2d 	vldr	s11, [pc, #180]	; 80036e8 <HAL_RCC_GetSysClockFreq+0x2d4>
 8003634:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003638:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800363c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003640:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003644:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003648:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800364c:	e021      	b.n	8003692 <HAL_RCC_GetSysClockFreq+0x27e>

      default:
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800364e:	693b      	ldr	r3, [r7, #16]
 8003650:	ee07 3a90 	vmov	s15, r3
 8003654:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003658:	eddf 6a25 	vldr	s13, [pc, #148]	; 80036f0 <HAL_RCC_GetSysClockFreq+0x2dc>
 800365c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003660:	4b1d      	ldr	r3, [pc, #116]	; (80036d8 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8003662:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003664:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003668:	ee07 3a90 	vmov	s15, r3
 800366c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003670:	ed97 6a02 	vldr	s12, [r7, #8]
 8003674:	eddf 5a1c 	vldr	s11, [pc, #112]	; 80036e8 <HAL_RCC_GetSysClockFreq+0x2d4>
 8003678:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800367c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003680:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003684:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003688:	ee67 7a27 	vmul.f32	s15, s14, s15
 800368c:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8003690:	bf00      	nop
      }
      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9) + 1U ) ;
 8003692:	4b11      	ldr	r3, [pc, #68]	; (80036d8 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8003694:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003696:	0a5b      	lsrs	r3, r3, #9
 8003698:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800369c:	3301      	adds	r3, #1
 800369e:	603b      	str	r3, [r7, #0]
      sysclockfreq =  (uint32_t)(float_t)(pllvco/(float_t)pllp);
 80036a0:	683b      	ldr	r3, [r7, #0]
 80036a2:	ee07 3a90 	vmov	s15, r3
 80036a6:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80036aa:	edd7 6a07 	vldr	s13, [r7, #28]
 80036ae:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80036b2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80036b6:	ee17 3a90 	vmov	r3, s15
 80036ba:	61bb      	str	r3, [r7, #24]
    }
    else
    {
      sysclockfreq = 0U;
    }
    break;
 80036bc:	e005      	b.n	80036ca <HAL_RCC_GetSysClockFreq+0x2b6>
      sysclockfreq = 0U;
 80036be:	2300      	movs	r3, #0
 80036c0:	61bb      	str	r3, [r7, #24]
    break;
 80036c2:	e002      	b.n	80036ca <HAL_RCC_GetSysClockFreq+0x2b6>

  default:
    sysclockfreq = CSI_VALUE;
 80036c4:	4b06      	ldr	r3, [pc, #24]	; (80036e0 <HAL_RCC_GetSysClockFreq+0x2cc>)
 80036c6:	61bb      	str	r3, [r7, #24]
    break;
 80036c8:	bf00      	nop
  }

  return sysclockfreq;
 80036ca:	69bb      	ldr	r3, [r7, #24]
}
 80036cc:	4618      	mov	r0, r3
 80036ce:	3724      	adds	r7, #36	; 0x24
 80036d0:	46bd      	mov	sp, r7
 80036d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036d6:	4770      	bx	lr
 80036d8:	58024400 	.word	0x58024400
 80036dc:	03d09000 	.word	0x03d09000
 80036e0:	003d0900 	.word	0x003d0900
 80036e4:	017d7840 	.word	0x017d7840
 80036e8:	46000000 	.word	0x46000000
 80036ec:	4c742400 	.word	0x4c742400
 80036f0:	4a742400 	.word	0x4a742400
 80036f4:	4bbebc20 	.word	0x4bbebc20

080036f8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80036f8:	b580      	push	{r7, lr}
 80036fa:	af00      	add	r7, sp, #0
  SystemD2Clock = (HAL_RCCEx_GetD1SysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80036fc:	f000 f818 	bl	8003730 <HAL_RCCEx_GetD1SysClockFreq>
 8003700:	4601      	mov	r1, r0
 8003702:	4b08      	ldr	r3, [pc, #32]	; (8003724 <HAL_RCC_GetHCLKFreq+0x2c>)
 8003704:	699b      	ldr	r3, [r3, #24]
 8003706:	f003 030f 	and.w	r3, r3, #15
 800370a:	4a07      	ldr	r2, [pc, #28]	; (8003728 <HAL_RCC_GetHCLKFreq+0x30>)
 800370c:	5cd3      	ldrb	r3, [r2, r3]
 800370e:	f003 031f 	and.w	r3, r3, #31
 8003712:	fa21 f303 	lsr.w	r3, r1, r3
 8003716:	4a05      	ldr	r2, [pc, #20]	; (800372c <HAL_RCC_GetHCLKFreq+0x34>)
 8003718:	6013      	str	r3, [r2, #0]
  return SystemD2Clock;
 800371a:	4b04      	ldr	r3, [pc, #16]	; (800372c <HAL_RCC_GetHCLKFreq+0x34>)
 800371c:	681b      	ldr	r3, [r3, #0]
}
 800371e:	4618      	mov	r0, r3
 8003720:	bd80      	pop	{r7, pc}
 8003722:	bf00      	nop
 8003724:	58024400 	.word	0x58024400
 8003728:	08013220 	.word	0x08013220
 800372c:	24000028 	.word	0x24000028

08003730 <HAL_RCCEx_GetD1SysClockFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCCEx_GetD1SysClockFreq(void)
{
 8003730:	b580      	push	{r7, lr}
 8003732:	af00      	add	r7, sp, #0
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8003734:	f7ff fe6e 	bl	8003414 <HAL_RCC_GetSysClockFreq>
 8003738:	4601      	mov	r1, r0
 800373a:	4b08      	ldr	r3, [pc, #32]	; (800375c <HAL_RCCEx_GetD1SysClockFreq+0x2c>)
 800373c:	699b      	ldr	r3, [r3, #24]
 800373e:	0a1b      	lsrs	r3, r3, #8
 8003740:	f003 030f 	and.w	r3, r3, #15
 8003744:	4a06      	ldr	r2, [pc, #24]	; (8003760 <HAL_RCCEx_GetD1SysClockFreq+0x30>)
 8003746:	5cd3      	ldrb	r3, [r2, r3]
 8003748:	f003 031f 	and.w	r3, r3, #31
 800374c:	fa21 f303 	lsr.w	r3, r1, r3
 8003750:	4a04      	ldr	r2, [pc, #16]	; (8003764 <HAL_RCCEx_GetD1SysClockFreq+0x34>)
 8003752:	6013      	str	r3, [r2, #0]
  return SystemCoreClock;
 8003754:	4b03      	ldr	r3, [pc, #12]	; (8003764 <HAL_RCCEx_GetD1SysClockFreq+0x34>)
 8003756:	681b      	ldr	r3, [r3, #0]
}
 8003758:	4618      	mov	r0, r3
 800375a:	bd80      	pop	{r7, pc}
 800375c:	58024400 	.word	0x58024400
 8003760:	08013220 	.word	0x08013220
 8003764:	24000024 	.word	0x24000024

08003768 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 8003768:	b480      	push	{r7}
 800376a:	b085      	sub	sp, #20
 800376c:	af00      	add	r7, sp, #0
 800376e:	4603      	mov	r3, r0
 8003770:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 8003772:	2300      	movs	r3, #0
 8003774:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 8003776:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800377a:	2b84      	cmp	r3, #132	; 0x84
 800377c:	d005      	beq.n	800378a <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 800377e:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8003782:	68fb      	ldr	r3, [r7, #12]
 8003784:	4413      	add	r3, r2
 8003786:	3303      	adds	r3, #3
 8003788:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 800378a:	68fb      	ldr	r3, [r7, #12]
}
 800378c:	4618      	mov	r0, r3
 800378e:	3714      	adds	r7, #20
 8003790:	46bd      	mov	sp, r7
 8003792:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003796:	4770      	bx	lr

08003798 <inHandlerMode>:
#endif


/* Determine whether we are in thread mode or handler mode. */
static int inHandlerMode (void)
{
 8003798:	b480      	push	{r7}
 800379a:	b083      	sub	sp, #12
 800379c:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800379e:	f3ef 8305 	mrs	r3, IPSR
 80037a2:	607b      	str	r3, [r7, #4]
  return(result);
 80037a4:	687b      	ldr	r3, [r7, #4]
  return __get_IPSR() != 0;
 80037a6:	2b00      	cmp	r3, #0
 80037a8:	bf14      	ite	ne
 80037aa:	2301      	movne	r3, #1
 80037ac:	2300      	moveq	r3, #0
 80037ae:	b2db      	uxtb	r3, r3
}
 80037b0:	4618      	mov	r0, r3
 80037b2:	370c      	adds	r7, #12
 80037b4:	46bd      	mov	sp, r7
 80037b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037ba:	4770      	bx	lr

080037bc <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 80037bc:	b580      	push	{r7, lr}
 80037be:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 80037c0:	f001 faea 	bl	8004d98 <vTaskStartScheduler>
  
  return osOK;
 80037c4:	2300      	movs	r3, #0
}
 80037c6:	4618      	mov	r0, r3
 80037c8:	bd80      	pop	{r7, pc}

080037ca <osKernelSysTick>:
* @param  None
* @retval None
* @note   MUST REMAIN UNCHANGED: \b osKernelSysTick shall be consistent in every CMSIS-RTOS.
*/
uint32_t osKernelSysTick(void)
{
 80037ca:	b580      	push	{r7, lr}
 80037cc:	af00      	add	r7, sp, #0
  if (inHandlerMode()) {
 80037ce:	f7ff ffe3 	bl	8003798 <inHandlerMode>
 80037d2:	4603      	mov	r3, r0
 80037d4:	2b00      	cmp	r3, #0
 80037d6:	d003      	beq.n	80037e0 <osKernelSysTick+0x16>
    return xTaskGetTickCountFromISR();
 80037d8:	f001 fbde 	bl	8004f98 <xTaskGetTickCountFromISR>
 80037dc:	4603      	mov	r3, r0
 80037de:	e002      	b.n	80037e6 <osKernelSysTick+0x1c>
  }
  else {
    return xTaskGetTickCount();
 80037e0:	f001 fbca 	bl	8004f78 <xTaskGetTickCount>
 80037e4:	4603      	mov	r3, r0
  }
}
 80037e6:	4618      	mov	r0, r3
 80037e8:	bd80      	pop	{r7, pc}

080037ea <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 80037ea:	b5f0      	push	{r4, r5, r6, r7, lr}
 80037ec:	b087      	sub	sp, #28
 80037ee:	af02      	add	r7, sp, #8
 80037f0:	6078      	str	r0, [r7, #4]
 80037f2:	6039      	str	r1, [r7, #0]

    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
#else
  if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	685c      	ldr	r4, [r3, #4]
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	681d      	ldr	r5, [r3, #0]
                   thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	691b      	ldr	r3, [r3, #16]
  if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8003800:	b29e      	uxth	r6, r3
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8003808:	4618      	mov	r0, r3
 800380a:	f7ff ffad 	bl	8003768 <makeFreeRtosPriority>
 800380e:	4602      	mov	r2, r0
 8003810:	f107 030c 	add.w	r3, r7, #12
 8003814:	9301      	str	r3, [sp, #4]
 8003816:	9200      	str	r2, [sp, #0]
 8003818:	683b      	ldr	r3, [r7, #0]
 800381a:	4632      	mov	r2, r6
 800381c:	4629      	mov	r1, r5
 800381e:	4620      	mov	r0, r4
 8003820:	f001 f95d 	bl	8004ade <xTaskCreate>
 8003824:	4603      	mov	r3, r0
 8003826:	2b01      	cmp	r3, #1
 8003828:	d001      	beq.n	800382e <osThreadCreate+0x44>
                   &handle) != pdPASS)  {
    return NULL;
 800382a:	2300      	movs	r3, #0
 800382c:	e000      	b.n	8003830 <osThreadCreate+0x46>
  }     
#endif
  
  return handle;
 800382e:	68fb      	ldr	r3, [r7, #12]
}
 8003830:	4618      	mov	r0, r3
 8003832:	3714      	adds	r7, #20
 8003834:	46bd      	mov	sp, r7
 8003836:	bdf0      	pop	{r4, r5, r6, r7, pc}

08003838 <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 8003838:	b580      	push	{r7, lr}
 800383a:	b084      	sub	sp, #16
 800383c:	af00      	add	r7, sp, #0
 800383e:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 8003844:	68fb      	ldr	r3, [r7, #12]
 8003846:	2b00      	cmp	r3, #0
 8003848:	d001      	beq.n	800384e <osDelay+0x16>
 800384a:	68fb      	ldr	r3, [r7, #12]
 800384c:	e000      	b.n	8003850 <osDelay+0x18>
 800384e:	2301      	movs	r3, #1
 8003850:	4618      	mov	r0, r3
 8003852:	f001 fa6d 	bl	8004d30 <vTaskDelay>
  
  return osOK;
 8003856:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 8003858:	4618      	mov	r0, r3
 800385a:	3710      	adds	r7, #16
 800385c:	46bd      	mov	sp, r7
 800385e:	bd80      	pop	{r7, pc}

08003860 <osMutexCreate>:
* @param  mutex_def     mutex definition referenced with \ref osMutex.
* @retval  mutex ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osMutexCreate shall be consistent in every CMSIS-RTOS.
*/
osMutexId osMutexCreate (const osMutexDef_t *mutex_def)
{
 8003860:	b580      	push	{r7, lr}
 8003862:	b082      	sub	sp, #8
 8003864:	af00      	add	r7, sp, #0
 8003866:	6078      	str	r0, [r7, #4]
    return xSemaphoreCreateMutex(); 
  }
#elif ( configSUPPORT_STATIC_ALLOCATION == 1 )
  return xSemaphoreCreateMutexStatic( mutex_def->controlblock );
#else  
    return xSemaphoreCreateMutex(); 
 8003868:	2001      	movs	r0, #1
 800386a:	f000 fb7f 	bl	8003f6c <xQueueCreateMutex>
 800386e:	4603      	mov	r3, r0
#endif
#else
  return NULL;
#endif
}
 8003870:	4618      	mov	r0, r3
 8003872:	3708      	adds	r7, #8
 8003874:	46bd      	mov	sp, r7
 8003876:	bd80      	pop	{r7, pc}

08003878 <osMutexWait>:
* @param millisec      timeout value or 0 in case of no time-out.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMutexWait shall be consistent in every CMSIS-RTOS.
*/
osStatus osMutexWait (osMutexId mutex_id, uint32_t millisec)
{
 8003878:	b580      	push	{r7, lr}
 800387a:	b084      	sub	sp, #16
 800387c:	af00      	add	r7, sp, #0
 800387e:	6078      	str	r0, [r7, #4]
 8003880:	6039      	str	r1, [r7, #0]
  TickType_t ticks;
  portBASE_TYPE taskWoken = pdFALSE;  
 8003882:	2300      	movs	r3, #0
 8003884:	60bb      	str	r3, [r7, #8]
  
  
  if (mutex_id == NULL) {
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	2b00      	cmp	r3, #0
 800388a:	d101      	bne.n	8003890 <osMutexWait+0x18>
    return osErrorParameter;
 800388c:	2380      	movs	r3, #128	; 0x80
 800388e:	e03a      	b.n	8003906 <osMutexWait+0x8e>
  }
  
  ticks = 0;
 8003890:	2300      	movs	r3, #0
 8003892:	60fb      	str	r3, [r7, #12]
  if (millisec == osWaitForever) {
 8003894:	683b      	ldr	r3, [r7, #0]
 8003896:	f1b3 3fff 	cmp.w	r3, #4294967295
 800389a:	d103      	bne.n	80038a4 <osMutexWait+0x2c>
    ticks = portMAX_DELAY;
 800389c:	f04f 33ff 	mov.w	r3, #4294967295
 80038a0:	60fb      	str	r3, [r7, #12]
 80038a2:	e009      	b.n	80038b8 <osMutexWait+0x40>
  }
  else if (millisec != 0) {
 80038a4:	683b      	ldr	r3, [r7, #0]
 80038a6:	2b00      	cmp	r3, #0
 80038a8:	d006      	beq.n	80038b8 <osMutexWait+0x40>
    ticks = millisec / portTICK_PERIOD_MS;
 80038aa:	683b      	ldr	r3, [r7, #0]
 80038ac:	60fb      	str	r3, [r7, #12]
    if (ticks == 0) {
 80038ae:	68fb      	ldr	r3, [r7, #12]
 80038b0:	2b00      	cmp	r3, #0
 80038b2:	d101      	bne.n	80038b8 <osMutexWait+0x40>
      ticks = 1;
 80038b4:	2301      	movs	r3, #1
 80038b6:	60fb      	str	r3, [r7, #12]
    }
  }
  
  if (inHandlerMode()) {
 80038b8:	f7ff ff6e 	bl	8003798 <inHandlerMode>
 80038bc:	4603      	mov	r3, r0
 80038be:	2b00      	cmp	r3, #0
 80038c0:	d017      	beq.n	80038f2 <osMutexWait+0x7a>
    if (xSemaphoreTakeFromISR(mutex_id, &taskWoken) != pdTRUE) {
 80038c2:	f107 0308 	add.w	r3, r7, #8
 80038c6:	461a      	mov	r2, r3
 80038c8:	2100      	movs	r1, #0
 80038ca:	6878      	ldr	r0, [r7, #4]
 80038cc:	f000 ff62 	bl	8004794 <xQueueReceiveFromISR>
 80038d0:	4603      	mov	r3, r0
 80038d2:	2b01      	cmp	r3, #1
 80038d4:	d001      	beq.n	80038da <osMutexWait+0x62>
      return osErrorOS;
 80038d6:	23ff      	movs	r3, #255	; 0xff
 80038d8:	e015      	b.n	8003906 <osMutexWait+0x8e>
    }
	portEND_SWITCHING_ISR(taskWoken);
 80038da:	68bb      	ldr	r3, [r7, #8]
 80038dc:	2b00      	cmp	r3, #0
 80038de:	d011      	beq.n	8003904 <osMutexWait+0x8c>
 80038e0:	4b0b      	ldr	r3, [pc, #44]	; (8003910 <osMutexWait+0x98>)
 80038e2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80038e6:	601a      	str	r2, [r3, #0]
 80038e8:	f3bf 8f4f 	dsb	sy
 80038ec:	f3bf 8f6f 	isb	sy
 80038f0:	e008      	b.n	8003904 <osMutexWait+0x8c>
  } 
  else if (xSemaphoreTake(mutex_id, ticks) != pdTRUE) {
 80038f2:	68f9      	ldr	r1, [r7, #12]
 80038f4:	6878      	ldr	r0, [r7, #4]
 80038f6:	f000 fe45 	bl	8004584 <xQueueSemaphoreTake>
 80038fa:	4603      	mov	r3, r0
 80038fc:	2b01      	cmp	r3, #1
 80038fe:	d001      	beq.n	8003904 <osMutexWait+0x8c>
    return osErrorOS;
 8003900:	23ff      	movs	r3, #255	; 0xff
 8003902:	e000      	b.n	8003906 <osMutexWait+0x8e>
  }
  
  return osOK;
 8003904:	2300      	movs	r3, #0
}
 8003906:	4618      	mov	r0, r3
 8003908:	3710      	adds	r7, #16
 800390a:	46bd      	mov	sp, r7
 800390c:	bd80      	pop	{r7, pc}
 800390e:	bf00      	nop
 8003910:	e000ed04 	.word	0xe000ed04

08003914 <osMutexRelease>:
* @param mutex_id      mutex ID obtained by \ref osMutexCreate.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMutexRelease shall be consistent in every CMSIS-RTOS.
*/
osStatus osMutexRelease (osMutexId mutex_id)
{
 8003914:	b580      	push	{r7, lr}
 8003916:	b084      	sub	sp, #16
 8003918:	af00      	add	r7, sp, #0
 800391a:	6078      	str	r0, [r7, #4]
  osStatus result = osOK;
 800391c:	2300      	movs	r3, #0
 800391e:	60fb      	str	r3, [r7, #12]
  portBASE_TYPE taskWoken = pdFALSE;
 8003920:	2300      	movs	r3, #0
 8003922:	60bb      	str	r3, [r7, #8]
  
  if (inHandlerMode()) {
 8003924:	f7ff ff38 	bl	8003798 <inHandlerMode>
 8003928:	4603      	mov	r3, r0
 800392a:	2b00      	cmp	r3, #0
 800392c:	d016      	beq.n	800395c <osMutexRelease+0x48>
    if (xSemaphoreGiveFromISR(mutex_id, &taskWoken) != pdTRUE) {
 800392e:	f107 0308 	add.w	r3, r7, #8
 8003932:	4619      	mov	r1, r3
 8003934:	6878      	ldr	r0, [r7, #4]
 8003936:	f000 fcbf 	bl	80042b8 <xQueueGiveFromISR>
 800393a:	4603      	mov	r3, r0
 800393c:	2b01      	cmp	r3, #1
 800393e:	d001      	beq.n	8003944 <osMutexRelease+0x30>
      return osErrorOS;
 8003940:	23ff      	movs	r3, #255	; 0xff
 8003942:	e017      	b.n	8003974 <osMutexRelease+0x60>
    }
    portEND_SWITCHING_ISR(taskWoken);
 8003944:	68bb      	ldr	r3, [r7, #8]
 8003946:	2b00      	cmp	r3, #0
 8003948:	d013      	beq.n	8003972 <osMutexRelease+0x5e>
 800394a:	4b0c      	ldr	r3, [pc, #48]	; (800397c <osMutexRelease+0x68>)
 800394c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003950:	601a      	str	r2, [r3, #0]
 8003952:	f3bf 8f4f 	dsb	sy
 8003956:	f3bf 8f6f 	isb	sy
 800395a:	e00a      	b.n	8003972 <osMutexRelease+0x5e>
  }
  else if (xSemaphoreGive(mutex_id) != pdTRUE) 
 800395c:	2300      	movs	r3, #0
 800395e:	2200      	movs	r2, #0
 8003960:	2100      	movs	r1, #0
 8003962:	6878      	ldr	r0, [r7, #4]
 8003964:	f000 fb1a 	bl	8003f9c <xQueueGenericSend>
 8003968:	4603      	mov	r3, r0
 800396a:	2b01      	cmp	r3, #1
 800396c:	d001      	beq.n	8003972 <osMutexRelease+0x5e>
  {
    result = osErrorOS;
 800396e:	23ff      	movs	r3, #255	; 0xff
 8003970:	60fb      	str	r3, [r7, #12]
  }
  return result;
 8003972:	68fb      	ldr	r3, [r7, #12]
}
 8003974:	4618      	mov	r0, r3
 8003976:	3710      	adds	r7, #16
 8003978:	46bd      	mov	sp, r7
 800397a:	bd80      	pop	{r7, pc}
 800397c:	e000ed04 	.word	0xe000ed04

08003980 <osSemaphoreCreate>:
* @param count         number of available resources.
* @retval  semaphore ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreCreate shall be consistent in every CMSIS-RTOS.
*/
osSemaphoreId osSemaphoreCreate (const osSemaphoreDef_t *semaphore_def, int32_t count)
{ 
 8003980:	b580      	push	{r7, lr}
 8003982:	b084      	sub	sp, #16
 8003984:	af00      	add	r7, sp, #0
 8003986:	6078      	str	r0, [r7, #4]
 8003988:	6039      	str	r1, [r7, #0]
#endif    
  }
#else  // configSUPPORT_STATIC_ALLOCATION == 0  && configSUPPORT_DYNAMIC_ALLOCATION == 1
  osSemaphoreId sema;
 
  if (count == 1) {
 800398a:	683b      	ldr	r3, [r7, #0]
 800398c:	2b01      	cmp	r3, #1
 800398e:	d110      	bne.n	80039b2 <osSemaphoreCreate+0x32>
    vSemaphoreCreateBinary(sema);
 8003990:	2203      	movs	r2, #3
 8003992:	2100      	movs	r1, #0
 8003994:	2001      	movs	r0, #1
 8003996:	f000 fa77 	bl	8003e88 <xQueueGenericCreate>
 800399a:	60f8      	str	r0, [r7, #12]
 800399c:	68fb      	ldr	r3, [r7, #12]
 800399e:	2b00      	cmp	r3, #0
 80039a0:	d005      	beq.n	80039ae <osSemaphoreCreate+0x2e>
 80039a2:	2300      	movs	r3, #0
 80039a4:	2200      	movs	r2, #0
 80039a6:	2100      	movs	r1, #0
 80039a8:	68f8      	ldr	r0, [r7, #12]
 80039aa:	f000 faf7 	bl	8003f9c <xQueueGenericSend>
    return sema;
 80039ae:	68fb      	ldr	r3, [r7, #12]
 80039b0:	e000      	b.n	80039b4 <osSemaphoreCreate+0x34>
  }
  else {
#if (configUSE_COUNTING_SEMAPHORES == 1 )	
    return xSemaphoreCreateCounting(count, count);
#else
    return NULL;
 80039b2:	2300      	movs	r3, #0
#endif
  }
#endif
}
 80039b4:	4618      	mov	r0, r3
 80039b6:	3710      	adds	r7, #16
 80039b8:	46bd      	mov	sp, r7
 80039ba:	bd80      	pop	{r7, pc}

080039bc <osSemaphoreWait>:
* @param  millisec      timeout value or 0 in case of no time-out.
* @retval  number of available tokens, or -1 in case of incorrect parameters.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreWait shall be consistent in every CMSIS-RTOS.
*/
int32_t osSemaphoreWait (osSemaphoreId semaphore_id, uint32_t millisec)
{
 80039bc:	b580      	push	{r7, lr}
 80039be:	b084      	sub	sp, #16
 80039c0:	af00      	add	r7, sp, #0
 80039c2:	6078      	str	r0, [r7, #4]
 80039c4:	6039      	str	r1, [r7, #0]
  TickType_t ticks;
  portBASE_TYPE taskWoken = pdFALSE;  
 80039c6:	2300      	movs	r3, #0
 80039c8:	60bb      	str	r3, [r7, #8]
  
  
  if (semaphore_id == NULL) {
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	2b00      	cmp	r3, #0
 80039ce:	d101      	bne.n	80039d4 <osSemaphoreWait+0x18>
    return osErrorParameter;
 80039d0:	2380      	movs	r3, #128	; 0x80
 80039d2:	e03a      	b.n	8003a4a <osSemaphoreWait+0x8e>
  }
  
  ticks = 0;
 80039d4:	2300      	movs	r3, #0
 80039d6:	60fb      	str	r3, [r7, #12]
  if (millisec == osWaitForever) {
 80039d8:	683b      	ldr	r3, [r7, #0]
 80039da:	f1b3 3fff 	cmp.w	r3, #4294967295
 80039de:	d103      	bne.n	80039e8 <osSemaphoreWait+0x2c>
    ticks = portMAX_DELAY;
 80039e0:	f04f 33ff 	mov.w	r3, #4294967295
 80039e4:	60fb      	str	r3, [r7, #12]
 80039e6:	e009      	b.n	80039fc <osSemaphoreWait+0x40>
  }
  else if (millisec != 0) {
 80039e8:	683b      	ldr	r3, [r7, #0]
 80039ea:	2b00      	cmp	r3, #0
 80039ec:	d006      	beq.n	80039fc <osSemaphoreWait+0x40>
    ticks = millisec / portTICK_PERIOD_MS;
 80039ee:	683b      	ldr	r3, [r7, #0]
 80039f0:	60fb      	str	r3, [r7, #12]
    if (ticks == 0) {
 80039f2:	68fb      	ldr	r3, [r7, #12]
 80039f4:	2b00      	cmp	r3, #0
 80039f6:	d101      	bne.n	80039fc <osSemaphoreWait+0x40>
      ticks = 1;
 80039f8:	2301      	movs	r3, #1
 80039fa:	60fb      	str	r3, [r7, #12]
    }
  }
  
  if (inHandlerMode()) {
 80039fc:	f7ff fecc 	bl	8003798 <inHandlerMode>
 8003a00:	4603      	mov	r3, r0
 8003a02:	2b00      	cmp	r3, #0
 8003a04:	d017      	beq.n	8003a36 <osSemaphoreWait+0x7a>
    if (xSemaphoreTakeFromISR(semaphore_id, &taskWoken) != pdTRUE) {
 8003a06:	f107 0308 	add.w	r3, r7, #8
 8003a0a:	461a      	mov	r2, r3
 8003a0c:	2100      	movs	r1, #0
 8003a0e:	6878      	ldr	r0, [r7, #4]
 8003a10:	f000 fec0 	bl	8004794 <xQueueReceiveFromISR>
 8003a14:	4603      	mov	r3, r0
 8003a16:	2b01      	cmp	r3, #1
 8003a18:	d001      	beq.n	8003a1e <osSemaphoreWait+0x62>
      return osErrorOS;
 8003a1a:	23ff      	movs	r3, #255	; 0xff
 8003a1c:	e015      	b.n	8003a4a <osSemaphoreWait+0x8e>
    }
	portEND_SWITCHING_ISR(taskWoken);
 8003a1e:	68bb      	ldr	r3, [r7, #8]
 8003a20:	2b00      	cmp	r3, #0
 8003a22:	d011      	beq.n	8003a48 <osSemaphoreWait+0x8c>
 8003a24:	4b0b      	ldr	r3, [pc, #44]	; (8003a54 <osSemaphoreWait+0x98>)
 8003a26:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003a2a:	601a      	str	r2, [r3, #0]
 8003a2c:	f3bf 8f4f 	dsb	sy
 8003a30:	f3bf 8f6f 	isb	sy
 8003a34:	e008      	b.n	8003a48 <osSemaphoreWait+0x8c>
  }  
  else if (xSemaphoreTake(semaphore_id, ticks) != pdTRUE) {
 8003a36:	68f9      	ldr	r1, [r7, #12]
 8003a38:	6878      	ldr	r0, [r7, #4]
 8003a3a:	f000 fda3 	bl	8004584 <xQueueSemaphoreTake>
 8003a3e:	4603      	mov	r3, r0
 8003a40:	2b01      	cmp	r3, #1
 8003a42:	d001      	beq.n	8003a48 <osSemaphoreWait+0x8c>
    return osErrorOS;
 8003a44:	23ff      	movs	r3, #255	; 0xff
 8003a46:	e000      	b.n	8003a4a <osSemaphoreWait+0x8e>
  }
  
  return osOK;
 8003a48:	2300      	movs	r3, #0
}
 8003a4a:	4618      	mov	r0, r3
 8003a4c:	3710      	adds	r7, #16
 8003a4e:	46bd      	mov	sp, r7
 8003a50:	bd80      	pop	{r7, pc}
 8003a52:	bf00      	nop
 8003a54:	e000ed04 	.word	0xe000ed04

08003a58 <osSemaphoreRelease>:
* @param  semaphore_id  semaphore object referenced with \ref osSemaphore.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreRelease shall be consistent in every CMSIS-RTOS.
*/
osStatus osSemaphoreRelease (osSemaphoreId semaphore_id)
{
 8003a58:	b580      	push	{r7, lr}
 8003a5a:	b084      	sub	sp, #16
 8003a5c:	af00      	add	r7, sp, #0
 8003a5e:	6078      	str	r0, [r7, #4]
  osStatus result = osOK;
 8003a60:	2300      	movs	r3, #0
 8003a62:	60fb      	str	r3, [r7, #12]
  portBASE_TYPE taskWoken = pdFALSE;
 8003a64:	2300      	movs	r3, #0
 8003a66:	60bb      	str	r3, [r7, #8]
  
  
  if (inHandlerMode()) {
 8003a68:	f7ff fe96 	bl	8003798 <inHandlerMode>
 8003a6c:	4603      	mov	r3, r0
 8003a6e:	2b00      	cmp	r3, #0
 8003a70:	d016      	beq.n	8003aa0 <osSemaphoreRelease+0x48>
    if (xSemaphoreGiveFromISR(semaphore_id, &taskWoken) != pdTRUE) {
 8003a72:	f107 0308 	add.w	r3, r7, #8
 8003a76:	4619      	mov	r1, r3
 8003a78:	6878      	ldr	r0, [r7, #4]
 8003a7a:	f000 fc1d 	bl	80042b8 <xQueueGiveFromISR>
 8003a7e:	4603      	mov	r3, r0
 8003a80:	2b01      	cmp	r3, #1
 8003a82:	d001      	beq.n	8003a88 <osSemaphoreRelease+0x30>
      return osErrorOS;
 8003a84:	23ff      	movs	r3, #255	; 0xff
 8003a86:	e017      	b.n	8003ab8 <osSemaphoreRelease+0x60>
    }
    portEND_SWITCHING_ISR(taskWoken);
 8003a88:	68bb      	ldr	r3, [r7, #8]
 8003a8a:	2b00      	cmp	r3, #0
 8003a8c:	d013      	beq.n	8003ab6 <osSemaphoreRelease+0x5e>
 8003a8e:	4b0c      	ldr	r3, [pc, #48]	; (8003ac0 <osSemaphoreRelease+0x68>)
 8003a90:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003a94:	601a      	str	r2, [r3, #0]
 8003a96:	f3bf 8f4f 	dsb	sy
 8003a9a:	f3bf 8f6f 	isb	sy
 8003a9e:	e00a      	b.n	8003ab6 <osSemaphoreRelease+0x5e>
  }
  else {
    if (xSemaphoreGive(semaphore_id) != pdTRUE) {
 8003aa0:	2300      	movs	r3, #0
 8003aa2:	2200      	movs	r2, #0
 8003aa4:	2100      	movs	r1, #0
 8003aa6:	6878      	ldr	r0, [r7, #4]
 8003aa8:	f000 fa78 	bl	8003f9c <xQueueGenericSend>
 8003aac:	4603      	mov	r3, r0
 8003aae:	2b01      	cmp	r3, #1
 8003ab0:	d001      	beq.n	8003ab6 <osSemaphoreRelease+0x5e>
      result = osErrorOS;
 8003ab2:	23ff      	movs	r3, #255	; 0xff
 8003ab4:	60fb      	str	r3, [r7, #12]
    }
  }
  
  return result;
 8003ab6:	68fb      	ldr	r3, [r7, #12]
}
 8003ab8:	4618      	mov	r0, r3
 8003aba:	3710      	adds	r7, #16
 8003abc:	46bd      	mov	sp, r7
 8003abe:	bd80      	pop	{r7, pc}
 8003ac0:	e000ed04 	.word	0xe000ed04

08003ac4 <osMessageCreate>:
* @param  thread_id     thread ID (obtained by \ref osThreadCreate or \ref osThreadGetId) or NULL.
* @retval  message queue ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osMessageCreate shall be consistent in every CMSIS-RTOS.
*/
osMessageQId osMessageCreate (const osMessageQDef_t *queue_def, osThreadId thread_id)
{
 8003ac4:	b580      	push	{r7, lr}
 8003ac6:	b082      	sub	sp, #8
 8003ac8:	af00      	add	r7, sp, #0
 8003aca:	6078      	str	r0, [r7, #4]
 8003acc:	6039      	str	r1, [r7, #0]
    return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
  }
#elif ( configSUPPORT_STATIC_ALLOCATION == 1 )
  return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
#else  
  return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	6818      	ldr	r0, [r3, #0]
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	685b      	ldr	r3, [r3, #4]
 8003ad6:	2200      	movs	r2, #0
 8003ad8:	4619      	mov	r1, r3
 8003ada:	f000 f9d5 	bl	8003e88 <xQueueGenericCreate>
 8003ade:	4603      	mov	r3, r0
#endif
}
 8003ae0:	4618      	mov	r0, r3
 8003ae2:	3708      	adds	r7, #8
 8003ae4:	46bd      	mov	sp, r7
 8003ae6:	bd80      	pop	{r7, pc}

08003ae8 <osMessagePut>:
* @param  millisec  timeout value or 0 in case of no time-out.
* @retval status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMessagePut shall be consistent in every CMSIS-RTOS.
*/
osStatus osMessagePut (osMessageQId queue_id, uint32_t info, uint32_t millisec)
{
 8003ae8:	b580      	push	{r7, lr}
 8003aea:	b086      	sub	sp, #24
 8003aec:	af00      	add	r7, sp, #0
 8003aee:	60f8      	str	r0, [r7, #12]
 8003af0:	60b9      	str	r1, [r7, #8]
 8003af2:	607a      	str	r2, [r7, #4]
  portBASE_TYPE taskWoken = pdFALSE;
 8003af4:	2300      	movs	r3, #0
 8003af6:	613b      	str	r3, [r7, #16]
  TickType_t ticks;
  
  ticks = millisec / portTICK_PERIOD_MS;
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	617b      	str	r3, [r7, #20]
  if (ticks == 0) {
 8003afc:	697b      	ldr	r3, [r7, #20]
 8003afe:	2b00      	cmp	r3, #0
 8003b00:	d101      	bne.n	8003b06 <osMessagePut+0x1e>
    ticks = 1;
 8003b02:	2301      	movs	r3, #1
 8003b04:	617b      	str	r3, [r7, #20]
  }
  
  if (inHandlerMode()) {
 8003b06:	f7ff fe47 	bl	8003798 <inHandlerMode>
 8003b0a:	4603      	mov	r3, r0
 8003b0c:	2b00      	cmp	r3, #0
 8003b0e:	d018      	beq.n	8003b42 <osMessagePut+0x5a>
    if (xQueueSendFromISR(queue_id, &info, &taskWoken) != pdTRUE) {
 8003b10:	f107 0210 	add.w	r2, r7, #16
 8003b14:	f107 0108 	add.w	r1, r7, #8
 8003b18:	2300      	movs	r3, #0
 8003b1a:	68f8      	ldr	r0, [r7, #12]
 8003b1c:	f000 fb38 	bl	8004190 <xQueueGenericSendFromISR>
 8003b20:	4603      	mov	r3, r0
 8003b22:	2b01      	cmp	r3, #1
 8003b24:	d001      	beq.n	8003b2a <osMessagePut+0x42>
      return osErrorOS;
 8003b26:	23ff      	movs	r3, #255	; 0xff
 8003b28:	e018      	b.n	8003b5c <osMessagePut+0x74>
    }
    portEND_SWITCHING_ISR(taskWoken);
 8003b2a:	693b      	ldr	r3, [r7, #16]
 8003b2c:	2b00      	cmp	r3, #0
 8003b2e:	d014      	beq.n	8003b5a <osMessagePut+0x72>
 8003b30:	4b0c      	ldr	r3, [pc, #48]	; (8003b64 <osMessagePut+0x7c>)
 8003b32:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003b36:	601a      	str	r2, [r3, #0]
 8003b38:	f3bf 8f4f 	dsb	sy
 8003b3c:	f3bf 8f6f 	isb	sy
 8003b40:	e00b      	b.n	8003b5a <osMessagePut+0x72>
  }
  else {
    if (xQueueSend(queue_id, &info, ticks) != pdTRUE) {
 8003b42:	f107 0108 	add.w	r1, r7, #8
 8003b46:	2300      	movs	r3, #0
 8003b48:	697a      	ldr	r2, [r7, #20]
 8003b4a:	68f8      	ldr	r0, [r7, #12]
 8003b4c:	f000 fa26 	bl	8003f9c <xQueueGenericSend>
 8003b50:	4603      	mov	r3, r0
 8003b52:	2b01      	cmp	r3, #1
 8003b54:	d001      	beq.n	8003b5a <osMessagePut+0x72>
      return osErrorOS;
 8003b56:	23ff      	movs	r3, #255	; 0xff
 8003b58:	e000      	b.n	8003b5c <osMessagePut+0x74>
    }
  }
  
  return osOK;
 8003b5a:	2300      	movs	r3, #0
}
 8003b5c:	4618      	mov	r0, r3
 8003b5e:	3718      	adds	r7, #24
 8003b60:	46bd      	mov	sp, r7
 8003b62:	bd80      	pop	{r7, pc}
 8003b64:	e000ed04 	.word	0xe000ed04

08003b68 <osMessageGet>:
* @param  millisec  timeout value or 0 in case of no time-out.
* @retval event information that includes status code.
* @note   MUST REMAIN UNCHANGED: \b osMessageGet shall be consistent in every CMSIS-RTOS.
*/
osEvent osMessageGet (osMessageQId queue_id, uint32_t millisec)
{
 8003b68:	b590      	push	{r4, r7, lr}
 8003b6a:	b08b      	sub	sp, #44	; 0x2c
 8003b6c:	af00      	add	r7, sp, #0
 8003b6e:	60f8      	str	r0, [r7, #12]
 8003b70:	60b9      	str	r1, [r7, #8]
 8003b72:	607a      	str	r2, [r7, #4]
  portBASE_TYPE taskWoken;
  TickType_t ticks;
  osEvent event;
  
  event.def.message_id = queue_id;
 8003b74:	68bb      	ldr	r3, [r7, #8]
 8003b76:	61fb      	str	r3, [r7, #28]
  event.value.v = 0;
 8003b78:	2300      	movs	r3, #0
 8003b7a:	61bb      	str	r3, [r7, #24]
  
  if (queue_id == NULL) {
 8003b7c:	68bb      	ldr	r3, [r7, #8]
 8003b7e:	2b00      	cmp	r3, #0
 8003b80:	d10a      	bne.n	8003b98 <osMessageGet+0x30>
    event.status = osErrorParameter;
 8003b82:	2380      	movs	r3, #128	; 0x80
 8003b84:	617b      	str	r3, [r7, #20]
    return event;
 8003b86:	68fb      	ldr	r3, [r7, #12]
 8003b88:	461c      	mov	r4, r3
 8003b8a:	f107 0314 	add.w	r3, r7, #20
 8003b8e:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8003b92:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8003b96:	e054      	b.n	8003c42 <osMessageGet+0xda>
  }
  
  taskWoken = pdFALSE;
 8003b98:	2300      	movs	r3, #0
 8003b9a:	623b      	str	r3, [r7, #32]
  
  ticks = 0;
 8003b9c:	2300      	movs	r3, #0
 8003b9e:	627b      	str	r3, [r7, #36]	; 0x24
  if (millisec == osWaitForever) {
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003ba6:	d103      	bne.n	8003bb0 <osMessageGet+0x48>
    ticks = portMAX_DELAY;
 8003ba8:	f04f 33ff 	mov.w	r3, #4294967295
 8003bac:	627b      	str	r3, [r7, #36]	; 0x24
 8003bae:	e009      	b.n	8003bc4 <osMessageGet+0x5c>
  }
  else if (millisec != 0) {
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	2b00      	cmp	r3, #0
 8003bb4:	d006      	beq.n	8003bc4 <osMessageGet+0x5c>
    ticks = millisec / portTICK_PERIOD_MS;
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	627b      	str	r3, [r7, #36]	; 0x24
    if (ticks == 0) {
 8003bba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003bbc:	2b00      	cmp	r3, #0
 8003bbe:	d101      	bne.n	8003bc4 <osMessageGet+0x5c>
      ticks = 1;
 8003bc0:	2301      	movs	r3, #1
 8003bc2:	627b      	str	r3, [r7, #36]	; 0x24
    }
  }
  
  if (inHandlerMode()) {
 8003bc4:	f7ff fde8 	bl	8003798 <inHandlerMode>
 8003bc8:	4603      	mov	r3, r0
 8003bca:	2b00      	cmp	r3, #0
 8003bcc:	d01c      	beq.n	8003c08 <osMessageGet+0xa0>
    if (xQueueReceiveFromISR(queue_id, &event.value.v, &taskWoken) == pdTRUE) {
 8003bce:	f107 0220 	add.w	r2, r7, #32
 8003bd2:	f107 0314 	add.w	r3, r7, #20
 8003bd6:	3304      	adds	r3, #4
 8003bd8:	4619      	mov	r1, r3
 8003bda:	68b8      	ldr	r0, [r7, #8]
 8003bdc:	f000 fdda 	bl	8004794 <xQueueReceiveFromISR>
 8003be0:	4603      	mov	r3, r0
 8003be2:	2b01      	cmp	r3, #1
 8003be4:	d102      	bne.n	8003bec <osMessageGet+0x84>
      /* We have mail */
      event.status = osEventMessage;
 8003be6:	2310      	movs	r3, #16
 8003be8:	617b      	str	r3, [r7, #20]
 8003bea:	e001      	b.n	8003bf0 <osMessageGet+0x88>
    }
    else {
      event.status = osOK;
 8003bec:	2300      	movs	r3, #0
 8003bee:	617b      	str	r3, [r7, #20]
    }
    portEND_SWITCHING_ISR(taskWoken);
 8003bf0:	6a3b      	ldr	r3, [r7, #32]
 8003bf2:	2b00      	cmp	r3, #0
 8003bf4:	d01d      	beq.n	8003c32 <osMessageGet+0xca>
 8003bf6:	4b15      	ldr	r3, [pc, #84]	; (8003c4c <osMessageGet+0xe4>)
 8003bf8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003bfc:	601a      	str	r2, [r3, #0]
 8003bfe:	f3bf 8f4f 	dsb	sy
 8003c02:	f3bf 8f6f 	isb	sy
 8003c06:	e014      	b.n	8003c32 <osMessageGet+0xca>
  }
  else {
    if (xQueueReceive(queue_id, &event.value.v, ticks) == pdTRUE) {
 8003c08:	f107 0314 	add.w	r3, r7, #20
 8003c0c:	3304      	adds	r3, #4
 8003c0e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003c10:	4619      	mov	r1, r3
 8003c12:	68b8      	ldr	r0, [r7, #8]
 8003c14:	f000 fbda 	bl	80043cc <xQueueReceive>
 8003c18:	4603      	mov	r3, r0
 8003c1a:	2b01      	cmp	r3, #1
 8003c1c:	d102      	bne.n	8003c24 <osMessageGet+0xbc>
      /* We have mail */
      event.status = osEventMessage;
 8003c1e:	2310      	movs	r3, #16
 8003c20:	617b      	str	r3, [r7, #20]
 8003c22:	e006      	b.n	8003c32 <osMessageGet+0xca>
    }
    else {
      event.status = (ticks == 0) ? osOK : osEventTimeout;
 8003c24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c26:	2b00      	cmp	r3, #0
 8003c28:	d101      	bne.n	8003c2e <osMessageGet+0xc6>
 8003c2a:	2300      	movs	r3, #0
 8003c2c:	e000      	b.n	8003c30 <osMessageGet+0xc8>
 8003c2e:	2340      	movs	r3, #64	; 0x40
 8003c30:	617b      	str	r3, [r7, #20]
    }
  }
  
  return event;
 8003c32:	68fb      	ldr	r3, [r7, #12]
 8003c34:	461c      	mov	r4, r3
 8003c36:	f107 0314 	add.w	r3, r7, #20
 8003c3a:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8003c3e:	e884 0007 	stmia.w	r4, {r0, r1, r2}
}
 8003c42:	68f8      	ldr	r0, [r7, #12]
 8003c44:	372c      	adds	r7, #44	; 0x2c
 8003c46:	46bd      	mov	sp, r7
 8003c48:	bd90      	pop	{r4, r7, pc}
 8003c4a:	bf00      	nop
 8003c4c:	e000ed04 	.word	0xe000ed04

08003c50 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8003c50:	b480      	push	{r7}
 8003c52:	b083      	sub	sp, #12
 8003c54:	af00      	add	r7, sp, #0
 8003c56:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	f103 0208 	add.w	r2, r3, #8
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8003c62:	687b      	ldr	r3, [r7, #4]
 8003c64:	f04f 32ff 	mov.w	r2, #4294967295
 8003c68:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	f103 0208 	add.w	r2, r3, #8
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	f103 0208 	add.w	r2, r3, #8
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	2200      	movs	r2, #0
 8003c82:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8003c84:	bf00      	nop
 8003c86:	370c      	adds	r7, #12
 8003c88:	46bd      	mov	sp, r7
 8003c8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c8e:	4770      	bx	lr

08003c90 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8003c90:	b480      	push	{r7}
 8003c92:	b083      	sub	sp, #12
 8003c94:	af00      	add	r7, sp, #0
 8003c96:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	2200      	movs	r2, #0
 8003c9c:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8003c9e:	bf00      	nop
 8003ca0:	370c      	adds	r7, #12
 8003ca2:	46bd      	mov	sp, r7
 8003ca4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ca8:	4770      	bx	lr

08003caa <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8003caa:	b480      	push	{r7}
 8003cac:	b085      	sub	sp, #20
 8003cae:	af00      	add	r7, sp, #0
 8003cb0:	6078      	str	r0, [r7, #4]
 8003cb2:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	685b      	ldr	r3, [r3, #4]
 8003cb8:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8003cba:	683b      	ldr	r3, [r7, #0]
 8003cbc:	68fa      	ldr	r2, [r7, #12]
 8003cbe:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8003cc0:	68fb      	ldr	r3, [r7, #12]
 8003cc2:	689a      	ldr	r2, [r3, #8]
 8003cc4:	683b      	ldr	r3, [r7, #0]
 8003cc6:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8003cc8:	68fb      	ldr	r3, [r7, #12]
 8003cca:	689b      	ldr	r3, [r3, #8]
 8003ccc:	683a      	ldr	r2, [r7, #0]
 8003cce:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8003cd0:	68fb      	ldr	r3, [r7, #12]
 8003cd2:	683a      	ldr	r2, [r7, #0]
 8003cd4:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 8003cd6:	683b      	ldr	r3, [r7, #0]
 8003cd8:	687a      	ldr	r2, [r7, #4]
 8003cda:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	681b      	ldr	r3, [r3, #0]
 8003ce0:	1c5a      	adds	r2, r3, #1
 8003ce2:	687b      	ldr	r3, [r7, #4]
 8003ce4:	601a      	str	r2, [r3, #0]
}
 8003ce6:	bf00      	nop
 8003ce8:	3714      	adds	r7, #20
 8003cea:	46bd      	mov	sp, r7
 8003cec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cf0:	4770      	bx	lr

08003cf2 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8003cf2:	b480      	push	{r7}
 8003cf4:	b085      	sub	sp, #20
 8003cf6:	af00      	add	r7, sp, #0
 8003cf8:	6078      	str	r0, [r7, #4]
 8003cfa:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8003cfc:	683b      	ldr	r3, [r7, #0]
 8003cfe:	681b      	ldr	r3, [r3, #0]
 8003d00:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8003d02:	68bb      	ldr	r3, [r7, #8]
 8003d04:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003d08:	d103      	bne.n	8003d12 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	691b      	ldr	r3, [r3, #16]
 8003d0e:	60fb      	str	r3, [r7, #12]
 8003d10:	e00c      	b.n	8003d2c <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	3308      	adds	r3, #8
 8003d16:	60fb      	str	r3, [r7, #12]
 8003d18:	e002      	b.n	8003d20 <vListInsert+0x2e>
 8003d1a:	68fb      	ldr	r3, [r7, #12]
 8003d1c:	685b      	ldr	r3, [r3, #4]
 8003d1e:	60fb      	str	r3, [r7, #12]
 8003d20:	68fb      	ldr	r3, [r7, #12]
 8003d22:	685b      	ldr	r3, [r3, #4]
 8003d24:	681b      	ldr	r3, [r3, #0]
 8003d26:	68ba      	ldr	r2, [r7, #8]
 8003d28:	429a      	cmp	r2, r3
 8003d2a:	d2f6      	bcs.n	8003d1a <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8003d2c:	68fb      	ldr	r3, [r7, #12]
 8003d2e:	685a      	ldr	r2, [r3, #4]
 8003d30:	683b      	ldr	r3, [r7, #0]
 8003d32:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8003d34:	683b      	ldr	r3, [r7, #0]
 8003d36:	685b      	ldr	r3, [r3, #4]
 8003d38:	683a      	ldr	r2, [r7, #0]
 8003d3a:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8003d3c:	683b      	ldr	r3, [r7, #0]
 8003d3e:	68fa      	ldr	r2, [r7, #12]
 8003d40:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8003d42:	68fb      	ldr	r3, [r7, #12]
 8003d44:	683a      	ldr	r2, [r7, #0]
 8003d46:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 8003d48:	683b      	ldr	r3, [r7, #0]
 8003d4a:	687a      	ldr	r2, [r7, #4]
 8003d4c:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	681b      	ldr	r3, [r3, #0]
 8003d52:	1c5a      	adds	r2, r3, #1
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	601a      	str	r2, [r3, #0]
}
 8003d58:	bf00      	nop
 8003d5a:	3714      	adds	r7, #20
 8003d5c:	46bd      	mov	sp, r7
 8003d5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d62:	4770      	bx	lr

08003d64 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8003d64:	b480      	push	{r7}
 8003d66:	b085      	sub	sp, #20
 8003d68:	af00      	add	r7, sp, #0
 8003d6a:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	691b      	ldr	r3, [r3, #16]
 8003d70:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8003d72:	687b      	ldr	r3, [r7, #4]
 8003d74:	685b      	ldr	r3, [r3, #4]
 8003d76:	687a      	ldr	r2, [r7, #4]
 8003d78:	6892      	ldr	r2, [r2, #8]
 8003d7a:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	689b      	ldr	r3, [r3, #8]
 8003d80:	687a      	ldr	r2, [r7, #4]
 8003d82:	6852      	ldr	r2, [r2, #4]
 8003d84:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8003d86:	68fb      	ldr	r3, [r7, #12]
 8003d88:	685b      	ldr	r3, [r3, #4]
 8003d8a:	687a      	ldr	r2, [r7, #4]
 8003d8c:	429a      	cmp	r2, r3
 8003d8e:	d103      	bne.n	8003d98 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	689a      	ldr	r2, [r3, #8]
 8003d94:	68fb      	ldr	r3, [r7, #12]
 8003d96:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	2200      	movs	r2, #0
 8003d9c:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8003d9e:	68fb      	ldr	r3, [r7, #12]
 8003da0:	681b      	ldr	r3, [r3, #0]
 8003da2:	1e5a      	subs	r2, r3, #1
 8003da4:	68fb      	ldr	r3, [r7, #12]
 8003da6:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8003da8:	68fb      	ldr	r3, [r7, #12]
 8003daa:	681b      	ldr	r3, [r3, #0]
}
 8003dac:	4618      	mov	r0, r3
 8003dae:	3714      	adds	r7, #20
 8003db0:	46bd      	mov	sp, r7
 8003db2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003db6:	4770      	bx	lr

08003db8 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8003db8:	b580      	push	{r7, lr}
 8003dba:	b084      	sub	sp, #16
 8003dbc:	af00      	add	r7, sp, #0
 8003dbe:	6078      	str	r0, [r7, #4]
 8003dc0:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8003dc6:	68fb      	ldr	r3, [r7, #12]
 8003dc8:	2b00      	cmp	r3, #0
 8003dca:	d109      	bne.n	8003de0 <xQueueGenericReset+0x28>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8003dcc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003dd0:	f383 8811 	msr	BASEPRI, r3
 8003dd4:	f3bf 8f6f 	isb	sy
 8003dd8:	f3bf 8f4f 	dsb	sy
 8003ddc:	60bb      	str	r3, [r7, #8]
 8003dde:	e7fe      	b.n	8003dde <xQueueGenericReset+0x26>

	taskENTER_CRITICAL();
 8003de0:	f001 ff2c 	bl	8005c3c <vPortEnterCritical>
	{
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 8003de4:	68fb      	ldr	r3, [r7, #12]
 8003de6:	681a      	ldr	r2, [r3, #0]
 8003de8:	68fb      	ldr	r3, [r7, #12]
 8003dea:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003dec:	68f9      	ldr	r1, [r7, #12]
 8003dee:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8003df0:	fb01 f303 	mul.w	r3, r1, r3
 8003df4:	441a      	add	r2, r3
 8003df6:	68fb      	ldr	r3, [r7, #12]
 8003df8:	605a      	str	r2, [r3, #4]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8003dfa:	68fb      	ldr	r3, [r7, #12]
 8003dfc:	2200      	movs	r2, #0
 8003dfe:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8003e00:	68fb      	ldr	r3, [r7, #12]
 8003e02:	681a      	ldr	r2, [r3, #0]
 8003e04:	68fb      	ldr	r3, [r7, #12]
 8003e06:	609a      	str	r2, [r3, #8]
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
 8003e08:	68fb      	ldr	r3, [r7, #12]
 8003e0a:	681a      	ldr	r2, [r3, #0]
 8003e0c:	68fb      	ldr	r3, [r7, #12]
 8003e0e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003e10:	3b01      	subs	r3, #1
 8003e12:	68f9      	ldr	r1, [r7, #12]
 8003e14:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8003e16:	fb01 f303 	mul.w	r3, r1, r3
 8003e1a:	441a      	add	r2, r3
 8003e1c:	68fb      	ldr	r3, [r7, #12]
 8003e1e:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8003e20:	68fb      	ldr	r3, [r7, #12]
 8003e22:	22ff      	movs	r2, #255	; 0xff
 8003e24:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8003e28:	68fb      	ldr	r3, [r7, #12]
 8003e2a:	22ff      	movs	r2, #255	; 0xff
 8003e2c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8003e30:	683b      	ldr	r3, [r7, #0]
 8003e32:	2b00      	cmp	r3, #0
 8003e34:	d114      	bne.n	8003e60 <xQueueGenericReset+0xa8>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8003e36:	68fb      	ldr	r3, [r7, #12]
 8003e38:	691b      	ldr	r3, [r3, #16]
 8003e3a:	2b00      	cmp	r3, #0
 8003e3c:	d01a      	beq.n	8003e74 <xQueueGenericReset+0xbc>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8003e3e:	68fb      	ldr	r3, [r7, #12]
 8003e40:	3310      	adds	r3, #16
 8003e42:	4618      	mov	r0, r3
 8003e44:	f001 f9f4 	bl	8005230 <xTaskRemoveFromEventList>
 8003e48:	4603      	mov	r3, r0
 8003e4a:	2b00      	cmp	r3, #0
 8003e4c:	d012      	beq.n	8003e74 <xQueueGenericReset+0xbc>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8003e4e:	4b0d      	ldr	r3, [pc, #52]	; (8003e84 <xQueueGenericReset+0xcc>)
 8003e50:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003e54:	601a      	str	r2, [r3, #0]
 8003e56:	f3bf 8f4f 	dsb	sy
 8003e5a:	f3bf 8f6f 	isb	sy
 8003e5e:	e009      	b.n	8003e74 <xQueueGenericReset+0xbc>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8003e60:	68fb      	ldr	r3, [r7, #12]
 8003e62:	3310      	adds	r3, #16
 8003e64:	4618      	mov	r0, r3
 8003e66:	f7ff fef3 	bl	8003c50 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8003e6a:	68fb      	ldr	r3, [r7, #12]
 8003e6c:	3324      	adds	r3, #36	; 0x24
 8003e6e:	4618      	mov	r0, r3
 8003e70:	f7ff feee 	bl	8003c50 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8003e74:	f001 ff10 	bl	8005c98 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8003e78:	2301      	movs	r3, #1
}
 8003e7a:	4618      	mov	r0, r3
 8003e7c:	3710      	adds	r7, #16
 8003e7e:	46bd      	mov	sp, r7
 8003e80:	bd80      	pop	{r7, pc}
 8003e82:	bf00      	nop
 8003e84:	e000ed04 	.word	0xe000ed04

08003e88 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8003e88:	b580      	push	{r7, lr}
 8003e8a:	b08a      	sub	sp, #40	; 0x28
 8003e8c:	af02      	add	r7, sp, #8
 8003e8e:	60f8      	str	r0, [r7, #12]
 8003e90:	60b9      	str	r1, [r7, #8]
 8003e92:	4613      	mov	r3, r2
 8003e94:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8003e96:	68fb      	ldr	r3, [r7, #12]
 8003e98:	2b00      	cmp	r3, #0
 8003e9a:	d109      	bne.n	8003eb0 <xQueueGenericCreate+0x28>
 8003e9c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003ea0:	f383 8811 	msr	BASEPRI, r3
 8003ea4:	f3bf 8f6f 	isb	sy
 8003ea8:	f3bf 8f4f 	dsb	sy
 8003eac:	613b      	str	r3, [r7, #16]
 8003eae:	e7fe      	b.n	8003eae <xQueueGenericCreate+0x26>

		if( uxItemSize == ( UBaseType_t ) 0 )
 8003eb0:	68bb      	ldr	r3, [r7, #8]
 8003eb2:	2b00      	cmp	r3, #0
 8003eb4:	d102      	bne.n	8003ebc <xQueueGenericCreate+0x34>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
 8003eb6:	2300      	movs	r3, #0
 8003eb8:	61fb      	str	r3, [r7, #28]
 8003eba:	e004      	b.n	8003ec6 <xQueueGenericCreate+0x3e>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003ebc:	68fb      	ldr	r3, [r7, #12]
 8003ebe:	68ba      	ldr	r2, [r7, #8]
 8003ec0:	fb02 f303 	mul.w	r3, r2, r3
 8003ec4:	61fb      	str	r3, [r7, #28]
		}

		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes );
 8003ec6:	69fb      	ldr	r3, [r7, #28]
 8003ec8:	3348      	adds	r3, #72	; 0x48
 8003eca:	4618      	mov	r0, r3
 8003ecc:	f001 ffd0 	bl	8005e70 <pvPortMalloc>
 8003ed0:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8003ed2:	69bb      	ldr	r3, [r7, #24]
 8003ed4:	2b00      	cmp	r3, #0
 8003ed6:	d00b      	beq.n	8003ef0 <xQueueGenericCreate+0x68>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( ( uint8_t * ) pxNewQueue ) + sizeof( Queue_t );
 8003ed8:	69bb      	ldr	r3, [r7, #24]
 8003eda:	3348      	adds	r3, #72	; 0x48
 8003edc:	617b      	str	r3, [r7, #20]
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8003ede:	79fa      	ldrb	r2, [r7, #7]
 8003ee0:	69bb      	ldr	r3, [r7, #24]
 8003ee2:	9300      	str	r3, [sp, #0]
 8003ee4:	4613      	mov	r3, r2
 8003ee6:	697a      	ldr	r2, [r7, #20]
 8003ee8:	68b9      	ldr	r1, [r7, #8]
 8003eea:	68f8      	ldr	r0, [r7, #12]
 8003eec:	f000 f805 	bl	8003efa <prvInitialiseNewQueue>
		else
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
		}

		return pxNewQueue;
 8003ef0:	69bb      	ldr	r3, [r7, #24]
	}
 8003ef2:	4618      	mov	r0, r3
 8003ef4:	3720      	adds	r7, #32
 8003ef6:	46bd      	mov	sp, r7
 8003ef8:	bd80      	pop	{r7, pc}

08003efa <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8003efa:	b580      	push	{r7, lr}
 8003efc:	b084      	sub	sp, #16
 8003efe:	af00      	add	r7, sp, #0
 8003f00:	60f8      	str	r0, [r7, #12]
 8003f02:	60b9      	str	r1, [r7, #8]
 8003f04:	607a      	str	r2, [r7, #4]
 8003f06:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8003f08:	68bb      	ldr	r3, [r7, #8]
 8003f0a:	2b00      	cmp	r3, #0
 8003f0c:	d103      	bne.n	8003f16 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8003f0e:	69bb      	ldr	r3, [r7, #24]
 8003f10:	69ba      	ldr	r2, [r7, #24]
 8003f12:	601a      	str	r2, [r3, #0]
 8003f14:	e002      	b.n	8003f1c <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8003f16:	69bb      	ldr	r3, [r7, #24]
 8003f18:	687a      	ldr	r2, [r7, #4]
 8003f1a:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8003f1c:	69bb      	ldr	r3, [r7, #24]
 8003f1e:	68fa      	ldr	r2, [r7, #12]
 8003f20:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8003f22:	69bb      	ldr	r3, [r7, #24]
 8003f24:	68ba      	ldr	r2, [r7, #8]
 8003f26:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8003f28:	2101      	movs	r1, #1
 8003f2a:	69b8      	ldr	r0, [r7, #24]
 8003f2c:	f7ff ff44 	bl	8003db8 <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8003f30:	bf00      	nop
 8003f32:	3710      	adds	r7, #16
 8003f34:	46bd      	mov	sp, r7
 8003f36:	bd80      	pop	{r7, pc}

08003f38 <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
 8003f38:	b580      	push	{r7, lr}
 8003f3a:	b082      	sub	sp, #8
 8003f3c:	af00      	add	r7, sp, #0
 8003f3e:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	2b00      	cmp	r3, #0
 8003f44:	d00e      	beq.n	8003f64 <prvInitialiseMutex+0x2c>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->pxMutexHolder = NULL;
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	2200      	movs	r2, #0
 8003f4a:	605a      	str	r2, [r3, #4]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	2200      	movs	r2, #0
 8003f50:	601a      	str	r2, [r3, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.uxRecursiveCallCount = 0;
 8003f52:	687b      	ldr	r3, [r7, #4]
 8003f54:	2200      	movs	r2, #0
 8003f56:	60da      	str	r2, [r3, #12]

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 8003f58:	2300      	movs	r3, #0
 8003f5a:	2200      	movs	r2, #0
 8003f5c:	2100      	movs	r1, #0
 8003f5e:	6878      	ldr	r0, [r7, #4]
 8003f60:	f000 f81c 	bl	8003f9c <xQueueGenericSend>
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
 8003f64:	bf00      	nop
 8003f66:	3708      	adds	r7, #8
 8003f68:	46bd      	mov	sp, r7
 8003f6a:	bd80      	pop	{r7, pc}

08003f6c <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
 8003f6c:	b580      	push	{r7, lr}
 8003f6e:	b086      	sub	sp, #24
 8003f70:	af00      	add	r7, sp, #0
 8003f72:	4603      	mov	r3, r0
 8003f74:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 8003f76:	2301      	movs	r3, #1
 8003f78:	617b      	str	r3, [r7, #20]
 8003f7a:	2300      	movs	r3, #0
 8003f7c:	613b      	str	r3, [r7, #16]

		pxNewQueue = ( Queue_t * ) xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 8003f7e:	79fb      	ldrb	r3, [r7, #7]
 8003f80:	461a      	mov	r2, r3
 8003f82:	6939      	ldr	r1, [r7, #16]
 8003f84:	6978      	ldr	r0, [r7, #20]
 8003f86:	f7ff ff7f 	bl	8003e88 <xQueueGenericCreate>
 8003f8a:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( pxNewQueue );
 8003f8c:	68f8      	ldr	r0, [r7, #12]
 8003f8e:	f7ff ffd3 	bl	8003f38 <prvInitialiseMutex>

		return pxNewQueue;
 8003f92:	68fb      	ldr	r3, [r7, #12]
	}
 8003f94:	4618      	mov	r0, r3
 8003f96:	3718      	adds	r7, #24
 8003f98:	46bd      	mov	sp, r7
 8003f9a:	bd80      	pop	{r7, pc}

08003f9c <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8003f9c:	b580      	push	{r7, lr}
 8003f9e:	b08e      	sub	sp, #56	; 0x38
 8003fa0:	af00      	add	r7, sp, #0
 8003fa2:	60f8      	str	r0, [r7, #12]
 8003fa4:	60b9      	str	r1, [r7, #8]
 8003fa6:	607a      	str	r2, [r7, #4]
 8003fa8:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8003faa:	2300      	movs	r3, #0
 8003fac:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8003fae:	68fb      	ldr	r3, [r7, #12]
 8003fb0:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8003fb2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003fb4:	2b00      	cmp	r3, #0
 8003fb6:	d109      	bne.n	8003fcc <xQueueGenericSend+0x30>
 8003fb8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003fbc:	f383 8811 	msr	BASEPRI, r3
 8003fc0:	f3bf 8f6f 	isb	sy
 8003fc4:	f3bf 8f4f 	dsb	sy
 8003fc8:	62bb      	str	r3, [r7, #40]	; 0x28
 8003fca:	e7fe      	b.n	8003fca <xQueueGenericSend+0x2e>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8003fcc:	68bb      	ldr	r3, [r7, #8]
 8003fce:	2b00      	cmp	r3, #0
 8003fd0:	d103      	bne.n	8003fda <xQueueGenericSend+0x3e>
 8003fd2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003fd4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003fd6:	2b00      	cmp	r3, #0
 8003fd8:	d101      	bne.n	8003fde <xQueueGenericSend+0x42>
 8003fda:	2301      	movs	r3, #1
 8003fdc:	e000      	b.n	8003fe0 <xQueueGenericSend+0x44>
 8003fde:	2300      	movs	r3, #0
 8003fe0:	2b00      	cmp	r3, #0
 8003fe2:	d109      	bne.n	8003ff8 <xQueueGenericSend+0x5c>
 8003fe4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003fe8:	f383 8811 	msr	BASEPRI, r3
 8003fec:	f3bf 8f6f 	isb	sy
 8003ff0:	f3bf 8f4f 	dsb	sy
 8003ff4:	627b      	str	r3, [r7, #36]	; 0x24
 8003ff6:	e7fe      	b.n	8003ff6 <xQueueGenericSend+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8003ff8:	683b      	ldr	r3, [r7, #0]
 8003ffa:	2b02      	cmp	r3, #2
 8003ffc:	d103      	bne.n	8004006 <xQueueGenericSend+0x6a>
 8003ffe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004000:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004002:	2b01      	cmp	r3, #1
 8004004:	d101      	bne.n	800400a <xQueueGenericSend+0x6e>
 8004006:	2301      	movs	r3, #1
 8004008:	e000      	b.n	800400c <xQueueGenericSend+0x70>
 800400a:	2300      	movs	r3, #0
 800400c:	2b00      	cmp	r3, #0
 800400e:	d109      	bne.n	8004024 <xQueueGenericSend+0x88>
 8004010:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004014:	f383 8811 	msr	BASEPRI, r3
 8004018:	f3bf 8f6f 	isb	sy
 800401c:	f3bf 8f4f 	dsb	sy
 8004020:	623b      	str	r3, [r7, #32]
 8004022:	e7fe      	b.n	8004022 <xQueueGenericSend+0x86>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8004024:	f001 faa2 	bl	800556c <xTaskGetSchedulerState>
 8004028:	4603      	mov	r3, r0
 800402a:	2b00      	cmp	r3, #0
 800402c:	d102      	bne.n	8004034 <xQueueGenericSend+0x98>
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	2b00      	cmp	r3, #0
 8004032:	d101      	bne.n	8004038 <xQueueGenericSend+0x9c>
 8004034:	2301      	movs	r3, #1
 8004036:	e000      	b.n	800403a <xQueueGenericSend+0x9e>
 8004038:	2300      	movs	r3, #0
 800403a:	2b00      	cmp	r3, #0
 800403c:	d109      	bne.n	8004052 <xQueueGenericSend+0xb6>
 800403e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004042:	f383 8811 	msr	BASEPRI, r3
 8004046:	f3bf 8f6f 	isb	sy
 800404a:	f3bf 8f4f 	dsb	sy
 800404e:	61fb      	str	r3, [r7, #28]
 8004050:	e7fe      	b.n	8004050 <xQueueGenericSend+0xb4>
	/* This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8004052:	f001 fdf3 	bl	8005c3c <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8004056:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004058:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800405a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800405c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800405e:	429a      	cmp	r2, r3
 8004060:	d302      	bcc.n	8004068 <xQueueGenericSend+0xcc>
 8004062:	683b      	ldr	r3, [r7, #0]
 8004064:	2b02      	cmp	r3, #2
 8004066:	d129      	bne.n	80040bc <xQueueGenericSend+0x120>
			{
				traceQUEUE_SEND( pxQueue );
				xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8004068:	683a      	ldr	r2, [r7, #0]
 800406a:	68b9      	ldr	r1, [r7, #8]
 800406c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800406e:	f000 fc26 	bl	80048be <prvCopyDataToQueue>
 8004072:	62f8      	str	r0, [r7, #44]	; 0x2c
				}
				#else /* configUSE_QUEUE_SETS */
				{
					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8004074:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004076:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004078:	2b00      	cmp	r3, #0
 800407a:	d010      	beq.n	800409e <xQueueGenericSend+0x102>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800407c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800407e:	3324      	adds	r3, #36	; 0x24
 8004080:	4618      	mov	r0, r3
 8004082:	f001 f8d5 	bl	8005230 <xTaskRemoveFromEventList>
 8004086:	4603      	mov	r3, r0
 8004088:	2b00      	cmp	r3, #0
 800408a:	d013      	beq.n	80040b4 <xQueueGenericSend+0x118>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 800408c:	4b3f      	ldr	r3, [pc, #252]	; (800418c <xQueueGenericSend+0x1f0>)
 800408e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004092:	601a      	str	r2, [r3, #0]
 8004094:	f3bf 8f4f 	dsb	sy
 8004098:	f3bf 8f6f 	isb	sy
 800409c:	e00a      	b.n	80040b4 <xQueueGenericSend+0x118>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800409e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80040a0:	2b00      	cmp	r3, #0
 80040a2:	d007      	beq.n	80040b4 <xQueueGenericSend+0x118>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 80040a4:	4b39      	ldr	r3, [pc, #228]	; (800418c <xQueueGenericSend+0x1f0>)
 80040a6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80040aa:	601a      	str	r2, [r3, #0]
 80040ac:	f3bf 8f4f 	dsb	sy
 80040b0:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 80040b4:	f001 fdf0 	bl	8005c98 <vPortExitCritical>
				return pdPASS;
 80040b8:	2301      	movs	r3, #1
 80040ba:	e063      	b.n	8004184 <xQueueGenericSend+0x1e8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	2b00      	cmp	r3, #0
 80040c0:	d103      	bne.n	80040ca <xQueueGenericSend+0x12e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80040c2:	f001 fde9 	bl	8005c98 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 80040c6:	2300      	movs	r3, #0
 80040c8:	e05c      	b.n	8004184 <xQueueGenericSend+0x1e8>
				}
				else if( xEntryTimeSet == pdFALSE )
 80040ca:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80040cc:	2b00      	cmp	r3, #0
 80040ce:	d106      	bne.n	80040de <xQueueGenericSend+0x142>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80040d0:	f107 0314 	add.w	r3, r7, #20
 80040d4:	4618      	mov	r0, r3
 80040d6:	f001 f90d 	bl	80052f4 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80040da:	2301      	movs	r3, #1
 80040dc:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80040de:	f001 fddb 	bl	8005c98 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80040e2:	f000 fe9f 	bl	8004e24 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80040e6:	f001 fda9 	bl	8005c3c <vPortEnterCritical>
 80040ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80040ec:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80040f0:	b25b      	sxtb	r3, r3
 80040f2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80040f6:	d103      	bne.n	8004100 <xQueueGenericSend+0x164>
 80040f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80040fa:	2200      	movs	r2, #0
 80040fc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004100:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004102:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004106:	b25b      	sxtb	r3, r3
 8004108:	f1b3 3fff 	cmp.w	r3, #4294967295
 800410c:	d103      	bne.n	8004116 <xQueueGenericSend+0x17a>
 800410e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004110:	2200      	movs	r2, #0
 8004112:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004116:	f001 fdbf 	bl	8005c98 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800411a:	1d3a      	adds	r2, r7, #4
 800411c:	f107 0314 	add.w	r3, r7, #20
 8004120:	4611      	mov	r1, r2
 8004122:	4618      	mov	r0, r3
 8004124:	f001 f8fc 	bl	8005320 <xTaskCheckForTimeOut>
 8004128:	4603      	mov	r3, r0
 800412a:	2b00      	cmp	r3, #0
 800412c:	d124      	bne.n	8004178 <xQueueGenericSend+0x1dc>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800412e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8004130:	f000 fcbd 	bl	8004aae <prvIsQueueFull>
 8004134:	4603      	mov	r3, r0
 8004136:	2b00      	cmp	r3, #0
 8004138:	d018      	beq.n	800416c <xQueueGenericSend+0x1d0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800413a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800413c:	3310      	adds	r3, #16
 800413e:	687a      	ldr	r2, [r7, #4]
 8004140:	4611      	mov	r1, r2
 8004142:	4618      	mov	r0, r3
 8004144:	f001 f850 	bl	80051e8 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8004148:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800414a:	f000 fc48 	bl	80049de <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800414e:	f000 fe77 	bl	8004e40 <xTaskResumeAll>
 8004152:	4603      	mov	r3, r0
 8004154:	2b00      	cmp	r3, #0
 8004156:	f47f af7c 	bne.w	8004052 <xQueueGenericSend+0xb6>
				{
					portYIELD_WITHIN_API();
 800415a:	4b0c      	ldr	r3, [pc, #48]	; (800418c <xQueueGenericSend+0x1f0>)
 800415c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004160:	601a      	str	r2, [r3, #0]
 8004162:	f3bf 8f4f 	dsb	sy
 8004166:	f3bf 8f6f 	isb	sy
 800416a:	e772      	b.n	8004052 <xQueueGenericSend+0xb6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800416c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800416e:	f000 fc36 	bl	80049de <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8004172:	f000 fe65 	bl	8004e40 <xTaskResumeAll>
 8004176:	e76c      	b.n	8004052 <xQueueGenericSend+0xb6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8004178:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800417a:	f000 fc30 	bl	80049de <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800417e:	f000 fe5f 	bl	8004e40 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8004182:	2300      	movs	r3, #0
		}
	}
}
 8004184:	4618      	mov	r0, r3
 8004186:	3738      	adds	r7, #56	; 0x38
 8004188:	46bd      	mov	sp, r7
 800418a:	bd80      	pop	{r7, pc}
 800418c:	e000ed04 	.word	0xe000ed04

08004190 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8004190:	b580      	push	{r7, lr}
 8004192:	b08e      	sub	sp, #56	; 0x38
 8004194:	af00      	add	r7, sp, #0
 8004196:	60f8      	str	r0, [r7, #12]
 8004198:	60b9      	str	r1, [r7, #8]
 800419a:	607a      	str	r2, [r7, #4]
 800419c:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 800419e:	68fb      	ldr	r3, [r7, #12]
 80041a0:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 80041a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80041a4:	2b00      	cmp	r3, #0
 80041a6:	d109      	bne.n	80041bc <xQueueGenericSendFromISR+0x2c>
 80041a8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80041ac:	f383 8811 	msr	BASEPRI, r3
 80041b0:	f3bf 8f6f 	isb	sy
 80041b4:	f3bf 8f4f 	dsb	sy
 80041b8:	627b      	str	r3, [r7, #36]	; 0x24
 80041ba:	e7fe      	b.n	80041ba <xQueueGenericSendFromISR+0x2a>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80041bc:	68bb      	ldr	r3, [r7, #8]
 80041be:	2b00      	cmp	r3, #0
 80041c0:	d103      	bne.n	80041ca <xQueueGenericSendFromISR+0x3a>
 80041c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80041c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80041c6:	2b00      	cmp	r3, #0
 80041c8:	d101      	bne.n	80041ce <xQueueGenericSendFromISR+0x3e>
 80041ca:	2301      	movs	r3, #1
 80041cc:	e000      	b.n	80041d0 <xQueueGenericSendFromISR+0x40>
 80041ce:	2300      	movs	r3, #0
 80041d0:	2b00      	cmp	r3, #0
 80041d2:	d109      	bne.n	80041e8 <xQueueGenericSendFromISR+0x58>
 80041d4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80041d8:	f383 8811 	msr	BASEPRI, r3
 80041dc:	f3bf 8f6f 	isb	sy
 80041e0:	f3bf 8f4f 	dsb	sy
 80041e4:	623b      	str	r3, [r7, #32]
 80041e6:	e7fe      	b.n	80041e6 <xQueueGenericSendFromISR+0x56>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80041e8:	683b      	ldr	r3, [r7, #0]
 80041ea:	2b02      	cmp	r3, #2
 80041ec:	d103      	bne.n	80041f6 <xQueueGenericSendFromISR+0x66>
 80041ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80041f0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80041f2:	2b01      	cmp	r3, #1
 80041f4:	d101      	bne.n	80041fa <xQueueGenericSendFromISR+0x6a>
 80041f6:	2301      	movs	r3, #1
 80041f8:	e000      	b.n	80041fc <xQueueGenericSendFromISR+0x6c>
 80041fa:	2300      	movs	r3, #0
 80041fc:	2b00      	cmp	r3, #0
 80041fe:	d109      	bne.n	8004214 <xQueueGenericSendFromISR+0x84>
 8004200:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004204:	f383 8811 	msr	BASEPRI, r3
 8004208:	f3bf 8f6f 	isb	sy
 800420c:	f3bf 8f4f 	dsb	sy
 8004210:	61fb      	str	r3, [r7, #28]
 8004212:	e7fe      	b.n	8004212 <xQueueGenericSendFromISR+0x82>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8004214:	f001 fdee 	bl	8005df4 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8004218:	f3ef 8211 	mrs	r2, BASEPRI
 800421c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004220:	f383 8811 	msr	BASEPRI, r3
 8004224:	f3bf 8f6f 	isb	sy
 8004228:	f3bf 8f4f 	dsb	sy
 800422c:	61ba      	str	r2, [r7, #24]
 800422e:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8004230:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8004232:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8004234:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004236:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004238:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800423a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800423c:	429a      	cmp	r2, r3
 800423e:	d302      	bcc.n	8004246 <xQueueGenericSendFromISR+0xb6>
 8004240:	683b      	ldr	r3, [r7, #0]
 8004242:	2b02      	cmp	r3, #2
 8004244:	d12c      	bne.n	80042a0 <xQueueGenericSendFromISR+0x110>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8004246:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004248:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800424c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8004250:	683a      	ldr	r2, [r7, #0]
 8004252:	68b9      	ldr	r1, [r7, #8]
 8004254:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8004256:	f000 fb32 	bl	80048be <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800425a:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 800425e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004262:	d112      	bne.n	800428a <xQueueGenericSendFromISR+0xfa>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8004264:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004266:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004268:	2b00      	cmp	r3, #0
 800426a:	d016      	beq.n	800429a <xQueueGenericSendFromISR+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800426c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800426e:	3324      	adds	r3, #36	; 0x24
 8004270:	4618      	mov	r0, r3
 8004272:	f000 ffdd 	bl	8005230 <xTaskRemoveFromEventList>
 8004276:	4603      	mov	r3, r0
 8004278:	2b00      	cmp	r3, #0
 800427a:	d00e      	beq.n	800429a <xQueueGenericSendFromISR+0x10a>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	2b00      	cmp	r3, #0
 8004280:	d00b      	beq.n	800429a <xQueueGenericSendFromISR+0x10a>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8004282:	687b      	ldr	r3, [r7, #4]
 8004284:	2201      	movs	r2, #1
 8004286:	601a      	str	r2, [r3, #0]
 8004288:	e007      	b.n	800429a <xQueueGenericSendFromISR+0x10a>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800428a:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800428e:	3301      	adds	r3, #1
 8004290:	b2db      	uxtb	r3, r3
 8004292:	b25a      	sxtb	r2, r3
 8004294:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004296:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800429a:	2301      	movs	r3, #1
 800429c:	637b      	str	r3, [r7, #52]	; 0x34
		{
 800429e:	e001      	b.n	80042a4 <xQueueGenericSendFromISR+0x114>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 80042a0:	2300      	movs	r3, #0
 80042a2:	637b      	str	r3, [r7, #52]	; 0x34
 80042a4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80042a6:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 80042a8:	693b      	ldr	r3, [r7, #16]
 80042aa:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80042ae:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 80042b0:	4618      	mov	r0, r3
 80042b2:	3738      	adds	r7, #56	; 0x38
 80042b4:	46bd      	mov	sp, r7
 80042b6:	bd80      	pop	{r7, pc}

080042b8 <xQueueGiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 80042b8:	b580      	push	{r7, lr}
 80042ba:	b08e      	sub	sp, #56	; 0x38
 80042bc:	af00      	add	r7, sp, #0
 80042be:	6078      	str	r0, [r7, #4]
 80042c0:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 80042c2:	687b      	ldr	r3, [r7, #4]
 80042c4:	633b      	str	r3, [r7, #48]	; 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 80042c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80042c8:	2b00      	cmp	r3, #0
 80042ca:	d109      	bne.n	80042e0 <xQueueGiveFromISR+0x28>
	__asm volatile
 80042cc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80042d0:	f383 8811 	msr	BASEPRI, r3
 80042d4:	f3bf 8f6f 	isb	sy
 80042d8:	f3bf 8f4f 	dsb	sy
 80042dc:	623b      	str	r3, [r7, #32]
 80042de:	e7fe      	b.n	80042de <xQueueGiveFromISR+0x26>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 80042e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80042e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80042e4:	2b00      	cmp	r3, #0
 80042e6:	d009      	beq.n	80042fc <xQueueGiveFromISR+0x44>
 80042e8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80042ec:	f383 8811 	msr	BASEPRI, r3
 80042f0:	f3bf 8f6f 	isb	sy
 80042f4:	f3bf 8f4f 	dsb	sy
 80042f8:	61fb      	str	r3, [r7, #28]
 80042fa:	e7fe      	b.n	80042fa <xQueueGiveFromISR+0x42>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->pxMutexHolder != NULL ) ) );
 80042fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80042fe:	681b      	ldr	r3, [r3, #0]
 8004300:	2b00      	cmp	r3, #0
 8004302:	d103      	bne.n	800430c <xQueueGiveFromISR+0x54>
 8004304:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004306:	685b      	ldr	r3, [r3, #4]
 8004308:	2b00      	cmp	r3, #0
 800430a:	d101      	bne.n	8004310 <xQueueGiveFromISR+0x58>
 800430c:	2301      	movs	r3, #1
 800430e:	e000      	b.n	8004312 <xQueueGiveFromISR+0x5a>
 8004310:	2300      	movs	r3, #0
 8004312:	2b00      	cmp	r3, #0
 8004314:	d109      	bne.n	800432a <xQueueGiveFromISR+0x72>
 8004316:	f04f 0350 	mov.w	r3, #80	; 0x50
 800431a:	f383 8811 	msr	BASEPRI, r3
 800431e:	f3bf 8f6f 	isb	sy
 8004322:	f3bf 8f4f 	dsb	sy
 8004326:	61bb      	str	r3, [r7, #24]
 8004328:	e7fe      	b.n	8004328 <xQueueGiveFromISR+0x70>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800432a:	f001 fd63 	bl	8005df4 <vPortValidateInterruptPriority>
	__asm volatile
 800432e:	f3ef 8211 	mrs	r2, BASEPRI
 8004332:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004336:	f383 8811 	msr	BASEPRI, r3
 800433a:	f3bf 8f6f 	isb	sy
 800433e:	f3bf 8f4f 	dsb	sy
 8004342:	617a      	str	r2, [r7, #20]
 8004344:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 8004346:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8004348:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800434a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800434c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800434e:	62bb      	str	r3, [r7, #40]	; 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 8004350:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004352:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004354:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004356:	429a      	cmp	r2, r3
 8004358:	d22b      	bcs.n	80043b2 <xQueueGiveFromISR+0xfa>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800435a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800435c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004360:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8004364:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004366:	1c5a      	adds	r2, r3, #1
 8004368:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800436a:	639a      	str	r2, [r3, #56]	; 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800436c:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8004370:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004374:	d112      	bne.n	800439c <xQueueGiveFromISR+0xe4>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8004376:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004378:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800437a:	2b00      	cmp	r3, #0
 800437c:	d016      	beq.n	80043ac <xQueueGiveFromISR+0xf4>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800437e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004380:	3324      	adds	r3, #36	; 0x24
 8004382:	4618      	mov	r0, r3
 8004384:	f000 ff54 	bl	8005230 <xTaskRemoveFromEventList>
 8004388:	4603      	mov	r3, r0
 800438a:	2b00      	cmp	r3, #0
 800438c:	d00e      	beq.n	80043ac <xQueueGiveFromISR+0xf4>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800438e:	683b      	ldr	r3, [r7, #0]
 8004390:	2b00      	cmp	r3, #0
 8004392:	d00b      	beq.n	80043ac <xQueueGiveFromISR+0xf4>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8004394:	683b      	ldr	r3, [r7, #0]
 8004396:	2201      	movs	r2, #1
 8004398:	601a      	str	r2, [r3, #0]
 800439a:	e007      	b.n	80043ac <xQueueGiveFromISR+0xf4>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800439c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80043a0:	3301      	adds	r3, #1
 80043a2:	b2db      	uxtb	r3, r3
 80043a4:	b25a      	sxtb	r2, r3
 80043a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80043a8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 80043ac:	2301      	movs	r3, #1
 80043ae:	637b      	str	r3, [r7, #52]	; 0x34
 80043b0:	e001      	b.n	80043b6 <xQueueGiveFromISR+0xfe>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 80043b2:	2300      	movs	r3, #0
 80043b4:	637b      	str	r3, [r7, #52]	; 0x34
 80043b6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80043b8:	60fb      	str	r3, [r7, #12]
	__asm volatile
 80043ba:	68fb      	ldr	r3, [r7, #12]
 80043bc:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80043c0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 80043c2:	4618      	mov	r0, r3
 80043c4:	3738      	adds	r7, #56	; 0x38
 80043c6:	46bd      	mov	sp, r7
 80043c8:	bd80      	pop	{r7, pc}
	...

080043cc <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 80043cc:	b580      	push	{r7, lr}
 80043ce:	b08c      	sub	sp, #48	; 0x30
 80043d0:	af00      	add	r7, sp, #0
 80043d2:	60f8      	str	r0, [r7, #12]
 80043d4:	60b9      	str	r1, [r7, #8]
 80043d6:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 80043d8:	2300      	movs	r3, #0
 80043da:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 80043dc:	68fb      	ldr	r3, [r7, #12]
 80043de:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 80043e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80043e2:	2b00      	cmp	r3, #0
 80043e4:	d109      	bne.n	80043fa <xQueueReceive+0x2e>
	__asm volatile
 80043e6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80043ea:	f383 8811 	msr	BASEPRI, r3
 80043ee:	f3bf 8f6f 	isb	sy
 80043f2:	f3bf 8f4f 	dsb	sy
 80043f6:	623b      	str	r3, [r7, #32]
 80043f8:	e7fe      	b.n	80043f8 <xQueueReceive+0x2c>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80043fa:	68bb      	ldr	r3, [r7, #8]
 80043fc:	2b00      	cmp	r3, #0
 80043fe:	d103      	bne.n	8004408 <xQueueReceive+0x3c>
 8004400:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004402:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004404:	2b00      	cmp	r3, #0
 8004406:	d101      	bne.n	800440c <xQueueReceive+0x40>
 8004408:	2301      	movs	r3, #1
 800440a:	e000      	b.n	800440e <xQueueReceive+0x42>
 800440c:	2300      	movs	r3, #0
 800440e:	2b00      	cmp	r3, #0
 8004410:	d109      	bne.n	8004426 <xQueueReceive+0x5a>
 8004412:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004416:	f383 8811 	msr	BASEPRI, r3
 800441a:	f3bf 8f6f 	isb	sy
 800441e:	f3bf 8f4f 	dsb	sy
 8004422:	61fb      	str	r3, [r7, #28]
 8004424:	e7fe      	b.n	8004424 <xQueueReceive+0x58>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8004426:	f001 f8a1 	bl	800556c <xTaskGetSchedulerState>
 800442a:	4603      	mov	r3, r0
 800442c:	2b00      	cmp	r3, #0
 800442e:	d102      	bne.n	8004436 <xQueueReceive+0x6a>
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	2b00      	cmp	r3, #0
 8004434:	d101      	bne.n	800443a <xQueueReceive+0x6e>
 8004436:	2301      	movs	r3, #1
 8004438:	e000      	b.n	800443c <xQueueReceive+0x70>
 800443a:	2300      	movs	r3, #0
 800443c:	2b00      	cmp	r3, #0
 800443e:	d109      	bne.n	8004454 <xQueueReceive+0x88>
 8004440:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004444:	f383 8811 	msr	BASEPRI, r3
 8004448:	f3bf 8f6f 	isb	sy
 800444c:	f3bf 8f4f 	dsb	sy
 8004450:	61bb      	str	r3, [r7, #24]
 8004452:	e7fe      	b.n	8004452 <xQueueReceive+0x86>
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
 8004454:	f001 fbf2 	bl	8005c3c <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8004458:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800445a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800445c:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800445e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004460:	2b00      	cmp	r3, #0
 8004462:	d01f      	beq.n	80044a4 <xQueueReceive+0xd8>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8004464:	68b9      	ldr	r1, [r7, #8]
 8004466:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004468:	f000 fa93 	bl	8004992 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800446c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800446e:	1e5a      	subs	r2, r3, #1
 8004470:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004472:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8004474:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004476:	691b      	ldr	r3, [r3, #16]
 8004478:	2b00      	cmp	r3, #0
 800447a:	d00f      	beq.n	800449c <xQueueReceive+0xd0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800447c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800447e:	3310      	adds	r3, #16
 8004480:	4618      	mov	r0, r3
 8004482:	f000 fed5 	bl	8005230 <xTaskRemoveFromEventList>
 8004486:	4603      	mov	r3, r0
 8004488:	2b00      	cmp	r3, #0
 800448a:	d007      	beq.n	800449c <xQueueReceive+0xd0>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800448c:	4b3c      	ldr	r3, [pc, #240]	; (8004580 <xQueueReceive+0x1b4>)
 800448e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004492:	601a      	str	r2, [r3, #0]
 8004494:	f3bf 8f4f 	dsb	sy
 8004498:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800449c:	f001 fbfc 	bl	8005c98 <vPortExitCritical>
				return pdPASS;
 80044a0:	2301      	movs	r3, #1
 80044a2:	e069      	b.n	8004578 <xQueueReceive+0x1ac>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	2b00      	cmp	r3, #0
 80044a8:	d103      	bne.n	80044b2 <xQueueReceive+0xe6>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80044aa:	f001 fbf5 	bl	8005c98 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 80044ae:	2300      	movs	r3, #0
 80044b0:	e062      	b.n	8004578 <xQueueReceive+0x1ac>
				}
				else if( xEntryTimeSet == pdFALSE )
 80044b2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80044b4:	2b00      	cmp	r3, #0
 80044b6:	d106      	bne.n	80044c6 <xQueueReceive+0xfa>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80044b8:	f107 0310 	add.w	r3, r7, #16
 80044bc:	4618      	mov	r0, r3
 80044be:	f000 ff19 	bl	80052f4 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80044c2:	2301      	movs	r3, #1
 80044c4:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80044c6:	f001 fbe7 	bl	8005c98 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80044ca:	f000 fcab 	bl	8004e24 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80044ce:	f001 fbb5 	bl	8005c3c <vPortEnterCritical>
 80044d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80044d4:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80044d8:	b25b      	sxtb	r3, r3
 80044da:	f1b3 3fff 	cmp.w	r3, #4294967295
 80044de:	d103      	bne.n	80044e8 <xQueueReceive+0x11c>
 80044e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80044e2:	2200      	movs	r2, #0
 80044e4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80044e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80044ea:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80044ee:	b25b      	sxtb	r3, r3
 80044f0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80044f4:	d103      	bne.n	80044fe <xQueueReceive+0x132>
 80044f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80044f8:	2200      	movs	r2, #0
 80044fa:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80044fe:	f001 fbcb 	bl	8005c98 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8004502:	1d3a      	adds	r2, r7, #4
 8004504:	f107 0310 	add.w	r3, r7, #16
 8004508:	4611      	mov	r1, r2
 800450a:	4618      	mov	r0, r3
 800450c:	f000 ff08 	bl	8005320 <xTaskCheckForTimeOut>
 8004510:	4603      	mov	r3, r0
 8004512:	2b00      	cmp	r3, #0
 8004514:	d123      	bne.n	800455e <xQueueReceive+0x192>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8004516:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004518:	f000 fab3 	bl	8004a82 <prvIsQueueEmpty>
 800451c:	4603      	mov	r3, r0
 800451e:	2b00      	cmp	r3, #0
 8004520:	d017      	beq.n	8004552 <xQueueReceive+0x186>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8004522:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004524:	3324      	adds	r3, #36	; 0x24
 8004526:	687a      	ldr	r2, [r7, #4]
 8004528:	4611      	mov	r1, r2
 800452a:	4618      	mov	r0, r3
 800452c:	f000 fe5c 	bl	80051e8 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8004530:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004532:	f000 fa54 	bl	80049de <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8004536:	f000 fc83 	bl	8004e40 <xTaskResumeAll>
 800453a:	4603      	mov	r3, r0
 800453c:	2b00      	cmp	r3, #0
 800453e:	d189      	bne.n	8004454 <xQueueReceive+0x88>
				{
					portYIELD_WITHIN_API();
 8004540:	4b0f      	ldr	r3, [pc, #60]	; (8004580 <xQueueReceive+0x1b4>)
 8004542:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004546:	601a      	str	r2, [r3, #0]
 8004548:	f3bf 8f4f 	dsb	sy
 800454c:	f3bf 8f6f 	isb	sy
 8004550:	e780      	b.n	8004454 <xQueueReceive+0x88>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8004552:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004554:	f000 fa43 	bl	80049de <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8004558:	f000 fc72 	bl	8004e40 <xTaskResumeAll>
 800455c:	e77a      	b.n	8004454 <xQueueReceive+0x88>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800455e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004560:	f000 fa3d 	bl	80049de <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8004564:	f000 fc6c 	bl	8004e40 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8004568:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800456a:	f000 fa8a 	bl	8004a82 <prvIsQueueEmpty>
 800456e:	4603      	mov	r3, r0
 8004570:	2b00      	cmp	r3, #0
 8004572:	f43f af6f 	beq.w	8004454 <xQueueReceive+0x88>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8004576:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
}
 8004578:	4618      	mov	r0, r3
 800457a:	3730      	adds	r7, #48	; 0x30
 800457c:	46bd      	mov	sp, r7
 800457e:	bd80      	pop	{r7, pc}
 8004580:	e000ed04 	.word	0xe000ed04

08004584 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 8004584:	b580      	push	{r7, lr}
 8004586:	b08e      	sub	sp, #56	; 0x38
 8004588:	af00      	add	r7, sp, #0
 800458a:	6078      	str	r0, [r7, #4]
 800458c:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 800458e:	2300      	movs	r3, #0
 8004590:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8004592:	687b      	ldr	r3, [r7, #4]
 8004594:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 8004596:	2300      	movs	r3, #0
 8004598:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800459a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800459c:	2b00      	cmp	r3, #0
 800459e:	d109      	bne.n	80045b4 <xQueueSemaphoreTake+0x30>
 80045a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80045a4:	f383 8811 	msr	BASEPRI, r3
 80045a8:	f3bf 8f6f 	isb	sy
 80045ac:	f3bf 8f4f 	dsb	sy
 80045b0:	623b      	str	r3, [r7, #32]
 80045b2:	e7fe      	b.n	80045b2 <xQueueSemaphoreTake+0x2e>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 80045b4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80045b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80045b8:	2b00      	cmp	r3, #0
 80045ba:	d009      	beq.n	80045d0 <xQueueSemaphoreTake+0x4c>
 80045bc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80045c0:	f383 8811 	msr	BASEPRI, r3
 80045c4:	f3bf 8f6f 	isb	sy
 80045c8:	f3bf 8f4f 	dsb	sy
 80045cc:	61fb      	str	r3, [r7, #28]
 80045ce:	e7fe      	b.n	80045ce <xQueueSemaphoreTake+0x4a>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80045d0:	f000 ffcc 	bl	800556c <xTaskGetSchedulerState>
 80045d4:	4603      	mov	r3, r0
 80045d6:	2b00      	cmp	r3, #0
 80045d8:	d102      	bne.n	80045e0 <xQueueSemaphoreTake+0x5c>
 80045da:	683b      	ldr	r3, [r7, #0]
 80045dc:	2b00      	cmp	r3, #0
 80045de:	d101      	bne.n	80045e4 <xQueueSemaphoreTake+0x60>
 80045e0:	2301      	movs	r3, #1
 80045e2:	e000      	b.n	80045e6 <xQueueSemaphoreTake+0x62>
 80045e4:	2300      	movs	r3, #0
 80045e6:	2b00      	cmp	r3, #0
 80045e8:	d109      	bne.n	80045fe <xQueueSemaphoreTake+0x7a>
 80045ea:	f04f 0350 	mov.w	r3, #80	; 0x50
 80045ee:	f383 8811 	msr	BASEPRI, r3
 80045f2:	f3bf 8f6f 	isb	sy
 80045f6:	f3bf 8f4f 	dsb	sy
 80045fa:	61bb      	str	r3, [r7, #24]
 80045fc:	e7fe      	b.n	80045fc <xQueueSemaphoreTake+0x78>
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
 80045fe:	f001 fb1d 	bl	8005c3c <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 8004602:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004604:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004606:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 8004608:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800460a:	2b00      	cmp	r3, #0
 800460c:	d024      	beq.n	8004658 <xQueueSemaphoreTake+0xd4>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 800460e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004610:	1e5a      	subs	r2, r3, #1
 8004612:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004614:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8004616:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004618:	681b      	ldr	r3, [r3, #0]
 800461a:	2b00      	cmp	r3, #0
 800461c:	d104      	bne.n	8004628 <xQueueSemaphoreTake+0xa4>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->pxMutexHolder = ( int8_t * ) pvTaskIncrementMutexHeldCount(); /*lint !e961 Cast is not redundant as TaskHandle_t is a typedef. */
 800461e:	f001 f96b 	bl	80058f8 <pvTaskIncrementMutexHeldCount>
 8004622:	4602      	mov	r2, r0
 8004624:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004626:	605a      	str	r2, [r3, #4]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8004628:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800462a:	691b      	ldr	r3, [r3, #16]
 800462c:	2b00      	cmp	r3, #0
 800462e:	d00f      	beq.n	8004650 <xQueueSemaphoreTake+0xcc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8004630:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004632:	3310      	adds	r3, #16
 8004634:	4618      	mov	r0, r3
 8004636:	f000 fdfb 	bl	8005230 <xTaskRemoveFromEventList>
 800463a:	4603      	mov	r3, r0
 800463c:	2b00      	cmp	r3, #0
 800463e:	d007      	beq.n	8004650 <xQueueSemaphoreTake+0xcc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8004640:	4b53      	ldr	r3, [pc, #332]	; (8004790 <xQueueSemaphoreTake+0x20c>)
 8004642:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004646:	601a      	str	r2, [r3, #0]
 8004648:	f3bf 8f4f 	dsb	sy
 800464c:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8004650:	f001 fb22 	bl	8005c98 <vPortExitCritical>
				return pdPASS;
 8004654:	2301      	movs	r3, #1
 8004656:	e096      	b.n	8004786 <xQueueSemaphoreTake+0x202>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8004658:	683b      	ldr	r3, [r7, #0]
 800465a:	2b00      	cmp	r3, #0
 800465c:	d110      	bne.n	8004680 <xQueueSemaphoreTake+0xfc>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 800465e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004660:	2b00      	cmp	r3, #0
 8004662:	d009      	beq.n	8004678 <xQueueSemaphoreTake+0xf4>
 8004664:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004668:	f383 8811 	msr	BASEPRI, r3
 800466c:	f3bf 8f6f 	isb	sy
 8004670:	f3bf 8f4f 	dsb	sy
 8004674:	617b      	str	r3, [r7, #20]
 8004676:	e7fe      	b.n	8004676 <xQueueSemaphoreTake+0xf2>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 8004678:	f001 fb0e 	bl	8005c98 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800467c:	2300      	movs	r3, #0
 800467e:	e082      	b.n	8004786 <xQueueSemaphoreTake+0x202>
				}
				else if( xEntryTimeSet == pdFALSE )
 8004680:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004682:	2b00      	cmp	r3, #0
 8004684:	d106      	bne.n	8004694 <xQueueSemaphoreTake+0x110>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8004686:	f107 030c 	add.w	r3, r7, #12
 800468a:	4618      	mov	r0, r3
 800468c:	f000 fe32 	bl	80052f4 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8004690:	2301      	movs	r3, #1
 8004692:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8004694:	f001 fb00 	bl	8005c98 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 8004698:	f000 fbc4 	bl	8004e24 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800469c:	f001 face 	bl	8005c3c <vPortEnterCritical>
 80046a0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80046a2:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80046a6:	b25b      	sxtb	r3, r3
 80046a8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80046ac:	d103      	bne.n	80046b6 <xQueueSemaphoreTake+0x132>
 80046ae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80046b0:	2200      	movs	r2, #0
 80046b2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80046b6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80046b8:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80046bc:	b25b      	sxtb	r3, r3
 80046be:	f1b3 3fff 	cmp.w	r3, #4294967295
 80046c2:	d103      	bne.n	80046cc <xQueueSemaphoreTake+0x148>
 80046c4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80046c6:	2200      	movs	r2, #0
 80046c8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80046cc:	f001 fae4 	bl	8005c98 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80046d0:	463a      	mov	r2, r7
 80046d2:	f107 030c 	add.w	r3, r7, #12
 80046d6:	4611      	mov	r1, r2
 80046d8:	4618      	mov	r0, r3
 80046da:	f000 fe21 	bl	8005320 <xTaskCheckForTimeOut>
 80046de:	4603      	mov	r3, r0
 80046e0:	2b00      	cmp	r3, #0
 80046e2:	d132      	bne.n	800474a <xQueueSemaphoreTake+0x1c6>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80046e4:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80046e6:	f000 f9cc 	bl	8004a82 <prvIsQueueEmpty>
 80046ea:	4603      	mov	r3, r0
 80046ec:	2b00      	cmp	r3, #0
 80046ee:	d026      	beq.n	800473e <xQueueSemaphoreTake+0x1ba>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80046f0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80046f2:	681b      	ldr	r3, [r3, #0]
 80046f4:	2b00      	cmp	r3, #0
 80046f6:	d109      	bne.n	800470c <xQueueSemaphoreTake+0x188>
					{
						taskENTER_CRITICAL();
 80046f8:	f001 faa0 	bl	8005c3c <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( ( void * ) pxQueue->pxMutexHolder );
 80046fc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80046fe:	685b      	ldr	r3, [r3, #4]
 8004700:	4618      	mov	r0, r3
 8004702:	f000 ff51 	bl	80055a8 <xTaskPriorityInherit>
 8004706:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 8004708:	f001 fac6 	bl	8005c98 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800470c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800470e:	3324      	adds	r3, #36	; 0x24
 8004710:	683a      	ldr	r2, [r7, #0]
 8004712:	4611      	mov	r1, r2
 8004714:	4618      	mov	r0, r3
 8004716:	f000 fd67 	bl	80051e8 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800471a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800471c:	f000 f95f 	bl	80049de <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8004720:	f000 fb8e 	bl	8004e40 <xTaskResumeAll>
 8004724:	4603      	mov	r3, r0
 8004726:	2b00      	cmp	r3, #0
 8004728:	f47f af69 	bne.w	80045fe <xQueueSemaphoreTake+0x7a>
				{
					portYIELD_WITHIN_API();
 800472c:	4b18      	ldr	r3, [pc, #96]	; (8004790 <xQueueSemaphoreTake+0x20c>)
 800472e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004732:	601a      	str	r2, [r3, #0]
 8004734:	f3bf 8f4f 	dsb	sy
 8004738:	f3bf 8f6f 	isb	sy
 800473c:	e75f      	b.n	80045fe <xQueueSemaphoreTake+0x7a>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 800473e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8004740:	f000 f94d 	bl	80049de <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8004744:	f000 fb7c 	bl	8004e40 <xTaskResumeAll>
 8004748:	e759      	b.n	80045fe <xQueueSemaphoreTake+0x7a>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 800474a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800474c:	f000 f947 	bl	80049de <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8004750:	f000 fb76 	bl	8004e40 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8004754:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8004756:	f000 f994 	bl	8004a82 <prvIsQueueEmpty>
 800475a:	4603      	mov	r3, r0
 800475c:	2b00      	cmp	r3, #0
 800475e:	f43f af4e 	beq.w	80045fe <xQueueSemaphoreTake+0x7a>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 8004762:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004764:	2b00      	cmp	r3, #0
 8004766:	d00d      	beq.n	8004784 <xQueueSemaphoreTake+0x200>
					{
						taskENTER_CRITICAL();
 8004768:	f001 fa68 	bl	8005c3c <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 800476c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800476e:	f000 f88e 	bl	800488e <prvGetDisinheritPriorityAfterTimeout>
 8004772:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( ( void * ) pxQueue->pxMutexHolder, uxHighestWaitingPriority );
 8004774:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004776:	685b      	ldr	r3, [r3, #4]
 8004778:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800477a:	4618      	mov	r0, r3
 800477c:	f001 f81e 	bl	80057bc <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 8004780:	f001 fa8a 	bl	8005c98 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8004784:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
}
 8004786:	4618      	mov	r0, r3
 8004788:	3738      	adds	r7, #56	; 0x38
 800478a:	46bd      	mov	sp, r7
 800478c:	bd80      	pop	{r7, pc}
 800478e:	bf00      	nop
 8004790:	e000ed04 	.word	0xe000ed04

08004794 <xQueueReceiveFromISR>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8004794:	b580      	push	{r7, lr}
 8004796:	b08e      	sub	sp, #56	; 0x38
 8004798:	af00      	add	r7, sp, #0
 800479a:	60f8      	str	r0, [r7, #12]
 800479c:	60b9      	str	r1, [r7, #8]
 800479e:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 80047a0:	68fb      	ldr	r3, [r7, #12]
 80047a2:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 80047a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80047a6:	2b00      	cmp	r3, #0
 80047a8:	d109      	bne.n	80047be <xQueueReceiveFromISR+0x2a>
 80047aa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80047ae:	f383 8811 	msr	BASEPRI, r3
 80047b2:	f3bf 8f6f 	isb	sy
 80047b6:	f3bf 8f4f 	dsb	sy
 80047ba:	623b      	str	r3, [r7, #32]
 80047bc:	e7fe      	b.n	80047bc <xQueueReceiveFromISR+0x28>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80047be:	68bb      	ldr	r3, [r7, #8]
 80047c0:	2b00      	cmp	r3, #0
 80047c2:	d103      	bne.n	80047cc <xQueueReceiveFromISR+0x38>
 80047c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80047c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80047c8:	2b00      	cmp	r3, #0
 80047ca:	d101      	bne.n	80047d0 <xQueueReceiveFromISR+0x3c>
 80047cc:	2301      	movs	r3, #1
 80047ce:	e000      	b.n	80047d2 <xQueueReceiveFromISR+0x3e>
 80047d0:	2300      	movs	r3, #0
 80047d2:	2b00      	cmp	r3, #0
 80047d4:	d109      	bne.n	80047ea <xQueueReceiveFromISR+0x56>
 80047d6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80047da:	f383 8811 	msr	BASEPRI, r3
 80047de:	f3bf 8f6f 	isb	sy
 80047e2:	f3bf 8f4f 	dsb	sy
 80047e6:	61fb      	str	r3, [r7, #28]
 80047e8:	e7fe      	b.n	80047e8 <xQueueReceiveFromISR+0x54>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80047ea:	f001 fb03 	bl	8005df4 <vPortValidateInterruptPriority>
	__asm volatile
 80047ee:	f3ef 8211 	mrs	r2, BASEPRI
 80047f2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80047f6:	f383 8811 	msr	BASEPRI, r3
 80047fa:	f3bf 8f6f 	isb	sy
 80047fe:	f3bf 8f4f 	dsb	sy
 8004802:	61ba      	str	r2, [r7, #24]
 8004804:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 8004806:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8004808:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800480a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800480c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800480e:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8004810:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004812:	2b00      	cmp	r3, #0
 8004814:	d02f      	beq.n	8004876 <xQueueReceiveFromISR+0xe2>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 8004816:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004818:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800481c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 8004820:	68b9      	ldr	r1, [r7, #8]
 8004822:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8004824:	f000 f8b5 	bl	8004992 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8004828:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800482a:	1e5a      	subs	r2, r3, #1
 800482c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800482e:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 8004830:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8004834:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004838:	d112      	bne.n	8004860 <xQueueReceiveFromISR+0xcc>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800483a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800483c:	691b      	ldr	r3, [r3, #16]
 800483e:	2b00      	cmp	r3, #0
 8004840:	d016      	beq.n	8004870 <xQueueReceiveFromISR+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8004842:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004844:	3310      	adds	r3, #16
 8004846:	4618      	mov	r0, r3
 8004848:	f000 fcf2 	bl	8005230 <xTaskRemoveFromEventList>
 800484c:	4603      	mov	r3, r0
 800484e:	2b00      	cmp	r3, #0
 8004850:	d00e      	beq.n	8004870 <xQueueReceiveFromISR+0xdc>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 8004852:	687b      	ldr	r3, [r7, #4]
 8004854:	2b00      	cmp	r3, #0
 8004856:	d00b      	beq.n	8004870 <xQueueReceiveFromISR+0xdc>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 8004858:	687b      	ldr	r3, [r7, #4]
 800485a:	2201      	movs	r2, #1
 800485c:	601a      	str	r2, [r3, #0]
 800485e:	e007      	b.n	8004870 <xQueueReceiveFromISR+0xdc>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 8004860:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8004864:	3301      	adds	r3, #1
 8004866:	b2db      	uxtb	r3, r3
 8004868:	b25a      	sxtb	r2, r3
 800486a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800486c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 8004870:	2301      	movs	r3, #1
 8004872:	637b      	str	r3, [r7, #52]	; 0x34
 8004874:	e001      	b.n	800487a <xQueueReceiveFromISR+0xe6>
		}
		else
		{
			xReturn = pdFAIL;
 8004876:	2300      	movs	r3, #0
 8004878:	637b      	str	r3, [r7, #52]	; 0x34
 800487a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800487c:	613b      	str	r3, [r7, #16]
	__asm volatile
 800487e:	693b      	ldr	r3, [r7, #16]
 8004880:	f383 8811 	msr	BASEPRI, r3
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8004884:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8004886:	4618      	mov	r0, r3
 8004888:	3738      	adds	r7, #56	; 0x38
 800488a:	46bd      	mov	sp, r7
 800488c:	bd80      	pop	{r7, pc}

0800488e <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 800488e:	b480      	push	{r7}
 8004890:	b085      	sub	sp, #20
 8004892:	af00      	add	r7, sp, #0
 8004894:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0 )
 8004896:	687b      	ldr	r3, [r7, #4]
 8004898:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800489a:	2b00      	cmp	r3, #0
 800489c:	d006      	beq.n	80048ac <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = configMAX_PRIORITIES - listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 800489e:	687b      	ldr	r3, [r7, #4]
 80048a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80048a2:	681b      	ldr	r3, [r3, #0]
 80048a4:	f1c3 0320 	rsb	r3, r3, #32
 80048a8:	60fb      	str	r3, [r7, #12]
 80048aa:	e001      	b.n	80048b0 <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 80048ac:	2300      	movs	r3, #0
 80048ae:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 80048b0:	68fb      	ldr	r3, [r7, #12]
	}
 80048b2:	4618      	mov	r0, r3
 80048b4:	3714      	adds	r7, #20
 80048b6:	46bd      	mov	sp, r7
 80048b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048bc:	4770      	bx	lr

080048be <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 80048be:	b580      	push	{r7, lr}
 80048c0:	b086      	sub	sp, #24
 80048c2:	af00      	add	r7, sp, #0
 80048c4:	60f8      	str	r0, [r7, #12]
 80048c6:	60b9      	str	r1, [r7, #8]
 80048c8:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 80048ca:	2300      	movs	r3, #0
 80048cc:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80048ce:	68fb      	ldr	r3, [r7, #12]
 80048d0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80048d2:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 80048d4:	68fb      	ldr	r3, [r7, #12]
 80048d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80048d8:	2b00      	cmp	r3, #0
 80048da:	d10d      	bne.n	80048f8 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80048dc:	68fb      	ldr	r3, [r7, #12]
 80048de:	681b      	ldr	r3, [r3, #0]
 80048e0:	2b00      	cmp	r3, #0
 80048e2:	d14d      	bne.n	8004980 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
 80048e4:	68fb      	ldr	r3, [r7, #12]
 80048e6:	685b      	ldr	r3, [r3, #4]
 80048e8:	4618      	mov	r0, r3
 80048ea:	f000 fee3 	bl	80056b4 <xTaskPriorityDisinherit>
 80048ee:	6178      	str	r0, [r7, #20]
				pxQueue->pxMutexHolder = NULL;
 80048f0:	68fb      	ldr	r3, [r7, #12]
 80048f2:	2200      	movs	r2, #0
 80048f4:	605a      	str	r2, [r3, #4]
 80048f6:	e043      	b.n	8004980 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 80048f8:	687b      	ldr	r3, [r7, #4]
 80048fa:	2b00      	cmp	r3, #0
 80048fc:	d119      	bne.n	8004932 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0. */
 80048fe:	68fb      	ldr	r3, [r7, #12]
 8004900:	6898      	ldr	r0, [r3, #8]
 8004902:	68fb      	ldr	r3, [r7, #12]
 8004904:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004906:	461a      	mov	r2, r3
 8004908:	68b9      	ldr	r1, [r7, #8]
 800490a:	f00b fdfe 	bl	801050a <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
 800490e:	68fb      	ldr	r3, [r7, #12]
 8004910:	689a      	ldr	r2, [r3, #8]
 8004912:	68fb      	ldr	r3, [r7, #12]
 8004914:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004916:	441a      	add	r2, r3
 8004918:	68fb      	ldr	r3, [r7, #12]
 800491a:	609a      	str	r2, [r3, #8]
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800491c:	68fb      	ldr	r3, [r7, #12]
 800491e:	689a      	ldr	r2, [r3, #8]
 8004920:	68fb      	ldr	r3, [r7, #12]
 8004922:	685b      	ldr	r3, [r3, #4]
 8004924:	429a      	cmp	r2, r3
 8004926:	d32b      	bcc.n	8004980 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8004928:	68fb      	ldr	r3, [r7, #12]
 800492a:	681a      	ldr	r2, [r3, #0]
 800492c:	68fb      	ldr	r3, [r7, #12]
 800492e:	609a      	str	r2, [r3, #8]
 8004930:	e026      	b.n	8004980 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004932:	68fb      	ldr	r3, [r7, #12]
 8004934:	68d8      	ldr	r0, [r3, #12]
 8004936:	68fb      	ldr	r3, [r7, #12]
 8004938:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800493a:	461a      	mov	r2, r3
 800493c:	68b9      	ldr	r1, [r7, #8]
 800493e:	f00b fde4 	bl	801050a <memcpy>
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
 8004942:	68fb      	ldr	r3, [r7, #12]
 8004944:	68da      	ldr	r2, [r3, #12]
 8004946:	68fb      	ldr	r3, [r7, #12]
 8004948:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800494a:	425b      	negs	r3, r3
 800494c:	441a      	add	r2, r3
 800494e:	68fb      	ldr	r3, [r7, #12]
 8004950:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8004952:	68fb      	ldr	r3, [r7, #12]
 8004954:	68da      	ldr	r2, [r3, #12]
 8004956:	68fb      	ldr	r3, [r7, #12]
 8004958:	681b      	ldr	r3, [r3, #0]
 800495a:	429a      	cmp	r2, r3
 800495c:	d207      	bcs.n	800496e <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
 800495e:	68fb      	ldr	r3, [r7, #12]
 8004960:	685a      	ldr	r2, [r3, #4]
 8004962:	68fb      	ldr	r3, [r7, #12]
 8004964:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004966:	425b      	negs	r3, r3
 8004968:	441a      	add	r2, r3
 800496a:	68fb      	ldr	r3, [r7, #12]
 800496c:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800496e:	687b      	ldr	r3, [r7, #4]
 8004970:	2b02      	cmp	r3, #2
 8004972:	d105      	bne.n	8004980 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8004974:	693b      	ldr	r3, [r7, #16]
 8004976:	2b00      	cmp	r3, #0
 8004978:	d002      	beq.n	8004980 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800497a:	693b      	ldr	r3, [r7, #16]
 800497c:	3b01      	subs	r3, #1
 800497e:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8004980:	693b      	ldr	r3, [r7, #16]
 8004982:	1c5a      	adds	r2, r3, #1
 8004984:	68fb      	ldr	r3, [r7, #12]
 8004986:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8004988:	697b      	ldr	r3, [r7, #20]
}
 800498a:	4618      	mov	r0, r3
 800498c:	3718      	adds	r7, #24
 800498e:	46bd      	mov	sp, r7
 8004990:	bd80      	pop	{r7, pc}

08004992 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8004992:	b580      	push	{r7, lr}
 8004994:	b082      	sub	sp, #8
 8004996:	af00      	add	r7, sp, #0
 8004998:	6078      	str	r0, [r7, #4]
 800499a:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800499c:	687b      	ldr	r3, [r7, #4]
 800499e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80049a0:	2b00      	cmp	r3, #0
 80049a2:	d018      	beq.n	80049d6 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
 80049a4:	687b      	ldr	r3, [r7, #4]
 80049a6:	68da      	ldr	r2, [r3, #12]
 80049a8:	687b      	ldr	r3, [r7, #4]
 80049aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80049ac:	441a      	add	r2, r3
 80049ae:	687b      	ldr	r3, [r7, #4]
 80049b0:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 80049b2:	687b      	ldr	r3, [r7, #4]
 80049b4:	68da      	ldr	r2, [r3, #12]
 80049b6:	687b      	ldr	r3, [r7, #4]
 80049b8:	685b      	ldr	r3, [r3, #4]
 80049ba:	429a      	cmp	r2, r3
 80049bc:	d303      	bcc.n	80049c6 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.pcReadFrom = pxQueue->pcHead;
 80049be:	687b      	ldr	r3, [r7, #4]
 80049c0:	681a      	ldr	r2, [r3, #0]
 80049c2:	687b      	ldr	r3, [r7, #4]
 80049c4:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0. */
 80049c6:	687b      	ldr	r3, [r7, #4]
 80049c8:	68d9      	ldr	r1, [r3, #12]
 80049ca:	687b      	ldr	r3, [r7, #4]
 80049cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80049ce:	461a      	mov	r2, r3
 80049d0:	6838      	ldr	r0, [r7, #0]
 80049d2:	f00b fd9a 	bl	801050a <memcpy>
	}
}
 80049d6:	bf00      	nop
 80049d8:	3708      	adds	r7, #8
 80049da:	46bd      	mov	sp, r7
 80049dc:	bd80      	pop	{r7, pc}

080049de <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 80049de:	b580      	push	{r7, lr}
 80049e0:	b084      	sub	sp, #16
 80049e2:	af00      	add	r7, sp, #0
 80049e4:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 80049e6:	f001 f929 	bl	8005c3c <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 80049ea:	687b      	ldr	r3, [r7, #4]
 80049ec:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80049f0:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80049f2:	e011      	b.n	8004a18 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80049f4:	687b      	ldr	r3, [r7, #4]
 80049f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80049f8:	2b00      	cmp	r3, #0
 80049fa:	d012      	beq.n	8004a22 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80049fc:	687b      	ldr	r3, [r7, #4]
 80049fe:	3324      	adds	r3, #36	; 0x24
 8004a00:	4618      	mov	r0, r3
 8004a02:	f000 fc15 	bl	8005230 <xTaskRemoveFromEventList>
 8004a06:	4603      	mov	r3, r0
 8004a08:	2b00      	cmp	r3, #0
 8004a0a:	d001      	beq.n	8004a10 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8004a0c:	f000 fce8 	bl	80053e0 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8004a10:	7bfb      	ldrb	r3, [r7, #15]
 8004a12:	3b01      	subs	r3, #1
 8004a14:	b2db      	uxtb	r3, r3
 8004a16:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8004a18:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004a1c:	2b00      	cmp	r3, #0
 8004a1e:	dce9      	bgt.n	80049f4 <prvUnlockQueue+0x16>
 8004a20:	e000      	b.n	8004a24 <prvUnlockQueue+0x46>
					break;
 8004a22:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8004a24:	687b      	ldr	r3, [r7, #4]
 8004a26:	22ff      	movs	r2, #255	; 0xff
 8004a28:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8004a2c:	f001 f934 	bl	8005c98 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8004a30:	f001 f904 	bl	8005c3c <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8004a34:	687b      	ldr	r3, [r7, #4]
 8004a36:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8004a3a:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8004a3c:	e011      	b.n	8004a62 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8004a3e:	687b      	ldr	r3, [r7, #4]
 8004a40:	691b      	ldr	r3, [r3, #16]
 8004a42:	2b00      	cmp	r3, #0
 8004a44:	d012      	beq.n	8004a6c <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8004a46:	687b      	ldr	r3, [r7, #4]
 8004a48:	3310      	adds	r3, #16
 8004a4a:	4618      	mov	r0, r3
 8004a4c:	f000 fbf0 	bl	8005230 <xTaskRemoveFromEventList>
 8004a50:	4603      	mov	r3, r0
 8004a52:	2b00      	cmp	r3, #0
 8004a54:	d001      	beq.n	8004a5a <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8004a56:	f000 fcc3 	bl	80053e0 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8004a5a:	7bbb      	ldrb	r3, [r7, #14]
 8004a5c:	3b01      	subs	r3, #1
 8004a5e:	b2db      	uxtb	r3, r3
 8004a60:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8004a62:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8004a66:	2b00      	cmp	r3, #0
 8004a68:	dce9      	bgt.n	8004a3e <prvUnlockQueue+0x60>
 8004a6a:	e000      	b.n	8004a6e <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8004a6c:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8004a6e:	687b      	ldr	r3, [r7, #4]
 8004a70:	22ff      	movs	r2, #255	; 0xff
 8004a72:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8004a76:	f001 f90f 	bl	8005c98 <vPortExitCritical>
}
 8004a7a:	bf00      	nop
 8004a7c:	3710      	adds	r7, #16
 8004a7e:	46bd      	mov	sp, r7
 8004a80:	bd80      	pop	{r7, pc}

08004a82 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8004a82:	b580      	push	{r7, lr}
 8004a84:	b084      	sub	sp, #16
 8004a86:	af00      	add	r7, sp, #0
 8004a88:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8004a8a:	f001 f8d7 	bl	8005c3c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8004a8e:	687b      	ldr	r3, [r7, #4]
 8004a90:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004a92:	2b00      	cmp	r3, #0
 8004a94:	d102      	bne.n	8004a9c <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8004a96:	2301      	movs	r3, #1
 8004a98:	60fb      	str	r3, [r7, #12]
 8004a9a:	e001      	b.n	8004aa0 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8004a9c:	2300      	movs	r3, #0
 8004a9e:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8004aa0:	f001 f8fa 	bl	8005c98 <vPortExitCritical>

	return xReturn;
 8004aa4:	68fb      	ldr	r3, [r7, #12]
}
 8004aa6:	4618      	mov	r0, r3
 8004aa8:	3710      	adds	r7, #16
 8004aaa:	46bd      	mov	sp, r7
 8004aac:	bd80      	pop	{r7, pc}

08004aae <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8004aae:	b580      	push	{r7, lr}
 8004ab0:	b084      	sub	sp, #16
 8004ab2:	af00      	add	r7, sp, #0
 8004ab4:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8004ab6:	f001 f8c1 	bl	8005c3c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8004aba:	687b      	ldr	r3, [r7, #4]
 8004abc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004abe:	687b      	ldr	r3, [r7, #4]
 8004ac0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004ac2:	429a      	cmp	r2, r3
 8004ac4:	d102      	bne.n	8004acc <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8004ac6:	2301      	movs	r3, #1
 8004ac8:	60fb      	str	r3, [r7, #12]
 8004aca:	e001      	b.n	8004ad0 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8004acc:	2300      	movs	r3, #0
 8004ace:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8004ad0:	f001 f8e2 	bl	8005c98 <vPortExitCritical>

	return xReturn;
 8004ad4:	68fb      	ldr	r3, [r7, #12]
}
 8004ad6:	4618      	mov	r0, r3
 8004ad8:	3710      	adds	r7, #16
 8004ada:	46bd      	mov	sp, r7
 8004adc:	bd80      	pop	{r7, pc}

08004ade <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8004ade:	b580      	push	{r7, lr}
 8004ae0:	b08c      	sub	sp, #48	; 0x30
 8004ae2:	af04      	add	r7, sp, #16
 8004ae4:	60f8      	str	r0, [r7, #12]
 8004ae6:	60b9      	str	r1, [r7, #8]
 8004ae8:	603b      	str	r3, [r7, #0]
 8004aea:	4613      	mov	r3, r2
 8004aec:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004aee:	88fb      	ldrh	r3, [r7, #6]
 8004af0:	009b      	lsls	r3, r3, #2
 8004af2:	4618      	mov	r0, r3
 8004af4:	f001 f9bc 	bl	8005e70 <pvPortMalloc>
 8004af8:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8004afa:	697b      	ldr	r3, [r7, #20]
 8004afc:	2b00      	cmp	r3, #0
 8004afe:	d00e      	beq.n	8004b1e <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
 8004b00:	2054      	movs	r0, #84	; 0x54
 8004b02:	f001 f9b5 	bl	8005e70 <pvPortMalloc>
 8004b06:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8004b08:	69fb      	ldr	r3, [r7, #28]
 8004b0a:	2b00      	cmp	r3, #0
 8004b0c:	d003      	beq.n	8004b16 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8004b0e:	69fb      	ldr	r3, [r7, #28]
 8004b10:	697a      	ldr	r2, [r7, #20]
 8004b12:	631a      	str	r2, [r3, #48]	; 0x30
 8004b14:	e005      	b.n	8004b22 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8004b16:	6978      	ldr	r0, [r7, #20]
 8004b18:	f001 fa6c 	bl	8005ff4 <vPortFree>
 8004b1c:	e001      	b.n	8004b22 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8004b1e:	2300      	movs	r3, #0
 8004b20:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8004b22:	69fb      	ldr	r3, [r7, #28]
 8004b24:	2b00      	cmp	r3, #0
 8004b26:	d013      	beq.n	8004b50 <xTaskCreate+0x72>
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8004b28:	88fa      	ldrh	r2, [r7, #6]
 8004b2a:	2300      	movs	r3, #0
 8004b2c:	9303      	str	r3, [sp, #12]
 8004b2e:	69fb      	ldr	r3, [r7, #28]
 8004b30:	9302      	str	r3, [sp, #8]
 8004b32:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004b34:	9301      	str	r3, [sp, #4]
 8004b36:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004b38:	9300      	str	r3, [sp, #0]
 8004b3a:	683b      	ldr	r3, [r7, #0]
 8004b3c:	68b9      	ldr	r1, [r7, #8]
 8004b3e:	68f8      	ldr	r0, [r7, #12]
 8004b40:	f000 f80e 	bl	8004b60 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8004b44:	69f8      	ldr	r0, [r7, #28]
 8004b46:	f000 f889 	bl	8004c5c <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8004b4a:	2301      	movs	r3, #1
 8004b4c:	61bb      	str	r3, [r7, #24]
 8004b4e:	e002      	b.n	8004b56 <xTaskCreate+0x78>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8004b50:	f04f 33ff 	mov.w	r3, #4294967295
 8004b54:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8004b56:	69bb      	ldr	r3, [r7, #24]
	}
 8004b58:	4618      	mov	r0, r3
 8004b5a:	3720      	adds	r7, #32
 8004b5c:	46bd      	mov	sp, r7
 8004b5e:	bd80      	pop	{r7, pc}

08004b60 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8004b60:	b580      	push	{r7, lr}
 8004b62:	b088      	sub	sp, #32
 8004b64:	af00      	add	r7, sp, #0
 8004b66:	60f8      	str	r0, [r7, #12]
 8004b68:	60b9      	str	r1, [r7, #8]
 8004b6a:	607a      	str	r2, [r7, #4]
 8004b6c:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 8004b6e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004b70:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004b72:	6879      	ldr	r1, [r7, #4]
 8004b74:	f06f 4340 	mvn.w	r3, #3221225472	; 0xc0000000
 8004b78:	440b      	add	r3, r1
 8004b7a:	009b      	lsls	r3, r3, #2
 8004b7c:	4413      	add	r3, r2
 8004b7e:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 8004b80:	69bb      	ldr	r3, [r7, #24]
 8004b82:	f023 0307 	bic.w	r3, r3, #7
 8004b86:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8004b88:	69bb      	ldr	r3, [r7, #24]
 8004b8a:	f003 0307 	and.w	r3, r3, #7
 8004b8e:	2b00      	cmp	r3, #0
 8004b90:	d009      	beq.n	8004ba6 <prvInitialiseNewTask+0x46>
	__asm volatile
 8004b92:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004b96:	f383 8811 	msr	BASEPRI, r3
 8004b9a:	f3bf 8f6f 	isb	sy
 8004b9e:	f3bf 8f4f 	dsb	sy
 8004ba2:	617b      	str	r3, [r7, #20]
 8004ba4:	e7fe      	b.n	8004ba4 <prvInitialiseNewTask+0x44>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8004ba6:	2300      	movs	r3, #0
 8004ba8:	61fb      	str	r3, [r7, #28]
 8004baa:	e012      	b.n	8004bd2 <prvInitialiseNewTask+0x72>
	{
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8004bac:	68ba      	ldr	r2, [r7, #8]
 8004bae:	69fb      	ldr	r3, [r7, #28]
 8004bb0:	4413      	add	r3, r2
 8004bb2:	7819      	ldrb	r1, [r3, #0]
 8004bb4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004bb6:	69fb      	ldr	r3, [r7, #28]
 8004bb8:	4413      	add	r3, r2
 8004bba:	3334      	adds	r3, #52	; 0x34
 8004bbc:	460a      	mov	r2, r1
 8004bbe:	701a      	strb	r2, [r3, #0]

		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
		configMAX_TASK_NAME_LEN characters just in case the memory after the
		string is not accessible (extremely unlikely). */
		if( pcName[ x ] == 0x00 )
 8004bc0:	68ba      	ldr	r2, [r7, #8]
 8004bc2:	69fb      	ldr	r3, [r7, #28]
 8004bc4:	4413      	add	r3, r2
 8004bc6:	781b      	ldrb	r3, [r3, #0]
 8004bc8:	2b00      	cmp	r3, #0
 8004bca:	d006      	beq.n	8004bda <prvInitialiseNewTask+0x7a>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8004bcc:	69fb      	ldr	r3, [r7, #28]
 8004bce:	3301      	adds	r3, #1
 8004bd0:	61fb      	str	r3, [r7, #28]
 8004bd2:	69fb      	ldr	r3, [r7, #28]
 8004bd4:	2b0f      	cmp	r3, #15
 8004bd6:	d9e9      	bls.n	8004bac <prvInitialiseNewTask+0x4c>
 8004bd8:	e000      	b.n	8004bdc <prvInitialiseNewTask+0x7c>
		{
			break;
 8004bda:	bf00      	nop
		}
	}

	/* Ensure the name string is terminated in the case that the string length
	was greater or equal to configMAX_TASK_NAME_LEN. */
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8004bdc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004bde:	2200      	movs	r2, #0
 8004be0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8004be4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004be6:	2b1f      	cmp	r3, #31
 8004be8:	d901      	bls.n	8004bee <prvInitialiseNewTask+0x8e>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8004bea:	231f      	movs	r3, #31
 8004bec:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8004bee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004bf0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004bf2:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8004bf4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004bf6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004bf8:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 8004bfa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004bfc:	2200      	movs	r2, #0
 8004bfe:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8004c00:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004c02:	3304      	adds	r3, #4
 8004c04:	4618      	mov	r0, r3
 8004c06:	f7ff f843 	bl	8003c90 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8004c0a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004c0c:	3318      	adds	r3, #24
 8004c0e:	4618      	mov	r0, r3
 8004c10:	f7ff f83e 	bl	8003c90 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8004c14:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004c16:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004c18:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004c1a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004c1c:	f1c3 0220 	rsb	r2, r3, #32
 8004c20:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004c22:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8004c24:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004c26:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004c28:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8004c2a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004c2c:	2200      	movs	r2, #0
 8004c2e:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8004c30:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004c32:	2200      	movs	r2, #0
 8004c34:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
	}
	#else /* portUSING_MPU_WRAPPERS */
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8004c38:	683a      	ldr	r2, [r7, #0]
 8004c3a:	68f9      	ldr	r1, [r7, #12]
 8004c3c:	69b8      	ldr	r0, [r7, #24]
 8004c3e:	f000 fed5 	bl	80059ec <pxPortInitialiseStack>
 8004c42:	4602      	mov	r2, r0
 8004c44:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004c46:	601a      	str	r2, [r3, #0]
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( ( void * ) pxCreatedTask != NULL )
 8004c48:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004c4a:	2b00      	cmp	r3, #0
 8004c4c:	d002      	beq.n	8004c54 <prvInitialiseNewTask+0xf4>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8004c4e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004c50:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004c52:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8004c54:	bf00      	nop
 8004c56:	3720      	adds	r7, #32
 8004c58:	46bd      	mov	sp, r7
 8004c5a:	bd80      	pop	{r7, pc}

08004c5c <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8004c5c:	b580      	push	{r7, lr}
 8004c5e:	b082      	sub	sp, #8
 8004c60:	af00      	add	r7, sp, #0
 8004c62:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8004c64:	f000 ffea 	bl	8005c3c <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8004c68:	4b2a      	ldr	r3, [pc, #168]	; (8004d14 <prvAddNewTaskToReadyList+0xb8>)
 8004c6a:	681b      	ldr	r3, [r3, #0]
 8004c6c:	3301      	adds	r3, #1
 8004c6e:	4a29      	ldr	r2, [pc, #164]	; (8004d14 <prvAddNewTaskToReadyList+0xb8>)
 8004c70:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8004c72:	4b29      	ldr	r3, [pc, #164]	; (8004d18 <prvAddNewTaskToReadyList+0xbc>)
 8004c74:	681b      	ldr	r3, [r3, #0]
 8004c76:	2b00      	cmp	r3, #0
 8004c78:	d109      	bne.n	8004c8e <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8004c7a:	4a27      	ldr	r2, [pc, #156]	; (8004d18 <prvAddNewTaskToReadyList+0xbc>)
 8004c7c:	687b      	ldr	r3, [r7, #4]
 8004c7e:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8004c80:	4b24      	ldr	r3, [pc, #144]	; (8004d14 <prvAddNewTaskToReadyList+0xb8>)
 8004c82:	681b      	ldr	r3, [r3, #0]
 8004c84:	2b01      	cmp	r3, #1
 8004c86:	d110      	bne.n	8004caa <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8004c88:	f000 fbce 	bl	8005428 <prvInitialiseTaskLists>
 8004c8c:	e00d      	b.n	8004caa <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8004c8e:	4b23      	ldr	r3, [pc, #140]	; (8004d1c <prvAddNewTaskToReadyList+0xc0>)
 8004c90:	681b      	ldr	r3, [r3, #0]
 8004c92:	2b00      	cmp	r3, #0
 8004c94:	d109      	bne.n	8004caa <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8004c96:	4b20      	ldr	r3, [pc, #128]	; (8004d18 <prvAddNewTaskToReadyList+0xbc>)
 8004c98:	681b      	ldr	r3, [r3, #0]
 8004c9a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004c9c:	687b      	ldr	r3, [r7, #4]
 8004c9e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004ca0:	429a      	cmp	r2, r3
 8004ca2:	d802      	bhi.n	8004caa <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8004ca4:	4a1c      	ldr	r2, [pc, #112]	; (8004d18 <prvAddNewTaskToReadyList+0xbc>)
 8004ca6:	687b      	ldr	r3, [r7, #4]
 8004ca8:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8004caa:	4b1d      	ldr	r3, [pc, #116]	; (8004d20 <prvAddNewTaskToReadyList+0xc4>)
 8004cac:	681b      	ldr	r3, [r3, #0]
 8004cae:	3301      	adds	r3, #1
 8004cb0:	4a1b      	ldr	r2, [pc, #108]	; (8004d20 <prvAddNewTaskToReadyList+0xc4>)
 8004cb2:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8004cb4:	687b      	ldr	r3, [r7, #4]
 8004cb6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004cb8:	2201      	movs	r2, #1
 8004cba:	409a      	lsls	r2, r3
 8004cbc:	4b19      	ldr	r3, [pc, #100]	; (8004d24 <prvAddNewTaskToReadyList+0xc8>)
 8004cbe:	681b      	ldr	r3, [r3, #0]
 8004cc0:	4313      	orrs	r3, r2
 8004cc2:	4a18      	ldr	r2, [pc, #96]	; (8004d24 <prvAddNewTaskToReadyList+0xc8>)
 8004cc4:	6013      	str	r3, [r2, #0]
 8004cc6:	687b      	ldr	r3, [r7, #4]
 8004cc8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004cca:	4613      	mov	r3, r2
 8004ccc:	009b      	lsls	r3, r3, #2
 8004cce:	4413      	add	r3, r2
 8004cd0:	009b      	lsls	r3, r3, #2
 8004cd2:	4a15      	ldr	r2, [pc, #84]	; (8004d28 <prvAddNewTaskToReadyList+0xcc>)
 8004cd4:	441a      	add	r2, r3
 8004cd6:	687b      	ldr	r3, [r7, #4]
 8004cd8:	3304      	adds	r3, #4
 8004cda:	4619      	mov	r1, r3
 8004cdc:	4610      	mov	r0, r2
 8004cde:	f7fe ffe4 	bl	8003caa <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8004ce2:	f000 ffd9 	bl	8005c98 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8004ce6:	4b0d      	ldr	r3, [pc, #52]	; (8004d1c <prvAddNewTaskToReadyList+0xc0>)
 8004ce8:	681b      	ldr	r3, [r3, #0]
 8004cea:	2b00      	cmp	r3, #0
 8004cec:	d00e      	beq.n	8004d0c <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8004cee:	4b0a      	ldr	r3, [pc, #40]	; (8004d18 <prvAddNewTaskToReadyList+0xbc>)
 8004cf0:	681b      	ldr	r3, [r3, #0]
 8004cf2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004cf4:	687b      	ldr	r3, [r7, #4]
 8004cf6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004cf8:	429a      	cmp	r2, r3
 8004cfa:	d207      	bcs.n	8004d0c <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8004cfc:	4b0b      	ldr	r3, [pc, #44]	; (8004d2c <prvAddNewTaskToReadyList+0xd0>)
 8004cfe:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004d02:	601a      	str	r2, [r3, #0]
 8004d04:	f3bf 8f4f 	dsb	sy
 8004d08:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8004d0c:	bf00      	nop
 8004d0e:	3708      	adds	r7, #8
 8004d10:	46bd      	mov	sp, r7
 8004d12:	bd80      	pop	{r7, pc}
 8004d14:	240003a0 	.word	0x240003a0
 8004d18:	240000ac 	.word	0x240000ac
 8004d1c:	240003ac 	.word	0x240003ac
 8004d20:	240003bc 	.word	0x240003bc
 8004d24:	240003a8 	.word	0x240003a8
 8004d28:	240000b0 	.word	0x240000b0
 8004d2c:	e000ed04 	.word	0xe000ed04

08004d30 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8004d30:	b580      	push	{r7, lr}
 8004d32:	b084      	sub	sp, #16
 8004d34:	af00      	add	r7, sp, #0
 8004d36:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8004d38:	2300      	movs	r3, #0
 8004d3a:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8004d3c:	687b      	ldr	r3, [r7, #4]
 8004d3e:	2b00      	cmp	r3, #0
 8004d40:	d016      	beq.n	8004d70 <vTaskDelay+0x40>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8004d42:	4b13      	ldr	r3, [pc, #76]	; (8004d90 <vTaskDelay+0x60>)
 8004d44:	681b      	ldr	r3, [r3, #0]
 8004d46:	2b00      	cmp	r3, #0
 8004d48:	d009      	beq.n	8004d5e <vTaskDelay+0x2e>
 8004d4a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004d4e:	f383 8811 	msr	BASEPRI, r3
 8004d52:	f3bf 8f6f 	isb	sy
 8004d56:	f3bf 8f4f 	dsb	sy
 8004d5a:	60bb      	str	r3, [r7, #8]
 8004d5c:	e7fe      	b.n	8004d5c <vTaskDelay+0x2c>
			vTaskSuspendAll();
 8004d5e:	f000 f861 	bl	8004e24 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8004d62:	2100      	movs	r1, #0
 8004d64:	6878      	ldr	r0, [r7, #4]
 8004d66:	f000 fddb 	bl	8005920 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8004d6a:	f000 f869 	bl	8004e40 <xTaskResumeAll>
 8004d6e:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8004d70:	68fb      	ldr	r3, [r7, #12]
 8004d72:	2b00      	cmp	r3, #0
 8004d74:	d107      	bne.n	8004d86 <vTaskDelay+0x56>
		{
			portYIELD_WITHIN_API();
 8004d76:	4b07      	ldr	r3, [pc, #28]	; (8004d94 <vTaskDelay+0x64>)
 8004d78:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004d7c:	601a      	str	r2, [r3, #0]
 8004d7e:	f3bf 8f4f 	dsb	sy
 8004d82:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8004d86:	bf00      	nop
 8004d88:	3710      	adds	r7, #16
 8004d8a:	46bd      	mov	sp, r7
 8004d8c:	bd80      	pop	{r7, pc}
 8004d8e:	bf00      	nop
 8004d90:	240003c8 	.word	0x240003c8
 8004d94:	e000ed04 	.word	0xe000ed04

08004d98 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8004d98:	b580      	push	{r7, lr}
 8004d9a:	b086      	sub	sp, #24
 8004d9c:	af02      	add	r7, sp, #8
		}
	}
	#else
	{
		/* The Idle task is being created using dynamically allocated RAM. */
		xReturn = xTaskCreate(	prvIdleTask,
 8004d9e:	4b1b      	ldr	r3, [pc, #108]	; (8004e0c <vTaskStartScheduler+0x74>)
 8004da0:	9301      	str	r3, [sp, #4]
 8004da2:	2300      	movs	r3, #0
 8004da4:	9300      	str	r3, [sp, #0]
 8004da6:	2300      	movs	r3, #0
 8004da8:	2280      	movs	r2, #128	; 0x80
 8004daa:	4919      	ldr	r1, [pc, #100]	; (8004e10 <vTaskStartScheduler+0x78>)
 8004dac:	4819      	ldr	r0, [pc, #100]	; (8004e14 <vTaskStartScheduler+0x7c>)
 8004dae:	f7ff fe96 	bl	8004ade <xTaskCreate>
 8004db2:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8004db4:	68fb      	ldr	r3, [r7, #12]
 8004db6:	2b01      	cmp	r3, #1
 8004db8:	d115      	bne.n	8004de6 <vTaskStartScheduler+0x4e>
 8004dba:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004dbe:	f383 8811 	msr	BASEPRI, r3
 8004dc2:	f3bf 8f6f 	isb	sy
 8004dc6:	f3bf 8f4f 	dsb	sy
 8004dca:	60bb      	str	r3, [r7, #8]
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8004dcc:	4b12      	ldr	r3, [pc, #72]	; (8004e18 <vTaskStartScheduler+0x80>)
 8004dce:	f04f 32ff 	mov.w	r2, #4294967295
 8004dd2:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8004dd4:	4b11      	ldr	r3, [pc, #68]	; (8004e1c <vTaskStartScheduler+0x84>)
 8004dd6:	2201      	movs	r2, #1
 8004dd8:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
 8004dda:	4b11      	ldr	r3, [pc, #68]	; (8004e20 <vTaskStartScheduler+0x88>)
 8004ddc:	2200      	movs	r2, #0
 8004dde:	601a      	str	r2, [r3, #0]
		FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8004de0:	f000 fe8e 	bl	8005b00 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8004de4:	e00d      	b.n	8004e02 <vTaskStartScheduler+0x6a>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8004de6:	68fb      	ldr	r3, [r7, #12]
 8004de8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004dec:	d109      	bne.n	8004e02 <vTaskStartScheduler+0x6a>
 8004dee:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004df2:	f383 8811 	msr	BASEPRI, r3
 8004df6:	f3bf 8f6f 	isb	sy
 8004dfa:	f3bf 8f4f 	dsb	sy
 8004dfe:	607b      	str	r3, [r7, #4]
 8004e00:	e7fe      	b.n	8004e00 <vTaskStartScheduler+0x68>
}
 8004e02:	bf00      	nop
 8004e04:	3710      	adds	r7, #16
 8004e06:	46bd      	mov	sp, r7
 8004e08:	bd80      	pop	{r7, pc}
 8004e0a:	bf00      	nop
 8004e0c:	240003c4 	.word	0x240003c4
 8004e10:	08011310 	.word	0x08011310
 8004e14:	080053f9 	.word	0x080053f9
 8004e18:	240003c0 	.word	0x240003c0
 8004e1c:	240003ac 	.word	0x240003ac
 8004e20:	240003a4 	.word	0x240003a4

08004e24 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8004e24:	b480      	push	{r7}
 8004e26:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 8004e28:	4b04      	ldr	r3, [pc, #16]	; (8004e3c <vTaskSuspendAll+0x18>)
 8004e2a:	681b      	ldr	r3, [r3, #0]
 8004e2c:	3301      	adds	r3, #1
 8004e2e:	4a03      	ldr	r2, [pc, #12]	; (8004e3c <vTaskSuspendAll+0x18>)
 8004e30:	6013      	str	r3, [r2, #0]
}
 8004e32:	bf00      	nop
 8004e34:	46bd      	mov	sp, r7
 8004e36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e3a:	4770      	bx	lr
 8004e3c:	240003c8 	.word	0x240003c8

08004e40 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8004e40:	b580      	push	{r7, lr}
 8004e42:	b084      	sub	sp, #16
 8004e44:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8004e46:	2300      	movs	r3, #0
 8004e48:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8004e4a:	2300      	movs	r3, #0
 8004e4c:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8004e4e:	4b41      	ldr	r3, [pc, #260]	; (8004f54 <xTaskResumeAll+0x114>)
 8004e50:	681b      	ldr	r3, [r3, #0]
 8004e52:	2b00      	cmp	r3, #0
 8004e54:	d109      	bne.n	8004e6a <xTaskResumeAll+0x2a>
 8004e56:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004e5a:	f383 8811 	msr	BASEPRI, r3
 8004e5e:	f3bf 8f6f 	isb	sy
 8004e62:	f3bf 8f4f 	dsb	sy
 8004e66:	603b      	str	r3, [r7, #0]
 8004e68:	e7fe      	b.n	8004e68 <xTaskResumeAll+0x28>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8004e6a:	f000 fee7 	bl	8005c3c <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8004e6e:	4b39      	ldr	r3, [pc, #228]	; (8004f54 <xTaskResumeAll+0x114>)
 8004e70:	681b      	ldr	r3, [r3, #0]
 8004e72:	3b01      	subs	r3, #1
 8004e74:	4a37      	ldr	r2, [pc, #220]	; (8004f54 <xTaskResumeAll+0x114>)
 8004e76:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004e78:	4b36      	ldr	r3, [pc, #216]	; (8004f54 <xTaskResumeAll+0x114>)
 8004e7a:	681b      	ldr	r3, [r3, #0]
 8004e7c:	2b00      	cmp	r3, #0
 8004e7e:	d161      	bne.n	8004f44 <xTaskResumeAll+0x104>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8004e80:	4b35      	ldr	r3, [pc, #212]	; (8004f58 <xTaskResumeAll+0x118>)
 8004e82:	681b      	ldr	r3, [r3, #0]
 8004e84:	2b00      	cmp	r3, #0
 8004e86:	d05d      	beq.n	8004f44 <xTaskResumeAll+0x104>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8004e88:	e02e      	b.n	8004ee8 <xTaskResumeAll+0xa8>
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 8004e8a:	4b34      	ldr	r3, [pc, #208]	; (8004f5c <xTaskResumeAll+0x11c>)
 8004e8c:	68db      	ldr	r3, [r3, #12]
 8004e8e:	68db      	ldr	r3, [r3, #12]
 8004e90:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8004e92:	68fb      	ldr	r3, [r7, #12]
 8004e94:	3318      	adds	r3, #24
 8004e96:	4618      	mov	r0, r3
 8004e98:	f7fe ff64 	bl	8003d64 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004e9c:	68fb      	ldr	r3, [r7, #12]
 8004e9e:	3304      	adds	r3, #4
 8004ea0:	4618      	mov	r0, r3
 8004ea2:	f7fe ff5f 	bl	8003d64 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8004ea6:	68fb      	ldr	r3, [r7, #12]
 8004ea8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004eaa:	2201      	movs	r2, #1
 8004eac:	409a      	lsls	r2, r3
 8004eae:	4b2c      	ldr	r3, [pc, #176]	; (8004f60 <xTaskResumeAll+0x120>)
 8004eb0:	681b      	ldr	r3, [r3, #0]
 8004eb2:	4313      	orrs	r3, r2
 8004eb4:	4a2a      	ldr	r2, [pc, #168]	; (8004f60 <xTaskResumeAll+0x120>)
 8004eb6:	6013      	str	r3, [r2, #0]
 8004eb8:	68fb      	ldr	r3, [r7, #12]
 8004eba:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004ebc:	4613      	mov	r3, r2
 8004ebe:	009b      	lsls	r3, r3, #2
 8004ec0:	4413      	add	r3, r2
 8004ec2:	009b      	lsls	r3, r3, #2
 8004ec4:	4a27      	ldr	r2, [pc, #156]	; (8004f64 <xTaskResumeAll+0x124>)
 8004ec6:	441a      	add	r2, r3
 8004ec8:	68fb      	ldr	r3, [r7, #12]
 8004eca:	3304      	adds	r3, #4
 8004ecc:	4619      	mov	r1, r3
 8004ece:	4610      	mov	r0, r2
 8004ed0:	f7fe feeb 	bl	8003caa <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8004ed4:	68fb      	ldr	r3, [r7, #12]
 8004ed6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004ed8:	4b23      	ldr	r3, [pc, #140]	; (8004f68 <xTaskResumeAll+0x128>)
 8004eda:	681b      	ldr	r3, [r3, #0]
 8004edc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004ede:	429a      	cmp	r2, r3
 8004ee0:	d302      	bcc.n	8004ee8 <xTaskResumeAll+0xa8>
					{
						xYieldPending = pdTRUE;
 8004ee2:	4b22      	ldr	r3, [pc, #136]	; (8004f6c <xTaskResumeAll+0x12c>)
 8004ee4:	2201      	movs	r2, #1
 8004ee6:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8004ee8:	4b1c      	ldr	r3, [pc, #112]	; (8004f5c <xTaskResumeAll+0x11c>)
 8004eea:	681b      	ldr	r3, [r3, #0]
 8004eec:	2b00      	cmp	r3, #0
 8004eee:	d1cc      	bne.n	8004e8a <xTaskResumeAll+0x4a>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8004ef0:	68fb      	ldr	r3, [r7, #12]
 8004ef2:	2b00      	cmp	r3, #0
 8004ef4:	d001      	beq.n	8004efa <xTaskResumeAll+0xba>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8004ef6:	f000 fb13 	bl	8005520 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 8004efa:	4b1d      	ldr	r3, [pc, #116]	; (8004f70 <xTaskResumeAll+0x130>)
 8004efc:	681b      	ldr	r3, [r3, #0]
 8004efe:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 8004f00:	687b      	ldr	r3, [r7, #4]
 8004f02:	2b00      	cmp	r3, #0
 8004f04:	d010      	beq.n	8004f28 <xTaskResumeAll+0xe8>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8004f06:	f000 f859 	bl	8004fbc <xTaskIncrementTick>
 8004f0a:	4603      	mov	r3, r0
 8004f0c:	2b00      	cmp	r3, #0
 8004f0e:	d002      	beq.n	8004f16 <xTaskResumeAll+0xd6>
							{
								xYieldPending = pdTRUE;
 8004f10:	4b16      	ldr	r3, [pc, #88]	; (8004f6c <xTaskResumeAll+0x12c>)
 8004f12:	2201      	movs	r2, #1
 8004f14:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 8004f16:	687b      	ldr	r3, [r7, #4]
 8004f18:	3b01      	subs	r3, #1
 8004f1a:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 8004f1c:	687b      	ldr	r3, [r7, #4]
 8004f1e:	2b00      	cmp	r3, #0
 8004f20:	d1f1      	bne.n	8004f06 <xTaskResumeAll+0xc6>

						uxPendedTicks = 0;
 8004f22:	4b13      	ldr	r3, [pc, #76]	; (8004f70 <xTaskResumeAll+0x130>)
 8004f24:	2200      	movs	r2, #0
 8004f26:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8004f28:	4b10      	ldr	r3, [pc, #64]	; (8004f6c <xTaskResumeAll+0x12c>)
 8004f2a:	681b      	ldr	r3, [r3, #0]
 8004f2c:	2b00      	cmp	r3, #0
 8004f2e:	d009      	beq.n	8004f44 <xTaskResumeAll+0x104>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8004f30:	2301      	movs	r3, #1
 8004f32:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8004f34:	4b0f      	ldr	r3, [pc, #60]	; (8004f74 <xTaskResumeAll+0x134>)
 8004f36:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004f3a:	601a      	str	r2, [r3, #0]
 8004f3c:	f3bf 8f4f 	dsb	sy
 8004f40:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8004f44:	f000 fea8 	bl	8005c98 <vPortExitCritical>

	return xAlreadyYielded;
 8004f48:	68bb      	ldr	r3, [r7, #8]
}
 8004f4a:	4618      	mov	r0, r3
 8004f4c:	3710      	adds	r7, #16
 8004f4e:	46bd      	mov	sp, r7
 8004f50:	bd80      	pop	{r7, pc}
 8004f52:	bf00      	nop
 8004f54:	240003c8 	.word	0x240003c8
 8004f58:	240003a0 	.word	0x240003a0
 8004f5c:	24000360 	.word	0x24000360
 8004f60:	240003a8 	.word	0x240003a8
 8004f64:	240000b0 	.word	0x240000b0
 8004f68:	240000ac 	.word	0x240000ac
 8004f6c:	240003b4 	.word	0x240003b4
 8004f70:	240003b0 	.word	0x240003b0
 8004f74:	e000ed04 	.word	0xe000ed04

08004f78 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8004f78:	b480      	push	{r7}
 8004f7a:	b083      	sub	sp, #12
 8004f7c:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8004f7e:	4b05      	ldr	r3, [pc, #20]	; (8004f94 <xTaskGetTickCount+0x1c>)
 8004f80:	681b      	ldr	r3, [r3, #0]
 8004f82:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8004f84:	687b      	ldr	r3, [r7, #4]
}
 8004f86:	4618      	mov	r0, r3
 8004f88:	370c      	adds	r7, #12
 8004f8a:	46bd      	mov	sp, r7
 8004f8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f90:	4770      	bx	lr
 8004f92:	bf00      	nop
 8004f94:	240003a4 	.word	0x240003a4

08004f98 <xTaskGetTickCountFromISR>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCountFromISR( void )
{
 8004f98:	b580      	push	{r7, lr}
 8004f9a:	b082      	sub	sp, #8
 8004f9c:	af00      	add	r7, sp, #0
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8004f9e:	f000 ff29 	bl	8005df4 <vPortValidateInterruptPriority>

	uxSavedInterruptStatus = portTICK_TYPE_SET_INTERRUPT_MASK_FROM_ISR();
 8004fa2:	2300      	movs	r3, #0
 8004fa4:	607b      	str	r3, [r7, #4]
	{
		xReturn = xTickCount;
 8004fa6:	4b04      	ldr	r3, [pc, #16]	; (8004fb8 <xTaskGetTickCountFromISR+0x20>)
 8004fa8:	681b      	ldr	r3, [r3, #0]
 8004faa:	603b      	str	r3, [r7, #0]
	}
	portTICK_TYPE_CLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8004fac:	683b      	ldr	r3, [r7, #0]
}
 8004fae:	4618      	mov	r0, r3
 8004fb0:	3708      	adds	r7, #8
 8004fb2:	46bd      	mov	sp, r7
 8004fb4:	bd80      	pop	{r7, pc}
 8004fb6:	bf00      	nop
 8004fb8:	240003a4 	.word	0x240003a4

08004fbc <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8004fbc:	b580      	push	{r7, lr}
 8004fbe:	b086      	sub	sp, #24
 8004fc0:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8004fc2:	2300      	movs	r3, #0
 8004fc4:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004fc6:	4b50      	ldr	r3, [pc, #320]	; (8005108 <xTaskIncrementTick+0x14c>)
 8004fc8:	681b      	ldr	r3, [r3, #0]
 8004fca:	2b00      	cmp	r3, #0
 8004fcc:	f040 808c 	bne.w	80050e8 <xTaskIncrementTick+0x12c>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8004fd0:	4b4e      	ldr	r3, [pc, #312]	; (800510c <xTaskIncrementTick+0x150>)
 8004fd2:	681b      	ldr	r3, [r3, #0]
 8004fd4:	3301      	adds	r3, #1
 8004fd6:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8004fd8:	4a4c      	ldr	r2, [pc, #304]	; (800510c <xTaskIncrementTick+0x150>)
 8004fda:	693b      	ldr	r3, [r7, #16]
 8004fdc:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8004fde:	693b      	ldr	r3, [r7, #16]
 8004fe0:	2b00      	cmp	r3, #0
 8004fe2:	d11f      	bne.n	8005024 <xTaskIncrementTick+0x68>
		{
			taskSWITCH_DELAYED_LISTS();
 8004fe4:	4b4a      	ldr	r3, [pc, #296]	; (8005110 <xTaskIncrementTick+0x154>)
 8004fe6:	681b      	ldr	r3, [r3, #0]
 8004fe8:	681b      	ldr	r3, [r3, #0]
 8004fea:	2b00      	cmp	r3, #0
 8004fec:	d009      	beq.n	8005002 <xTaskIncrementTick+0x46>
 8004fee:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004ff2:	f383 8811 	msr	BASEPRI, r3
 8004ff6:	f3bf 8f6f 	isb	sy
 8004ffa:	f3bf 8f4f 	dsb	sy
 8004ffe:	603b      	str	r3, [r7, #0]
 8005000:	e7fe      	b.n	8005000 <xTaskIncrementTick+0x44>
 8005002:	4b43      	ldr	r3, [pc, #268]	; (8005110 <xTaskIncrementTick+0x154>)
 8005004:	681b      	ldr	r3, [r3, #0]
 8005006:	60fb      	str	r3, [r7, #12]
 8005008:	4b42      	ldr	r3, [pc, #264]	; (8005114 <xTaskIncrementTick+0x158>)
 800500a:	681b      	ldr	r3, [r3, #0]
 800500c:	4a40      	ldr	r2, [pc, #256]	; (8005110 <xTaskIncrementTick+0x154>)
 800500e:	6013      	str	r3, [r2, #0]
 8005010:	4a40      	ldr	r2, [pc, #256]	; (8005114 <xTaskIncrementTick+0x158>)
 8005012:	68fb      	ldr	r3, [r7, #12]
 8005014:	6013      	str	r3, [r2, #0]
 8005016:	4b40      	ldr	r3, [pc, #256]	; (8005118 <xTaskIncrementTick+0x15c>)
 8005018:	681b      	ldr	r3, [r3, #0]
 800501a:	3301      	adds	r3, #1
 800501c:	4a3e      	ldr	r2, [pc, #248]	; (8005118 <xTaskIncrementTick+0x15c>)
 800501e:	6013      	str	r3, [r2, #0]
 8005020:	f000 fa7e 	bl	8005520 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8005024:	4b3d      	ldr	r3, [pc, #244]	; (800511c <xTaskIncrementTick+0x160>)
 8005026:	681b      	ldr	r3, [r3, #0]
 8005028:	693a      	ldr	r2, [r7, #16]
 800502a:	429a      	cmp	r2, r3
 800502c:	d34d      	bcc.n	80050ca <xTaskIncrementTick+0x10e>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800502e:	4b38      	ldr	r3, [pc, #224]	; (8005110 <xTaskIncrementTick+0x154>)
 8005030:	681b      	ldr	r3, [r3, #0]
 8005032:	681b      	ldr	r3, [r3, #0]
 8005034:	2b00      	cmp	r3, #0
 8005036:	d101      	bne.n	800503c <xTaskIncrementTick+0x80>
 8005038:	2301      	movs	r3, #1
 800503a:	e000      	b.n	800503e <xTaskIncrementTick+0x82>
 800503c:	2300      	movs	r3, #0
 800503e:	2b00      	cmp	r3, #0
 8005040:	d004      	beq.n	800504c <xTaskIncrementTick+0x90>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005042:	4b36      	ldr	r3, [pc, #216]	; (800511c <xTaskIncrementTick+0x160>)
 8005044:	f04f 32ff 	mov.w	r2, #4294967295
 8005048:	601a      	str	r2, [r3, #0]
					break;
 800504a:	e03e      	b.n	80050ca <xTaskIncrementTick+0x10e>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 800504c:	4b30      	ldr	r3, [pc, #192]	; (8005110 <xTaskIncrementTick+0x154>)
 800504e:	681b      	ldr	r3, [r3, #0]
 8005050:	68db      	ldr	r3, [r3, #12]
 8005052:	68db      	ldr	r3, [r3, #12]
 8005054:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8005056:	68bb      	ldr	r3, [r7, #8]
 8005058:	685b      	ldr	r3, [r3, #4]
 800505a:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800505c:	693a      	ldr	r2, [r7, #16]
 800505e:	687b      	ldr	r3, [r7, #4]
 8005060:	429a      	cmp	r2, r3
 8005062:	d203      	bcs.n	800506c <xTaskIncrementTick+0xb0>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8005064:	4a2d      	ldr	r2, [pc, #180]	; (800511c <xTaskIncrementTick+0x160>)
 8005066:	687b      	ldr	r3, [r7, #4]
 8005068:	6013      	str	r3, [r2, #0]
						break;
 800506a:	e02e      	b.n	80050ca <xTaskIncrementTick+0x10e>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800506c:	68bb      	ldr	r3, [r7, #8]
 800506e:	3304      	adds	r3, #4
 8005070:	4618      	mov	r0, r3
 8005072:	f7fe fe77 	bl	8003d64 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8005076:	68bb      	ldr	r3, [r7, #8]
 8005078:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800507a:	2b00      	cmp	r3, #0
 800507c:	d004      	beq.n	8005088 <xTaskIncrementTick+0xcc>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800507e:	68bb      	ldr	r3, [r7, #8]
 8005080:	3318      	adds	r3, #24
 8005082:	4618      	mov	r0, r3
 8005084:	f7fe fe6e 	bl	8003d64 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8005088:	68bb      	ldr	r3, [r7, #8]
 800508a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800508c:	2201      	movs	r2, #1
 800508e:	409a      	lsls	r2, r3
 8005090:	4b23      	ldr	r3, [pc, #140]	; (8005120 <xTaskIncrementTick+0x164>)
 8005092:	681b      	ldr	r3, [r3, #0]
 8005094:	4313      	orrs	r3, r2
 8005096:	4a22      	ldr	r2, [pc, #136]	; (8005120 <xTaskIncrementTick+0x164>)
 8005098:	6013      	str	r3, [r2, #0]
 800509a:	68bb      	ldr	r3, [r7, #8]
 800509c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800509e:	4613      	mov	r3, r2
 80050a0:	009b      	lsls	r3, r3, #2
 80050a2:	4413      	add	r3, r2
 80050a4:	009b      	lsls	r3, r3, #2
 80050a6:	4a1f      	ldr	r2, [pc, #124]	; (8005124 <xTaskIncrementTick+0x168>)
 80050a8:	441a      	add	r2, r3
 80050aa:	68bb      	ldr	r3, [r7, #8]
 80050ac:	3304      	adds	r3, #4
 80050ae:	4619      	mov	r1, r3
 80050b0:	4610      	mov	r0, r2
 80050b2:	f7fe fdfa 	bl	8003caa <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80050b6:	68bb      	ldr	r3, [r7, #8]
 80050b8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80050ba:	4b1b      	ldr	r3, [pc, #108]	; (8005128 <xTaskIncrementTick+0x16c>)
 80050bc:	681b      	ldr	r3, [r3, #0]
 80050be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80050c0:	429a      	cmp	r2, r3
 80050c2:	d3b4      	bcc.n	800502e <xTaskIncrementTick+0x72>
						{
							xSwitchRequired = pdTRUE;
 80050c4:	2301      	movs	r3, #1
 80050c6:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80050c8:	e7b1      	b.n	800502e <xTaskIncrementTick+0x72>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 80050ca:	4b17      	ldr	r3, [pc, #92]	; (8005128 <xTaskIncrementTick+0x16c>)
 80050cc:	681b      	ldr	r3, [r3, #0]
 80050ce:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80050d0:	4914      	ldr	r1, [pc, #80]	; (8005124 <xTaskIncrementTick+0x168>)
 80050d2:	4613      	mov	r3, r2
 80050d4:	009b      	lsls	r3, r3, #2
 80050d6:	4413      	add	r3, r2
 80050d8:	009b      	lsls	r3, r3, #2
 80050da:	440b      	add	r3, r1
 80050dc:	681b      	ldr	r3, [r3, #0]
 80050de:	2b01      	cmp	r3, #1
 80050e0:	d907      	bls.n	80050f2 <xTaskIncrementTick+0x136>
			{
				xSwitchRequired = pdTRUE;
 80050e2:	2301      	movs	r3, #1
 80050e4:	617b      	str	r3, [r7, #20]
 80050e6:	e004      	b.n	80050f2 <xTaskIncrementTick+0x136>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 80050e8:	4b10      	ldr	r3, [pc, #64]	; (800512c <xTaskIncrementTick+0x170>)
 80050ea:	681b      	ldr	r3, [r3, #0]
 80050ec:	3301      	adds	r3, #1
 80050ee:	4a0f      	ldr	r2, [pc, #60]	; (800512c <xTaskIncrementTick+0x170>)
 80050f0:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 80050f2:	4b0f      	ldr	r3, [pc, #60]	; (8005130 <xTaskIncrementTick+0x174>)
 80050f4:	681b      	ldr	r3, [r3, #0]
 80050f6:	2b00      	cmp	r3, #0
 80050f8:	d001      	beq.n	80050fe <xTaskIncrementTick+0x142>
		{
			xSwitchRequired = pdTRUE;
 80050fa:	2301      	movs	r3, #1
 80050fc:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 80050fe:	697b      	ldr	r3, [r7, #20]
}
 8005100:	4618      	mov	r0, r3
 8005102:	3718      	adds	r7, #24
 8005104:	46bd      	mov	sp, r7
 8005106:	bd80      	pop	{r7, pc}
 8005108:	240003c8 	.word	0x240003c8
 800510c:	240003a4 	.word	0x240003a4
 8005110:	24000358 	.word	0x24000358
 8005114:	2400035c 	.word	0x2400035c
 8005118:	240003b8 	.word	0x240003b8
 800511c:	240003c0 	.word	0x240003c0
 8005120:	240003a8 	.word	0x240003a8
 8005124:	240000b0 	.word	0x240000b0
 8005128:	240000ac 	.word	0x240000ac
 800512c:	240003b0 	.word	0x240003b0
 8005130:	240003b4 	.word	0x240003b4

08005134 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8005134:	b480      	push	{r7}
 8005136:	b087      	sub	sp, #28
 8005138:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800513a:	4b26      	ldr	r3, [pc, #152]	; (80051d4 <vTaskSwitchContext+0xa0>)
 800513c:	681b      	ldr	r3, [r3, #0]
 800513e:	2b00      	cmp	r3, #0
 8005140:	d003      	beq.n	800514a <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8005142:	4b25      	ldr	r3, [pc, #148]	; (80051d8 <vTaskSwitchContext+0xa4>)
 8005144:	2201      	movs	r2, #1
 8005146:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8005148:	e03e      	b.n	80051c8 <vTaskSwitchContext+0x94>
		xYieldPending = pdFALSE;
 800514a:	4b23      	ldr	r3, [pc, #140]	; (80051d8 <vTaskSwitchContext+0xa4>)
 800514c:	2200      	movs	r2, #0
 800514e:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK();
 8005150:	4b22      	ldr	r3, [pc, #136]	; (80051dc <vTaskSwitchContext+0xa8>)
 8005152:	681b      	ldr	r3, [r3, #0]
 8005154:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8005156:	68fb      	ldr	r3, [r7, #12]
 8005158:	fab3 f383 	clz	r3, r3
 800515c:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 800515e:	7afb      	ldrb	r3, [r7, #11]
 8005160:	f1c3 031f 	rsb	r3, r3, #31
 8005164:	617b      	str	r3, [r7, #20]
 8005166:	491e      	ldr	r1, [pc, #120]	; (80051e0 <vTaskSwitchContext+0xac>)
 8005168:	697a      	ldr	r2, [r7, #20]
 800516a:	4613      	mov	r3, r2
 800516c:	009b      	lsls	r3, r3, #2
 800516e:	4413      	add	r3, r2
 8005170:	009b      	lsls	r3, r3, #2
 8005172:	440b      	add	r3, r1
 8005174:	681b      	ldr	r3, [r3, #0]
 8005176:	2b00      	cmp	r3, #0
 8005178:	d109      	bne.n	800518e <vTaskSwitchContext+0x5a>
	__asm volatile
 800517a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800517e:	f383 8811 	msr	BASEPRI, r3
 8005182:	f3bf 8f6f 	isb	sy
 8005186:	f3bf 8f4f 	dsb	sy
 800518a:	607b      	str	r3, [r7, #4]
 800518c:	e7fe      	b.n	800518c <vTaskSwitchContext+0x58>
 800518e:	697a      	ldr	r2, [r7, #20]
 8005190:	4613      	mov	r3, r2
 8005192:	009b      	lsls	r3, r3, #2
 8005194:	4413      	add	r3, r2
 8005196:	009b      	lsls	r3, r3, #2
 8005198:	4a11      	ldr	r2, [pc, #68]	; (80051e0 <vTaskSwitchContext+0xac>)
 800519a:	4413      	add	r3, r2
 800519c:	613b      	str	r3, [r7, #16]
 800519e:	693b      	ldr	r3, [r7, #16]
 80051a0:	685b      	ldr	r3, [r3, #4]
 80051a2:	685a      	ldr	r2, [r3, #4]
 80051a4:	693b      	ldr	r3, [r7, #16]
 80051a6:	605a      	str	r2, [r3, #4]
 80051a8:	693b      	ldr	r3, [r7, #16]
 80051aa:	685a      	ldr	r2, [r3, #4]
 80051ac:	693b      	ldr	r3, [r7, #16]
 80051ae:	3308      	adds	r3, #8
 80051b0:	429a      	cmp	r2, r3
 80051b2:	d104      	bne.n	80051be <vTaskSwitchContext+0x8a>
 80051b4:	693b      	ldr	r3, [r7, #16]
 80051b6:	685b      	ldr	r3, [r3, #4]
 80051b8:	685a      	ldr	r2, [r3, #4]
 80051ba:	693b      	ldr	r3, [r7, #16]
 80051bc:	605a      	str	r2, [r3, #4]
 80051be:	693b      	ldr	r3, [r7, #16]
 80051c0:	685b      	ldr	r3, [r3, #4]
 80051c2:	68db      	ldr	r3, [r3, #12]
 80051c4:	4a07      	ldr	r2, [pc, #28]	; (80051e4 <vTaskSwitchContext+0xb0>)
 80051c6:	6013      	str	r3, [r2, #0]
}
 80051c8:	bf00      	nop
 80051ca:	371c      	adds	r7, #28
 80051cc:	46bd      	mov	sp, r7
 80051ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051d2:	4770      	bx	lr
 80051d4:	240003c8 	.word	0x240003c8
 80051d8:	240003b4 	.word	0x240003b4
 80051dc:	240003a8 	.word	0x240003a8
 80051e0:	240000b0 	.word	0x240000b0
 80051e4:	240000ac 	.word	0x240000ac

080051e8 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 80051e8:	b580      	push	{r7, lr}
 80051ea:	b084      	sub	sp, #16
 80051ec:	af00      	add	r7, sp, #0
 80051ee:	6078      	str	r0, [r7, #4]
 80051f0:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 80051f2:	687b      	ldr	r3, [r7, #4]
 80051f4:	2b00      	cmp	r3, #0
 80051f6:	d109      	bne.n	800520c <vTaskPlaceOnEventList+0x24>
 80051f8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80051fc:	f383 8811 	msr	BASEPRI, r3
 8005200:	f3bf 8f6f 	isb	sy
 8005204:	f3bf 8f4f 	dsb	sy
 8005208:	60fb      	str	r3, [r7, #12]
 800520a:	e7fe      	b.n	800520a <vTaskPlaceOnEventList+0x22>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800520c:	4b07      	ldr	r3, [pc, #28]	; (800522c <vTaskPlaceOnEventList+0x44>)
 800520e:	681b      	ldr	r3, [r3, #0]
 8005210:	3318      	adds	r3, #24
 8005212:	4619      	mov	r1, r3
 8005214:	6878      	ldr	r0, [r7, #4]
 8005216:	f7fe fd6c 	bl	8003cf2 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800521a:	2101      	movs	r1, #1
 800521c:	6838      	ldr	r0, [r7, #0]
 800521e:	f000 fb7f 	bl	8005920 <prvAddCurrentTaskToDelayedList>
}
 8005222:	bf00      	nop
 8005224:	3710      	adds	r7, #16
 8005226:	46bd      	mov	sp, r7
 8005228:	bd80      	pop	{r7, pc}
 800522a:	bf00      	nop
 800522c:	240000ac 	.word	0x240000ac

08005230 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8005230:	b580      	push	{r7, lr}
 8005232:	b086      	sub	sp, #24
 8005234:	af00      	add	r7, sp, #0
 8005236:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
 8005238:	687b      	ldr	r3, [r7, #4]
 800523a:	68db      	ldr	r3, [r3, #12]
 800523c:	68db      	ldr	r3, [r3, #12]
 800523e:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8005240:	693b      	ldr	r3, [r7, #16]
 8005242:	2b00      	cmp	r3, #0
 8005244:	d109      	bne.n	800525a <xTaskRemoveFromEventList+0x2a>
 8005246:	f04f 0350 	mov.w	r3, #80	; 0x50
 800524a:	f383 8811 	msr	BASEPRI, r3
 800524e:	f3bf 8f6f 	isb	sy
 8005252:	f3bf 8f4f 	dsb	sy
 8005256:	60fb      	str	r3, [r7, #12]
 8005258:	e7fe      	b.n	8005258 <xTaskRemoveFromEventList+0x28>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800525a:	693b      	ldr	r3, [r7, #16]
 800525c:	3318      	adds	r3, #24
 800525e:	4618      	mov	r0, r3
 8005260:	f7fe fd80 	bl	8003d64 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005264:	4b1d      	ldr	r3, [pc, #116]	; (80052dc <xTaskRemoveFromEventList+0xac>)
 8005266:	681b      	ldr	r3, [r3, #0]
 8005268:	2b00      	cmp	r3, #0
 800526a:	d11c      	bne.n	80052a6 <xTaskRemoveFromEventList+0x76>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800526c:	693b      	ldr	r3, [r7, #16]
 800526e:	3304      	adds	r3, #4
 8005270:	4618      	mov	r0, r3
 8005272:	f7fe fd77 	bl	8003d64 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8005276:	693b      	ldr	r3, [r7, #16]
 8005278:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800527a:	2201      	movs	r2, #1
 800527c:	409a      	lsls	r2, r3
 800527e:	4b18      	ldr	r3, [pc, #96]	; (80052e0 <xTaskRemoveFromEventList+0xb0>)
 8005280:	681b      	ldr	r3, [r3, #0]
 8005282:	4313      	orrs	r3, r2
 8005284:	4a16      	ldr	r2, [pc, #88]	; (80052e0 <xTaskRemoveFromEventList+0xb0>)
 8005286:	6013      	str	r3, [r2, #0]
 8005288:	693b      	ldr	r3, [r7, #16]
 800528a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800528c:	4613      	mov	r3, r2
 800528e:	009b      	lsls	r3, r3, #2
 8005290:	4413      	add	r3, r2
 8005292:	009b      	lsls	r3, r3, #2
 8005294:	4a13      	ldr	r2, [pc, #76]	; (80052e4 <xTaskRemoveFromEventList+0xb4>)
 8005296:	441a      	add	r2, r3
 8005298:	693b      	ldr	r3, [r7, #16]
 800529a:	3304      	adds	r3, #4
 800529c:	4619      	mov	r1, r3
 800529e:	4610      	mov	r0, r2
 80052a0:	f7fe fd03 	bl	8003caa <vListInsertEnd>
 80052a4:	e005      	b.n	80052b2 <xTaskRemoveFromEventList+0x82>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 80052a6:	693b      	ldr	r3, [r7, #16]
 80052a8:	3318      	adds	r3, #24
 80052aa:	4619      	mov	r1, r3
 80052ac:	480e      	ldr	r0, [pc, #56]	; (80052e8 <xTaskRemoveFromEventList+0xb8>)
 80052ae:	f7fe fcfc 	bl	8003caa <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 80052b2:	693b      	ldr	r3, [r7, #16]
 80052b4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80052b6:	4b0d      	ldr	r3, [pc, #52]	; (80052ec <xTaskRemoveFromEventList+0xbc>)
 80052b8:	681b      	ldr	r3, [r3, #0]
 80052ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80052bc:	429a      	cmp	r2, r3
 80052be:	d905      	bls.n	80052cc <xTaskRemoveFromEventList+0x9c>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 80052c0:	2301      	movs	r3, #1
 80052c2:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 80052c4:	4b0a      	ldr	r3, [pc, #40]	; (80052f0 <xTaskRemoveFromEventList+0xc0>)
 80052c6:	2201      	movs	r2, #1
 80052c8:	601a      	str	r2, [r3, #0]
 80052ca:	e001      	b.n	80052d0 <xTaskRemoveFromEventList+0xa0>
	}
	else
	{
		xReturn = pdFALSE;
 80052cc:	2300      	movs	r3, #0
 80052ce:	617b      	str	r3, [r7, #20]
		ensure it is updated at the earliest possible time. */
		prvResetNextTaskUnblockTime();
	}
	#endif

	return xReturn;
 80052d0:	697b      	ldr	r3, [r7, #20]
}
 80052d2:	4618      	mov	r0, r3
 80052d4:	3718      	adds	r7, #24
 80052d6:	46bd      	mov	sp, r7
 80052d8:	bd80      	pop	{r7, pc}
 80052da:	bf00      	nop
 80052dc:	240003c8 	.word	0x240003c8
 80052e0:	240003a8 	.word	0x240003a8
 80052e4:	240000b0 	.word	0x240000b0
 80052e8:	24000360 	.word	0x24000360
 80052ec:	240000ac 	.word	0x240000ac
 80052f0:	240003b4 	.word	0x240003b4

080052f4 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 80052f4:	b480      	push	{r7}
 80052f6:	b083      	sub	sp, #12
 80052f8:	af00      	add	r7, sp, #0
 80052fa:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 80052fc:	4b06      	ldr	r3, [pc, #24]	; (8005318 <vTaskInternalSetTimeOutState+0x24>)
 80052fe:	681a      	ldr	r2, [r3, #0]
 8005300:	687b      	ldr	r3, [r7, #4]
 8005302:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8005304:	4b05      	ldr	r3, [pc, #20]	; (800531c <vTaskInternalSetTimeOutState+0x28>)
 8005306:	681a      	ldr	r2, [r3, #0]
 8005308:	687b      	ldr	r3, [r7, #4]
 800530a:	605a      	str	r2, [r3, #4]
}
 800530c:	bf00      	nop
 800530e:	370c      	adds	r7, #12
 8005310:	46bd      	mov	sp, r7
 8005312:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005316:	4770      	bx	lr
 8005318:	240003b8 	.word	0x240003b8
 800531c:	240003a4 	.word	0x240003a4

08005320 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8005320:	b580      	push	{r7, lr}
 8005322:	b088      	sub	sp, #32
 8005324:	af00      	add	r7, sp, #0
 8005326:	6078      	str	r0, [r7, #4]
 8005328:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800532a:	687b      	ldr	r3, [r7, #4]
 800532c:	2b00      	cmp	r3, #0
 800532e:	d109      	bne.n	8005344 <xTaskCheckForTimeOut+0x24>
 8005330:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005334:	f383 8811 	msr	BASEPRI, r3
 8005338:	f3bf 8f6f 	isb	sy
 800533c:	f3bf 8f4f 	dsb	sy
 8005340:	613b      	str	r3, [r7, #16]
 8005342:	e7fe      	b.n	8005342 <xTaskCheckForTimeOut+0x22>
	configASSERT( pxTicksToWait );
 8005344:	683b      	ldr	r3, [r7, #0]
 8005346:	2b00      	cmp	r3, #0
 8005348:	d109      	bne.n	800535e <xTaskCheckForTimeOut+0x3e>
 800534a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800534e:	f383 8811 	msr	BASEPRI, r3
 8005352:	f3bf 8f6f 	isb	sy
 8005356:	f3bf 8f4f 	dsb	sy
 800535a:	60fb      	str	r3, [r7, #12]
 800535c:	e7fe      	b.n	800535c <xTaskCheckForTimeOut+0x3c>

	taskENTER_CRITICAL();
 800535e:	f000 fc6d 	bl	8005c3c <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8005362:	4b1d      	ldr	r3, [pc, #116]	; (80053d8 <xTaskCheckForTimeOut+0xb8>)
 8005364:	681b      	ldr	r3, [r3, #0]
 8005366:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8005368:	687b      	ldr	r3, [r7, #4]
 800536a:	685b      	ldr	r3, [r3, #4]
 800536c:	69ba      	ldr	r2, [r7, #24]
 800536e:	1ad3      	subs	r3, r2, r3
 8005370:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8005372:	683b      	ldr	r3, [r7, #0]
 8005374:	681b      	ldr	r3, [r3, #0]
 8005376:	f1b3 3fff 	cmp.w	r3, #4294967295
 800537a:	d102      	bne.n	8005382 <xTaskCheckForTimeOut+0x62>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800537c:	2300      	movs	r3, #0
 800537e:	61fb      	str	r3, [r7, #28]
 8005380:	e023      	b.n	80053ca <xTaskCheckForTimeOut+0xaa>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8005382:	687b      	ldr	r3, [r7, #4]
 8005384:	681a      	ldr	r2, [r3, #0]
 8005386:	4b15      	ldr	r3, [pc, #84]	; (80053dc <xTaskCheckForTimeOut+0xbc>)
 8005388:	681b      	ldr	r3, [r3, #0]
 800538a:	429a      	cmp	r2, r3
 800538c:	d007      	beq.n	800539e <xTaskCheckForTimeOut+0x7e>
 800538e:	687b      	ldr	r3, [r7, #4]
 8005390:	685b      	ldr	r3, [r3, #4]
 8005392:	69ba      	ldr	r2, [r7, #24]
 8005394:	429a      	cmp	r2, r3
 8005396:	d302      	bcc.n	800539e <xTaskCheckForTimeOut+0x7e>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8005398:	2301      	movs	r3, #1
 800539a:	61fb      	str	r3, [r7, #28]
 800539c:	e015      	b.n	80053ca <xTaskCheckForTimeOut+0xaa>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800539e:	683b      	ldr	r3, [r7, #0]
 80053a0:	681b      	ldr	r3, [r3, #0]
 80053a2:	697a      	ldr	r2, [r7, #20]
 80053a4:	429a      	cmp	r2, r3
 80053a6:	d20b      	bcs.n	80053c0 <xTaskCheckForTimeOut+0xa0>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 80053a8:	683b      	ldr	r3, [r7, #0]
 80053aa:	681a      	ldr	r2, [r3, #0]
 80053ac:	697b      	ldr	r3, [r7, #20]
 80053ae:	1ad2      	subs	r2, r2, r3
 80053b0:	683b      	ldr	r3, [r7, #0]
 80053b2:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 80053b4:	6878      	ldr	r0, [r7, #4]
 80053b6:	f7ff ff9d 	bl	80052f4 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 80053ba:	2300      	movs	r3, #0
 80053bc:	61fb      	str	r3, [r7, #28]
 80053be:	e004      	b.n	80053ca <xTaskCheckForTimeOut+0xaa>
		}
		else
		{
			*pxTicksToWait = 0;
 80053c0:	683b      	ldr	r3, [r7, #0]
 80053c2:	2200      	movs	r2, #0
 80053c4:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 80053c6:	2301      	movs	r3, #1
 80053c8:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 80053ca:	f000 fc65 	bl	8005c98 <vPortExitCritical>

	return xReturn;
 80053ce:	69fb      	ldr	r3, [r7, #28]
}
 80053d0:	4618      	mov	r0, r3
 80053d2:	3720      	adds	r7, #32
 80053d4:	46bd      	mov	sp, r7
 80053d6:	bd80      	pop	{r7, pc}
 80053d8:	240003a4 	.word	0x240003a4
 80053dc:	240003b8 	.word	0x240003b8

080053e0 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 80053e0:	b480      	push	{r7}
 80053e2:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 80053e4:	4b03      	ldr	r3, [pc, #12]	; (80053f4 <vTaskMissedYield+0x14>)
 80053e6:	2201      	movs	r2, #1
 80053e8:	601a      	str	r2, [r3, #0]
}
 80053ea:	bf00      	nop
 80053ec:	46bd      	mov	sp, r7
 80053ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053f2:	4770      	bx	lr
 80053f4:	240003b4 	.word	0x240003b4

080053f8 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 80053f8:	b580      	push	{r7, lr}
 80053fa:	b082      	sub	sp, #8
 80053fc:	af00      	add	r7, sp, #0
 80053fe:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8005400:	f000 f852 	bl	80054a8 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8005404:	4b06      	ldr	r3, [pc, #24]	; (8005420 <prvIdleTask+0x28>)
 8005406:	681b      	ldr	r3, [r3, #0]
 8005408:	2b01      	cmp	r3, #1
 800540a:	d9f9      	bls.n	8005400 <prvIdleTask+0x8>
			{
				taskYIELD();
 800540c:	4b05      	ldr	r3, [pc, #20]	; (8005424 <prvIdleTask+0x2c>)
 800540e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005412:	601a      	str	r2, [r3, #0]
 8005414:	f3bf 8f4f 	dsb	sy
 8005418:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800541c:	e7f0      	b.n	8005400 <prvIdleTask+0x8>
 800541e:	bf00      	nop
 8005420:	240000b0 	.word	0x240000b0
 8005424:	e000ed04 	.word	0xe000ed04

08005428 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8005428:	b580      	push	{r7, lr}
 800542a:	b082      	sub	sp, #8
 800542c:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800542e:	2300      	movs	r3, #0
 8005430:	607b      	str	r3, [r7, #4]
 8005432:	e00c      	b.n	800544e <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8005434:	687a      	ldr	r2, [r7, #4]
 8005436:	4613      	mov	r3, r2
 8005438:	009b      	lsls	r3, r3, #2
 800543a:	4413      	add	r3, r2
 800543c:	009b      	lsls	r3, r3, #2
 800543e:	4a12      	ldr	r2, [pc, #72]	; (8005488 <prvInitialiseTaskLists+0x60>)
 8005440:	4413      	add	r3, r2
 8005442:	4618      	mov	r0, r3
 8005444:	f7fe fc04 	bl	8003c50 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8005448:	687b      	ldr	r3, [r7, #4]
 800544a:	3301      	adds	r3, #1
 800544c:	607b      	str	r3, [r7, #4]
 800544e:	687b      	ldr	r3, [r7, #4]
 8005450:	2b1f      	cmp	r3, #31
 8005452:	d9ef      	bls.n	8005434 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8005454:	480d      	ldr	r0, [pc, #52]	; (800548c <prvInitialiseTaskLists+0x64>)
 8005456:	f7fe fbfb 	bl	8003c50 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800545a:	480d      	ldr	r0, [pc, #52]	; (8005490 <prvInitialiseTaskLists+0x68>)
 800545c:	f7fe fbf8 	bl	8003c50 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8005460:	480c      	ldr	r0, [pc, #48]	; (8005494 <prvInitialiseTaskLists+0x6c>)
 8005462:	f7fe fbf5 	bl	8003c50 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8005466:	480c      	ldr	r0, [pc, #48]	; (8005498 <prvInitialiseTaskLists+0x70>)
 8005468:	f7fe fbf2 	bl	8003c50 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800546c:	480b      	ldr	r0, [pc, #44]	; (800549c <prvInitialiseTaskLists+0x74>)
 800546e:	f7fe fbef 	bl	8003c50 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8005472:	4b0b      	ldr	r3, [pc, #44]	; (80054a0 <prvInitialiseTaskLists+0x78>)
 8005474:	4a05      	ldr	r2, [pc, #20]	; (800548c <prvInitialiseTaskLists+0x64>)
 8005476:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8005478:	4b0a      	ldr	r3, [pc, #40]	; (80054a4 <prvInitialiseTaskLists+0x7c>)
 800547a:	4a05      	ldr	r2, [pc, #20]	; (8005490 <prvInitialiseTaskLists+0x68>)
 800547c:	601a      	str	r2, [r3, #0]
}
 800547e:	bf00      	nop
 8005480:	3708      	adds	r7, #8
 8005482:	46bd      	mov	sp, r7
 8005484:	bd80      	pop	{r7, pc}
 8005486:	bf00      	nop
 8005488:	240000b0 	.word	0x240000b0
 800548c:	24000330 	.word	0x24000330
 8005490:	24000344 	.word	0x24000344
 8005494:	24000360 	.word	0x24000360
 8005498:	24000374 	.word	0x24000374
 800549c:	2400038c 	.word	0x2400038c
 80054a0:	24000358 	.word	0x24000358
 80054a4:	2400035c 	.word	0x2400035c

080054a8 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 80054a8:	b580      	push	{r7, lr}
 80054aa:	b082      	sub	sp, #8
 80054ac:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent vTaskSuspendAll()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80054ae:	e019      	b.n	80054e4 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 80054b0:	f000 fbc4 	bl	8005c3c <vPortEnterCritical>
			{
				pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 80054b4:	4b0f      	ldr	r3, [pc, #60]	; (80054f4 <prvCheckTasksWaitingTermination+0x4c>)
 80054b6:	68db      	ldr	r3, [r3, #12]
 80054b8:	68db      	ldr	r3, [r3, #12]
 80054ba:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80054bc:	687b      	ldr	r3, [r7, #4]
 80054be:	3304      	adds	r3, #4
 80054c0:	4618      	mov	r0, r3
 80054c2:	f7fe fc4f 	bl	8003d64 <uxListRemove>
				--uxCurrentNumberOfTasks;
 80054c6:	4b0c      	ldr	r3, [pc, #48]	; (80054f8 <prvCheckTasksWaitingTermination+0x50>)
 80054c8:	681b      	ldr	r3, [r3, #0]
 80054ca:	3b01      	subs	r3, #1
 80054cc:	4a0a      	ldr	r2, [pc, #40]	; (80054f8 <prvCheckTasksWaitingTermination+0x50>)
 80054ce:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 80054d0:	4b0a      	ldr	r3, [pc, #40]	; (80054fc <prvCheckTasksWaitingTermination+0x54>)
 80054d2:	681b      	ldr	r3, [r3, #0]
 80054d4:	3b01      	subs	r3, #1
 80054d6:	4a09      	ldr	r2, [pc, #36]	; (80054fc <prvCheckTasksWaitingTermination+0x54>)
 80054d8:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 80054da:	f000 fbdd 	bl	8005c98 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 80054de:	6878      	ldr	r0, [r7, #4]
 80054e0:	f000 f80e 	bl	8005500 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80054e4:	4b05      	ldr	r3, [pc, #20]	; (80054fc <prvCheckTasksWaitingTermination+0x54>)
 80054e6:	681b      	ldr	r3, [r3, #0]
 80054e8:	2b00      	cmp	r3, #0
 80054ea:	d1e1      	bne.n	80054b0 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 80054ec:	bf00      	nop
 80054ee:	3708      	adds	r7, #8
 80054f0:	46bd      	mov	sp, r7
 80054f2:	bd80      	pop	{r7, pc}
 80054f4:	24000374 	.word	0x24000374
 80054f8:	240003a0 	.word	0x240003a0
 80054fc:	24000388 	.word	0x24000388

08005500 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8005500:	b580      	push	{r7, lr}
 8005502:	b082      	sub	sp, #8
 8005504:	af00      	add	r7, sp, #0
 8005506:	6078      	str	r0, [r7, #4]

		#if( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) && ( portUSING_MPU_WRAPPERS == 0 ) )
		{
			/* The task can only have been allocated dynamically - free both
			the stack and TCB. */
			vPortFree( pxTCB->pxStack );
 8005508:	687b      	ldr	r3, [r7, #4]
 800550a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800550c:	4618      	mov	r0, r3
 800550e:	f000 fd71 	bl	8005ff4 <vPortFree>
			vPortFree( pxTCB );
 8005512:	6878      	ldr	r0, [r7, #4]
 8005514:	f000 fd6e 	bl	8005ff4 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8005518:	bf00      	nop
 800551a:	3708      	adds	r7, #8
 800551c:	46bd      	mov	sp, r7
 800551e:	bd80      	pop	{r7, pc}

08005520 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8005520:	b480      	push	{r7}
 8005522:	b083      	sub	sp, #12
 8005524:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8005526:	4b0f      	ldr	r3, [pc, #60]	; (8005564 <prvResetNextTaskUnblockTime+0x44>)
 8005528:	681b      	ldr	r3, [r3, #0]
 800552a:	681b      	ldr	r3, [r3, #0]
 800552c:	2b00      	cmp	r3, #0
 800552e:	d101      	bne.n	8005534 <prvResetNextTaskUnblockTime+0x14>
 8005530:	2301      	movs	r3, #1
 8005532:	e000      	b.n	8005536 <prvResetNextTaskUnblockTime+0x16>
 8005534:	2300      	movs	r3, #0
 8005536:	2b00      	cmp	r3, #0
 8005538:	d004      	beq.n	8005544 <prvResetNextTaskUnblockTime+0x24>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800553a:	4b0b      	ldr	r3, [pc, #44]	; (8005568 <prvResetNextTaskUnblockTime+0x48>)
 800553c:	f04f 32ff 	mov.w	r2, #4294967295
 8005540:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8005542:	e008      	b.n	8005556 <prvResetNextTaskUnblockTime+0x36>
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8005544:	4b07      	ldr	r3, [pc, #28]	; (8005564 <prvResetNextTaskUnblockTime+0x44>)
 8005546:	681b      	ldr	r3, [r3, #0]
 8005548:	68db      	ldr	r3, [r3, #12]
 800554a:	68db      	ldr	r3, [r3, #12]
 800554c:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800554e:	687b      	ldr	r3, [r7, #4]
 8005550:	685b      	ldr	r3, [r3, #4]
 8005552:	4a05      	ldr	r2, [pc, #20]	; (8005568 <prvResetNextTaskUnblockTime+0x48>)
 8005554:	6013      	str	r3, [r2, #0]
}
 8005556:	bf00      	nop
 8005558:	370c      	adds	r7, #12
 800555a:	46bd      	mov	sp, r7
 800555c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005560:	4770      	bx	lr
 8005562:	bf00      	nop
 8005564:	24000358 	.word	0x24000358
 8005568:	240003c0 	.word	0x240003c0

0800556c <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800556c:	b480      	push	{r7}
 800556e:	b083      	sub	sp, #12
 8005570:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8005572:	4b0b      	ldr	r3, [pc, #44]	; (80055a0 <xTaskGetSchedulerState+0x34>)
 8005574:	681b      	ldr	r3, [r3, #0]
 8005576:	2b00      	cmp	r3, #0
 8005578:	d102      	bne.n	8005580 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800557a:	2301      	movs	r3, #1
 800557c:	607b      	str	r3, [r7, #4]
 800557e:	e008      	b.n	8005592 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005580:	4b08      	ldr	r3, [pc, #32]	; (80055a4 <xTaskGetSchedulerState+0x38>)
 8005582:	681b      	ldr	r3, [r3, #0]
 8005584:	2b00      	cmp	r3, #0
 8005586:	d102      	bne.n	800558e <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8005588:	2302      	movs	r3, #2
 800558a:	607b      	str	r3, [r7, #4]
 800558c:	e001      	b.n	8005592 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800558e:	2300      	movs	r3, #0
 8005590:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8005592:	687b      	ldr	r3, [r7, #4]
	}
 8005594:	4618      	mov	r0, r3
 8005596:	370c      	adds	r7, #12
 8005598:	46bd      	mov	sp, r7
 800559a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800559e:	4770      	bx	lr
 80055a0:	240003ac 	.word	0x240003ac
 80055a4:	240003c8 	.word	0x240003c8

080055a8 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 80055a8:	b580      	push	{r7, lr}
 80055aa:	b084      	sub	sp, #16
 80055ac:	af00      	add	r7, sp, #0
 80055ae:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = ( TCB_t * ) pxMutexHolder;
 80055b0:	687b      	ldr	r3, [r7, #4]
 80055b2:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 80055b4:	2300      	movs	r3, #0
 80055b6:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 80055b8:	687b      	ldr	r3, [r7, #4]
 80055ba:	2b00      	cmp	r3, #0
 80055bc:	d06e      	beq.n	800569c <xTaskPriorityInherit+0xf4>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 80055be:	68bb      	ldr	r3, [r7, #8]
 80055c0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80055c2:	4b39      	ldr	r3, [pc, #228]	; (80056a8 <xTaskPriorityInherit+0x100>)
 80055c4:	681b      	ldr	r3, [r3, #0]
 80055c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80055c8:	429a      	cmp	r2, r3
 80055ca:	d25e      	bcs.n	800568a <xTaskPriorityInherit+0xe2>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 80055cc:	68bb      	ldr	r3, [r7, #8]
 80055ce:	699b      	ldr	r3, [r3, #24]
 80055d0:	2b00      	cmp	r3, #0
 80055d2:	db06      	blt.n	80055e2 <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80055d4:	4b34      	ldr	r3, [pc, #208]	; (80056a8 <xTaskPriorityInherit+0x100>)
 80055d6:	681b      	ldr	r3, [r3, #0]
 80055d8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80055da:	f1c3 0220 	rsb	r2, r3, #32
 80055de:	68bb      	ldr	r3, [r7, #8]
 80055e0:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 80055e2:	68bb      	ldr	r3, [r7, #8]
 80055e4:	6959      	ldr	r1, [r3, #20]
 80055e6:	68bb      	ldr	r3, [r7, #8]
 80055e8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80055ea:	4613      	mov	r3, r2
 80055ec:	009b      	lsls	r3, r3, #2
 80055ee:	4413      	add	r3, r2
 80055f0:	009b      	lsls	r3, r3, #2
 80055f2:	4a2e      	ldr	r2, [pc, #184]	; (80056ac <xTaskPriorityInherit+0x104>)
 80055f4:	4413      	add	r3, r2
 80055f6:	4299      	cmp	r1, r3
 80055f8:	d101      	bne.n	80055fe <xTaskPriorityInherit+0x56>
 80055fa:	2301      	movs	r3, #1
 80055fc:	e000      	b.n	8005600 <xTaskPriorityInherit+0x58>
 80055fe:	2300      	movs	r3, #0
 8005600:	2b00      	cmp	r3, #0
 8005602:	d03a      	beq.n	800567a <xTaskPriorityInherit+0xd2>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8005604:	68bb      	ldr	r3, [r7, #8]
 8005606:	3304      	adds	r3, #4
 8005608:	4618      	mov	r0, r3
 800560a:	f7fe fbab 	bl	8003d64 <uxListRemove>
 800560e:	4603      	mov	r3, r0
 8005610:	2b00      	cmp	r3, #0
 8005612:	d115      	bne.n	8005640 <xTaskPriorityInherit+0x98>
					{
						taskRESET_READY_PRIORITY( pxMutexHolderTCB->uxPriority );
 8005614:	68bb      	ldr	r3, [r7, #8]
 8005616:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005618:	4924      	ldr	r1, [pc, #144]	; (80056ac <xTaskPriorityInherit+0x104>)
 800561a:	4613      	mov	r3, r2
 800561c:	009b      	lsls	r3, r3, #2
 800561e:	4413      	add	r3, r2
 8005620:	009b      	lsls	r3, r3, #2
 8005622:	440b      	add	r3, r1
 8005624:	681b      	ldr	r3, [r3, #0]
 8005626:	2b00      	cmp	r3, #0
 8005628:	d10a      	bne.n	8005640 <xTaskPriorityInherit+0x98>
 800562a:	68bb      	ldr	r3, [r7, #8]
 800562c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800562e:	2201      	movs	r2, #1
 8005630:	fa02 f303 	lsl.w	r3, r2, r3
 8005634:	43da      	mvns	r2, r3
 8005636:	4b1e      	ldr	r3, [pc, #120]	; (80056b0 <xTaskPriorityInherit+0x108>)
 8005638:	681b      	ldr	r3, [r3, #0]
 800563a:	4013      	ands	r3, r2
 800563c:	4a1c      	ldr	r2, [pc, #112]	; (80056b0 <xTaskPriorityInherit+0x108>)
 800563e:	6013      	str	r3, [r2, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8005640:	4b19      	ldr	r3, [pc, #100]	; (80056a8 <xTaskPriorityInherit+0x100>)
 8005642:	681b      	ldr	r3, [r3, #0]
 8005644:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005646:	68bb      	ldr	r3, [r7, #8]
 8005648:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 800564a:	68bb      	ldr	r3, [r7, #8]
 800564c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800564e:	2201      	movs	r2, #1
 8005650:	409a      	lsls	r2, r3
 8005652:	4b17      	ldr	r3, [pc, #92]	; (80056b0 <xTaskPriorityInherit+0x108>)
 8005654:	681b      	ldr	r3, [r3, #0]
 8005656:	4313      	orrs	r3, r2
 8005658:	4a15      	ldr	r2, [pc, #84]	; (80056b0 <xTaskPriorityInherit+0x108>)
 800565a:	6013      	str	r3, [r2, #0]
 800565c:	68bb      	ldr	r3, [r7, #8]
 800565e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005660:	4613      	mov	r3, r2
 8005662:	009b      	lsls	r3, r3, #2
 8005664:	4413      	add	r3, r2
 8005666:	009b      	lsls	r3, r3, #2
 8005668:	4a10      	ldr	r2, [pc, #64]	; (80056ac <xTaskPriorityInherit+0x104>)
 800566a:	441a      	add	r2, r3
 800566c:	68bb      	ldr	r3, [r7, #8]
 800566e:	3304      	adds	r3, #4
 8005670:	4619      	mov	r1, r3
 8005672:	4610      	mov	r0, r2
 8005674:	f7fe fb19 	bl	8003caa <vListInsertEnd>
 8005678:	e004      	b.n	8005684 <xTaskPriorityInherit+0xdc>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800567a:	4b0b      	ldr	r3, [pc, #44]	; (80056a8 <xTaskPriorityInherit+0x100>)
 800567c:	681b      	ldr	r3, [r3, #0]
 800567e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005680:	68bb      	ldr	r3, [r7, #8]
 8005682:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 8005684:	2301      	movs	r3, #1
 8005686:	60fb      	str	r3, [r7, #12]
 8005688:	e008      	b.n	800569c <xTaskPriorityInherit+0xf4>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 800568a:	68bb      	ldr	r3, [r7, #8]
 800568c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800568e:	4b06      	ldr	r3, [pc, #24]	; (80056a8 <xTaskPriorityInherit+0x100>)
 8005690:	681b      	ldr	r3, [r3, #0]
 8005692:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005694:	429a      	cmp	r2, r3
 8005696:	d201      	bcs.n	800569c <xTaskPriorityInherit+0xf4>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 8005698:	2301      	movs	r3, #1
 800569a:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800569c:	68fb      	ldr	r3, [r7, #12]
	}
 800569e:	4618      	mov	r0, r3
 80056a0:	3710      	adds	r7, #16
 80056a2:	46bd      	mov	sp, r7
 80056a4:	bd80      	pop	{r7, pc}
 80056a6:	bf00      	nop
 80056a8:	240000ac 	.word	0x240000ac
 80056ac:	240000b0 	.word	0x240000b0
 80056b0:	240003a8 	.word	0x240003a8

080056b4 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 80056b4:	b580      	push	{r7, lr}
 80056b6:	b086      	sub	sp, #24
 80056b8:	af00      	add	r7, sp, #0
 80056ba:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
 80056bc:	687b      	ldr	r3, [r7, #4]
 80056be:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 80056c0:	2300      	movs	r3, #0
 80056c2:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 80056c4:	687b      	ldr	r3, [r7, #4]
 80056c6:	2b00      	cmp	r3, #0
 80056c8:	d06c      	beq.n	80057a4 <xTaskPriorityDisinherit+0xf0>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 80056ca:	4b39      	ldr	r3, [pc, #228]	; (80057b0 <xTaskPriorityDisinherit+0xfc>)
 80056cc:	681b      	ldr	r3, [r3, #0]
 80056ce:	693a      	ldr	r2, [r7, #16]
 80056d0:	429a      	cmp	r2, r3
 80056d2:	d009      	beq.n	80056e8 <xTaskPriorityDisinherit+0x34>
 80056d4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80056d8:	f383 8811 	msr	BASEPRI, r3
 80056dc:	f3bf 8f6f 	isb	sy
 80056e0:	f3bf 8f4f 	dsb	sy
 80056e4:	60fb      	str	r3, [r7, #12]
 80056e6:	e7fe      	b.n	80056e6 <xTaskPriorityDisinherit+0x32>
			configASSERT( pxTCB->uxMutexesHeld );
 80056e8:	693b      	ldr	r3, [r7, #16]
 80056ea:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80056ec:	2b00      	cmp	r3, #0
 80056ee:	d109      	bne.n	8005704 <xTaskPriorityDisinherit+0x50>
 80056f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80056f4:	f383 8811 	msr	BASEPRI, r3
 80056f8:	f3bf 8f6f 	isb	sy
 80056fc:	f3bf 8f4f 	dsb	sy
 8005700:	60bb      	str	r3, [r7, #8]
 8005702:	e7fe      	b.n	8005702 <xTaskPriorityDisinherit+0x4e>
			( pxTCB->uxMutexesHeld )--;
 8005704:	693b      	ldr	r3, [r7, #16]
 8005706:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005708:	1e5a      	subs	r2, r3, #1
 800570a:	693b      	ldr	r3, [r7, #16]
 800570c:	649a      	str	r2, [r3, #72]	; 0x48

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800570e:	693b      	ldr	r3, [r7, #16]
 8005710:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005712:	693b      	ldr	r3, [r7, #16]
 8005714:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005716:	429a      	cmp	r2, r3
 8005718:	d044      	beq.n	80057a4 <xTaskPriorityDisinherit+0xf0>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800571a:	693b      	ldr	r3, [r7, #16]
 800571c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800571e:	2b00      	cmp	r3, #0
 8005720:	d140      	bne.n	80057a4 <xTaskPriorityDisinherit+0xf0>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8005722:	693b      	ldr	r3, [r7, #16]
 8005724:	3304      	adds	r3, #4
 8005726:	4618      	mov	r0, r3
 8005728:	f7fe fb1c 	bl	8003d64 <uxListRemove>
 800572c:	4603      	mov	r3, r0
 800572e:	2b00      	cmp	r3, #0
 8005730:	d115      	bne.n	800575e <xTaskPriorityDisinherit+0xaa>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 8005732:	693b      	ldr	r3, [r7, #16]
 8005734:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005736:	491f      	ldr	r1, [pc, #124]	; (80057b4 <xTaskPriorityDisinherit+0x100>)
 8005738:	4613      	mov	r3, r2
 800573a:	009b      	lsls	r3, r3, #2
 800573c:	4413      	add	r3, r2
 800573e:	009b      	lsls	r3, r3, #2
 8005740:	440b      	add	r3, r1
 8005742:	681b      	ldr	r3, [r3, #0]
 8005744:	2b00      	cmp	r3, #0
 8005746:	d10a      	bne.n	800575e <xTaskPriorityDisinherit+0xaa>
 8005748:	693b      	ldr	r3, [r7, #16]
 800574a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800574c:	2201      	movs	r2, #1
 800574e:	fa02 f303 	lsl.w	r3, r2, r3
 8005752:	43da      	mvns	r2, r3
 8005754:	4b18      	ldr	r3, [pc, #96]	; (80057b8 <xTaskPriorityDisinherit+0x104>)
 8005756:	681b      	ldr	r3, [r3, #0]
 8005758:	4013      	ands	r3, r2
 800575a:	4a17      	ldr	r2, [pc, #92]	; (80057b8 <xTaskPriorityDisinherit+0x104>)
 800575c:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800575e:	693b      	ldr	r3, [r7, #16]
 8005760:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005762:	693b      	ldr	r3, [r7, #16]
 8005764:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005766:	693b      	ldr	r3, [r7, #16]
 8005768:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800576a:	f1c3 0220 	rsb	r2, r3, #32
 800576e:	693b      	ldr	r3, [r7, #16]
 8005770:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8005772:	693b      	ldr	r3, [r7, #16]
 8005774:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005776:	2201      	movs	r2, #1
 8005778:	409a      	lsls	r2, r3
 800577a:	4b0f      	ldr	r3, [pc, #60]	; (80057b8 <xTaskPriorityDisinherit+0x104>)
 800577c:	681b      	ldr	r3, [r3, #0]
 800577e:	4313      	orrs	r3, r2
 8005780:	4a0d      	ldr	r2, [pc, #52]	; (80057b8 <xTaskPriorityDisinherit+0x104>)
 8005782:	6013      	str	r3, [r2, #0]
 8005784:	693b      	ldr	r3, [r7, #16]
 8005786:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005788:	4613      	mov	r3, r2
 800578a:	009b      	lsls	r3, r3, #2
 800578c:	4413      	add	r3, r2
 800578e:	009b      	lsls	r3, r3, #2
 8005790:	4a08      	ldr	r2, [pc, #32]	; (80057b4 <xTaskPriorityDisinherit+0x100>)
 8005792:	441a      	add	r2, r3
 8005794:	693b      	ldr	r3, [r7, #16]
 8005796:	3304      	adds	r3, #4
 8005798:	4619      	mov	r1, r3
 800579a:	4610      	mov	r0, r2
 800579c:	f7fe fa85 	bl	8003caa <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 80057a0:	2301      	movs	r3, #1
 80057a2:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 80057a4:	697b      	ldr	r3, [r7, #20]
	}
 80057a6:	4618      	mov	r0, r3
 80057a8:	3718      	adds	r7, #24
 80057aa:	46bd      	mov	sp, r7
 80057ac:	bd80      	pop	{r7, pc}
 80057ae:	bf00      	nop
 80057b0:	240000ac 	.word	0x240000ac
 80057b4:	240000b0 	.word	0x240000b0
 80057b8:	240003a8 	.word	0x240003a8

080057bc <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 80057bc:	b580      	push	{r7, lr}
 80057be:	b088      	sub	sp, #32
 80057c0:	af00      	add	r7, sp, #0
 80057c2:	6078      	str	r0, [r7, #4]
 80057c4:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
 80057c6:	687b      	ldr	r3, [r7, #4]
 80057c8:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 80057ca:	2301      	movs	r3, #1
 80057cc:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 80057ce:	687b      	ldr	r3, [r7, #4]
 80057d0:	2b00      	cmp	r3, #0
 80057d2:	f000 8086 	beq.w	80058e2 <vTaskPriorityDisinheritAfterTimeout+0x126>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 80057d6:	69bb      	ldr	r3, [r7, #24]
 80057d8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80057da:	2b00      	cmp	r3, #0
 80057dc:	d109      	bne.n	80057f2 <vTaskPriorityDisinheritAfterTimeout+0x36>
 80057de:	f04f 0350 	mov.w	r3, #80	; 0x50
 80057e2:	f383 8811 	msr	BASEPRI, r3
 80057e6:	f3bf 8f6f 	isb	sy
 80057ea:	f3bf 8f4f 	dsb	sy
 80057ee:	60fb      	str	r3, [r7, #12]
 80057f0:	e7fe      	b.n	80057f0 <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 80057f2:	69bb      	ldr	r3, [r7, #24]
 80057f4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80057f6:	683a      	ldr	r2, [r7, #0]
 80057f8:	429a      	cmp	r2, r3
 80057fa:	d902      	bls.n	8005802 <vTaskPriorityDisinheritAfterTimeout+0x46>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 80057fc:	683b      	ldr	r3, [r7, #0]
 80057fe:	61fb      	str	r3, [r7, #28]
 8005800:	e002      	b.n	8005808 <vTaskPriorityDisinheritAfterTimeout+0x4c>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 8005802:	69bb      	ldr	r3, [r7, #24]
 8005804:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005806:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 8005808:	69bb      	ldr	r3, [r7, #24]
 800580a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800580c:	69fa      	ldr	r2, [r7, #28]
 800580e:	429a      	cmp	r2, r3
 8005810:	d067      	beq.n	80058e2 <vTaskPriorityDisinheritAfterTimeout+0x126>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 8005812:	69bb      	ldr	r3, [r7, #24]
 8005814:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005816:	697a      	ldr	r2, [r7, #20]
 8005818:	429a      	cmp	r2, r3
 800581a:	d162      	bne.n	80058e2 <vTaskPriorityDisinheritAfterTimeout+0x126>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 800581c:	4b33      	ldr	r3, [pc, #204]	; (80058ec <vTaskPriorityDisinheritAfterTimeout+0x130>)
 800581e:	681b      	ldr	r3, [r3, #0]
 8005820:	69ba      	ldr	r2, [r7, #24]
 8005822:	429a      	cmp	r2, r3
 8005824:	d109      	bne.n	800583a <vTaskPriorityDisinheritAfterTimeout+0x7e>
 8005826:	f04f 0350 	mov.w	r3, #80	; 0x50
 800582a:	f383 8811 	msr	BASEPRI, r3
 800582e:	f3bf 8f6f 	isb	sy
 8005832:	f3bf 8f4f 	dsb	sy
 8005836:	60bb      	str	r3, [r7, #8]
 8005838:	e7fe      	b.n	8005838 <vTaskPriorityDisinheritAfterTimeout+0x7c>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 800583a:	69bb      	ldr	r3, [r7, #24]
 800583c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800583e:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 8005840:	69bb      	ldr	r3, [r7, #24]
 8005842:	69fa      	ldr	r2, [r7, #28]
 8005844:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8005846:	69bb      	ldr	r3, [r7, #24]
 8005848:	699b      	ldr	r3, [r3, #24]
 800584a:	2b00      	cmp	r3, #0
 800584c:	db04      	blt.n	8005858 <vTaskPriorityDisinheritAfterTimeout+0x9c>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800584e:	69fb      	ldr	r3, [r7, #28]
 8005850:	f1c3 0220 	rsb	r2, r3, #32
 8005854:	69bb      	ldr	r3, [r7, #24]
 8005856:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 8005858:	69bb      	ldr	r3, [r7, #24]
 800585a:	6959      	ldr	r1, [r3, #20]
 800585c:	693a      	ldr	r2, [r7, #16]
 800585e:	4613      	mov	r3, r2
 8005860:	009b      	lsls	r3, r3, #2
 8005862:	4413      	add	r3, r2
 8005864:	009b      	lsls	r3, r3, #2
 8005866:	4a22      	ldr	r2, [pc, #136]	; (80058f0 <vTaskPriorityDisinheritAfterTimeout+0x134>)
 8005868:	4413      	add	r3, r2
 800586a:	4299      	cmp	r1, r3
 800586c:	d101      	bne.n	8005872 <vTaskPriorityDisinheritAfterTimeout+0xb6>
 800586e:	2301      	movs	r3, #1
 8005870:	e000      	b.n	8005874 <vTaskPriorityDisinheritAfterTimeout+0xb8>
 8005872:	2300      	movs	r3, #0
 8005874:	2b00      	cmp	r3, #0
 8005876:	d034      	beq.n	80058e2 <vTaskPriorityDisinheritAfterTimeout+0x126>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8005878:	69bb      	ldr	r3, [r7, #24]
 800587a:	3304      	adds	r3, #4
 800587c:	4618      	mov	r0, r3
 800587e:	f7fe fa71 	bl	8003d64 <uxListRemove>
 8005882:	4603      	mov	r3, r0
 8005884:	2b00      	cmp	r3, #0
 8005886:	d115      	bne.n	80058b4 <vTaskPriorityDisinheritAfterTimeout+0xf8>
						{
							taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 8005888:	69bb      	ldr	r3, [r7, #24]
 800588a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800588c:	4918      	ldr	r1, [pc, #96]	; (80058f0 <vTaskPriorityDisinheritAfterTimeout+0x134>)
 800588e:	4613      	mov	r3, r2
 8005890:	009b      	lsls	r3, r3, #2
 8005892:	4413      	add	r3, r2
 8005894:	009b      	lsls	r3, r3, #2
 8005896:	440b      	add	r3, r1
 8005898:	681b      	ldr	r3, [r3, #0]
 800589a:	2b00      	cmp	r3, #0
 800589c:	d10a      	bne.n	80058b4 <vTaskPriorityDisinheritAfterTimeout+0xf8>
 800589e:	69bb      	ldr	r3, [r7, #24]
 80058a0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80058a2:	2201      	movs	r2, #1
 80058a4:	fa02 f303 	lsl.w	r3, r2, r3
 80058a8:	43da      	mvns	r2, r3
 80058aa:	4b12      	ldr	r3, [pc, #72]	; (80058f4 <vTaskPriorityDisinheritAfterTimeout+0x138>)
 80058ac:	681b      	ldr	r3, [r3, #0]
 80058ae:	4013      	ands	r3, r2
 80058b0:	4a10      	ldr	r2, [pc, #64]	; (80058f4 <vTaskPriorityDisinheritAfterTimeout+0x138>)
 80058b2:	6013      	str	r3, [r2, #0]
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 80058b4:	69bb      	ldr	r3, [r7, #24]
 80058b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80058b8:	2201      	movs	r2, #1
 80058ba:	409a      	lsls	r2, r3
 80058bc:	4b0d      	ldr	r3, [pc, #52]	; (80058f4 <vTaskPriorityDisinheritAfterTimeout+0x138>)
 80058be:	681b      	ldr	r3, [r3, #0]
 80058c0:	4313      	orrs	r3, r2
 80058c2:	4a0c      	ldr	r2, [pc, #48]	; (80058f4 <vTaskPriorityDisinheritAfterTimeout+0x138>)
 80058c4:	6013      	str	r3, [r2, #0]
 80058c6:	69bb      	ldr	r3, [r7, #24]
 80058c8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80058ca:	4613      	mov	r3, r2
 80058cc:	009b      	lsls	r3, r3, #2
 80058ce:	4413      	add	r3, r2
 80058d0:	009b      	lsls	r3, r3, #2
 80058d2:	4a07      	ldr	r2, [pc, #28]	; (80058f0 <vTaskPriorityDisinheritAfterTimeout+0x134>)
 80058d4:	441a      	add	r2, r3
 80058d6:	69bb      	ldr	r3, [r7, #24]
 80058d8:	3304      	adds	r3, #4
 80058da:	4619      	mov	r1, r3
 80058dc:	4610      	mov	r0, r2
 80058de:	f7fe f9e4 	bl	8003caa <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80058e2:	bf00      	nop
 80058e4:	3720      	adds	r7, #32
 80058e6:	46bd      	mov	sp, r7
 80058e8:	bd80      	pop	{r7, pc}
 80058ea:	bf00      	nop
 80058ec:	240000ac 	.word	0x240000ac
 80058f0:	240000b0 	.word	0x240000b0
 80058f4:	240003a8 	.word	0x240003a8

080058f8 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void *pvTaskIncrementMutexHeldCount( void )
	{
 80058f8:	b480      	push	{r7}
 80058fa:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 80058fc:	4b07      	ldr	r3, [pc, #28]	; (800591c <pvTaskIncrementMutexHeldCount+0x24>)
 80058fe:	681b      	ldr	r3, [r3, #0]
 8005900:	2b00      	cmp	r3, #0
 8005902:	d004      	beq.n	800590e <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 8005904:	4b05      	ldr	r3, [pc, #20]	; (800591c <pvTaskIncrementMutexHeldCount+0x24>)
 8005906:	681b      	ldr	r3, [r3, #0]
 8005908:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800590a:	3201      	adds	r2, #1
 800590c:	649a      	str	r2, [r3, #72]	; 0x48
		}

		return pxCurrentTCB;
 800590e:	4b03      	ldr	r3, [pc, #12]	; (800591c <pvTaskIncrementMutexHeldCount+0x24>)
 8005910:	681b      	ldr	r3, [r3, #0]
	}
 8005912:	4618      	mov	r0, r3
 8005914:	46bd      	mov	sp, r7
 8005916:	f85d 7b04 	ldr.w	r7, [sp], #4
 800591a:	4770      	bx	lr
 800591c:	240000ac 	.word	0x240000ac

08005920 <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8005920:	b580      	push	{r7, lr}
 8005922:	b084      	sub	sp, #16
 8005924:	af00      	add	r7, sp, #0
 8005926:	6078      	str	r0, [r7, #4]
 8005928:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800592a:	4b29      	ldr	r3, [pc, #164]	; (80059d0 <prvAddCurrentTaskToDelayedList+0xb0>)
 800592c:	681b      	ldr	r3, [r3, #0]
 800592e:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8005930:	4b28      	ldr	r3, [pc, #160]	; (80059d4 <prvAddCurrentTaskToDelayedList+0xb4>)
 8005932:	681b      	ldr	r3, [r3, #0]
 8005934:	3304      	adds	r3, #4
 8005936:	4618      	mov	r0, r3
 8005938:	f7fe fa14 	bl	8003d64 <uxListRemove>
 800593c:	4603      	mov	r3, r0
 800593e:	2b00      	cmp	r3, #0
 8005940:	d10b      	bne.n	800595a <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority );
 8005942:	4b24      	ldr	r3, [pc, #144]	; (80059d4 <prvAddCurrentTaskToDelayedList+0xb4>)
 8005944:	681b      	ldr	r3, [r3, #0]
 8005946:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005948:	2201      	movs	r2, #1
 800594a:	fa02 f303 	lsl.w	r3, r2, r3
 800594e:	43da      	mvns	r2, r3
 8005950:	4b21      	ldr	r3, [pc, #132]	; (80059d8 <prvAddCurrentTaskToDelayedList+0xb8>)
 8005952:	681b      	ldr	r3, [r3, #0]
 8005954:	4013      	ands	r3, r2
 8005956:	4a20      	ldr	r2, [pc, #128]	; (80059d8 <prvAddCurrentTaskToDelayedList+0xb8>)
 8005958:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800595a:	687b      	ldr	r3, [r7, #4]
 800595c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005960:	d10a      	bne.n	8005978 <prvAddCurrentTaskToDelayedList+0x58>
 8005962:	683b      	ldr	r3, [r7, #0]
 8005964:	2b00      	cmp	r3, #0
 8005966:	d007      	beq.n	8005978 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8005968:	4b1a      	ldr	r3, [pc, #104]	; (80059d4 <prvAddCurrentTaskToDelayedList+0xb4>)
 800596a:	681b      	ldr	r3, [r3, #0]
 800596c:	3304      	adds	r3, #4
 800596e:	4619      	mov	r1, r3
 8005970:	481a      	ldr	r0, [pc, #104]	; (80059dc <prvAddCurrentTaskToDelayedList+0xbc>)
 8005972:	f7fe f99a 	bl	8003caa <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8005976:	e026      	b.n	80059c6 <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8005978:	68fa      	ldr	r2, [r7, #12]
 800597a:	687b      	ldr	r3, [r7, #4]
 800597c:	4413      	add	r3, r2
 800597e:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8005980:	4b14      	ldr	r3, [pc, #80]	; (80059d4 <prvAddCurrentTaskToDelayedList+0xb4>)
 8005982:	681b      	ldr	r3, [r3, #0]
 8005984:	68ba      	ldr	r2, [r7, #8]
 8005986:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8005988:	68ba      	ldr	r2, [r7, #8]
 800598a:	68fb      	ldr	r3, [r7, #12]
 800598c:	429a      	cmp	r2, r3
 800598e:	d209      	bcs.n	80059a4 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8005990:	4b13      	ldr	r3, [pc, #76]	; (80059e0 <prvAddCurrentTaskToDelayedList+0xc0>)
 8005992:	681a      	ldr	r2, [r3, #0]
 8005994:	4b0f      	ldr	r3, [pc, #60]	; (80059d4 <prvAddCurrentTaskToDelayedList+0xb4>)
 8005996:	681b      	ldr	r3, [r3, #0]
 8005998:	3304      	adds	r3, #4
 800599a:	4619      	mov	r1, r3
 800599c:	4610      	mov	r0, r2
 800599e:	f7fe f9a8 	bl	8003cf2 <vListInsert>
}
 80059a2:	e010      	b.n	80059c6 <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80059a4:	4b0f      	ldr	r3, [pc, #60]	; (80059e4 <prvAddCurrentTaskToDelayedList+0xc4>)
 80059a6:	681a      	ldr	r2, [r3, #0]
 80059a8:	4b0a      	ldr	r3, [pc, #40]	; (80059d4 <prvAddCurrentTaskToDelayedList+0xb4>)
 80059aa:	681b      	ldr	r3, [r3, #0]
 80059ac:	3304      	adds	r3, #4
 80059ae:	4619      	mov	r1, r3
 80059b0:	4610      	mov	r0, r2
 80059b2:	f7fe f99e 	bl	8003cf2 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 80059b6:	4b0c      	ldr	r3, [pc, #48]	; (80059e8 <prvAddCurrentTaskToDelayedList+0xc8>)
 80059b8:	681b      	ldr	r3, [r3, #0]
 80059ba:	68ba      	ldr	r2, [r7, #8]
 80059bc:	429a      	cmp	r2, r3
 80059be:	d202      	bcs.n	80059c6 <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 80059c0:	4a09      	ldr	r2, [pc, #36]	; (80059e8 <prvAddCurrentTaskToDelayedList+0xc8>)
 80059c2:	68bb      	ldr	r3, [r7, #8]
 80059c4:	6013      	str	r3, [r2, #0]
}
 80059c6:	bf00      	nop
 80059c8:	3710      	adds	r7, #16
 80059ca:	46bd      	mov	sp, r7
 80059cc:	bd80      	pop	{r7, pc}
 80059ce:	bf00      	nop
 80059d0:	240003a4 	.word	0x240003a4
 80059d4:	240000ac 	.word	0x240000ac
 80059d8:	240003a8 	.word	0x240003a8
 80059dc:	2400038c 	.word	0x2400038c
 80059e0:	2400035c 	.word	0x2400035c
 80059e4:	24000358 	.word	0x24000358
 80059e8:	240003c0 	.word	0x240003c0

080059ec <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 80059ec:	b480      	push	{r7}
 80059ee:	b085      	sub	sp, #20
 80059f0:	af00      	add	r7, sp, #0
 80059f2:	60f8      	str	r0, [r7, #12]
 80059f4:	60b9      	str	r1, [r7, #8]
 80059f6:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 80059f8:	68fb      	ldr	r3, [r7, #12]
 80059fa:	3b04      	subs	r3, #4
 80059fc:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 80059fe:	68fb      	ldr	r3, [r7, #12]
 8005a00:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8005a04:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8005a06:	68fb      	ldr	r3, [r7, #12]
 8005a08:	3b04      	subs	r3, #4
 8005a0a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8005a0c:	68bb      	ldr	r3, [r7, #8]
 8005a0e:	f023 0201 	bic.w	r2, r3, #1
 8005a12:	68fb      	ldr	r3, [r7, #12]
 8005a14:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8005a16:	68fb      	ldr	r3, [r7, #12]
 8005a18:	3b04      	subs	r3, #4
 8005a1a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8005a1c:	4a0c      	ldr	r2, [pc, #48]	; (8005a50 <pxPortInitialiseStack+0x64>)
 8005a1e:	68fb      	ldr	r3, [r7, #12]
 8005a20:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8005a22:	68fb      	ldr	r3, [r7, #12]
 8005a24:	3b14      	subs	r3, #20
 8005a26:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8005a28:	687a      	ldr	r2, [r7, #4]
 8005a2a:	68fb      	ldr	r3, [r7, #12]
 8005a2c:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8005a2e:	68fb      	ldr	r3, [r7, #12]
 8005a30:	3b04      	subs	r3, #4
 8005a32:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8005a34:	68fb      	ldr	r3, [r7, #12]
 8005a36:	f06f 0202 	mvn.w	r2, #2
 8005a3a:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8005a3c:	68fb      	ldr	r3, [r7, #12]
 8005a3e:	3b20      	subs	r3, #32
 8005a40:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8005a42:	68fb      	ldr	r3, [r7, #12]
}
 8005a44:	4618      	mov	r0, r3
 8005a46:	3714      	adds	r7, #20
 8005a48:	46bd      	mov	sp, r7
 8005a4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a4e:	4770      	bx	lr
 8005a50:	08005a55 	.word	0x08005a55

08005a54 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8005a54:	b480      	push	{r7}
 8005a56:	b085      	sub	sp, #20
 8005a58:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8005a5a:	2300      	movs	r3, #0
 8005a5c:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8005a5e:	4b11      	ldr	r3, [pc, #68]	; (8005aa4 <prvTaskExitError+0x50>)
 8005a60:	681b      	ldr	r3, [r3, #0]
 8005a62:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005a66:	d009      	beq.n	8005a7c <prvTaskExitError+0x28>
 8005a68:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005a6c:	f383 8811 	msr	BASEPRI, r3
 8005a70:	f3bf 8f6f 	isb	sy
 8005a74:	f3bf 8f4f 	dsb	sy
 8005a78:	60fb      	str	r3, [r7, #12]
 8005a7a:	e7fe      	b.n	8005a7a <prvTaskExitError+0x26>
 8005a7c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005a80:	f383 8811 	msr	BASEPRI, r3
 8005a84:	f3bf 8f6f 	isb	sy
 8005a88:	f3bf 8f4f 	dsb	sy
 8005a8c:	60bb      	str	r3, [r7, #8]
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8005a8e:	bf00      	nop
 8005a90:	687b      	ldr	r3, [r7, #4]
 8005a92:	2b00      	cmp	r3, #0
 8005a94:	d0fc      	beq.n	8005a90 <prvTaskExitError+0x3c>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8005a96:	bf00      	nop
 8005a98:	3714      	adds	r7, #20
 8005a9a:	46bd      	mov	sp, r7
 8005a9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005aa0:	4770      	bx	lr
 8005aa2:	bf00      	nop
 8005aa4:	24000008 	.word	0x24000008
	...

08005ab0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8005ab0:	4b07      	ldr	r3, [pc, #28]	; (8005ad0 <pxCurrentTCBConst2>)
 8005ab2:	6819      	ldr	r1, [r3, #0]
 8005ab4:	6808      	ldr	r0, [r1, #0]
 8005ab6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005aba:	f380 8809 	msr	PSP, r0
 8005abe:	f3bf 8f6f 	isb	sy
 8005ac2:	f04f 0000 	mov.w	r0, #0
 8005ac6:	f380 8811 	msr	BASEPRI, r0
 8005aca:	4770      	bx	lr
 8005acc:	f3af 8000 	nop.w

08005ad0 <pxCurrentTCBConst2>:
 8005ad0:	240000ac 	.word	0x240000ac
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8005ad4:	bf00      	nop
 8005ad6:	bf00      	nop

08005ad8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8005ad8:	4808      	ldr	r0, [pc, #32]	; (8005afc <prvPortStartFirstTask+0x24>)
 8005ada:	6800      	ldr	r0, [r0, #0]
 8005adc:	6800      	ldr	r0, [r0, #0]
 8005ade:	f380 8808 	msr	MSP, r0
 8005ae2:	f04f 0000 	mov.w	r0, #0
 8005ae6:	f380 8814 	msr	CONTROL, r0
 8005aea:	b662      	cpsie	i
 8005aec:	b661      	cpsie	f
 8005aee:	f3bf 8f4f 	dsb	sy
 8005af2:	f3bf 8f6f 	isb	sy
 8005af6:	df00      	svc	0
 8005af8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8005afa:	bf00      	nop
 8005afc:	e000ed08 	.word	0xe000ed08

08005b00 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8005b00:	b580      	push	{r7, lr}
 8005b02:	b086      	sub	sp, #24
 8005b04:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8005b06:	4b44      	ldr	r3, [pc, #272]	; (8005c18 <xPortStartScheduler+0x118>)
 8005b08:	681b      	ldr	r3, [r3, #0]
 8005b0a:	4a44      	ldr	r2, [pc, #272]	; (8005c1c <xPortStartScheduler+0x11c>)
 8005b0c:	4293      	cmp	r3, r2
 8005b0e:	d109      	bne.n	8005b24 <xPortStartScheduler+0x24>
 8005b10:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005b14:	f383 8811 	msr	BASEPRI, r3
 8005b18:	f3bf 8f6f 	isb	sy
 8005b1c:	f3bf 8f4f 	dsb	sy
 8005b20:	613b      	str	r3, [r7, #16]
 8005b22:	e7fe      	b.n	8005b22 <xPortStartScheduler+0x22>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8005b24:	4b3c      	ldr	r3, [pc, #240]	; (8005c18 <xPortStartScheduler+0x118>)
 8005b26:	681b      	ldr	r3, [r3, #0]
 8005b28:	4a3d      	ldr	r2, [pc, #244]	; (8005c20 <xPortStartScheduler+0x120>)
 8005b2a:	4293      	cmp	r3, r2
 8005b2c:	d109      	bne.n	8005b42 <xPortStartScheduler+0x42>
 8005b2e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005b32:	f383 8811 	msr	BASEPRI, r3
 8005b36:	f3bf 8f6f 	isb	sy
 8005b3a:	f3bf 8f4f 	dsb	sy
 8005b3e:	60fb      	str	r3, [r7, #12]
 8005b40:	e7fe      	b.n	8005b40 <xPortStartScheduler+0x40>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8005b42:	4b38      	ldr	r3, [pc, #224]	; (8005c24 <xPortStartScheduler+0x124>)
 8005b44:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8005b46:	697b      	ldr	r3, [r7, #20]
 8005b48:	781b      	ldrb	r3, [r3, #0]
 8005b4a:	b2db      	uxtb	r3, r3
 8005b4c:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8005b4e:	697b      	ldr	r3, [r7, #20]
 8005b50:	22ff      	movs	r2, #255	; 0xff
 8005b52:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8005b54:	697b      	ldr	r3, [r7, #20]
 8005b56:	781b      	ldrb	r3, [r3, #0]
 8005b58:	b2db      	uxtb	r3, r3
 8005b5a:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8005b5c:	78fb      	ldrb	r3, [r7, #3]
 8005b5e:	b2db      	uxtb	r3, r3
 8005b60:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8005b64:	b2da      	uxtb	r2, r3
 8005b66:	4b30      	ldr	r3, [pc, #192]	; (8005c28 <xPortStartScheduler+0x128>)
 8005b68:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8005b6a:	4b30      	ldr	r3, [pc, #192]	; (8005c2c <xPortStartScheduler+0x12c>)
 8005b6c:	2207      	movs	r2, #7
 8005b6e:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8005b70:	e009      	b.n	8005b86 <xPortStartScheduler+0x86>
		{
			ulMaxPRIGROUPValue--;
 8005b72:	4b2e      	ldr	r3, [pc, #184]	; (8005c2c <xPortStartScheduler+0x12c>)
 8005b74:	681b      	ldr	r3, [r3, #0]
 8005b76:	3b01      	subs	r3, #1
 8005b78:	4a2c      	ldr	r2, [pc, #176]	; (8005c2c <xPortStartScheduler+0x12c>)
 8005b7a:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8005b7c:	78fb      	ldrb	r3, [r7, #3]
 8005b7e:	b2db      	uxtb	r3, r3
 8005b80:	005b      	lsls	r3, r3, #1
 8005b82:	b2db      	uxtb	r3, r3
 8005b84:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8005b86:	78fb      	ldrb	r3, [r7, #3]
 8005b88:	b2db      	uxtb	r3, r3
 8005b8a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005b8e:	2b80      	cmp	r3, #128	; 0x80
 8005b90:	d0ef      	beq.n	8005b72 <xPortStartScheduler+0x72>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8005b92:	4b26      	ldr	r3, [pc, #152]	; (8005c2c <xPortStartScheduler+0x12c>)
 8005b94:	681b      	ldr	r3, [r3, #0]
 8005b96:	f1c3 0307 	rsb	r3, r3, #7
 8005b9a:	2b04      	cmp	r3, #4
 8005b9c:	d009      	beq.n	8005bb2 <xPortStartScheduler+0xb2>
 8005b9e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005ba2:	f383 8811 	msr	BASEPRI, r3
 8005ba6:	f3bf 8f6f 	isb	sy
 8005baa:	f3bf 8f4f 	dsb	sy
 8005bae:	60bb      	str	r3, [r7, #8]
 8005bb0:	e7fe      	b.n	8005bb0 <xPortStartScheduler+0xb0>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8005bb2:	4b1e      	ldr	r3, [pc, #120]	; (8005c2c <xPortStartScheduler+0x12c>)
 8005bb4:	681b      	ldr	r3, [r3, #0]
 8005bb6:	021b      	lsls	r3, r3, #8
 8005bb8:	4a1c      	ldr	r2, [pc, #112]	; (8005c2c <xPortStartScheduler+0x12c>)
 8005bba:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8005bbc:	4b1b      	ldr	r3, [pc, #108]	; (8005c2c <xPortStartScheduler+0x12c>)
 8005bbe:	681b      	ldr	r3, [r3, #0]
 8005bc0:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8005bc4:	4a19      	ldr	r2, [pc, #100]	; (8005c2c <xPortStartScheduler+0x12c>)
 8005bc6:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8005bc8:	687b      	ldr	r3, [r7, #4]
 8005bca:	b2da      	uxtb	r2, r3
 8005bcc:	697b      	ldr	r3, [r7, #20]
 8005bce:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8005bd0:	4b17      	ldr	r3, [pc, #92]	; (8005c30 <xPortStartScheduler+0x130>)
 8005bd2:	681b      	ldr	r3, [r3, #0]
 8005bd4:	4a16      	ldr	r2, [pc, #88]	; (8005c30 <xPortStartScheduler+0x130>)
 8005bd6:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8005bda:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8005bdc:	4b14      	ldr	r3, [pc, #80]	; (8005c30 <xPortStartScheduler+0x130>)
 8005bde:	681b      	ldr	r3, [r3, #0]
 8005be0:	4a13      	ldr	r2, [pc, #76]	; (8005c30 <xPortStartScheduler+0x130>)
 8005be2:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8005be6:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8005be8:	f000 f8d6 	bl	8005d98 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8005bec:	4b11      	ldr	r3, [pc, #68]	; (8005c34 <xPortStartScheduler+0x134>)
 8005bee:	2200      	movs	r2, #0
 8005bf0:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8005bf2:	f000 f8f5 	bl	8005de0 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8005bf6:	4b10      	ldr	r3, [pc, #64]	; (8005c38 <xPortStartScheduler+0x138>)
 8005bf8:	681b      	ldr	r3, [r3, #0]
 8005bfa:	4a0f      	ldr	r2, [pc, #60]	; (8005c38 <xPortStartScheduler+0x138>)
 8005bfc:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8005c00:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8005c02:	f7ff ff69 	bl	8005ad8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8005c06:	f7ff fa95 	bl	8005134 <vTaskSwitchContext>
	prvTaskExitError();
 8005c0a:	f7ff ff23 	bl	8005a54 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8005c0e:	2300      	movs	r3, #0
}
 8005c10:	4618      	mov	r0, r3
 8005c12:	3718      	adds	r7, #24
 8005c14:	46bd      	mov	sp, r7
 8005c16:	bd80      	pop	{r7, pc}
 8005c18:	e000ed00 	.word	0xe000ed00
 8005c1c:	410fc271 	.word	0x410fc271
 8005c20:	410fc270 	.word	0x410fc270
 8005c24:	e000e400 	.word	0xe000e400
 8005c28:	240003cc 	.word	0x240003cc
 8005c2c:	240003d0 	.word	0x240003d0
 8005c30:	e000ed20 	.word	0xe000ed20
 8005c34:	24000008 	.word	0x24000008
 8005c38:	e000ef34 	.word	0xe000ef34

08005c3c <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8005c3c:	b480      	push	{r7}
 8005c3e:	b083      	sub	sp, #12
 8005c40:	af00      	add	r7, sp, #0
 8005c42:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005c46:	f383 8811 	msr	BASEPRI, r3
 8005c4a:	f3bf 8f6f 	isb	sy
 8005c4e:	f3bf 8f4f 	dsb	sy
 8005c52:	607b      	str	r3, [r7, #4]
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8005c54:	4b0e      	ldr	r3, [pc, #56]	; (8005c90 <vPortEnterCritical+0x54>)
 8005c56:	681b      	ldr	r3, [r3, #0]
 8005c58:	3301      	adds	r3, #1
 8005c5a:	4a0d      	ldr	r2, [pc, #52]	; (8005c90 <vPortEnterCritical+0x54>)
 8005c5c:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8005c5e:	4b0c      	ldr	r3, [pc, #48]	; (8005c90 <vPortEnterCritical+0x54>)
 8005c60:	681b      	ldr	r3, [r3, #0]
 8005c62:	2b01      	cmp	r3, #1
 8005c64:	d10e      	bne.n	8005c84 <vPortEnterCritical+0x48>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8005c66:	4b0b      	ldr	r3, [pc, #44]	; (8005c94 <vPortEnterCritical+0x58>)
 8005c68:	681b      	ldr	r3, [r3, #0]
 8005c6a:	b2db      	uxtb	r3, r3
 8005c6c:	2b00      	cmp	r3, #0
 8005c6e:	d009      	beq.n	8005c84 <vPortEnterCritical+0x48>
 8005c70:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005c74:	f383 8811 	msr	BASEPRI, r3
 8005c78:	f3bf 8f6f 	isb	sy
 8005c7c:	f3bf 8f4f 	dsb	sy
 8005c80:	603b      	str	r3, [r7, #0]
 8005c82:	e7fe      	b.n	8005c82 <vPortEnterCritical+0x46>
	}
}
 8005c84:	bf00      	nop
 8005c86:	370c      	adds	r7, #12
 8005c88:	46bd      	mov	sp, r7
 8005c8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c8e:	4770      	bx	lr
 8005c90:	24000008 	.word	0x24000008
 8005c94:	e000ed04 	.word	0xe000ed04

08005c98 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8005c98:	b480      	push	{r7}
 8005c9a:	b083      	sub	sp, #12
 8005c9c:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8005c9e:	4b11      	ldr	r3, [pc, #68]	; (8005ce4 <vPortExitCritical+0x4c>)
 8005ca0:	681b      	ldr	r3, [r3, #0]
 8005ca2:	2b00      	cmp	r3, #0
 8005ca4:	d109      	bne.n	8005cba <vPortExitCritical+0x22>
 8005ca6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005caa:	f383 8811 	msr	BASEPRI, r3
 8005cae:	f3bf 8f6f 	isb	sy
 8005cb2:	f3bf 8f4f 	dsb	sy
 8005cb6:	607b      	str	r3, [r7, #4]
 8005cb8:	e7fe      	b.n	8005cb8 <vPortExitCritical+0x20>
	uxCriticalNesting--;
 8005cba:	4b0a      	ldr	r3, [pc, #40]	; (8005ce4 <vPortExitCritical+0x4c>)
 8005cbc:	681b      	ldr	r3, [r3, #0]
 8005cbe:	3b01      	subs	r3, #1
 8005cc0:	4a08      	ldr	r2, [pc, #32]	; (8005ce4 <vPortExitCritical+0x4c>)
 8005cc2:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8005cc4:	4b07      	ldr	r3, [pc, #28]	; (8005ce4 <vPortExitCritical+0x4c>)
 8005cc6:	681b      	ldr	r3, [r3, #0]
 8005cc8:	2b00      	cmp	r3, #0
 8005cca:	d104      	bne.n	8005cd6 <vPortExitCritical+0x3e>
 8005ccc:	2300      	movs	r3, #0
 8005cce:	603b      	str	r3, [r7, #0]
	__asm volatile
 8005cd0:	683b      	ldr	r3, [r7, #0]
 8005cd2:	f383 8811 	msr	BASEPRI, r3
	{
		portENABLE_INTERRUPTS();
	}
}
 8005cd6:	bf00      	nop
 8005cd8:	370c      	adds	r7, #12
 8005cda:	46bd      	mov	sp, r7
 8005cdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ce0:	4770      	bx	lr
 8005ce2:	bf00      	nop
 8005ce4:	24000008 	.word	0x24000008
	...

08005cf0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8005cf0:	f3ef 8009 	mrs	r0, PSP
 8005cf4:	f3bf 8f6f 	isb	sy
 8005cf8:	4b15      	ldr	r3, [pc, #84]	; (8005d50 <pxCurrentTCBConst>)
 8005cfa:	681a      	ldr	r2, [r3, #0]
 8005cfc:	f01e 0f10 	tst.w	lr, #16
 8005d00:	bf08      	it	eq
 8005d02:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8005d06:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005d0a:	6010      	str	r0, [r2, #0]
 8005d0c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8005d10:	f04f 0050 	mov.w	r0, #80	; 0x50
 8005d14:	f380 8811 	msr	BASEPRI, r0
 8005d18:	f3bf 8f4f 	dsb	sy
 8005d1c:	f3bf 8f6f 	isb	sy
 8005d20:	f7ff fa08 	bl	8005134 <vTaskSwitchContext>
 8005d24:	f04f 0000 	mov.w	r0, #0
 8005d28:	f380 8811 	msr	BASEPRI, r0
 8005d2c:	bc09      	pop	{r0, r3}
 8005d2e:	6819      	ldr	r1, [r3, #0]
 8005d30:	6808      	ldr	r0, [r1, #0]
 8005d32:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005d36:	f01e 0f10 	tst.w	lr, #16
 8005d3a:	bf08      	it	eq
 8005d3c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8005d40:	f380 8809 	msr	PSP, r0
 8005d44:	f3bf 8f6f 	isb	sy
 8005d48:	4770      	bx	lr
 8005d4a:	bf00      	nop
 8005d4c:	f3af 8000 	nop.w

08005d50 <pxCurrentTCBConst>:
 8005d50:	240000ac 	.word	0x240000ac
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8005d54:	bf00      	nop
 8005d56:	bf00      	nop

08005d58 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8005d58:	b580      	push	{r7, lr}
 8005d5a:	b082      	sub	sp, #8
 8005d5c:	af00      	add	r7, sp, #0
	__asm volatile
 8005d5e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005d62:	f383 8811 	msr	BASEPRI, r3
 8005d66:	f3bf 8f6f 	isb	sy
 8005d6a:	f3bf 8f4f 	dsb	sy
 8005d6e:	607b      	str	r3, [r7, #4]
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8005d70:	f7ff f924 	bl	8004fbc <xTaskIncrementTick>
 8005d74:	4603      	mov	r3, r0
 8005d76:	2b00      	cmp	r3, #0
 8005d78:	d003      	beq.n	8005d82 <xPortSysTickHandler+0x2a>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8005d7a:	4b06      	ldr	r3, [pc, #24]	; (8005d94 <xPortSysTickHandler+0x3c>)
 8005d7c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005d80:	601a      	str	r2, [r3, #0]
 8005d82:	2300      	movs	r3, #0
 8005d84:	603b      	str	r3, [r7, #0]
	__asm volatile
 8005d86:	683b      	ldr	r3, [r7, #0]
 8005d88:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portENABLE_INTERRUPTS();
}
 8005d8c:	bf00      	nop
 8005d8e:	3708      	adds	r7, #8
 8005d90:	46bd      	mov	sp, r7
 8005d92:	bd80      	pop	{r7, pc}
 8005d94:	e000ed04 	.word	0xe000ed04

08005d98 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8005d98:	b480      	push	{r7}
 8005d9a:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8005d9c:	4b0b      	ldr	r3, [pc, #44]	; (8005dcc <vPortSetupTimerInterrupt+0x34>)
 8005d9e:	2200      	movs	r2, #0
 8005da0:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8005da2:	4b0b      	ldr	r3, [pc, #44]	; (8005dd0 <vPortSetupTimerInterrupt+0x38>)
 8005da4:	2200      	movs	r2, #0
 8005da6:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8005da8:	4b0a      	ldr	r3, [pc, #40]	; (8005dd4 <vPortSetupTimerInterrupt+0x3c>)
 8005daa:	681b      	ldr	r3, [r3, #0]
 8005dac:	4a0a      	ldr	r2, [pc, #40]	; (8005dd8 <vPortSetupTimerInterrupt+0x40>)
 8005dae:	fba2 2303 	umull	r2, r3, r2, r3
 8005db2:	099b      	lsrs	r3, r3, #6
 8005db4:	4a09      	ldr	r2, [pc, #36]	; (8005ddc <vPortSetupTimerInterrupt+0x44>)
 8005db6:	3b01      	subs	r3, #1
 8005db8:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8005dba:	4b04      	ldr	r3, [pc, #16]	; (8005dcc <vPortSetupTimerInterrupt+0x34>)
 8005dbc:	2207      	movs	r2, #7
 8005dbe:	601a      	str	r2, [r3, #0]
}
 8005dc0:	bf00      	nop
 8005dc2:	46bd      	mov	sp, r7
 8005dc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dc8:	4770      	bx	lr
 8005dca:	bf00      	nop
 8005dcc:	e000e010 	.word	0xe000e010
 8005dd0:	e000e018 	.word	0xe000e018
 8005dd4:	24000024 	.word	0x24000024
 8005dd8:	10624dd3 	.word	0x10624dd3
 8005ddc:	e000e014 	.word	0xe000e014

08005de0 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8005de0:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8005df0 <vPortEnableVFP+0x10>
 8005de4:	6801      	ldr	r1, [r0, #0]
 8005de6:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8005dea:	6001      	str	r1, [r0, #0]
 8005dec:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8005dee:	bf00      	nop
 8005df0:	e000ed88 	.word	0xe000ed88

08005df4 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8005df4:	b480      	push	{r7}
 8005df6:	b085      	sub	sp, #20
 8005df8:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8005dfa:	f3ef 8305 	mrs	r3, IPSR
 8005dfe:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8005e00:	68fb      	ldr	r3, [r7, #12]
 8005e02:	2b0f      	cmp	r3, #15
 8005e04:	d913      	bls.n	8005e2e <vPortValidateInterruptPriority+0x3a>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8005e06:	4a16      	ldr	r2, [pc, #88]	; (8005e60 <vPortValidateInterruptPriority+0x6c>)
 8005e08:	68fb      	ldr	r3, [r7, #12]
 8005e0a:	4413      	add	r3, r2
 8005e0c:	781b      	ldrb	r3, [r3, #0]
 8005e0e:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8005e10:	4b14      	ldr	r3, [pc, #80]	; (8005e64 <vPortValidateInterruptPriority+0x70>)
 8005e12:	781b      	ldrb	r3, [r3, #0]
 8005e14:	7afa      	ldrb	r2, [r7, #11]
 8005e16:	429a      	cmp	r2, r3
 8005e18:	d209      	bcs.n	8005e2e <vPortValidateInterruptPriority+0x3a>
	__asm volatile
 8005e1a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005e1e:	f383 8811 	msr	BASEPRI, r3
 8005e22:	f3bf 8f6f 	isb	sy
 8005e26:	f3bf 8f4f 	dsb	sy
 8005e2a:	607b      	str	r3, [r7, #4]
 8005e2c:	e7fe      	b.n	8005e2c <vPortValidateInterruptPriority+0x38>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8005e2e:	4b0e      	ldr	r3, [pc, #56]	; (8005e68 <vPortValidateInterruptPriority+0x74>)
 8005e30:	681b      	ldr	r3, [r3, #0]
 8005e32:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8005e36:	4b0d      	ldr	r3, [pc, #52]	; (8005e6c <vPortValidateInterruptPriority+0x78>)
 8005e38:	681b      	ldr	r3, [r3, #0]
 8005e3a:	429a      	cmp	r2, r3
 8005e3c:	d909      	bls.n	8005e52 <vPortValidateInterruptPriority+0x5e>
 8005e3e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005e42:	f383 8811 	msr	BASEPRI, r3
 8005e46:	f3bf 8f6f 	isb	sy
 8005e4a:	f3bf 8f4f 	dsb	sy
 8005e4e:	603b      	str	r3, [r7, #0]
 8005e50:	e7fe      	b.n	8005e50 <vPortValidateInterruptPriority+0x5c>
	}
 8005e52:	bf00      	nop
 8005e54:	3714      	adds	r7, #20
 8005e56:	46bd      	mov	sp, r7
 8005e58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e5c:	4770      	bx	lr
 8005e5e:	bf00      	nop
 8005e60:	e000e3f0 	.word	0xe000e3f0
 8005e64:	240003cc 	.word	0x240003cc
 8005e68:	e000ed0c 	.word	0xe000ed0c
 8005e6c:	240003d0 	.word	0x240003d0

08005e70 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8005e70:	b580      	push	{r7, lr}
 8005e72:	b08a      	sub	sp, #40	; 0x28
 8005e74:	af00      	add	r7, sp, #0
 8005e76:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8005e78:	2300      	movs	r3, #0
 8005e7a:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8005e7c:	f7fe ffd2 	bl	8004e24 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8005e80:	4b57      	ldr	r3, [pc, #348]	; (8005fe0 <pvPortMalloc+0x170>)
 8005e82:	681b      	ldr	r3, [r3, #0]
 8005e84:	2b00      	cmp	r3, #0
 8005e86:	d101      	bne.n	8005e8c <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8005e88:	f000 f90c 	bl	80060a4 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8005e8c:	4b55      	ldr	r3, [pc, #340]	; (8005fe4 <pvPortMalloc+0x174>)
 8005e8e:	681a      	ldr	r2, [r3, #0]
 8005e90:	687b      	ldr	r3, [r7, #4]
 8005e92:	4013      	ands	r3, r2
 8005e94:	2b00      	cmp	r3, #0
 8005e96:	f040 808c 	bne.w	8005fb2 <pvPortMalloc+0x142>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8005e9a:	687b      	ldr	r3, [r7, #4]
 8005e9c:	2b00      	cmp	r3, #0
 8005e9e:	d01c      	beq.n	8005eda <pvPortMalloc+0x6a>
			{
				xWantedSize += xHeapStructSize;
 8005ea0:	2208      	movs	r2, #8
 8005ea2:	687b      	ldr	r3, [r7, #4]
 8005ea4:	4413      	add	r3, r2
 8005ea6:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8005ea8:	687b      	ldr	r3, [r7, #4]
 8005eaa:	f003 0307 	and.w	r3, r3, #7
 8005eae:	2b00      	cmp	r3, #0
 8005eb0:	d013      	beq.n	8005eda <pvPortMalloc+0x6a>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8005eb2:	687b      	ldr	r3, [r7, #4]
 8005eb4:	f023 0307 	bic.w	r3, r3, #7
 8005eb8:	3308      	adds	r3, #8
 8005eba:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8005ebc:	687b      	ldr	r3, [r7, #4]
 8005ebe:	f003 0307 	and.w	r3, r3, #7
 8005ec2:	2b00      	cmp	r3, #0
 8005ec4:	d009      	beq.n	8005eda <pvPortMalloc+0x6a>
 8005ec6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005eca:	f383 8811 	msr	BASEPRI, r3
 8005ece:	f3bf 8f6f 	isb	sy
 8005ed2:	f3bf 8f4f 	dsb	sy
 8005ed6:	617b      	str	r3, [r7, #20]
 8005ed8:	e7fe      	b.n	8005ed8 <pvPortMalloc+0x68>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8005eda:	687b      	ldr	r3, [r7, #4]
 8005edc:	2b00      	cmp	r3, #0
 8005ede:	d068      	beq.n	8005fb2 <pvPortMalloc+0x142>
 8005ee0:	4b41      	ldr	r3, [pc, #260]	; (8005fe8 <pvPortMalloc+0x178>)
 8005ee2:	681b      	ldr	r3, [r3, #0]
 8005ee4:	687a      	ldr	r2, [r7, #4]
 8005ee6:	429a      	cmp	r2, r3
 8005ee8:	d863      	bhi.n	8005fb2 <pvPortMalloc+0x142>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8005eea:	4b40      	ldr	r3, [pc, #256]	; (8005fec <pvPortMalloc+0x17c>)
 8005eec:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8005eee:	4b3f      	ldr	r3, [pc, #252]	; (8005fec <pvPortMalloc+0x17c>)
 8005ef0:	681b      	ldr	r3, [r3, #0]
 8005ef2:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8005ef4:	e004      	b.n	8005f00 <pvPortMalloc+0x90>
				{
					pxPreviousBlock = pxBlock;
 8005ef6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ef8:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8005efa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005efc:	681b      	ldr	r3, [r3, #0]
 8005efe:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8005f00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f02:	685b      	ldr	r3, [r3, #4]
 8005f04:	687a      	ldr	r2, [r7, #4]
 8005f06:	429a      	cmp	r2, r3
 8005f08:	d903      	bls.n	8005f12 <pvPortMalloc+0xa2>
 8005f0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f0c:	681b      	ldr	r3, [r3, #0]
 8005f0e:	2b00      	cmp	r3, #0
 8005f10:	d1f1      	bne.n	8005ef6 <pvPortMalloc+0x86>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8005f12:	4b33      	ldr	r3, [pc, #204]	; (8005fe0 <pvPortMalloc+0x170>)
 8005f14:	681b      	ldr	r3, [r3, #0]
 8005f16:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005f18:	429a      	cmp	r2, r3
 8005f1a:	d04a      	beq.n	8005fb2 <pvPortMalloc+0x142>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8005f1c:	6a3b      	ldr	r3, [r7, #32]
 8005f1e:	681b      	ldr	r3, [r3, #0]
 8005f20:	2208      	movs	r2, #8
 8005f22:	4413      	add	r3, r2
 8005f24:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8005f26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f28:	681a      	ldr	r2, [r3, #0]
 8005f2a:	6a3b      	ldr	r3, [r7, #32]
 8005f2c:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8005f2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f30:	685a      	ldr	r2, [r3, #4]
 8005f32:	687b      	ldr	r3, [r7, #4]
 8005f34:	1ad2      	subs	r2, r2, r3
 8005f36:	2308      	movs	r3, #8
 8005f38:	005b      	lsls	r3, r3, #1
 8005f3a:	429a      	cmp	r2, r3
 8005f3c:	d91e      	bls.n	8005f7c <pvPortMalloc+0x10c>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8005f3e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005f40:	687b      	ldr	r3, [r7, #4]
 8005f42:	4413      	add	r3, r2
 8005f44:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8005f46:	69bb      	ldr	r3, [r7, #24]
 8005f48:	f003 0307 	and.w	r3, r3, #7
 8005f4c:	2b00      	cmp	r3, #0
 8005f4e:	d009      	beq.n	8005f64 <pvPortMalloc+0xf4>
 8005f50:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005f54:	f383 8811 	msr	BASEPRI, r3
 8005f58:	f3bf 8f6f 	isb	sy
 8005f5c:	f3bf 8f4f 	dsb	sy
 8005f60:	613b      	str	r3, [r7, #16]
 8005f62:	e7fe      	b.n	8005f62 <pvPortMalloc+0xf2>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8005f64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f66:	685a      	ldr	r2, [r3, #4]
 8005f68:	687b      	ldr	r3, [r7, #4]
 8005f6a:	1ad2      	subs	r2, r2, r3
 8005f6c:	69bb      	ldr	r3, [r7, #24]
 8005f6e:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8005f70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f72:	687a      	ldr	r2, [r7, #4]
 8005f74:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8005f76:	69b8      	ldr	r0, [r7, #24]
 8005f78:	f000 f8f6 	bl	8006168 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8005f7c:	4b1a      	ldr	r3, [pc, #104]	; (8005fe8 <pvPortMalloc+0x178>)
 8005f7e:	681a      	ldr	r2, [r3, #0]
 8005f80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f82:	685b      	ldr	r3, [r3, #4]
 8005f84:	1ad3      	subs	r3, r2, r3
 8005f86:	4a18      	ldr	r2, [pc, #96]	; (8005fe8 <pvPortMalloc+0x178>)
 8005f88:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8005f8a:	4b17      	ldr	r3, [pc, #92]	; (8005fe8 <pvPortMalloc+0x178>)
 8005f8c:	681a      	ldr	r2, [r3, #0]
 8005f8e:	4b18      	ldr	r3, [pc, #96]	; (8005ff0 <pvPortMalloc+0x180>)
 8005f90:	681b      	ldr	r3, [r3, #0]
 8005f92:	429a      	cmp	r2, r3
 8005f94:	d203      	bcs.n	8005f9e <pvPortMalloc+0x12e>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8005f96:	4b14      	ldr	r3, [pc, #80]	; (8005fe8 <pvPortMalloc+0x178>)
 8005f98:	681b      	ldr	r3, [r3, #0]
 8005f9a:	4a15      	ldr	r2, [pc, #84]	; (8005ff0 <pvPortMalloc+0x180>)
 8005f9c:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8005f9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005fa0:	685a      	ldr	r2, [r3, #4]
 8005fa2:	4b10      	ldr	r3, [pc, #64]	; (8005fe4 <pvPortMalloc+0x174>)
 8005fa4:	681b      	ldr	r3, [r3, #0]
 8005fa6:	431a      	orrs	r2, r3
 8005fa8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005faa:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8005fac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005fae:	2200      	movs	r2, #0
 8005fb0:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8005fb2:	f7fe ff45 	bl	8004e40 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8005fb6:	69fb      	ldr	r3, [r7, #28]
 8005fb8:	f003 0307 	and.w	r3, r3, #7
 8005fbc:	2b00      	cmp	r3, #0
 8005fbe:	d009      	beq.n	8005fd4 <pvPortMalloc+0x164>
 8005fc0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005fc4:	f383 8811 	msr	BASEPRI, r3
 8005fc8:	f3bf 8f6f 	isb	sy
 8005fcc:	f3bf 8f4f 	dsb	sy
 8005fd0:	60fb      	str	r3, [r7, #12]
 8005fd2:	e7fe      	b.n	8005fd2 <pvPortMalloc+0x162>
	return pvReturn;
 8005fd4:	69fb      	ldr	r3, [r7, #28]
}
 8005fd6:	4618      	mov	r0, r3
 8005fd8:	3728      	adds	r7, #40	; 0x28
 8005fda:	46bd      	mov	sp, r7
 8005fdc:	bd80      	pop	{r7, pc}
 8005fde:	bf00      	nop
 8005fe0:	24003fdc 	.word	0x24003fdc
 8005fe4:	24003fe8 	.word	0x24003fe8
 8005fe8:	24003fe0 	.word	0x24003fe0
 8005fec:	24003fd4 	.word	0x24003fd4
 8005ff0:	24003fe4 	.word	0x24003fe4

08005ff4 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8005ff4:	b580      	push	{r7, lr}
 8005ff6:	b086      	sub	sp, #24
 8005ff8:	af00      	add	r7, sp, #0
 8005ffa:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8005ffc:	687b      	ldr	r3, [r7, #4]
 8005ffe:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8006000:	687b      	ldr	r3, [r7, #4]
 8006002:	2b00      	cmp	r3, #0
 8006004:	d046      	beq.n	8006094 <vPortFree+0xa0>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8006006:	2308      	movs	r3, #8
 8006008:	425b      	negs	r3, r3
 800600a:	697a      	ldr	r2, [r7, #20]
 800600c:	4413      	add	r3, r2
 800600e:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8006010:	697b      	ldr	r3, [r7, #20]
 8006012:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8006014:	693b      	ldr	r3, [r7, #16]
 8006016:	685a      	ldr	r2, [r3, #4]
 8006018:	4b20      	ldr	r3, [pc, #128]	; (800609c <vPortFree+0xa8>)
 800601a:	681b      	ldr	r3, [r3, #0]
 800601c:	4013      	ands	r3, r2
 800601e:	2b00      	cmp	r3, #0
 8006020:	d109      	bne.n	8006036 <vPortFree+0x42>
 8006022:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006026:	f383 8811 	msr	BASEPRI, r3
 800602a:	f3bf 8f6f 	isb	sy
 800602e:	f3bf 8f4f 	dsb	sy
 8006032:	60fb      	str	r3, [r7, #12]
 8006034:	e7fe      	b.n	8006034 <vPortFree+0x40>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8006036:	693b      	ldr	r3, [r7, #16]
 8006038:	681b      	ldr	r3, [r3, #0]
 800603a:	2b00      	cmp	r3, #0
 800603c:	d009      	beq.n	8006052 <vPortFree+0x5e>
 800603e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006042:	f383 8811 	msr	BASEPRI, r3
 8006046:	f3bf 8f6f 	isb	sy
 800604a:	f3bf 8f4f 	dsb	sy
 800604e:	60bb      	str	r3, [r7, #8]
 8006050:	e7fe      	b.n	8006050 <vPortFree+0x5c>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8006052:	693b      	ldr	r3, [r7, #16]
 8006054:	685a      	ldr	r2, [r3, #4]
 8006056:	4b11      	ldr	r3, [pc, #68]	; (800609c <vPortFree+0xa8>)
 8006058:	681b      	ldr	r3, [r3, #0]
 800605a:	4013      	ands	r3, r2
 800605c:	2b00      	cmp	r3, #0
 800605e:	d019      	beq.n	8006094 <vPortFree+0xa0>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8006060:	693b      	ldr	r3, [r7, #16]
 8006062:	681b      	ldr	r3, [r3, #0]
 8006064:	2b00      	cmp	r3, #0
 8006066:	d115      	bne.n	8006094 <vPortFree+0xa0>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8006068:	693b      	ldr	r3, [r7, #16]
 800606a:	685a      	ldr	r2, [r3, #4]
 800606c:	4b0b      	ldr	r3, [pc, #44]	; (800609c <vPortFree+0xa8>)
 800606e:	681b      	ldr	r3, [r3, #0]
 8006070:	43db      	mvns	r3, r3
 8006072:	401a      	ands	r2, r3
 8006074:	693b      	ldr	r3, [r7, #16]
 8006076:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8006078:	f7fe fed4 	bl	8004e24 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800607c:	693b      	ldr	r3, [r7, #16]
 800607e:	685a      	ldr	r2, [r3, #4]
 8006080:	4b07      	ldr	r3, [pc, #28]	; (80060a0 <vPortFree+0xac>)
 8006082:	681b      	ldr	r3, [r3, #0]
 8006084:	4413      	add	r3, r2
 8006086:	4a06      	ldr	r2, [pc, #24]	; (80060a0 <vPortFree+0xac>)
 8006088:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800608a:	6938      	ldr	r0, [r7, #16]
 800608c:	f000 f86c 	bl	8006168 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 8006090:	f7fe fed6 	bl	8004e40 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8006094:	bf00      	nop
 8006096:	3718      	adds	r7, #24
 8006098:	46bd      	mov	sp, r7
 800609a:	bd80      	pop	{r7, pc}
 800609c:	24003fe8 	.word	0x24003fe8
 80060a0:	24003fe0 	.word	0x24003fe0

080060a4 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 80060a4:	b480      	push	{r7}
 80060a6:	b085      	sub	sp, #20
 80060a8:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 80060aa:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 80060ae:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 80060b0:	4b27      	ldr	r3, [pc, #156]	; (8006150 <prvHeapInit+0xac>)
 80060b2:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 80060b4:	68fb      	ldr	r3, [r7, #12]
 80060b6:	f003 0307 	and.w	r3, r3, #7
 80060ba:	2b00      	cmp	r3, #0
 80060bc:	d00c      	beq.n	80060d8 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 80060be:	68fb      	ldr	r3, [r7, #12]
 80060c0:	3307      	adds	r3, #7
 80060c2:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80060c4:	68fb      	ldr	r3, [r7, #12]
 80060c6:	f023 0307 	bic.w	r3, r3, #7
 80060ca:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 80060cc:	68ba      	ldr	r2, [r7, #8]
 80060ce:	68fb      	ldr	r3, [r7, #12]
 80060d0:	1ad3      	subs	r3, r2, r3
 80060d2:	4a1f      	ldr	r2, [pc, #124]	; (8006150 <prvHeapInit+0xac>)
 80060d4:	4413      	add	r3, r2
 80060d6:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 80060d8:	68fb      	ldr	r3, [r7, #12]
 80060da:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 80060dc:	4a1d      	ldr	r2, [pc, #116]	; (8006154 <prvHeapInit+0xb0>)
 80060de:	687b      	ldr	r3, [r7, #4]
 80060e0:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 80060e2:	4b1c      	ldr	r3, [pc, #112]	; (8006154 <prvHeapInit+0xb0>)
 80060e4:	2200      	movs	r2, #0
 80060e6:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 80060e8:	687b      	ldr	r3, [r7, #4]
 80060ea:	68ba      	ldr	r2, [r7, #8]
 80060ec:	4413      	add	r3, r2
 80060ee:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 80060f0:	2208      	movs	r2, #8
 80060f2:	68fb      	ldr	r3, [r7, #12]
 80060f4:	1a9b      	subs	r3, r3, r2
 80060f6:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80060f8:	68fb      	ldr	r3, [r7, #12]
 80060fa:	f023 0307 	bic.w	r3, r3, #7
 80060fe:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8006100:	68fb      	ldr	r3, [r7, #12]
 8006102:	4a15      	ldr	r2, [pc, #84]	; (8006158 <prvHeapInit+0xb4>)
 8006104:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8006106:	4b14      	ldr	r3, [pc, #80]	; (8006158 <prvHeapInit+0xb4>)
 8006108:	681b      	ldr	r3, [r3, #0]
 800610a:	2200      	movs	r2, #0
 800610c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800610e:	4b12      	ldr	r3, [pc, #72]	; (8006158 <prvHeapInit+0xb4>)
 8006110:	681b      	ldr	r3, [r3, #0]
 8006112:	2200      	movs	r2, #0
 8006114:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8006116:	687b      	ldr	r3, [r7, #4]
 8006118:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800611a:	683b      	ldr	r3, [r7, #0]
 800611c:	68fa      	ldr	r2, [r7, #12]
 800611e:	1ad2      	subs	r2, r2, r3
 8006120:	683b      	ldr	r3, [r7, #0]
 8006122:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8006124:	4b0c      	ldr	r3, [pc, #48]	; (8006158 <prvHeapInit+0xb4>)
 8006126:	681a      	ldr	r2, [r3, #0]
 8006128:	683b      	ldr	r3, [r7, #0]
 800612a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800612c:	683b      	ldr	r3, [r7, #0]
 800612e:	685b      	ldr	r3, [r3, #4]
 8006130:	4a0a      	ldr	r2, [pc, #40]	; (800615c <prvHeapInit+0xb8>)
 8006132:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8006134:	683b      	ldr	r3, [r7, #0]
 8006136:	685b      	ldr	r3, [r3, #4]
 8006138:	4a09      	ldr	r2, [pc, #36]	; (8006160 <prvHeapInit+0xbc>)
 800613a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800613c:	4b09      	ldr	r3, [pc, #36]	; (8006164 <prvHeapInit+0xc0>)
 800613e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8006142:	601a      	str	r2, [r3, #0]
}
 8006144:	bf00      	nop
 8006146:	3714      	adds	r7, #20
 8006148:	46bd      	mov	sp, r7
 800614a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800614e:	4770      	bx	lr
 8006150:	240003d4 	.word	0x240003d4
 8006154:	24003fd4 	.word	0x24003fd4
 8006158:	24003fdc 	.word	0x24003fdc
 800615c:	24003fe4 	.word	0x24003fe4
 8006160:	24003fe0 	.word	0x24003fe0
 8006164:	24003fe8 	.word	0x24003fe8

08006168 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8006168:	b480      	push	{r7}
 800616a:	b085      	sub	sp, #20
 800616c:	af00      	add	r7, sp, #0
 800616e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8006170:	4b28      	ldr	r3, [pc, #160]	; (8006214 <prvInsertBlockIntoFreeList+0xac>)
 8006172:	60fb      	str	r3, [r7, #12]
 8006174:	e002      	b.n	800617c <prvInsertBlockIntoFreeList+0x14>
 8006176:	68fb      	ldr	r3, [r7, #12]
 8006178:	681b      	ldr	r3, [r3, #0]
 800617a:	60fb      	str	r3, [r7, #12]
 800617c:	68fb      	ldr	r3, [r7, #12]
 800617e:	681b      	ldr	r3, [r3, #0]
 8006180:	687a      	ldr	r2, [r7, #4]
 8006182:	429a      	cmp	r2, r3
 8006184:	d8f7      	bhi.n	8006176 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8006186:	68fb      	ldr	r3, [r7, #12]
 8006188:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800618a:	68fb      	ldr	r3, [r7, #12]
 800618c:	685b      	ldr	r3, [r3, #4]
 800618e:	68ba      	ldr	r2, [r7, #8]
 8006190:	4413      	add	r3, r2
 8006192:	687a      	ldr	r2, [r7, #4]
 8006194:	429a      	cmp	r2, r3
 8006196:	d108      	bne.n	80061aa <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8006198:	68fb      	ldr	r3, [r7, #12]
 800619a:	685a      	ldr	r2, [r3, #4]
 800619c:	687b      	ldr	r3, [r7, #4]
 800619e:	685b      	ldr	r3, [r3, #4]
 80061a0:	441a      	add	r2, r3
 80061a2:	68fb      	ldr	r3, [r7, #12]
 80061a4:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 80061a6:	68fb      	ldr	r3, [r7, #12]
 80061a8:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 80061aa:	687b      	ldr	r3, [r7, #4]
 80061ac:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 80061ae:	687b      	ldr	r3, [r7, #4]
 80061b0:	685b      	ldr	r3, [r3, #4]
 80061b2:	68ba      	ldr	r2, [r7, #8]
 80061b4:	441a      	add	r2, r3
 80061b6:	68fb      	ldr	r3, [r7, #12]
 80061b8:	681b      	ldr	r3, [r3, #0]
 80061ba:	429a      	cmp	r2, r3
 80061bc:	d118      	bne.n	80061f0 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 80061be:	68fb      	ldr	r3, [r7, #12]
 80061c0:	681a      	ldr	r2, [r3, #0]
 80061c2:	4b15      	ldr	r3, [pc, #84]	; (8006218 <prvInsertBlockIntoFreeList+0xb0>)
 80061c4:	681b      	ldr	r3, [r3, #0]
 80061c6:	429a      	cmp	r2, r3
 80061c8:	d00d      	beq.n	80061e6 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 80061ca:	687b      	ldr	r3, [r7, #4]
 80061cc:	685a      	ldr	r2, [r3, #4]
 80061ce:	68fb      	ldr	r3, [r7, #12]
 80061d0:	681b      	ldr	r3, [r3, #0]
 80061d2:	685b      	ldr	r3, [r3, #4]
 80061d4:	441a      	add	r2, r3
 80061d6:	687b      	ldr	r3, [r7, #4]
 80061d8:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 80061da:	68fb      	ldr	r3, [r7, #12]
 80061dc:	681b      	ldr	r3, [r3, #0]
 80061de:	681a      	ldr	r2, [r3, #0]
 80061e0:	687b      	ldr	r3, [r7, #4]
 80061e2:	601a      	str	r2, [r3, #0]
 80061e4:	e008      	b.n	80061f8 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 80061e6:	4b0c      	ldr	r3, [pc, #48]	; (8006218 <prvInsertBlockIntoFreeList+0xb0>)
 80061e8:	681a      	ldr	r2, [r3, #0]
 80061ea:	687b      	ldr	r3, [r7, #4]
 80061ec:	601a      	str	r2, [r3, #0]
 80061ee:	e003      	b.n	80061f8 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 80061f0:	68fb      	ldr	r3, [r7, #12]
 80061f2:	681a      	ldr	r2, [r3, #0]
 80061f4:	687b      	ldr	r3, [r7, #4]
 80061f6:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 80061f8:	68fa      	ldr	r2, [r7, #12]
 80061fa:	687b      	ldr	r3, [r7, #4]
 80061fc:	429a      	cmp	r2, r3
 80061fe:	d002      	beq.n	8006206 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8006200:	68fb      	ldr	r3, [r7, #12]
 8006202:	687a      	ldr	r2, [r7, #4]
 8006204:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8006206:	bf00      	nop
 8006208:	3714      	adds	r7, #20
 800620a:	46bd      	mov	sp, r7
 800620c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006210:	4770      	bx	lr
 8006212:	bf00      	nop
 8006214:	24003fd4 	.word	0x24003fd4
 8006218:	24003fdc 	.word	0x24003fdc

0800621c <tcpip_thread>:
 *
 * @param arg unused argument
 */
static void
tcpip_thread(void *arg)
{
 800621c:	b580      	push	{r7, lr}
 800621e:	b084      	sub	sp, #16
 8006220:	af00      	add	r7, sp, #0
 8006222:	6078      	str	r0, [r7, #4]
  struct tcpip_msg *msg;
  LWIP_UNUSED_ARG(arg);

  if (tcpip_init_done != NULL) {
 8006224:	4b29      	ldr	r3, [pc, #164]	; (80062cc <tcpip_thread+0xb0>)
 8006226:	681b      	ldr	r3, [r3, #0]
 8006228:	2b00      	cmp	r3, #0
 800622a:	d005      	beq.n	8006238 <tcpip_thread+0x1c>
    tcpip_init_done(tcpip_init_done_arg);
 800622c:	4b27      	ldr	r3, [pc, #156]	; (80062cc <tcpip_thread+0xb0>)
 800622e:	681b      	ldr	r3, [r3, #0]
 8006230:	4a27      	ldr	r2, [pc, #156]	; (80062d0 <tcpip_thread+0xb4>)
 8006232:	6812      	ldr	r2, [r2, #0]
 8006234:	4610      	mov	r0, r2
 8006236:	4798      	blx	r3
  }

  LOCK_TCPIP_CORE();
 8006238:	4826      	ldr	r0, [pc, #152]	; (80062d4 <tcpip_thread+0xb8>)
 800623a:	f008 ffb5 	bl	800f1a8 <sys_mutex_lock>
  while (1) {                          /* MAIN Loop */
    UNLOCK_TCPIP_CORE();
 800623e:	4825      	ldr	r0, [pc, #148]	; (80062d4 <tcpip_thread+0xb8>)
 8006240:	f008 ffc1 	bl	800f1c6 <sys_mutex_unlock>
    LWIP_TCPIP_THREAD_ALIVE();
    /* wait for a message, timeouts are processed while waiting */
    TCPIP_MBOX_FETCH(&mbox, (void **)&msg);
 8006244:	f107 030c 	add.w	r3, r7, #12
 8006248:	4619      	mov	r1, r3
 800624a:	4823      	ldr	r0, [pc, #140]	; (80062d8 <tcpip_thread+0xbc>)
 800624c:	f006 fac4 	bl	800c7d8 <sys_timeouts_mbox_fetch>
    LOCK_TCPIP_CORE();
 8006250:	4820      	ldr	r0, [pc, #128]	; (80062d4 <tcpip_thread+0xb8>)
 8006252:	f008 ffa9 	bl	800f1a8 <sys_mutex_lock>
    if (msg == NULL) {
 8006256:	68fb      	ldr	r3, [r7, #12]
 8006258:	2b00      	cmp	r3, #0
 800625a:	d106      	bne.n	800626a <tcpip_thread+0x4e>
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: invalid message: NULL\n"));
      LWIP_ASSERT("tcpip_thread: invalid message", 0);
 800625c:	4b1f      	ldr	r3, [pc, #124]	; (80062dc <tcpip_thread+0xc0>)
 800625e:	2269      	movs	r2, #105	; 0x69
 8006260:	491f      	ldr	r1, [pc, #124]	; (80062e0 <tcpip_thread+0xc4>)
 8006262:	4820      	ldr	r0, [pc, #128]	; (80062e4 <tcpip_thread+0xc8>)
 8006264:	f00a f964 	bl	8010530 <iprintf>
      continue;
 8006268:	e02f      	b.n	80062ca <tcpip_thread+0xae>
    }
    switch (msg->type) {
 800626a:	68fb      	ldr	r3, [r7, #12]
 800626c:	781b      	ldrb	r3, [r3, #0]
 800626e:	2b03      	cmp	r3, #3
 8006270:	d011      	beq.n	8006296 <tcpip_thread+0x7a>
 8006272:	2b04      	cmp	r3, #4
 8006274:	d01b      	beq.n	80062ae <tcpip_thread+0x92>
 8006276:	2b02      	cmp	r3, #2
 8006278:	d120      	bne.n	80062bc <tcpip_thread+0xa0>
#endif /* !LWIP_TCPIP_CORE_LOCKING */

#if !LWIP_TCPIP_CORE_LOCKING_INPUT
    case TCPIP_MSG_INPKT:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: PACKET %p\n", (void *)msg));
      msg->msg.inp.input_fn(msg->msg.inp.p, msg->msg.inp.netif);
 800627a:	68fb      	ldr	r3, [r7, #12]
 800627c:	68db      	ldr	r3, [r3, #12]
 800627e:	68fa      	ldr	r2, [r7, #12]
 8006280:	6850      	ldr	r0, [r2, #4]
 8006282:	68fa      	ldr	r2, [r7, #12]
 8006284:	6892      	ldr	r2, [r2, #8]
 8006286:	4611      	mov	r1, r2
 8006288:	4798      	blx	r3
      memp_free(MEMP_TCPIP_MSG_INPKT, msg);
 800628a:	68fb      	ldr	r3, [r7, #12]
 800628c:	4619      	mov	r1, r3
 800628e:	2009      	movs	r0, #9
 8006290:	f000 fda6 	bl	8006de0 <memp_free>
      break;
 8006294:	e019      	b.n	80062ca <tcpip_thread+0xae>
      break;
#endif /* LWIP_TCPIP_TIMEOUT && LWIP_TIMERS */

    case TCPIP_MSG_CALLBACK:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: CALLBACK %p\n", (void *)msg));
      msg->msg.cb.function(msg->msg.cb.ctx);
 8006296:	68fb      	ldr	r3, [r7, #12]
 8006298:	685b      	ldr	r3, [r3, #4]
 800629a:	68fa      	ldr	r2, [r7, #12]
 800629c:	6892      	ldr	r2, [r2, #8]
 800629e:	4610      	mov	r0, r2
 80062a0:	4798      	blx	r3
      memp_free(MEMP_TCPIP_MSG_API, msg);
 80062a2:	68fb      	ldr	r3, [r7, #12]
 80062a4:	4619      	mov	r1, r3
 80062a6:	2008      	movs	r0, #8
 80062a8:	f000 fd9a 	bl	8006de0 <memp_free>
      break;
 80062ac:	e00d      	b.n	80062ca <tcpip_thread+0xae>

    case TCPIP_MSG_CALLBACK_STATIC:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: CALLBACK_STATIC %p\n", (void *)msg));
      msg->msg.cb.function(msg->msg.cb.ctx);
 80062ae:	68fb      	ldr	r3, [r7, #12]
 80062b0:	685b      	ldr	r3, [r3, #4]
 80062b2:	68fa      	ldr	r2, [r7, #12]
 80062b4:	6892      	ldr	r2, [r2, #8]
 80062b6:	4610      	mov	r0, r2
 80062b8:	4798      	blx	r3
      break;
 80062ba:	e006      	b.n	80062ca <tcpip_thread+0xae>

    default:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: invalid message: %d\n", msg->type));
      LWIP_ASSERT("tcpip_thread: invalid message", 0);
 80062bc:	4b07      	ldr	r3, [pc, #28]	; (80062dc <tcpip_thread+0xc0>)
 80062be:	229b      	movs	r2, #155	; 0x9b
 80062c0:	4907      	ldr	r1, [pc, #28]	; (80062e0 <tcpip_thread+0xc4>)
 80062c2:	4808      	ldr	r0, [pc, #32]	; (80062e4 <tcpip_thread+0xc8>)
 80062c4:	f00a f934 	bl	8010530 <iprintf>
      break;
 80062c8:	bf00      	nop
    UNLOCK_TCPIP_CORE();
 80062ca:	e7b8      	b.n	800623e <tcpip_thread+0x22>
 80062cc:	24003fec 	.word	0x24003fec
 80062d0:	24003ff0 	.word	0x24003ff0
 80062d4:	24004198 	.word	0x24004198
 80062d8:	24003ff4 	.word	0x24003ff4
 80062dc:	08011318 	.word	0x08011318
 80062e0:	08011348 	.word	0x08011348
 80062e4:	08011368 	.word	0x08011368

080062e8 <tcpip_inpkt>:
 * @param inp the network interface on which the packet was received
 * @param input_fn input function to call
 */
err_t
tcpip_inpkt(struct pbuf *p, struct netif *inp, netif_input_fn input_fn)
{
 80062e8:	b580      	push	{r7, lr}
 80062ea:	b086      	sub	sp, #24
 80062ec:	af00      	add	r7, sp, #0
 80062ee:	60f8      	str	r0, [r7, #12]
 80062f0:	60b9      	str	r1, [r7, #8]
 80062f2:	607a      	str	r2, [r7, #4]
  UNLOCK_TCPIP_CORE();
  return ret;
#else /* LWIP_TCPIP_CORE_LOCKING_INPUT */
  struct tcpip_msg *msg;

  LWIP_ASSERT("Invalid mbox", sys_mbox_valid_val(mbox));
 80062f4:	481a      	ldr	r0, [pc, #104]	; (8006360 <tcpip_inpkt+0x78>)
 80062f6:	f008 feb9 	bl	800f06c <sys_mbox_valid>
 80062fa:	4603      	mov	r3, r0
 80062fc:	2b00      	cmp	r3, #0
 80062fe:	d105      	bne.n	800630c <tcpip_inpkt+0x24>
 8006300:	4b18      	ldr	r3, [pc, #96]	; (8006364 <tcpip_inpkt+0x7c>)
 8006302:	22b5      	movs	r2, #181	; 0xb5
 8006304:	4918      	ldr	r1, [pc, #96]	; (8006368 <tcpip_inpkt+0x80>)
 8006306:	4819      	ldr	r0, [pc, #100]	; (800636c <tcpip_inpkt+0x84>)
 8006308:	f00a f912 	bl	8010530 <iprintf>

  msg = (struct tcpip_msg *)memp_malloc(MEMP_TCPIP_MSG_INPKT);
 800630c:	2009      	movs	r0, #9
 800630e:	f000 fcf1 	bl	8006cf4 <memp_malloc>
 8006312:	6178      	str	r0, [r7, #20]
  if (msg == NULL) {
 8006314:	697b      	ldr	r3, [r7, #20]
 8006316:	2b00      	cmp	r3, #0
 8006318:	d102      	bne.n	8006320 <tcpip_inpkt+0x38>
    return ERR_MEM;
 800631a:	f04f 33ff 	mov.w	r3, #4294967295
 800631e:	e01a      	b.n	8006356 <tcpip_inpkt+0x6e>
  }

  msg->type = TCPIP_MSG_INPKT;
 8006320:	697b      	ldr	r3, [r7, #20]
 8006322:	2202      	movs	r2, #2
 8006324:	701a      	strb	r2, [r3, #0]
  msg->msg.inp.p = p;
 8006326:	697b      	ldr	r3, [r7, #20]
 8006328:	68fa      	ldr	r2, [r7, #12]
 800632a:	605a      	str	r2, [r3, #4]
  msg->msg.inp.netif = inp;
 800632c:	697b      	ldr	r3, [r7, #20]
 800632e:	68ba      	ldr	r2, [r7, #8]
 8006330:	609a      	str	r2, [r3, #8]
  msg->msg.inp.input_fn = input_fn;
 8006332:	697b      	ldr	r3, [r7, #20]
 8006334:	687a      	ldr	r2, [r7, #4]
 8006336:	60da      	str	r2, [r3, #12]
  if (sys_mbox_trypost(&mbox, msg) != ERR_OK) {
 8006338:	6979      	ldr	r1, [r7, #20]
 800633a:	4809      	ldr	r0, [pc, #36]	; (8006360 <tcpip_inpkt+0x78>)
 800633c:	f008 fe3d 	bl	800efba <sys_mbox_trypost>
 8006340:	4603      	mov	r3, r0
 8006342:	2b00      	cmp	r3, #0
 8006344:	d006      	beq.n	8006354 <tcpip_inpkt+0x6c>
    memp_free(MEMP_TCPIP_MSG_INPKT, msg);
 8006346:	6979      	ldr	r1, [r7, #20]
 8006348:	2009      	movs	r0, #9
 800634a:	f000 fd49 	bl	8006de0 <memp_free>
    return ERR_MEM;
 800634e:	f04f 33ff 	mov.w	r3, #4294967295
 8006352:	e000      	b.n	8006356 <tcpip_inpkt+0x6e>
  }
  return ERR_OK;
 8006354:	2300      	movs	r3, #0
#endif /* LWIP_TCPIP_CORE_LOCKING_INPUT */
}
 8006356:	4618      	mov	r0, r3
 8006358:	3718      	adds	r7, #24
 800635a:	46bd      	mov	sp, r7
 800635c:	bd80      	pop	{r7, pc}
 800635e:	bf00      	nop
 8006360:	24003ff4 	.word	0x24003ff4
 8006364:	08011318 	.word	0x08011318
 8006368:	08011390 	.word	0x08011390
 800636c:	08011368 	.word	0x08011368

08006370 <tcpip_input>:
 *          NETIF_FLAG_ETHERNET flags)
 * @param inp the network interface on which the packet was received
 */
err_t
tcpip_input(struct pbuf *p, struct netif *inp)
{
 8006370:	b580      	push	{r7, lr}
 8006372:	b082      	sub	sp, #8
 8006374:	af00      	add	r7, sp, #0
 8006376:	6078      	str	r0, [r7, #4]
 8006378:	6039      	str	r1, [r7, #0]
#if LWIP_ETHERNET
  if (inp->flags & (NETIF_FLAG_ETHARP | NETIF_FLAG_ETHERNET)) {
 800637a:	683b      	ldr	r3, [r7, #0]
 800637c:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 8006380:	f003 0318 	and.w	r3, r3, #24
 8006384:	2b00      	cmp	r3, #0
 8006386:	d006      	beq.n	8006396 <tcpip_input+0x26>
    return tcpip_inpkt(p, inp, ethernet_input);
 8006388:	4a08      	ldr	r2, [pc, #32]	; (80063ac <tcpip_input+0x3c>)
 800638a:	6839      	ldr	r1, [r7, #0]
 800638c:	6878      	ldr	r0, [r7, #4]
 800638e:	f7ff ffab 	bl	80062e8 <tcpip_inpkt>
 8006392:	4603      	mov	r3, r0
 8006394:	e005      	b.n	80063a2 <tcpip_input+0x32>
  } else
#endif /* LWIP_ETHERNET */
  return tcpip_inpkt(p, inp, ip_input);
 8006396:	4a06      	ldr	r2, [pc, #24]	; (80063b0 <tcpip_input+0x40>)
 8006398:	6839      	ldr	r1, [r7, #0]
 800639a:	6878      	ldr	r0, [r7, #4]
 800639c:	f7ff ffa4 	bl	80062e8 <tcpip_inpkt>
 80063a0:	4603      	mov	r3, r0
}
 80063a2:	4618      	mov	r0, r3
 80063a4:	3708      	adds	r7, #8
 80063a6:	46bd      	mov	sp, r7
 80063a8:	bd80      	pop	{r7, pc}
 80063aa:	bf00      	nop
 80063ac:	0800ed9d 	.word	0x0800ed9d
 80063b0:	0800dd61 	.word	0x0800dd61

080063b4 <tcpip_callback_with_block>:
 * @param block 1 to block until the request is posted, 0 to non-blocking mode
 * @return ERR_OK if the function was called, another err_t if not
 */
err_t
tcpip_callback_with_block(tcpip_callback_fn function, void *ctx, u8_t block)
{
 80063b4:	b580      	push	{r7, lr}
 80063b6:	b086      	sub	sp, #24
 80063b8:	af00      	add	r7, sp, #0
 80063ba:	60f8      	str	r0, [r7, #12]
 80063bc:	60b9      	str	r1, [r7, #8]
 80063be:	4613      	mov	r3, r2
 80063c0:	71fb      	strb	r3, [r7, #7]
  struct tcpip_msg *msg;

  LWIP_ASSERT("Invalid mbox", sys_mbox_valid_val(mbox));
 80063c2:	481d      	ldr	r0, [pc, #116]	; (8006438 <tcpip_callback_with_block+0x84>)
 80063c4:	f008 fe52 	bl	800f06c <sys_mbox_valid>
 80063c8:	4603      	mov	r3, r0
 80063ca:	2b00      	cmp	r3, #0
 80063cc:	d105      	bne.n	80063da <tcpip_callback_with_block+0x26>
 80063ce:	4b1b      	ldr	r3, [pc, #108]	; (800643c <tcpip_callback_with_block+0x88>)
 80063d0:	22ee      	movs	r2, #238	; 0xee
 80063d2:	491b      	ldr	r1, [pc, #108]	; (8006440 <tcpip_callback_with_block+0x8c>)
 80063d4:	481b      	ldr	r0, [pc, #108]	; (8006444 <tcpip_callback_with_block+0x90>)
 80063d6:	f00a f8ab 	bl	8010530 <iprintf>

  msg = (struct tcpip_msg *)memp_malloc(MEMP_TCPIP_MSG_API);
 80063da:	2008      	movs	r0, #8
 80063dc:	f000 fc8a 	bl	8006cf4 <memp_malloc>
 80063e0:	6178      	str	r0, [r7, #20]
  if (msg == NULL) {
 80063e2:	697b      	ldr	r3, [r7, #20]
 80063e4:	2b00      	cmp	r3, #0
 80063e6:	d102      	bne.n	80063ee <tcpip_callback_with_block+0x3a>
    return ERR_MEM;
 80063e8:	f04f 33ff 	mov.w	r3, #4294967295
 80063ec:	e01f      	b.n	800642e <tcpip_callback_with_block+0x7a>
  }

  msg->type = TCPIP_MSG_CALLBACK;
 80063ee:	697b      	ldr	r3, [r7, #20]
 80063f0:	2203      	movs	r2, #3
 80063f2:	701a      	strb	r2, [r3, #0]
  msg->msg.cb.function = function;
 80063f4:	697b      	ldr	r3, [r7, #20]
 80063f6:	68fa      	ldr	r2, [r7, #12]
 80063f8:	605a      	str	r2, [r3, #4]
  msg->msg.cb.ctx = ctx;
 80063fa:	697b      	ldr	r3, [r7, #20]
 80063fc:	68ba      	ldr	r2, [r7, #8]
 80063fe:	609a      	str	r2, [r3, #8]
  if (block) {
 8006400:	79fb      	ldrb	r3, [r7, #7]
 8006402:	2b00      	cmp	r3, #0
 8006404:	d004      	beq.n	8006410 <tcpip_callback_with_block+0x5c>
    sys_mbox_post(&mbox, msg);
 8006406:	6979      	ldr	r1, [r7, #20]
 8006408:	480b      	ldr	r0, [pc, #44]	; (8006438 <tcpip_callback_with_block+0x84>)
 800640a:	f008 fdc1 	bl	800ef90 <sys_mbox_post>
 800640e:	e00d      	b.n	800642c <tcpip_callback_with_block+0x78>
  } else {
    if (sys_mbox_trypost(&mbox, msg) != ERR_OK) {
 8006410:	6979      	ldr	r1, [r7, #20]
 8006412:	4809      	ldr	r0, [pc, #36]	; (8006438 <tcpip_callback_with_block+0x84>)
 8006414:	f008 fdd1 	bl	800efba <sys_mbox_trypost>
 8006418:	4603      	mov	r3, r0
 800641a:	2b00      	cmp	r3, #0
 800641c:	d006      	beq.n	800642c <tcpip_callback_with_block+0x78>
      memp_free(MEMP_TCPIP_MSG_API, msg);
 800641e:	6979      	ldr	r1, [r7, #20]
 8006420:	2008      	movs	r0, #8
 8006422:	f000 fcdd 	bl	8006de0 <memp_free>
      return ERR_MEM;
 8006426:	f04f 33ff 	mov.w	r3, #4294967295
 800642a:	e000      	b.n	800642e <tcpip_callback_with_block+0x7a>
    }
  }
  return ERR_OK;
 800642c:	2300      	movs	r3, #0
}
 800642e:	4618      	mov	r0, r3
 8006430:	3718      	adds	r7, #24
 8006432:	46bd      	mov	sp, r7
 8006434:	bd80      	pop	{r7, pc}
 8006436:	bf00      	nop
 8006438:	24003ff4 	.word	0x24003ff4
 800643c:	08011318 	.word	0x08011318
 8006440:	08011390 	.word	0x08011390
 8006444:	08011368 	.word	0x08011368

08006448 <tcpip_init>:
 * @param initfunc a function to call when tcpip_thread is running and finished initializing
 * @param arg argument to pass to initfunc
 */
void
tcpip_init(tcpip_init_done_fn initfunc, void *arg)
{
 8006448:	b580      	push	{r7, lr}
 800644a:	b084      	sub	sp, #16
 800644c:	af02      	add	r7, sp, #8
 800644e:	6078      	str	r0, [r7, #4]
 8006450:	6039      	str	r1, [r7, #0]
  lwip_init();
 8006452:	f000 f86a 	bl	800652a <lwip_init>

  tcpip_init_done = initfunc;
 8006456:	4a17      	ldr	r2, [pc, #92]	; (80064b4 <tcpip_init+0x6c>)
 8006458:	687b      	ldr	r3, [r7, #4]
 800645a:	6013      	str	r3, [r2, #0]
  tcpip_init_done_arg = arg;
 800645c:	4a16      	ldr	r2, [pc, #88]	; (80064b8 <tcpip_init+0x70>)
 800645e:	683b      	ldr	r3, [r7, #0]
 8006460:	6013      	str	r3, [r2, #0]
  if (sys_mbox_new(&mbox, TCPIP_MBOX_SIZE) != ERR_OK) {
 8006462:	2106      	movs	r1, #6
 8006464:	4815      	ldr	r0, [pc, #84]	; (80064bc <tcpip_init+0x74>)
 8006466:	f008 fd75 	bl	800ef54 <sys_mbox_new>
 800646a:	4603      	mov	r3, r0
 800646c:	2b00      	cmp	r3, #0
 800646e:	d006      	beq.n	800647e <tcpip_init+0x36>
    LWIP_ASSERT("failed to create tcpip_thread mbox", 0);
 8006470:	4b13      	ldr	r3, [pc, #76]	; (80064c0 <tcpip_init+0x78>)
 8006472:	f240 12d5 	movw	r2, #469	; 0x1d5
 8006476:	4913      	ldr	r1, [pc, #76]	; (80064c4 <tcpip_init+0x7c>)
 8006478:	4813      	ldr	r0, [pc, #76]	; (80064c8 <tcpip_init+0x80>)
 800647a:	f00a f859 	bl	8010530 <iprintf>
  }
#if LWIP_TCPIP_CORE_LOCKING
  if (sys_mutex_new(&lock_tcpip_core) != ERR_OK) {
 800647e:	4813      	ldr	r0, [pc, #76]	; (80064cc <tcpip_init+0x84>)
 8006480:	f008 fe78 	bl	800f174 <sys_mutex_new>
 8006484:	4603      	mov	r3, r0
 8006486:	2b00      	cmp	r3, #0
 8006488:	d006      	beq.n	8006498 <tcpip_init+0x50>
    LWIP_ASSERT("failed to create lock_tcpip_core", 0);
 800648a:	4b0d      	ldr	r3, [pc, #52]	; (80064c0 <tcpip_init+0x78>)
 800648c:	f240 12d9 	movw	r2, #473	; 0x1d9
 8006490:	490f      	ldr	r1, [pc, #60]	; (80064d0 <tcpip_init+0x88>)
 8006492:	480d      	ldr	r0, [pc, #52]	; (80064c8 <tcpip_init+0x80>)
 8006494:	f00a f84c 	bl	8010530 <iprintf>
  }
#endif /* LWIP_TCPIP_CORE_LOCKING */

  sys_thread_new(TCPIP_THREAD_NAME, tcpip_thread, NULL, TCPIP_THREAD_STACKSIZE, TCPIP_THREAD_PRIO);
 8006498:	2306      	movs	r3, #6
 800649a:	9300      	str	r3, [sp, #0]
 800649c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80064a0:	2200      	movs	r2, #0
 80064a2:	490c      	ldr	r1, [pc, #48]	; (80064d4 <tcpip_init+0x8c>)
 80064a4:	480c      	ldr	r0, [pc, #48]	; (80064d8 <tcpip_init+0x90>)
 80064a6:	f008 fe9b 	bl	800f1e0 <sys_thread_new>
}
 80064aa:	bf00      	nop
 80064ac:	3708      	adds	r7, #8
 80064ae:	46bd      	mov	sp, r7
 80064b0:	bd80      	pop	{r7, pc}
 80064b2:	bf00      	nop
 80064b4:	24003fec 	.word	0x24003fec
 80064b8:	24003ff0 	.word	0x24003ff0
 80064bc:	24003ff4 	.word	0x24003ff4
 80064c0:	08011318 	.word	0x08011318
 80064c4:	080113a0 	.word	0x080113a0
 80064c8:	08011368 	.word	0x08011368
 80064cc:	24004198 	.word	0x24004198
 80064d0:	080113c4 	.word	0x080113c4
 80064d4:	0800621d 	.word	0x0800621d
 80064d8:	080113e8 	.word	0x080113e8

080064dc <lwip_htons>:
 * @param n u16_t in host byte order
 * @return n in network byte order
 */
u16_t
lwip_htons(u16_t n)
{
 80064dc:	b480      	push	{r7}
 80064de:	b083      	sub	sp, #12
 80064e0:	af00      	add	r7, sp, #0
 80064e2:	4603      	mov	r3, r0
 80064e4:	80fb      	strh	r3, [r7, #6]
  return (u16_t)PP_HTONS(n);
 80064e6:	88fb      	ldrh	r3, [r7, #6]
 80064e8:	ba5b      	rev16	r3, r3
 80064ea:	b29b      	uxth	r3, r3
}
 80064ec:	4618      	mov	r0, r3
 80064ee:	370c      	adds	r7, #12
 80064f0:	46bd      	mov	sp, r7
 80064f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064f6:	4770      	bx	lr

080064f8 <lwip_htonl>:
 * @param n u32_t in host byte order
 * @return n in network byte order
 */
u32_t
lwip_htonl(u32_t n)
{
 80064f8:	b480      	push	{r7}
 80064fa:	b083      	sub	sp, #12
 80064fc:	af00      	add	r7, sp, #0
 80064fe:	6078      	str	r0, [r7, #4]
  return (u32_t)PP_HTONL(n);
 8006500:	687b      	ldr	r3, [r7, #4]
 8006502:	061a      	lsls	r2, r3, #24
 8006504:	687b      	ldr	r3, [r7, #4]
 8006506:	021b      	lsls	r3, r3, #8
 8006508:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800650c:	431a      	orrs	r2, r3
 800650e:	687b      	ldr	r3, [r7, #4]
 8006510:	0a1b      	lsrs	r3, r3, #8
 8006512:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8006516:	431a      	orrs	r2, r3
 8006518:	687b      	ldr	r3, [r7, #4]
 800651a:	0e1b      	lsrs	r3, r3, #24
 800651c:	4313      	orrs	r3, r2
}
 800651e:	4618      	mov	r0, r3
 8006520:	370c      	adds	r7, #12
 8006522:	46bd      	mov	sp, r7
 8006524:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006528:	4770      	bx	lr

0800652a <lwip_init>:
 * Initialize all modules.
 * Use this in NO_SYS mode. Use tcpip_init() otherwise.
 */
void
lwip_init(void)
{
 800652a:	b580      	push	{r7, lr}
 800652c:	b082      	sub	sp, #8
 800652e:	af00      	add	r7, sp, #0
#ifndef LWIP_SKIP_CONST_CHECK
  int a = 0;
 8006530:	2300      	movs	r3, #0
 8006532:	607b      	str	r3, [r7, #4]
#endif

  /* Modules initialization */
  stats_init();
#if !NO_SYS
  sys_init();
 8006534:	f008 fe10 	bl	800f158 <sys_init>
#endif /* !NO_SYS */
  mem_init();
 8006538:	f000 f8a6 	bl	8006688 <mem_init>
  memp_init();
 800653c:	f000 fb6c 	bl	8006c18 <memp_init>
  pbuf_init();
  netif_init();
 8006540:	f000 fc78 	bl	8006e34 <netif_init>
#endif /* LWIP_IPV4 */
#if LWIP_RAW
  raw_init();
#endif /* LWIP_RAW */
#if LWIP_UDP
  udp_init();
 8006544:	f006 f96e 	bl	800c824 <udp_init>
#endif /* LWIP_UDP */
#if LWIP_TCP
  tcp_init();
 8006548:	f001 fc6a 	bl	8007e20 <tcp_init>
#if PPP_SUPPORT
  ppp_init();
#endif
 
#if LWIP_TIMERS
  sys_timeouts_init();
 800654c:	f006 f800 	bl	800c550 <sys_timeouts_init>
#endif /* LWIP_TIMERS */
}
 8006550:	bf00      	nop
 8006552:	3708      	adds	r7, #8
 8006554:	46bd      	mov	sp, r7
 8006556:	bd80      	pop	{r7, pc}

08006558 <plug_holes>:
 * This assumes access to the heap is protected by the calling function
 * already.
 */
static void
plug_holes(struct mem *mem)
{
 8006558:	b580      	push	{r7, lr}
 800655a:	b084      	sub	sp, #16
 800655c:	af00      	add	r7, sp, #0
 800655e:	6078      	str	r0, [r7, #4]
  struct mem *nmem;
  struct mem *pmem;

  LWIP_ASSERT("plug_holes: mem >= ram", (u8_t *)mem >= ram);
 8006560:	4b40      	ldr	r3, [pc, #256]	; (8006664 <plug_holes+0x10c>)
 8006562:	681b      	ldr	r3, [r3, #0]
 8006564:	687a      	ldr	r2, [r7, #4]
 8006566:	429a      	cmp	r2, r3
 8006568:	d206      	bcs.n	8006578 <plug_holes+0x20>
 800656a:	4b3f      	ldr	r3, [pc, #252]	; (8006668 <plug_holes+0x110>)
 800656c:	f240 125d 	movw	r2, #349	; 0x15d
 8006570:	493e      	ldr	r1, [pc, #248]	; (800666c <plug_holes+0x114>)
 8006572:	483f      	ldr	r0, [pc, #252]	; (8006670 <plug_holes+0x118>)
 8006574:	f009 ffdc 	bl	8010530 <iprintf>
  LWIP_ASSERT("plug_holes: mem < ram_end", (u8_t *)mem < (u8_t *)ram_end);
 8006578:	4b3e      	ldr	r3, [pc, #248]	; (8006674 <plug_holes+0x11c>)
 800657a:	681b      	ldr	r3, [r3, #0]
 800657c:	687a      	ldr	r2, [r7, #4]
 800657e:	429a      	cmp	r2, r3
 8006580:	d306      	bcc.n	8006590 <plug_holes+0x38>
 8006582:	4b39      	ldr	r3, [pc, #228]	; (8006668 <plug_holes+0x110>)
 8006584:	f44f 72af 	mov.w	r2, #350	; 0x15e
 8006588:	493b      	ldr	r1, [pc, #236]	; (8006678 <plug_holes+0x120>)
 800658a:	4839      	ldr	r0, [pc, #228]	; (8006670 <plug_holes+0x118>)
 800658c:	f009 ffd0 	bl	8010530 <iprintf>
  LWIP_ASSERT("plug_holes: mem->used == 0", mem->used == 0);
 8006590:	687b      	ldr	r3, [r7, #4]
 8006592:	791b      	ldrb	r3, [r3, #4]
 8006594:	2b00      	cmp	r3, #0
 8006596:	d006      	beq.n	80065a6 <plug_holes+0x4e>
 8006598:	4b33      	ldr	r3, [pc, #204]	; (8006668 <plug_holes+0x110>)
 800659a:	f240 125f 	movw	r2, #351	; 0x15f
 800659e:	4937      	ldr	r1, [pc, #220]	; (800667c <plug_holes+0x124>)
 80065a0:	4833      	ldr	r0, [pc, #204]	; (8006670 <plug_holes+0x118>)
 80065a2:	f009 ffc5 	bl	8010530 <iprintf>

  /* plug hole forward */
  LWIP_ASSERT("plug_holes: mem->next <= MEM_SIZE_ALIGNED", mem->next <= MEM_SIZE_ALIGNED);
 80065a6:	687b      	ldr	r3, [r7, #4]
 80065a8:	881b      	ldrh	r3, [r3, #0]
 80065aa:	f5b3 5f20 	cmp.w	r3, #10240	; 0x2800
 80065ae:	d906      	bls.n	80065be <plug_holes+0x66>
 80065b0:	4b2d      	ldr	r3, [pc, #180]	; (8006668 <plug_holes+0x110>)
 80065b2:	f44f 72b1 	mov.w	r2, #354	; 0x162
 80065b6:	4932      	ldr	r1, [pc, #200]	; (8006680 <plug_holes+0x128>)
 80065b8:	482d      	ldr	r0, [pc, #180]	; (8006670 <plug_holes+0x118>)
 80065ba:	f009 ffb9 	bl	8010530 <iprintf>

  nmem = (struct mem *)(void *)&ram[mem->next];
 80065be:	4b29      	ldr	r3, [pc, #164]	; (8006664 <plug_holes+0x10c>)
 80065c0:	681b      	ldr	r3, [r3, #0]
 80065c2:	687a      	ldr	r2, [r7, #4]
 80065c4:	8812      	ldrh	r2, [r2, #0]
 80065c6:	4413      	add	r3, r2
 80065c8:	60fb      	str	r3, [r7, #12]
  if (mem != nmem && nmem->used == 0 && (u8_t *)nmem != (u8_t *)ram_end) {
 80065ca:	687a      	ldr	r2, [r7, #4]
 80065cc:	68fb      	ldr	r3, [r7, #12]
 80065ce:	429a      	cmp	r2, r3
 80065d0:	d01f      	beq.n	8006612 <plug_holes+0xba>
 80065d2:	68fb      	ldr	r3, [r7, #12]
 80065d4:	791b      	ldrb	r3, [r3, #4]
 80065d6:	2b00      	cmp	r3, #0
 80065d8:	d11b      	bne.n	8006612 <plug_holes+0xba>
 80065da:	4b26      	ldr	r3, [pc, #152]	; (8006674 <plug_holes+0x11c>)
 80065dc:	681b      	ldr	r3, [r3, #0]
 80065de:	68fa      	ldr	r2, [r7, #12]
 80065e0:	429a      	cmp	r2, r3
 80065e2:	d016      	beq.n	8006612 <plug_holes+0xba>
    /* if mem->next is unused and not end of ram, combine mem and mem->next */
    if (lfree == nmem) {
 80065e4:	4b27      	ldr	r3, [pc, #156]	; (8006684 <plug_holes+0x12c>)
 80065e6:	681b      	ldr	r3, [r3, #0]
 80065e8:	68fa      	ldr	r2, [r7, #12]
 80065ea:	429a      	cmp	r2, r3
 80065ec:	d102      	bne.n	80065f4 <plug_holes+0x9c>
      lfree = mem;
 80065ee:	4a25      	ldr	r2, [pc, #148]	; (8006684 <plug_holes+0x12c>)
 80065f0:	687b      	ldr	r3, [r7, #4]
 80065f2:	6013      	str	r3, [r2, #0]
    }
    mem->next = nmem->next;
 80065f4:	68fb      	ldr	r3, [r7, #12]
 80065f6:	881a      	ldrh	r2, [r3, #0]
 80065f8:	687b      	ldr	r3, [r7, #4]
 80065fa:	801a      	strh	r2, [r3, #0]
    ((struct mem *)(void *)&ram[nmem->next])->prev = (mem_size_t)((u8_t *)mem - ram);
 80065fc:	687b      	ldr	r3, [r7, #4]
 80065fe:	4a19      	ldr	r2, [pc, #100]	; (8006664 <plug_holes+0x10c>)
 8006600:	6812      	ldr	r2, [r2, #0]
 8006602:	1a99      	subs	r1, r3, r2
 8006604:	4b17      	ldr	r3, [pc, #92]	; (8006664 <plug_holes+0x10c>)
 8006606:	681b      	ldr	r3, [r3, #0]
 8006608:	68fa      	ldr	r2, [r7, #12]
 800660a:	8812      	ldrh	r2, [r2, #0]
 800660c:	4413      	add	r3, r2
 800660e:	b28a      	uxth	r2, r1
 8006610:	805a      	strh	r2, [r3, #2]
  }

  /* plug hole backward */
  pmem = (struct mem *)(void *)&ram[mem->prev];
 8006612:	4b14      	ldr	r3, [pc, #80]	; (8006664 <plug_holes+0x10c>)
 8006614:	681b      	ldr	r3, [r3, #0]
 8006616:	687a      	ldr	r2, [r7, #4]
 8006618:	8852      	ldrh	r2, [r2, #2]
 800661a:	4413      	add	r3, r2
 800661c:	60bb      	str	r3, [r7, #8]
  if (pmem != mem && pmem->used == 0) {
 800661e:	68ba      	ldr	r2, [r7, #8]
 8006620:	687b      	ldr	r3, [r7, #4]
 8006622:	429a      	cmp	r2, r3
 8006624:	d01a      	beq.n	800665c <plug_holes+0x104>
 8006626:	68bb      	ldr	r3, [r7, #8]
 8006628:	791b      	ldrb	r3, [r3, #4]
 800662a:	2b00      	cmp	r3, #0
 800662c:	d116      	bne.n	800665c <plug_holes+0x104>
    /* if mem->prev is unused, combine mem and mem->prev */
    if (lfree == mem) {
 800662e:	4b15      	ldr	r3, [pc, #84]	; (8006684 <plug_holes+0x12c>)
 8006630:	681b      	ldr	r3, [r3, #0]
 8006632:	687a      	ldr	r2, [r7, #4]
 8006634:	429a      	cmp	r2, r3
 8006636:	d102      	bne.n	800663e <plug_holes+0xe6>
      lfree = pmem;
 8006638:	4a12      	ldr	r2, [pc, #72]	; (8006684 <plug_holes+0x12c>)
 800663a:	68bb      	ldr	r3, [r7, #8]
 800663c:	6013      	str	r3, [r2, #0]
    }
    pmem->next = mem->next;
 800663e:	687b      	ldr	r3, [r7, #4]
 8006640:	881a      	ldrh	r2, [r3, #0]
 8006642:	68bb      	ldr	r3, [r7, #8]
 8006644:	801a      	strh	r2, [r3, #0]
    ((struct mem *)(void *)&ram[mem->next])->prev = (mem_size_t)((u8_t *)pmem - ram);
 8006646:	68bb      	ldr	r3, [r7, #8]
 8006648:	4a06      	ldr	r2, [pc, #24]	; (8006664 <plug_holes+0x10c>)
 800664a:	6812      	ldr	r2, [r2, #0]
 800664c:	1a99      	subs	r1, r3, r2
 800664e:	4b05      	ldr	r3, [pc, #20]	; (8006664 <plug_holes+0x10c>)
 8006650:	681b      	ldr	r3, [r3, #0]
 8006652:	687a      	ldr	r2, [r7, #4]
 8006654:	8812      	ldrh	r2, [r2, #0]
 8006656:	4413      	add	r3, r2
 8006658:	b28a      	uxth	r2, r1
 800665a:	805a      	strh	r2, [r3, #2]
  }
}
 800665c:	bf00      	nop
 800665e:	3710      	adds	r7, #16
 8006660:	46bd      	mov	sp, r7
 8006662:	bd80      	pop	{r7, pc}
 8006664:	24003ff8 	.word	0x24003ff8
 8006668:	080113f8 	.word	0x080113f8
 800666c:	08011428 	.word	0x08011428
 8006670:	08011440 	.word	0x08011440
 8006674:	24003ffc 	.word	0x24003ffc
 8006678:	08011468 	.word	0x08011468
 800667c:	08011484 	.word	0x08011484
 8006680:	080114a0 	.word	0x080114a0
 8006684:	24004000 	.word	0x24004000

08006688 <mem_init>:
/**
 * Zero the heap and initialize start, end and lowest-free
 */
void
mem_init(void)
{
 8006688:	b580      	push	{r7, lr}
 800668a:	b082      	sub	sp, #8
 800668c:	af00      	add	r7, sp, #0

  LWIP_ASSERT("Sanity check alignment",
    (SIZEOF_STRUCT_MEM & (MEM_ALIGNMENT-1)) == 0);

  /* align the heap */
  ram = (u8_t *)LWIP_MEM_ALIGN(LWIP_RAM_HEAP_POINTER);
 800668e:	4b1c      	ldr	r3, [pc, #112]	; (8006700 <mem_init+0x78>)
 8006690:	4a1c      	ldr	r2, [pc, #112]	; (8006704 <mem_init+0x7c>)
 8006692:	601a      	str	r2, [r3, #0]
  /* initialize the start of the heap */
  mem = (struct mem *)(void *)ram;
 8006694:	4b1a      	ldr	r3, [pc, #104]	; (8006700 <mem_init+0x78>)
 8006696:	681b      	ldr	r3, [r3, #0]
 8006698:	607b      	str	r3, [r7, #4]
  mem->next = MEM_SIZE_ALIGNED;
 800669a:	687b      	ldr	r3, [r7, #4]
 800669c:	f44f 5220 	mov.w	r2, #10240	; 0x2800
 80066a0:	801a      	strh	r2, [r3, #0]
  mem->prev = 0;
 80066a2:	687b      	ldr	r3, [r7, #4]
 80066a4:	2200      	movs	r2, #0
 80066a6:	805a      	strh	r2, [r3, #2]
  mem->used = 0;
 80066a8:	687b      	ldr	r3, [r7, #4]
 80066aa:	2200      	movs	r2, #0
 80066ac:	711a      	strb	r2, [r3, #4]
  /* initialize the end of the heap */
  ram_end = (struct mem *)(void *)&ram[MEM_SIZE_ALIGNED];
 80066ae:	4b14      	ldr	r3, [pc, #80]	; (8006700 <mem_init+0x78>)
 80066b0:	681b      	ldr	r3, [r3, #0]
 80066b2:	f503 5320 	add.w	r3, r3, #10240	; 0x2800
 80066b6:	4a14      	ldr	r2, [pc, #80]	; (8006708 <mem_init+0x80>)
 80066b8:	6013      	str	r3, [r2, #0]
  ram_end->used = 1;
 80066ba:	4b13      	ldr	r3, [pc, #76]	; (8006708 <mem_init+0x80>)
 80066bc:	681b      	ldr	r3, [r3, #0]
 80066be:	2201      	movs	r2, #1
 80066c0:	711a      	strb	r2, [r3, #4]
  ram_end->next = MEM_SIZE_ALIGNED;
 80066c2:	4b11      	ldr	r3, [pc, #68]	; (8006708 <mem_init+0x80>)
 80066c4:	681b      	ldr	r3, [r3, #0]
 80066c6:	f44f 5220 	mov.w	r2, #10240	; 0x2800
 80066ca:	801a      	strh	r2, [r3, #0]
  ram_end->prev = MEM_SIZE_ALIGNED;
 80066cc:	4b0e      	ldr	r3, [pc, #56]	; (8006708 <mem_init+0x80>)
 80066ce:	681b      	ldr	r3, [r3, #0]
 80066d0:	f44f 5220 	mov.w	r2, #10240	; 0x2800
 80066d4:	805a      	strh	r2, [r3, #2]

  /* initialize the lowest-free pointer to the start of the heap */
  lfree = (struct mem *)(void *)ram;
 80066d6:	4b0a      	ldr	r3, [pc, #40]	; (8006700 <mem_init+0x78>)
 80066d8:	681b      	ldr	r3, [r3, #0]
 80066da:	4a0c      	ldr	r2, [pc, #48]	; (800670c <mem_init+0x84>)
 80066dc:	6013      	str	r3, [r2, #0]

  MEM_STATS_AVAIL(avail, MEM_SIZE_ALIGNED);

  if (sys_mutex_new(&mem_mutex) != ERR_OK) {
 80066de:	480c      	ldr	r0, [pc, #48]	; (8006710 <mem_init+0x88>)
 80066e0:	f008 fd48 	bl	800f174 <sys_mutex_new>
 80066e4:	4603      	mov	r3, r0
 80066e6:	2b00      	cmp	r3, #0
 80066e8:	d006      	beq.n	80066f8 <mem_init+0x70>
    LWIP_ASSERT("failed to create mem_mutex", 0);
 80066ea:	4b0a      	ldr	r3, [pc, #40]	; (8006714 <mem_init+0x8c>)
 80066ec:	f44f 72cc 	mov.w	r2, #408	; 0x198
 80066f0:	4909      	ldr	r1, [pc, #36]	; (8006718 <mem_init+0x90>)
 80066f2:	480a      	ldr	r0, [pc, #40]	; (800671c <mem_init+0x94>)
 80066f4:	f009 ff1c 	bl	8010530 <iprintf>
  }
}
 80066f8:	bf00      	nop
 80066fa:	3708      	adds	r7, #8
 80066fc:	46bd      	mov	sp, r7
 80066fe:	bd80      	pop	{r7, pc}
 8006700:	24003ff8 	.word	0x24003ff8
 8006704:	30044000 	.word	0x30044000
 8006708:	24003ffc 	.word	0x24003ffc
 800670c:	24004000 	.word	0x24004000
 8006710:	24004004 	.word	0x24004004
 8006714:	080113f8 	.word	0x080113f8
 8006718:	080114cc 	.word	0x080114cc
 800671c:	08011440 	.word	0x08011440

08006720 <mem_free>:
 * @param rmem is the data portion of a struct mem as returned by a previous
 *             call to mem_malloc()
 */
void
mem_free(void *rmem)
{
 8006720:	b580      	push	{r7, lr}
 8006722:	b084      	sub	sp, #16
 8006724:	af00      	add	r7, sp, #0
 8006726:	6078      	str	r0, [r7, #4]
  struct mem *mem;
  LWIP_MEM_FREE_DECL_PROTECT();

  if (rmem == NULL) {
 8006728:	687b      	ldr	r3, [r7, #4]
 800672a:	2b00      	cmp	r3, #0
 800672c:	d050      	beq.n	80067d0 <mem_free+0xb0>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("mem_free(p == NULL) was called.\n"));
    return;
  }
  LWIP_ASSERT("mem_free: sanity check alignment", (((mem_ptr_t)rmem) & (MEM_ALIGNMENT-1)) == 0);
 800672e:	687b      	ldr	r3, [r7, #4]
 8006730:	f003 0303 	and.w	r3, r3, #3
 8006734:	2b00      	cmp	r3, #0
 8006736:	d006      	beq.n	8006746 <mem_free+0x26>
 8006738:	4b27      	ldr	r3, [pc, #156]	; (80067d8 <mem_free+0xb8>)
 800673a:	f44f 72d6 	mov.w	r2, #428	; 0x1ac
 800673e:	4927      	ldr	r1, [pc, #156]	; (80067dc <mem_free+0xbc>)
 8006740:	4827      	ldr	r0, [pc, #156]	; (80067e0 <mem_free+0xc0>)
 8006742:	f009 fef5 	bl	8010530 <iprintf>

  LWIP_ASSERT("mem_free: legal memory", (u8_t *)rmem >= (u8_t *)ram &&
 8006746:	4b27      	ldr	r3, [pc, #156]	; (80067e4 <mem_free+0xc4>)
 8006748:	681b      	ldr	r3, [r3, #0]
 800674a:	687a      	ldr	r2, [r7, #4]
 800674c:	429a      	cmp	r2, r3
 800674e:	d304      	bcc.n	800675a <mem_free+0x3a>
 8006750:	4b25      	ldr	r3, [pc, #148]	; (80067e8 <mem_free+0xc8>)
 8006752:	681b      	ldr	r3, [r3, #0]
 8006754:	687a      	ldr	r2, [r7, #4]
 8006756:	429a      	cmp	r2, r3
 8006758:	d306      	bcc.n	8006768 <mem_free+0x48>
 800675a:	4b1f      	ldr	r3, [pc, #124]	; (80067d8 <mem_free+0xb8>)
 800675c:	f240 12af 	movw	r2, #431	; 0x1af
 8006760:	4922      	ldr	r1, [pc, #136]	; (80067ec <mem_free+0xcc>)
 8006762:	481f      	ldr	r0, [pc, #124]	; (80067e0 <mem_free+0xc0>)
 8006764:	f009 fee4 	bl	8010530 <iprintf>
    (u8_t *)rmem < (u8_t *)ram_end);

  if ((u8_t *)rmem < (u8_t *)ram || (u8_t *)rmem >= (u8_t *)ram_end) {
 8006768:	4b1e      	ldr	r3, [pc, #120]	; (80067e4 <mem_free+0xc4>)
 800676a:	681b      	ldr	r3, [r3, #0]
 800676c:	687a      	ldr	r2, [r7, #4]
 800676e:	429a      	cmp	r2, r3
 8006770:	d304      	bcc.n	800677c <mem_free+0x5c>
 8006772:	4b1d      	ldr	r3, [pc, #116]	; (80067e8 <mem_free+0xc8>)
 8006774:	681b      	ldr	r3, [r3, #0]
 8006776:	687a      	ldr	r2, [r7, #4]
 8006778:	429a      	cmp	r2, r3
 800677a:	d306      	bcc.n	800678a <mem_free+0x6a>
    SYS_ARCH_DECL_PROTECT(lev);
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory\n"));
    /* protect mem stats from concurrent access */
    SYS_ARCH_PROTECT(lev);
 800677c:	f008 fd4e 	bl	800f21c <sys_arch_protect>
 8006780:	60b8      	str	r0, [r7, #8]
    MEM_STATS_INC(illegal);
    SYS_ARCH_UNPROTECT(lev);
 8006782:	68b8      	ldr	r0, [r7, #8]
 8006784:	f008 fd58 	bl	800f238 <sys_arch_unprotect>
    return;
 8006788:	e023      	b.n	80067d2 <mem_free+0xb2>
  }
  /* protect the heap from concurrent access */
  LWIP_MEM_FREE_PROTECT();
 800678a:	4819      	ldr	r0, [pc, #100]	; (80067f0 <mem_free+0xd0>)
 800678c:	f008 fd0c 	bl	800f1a8 <sys_mutex_lock>
  /* Get the corresponding struct mem ... */
  /* cast through void* to get rid of alignment warnings */
  mem = (struct mem *)(void *)((u8_t *)rmem - SIZEOF_STRUCT_MEM);
 8006790:	687b      	ldr	r3, [r7, #4]
 8006792:	3b08      	subs	r3, #8
 8006794:	60fb      	str	r3, [r7, #12]
  /* ... which has to be in a used state ... */
  LWIP_ASSERT("mem_free: mem->used", mem->used);
 8006796:	68fb      	ldr	r3, [r7, #12]
 8006798:	791b      	ldrb	r3, [r3, #4]
 800679a:	2b00      	cmp	r3, #0
 800679c:	d106      	bne.n	80067ac <mem_free+0x8c>
 800679e:	4b0e      	ldr	r3, [pc, #56]	; (80067d8 <mem_free+0xb8>)
 80067a0:	f44f 72e0 	mov.w	r2, #448	; 0x1c0
 80067a4:	4913      	ldr	r1, [pc, #76]	; (80067f4 <mem_free+0xd4>)
 80067a6:	480e      	ldr	r0, [pc, #56]	; (80067e0 <mem_free+0xc0>)
 80067a8:	f009 fec2 	bl	8010530 <iprintf>
  /* ... and is now unused. */
  mem->used = 0;
 80067ac:	68fb      	ldr	r3, [r7, #12]
 80067ae:	2200      	movs	r2, #0
 80067b0:	711a      	strb	r2, [r3, #4]

  if (mem < lfree) {
 80067b2:	4b11      	ldr	r3, [pc, #68]	; (80067f8 <mem_free+0xd8>)
 80067b4:	681b      	ldr	r3, [r3, #0]
 80067b6:	68fa      	ldr	r2, [r7, #12]
 80067b8:	429a      	cmp	r2, r3
 80067ba:	d202      	bcs.n	80067c2 <mem_free+0xa2>
    /* the newly freed struct is now the lowest */
    lfree = mem;
 80067bc:	4a0e      	ldr	r2, [pc, #56]	; (80067f8 <mem_free+0xd8>)
 80067be:	68fb      	ldr	r3, [r7, #12]
 80067c0:	6013      	str	r3, [r2, #0]
  }

  MEM_STATS_DEC_USED(used, mem->next - (mem_size_t)(((u8_t *)mem - ram)));

  /* finally, see if prev or next are free also */
  plug_holes(mem);
 80067c2:	68f8      	ldr	r0, [r7, #12]
 80067c4:	f7ff fec8 	bl	8006558 <plug_holes>
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
 80067c8:	4809      	ldr	r0, [pc, #36]	; (80067f0 <mem_free+0xd0>)
 80067ca:	f008 fcfc 	bl	800f1c6 <sys_mutex_unlock>
 80067ce:	e000      	b.n	80067d2 <mem_free+0xb2>
    return;
 80067d0:	bf00      	nop
}
 80067d2:	3710      	adds	r7, #16
 80067d4:	46bd      	mov	sp, r7
 80067d6:	bd80      	pop	{r7, pc}
 80067d8:	080113f8 	.word	0x080113f8
 80067dc:	080114e8 	.word	0x080114e8
 80067e0:	08011440 	.word	0x08011440
 80067e4:	24003ff8 	.word	0x24003ff8
 80067e8:	24003ffc 	.word	0x24003ffc
 80067ec:	0801150c 	.word	0x0801150c
 80067f0:	24004004 	.word	0x24004004
 80067f4:	08011524 	.word	0x08011524
 80067f8:	24004000 	.word	0x24004000

080067fc <mem_trim>:
 *         or NULL if newsize is > old size, in which case rmem is NOT touched
 *         or freed!
 */
void *
mem_trim(void *rmem, mem_size_t newsize)
{
 80067fc:	b580      	push	{r7, lr}
 80067fe:	b088      	sub	sp, #32
 8006800:	af00      	add	r7, sp, #0
 8006802:	6078      	str	r0, [r7, #4]
 8006804:	460b      	mov	r3, r1
 8006806:	807b      	strh	r3, [r7, #2]
  /* use the FREE_PROTECT here: it protects with sem OR SYS_ARCH_PROTECT */
  LWIP_MEM_FREE_DECL_PROTECT();

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  newsize = LWIP_MEM_ALIGN_SIZE(newsize);
 8006808:	887b      	ldrh	r3, [r7, #2]
 800680a:	3303      	adds	r3, #3
 800680c:	b29b      	uxth	r3, r3
 800680e:	f023 0303 	bic.w	r3, r3, #3
 8006812:	807b      	strh	r3, [r7, #2]

  if (newsize < MIN_SIZE_ALIGNED) {
 8006814:	887b      	ldrh	r3, [r7, #2]
 8006816:	2b0b      	cmp	r3, #11
 8006818:	d801      	bhi.n	800681e <mem_trim+0x22>
    /* every data block must be at least MIN_SIZE_ALIGNED long */
    newsize = MIN_SIZE_ALIGNED;
 800681a:	230c      	movs	r3, #12
 800681c:	807b      	strh	r3, [r7, #2]
  }

  if (newsize > MEM_SIZE_ALIGNED) {
 800681e:	887b      	ldrh	r3, [r7, #2]
 8006820:	f5b3 5f20 	cmp.w	r3, #10240	; 0x2800
 8006824:	d901      	bls.n	800682a <mem_trim+0x2e>
    return NULL;
 8006826:	2300      	movs	r3, #0
 8006828:	e0bd      	b.n	80069a6 <mem_trim+0x1aa>
  }

  LWIP_ASSERT("mem_trim: legal memory", (u8_t *)rmem >= (u8_t *)ram &&
 800682a:	4b61      	ldr	r3, [pc, #388]	; (80069b0 <mem_trim+0x1b4>)
 800682c:	681b      	ldr	r3, [r3, #0]
 800682e:	687a      	ldr	r2, [r7, #4]
 8006830:	429a      	cmp	r2, r3
 8006832:	d304      	bcc.n	800683e <mem_trim+0x42>
 8006834:	4b5f      	ldr	r3, [pc, #380]	; (80069b4 <mem_trim+0x1b8>)
 8006836:	681b      	ldr	r3, [r3, #0]
 8006838:	687a      	ldr	r2, [r7, #4]
 800683a:	429a      	cmp	r2, r3
 800683c:	d306      	bcc.n	800684c <mem_trim+0x50>
 800683e:	4b5e      	ldr	r3, [pc, #376]	; (80069b8 <mem_trim+0x1bc>)
 8006840:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8006844:	495d      	ldr	r1, [pc, #372]	; (80069bc <mem_trim+0x1c0>)
 8006846:	485e      	ldr	r0, [pc, #376]	; (80069c0 <mem_trim+0x1c4>)
 8006848:	f009 fe72 	bl	8010530 <iprintf>
   (u8_t *)rmem < (u8_t *)ram_end);

  if ((u8_t *)rmem < (u8_t *)ram || (u8_t *)rmem >= (u8_t *)ram_end) {
 800684c:	4b58      	ldr	r3, [pc, #352]	; (80069b0 <mem_trim+0x1b4>)
 800684e:	681b      	ldr	r3, [r3, #0]
 8006850:	687a      	ldr	r2, [r7, #4]
 8006852:	429a      	cmp	r2, r3
 8006854:	d304      	bcc.n	8006860 <mem_trim+0x64>
 8006856:	4b57      	ldr	r3, [pc, #348]	; (80069b4 <mem_trim+0x1b8>)
 8006858:	681b      	ldr	r3, [r3, #0]
 800685a:	687a      	ldr	r2, [r7, #4]
 800685c:	429a      	cmp	r2, r3
 800685e:	d307      	bcc.n	8006870 <mem_trim+0x74>
    SYS_ARCH_DECL_PROTECT(lev);
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_trim: illegal memory\n"));
    /* protect mem stats from concurrent access */
    SYS_ARCH_PROTECT(lev);
 8006860:	f008 fcdc 	bl	800f21c <sys_arch_protect>
 8006864:	60f8      	str	r0, [r7, #12]
    MEM_STATS_INC(illegal);
    SYS_ARCH_UNPROTECT(lev);
 8006866:	68f8      	ldr	r0, [r7, #12]
 8006868:	f008 fce6 	bl	800f238 <sys_arch_unprotect>
    return rmem;
 800686c:	687b      	ldr	r3, [r7, #4]
 800686e:	e09a      	b.n	80069a6 <mem_trim+0x1aa>
  }
  /* Get the corresponding struct mem ... */
  /* cast through void* to get rid of alignment warnings */
  mem = (struct mem *)(void *)((u8_t *)rmem - SIZEOF_STRUCT_MEM);
 8006870:	687b      	ldr	r3, [r7, #4]
 8006872:	3b08      	subs	r3, #8
 8006874:	61fb      	str	r3, [r7, #28]
  /* ... and its offset pointer */
  ptr = (mem_size_t)((u8_t *)mem - ram);
 8006876:	69fb      	ldr	r3, [r7, #28]
 8006878:	4a4d      	ldr	r2, [pc, #308]	; (80069b0 <mem_trim+0x1b4>)
 800687a:	6812      	ldr	r2, [r2, #0]
 800687c:	1a9b      	subs	r3, r3, r2
 800687e:	837b      	strh	r3, [r7, #26]

  size = mem->next - ptr - SIZEOF_STRUCT_MEM;
 8006880:	69fb      	ldr	r3, [r7, #28]
 8006882:	881a      	ldrh	r2, [r3, #0]
 8006884:	8b7b      	ldrh	r3, [r7, #26]
 8006886:	1ad3      	subs	r3, r2, r3
 8006888:	b29b      	uxth	r3, r3
 800688a:	3b08      	subs	r3, #8
 800688c:	833b      	strh	r3, [r7, #24]
  LWIP_ASSERT("mem_trim can only shrink memory", newsize <= size);
 800688e:	887a      	ldrh	r2, [r7, #2]
 8006890:	8b3b      	ldrh	r3, [r7, #24]
 8006892:	429a      	cmp	r2, r3
 8006894:	d906      	bls.n	80068a4 <mem_trim+0xa8>
 8006896:	4b48      	ldr	r3, [pc, #288]	; (80069b8 <mem_trim+0x1bc>)
 8006898:	f240 2206 	movw	r2, #518	; 0x206
 800689c:	4949      	ldr	r1, [pc, #292]	; (80069c4 <mem_trim+0x1c8>)
 800689e:	4848      	ldr	r0, [pc, #288]	; (80069c0 <mem_trim+0x1c4>)
 80068a0:	f009 fe46 	bl	8010530 <iprintf>
  if (newsize > size) {
 80068a4:	887a      	ldrh	r2, [r7, #2]
 80068a6:	8b3b      	ldrh	r3, [r7, #24]
 80068a8:	429a      	cmp	r2, r3
 80068aa:	d901      	bls.n	80068b0 <mem_trim+0xb4>
    /* not supported */
    return NULL;
 80068ac:	2300      	movs	r3, #0
 80068ae:	e07a      	b.n	80069a6 <mem_trim+0x1aa>
  }
  if (newsize == size) {
 80068b0:	887a      	ldrh	r2, [r7, #2]
 80068b2:	8b3b      	ldrh	r3, [r7, #24]
 80068b4:	429a      	cmp	r2, r3
 80068b6:	d101      	bne.n	80068bc <mem_trim+0xc0>
    /* No change in size, simply return */
    return rmem;
 80068b8:	687b      	ldr	r3, [r7, #4]
 80068ba:	e074      	b.n	80069a6 <mem_trim+0x1aa>
  }

  /* protect the heap from concurrent access */
  LWIP_MEM_FREE_PROTECT();
 80068bc:	4842      	ldr	r0, [pc, #264]	; (80069c8 <mem_trim+0x1cc>)
 80068be:	f008 fc73 	bl	800f1a8 <sys_mutex_lock>

  mem2 = (struct mem *)(void *)&ram[mem->next];
 80068c2:	4b3b      	ldr	r3, [pc, #236]	; (80069b0 <mem_trim+0x1b4>)
 80068c4:	681b      	ldr	r3, [r3, #0]
 80068c6:	69fa      	ldr	r2, [r7, #28]
 80068c8:	8812      	ldrh	r2, [r2, #0]
 80068ca:	4413      	add	r3, r2
 80068cc:	617b      	str	r3, [r7, #20]
  if (mem2->used == 0) {
 80068ce:	697b      	ldr	r3, [r7, #20]
 80068d0:	791b      	ldrb	r3, [r3, #4]
 80068d2:	2b00      	cmp	r3, #0
 80068d4:	d131      	bne.n	800693a <mem_trim+0x13e>
    /* The next struct is unused, we can simply move it at little */
    mem_size_t next;
    /* remember the old next pointer */
    next = mem2->next;
 80068d6:	697b      	ldr	r3, [r7, #20]
 80068d8:	881b      	ldrh	r3, [r3, #0]
 80068da:	823b      	strh	r3, [r7, #16]
    /* create new struct mem which is moved directly after the shrinked mem */
    ptr2 = ptr + SIZEOF_STRUCT_MEM + newsize;
 80068dc:	8b7a      	ldrh	r2, [r7, #26]
 80068de:	887b      	ldrh	r3, [r7, #2]
 80068e0:	4413      	add	r3, r2
 80068e2:	b29b      	uxth	r3, r3
 80068e4:	3308      	adds	r3, #8
 80068e6:	827b      	strh	r3, [r7, #18]
    if (lfree == mem2) {
 80068e8:	4b38      	ldr	r3, [pc, #224]	; (80069cc <mem_trim+0x1d0>)
 80068ea:	681b      	ldr	r3, [r3, #0]
 80068ec:	697a      	ldr	r2, [r7, #20]
 80068ee:	429a      	cmp	r2, r3
 80068f0:	d105      	bne.n	80068fe <mem_trim+0x102>
      lfree = (struct mem *)(void *)&ram[ptr2];
 80068f2:	4b2f      	ldr	r3, [pc, #188]	; (80069b0 <mem_trim+0x1b4>)
 80068f4:	681a      	ldr	r2, [r3, #0]
 80068f6:	8a7b      	ldrh	r3, [r7, #18]
 80068f8:	4413      	add	r3, r2
 80068fa:	4a34      	ldr	r2, [pc, #208]	; (80069cc <mem_trim+0x1d0>)
 80068fc:	6013      	str	r3, [r2, #0]
    }
    mem2 = (struct mem *)(void *)&ram[ptr2];
 80068fe:	4b2c      	ldr	r3, [pc, #176]	; (80069b0 <mem_trim+0x1b4>)
 8006900:	681a      	ldr	r2, [r3, #0]
 8006902:	8a7b      	ldrh	r3, [r7, #18]
 8006904:	4413      	add	r3, r2
 8006906:	617b      	str	r3, [r7, #20]
    mem2->used = 0;
 8006908:	697b      	ldr	r3, [r7, #20]
 800690a:	2200      	movs	r2, #0
 800690c:	711a      	strb	r2, [r3, #4]
    /* restore the next pointer */
    mem2->next = next;
 800690e:	697b      	ldr	r3, [r7, #20]
 8006910:	8a3a      	ldrh	r2, [r7, #16]
 8006912:	801a      	strh	r2, [r3, #0]
    /* link it back to mem */
    mem2->prev = ptr;
 8006914:	697b      	ldr	r3, [r7, #20]
 8006916:	8b7a      	ldrh	r2, [r7, #26]
 8006918:	805a      	strh	r2, [r3, #2]
    /* link mem to it */
    mem->next = ptr2;
 800691a:	69fb      	ldr	r3, [r7, #28]
 800691c:	8a7a      	ldrh	r2, [r7, #18]
 800691e:	801a      	strh	r2, [r3, #0]
    /* last thing to restore linked list: as we have moved mem2,
     * let 'mem2->next->prev' point to mem2 again. but only if mem2->next is not
     * the end of the heap */
    if (mem2->next != MEM_SIZE_ALIGNED) {
 8006920:	697b      	ldr	r3, [r7, #20]
 8006922:	881b      	ldrh	r3, [r3, #0]
 8006924:	f5b3 5f20 	cmp.w	r3, #10240	; 0x2800
 8006928:	d039      	beq.n	800699e <mem_trim+0x1a2>
      ((struct mem *)(void *)&ram[mem2->next])->prev = ptr2;
 800692a:	4b21      	ldr	r3, [pc, #132]	; (80069b0 <mem_trim+0x1b4>)
 800692c:	681b      	ldr	r3, [r3, #0]
 800692e:	697a      	ldr	r2, [r7, #20]
 8006930:	8812      	ldrh	r2, [r2, #0]
 8006932:	4413      	add	r3, r2
 8006934:	8a7a      	ldrh	r2, [r7, #18]
 8006936:	805a      	strh	r2, [r3, #2]
 8006938:	e031      	b.n	800699e <mem_trim+0x1a2>
    }
    MEM_STATS_DEC_USED(used, (size - newsize));
    /* no need to plug holes, we've already done that */
  } else if (newsize + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED <= size) {
 800693a:	887b      	ldrh	r3, [r7, #2]
 800693c:	f103 0214 	add.w	r2, r3, #20
 8006940:	8b3b      	ldrh	r3, [r7, #24]
 8006942:	429a      	cmp	r2, r3
 8006944:	d82b      	bhi.n	800699e <mem_trim+0x1a2>
     * Old size ('size') must be big enough to contain at least 'newsize' plus a struct mem
     * ('SIZEOF_STRUCT_MEM') with some data ('MIN_SIZE_ALIGNED').
     * @todo we could leave out MIN_SIZE_ALIGNED. We would create an empty
     *       region that couldn't hold data, but when mem->next gets freed,
     *       the 2 regions would be combined, resulting in more free memory */
    ptr2 = ptr + SIZEOF_STRUCT_MEM + newsize;
 8006946:	8b7a      	ldrh	r2, [r7, #26]
 8006948:	887b      	ldrh	r3, [r7, #2]
 800694a:	4413      	add	r3, r2
 800694c:	b29b      	uxth	r3, r3
 800694e:	3308      	adds	r3, #8
 8006950:	827b      	strh	r3, [r7, #18]
    mem2 = (struct mem *)(void *)&ram[ptr2];
 8006952:	4b17      	ldr	r3, [pc, #92]	; (80069b0 <mem_trim+0x1b4>)
 8006954:	681a      	ldr	r2, [r3, #0]
 8006956:	8a7b      	ldrh	r3, [r7, #18]
 8006958:	4413      	add	r3, r2
 800695a:	617b      	str	r3, [r7, #20]
    if (mem2 < lfree) {
 800695c:	4b1b      	ldr	r3, [pc, #108]	; (80069cc <mem_trim+0x1d0>)
 800695e:	681b      	ldr	r3, [r3, #0]
 8006960:	697a      	ldr	r2, [r7, #20]
 8006962:	429a      	cmp	r2, r3
 8006964:	d202      	bcs.n	800696c <mem_trim+0x170>
      lfree = mem2;
 8006966:	4a19      	ldr	r2, [pc, #100]	; (80069cc <mem_trim+0x1d0>)
 8006968:	697b      	ldr	r3, [r7, #20]
 800696a:	6013      	str	r3, [r2, #0]
    }
    mem2->used = 0;
 800696c:	697b      	ldr	r3, [r7, #20]
 800696e:	2200      	movs	r2, #0
 8006970:	711a      	strb	r2, [r3, #4]
    mem2->next = mem->next;
 8006972:	69fb      	ldr	r3, [r7, #28]
 8006974:	881a      	ldrh	r2, [r3, #0]
 8006976:	697b      	ldr	r3, [r7, #20]
 8006978:	801a      	strh	r2, [r3, #0]
    mem2->prev = ptr;
 800697a:	697b      	ldr	r3, [r7, #20]
 800697c:	8b7a      	ldrh	r2, [r7, #26]
 800697e:	805a      	strh	r2, [r3, #2]
    mem->next = ptr2;
 8006980:	69fb      	ldr	r3, [r7, #28]
 8006982:	8a7a      	ldrh	r2, [r7, #18]
 8006984:	801a      	strh	r2, [r3, #0]
    if (mem2->next != MEM_SIZE_ALIGNED) {
 8006986:	697b      	ldr	r3, [r7, #20]
 8006988:	881b      	ldrh	r3, [r3, #0]
 800698a:	f5b3 5f20 	cmp.w	r3, #10240	; 0x2800
 800698e:	d006      	beq.n	800699e <mem_trim+0x1a2>
      ((struct mem *)(void *)&ram[mem2->next])->prev = ptr2;
 8006990:	4b07      	ldr	r3, [pc, #28]	; (80069b0 <mem_trim+0x1b4>)
 8006992:	681b      	ldr	r3, [r3, #0]
 8006994:	697a      	ldr	r2, [r7, #20]
 8006996:	8812      	ldrh	r2, [r2, #0]
 8006998:	4413      	add	r3, r2
 800699a:	8a7a      	ldrh	r2, [r7, #18]
 800699c:	805a      	strh	r2, [r3, #2]
    -> the remaining space stays unused since it is too small
  } */
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
 800699e:	480a      	ldr	r0, [pc, #40]	; (80069c8 <mem_trim+0x1cc>)
 80069a0:	f008 fc11 	bl	800f1c6 <sys_mutex_unlock>
  return rmem;
 80069a4:	687b      	ldr	r3, [r7, #4]
}
 80069a6:	4618      	mov	r0, r3
 80069a8:	3720      	adds	r7, #32
 80069aa:	46bd      	mov	sp, r7
 80069ac:	bd80      	pop	{r7, pc}
 80069ae:	bf00      	nop
 80069b0:	24003ff8 	.word	0x24003ff8
 80069b4:	24003ffc 	.word	0x24003ffc
 80069b8:	080113f8 	.word	0x080113f8
 80069bc:	08011538 	.word	0x08011538
 80069c0:	08011440 	.word	0x08011440
 80069c4:	08011550 	.word	0x08011550
 80069c8:	24004004 	.word	0x24004004
 80069cc:	24004000 	.word	0x24004000

080069d0 <mem_malloc>:
 *
 * Note that the returned value will always be aligned (as defined by MEM_ALIGNMENT).
 */
void *
mem_malloc(mem_size_t size)
{
 80069d0:	b580      	push	{r7, lr}
 80069d2:	b088      	sub	sp, #32
 80069d4:	af00      	add	r7, sp, #0
 80069d6:	4603      	mov	r3, r0
 80069d8:	80fb      	strh	r3, [r7, #6]
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  u8_t local_mem_free_count = 0;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_ALLOC_DECL_PROTECT();

  if (size == 0) {
 80069da:	88fb      	ldrh	r3, [r7, #6]
 80069dc:	2b00      	cmp	r3, #0
 80069de:	d101      	bne.n	80069e4 <mem_malloc+0x14>
    return NULL;
 80069e0:	2300      	movs	r3, #0
 80069e2:	e0d1      	b.n	8006b88 <mem_malloc+0x1b8>
  }

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  size = LWIP_MEM_ALIGN_SIZE(size);
 80069e4:	88fb      	ldrh	r3, [r7, #6]
 80069e6:	3303      	adds	r3, #3
 80069e8:	b29b      	uxth	r3, r3
 80069ea:	f023 0303 	bic.w	r3, r3, #3
 80069ee:	80fb      	strh	r3, [r7, #6]

  if (size < MIN_SIZE_ALIGNED) {
 80069f0:	88fb      	ldrh	r3, [r7, #6]
 80069f2:	2b0b      	cmp	r3, #11
 80069f4:	d801      	bhi.n	80069fa <mem_malloc+0x2a>
    /* every data block must be at least MIN_SIZE_ALIGNED long */
    size = MIN_SIZE_ALIGNED;
 80069f6:	230c      	movs	r3, #12
 80069f8:	80fb      	strh	r3, [r7, #6]
  }

  if (size > MEM_SIZE_ALIGNED) {
 80069fa:	88fb      	ldrh	r3, [r7, #6]
 80069fc:	f5b3 5f20 	cmp.w	r3, #10240	; 0x2800
 8006a00:	d901      	bls.n	8006a06 <mem_malloc+0x36>
    return NULL;
 8006a02:	2300      	movs	r3, #0
 8006a04:	e0c0      	b.n	8006b88 <mem_malloc+0x1b8>
  }

  /* protect the heap from concurrent access */
  sys_mutex_lock(&mem_mutex);
 8006a06:	4862      	ldr	r0, [pc, #392]	; (8006b90 <mem_malloc+0x1c0>)
 8006a08:	f008 fbce 	bl	800f1a8 <sys_mutex_lock>
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

    /* Scan through the heap searching for a free block that is big enough,
     * beginning with the lowest free block.
     */
    for (ptr = (mem_size_t)((u8_t *)lfree - ram); ptr < MEM_SIZE_ALIGNED - size;
 8006a0c:	4b61      	ldr	r3, [pc, #388]	; (8006b94 <mem_malloc+0x1c4>)
 8006a0e:	681b      	ldr	r3, [r3, #0]
 8006a10:	461a      	mov	r2, r3
 8006a12:	4b61      	ldr	r3, [pc, #388]	; (8006b98 <mem_malloc+0x1c8>)
 8006a14:	681b      	ldr	r3, [r3, #0]
 8006a16:	1ad3      	subs	r3, r2, r3
 8006a18:	83fb      	strh	r3, [r7, #30]
 8006a1a:	e0aa      	b.n	8006b72 <mem_malloc+0x1a2>
         ptr = ((struct mem *)(void *)&ram[ptr])->next) {
      mem = (struct mem *)(void *)&ram[ptr];
 8006a1c:	4b5e      	ldr	r3, [pc, #376]	; (8006b98 <mem_malloc+0x1c8>)
 8006a1e:	681a      	ldr	r2, [r3, #0]
 8006a20:	8bfb      	ldrh	r3, [r7, #30]
 8006a22:	4413      	add	r3, r2
 8006a24:	617b      	str	r3, [r7, #20]
        local_mem_free_count = 1;
        break;
      }
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

      if ((!mem->used) &&
 8006a26:	697b      	ldr	r3, [r7, #20]
 8006a28:	791b      	ldrb	r3, [r3, #4]
 8006a2a:	2b00      	cmp	r3, #0
 8006a2c:	f040 809b 	bne.w	8006b66 <mem_malloc+0x196>
          (mem->next - (ptr + SIZEOF_STRUCT_MEM)) >= size) {
 8006a30:	697b      	ldr	r3, [r7, #20]
 8006a32:	881b      	ldrh	r3, [r3, #0]
 8006a34:	461a      	mov	r2, r3
 8006a36:	8bfb      	ldrh	r3, [r7, #30]
 8006a38:	1ad3      	subs	r3, r2, r3
 8006a3a:	f1a3 0208 	sub.w	r2, r3, #8
 8006a3e:	88fb      	ldrh	r3, [r7, #6]
      if ((!mem->used) &&
 8006a40:	429a      	cmp	r2, r3
 8006a42:	f0c0 8090 	bcc.w	8006b66 <mem_malloc+0x196>
        /* mem is not used and at least perfect fit is possible:
         * mem->next - (ptr + SIZEOF_STRUCT_MEM) gives us the 'user data size' of mem */

        if (mem->next - (ptr + SIZEOF_STRUCT_MEM) >= (size + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED)) {
 8006a46:	697b      	ldr	r3, [r7, #20]
 8006a48:	881b      	ldrh	r3, [r3, #0]
 8006a4a:	461a      	mov	r2, r3
 8006a4c:	8bfb      	ldrh	r3, [r7, #30]
 8006a4e:	1ad3      	subs	r3, r2, r3
 8006a50:	f1a3 0208 	sub.w	r2, r3, #8
 8006a54:	88fb      	ldrh	r3, [r7, #6]
 8006a56:	3314      	adds	r3, #20
 8006a58:	429a      	cmp	r2, r3
 8006a5a:	d327      	bcc.n	8006aac <mem_malloc+0xdc>
           * struct mem would fit in but no data between mem2 and mem2->next
           * @todo we could leave out MIN_SIZE_ALIGNED. We would create an empty
           *       region that couldn't hold data, but when mem->next gets freed,
           *       the 2 regions would be combined, resulting in more free memory
           */
          ptr2 = ptr + SIZEOF_STRUCT_MEM + size;
 8006a5c:	8bfa      	ldrh	r2, [r7, #30]
 8006a5e:	88fb      	ldrh	r3, [r7, #6]
 8006a60:	4413      	add	r3, r2
 8006a62:	b29b      	uxth	r3, r3
 8006a64:	3308      	adds	r3, #8
 8006a66:	827b      	strh	r3, [r7, #18]
          /* create mem2 struct */
          mem2 = (struct mem *)(void *)&ram[ptr2];
 8006a68:	4b4b      	ldr	r3, [pc, #300]	; (8006b98 <mem_malloc+0x1c8>)
 8006a6a:	681a      	ldr	r2, [r3, #0]
 8006a6c:	8a7b      	ldrh	r3, [r7, #18]
 8006a6e:	4413      	add	r3, r2
 8006a70:	60fb      	str	r3, [r7, #12]
          mem2->used = 0;
 8006a72:	68fb      	ldr	r3, [r7, #12]
 8006a74:	2200      	movs	r2, #0
 8006a76:	711a      	strb	r2, [r3, #4]
          mem2->next = mem->next;
 8006a78:	697b      	ldr	r3, [r7, #20]
 8006a7a:	881a      	ldrh	r2, [r3, #0]
 8006a7c:	68fb      	ldr	r3, [r7, #12]
 8006a7e:	801a      	strh	r2, [r3, #0]
          mem2->prev = ptr;
 8006a80:	68fb      	ldr	r3, [r7, #12]
 8006a82:	8bfa      	ldrh	r2, [r7, #30]
 8006a84:	805a      	strh	r2, [r3, #2]
          /* and insert it between mem and mem->next */
          mem->next = ptr2;
 8006a86:	697b      	ldr	r3, [r7, #20]
 8006a88:	8a7a      	ldrh	r2, [r7, #18]
 8006a8a:	801a      	strh	r2, [r3, #0]
          mem->used = 1;
 8006a8c:	697b      	ldr	r3, [r7, #20]
 8006a8e:	2201      	movs	r2, #1
 8006a90:	711a      	strb	r2, [r3, #4]

          if (mem2->next != MEM_SIZE_ALIGNED) {
 8006a92:	68fb      	ldr	r3, [r7, #12]
 8006a94:	881b      	ldrh	r3, [r3, #0]
 8006a96:	f5b3 5f20 	cmp.w	r3, #10240	; 0x2800
 8006a9a:	d00a      	beq.n	8006ab2 <mem_malloc+0xe2>
            ((struct mem *)(void *)&ram[mem2->next])->prev = ptr2;
 8006a9c:	4b3e      	ldr	r3, [pc, #248]	; (8006b98 <mem_malloc+0x1c8>)
 8006a9e:	681b      	ldr	r3, [r3, #0]
 8006aa0:	68fa      	ldr	r2, [r7, #12]
 8006aa2:	8812      	ldrh	r2, [r2, #0]
 8006aa4:	4413      	add	r3, r2
 8006aa6:	8a7a      	ldrh	r2, [r7, #18]
 8006aa8:	805a      	strh	r2, [r3, #2]
 8006aaa:	e002      	b.n	8006ab2 <mem_malloc+0xe2>
           * take care of this).
           * -> near fit or exact fit: do not split, no mem2 creation
           * also can't move mem->next directly behind mem, since mem->next
           * will always be used at this point!
           */
          mem->used = 1;
 8006aac:	697b      	ldr	r3, [r7, #20]
 8006aae:	2201      	movs	r2, #1
 8006ab0:	711a      	strb	r2, [r3, #4]
          MEM_STATS_INC_USED(used, mem->next - (mem_size_t)((u8_t *)mem - ram));
        }
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
mem_malloc_adjust_lfree:
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
        if (mem == lfree) {
 8006ab2:	4b38      	ldr	r3, [pc, #224]	; (8006b94 <mem_malloc+0x1c4>)
 8006ab4:	681b      	ldr	r3, [r3, #0]
 8006ab6:	697a      	ldr	r2, [r7, #20]
 8006ab8:	429a      	cmp	r2, r3
 8006aba:	d127      	bne.n	8006b0c <mem_malloc+0x13c>
          struct mem *cur = lfree;
 8006abc:	4b35      	ldr	r3, [pc, #212]	; (8006b94 <mem_malloc+0x1c4>)
 8006abe:	681b      	ldr	r3, [r3, #0]
 8006ac0:	61bb      	str	r3, [r7, #24]
          /* Find next free block after mem and update lowest free pointer */
          while (cur->used && cur != ram_end) {
 8006ac2:	e005      	b.n	8006ad0 <mem_malloc+0x100>
              /* If mem_free or mem_trim have run, we have to restart since they
                 could have altered our current struct mem or lfree. */
              goto mem_malloc_adjust_lfree;
            }
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
            cur = (struct mem *)(void *)&ram[cur->next];
 8006ac4:	4b34      	ldr	r3, [pc, #208]	; (8006b98 <mem_malloc+0x1c8>)
 8006ac6:	681b      	ldr	r3, [r3, #0]
 8006ac8:	69ba      	ldr	r2, [r7, #24]
 8006aca:	8812      	ldrh	r2, [r2, #0]
 8006acc:	4413      	add	r3, r2
 8006ace:	61bb      	str	r3, [r7, #24]
          while (cur->used && cur != ram_end) {
 8006ad0:	69bb      	ldr	r3, [r7, #24]
 8006ad2:	791b      	ldrb	r3, [r3, #4]
 8006ad4:	2b00      	cmp	r3, #0
 8006ad6:	d004      	beq.n	8006ae2 <mem_malloc+0x112>
 8006ad8:	4b30      	ldr	r3, [pc, #192]	; (8006b9c <mem_malloc+0x1cc>)
 8006ada:	681b      	ldr	r3, [r3, #0]
 8006adc:	69ba      	ldr	r2, [r7, #24]
 8006ade:	429a      	cmp	r2, r3
 8006ae0:	d1f0      	bne.n	8006ac4 <mem_malloc+0xf4>
          }
          lfree = cur;
 8006ae2:	4a2c      	ldr	r2, [pc, #176]	; (8006b94 <mem_malloc+0x1c4>)
 8006ae4:	69bb      	ldr	r3, [r7, #24]
 8006ae6:	6013      	str	r3, [r2, #0]
          LWIP_ASSERT("mem_malloc: !lfree->used", ((lfree == ram_end) || (!lfree->used)));
 8006ae8:	4b2a      	ldr	r3, [pc, #168]	; (8006b94 <mem_malloc+0x1c4>)
 8006aea:	681a      	ldr	r2, [r3, #0]
 8006aec:	4b2b      	ldr	r3, [pc, #172]	; (8006b9c <mem_malloc+0x1cc>)
 8006aee:	681b      	ldr	r3, [r3, #0]
 8006af0:	429a      	cmp	r2, r3
 8006af2:	d00b      	beq.n	8006b0c <mem_malloc+0x13c>
 8006af4:	4b27      	ldr	r3, [pc, #156]	; (8006b94 <mem_malloc+0x1c4>)
 8006af6:	681b      	ldr	r3, [r3, #0]
 8006af8:	791b      	ldrb	r3, [r3, #4]
 8006afa:	2b00      	cmp	r3, #0
 8006afc:	d006      	beq.n	8006b0c <mem_malloc+0x13c>
 8006afe:	4b28      	ldr	r3, [pc, #160]	; (8006ba0 <mem_malloc+0x1d0>)
 8006b00:	f240 22cf 	movw	r2, #719	; 0x2cf
 8006b04:	4927      	ldr	r1, [pc, #156]	; (8006ba4 <mem_malloc+0x1d4>)
 8006b06:	4828      	ldr	r0, [pc, #160]	; (8006ba8 <mem_malloc+0x1d8>)
 8006b08:	f009 fd12 	bl	8010530 <iprintf>
        }
        LWIP_MEM_ALLOC_UNPROTECT();
        sys_mutex_unlock(&mem_mutex);
 8006b0c:	4820      	ldr	r0, [pc, #128]	; (8006b90 <mem_malloc+0x1c0>)
 8006b0e:	f008 fb5a 	bl	800f1c6 <sys_mutex_unlock>
        LWIP_ASSERT("mem_malloc: allocated memory not above ram_end.",
 8006b12:	88fa      	ldrh	r2, [r7, #6]
 8006b14:	697b      	ldr	r3, [r7, #20]
 8006b16:	4413      	add	r3, r2
 8006b18:	3308      	adds	r3, #8
 8006b1a:	4a20      	ldr	r2, [pc, #128]	; (8006b9c <mem_malloc+0x1cc>)
 8006b1c:	6812      	ldr	r2, [r2, #0]
 8006b1e:	4293      	cmp	r3, r2
 8006b20:	d906      	bls.n	8006b30 <mem_malloc+0x160>
 8006b22:	4b1f      	ldr	r3, [pc, #124]	; (8006ba0 <mem_malloc+0x1d0>)
 8006b24:	f44f 7235 	mov.w	r2, #724	; 0x2d4
 8006b28:	4920      	ldr	r1, [pc, #128]	; (8006bac <mem_malloc+0x1dc>)
 8006b2a:	481f      	ldr	r0, [pc, #124]	; (8006ba8 <mem_malloc+0x1d8>)
 8006b2c:	f009 fd00 	bl	8010530 <iprintf>
         (mem_ptr_t)mem + SIZEOF_STRUCT_MEM + size <= (mem_ptr_t)ram_end);
        LWIP_ASSERT("mem_malloc: allocated memory properly aligned.",
 8006b30:	697b      	ldr	r3, [r7, #20]
 8006b32:	f003 0303 	and.w	r3, r3, #3
 8006b36:	2b00      	cmp	r3, #0
 8006b38:	d006      	beq.n	8006b48 <mem_malloc+0x178>
 8006b3a:	4b19      	ldr	r3, [pc, #100]	; (8006ba0 <mem_malloc+0x1d0>)
 8006b3c:	f240 22d6 	movw	r2, #726	; 0x2d6
 8006b40:	491b      	ldr	r1, [pc, #108]	; (8006bb0 <mem_malloc+0x1e0>)
 8006b42:	4819      	ldr	r0, [pc, #100]	; (8006ba8 <mem_malloc+0x1d8>)
 8006b44:	f009 fcf4 	bl	8010530 <iprintf>
         ((mem_ptr_t)mem + SIZEOF_STRUCT_MEM) % MEM_ALIGNMENT == 0);
        LWIP_ASSERT("mem_malloc: sanity check alignment",
 8006b48:	697b      	ldr	r3, [r7, #20]
 8006b4a:	f003 0303 	and.w	r3, r3, #3
 8006b4e:	2b00      	cmp	r3, #0
 8006b50:	d006      	beq.n	8006b60 <mem_malloc+0x190>
 8006b52:	4b13      	ldr	r3, [pc, #76]	; (8006ba0 <mem_malloc+0x1d0>)
 8006b54:	f44f 7236 	mov.w	r2, #728	; 0x2d8
 8006b58:	4916      	ldr	r1, [pc, #88]	; (8006bb4 <mem_malloc+0x1e4>)
 8006b5a:	4813      	ldr	r0, [pc, #76]	; (8006ba8 <mem_malloc+0x1d8>)
 8006b5c:	f009 fce8 	bl	8010530 <iprintf>
          (((mem_ptr_t)mem) & (MEM_ALIGNMENT-1)) == 0);

        return (u8_t *)mem + SIZEOF_STRUCT_MEM;
 8006b60:	697b      	ldr	r3, [r7, #20]
 8006b62:	3308      	adds	r3, #8
 8006b64:	e010      	b.n	8006b88 <mem_malloc+0x1b8>
         ptr = ((struct mem *)(void *)&ram[ptr])->next) {
 8006b66:	4b0c      	ldr	r3, [pc, #48]	; (8006b98 <mem_malloc+0x1c8>)
 8006b68:	681a      	ldr	r2, [r3, #0]
 8006b6a:	8bfb      	ldrh	r3, [r7, #30]
 8006b6c:	4413      	add	r3, r2
 8006b6e:	881b      	ldrh	r3, [r3, #0]
 8006b70:	83fb      	strh	r3, [r7, #30]
    for (ptr = (mem_size_t)((u8_t *)lfree - ram); ptr < MEM_SIZE_ALIGNED - size;
 8006b72:	8bfa      	ldrh	r2, [r7, #30]
 8006b74:	88fb      	ldrh	r3, [r7, #6]
 8006b76:	f5c3 5320 	rsb	r3, r3, #10240	; 0x2800
 8006b7a:	429a      	cmp	r2, r3
 8006b7c:	f4ff af4e 	bcc.w	8006a1c <mem_malloc+0x4c>
  } while (local_mem_free_count != 0);
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("mem_malloc: could not allocate %"S16_F" bytes\n", (s16_t)size));
  MEM_STATS_INC(err);
  LWIP_MEM_ALLOC_UNPROTECT();
  sys_mutex_unlock(&mem_mutex);
 8006b80:	4803      	ldr	r0, [pc, #12]	; (8006b90 <mem_malloc+0x1c0>)
 8006b82:	f008 fb20 	bl	800f1c6 <sys_mutex_unlock>
  return NULL;
 8006b86:	2300      	movs	r3, #0
}
 8006b88:	4618      	mov	r0, r3
 8006b8a:	3720      	adds	r7, #32
 8006b8c:	46bd      	mov	sp, r7
 8006b8e:	bd80      	pop	{r7, pc}
 8006b90:	24004004 	.word	0x24004004
 8006b94:	24004000 	.word	0x24004000
 8006b98:	24003ff8 	.word	0x24003ff8
 8006b9c:	24003ffc 	.word	0x24003ffc
 8006ba0:	080113f8 	.word	0x080113f8
 8006ba4:	08011570 	.word	0x08011570
 8006ba8:	08011440 	.word	0x08011440
 8006bac:	0801158c 	.word	0x0801158c
 8006bb0:	080115bc 	.word	0x080115bc
 8006bb4:	080115ec 	.word	0x080115ec

08006bb8 <memp_init_pool>:
 *
 * @param desc pool to initialize
 */
void
memp_init_pool(const struct memp_desc *desc)
{
 8006bb8:	b480      	push	{r7}
 8006bba:	b085      	sub	sp, #20
 8006bbc:	af00      	add	r7, sp, #0
 8006bbe:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(desc);
#else
  int i;
  struct memp *memp;

  *desc->tab = NULL;
 8006bc0:	687b      	ldr	r3, [r7, #4]
 8006bc2:	689b      	ldr	r3, [r3, #8]
 8006bc4:	2200      	movs	r2, #0
 8006bc6:	601a      	str	r2, [r3, #0]
  memp = (struct memp*)LWIP_MEM_ALIGN(desc->base);
 8006bc8:	687b      	ldr	r3, [r7, #4]
 8006bca:	685b      	ldr	r3, [r3, #4]
 8006bcc:	3303      	adds	r3, #3
 8006bce:	f023 0303 	bic.w	r3, r3, #3
 8006bd2:	60bb      	str	r3, [r7, #8]
  /* create a linked list of memp elements */
  for (i = 0; i < desc->num; ++i) {
 8006bd4:	2300      	movs	r3, #0
 8006bd6:	60fb      	str	r3, [r7, #12]
 8006bd8:	e011      	b.n	8006bfe <memp_init_pool+0x46>
    memp->next = *desc->tab;
 8006bda:	687b      	ldr	r3, [r7, #4]
 8006bdc:	689b      	ldr	r3, [r3, #8]
 8006bde:	681a      	ldr	r2, [r3, #0]
 8006be0:	68bb      	ldr	r3, [r7, #8]
 8006be2:	601a      	str	r2, [r3, #0]
    *desc->tab = memp;
 8006be4:	687b      	ldr	r3, [r7, #4]
 8006be6:	689b      	ldr	r3, [r3, #8]
 8006be8:	68ba      	ldr	r2, [r7, #8]
 8006bea:	601a      	str	r2, [r3, #0]
#if MEMP_OVERFLOW_CHECK
    memp_overflow_init_element(memp, desc);
#endif /* MEMP_OVERFLOW_CHECK */
   /* cast through void* to get rid of alignment warnings */
   memp = (struct memp *)(void *)((u8_t *)memp + MEMP_SIZE + desc->size
 8006bec:	687b      	ldr	r3, [r7, #4]
 8006bee:	881b      	ldrh	r3, [r3, #0]
 8006bf0:	461a      	mov	r2, r3
 8006bf2:	68bb      	ldr	r3, [r7, #8]
 8006bf4:	4413      	add	r3, r2
 8006bf6:	60bb      	str	r3, [r7, #8]
  for (i = 0; i < desc->num; ++i) {
 8006bf8:	68fb      	ldr	r3, [r7, #12]
 8006bfa:	3301      	adds	r3, #1
 8006bfc:	60fb      	str	r3, [r7, #12]
 8006bfe:	687b      	ldr	r3, [r7, #4]
 8006c00:	885b      	ldrh	r3, [r3, #2]
 8006c02:	461a      	mov	r2, r3
 8006c04:	68fb      	ldr	r3, [r7, #12]
 8006c06:	4293      	cmp	r3, r2
 8006c08:	dbe7      	blt.n	8006bda <memp_init_pool+0x22>
#endif /* !MEMP_MEM_MALLOC */

#if MEMP_STATS && (defined(LWIP_DEBUG) || LWIP_STATS_DISPLAY)
  desc->stats->name  = desc->desc;
#endif /* MEMP_STATS && (defined(LWIP_DEBUG) || LWIP_STATS_DISPLAY) */
}
 8006c0a:	bf00      	nop
 8006c0c:	3714      	adds	r7, #20
 8006c0e:	46bd      	mov	sp, r7
 8006c10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c14:	4770      	bx	lr
	...

08006c18 <memp_init>:
 *
 * Carves out memp_memory into linked lists for each pool-type.
 */
void
memp_init(void)
{
 8006c18:	b580      	push	{r7, lr}
 8006c1a:	b082      	sub	sp, #8
 8006c1c:	af00      	add	r7, sp, #0
  u16_t i;

  /* for every pool: */
  for (i = 0; i < LWIP_ARRAYSIZE(memp_pools); i++) {
 8006c1e:	2300      	movs	r3, #0
 8006c20:	80fb      	strh	r3, [r7, #6]
 8006c22:	e009      	b.n	8006c38 <memp_init+0x20>
    memp_init_pool(memp_pools[i]);
 8006c24:	88fb      	ldrh	r3, [r7, #6]
 8006c26:	4a08      	ldr	r2, [pc, #32]	; (8006c48 <memp_init+0x30>)
 8006c28:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006c2c:	4618      	mov	r0, r3
 8006c2e:	f7ff ffc3 	bl	8006bb8 <memp_init_pool>
  for (i = 0; i < LWIP_ARRAYSIZE(memp_pools); i++) {
 8006c32:	88fb      	ldrh	r3, [r7, #6]
 8006c34:	3301      	adds	r3, #1
 8006c36:	80fb      	strh	r3, [r7, #6]
 8006c38:	88fb      	ldrh	r3, [r7, #6]
 8006c3a:	2b0c      	cmp	r3, #12
 8006c3c:	d9f2      	bls.n	8006c24 <memp_init+0xc>

#if MEMP_OVERFLOW_CHECK >= 2
  /* check everything a first time to see if it worked */
  memp_overflow_check_all();
#endif /* MEMP_OVERFLOW_CHECK >= 2 */
}
 8006c3e:	bf00      	nop
 8006c40:	3708      	adds	r7, #8
 8006c42:	46bd      	mov	sp, r7
 8006c44:	bd80      	pop	{r7, pc}
 8006c46:	bf00      	nop
 8006c48:	08013188 	.word	0x08013188

08006c4c <do_memp_malloc_pool>:
#if !MEMP_OVERFLOW_CHECK
do_memp_malloc_pool(const struct memp_desc *desc)
#else
do_memp_malloc_pool_fn(const struct memp_desc *desc, const char* file, const int line)
#endif
{
 8006c4c:	b580      	push	{r7, lr}
 8006c4e:	b084      	sub	sp, #16
 8006c50:	af00      	add	r7, sp, #0
 8006c52:	6078      	str	r0, [r7, #4]

#if MEMP_MEM_MALLOC
  memp = (struct memp *)mem_malloc(MEMP_SIZE + MEMP_ALIGN_SIZE(desc->size));
  SYS_ARCH_PROTECT(old_level);
#else /* MEMP_MEM_MALLOC */
  SYS_ARCH_PROTECT(old_level);
 8006c54:	f008 fae2 	bl	800f21c <sys_arch_protect>
 8006c58:	60f8      	str	r0, [r7, #12]

  memp = *desc->tab;
 8006c5a:	687b      	ldr	r3, [r7, #4]
 8006c5c:	689b      	ldr	r3, [r3, #8]
 8006c5e:	681b      	ldr	r3, [r3, #0]
 8006c60:	60bb      	str	r3, [r7, #8]
#endif /* MEMP_MEM_MALLOC */

  if (memp != NULL) {
 8006c62:	68bb      	ldr	r3, [r7, #8]
 8006c64:	2b00      	cmp	r3, #0
 8006c66:	d015      	beq.n	8006c94 <do_memp_malloc_pool+0x48>
#if MEMP_OVERFLOW_CHECK == 1
    memp_overflow_check_element_overflow(memp, desc);
    memp_overflow_check_element_underflow(memp, desc);
#endif /* MEMP_OVERFLOW_CHECK */

    *desc->tab = memp->next;
 8006c68:	687b      	ldr	r3, [r7, #4]
 8006c6a:	689b      	ldr	r3, [r3, #8]
 8006c6c:	68ba      	ldr	r2, [r7, #8]
 8006c6e:	6812      	ldr	r2, [r2, #0]
 8006c70:	601a      	str	r2, [r3, #0]
    memp->line = line;
#if MEMP_MEM_MALLOC
    memp_overflow_init_element(memp, desc);
#endif /* MEMP_MEM_MALLOC */
#endif /* MEMP_OVERFLOW_CHECK */
    LWIP_ASSERT("memp_malloc: memp properly aligned",
 8006c72:	68bb      	ldr	r3, [r7, #8]
 8006c74:	f003 0303 	and.w	r3, r3, #3
 8006c78:	2b00      	cmp	r3, #0
 8006c7a:	d006      	beq.n	8006c8a <do_memp_malloc_pool+0x3e>
 8006c7c:	4b09      	ldr	r3, [pc, #36]	; (8006ca4 <do_memp_malloc_pool+0x58>)
 8006c7e:	f240 1249 	movw	r2, #329	; 0x149
 8006c82:	4909      	ldr	r1, [pc, #36]	; (8006ca8 <do_memp_malloc_pool+0x5c>)
 8006c84:	4809      	ldr	r0, [pc, #36]	; (8006cac <do_memp_malloc_pool+0x60>)
 8006c86:	f009 fc53 	bl	8010530 <iprintf>
    desc->stats->used++;
    if (desc->stats->used > desc->stats->max) {
      desc->stats->max = desc->stats->used;
    }
#endif
    SYS_ARCH_UNPROTECT(old_level);
 8006c8a:	68f8      	ldr	r0, [r7, #12]
 8006c8c:	f008 fad4 	bl	800f238 <sys_arch_unprotect>
    /* cast through u8_t* to get rid of alignment warnings */
    return ((u8_t*)memp + MEMP_SIZE);
 8006c90:	68bb      	ldr	r3, [r7, #8]
 8006c92:	e003      	b.n	8006c9c <do_memp_malloc_pool+0x50>
#if MEMP_STATS
    desc->stats->err++;
#endif
  }

  SYS_ARCH_UNPROTECT(old_level);
 8006c94:	68f8      	ldr	r0, [r7, #12]
 8006c96:	f008 facf 	bl	800f238 <sys_arch_unprotect>
  return NULL;
 8006c9a:	2300      	movs	r3, #0
}
 8006c9c:	4618      	mov	r0, r3
 8006c9e:	3710      	adds	r7, #16
 8006ca0:	46bd      	mov	sp, r7
 8006ca2:	bd80      	pop	{r7, pc}
 8006ca4:	08011610 	.word	0x08011610
 8006ca8:	08011640 	.word	0x08011640
 8006cac:	08011664 	.word	0x08011664

08006cb0 <memp_malloc_pool>:
#if !MEMP_OVERFLOW_CHECK
memp_malloc_pool(const struct memp_desc *desc)
#else
memp_malloc_pool_fn(const struct memp_desc *desc, const char* file, const int line)
#endif
{
 8006cb0:	b580      	push	{r7, lr}
 8006cb2:	b082      	sub	sp, #8
 8006cb4:	af00      	add	r7, sp, #0
 8006cb6:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("invalid pool desc", desc != NULL);
 8006cb8:	687b      	ldr	r3, [r7, #4]
 8006cba:	2b00      	cmp	r3, #0
 8006cbc:	d106      	bne.n	8006ccc <memp_malloc_pool+0x1c>
 8006cbe:	4b0a      	ldr	r3, [pc, #40]	; (8006ce8 <memp_malloc_pool+0x38>)
 8006cc0:	f44f 72b6 	mov.w	r2, #364	; 0x16c
 8006cc4:	4909      	ldr	r1, [pc, #36]	; (8006cec <memp_malloc_pool+0x3c>)
 8006cc6:	480a      	ldr	r0, [pc, #40]	; (8006cf0 <memp_malloc_pool+0x40>)
 8006cc8:	f009 fc32 	bl	8010530 <iprintf>
  if (desc == NULL) {
 8006ccc:	687b      	ldr	r3, [r7, #4]
 8006cce:	2b00      	cmp	r3, #0
 8006cd0:	d101      	bne.n	8006cd6 <memp_malloc_pool+0x26>
    return NULL;
 8006cd2:	2300      	movs	r3, #0
 8006cd4:	e003      	b.n	8006cde <memp_malloc_pool+0x2e>
  }

#if !MEMP_OVERFLOW_CHECK
  return do_memp_malloc_pool(desc);
 8006cd6:	6878      	ldr	r0, [r7, #4]
 8006cd8:	f7ff ffb8 	bl	8006c4c <do_memp_malloc_pool>
 8006cdc:	4603      	mov	r3, r0
#else
  return do_memp_malloc_pool_fn(desc, file, line);
#endif
}
 8006cde:	4618      	mov	r0, r3
 8006ce0:	3708      	adds	r7, #8
 8006ce2:	46bd      	mov	sp, r7
 8006ce4:	bd80      	pop	{r7, pc}
 8006ce6:	bf00      	nop
 8006ce8:	08011610 	.word	0x08011610
 8006cec:	0801168c 	.word	0x0801168c
 8006cf0:	08011664 	.word	0x08011664

08006cf4 <memp_malloc>:
#if !MEMP_OVERFLOW_CHECK
memp_malloc(memp_t type)
#else
memp_malloc_fn(memp_t type, const char* file, const int line)
#endif
{
 8006cf4:	b580      	push	{r7, lr}
 8006cf6:	b084      	sub	sp, #16
 8006cf8:	af00      	add	r7, sp, #0
 8006cfa:	4603      	mov	r3, r0
 8006cfc:	71fb      	strb	r3, [r7, #7]
  void *memp;
  LWIP_ERROR("memp_malloc: type < MEMP_MAX", (type < MEMP_MAX), return NULL;);
 8006cfe:	79fb      	ldrb	r3, [r7, #7]
 8006d00:	2b0c      	cmp	r3, #12
 8006d02:	d908      	bls.n	8006d16 <memp_malloc+0x22>
 8006d04:	4b0a      	ldr	r3, [pc, #40]	; (8006d30 <memp_malloc+0x3c>)
 8006d06:	f240 1287 	movw	r2, #391	; 0x187
 8006d0a:	490a      	ldr	r1, [pc, #40]	; (8006d34 <memp_malloc+0x40>)
 8006d0c:	480a      	ldr	r0, [pc, #40]	; (8006d38 <memp_malloc+0x44>)
 8006d0e:	f009 fc0f 	bl	8010530 <iprintf>
 8006d12:	2300      	movs	r3, #0
 8006d14:	e008      	b.n	8006d28 <memp_malloc+0x34>
#if MEMP_OVERFLOW_CHECK >= 2
  memp_overflow_check_all();
#endif /* MEMP_OVERFLOW_CHECK >= 2 */

#if !MEMP_OVERFLOW_CHECK
  memp = do_memp_malloc_pool(memp_pools[type]);
 8006d16:	79fb      	ldrb	r3, [r7, #7]
 8006d18:	4a08      	ldr	r2, [pc, #32]	; (8006d3c <memp_malloc+0x48>)
 8006d1a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006d1e:	4618      	mov	r0, r3
 8006d20:	f7ff ff94 	bl	8006c4c <do_memp_malloc_pool>
 8006d24:	60f8      	str	r0, [r7, #12]
#else
  memp = do_memp_malloc_pool_fn(memp_pools[type], file, line);
#endif

  return memp;
 8006d26:	68fb      	ldr	r3, [r7, #12]
}
 8006d28:	4618      	mov	r0, r3
 8006d2a:	3710      	adds	r7, #16
 8006d2c:	46bd      	mov	sp, r7
 8006d2e:	bd80      	pop	{r7, pc}
 8006d30:	08011610 	.word	0x08011610
 8006d34:	080116a0 	.word	0x080116a0
 8006d38:	08011664 	.word	0x08011664
 8006d3c:	08013188 	.word	0x08013188

08006d40 <do_memp_free_pool>:

static void
do_memp_free_pool(const struct memp_desc* desc, void *mem)
{
 8006d40:	b580      	push	{r7, lr}
 8006d42:	b084      	sub	sp, #16
 8006d44:	af00      	add	r7, sp, #0
 8006d46:	6078      	str	r0, [r7, #4]
 8006d48:	6039      	str	r1, [r7, #0]
  struct memp *memp;
  SYS_ARCH_DECL_PROTECT(old_level);

  LWIP_ASSERT("memp_free: mem properly aligned",
 8006d4a:	683b      	ldr	r3, [r7, #0]
 8006d4c:	f003 0303 	and.w	r3, r3, #3
 8006d50:	2b00      	cmp	r3, #0
 8006d52:	d006      	beq.n	8006d62 <do_memp_free_pool+0x22>
 8006d54:	4b0d      	ldr	r3, [pc, #52]	; (8006d8c <do_memp_free_pool+0x4c>)
 8006d56:	f240 129d 	movw	r2, #413	; 0x19d
 8006d5a:	490d      	ldr	r1, [pc, #52]	; (8006d90 <do_memp_free_pool+0x50>)
 8006d5c:	480d      	ldr	r0, [pc, #52]	; (8006d94 <do_memp_free_pool+0x54>)
 8006d5e:	f009 fbe7 	bl	8010530 <iprintf>
                ((mem_ptr_t)mem % MEM_ALIGNMENT) == 0);

  /* cast through void* to get rid of alignment warnings */
  memp = (struct memp *)(void *)((u8_t*)mem - MEMP_SIZE);
 8006d62:	683b      	ldr	r3, [r7, #0]
 8006d64:	60fb      	str	r3, [r7, #12]

  SYS_ARCH_PROTECT(old_level);
 8006d66:	f008 fa59 	bl	800f21c <sys_arch_protect>
 8006d6a:	60b8      	str	r0, [r7, #8]
#if MEMP_MEM_MALLOC
  LWIP_UNUSED_ARG(desc);
  SYS_ARCH_UNPROTECT(old_level);
  mem_free(memp);
#else /* MEMP_MEM_MALLOC */
  memp->next = *desc->tab;
 8006d6c:	687b      	ldr	r3, [r7, #4]
 8006d6e:	689b      	ldr	r3, [r3, #8]
 8006d70:	681a      	ldr	r2, [r3, #0]
 8006d72:	68fb      	ldr	r3, [r7, #12]
 8006d74:	601a      	str	r2, [r3, #0]
  *desc->tab = memp;
 8006d76:	687b      	ldr	r3, [r7, #4]
 8006d78:	689b      	ldr	r3, [r3, #8]
 8006d7a:	68fa      	ldr	r2, [r7, #12]
 8006d7c:	601a      	str	r2, [r3, #0]

#if MEMP_SANITY_CHECK
  LWIP_ASSERT("memp sanity", memp_sanity(desc));
#endif /* MEMP_SANITY_CHECK */

  SYS_ARCH_UNPROTECT(old_level);
 8006d7e:	68b8      	ldr	r0, [r7, #8]
 8006d80:	f008 fa5a 	bl	800f238 <sys_arch_unprotect>
#endif /* !MEMP_MEM_MALLOC */
}
 8006d84:	bf00      	nop
 8006d86:	3710      	adds	r7, #16
 8006d88:	46bd      	mov	sp, r7
 8006d8a:	bd80      	pop	{r7, pc}
 8006d8c:	08011610 	.word	0x08011610
 8006d90:	080116c0 	.word	0x080116c0
 8006d94:	08011664 	.word	0x08011664

08006d98 <memp_free_pool>:
 * @param desc the pool where to put mem
 * @param mem the memp element to free
 */
void
memp_free_pool(const struct memp_desc* desc, void *mem)
{
 8006d98:	b580      	push	{r7, lr}
 8006d9a:	b082      	sub	sp, #8
 8006d9c:	af00      	add	r7, sp, #0
 8006d9e:	6078      	str	r0, [r7, #4]
 8006da0:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT("invalid pool desc", desc != NULL);
 8006da2:	687b      	ldr	r3, [r7, #4]
 8006da4:	2b00      	cmp	r3, #0
 8006da6:	d106      	bne.n	8006db6 <memp_free_pool+0x1e>
 8006da8:	4b0a      	ldr	r3, [pc, #40]	; (8006dd4 <memp_free_pool+0x3c>)
 8006daa:	f44f 72e3 	mov.w	r2, #454	; 0x1c6
 8006dae:	490a      	ldr	r1, [pc, #40]	; (8006dd8 <memp_free_pool+0x40>)
 8006db0:	480a      	ldr	r0, [pc, #40]	; (8006ddc <memp_free_pool+0x44>)
 8006db2:	f009 fbbd 	bl	8010530 <iprintf>
  if ((desc == NULL) || (mem == NULL)) {
 8006db6:	687b      	ldr	r3, [r7, #4]
 8006db8:	2b00      	cmp	r3, #0
 8006dba:	d007      	beq.n	8006dcc <memp_free_pool+0x34>
 8006dbc:	683b      	ldr	r3, [r7, #0]
 8006dbe:	2b00      	cmp	r3, #0
 8006dc0:	d004      	beq.n	8006dcc <memp_free_pool+0x34>
    return;
  }

  do_memp_free_pool(desc, mem);
 8006dc2:	6839      	ldr	r1, [r7, #0]
 8006dc4:	6878      	ldr	r0, [r7, #4]
 8006dc6:	f7ff ffbb 	bl	8006d40 <do_memp_free_pool>
 8006dca:	e000      	b.n	8006dce <memp_free_pool+0x36>
    return;
 8006dcc:	bf00      	nop
}
 8006dce:	3708      	adds	r7, #8
 8006dd0:	46bd      	mov	sp, r7
 8006dd2:	bd80      	pop	{r7, pc}
 8006dd4:	08011610 	.word	0x08011610
 8006dd8:	0801168c 	.word	0x0801168c
 8006ddc:	08011664 	.word	0x08011664

08006de0 <memp_free>:
 * @param type the pool where to put mem
 * @param mem the memp element to free
 */
void
memp_free(memp_t type, void *mem)
{
 8006de0:	b580      	push	{r7, lr}
 8006de2:	b082      	sub	sp, #8
 8006de4:	af00      	add	r7, sp, #0
 8006de6:	4603      	mov	r3, r0
 8006de8:	6039      	str	r1, [r7, #0]
 8006dea:	71fb      	strb	r3, [r7, #7]
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  struct memp *old_first;
#endif

  LWIP_ERROR("memp_free: type < MEMP_MAX", (type < MEMP_MAX), return;);
 8006dec:	79fb      	ldrb	r3, [r7, #7]
 8006dee:	2b0c      	cmp	r3, #12
 8006df0:	d907      	bls.n	8006e02 <memp_free+0x22>
 8006df2:	4b0c      	ldr	r3, [pc, #48]	; (8006e24 <memp_free+0x44>)
 8006df4:	f240 12db 	movw	r2, #475	; 0x1db
 8006df8:	490b      	ldr	r1, [pc, #44]	; (8006e28 <memp_free+0x48>)
 8006dfa:	480c      	ldr	r0, [pc, #48]	; (8006e2c <memp_free+0x4c>)
 8006dfc:	f009 fb98 	bl	8010530 <iprintf>
 8006e00:	e00c      	b.n	8006e1c <memp_free+0x3c>

  if (mem == NULL) {
 8006e02:	683b      	ldr	r3, [r7, #0]
 8006e04:	2b00      	cmp	r3, #0
 8006e06:	d008      	beq.n	8006e1a <memp_free+0x3a>

#ifdef LWIP_HOOK_MEMP_AVAILABLE
  old_first = *memp_pools[type]->tab;
#endif

  do_memp_free_pool(memp_pools[type], mem);
 8006e08:	79fb      	ldrb	r3, [r7, #7]
 8006e0a:	4a09      	ldr	r2, [pc, #36]	; (8006e30 <memp_free+0x50>)
 8006e0c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006e10:	6839      	ldr	r1, [r7, #0]
 8006e12:	4618      	mov	r0, r3
 8006e14:	f7ff ff94 	bl	8006d40 <do_memp_free_pool>
 8006e18:	e000      	b.n	8006e1c <memp_free+0x3c>
    return;
 8006e1a:	bf00      	nop
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  if (old_first == NULL) {
    LWIP_HOOK_MEMP_AVAILABLE(type);
  }
#endif
}
 8006e1c:	3708      	adds	r7, #8
 8006e1e:	46bd      	mov	sp, r7
 8006e20:	bd80      	pop	{r7, pc}
 8006e22:	bf00      	nop
 8006e24:	08011610 	.word	0x08011610
 8006e28:	080116e0 	.word	0x080116e0
 8006e2c:	08011664 	.word	0x08011664
 8006e30:	08013188 	.word	0x08013188

08006e34 <netif_init>:
}
#endif /* LWIP_HAVE_LOOPIF */

void
netif_init(void)
{
 8006e34:	b480      	push	{r7}
 8006e36:	af00      	add	r7, sp, #0

  netif_set_link_up(&loop_netif);
  netif_set_up(&loop_netif);

#endif /* LWIP_HAVE_LOOPIF */
}
 8006e38:	bf00      	nop
 8006e3a:	46bd      	mov	sp, r7
 8006e3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e40:	4770      	bx	lr
	...

08006e44 <netif_add>:
netif_add(struct netif *netif,
#if LWIP_IPV4
          const ip4_addr_t *ipaddr, const ip4_addr_t *netmask, const ip4_addr_t *gw,
#endif /* LWIP_IPV4 */
          void *state, netif_init_fn init, netif_input_fn input)
{
 8006e44:	b580      	push	{r7, lr}
 8006e46:	b084      	sub	sp, #16
 8006e48:	af00      	add	r7, sp, #0
 8006e4a:	60f8      	str	r0, [r7, #12]
 8006e4c:	60b9      	str	r1, [r7, #8]
 8006e4e:	607a      	str	r2, [r7, #4]
 8006e50:	603b      	str	r3, [r7, #0]
#if LWIP_IPV6
  s8_t i;
#endif

  LWIP_ASSERT("No init function given", init != NULL);
 8006e52:	69fb      	ldr	r3, [r7, #28]
 8006e54:	2b00      	cmp	r3, #0
 8006e56:	d105      	bne.n	8006e64 <netif_add+0x20>
 8006e58:	4b21      	ldr	r3, [pc, #132]	; (8006ee0 <netif_add+0x9c>)
 8006e5a:	22fb      	movs	r2, #251	; 0xfb
 8006e5c:	4921      	ldr	r1, [pc, #132]	; (8006ee4 <netif_add+0xa0>)
 8006e5e:	4822      	ldr	r0, [pc, #136]	; (8006ee8 <netif_add+0xa4>)
 8006e60:	f009 fb66 	bl	8010530 <iprintf>

  /* reset new interface configuration state */
#if LWIP_IPV4
  ip_addr_set_zero_ip4(&netif->ip_addr);
 8006e64:	68fb      	ldr	r3, [r7, #12]
 8006e66:	2200      	movs	r2, #0
 8006e68:	605a      	str	r2, [r3, #4]
  ip_addr_set_zero_ip4(&netif->netmask);
 8006e6a:	68fb      	ldr	r3, [r7, #12]
 8006e6c:	2200      	movs	r2, #0
 8006e6e:	609a      	str	r2, [r3, #8]
  ip_addr_set_zero_ip4(&netif->gw);
 8006e70:	68fb      	ldr	r3, [r7, #12]
 8006e72:	2200      	movs	r2, #0
 8006e74:	60da      	str	r2, [r3, #12]
    netif->ip6_addr_state[i] = IP6_ADDR_INVALID;
  }
  netif->output_ip6 = netif_null_output_ip6;
#endif /* LWIP_IPV6 */
  NETIF_SET_CHECKSUM_CTRL(netif, NETIF_CHECKSUM_ENABLE_ALL);
  netif->flags = 0;
 8006e76:	68fb      	ldr	r3, [r7, #12]
 8006e78:	2200      	movs	r2, #0
 8006e7a:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
#if LWIP_IPV6_AUTOCONFIG
  /* IPv6 address autoconfiguration not enabled by default */
  netif->ip6_autoconfig_enabled = 0;
#endif /* LWIP_IPV6_AUTOCONFIG */
#if LWIP_IPV6_SEND_ROUTER_SOLICIT
  netif->rs_count = LWIP_ND6_MAX_MULTICAST_SOLICIT;
 8006e7e:	68fb      	ldr	r3, [r7, #12]
 8006e80:	2203      	movs	r2, #3
 8006e82:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
#endif /* LWIP_IPV6_SEND_ROUTER_SOLICIT */
#if LWIP_NETIF_STATUS_CALLBACK
  netif->status_callback = NULL;
#endif /* LWIP_NETIF_STATUS_CALLBACK */
#if LWIP_NETIF_LINK_CALLBACK
  netif->link_callback = NULL;
 8006e86:	68fb      	ldr	r3, [r7, #12]
 8006e88:	2200      	movs	r2, #0
 8006e8a:	61da      	str	r2, [r3, #28]
  netif->loop_first = NULL;
  netif->loop_last = NULL;
#endif /* ENABLE_LOOPBACK */

  /* remember netif specific state information data */
  netif->state = state;
 8006e8c:	68fb      	ldr	r3, [r7, #12]
 8006e8e:	69ba      	ldr	r2, [r7, #24]
 8006e90:	621a      	str	r2, [r3, #32]
  netif->num = netif_num++;
 8006e92:	4b16      	ldr	r3, [pc, #88]	; (8006eec <netif_add+0xa8>)
 8006e94:	781b      	ldrb	r3, [r3, #0]
 8006e96:	1c5a      	adds	r2, r3, #1
 8006e98:	b2d1      	uxtb	r1, r2
 8006e9a:	4a14      	ldr	r2, [pc, #80]	; (8006eec <netif_add+0xa8>)
 8006e9c:	7011      	strb	r1, [r2, #0]
 8006e9e:	68fa      	ldr	r2, [r7, #12]
 8006ea0:	f882 3032 	strb.w	r3, [r2, #50]	; 0x32
  netif->input = input;
 8006ea4:	68fb      	ldr	r3, [r7, #12]
 8006ea6:	6a3a      	ldr	r2, [r7, #32]
 8006ea8:	611a      	str	r2, [r3, #16]
#if ENABLE_LOOPBACK && LWIP_LOOPBACK_MAX_PBUFS
  netif->loop_cnt_current = 0;
#endif /* ENABLE_LOOPBACK && LWIP_LOOPBACK_MAX_PBUFS */

#if LWIP_IPV4
  netif_set_addr(netif, ipaddr, netmask, gw);
 8006eaa:	683b      	ldr	r3, [r7, #0]
 8006eac:	687a      	ldr	r2, [r7, #4]
 8006eae:	68b9      	ldr	r1, [r7, #8]
 8006eb0:	68f8      	ldr	r0, [r7, #12]
 8006eb2:	f000 f81f 	bl	8006ef4 <netif_set_addr>
#endif /* LWIP_IPV4 */

  /* call user specified initialization function for netif */
  if (init(netif) != ERR_OK) {
 8006eb6:	69fb      	ldr	r3, [r7, #28]
 8006eb8:	68f8      	ldr	r0, [r7, #12]
 8006eba:	4798      	blx	r3
 8006ebc:	4603      	mov	r3, r0
 8006ebe:	2b00      	cmp	r3, #0
 8006ec0:	d001      	beq.n	8006ec6 <netif_add+0x82>
    return NULL;
 8006ec2:	2300      	movs	r3, #0
 8006ec4:	e007      	b.n	8006ed6 <netif_add+0x92>
  }

  /* add this netif to the list */
  netif->next = netif_list;
 8006ec6:	4b0a      	ldr	r3, [pc, #40]	; (8006ef0 <netif_add+0xac>)
 8006ec8:	681a      	ldr	r2, [r3, #0]
 8006eca:	68fb      	ldr	r3, [r7, #12]
 8006ecc:	601a      	str	r2, [r3, #0]
  netif_list = netif;
 8006ece:	4a08      	ldr	r2, [pc, #32]	; (8006ef0 <netif_add+0xac>)
 8006ed0:	68fb      	ldr	r3, [r7, #12]
 8006ed2:	6013      	str	r3, [r2, #0]
  ip4_addr_debug_print(NETIF_DEBUG, netmask);
  LWIP_DEBUGF(NETIF_DEBUG, (" gw "));
  ip4_addr_debug_print(NETIF_DEBUG, gw);
#endif /* LWIP_IPV4 */
  LWIP_DEBUGF(NETIF_DEBUG, ("\n"));
  return netif;
 8006ed4:	68fb      	ldr	r3, [r7, #12]
}
 8006ed6:	4618      	mov	r0, r3
 8006ed8:	3710      	adds	r7, #16
 8006eda:	46bd      	mov	sp, r7
 8006edc:	bd80      	pop	{r7, pc}
 8006ede:	bf00      	nop
 8006ee0:	080116fc 	.word	0x080116fc
 8006ee4:	08011730 	.word	0x08011730
 8006ee8:	08011748 	.word	0x08011748
 8006eec:	2400403c 	.word	0x2400403c
 8006ef0:	2400acc8 	.word	0x2400acc8

08006ef4 <netif_set_addr>:
 * @param gw the new default gateway
 */
void
netif_set_addr(struct netif *netif, const ip4_addr_t *ipaddr, const ip4_addr_t *netmask,
    const ip4_addr_t *gw)
{
 8006ef4:	b580      	push	{r7, lr}
 8006ef6:	b084      	sub	sp, #16
 8006ef8:	af00      	add	r7, sp, #0
 8006efa:	60f8      	str	r0, [r7, #12]
 8006efc:	60b9      	str	r1, [r7, #8]
 8006efe:	607a      	str	r2, [r7, #4]
 8006f00:	603b      	str	r3, [r7, #0]
  if (ip4_addr_isany(ipaddr)) {
 8006f02:	68bb      	ldr	r3, [r7, #8]
 8006f04:	2b00      	cmp	r3, #0
 8006f06:	d003      	beq.n	8006f10 <netif_set_addr+0x1c>
 8006f08:	68bb      	ldr	r3, [r7, #8]
 8006f0a:	681b      	ldr	r3, [r3, #0]
 8006f0c:	2b00      	cmp	r3, #0
 8006f0e:	d10c      	bne.n	8006f2a <netif_set_addr+0x36>
    /* when removing an address, we have to remove it *before* changing netmask/gw
       to ensure that tcp RST segment can be sent correctly */
    netif_set_ipaddr(netif, ipaddr);
 8006f10:	68b9      	ldr	r1, [r7, #8]
 8006f12:	68f8      	ldr	r0, [r7, #12]
 8006f14:	f000 f81a 	bl	8006f4c <netif_set_ipaddr>
    netif_set_netmask(netif, netmask);
 8006f18:	6879      	ldr	r1, [r7, #4]
 8006f1a:	68f8      	ldr	r0, [r7, #12]
 8006f1c:	f000 f862 	bl	8006fe4 <netif_set_netmask>
    netif_set_gw(netif, gw);
 8006f20:	6839      	ldr	r1, [r7, #0]
 8006f22:	68f8      	ldr	r0, [r7, #12]
 8006f24:	f000 f84a 	bl	8006fbc <netif_set_gw>
 8006f28:	e00b      	b.n	8006f42 <netif_set_addr+0x4e>
  } else {
    netif_set_netmask(netif, netmask);
 8006f2a:	6879      	ldr	r1, [r7, #4]
 8006f2c:	68f8      	ldr	r0, [r7, #12]
 8006f2e:	f000 f859 	bl	8006fe4 <netif_set_netmask>
    netif_set_gw(netif, gw);
 8006f32:	6839      	ldr	r1, [r7, #0]
 8006f34:	68f8      	ldr	r0, [r7, #12]
 8006f36:	f000 f841 	bl	8006fbc <netif_set_gw>
    /* set ipaddr last to ensure netmask/gw have been set when status callback is called */
    netif_set_ipaddr(netif, ipaddr);
 8006f3a:	68b9      	ldr	r1, [r7, #8]
 8006f3c:	68f8      	ldr	r0, [r7, #12]
 8006f3e:	f000 f805 	bl	8006f4c <netif_set_ipaddr>
  }
}
 8006f42:	bf00      	nop
 8006f44:	3710      	adds	r7, #16
 8006f46:	46bd      	mov	sp, r7
 8006f48:	bd80      	pop	{r7, pc}
	...

08006f4c <netif_set_ipaddr>:
 * @note call netif_set_addr() if you also want to change netmask and
 * default gateway
 */
void
netif_set_ipaddr(struct netif *netif, const ip4_addr_t *ipaddr)
{
 8006f4c:	b580      	push	{r7, lr}
 8006f4e:	b084      	sub	sp, #16
 8006f50:	af00      	add	r7, sp, #0
 8006f52:	6078      	str	r0, [r7, #4]
 8006f54:	6039      	str	r1, [r7, #0]
  ip_addr_t new_addr;
  *ip_2_ip4(&new_addr) = (ipaddr ? *ipaddr : *IP4_ADDR_ANY4);
 8006f56:	683b      	ldr	r3, [r7, #0]
 8006f58:	2b00      	cmp	r3, #0
 8006f5a:	d003      	beq.n	8006f64 <netif_set_ipaddr+0x18>
 8006f5c:	683b      	ldr	r3, [r7, #0]
 8006f5e:	681b      	ldr	r3, [r3, #0]
 8006f60:	60fb      	str	r3, [r7, #12]
 8006f62:	e002      	b.n	8006f6a <netif_set_ipaddr+0x1e>
 8006f64:	4b14      	ldr	r3, [pc, #80]	; (8006fb8 <netif_set_ipaddr+0x6c>)
 8006f66:	681b      	ldr	r3, [r3, #0]
 8006f68:	60fb      	str	r3, [r7, #12]
  IP_SET_TYPE_VAL(new_addr, IPADDR_TYPE_V4);

  /* address is actually being changed? */
  if (ip4_addr_cmp(ip_2_ip4(&new_addr), netif_ip4_addr(netif)) == 0) {
 8006f6a:	68fa      	ldr	r2, [r7, #12]
 8006f6c:	687b      	ldr	r3, [r7, #4]
 8006f6e:	3304      	adds	r3, #4
 8006f70:	681b      	ldr	r3, [r3, #0]
 8006f72:	429a      	cmp	r2, r3
 8006f74:	d01c      	beq.n	8006fb0 <netif_set_ipaddr+0x64>
    LWIP_DEBUGF(NETIF_DEBUG | LWIP_DBG_STATE, ("netif_set_ipaddr: netif address being changed\n"));
#if LWIP_TCP
    tcp_netif_ip_addr_changed(netif_ip_addr4(netif), &new_addr);
 8006f76:	687b      	ldr	r3, [r7, #4]
 8006f78:	3304      	adds	r3, #4
 8006f7a:	f107 020c 	add.w	r2, r7, #12
 8006f7e:	4611      	mov	r1, r2
 8006f80:	4618      	mov	r0, r3
 8006f82:	f002 f8df 	bl	8009144 <tcp_netif_ip_addr_changed>
#endif /* LWIP_TCP */
#if LWIP_UDP
    udp_netif_ip_addr_changed(netif_ip_addr4(netif), &new_addr);
 8006f86:	687b      	ldr	r3, [r7, #4]
 8006f88:	3304      	adds	r3, #4
 8006f8a:	f107 020c 	add.w	r2, r7, #12
 8006f8e:	4611      	mov	r1, r2
 8006f90:	4618      	mov	r0, r3
 8006f92:	f005 fd71 	bl	800ca78 <udp_netif_ip_addr_changed>
#endif /* LWIP_RAW */

    mib2_remove_ip4(netif);
    mib2_remove_route_ip4(0, netif);
    /* set new IP address to netif */
    ip4_addr_set(ip_2_ip4(&netif->ip_addr), ipaddr);
 8006f96:	683b      	ldr	r3, [r7, #0]
 8006f98:	2b00      	cmp	r3, #0
 8006f9a:	d002      	beq.n	8006fa2 <netif_set_ipaddr+0x56>
 8006f9c:	683b      	ldr	r3, [r7, #0]
 8006f9e:	681b      	ldr	r3, [r3, #0]
 8006fa0:	e000      	b.n	8006fa4 <netif_set_ipaddr+0x58>
 8006fa2:	2300      	movs	r3, #0
 8006fa4:	687a      	ldr	r2, [r7, #4]
 8006fa6:	6053      	str	r3, [r2, #4]
    IP_SET_TYPE_VAL(netif->ip_addr, IPADDR_TYPE_V4);
    mib2_add_ip4(netif);
    mib2_add_route_ip4(0, netif);

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4);
 8006fa8:	2101      	movs	r1, #1
 8006faa:	6878      	ldr	r0, [r7, #4]
 8006fac:	f000 f861 	bl	8007072 <netif_issue_reports>
    netif->name[0], netif->name[1],
    ip4_addr1_16(netif_ip4_addr(netif)),
    ip4_addr2_16(netif_ip4_addr(netif)),
    ip4_addr3_16(netif_ip4_addr(netif)),
    ip4_addr4_16(netif_ip4_addr(netif))));
}
 8006fb0:	bf00      	nop
 8006fb2:	3710      	adds	r7, #16
 8006fb4:	46bd      	mov	sp, r7
 8006fb6:	bd80      	pop	{r7, pc}
 8006fb8:	080131fc 	.word	0x080131fc

08006fbc <netif_set_gw>:
 *
 * @note call netif_set_addr() if you also want to change ip address and netmask
 */
void
netif_set_gw(struct netif *netif, const ip4_addr_t *gw)
{
 8006fbc:	b480      	push	{r7}
 8006fbe:	b083      	sub	sp, #12
 8006fc0:	af00      	add	r7, sp, #0
 8006fc2:	6078      	str	r0, [r7, #4]
 8006fc4:	6039      	str	r1, [r7, #0]
  ip4_addr_set(ip_2_ip4(&netif->gw), gw);
 8006fc6:	683b      	ldr	r3, [r7, #0]
 8006fc8:	2b00      	cmp	r3, #0
 8006fca:	d002      	beq.n	8006fd2 <netif_set_gw+0x16>
 8006fcc:	683b      	ldr	r3, [r7, #0]
 8006fce:	681b      	ldr	r3, [r3, #0]
 8006fd0:	e000      	b.n	8006fd4 <netif_set_gw+0x18>
 8006fd2:	2300      	movs	r3, #0
 8006fd4:	687a      	ldr	r2, [r7, #4]
 8006fd6:	60d3      	str	r3, [r2, #12]
    netif->name[0], netif->name[1],
    ip4_addr1_16(netif_ip4_gw(netif)),
    ip4_addr2_16(netif_ip4_gw(netif)),
    ip4_addr3_16(netif_ip4_gw(netif)),
    ip4_addr4_16(netif_ip4_gw(netif))));
}
 8006fd8:	bf00      	nop
 8006fda:	370c      	adds	r7, #12
 8006fdc:	46bd      	mov	sp, r7
 8006fde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fe2:	4770      	bx	lr

08006fe4 <netif_set_netmask>:
 * @note call netif_set_addr() if you also want to change ip address and
 * default gateway
 */
void
netif_set_netmask(struct netif *netif, const ip4_addr_t *netmask)
{
 8006fe4:	b480      	push	{r7}
 8006fe6:	b083      	sub	sp, #12
 8006fe8:	af00      	add	r7, sp, #0
 8006fea:	6078      	str	r0, [r7, #4]
 8006fec:	6039      	str	r1, [r7, #0]
  mib2_remove_route_ip4(0, netif);
  /* set new netmask to netif */
  ip4_addr_set(ip_2_ip4(&netif->netmask), netmask);
 8006fee:	683b      	ldr	r3, [r7, #0]
 8006ff0:	2b00      	cmp	r3, #0
 8006ff2:	d002      	beq.n	8006ffa <netif_set_netmask+0x16>
 8006ff4:	683b      	ldr	r3, [r7, #0]
 8006ff6:	681b      	ldr	r3, [r3, #0]
 8006ff8:	e000      	b.n	8006ffc <netif_set_netmask+0x18>
 8006ffa:	2300      	movs	r3, #0
 8006ffc:	687a      	ldr	r2, [r7, #4]
 8006ffe:	6093      	str	r3, [r2, #8]
    netif->name[0], netif->name[1],
    ip4_addr1_16(netif_ip4_netmask(netif)),
    ip4_addr2_16(netif_ip4_netmask(netif)),
    ip4_addr3_16(netif_ip4_netmask(netif)),
    ip4_addr4_16(netif_ip4_netmask(netif))));
}
 8007000:	bf00      	nop
 8007002:	370c      	adds	r7, #12
 8007004:	46bd      	mov	sp, r7
 8007006:	f85d 7b04 	ldr.w	r7, [sp], #4
 800700a:	4770      	bx	lr

0800700c <netif_set_default>:
 *
 * @param netif the default network interface
 */
void
netif_set_default(struct netif *netif)
{
 800700c:	b480      	push	{r7}
 800700e:	b083      	sub	sp, #12
 8007010:	af00      	add	r7, sp, #0
 8007012:	6078      	str	r0, [r7, #4]
    mib2_remove_route_ip4(1, netif);
  } else {
    /* install default route */
    mib2_add_route_ip4(1, netif);
  }
  netif_default = netif;
 8007014:	4a04      	ldr	r2, [pc, #16]	; (8007028 <netif_set_default+0x1c>)
 8007016:	687b      	ldr	r3, [r7, #4]
 8007018:	6013      	str	r3, [r2, #0]
  LWIP_DEBUGF(NETIF_DEBUG, ("netif: setting default interface %c%c\n",
           netif ? netif->name[0] : '\'', netif ? netif->name[1] : '\''));
}
 800701a:	bf00      	nop
 800701c:	370c      	adds	r7, #12
 800701e:	46bd      	mov	sp, r7
 8007020:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007024:	4770      	bx	lr
 8007026:	bf00      	nop
 8007028:	2400accc 	.word	0x2400accc

0800702c <netif_set_up>:
 * Bring an interface up, available for processing
 * traffic.
 */
void
netif_set_up(struct netif *netif)
{
 800702c:	b580      	push	{r7, lr}
 800702e:	b082      	sub	sp, #8
 8007030:	af00      	add	r7, sp, #0
 8007032:	6078      	str	r0, [r7, #4]
  if (!(netif->flags & NETIF_FLAG_UP)) {
 8007034:	687b      	ldr	r3, [r7, #4]
 8007036:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 800703a:	f003 0301 	and.w	r3, r3, #1
 800703e:	2b00      	cmp	r3, #0
 8007040:	d113      	bne.n	800706a <netif_set_up+0x3e>
    netif->flags |= NETIF_FLAG_UP;
 8007042:	687b      	ldr	r3, [r7, #4]
 8007044:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 8007048:	f043 0301 	orr.w	r3, r3, #1
 800704c:	b2da      	uxtb	r2, r3
 800704e:	687b      	ldr	r3, [r7, #4]
 8007050:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f

    MIB2_COPY_SYSUPTIME_TO(&netif->ts);

    NETIF_STATUS_CALLBACK(netif);

    if (netif->flags & NETIF_FLAG_LINK_UP) {
 8007054:	687b      	ldr	r3, [r7, #4]
 8007056:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 800705a:	f003 0304 	and.w	r3, r3, #4
 800705e:	2b00      	cmp	r3, #0
 8007060:	d003      	beq.n	800706a <netif_set_up+0x3e>
      netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4|NETIF_REPORT_TYPE_IPV6);
 8007062:	2103      	movs	r1, #3
 8007064:	6878      	ldr	r0, [r7, #4]
 8007066:	f000 f804 	bl	8007072 <netif_issue_reports>
    }
  }
}
 800706a:	bf00      	nop
 800706c:	3708      	adds	r7, #8
 800706e:	46bd      	mov	sp, r7
 8007070:	bd80      	pop	{r7, pc}

08007072 <netif_issue_reports>:

/** Send ARP/IGMP/MLD/RS events, e.g. on link-up/netif-up or addr-change
 */
static void
netif_issue_reports(struct netif* netif, u8_t report_type)
{
 8007072:	b580      	push	{r7, lr}
 8007074:	b082      	sub	sp, #8
 8007076:	af00      	add	r7, sp, #0
 8007078:	6078      	str	r0, [r7, #4]
 800707a:	460b      	mov	r3, r1
 800707c:	70fb      	strb	r3, [r7, #3]
#if LWIP_IPV4
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
 800707e:	78fb      	ldrb	r3, [r7, #3]
 8007080:	f003 0301 	and.w	r3, r3, #1
 8007084:	2b00      	cmp	r3, #0
 8007086:	d011      	beq.n	80070ac <netif_issue_reports+0x3a>
      !ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 8007088:	687b      	ldr	r3, [r7, #4]
 800708a:	3304      	adds	r3, #4
 800708c:	681b      	ldr	r3, [r3, #0]
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
 800708e:	2b00      	cmp	r3, #0
 8007090:	d00c      	beq.n	80070ac <netif_issue_reports+0x3a>
#if LWIP_ARP
    /* For Ethernet network interfaces, we would like to send a "gratuitous ARP" */
    if (netif->flags & (NETIF_FLAG_ETHARP)) {
 8007092:	687b      	ldr	r3, [r7, #4]
 8007094:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 8007098:	f003 0308 	and.w	r3, r3, #8
 800709c:	2b00      	cmp	r3, #0
 800709e:	d005      	beq.n	80070ac <netif_issue_reports+0x3a>
      etharp_gratuitous(netif);
 80070a0:	687b      	ldr	r3, [r7, #4]
 80070a2:	3304      	adds	r3, #4
 80070a4:	4619      	mov	r1, r3
 80070a6:	6878      	ldr	r0, [r7, #4]
 80070a8:	f006 fc50 	bl	800d94c <etharp_request>
    /* Send Router Solicitation messages. */
    netif->rs_count = LWIP_ND6_MAX_MULTICAST_SOLICIT;
#endif /* LWIP_IPV6_SEND_ROUTER_SOLICIT */
  }
#endif /* LWIP_IPV6 */
}
 80070ac:	bf00      	nop
 80070ae:	3708      	adds	r7, #8
 80070b0:	46bd      	mov	sp, r7
 80070b2:	bd80      	pop	{r7, pc}

080070b4 <netif_set_down>:
 * @ingroup netif
 * Bring an interface down, disabling any traffic processing.
 */
void
netif_set_down(struct netif *netif)
{
 80070b4:	b580      	push	{r7, lr}
 80070b6:	b082      	sub	sp, #8
 80070b8:	af00      	add	r7, sp, #0
 80070ba:	6078      	str	r0, [r7, #4]
  if (netif->flags & NETIF_FLAG_UP) {
 80070bc:	687b      	ldr	r3, [r7, #4]
 80070be:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 80070c2:	f003 0301 	and.w	r3, r3, #1
 80070c6:	2b00      	cmp	r3, #0
 80070c8:	d012      	beq.n	80070f0 <netif_set_down+0x3c>
    netif->flags &= ~NETIF_FLAG_UP;
 80070ca:	687b      	ldr	r3, [r7, #4]
 80070cc:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 80070d0:	f023 0301 	bic.w	r3, r3, #1
 80070d4:	b2da      	uxtb	r2, r3
 80070d6:	687b      	ldr	r3, [r7, #4]
 80070d8:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
    MIB2_COPY_SYSUPTIME_TO(&netif->ts);

#if LWIP_IPV4 && LWIP_ARP
    if (netif->flags & NETIF_FLAG_ETHARP) {
 80070dc:	687b      	ldr	r3, [r7, #4]
 80070de:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 80070e2:	f003 0308 	and.w	r3, r3, #8
 80070e6:	2b00      	cmp	r3, #0
 80070e8:	d002      	beq.n	80070f0 <netif_set_down+0x3c>
      etharp_cleanup_netif(netif);
 80070ea:	6878      	ldr	r0, [r7, #4]
 80070ec:	f005 ffd8 	bl	800d0a0 <etharp_cleanup_netif>
    nd6_cleanup_netif(netif);
#endif /* LWIP_IPV6 */

    NETIF_STATUS_CALLBACK(netif);
  }
}
 80070f0:	bf00      	nop
 80070f2:	3708      	adds	r7, #8
 80070f4:	46bd      	mov	sp, r7
 80070f6:	bd80      	pop	{r7, pc}

080070f8 <netif_set_link_up>:
 * @ingroup netif
 * Called by a driver when its link goes up
 */
void
netif_set_link_up(struct netif *netif)
{
 80070f8:	b580      	push	{r7, lr}
 80070fa:	b082      	sub	sp, #8
 80070fc:	af00      	add	r7, sp, #0
 80070fe:	6078      	str	r0, [r7, #4]
  if (!(netif->flags & NETIF_FLAG_LINK_UP)) {
 8007100:	687b      	ldr	r3, [r7, #4]
 8007102:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 8007106:	f003 0304 	and.w	r3, r3, #4
 800710a:	2b00      	cmp	r3, #0
 800710c:	d11b      	bne.n	8007146 <netif_set_link_up+0x4e>
    netif->flags |= NETIF_FLAG_LINK_UP;
 800710e:	687b      	ldr	r3, [r7, #4]
 8007110:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 8007114:	f043 0304 	orr.w	r3, r3, #4
 8007118:	b2da      	uxtb	r2, r3
 800711a:	687b      	ldr	r3, [r7, #4]
 800711c:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f

#if LWIP_AUTOIP
    autoip_network_changed(netif);
#endif /* LWIP_AUTOIP */

    if (netif->flags & NETIF_FLAG_UP) {
 8007120:	687b      	ldr	r3, [r7, #4]
 8007122:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 8007126:	f003 0301 	and.w	r3, r3, #1
 800712a:	2b00      	cmp	r3, #0
 800712c:	d003      	beq.n	8007136 <netif_set_link_up+0x3e>
      netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4|NETIF_REPORT_TYPE_IPV6);
 800712e:	2103      	movs	r1, #3
 8007130:	6878      	ldr	r0, [r7, #4]
 8007132:	f7ff ff9e 	bl	8007072 <netif_issue_reports>
    }
    NETIF_LINK_CALLBACK(netif);
 8007136:	687b      	ldr	r3, [r7, #4]
 8007138:	69db      	ldr	r3, [r3, #28]
 800713a:	2b00      	cmp	r3, #0
 800713c:	d003      	beq.n	8007146 <netif_set_link_up+0x4e>
 800713e:	687b      	ldr	r3, [r7, #4]
 8007140:	69db      	ldr	r3, [r3, #28]
 8007142:	6878      	ldr	r0, [r7, #4]
 8007144:	4798      	blx	r3
  }
}
 8007146:	bf00      	nop
 8007148:	3708      	adds	r7, #8
 800714a:	46bd      	mov	sp, r7
 800714c:	bd80      	pop	{r7, pc}

0800714e <netif_set_link_down>:
 * @ingroup netif
 * Called by a driver when its link goes down
 */
void
netif_set_link_down(struct netif *netif )
{
 800714e:	b580      	push	{r7, lr}
 8007150:	b082      	sub	sp, #8
 8007152:	af00      	add	r7, sp, #0
 8007154:	6078      	str	r0, [r7, #4]
  if (netif->flags & NETIF_FLAG_LINK_UP) {
 8007156:	687b      	ldr	r3, [r7, #4]
 8007158:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 800715c:	f003 0304 	and.w	r3, r3, #4
 8007160:	2b00      	cmp	r3, #0
 8007162:	d010      	beq.n	8007186 <netif_set_link_down+0x38>
    netif->flags &= ~NETIF_FLAG_LINK_UP;
 8007164:	687b      	ldr	r3, [r7, #4]
 8007166:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 800716a:	f023 0304 	bic.w	r3, r3, #4
 800716e:	b2da      	uxtb	r2, r3
 8007170:	687b      	ldr	r3, [r7, #4]
 8007172:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
    NETIF_LINK_CALLBACK(netif);
 8007176:	687b      	ldr	r3, [r7, #4]
 8007178:	69db      	ldr	r3, [r3, #28]
 800717a:	2b00      	cmp	r3, #0
 800717c:	d003      	beq.n	8007186 <netif_set_link_down+0x38>
 800717e:	687b      	ldr	r3, [r7, #4]
 8007180:	69db      	ldr	r3, [r3, #28]
 8007182:	6878      	ldr	r0, [r7, #4]
 8007184:	4798      	blx	r3
  }
}
 8007186:	bf00      	nop
 8007188:	3708      	adds	r7, #8
 800718a:	46bd      	mov	sp, r7
 800718c:	bd80      	pop	{r7, pc}
	...

08007190 <pbuf_free_ooseq>:
#if !NO_SYS
static
#endif /* !NO_SYS */
void
pbuf_free_ooseq(void)
{
 8007190:	b580      	push	{r7, lr}
 8007192:	b082      	sub	sp, #8
 8007194:	af00      	add	r7, sp, #0
  struct tcp_pcb* pcb;
  SYS_ARCH_SET(pbuf_free_ooseq_pending, 0);
 8007196:	f008 f841 	bl	800f21c <sys_arch_protect>
 800719a:	6038      	str	r0, [r7, #0]
 800719c:	4b0f      	ldr	r3, [pc, #60]	; (80071dc <pbuf_free_ooseq+0x4c>)
 800719e:	2200      	movs	r2, #0
 80071a0:	701a      	strb	r2, [r3, #0]
 80071a2:	6838      	ldr	r0, [r7, #0]
 80071a4:	f008 f848 	bl	800f238 <sys_arch_unprotect>

  for (pcb = tcp_active_pcbs; NULL != pcb; pcb = pcb->next) {
 80071a8:	4b0d      	ldr	r3, [pc, #52]	; (80071e0 <pbuf_free_ooseq+0x50>)
 80071aa:	681b      	ldr	r3, [r3, #0]
 80071ac:	607b      	str	r3, [r7, #4]
 80071ae:	e00f      	b.n	80071d0 <pbuf_free_ooseq+0x40>
    if (NULL != pcb->ooseq) {
 80071b0:	687b      	ldr	r3, [r7, #4]
 80071b2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80071b4:	2b00      	cmp	r3, #0
 80071b6:	d008      	beq.n	80071ca <pbuf_free_ooseq+0x3a>
      /** Free the ooseq pbufs of one PCB only */
      LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free_ooseq: freeing out-of-sequence pbufs\n"));
      tcp_segs_free(pcb->ooseq);
 80071b8:	687b      	ldr	r3, [r7, #4]
 80071ba:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80071bc:	4618      	mov	r0, r3
 80071be:	f001 fcfd 	bl	8008bbc <tcp_segs_free>
      pcb->ooseq = NULL;
 80071c2:	687b      	ldr	r3, [r7, #4]
 80071c4:	2200      	movs	r2, #0
 80071c6:	671a      	str	r2, [r3, #112]	; 0x70
      return;
 80071c8:	e005      	b.n	80071d6 <pbuf_free_ooseq+0x46>
  for (pcb = tcp_active_pcbs; NULL != pcb; pcb = pcb->next) {
 80071ca:	687b      	ldr	r3, [r7, #4]
 80071cc:	68db      	ldr	r3, [r3, #12]
 80071ce:	607b      	str	r3, [r7, #4]
 80071d0:	687b      	ldr	r3, [r7, #4]
 80071d2:	2b00      	cmp	r3, #0
 80071d4:	d1ec      	bne.n	80071b0 <pbuf_free_ooseq+0x20>
    }
  }
}
 80071d6:	3708      	adds	r7, #8
 80071d8:	46bd      	mov	sp, r7
 80071da:	bd80      	pop	{r7, pc}
 80071dc:	2400acd0 	.word	0x2400acd0
 80071e0:	2400acd8 	.word	0x2400acd8

080071e4 <pbuf_free_ooseq_callback>:
/**
 * Just a callback function for tcpip_callback() that calls pbuf_free_ooseq().
 */
static void
pbuf_free_ooseq_callback(void *arg)
{
 80071e4:	b580      	push	{r7, lr}
 80071e6:	b082      	sub	sp, #8
 80071e8:	af00      	add	r7, sp, #0
 80071ea:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(arg);
  pbuf_free_ooseq();
 80071ec:	f7ff ffd0 	bl	8007190 <pbuf_free_ooseq>
}
 80071f0:	bf00      	nop
 80071f2:	3708      	adds	r7, #8
 80071f4:	46bd      	mov	sp, r7
 80071f6:	bd80      	pop	{r7, pc}

080071f8 <pbuf_pool_is_empty>:
#endif /* !NO_SYS */

/** Queue a call to pbuf_free_ooseq if not already queued. */
static void
pbuf_pool_is_empty(void)
{
 80071f8:	b580      	push	{r7, lr}
 80071fa:	b082      	sub	sp, #8
 80071fc:	af00      	add	r7, sp, #0
#ifndef PBUF_POOL_FREE_OOSEQ_QUEUE_CALL
  SYS_ARCH_SET(pbuf_free_ooseq_pending, 1);
#else /* PBUF_POOL_FREE_OOSEQ_QUEUE_CALL */
  u8_t queued;
  SYS_ARCH_DECL_PROTECT(old_level);
  SYS_ARCH_PROTECT(old_level);
 80071fe:	f008 f80d 	bl	800f21c <sys_arch_protect>
 8007202:	6078      	str	r0, [r7, #4]
  queued = pbuf_free_ooseq_pending;
 8007204:	4b10      	ldr	r3, [pc, #64]	; (8007248 <pbuf_pool_is_empty+0x50>)
 8007206:	781b      	ldrb	r3, [r3, #0]
 8007208:	70fb      	strb	r3, [r7, #3]
  pbuf_free_ooseq_pending = 1;
 800720a:	4b0f      	ldr	r3, [pc, #60]	; (8007248 <pbuf_pool_is_empty+0x50>)
 800720c:	2201      	movs	r2, #1
 800720e:	701a      	strb	r2, [r3, #0]
  SYS_ARCH_UNPROTECT(old_level);
 8007210:	6878      	ldr	r0, [r7, #4]
 8007212:	f008 f811 	bl	800f238 <sys_arch_unprotect>

  if (!queued) {
 8007216:	78fb      	ldrb	r3, [r7, #3]
 8007218:	2b00      	cmp	r3, #0
 800721a:	d110      	bne.n	800723e <pbuf_pool_is_empty+0x46>
    /* queue a call to pbuf_free_ooseq if not already queued */
    PBUF_POOL_FREE_OOSEQ_QUEUE_CALL();
 800721c:	2200      	movs	r2, #0
 800721e:	2100      	movs	r1, #0
 8007220:	480a      	ldr	r0, [pc, #40]	; (800724c <pbuf_pool_is_empty+0x54>)
 8007222:	f7ff f8c7 	bl	80063b4 <tcpip_callback_with_block>
 8007226:	4603      	mov	r3, r0
 8007228:	2b00      	cmp	r3, #0
 800722a:	d008      	beq.n	800723e <pbuf_pool_is_empty+0x46>
 800722c:	f007 fff6 	bl	800f21c <sys_arch_protect>
 8007230:	6078      	str	r0, [r7, #4]
 8007232:	4b05      	ldr	r3, [pc, #20]	; (8007248 <pbuf_pool_is_empty+0x50>)
 8007234:	2200      	movs	r2, #0
 8007236:	701a      	strb	r2, [r3, #0]
 8007238:	6878      	ldr	r0, [r7, #4]
 800723a:	f007 fffd 	bl	800f238 <sys_arch_unprotect>
  }
#endif /* PBUF_POOL_FREE_OOSEQ_QUEUE_CALL */
}
 800723e:	bf00      	nop
 8007240:	3708      	adds	r7, #8
 8007242:	46bd      	mov	sp, r7
 8007244:	bd80      	pop	{r7, pc}
 8007246:	bf00      	nop
 8007248:	2400acd0 	.word	0x2400acd0
 800724c:	080071e5 	.word	0x080071e5

08007250 <pbuf_alloc>:
 * @return the allocated pbuf. If multiple pbufs where allocated, this
 * is the first pbuf of a pbuf chain.
 */
struct pbuf *
pbuf_alloc(pbuf_layer layer, u16_t length, pbuf_type type)
{
 8007250:	b580      	push	{r7, lr}
 8007252:	b088      	sub	sp, #32
 8007254:	af00      	add	r7, sp, #0
 8007256:	4603      	mov	r3, r0
 8007258:	71fb      	strb	r3, [r7, #7]
 800725a:	460b      	mov	r3, r1
 800725c:	80bb      	strh	r3, [r7, #4]
 800725e:	4613      	mov	r3, r2
 8007260:	71bb      	strb	r3, [r7, #6]
  u16_t offset;
  s32_t rem_len; /* remaining length */
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc(length=%"U16_F")\n", length));

  /* determine header offset */
  switch (layer) {
 8007262:	79fb      	ldrb	r3, [r7, #7]
 8007264:	2b04      	cmp	r3, #4
 8007266:	d81c      	bhi.n	80072a2 <pbuf_alloc+0x52>
 8007268:	a201      	add	r2, pc, #4	; (adr r2, 8007270 <pbuf_alloc+0x20>)
 800726a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800726e:	bf00      	nop
 8007270:	08007285 	.word	0x08007285
 8007274:	0800728b 	.word	0x0800728b
 8007278:	08007291 	.word	0x08007291
 800727c:	08007297 	.word	0x08007297
 8007280:	0800729d 	.word	0x0800729d
  case PBUF_TRANSPORT:
    /* add room for transport (often TCP) layer header */
    offset = PBUF_LINK_ENCAPSULATION_HLEN + PBUF_LINK_HLEN + PBUF_IP_HLEN + PBUF_TRANSPORT_HLEN;
 8007284:	2336      	movs	r3, #54	; 0x36
 8007286:	82fb      	strh	r3, [r7, #22]
    break;
 8007288:	e014      	b.n	80072b4 <pbuf_alloc+0x64>
  case PBUF_IP:
    /* add room for IP layer header */
    offset = PBUF_LINK_ENCAPSULATION_HLEN + PBUF_LINK_HLEN + PBUF_IP_HLEN;
 800728a:	2322      	movs	r3, #34	; 0x22
 800728c:	82fb      	strh	r3, [r7, #22]
    break;
 800728e:	e011      	b.n	80072b4 <pbuf_alloc+0x64>
  case PBUF_LINK:
    /* add room for link layer header */
    offset = PBUF_LINK_ENCAPSULATION_HLEN + PBUF_LINK_HLEN;
 8007290:	230e      	movs	r3, #14
 8007292:	82fb      	strh	r3, [r7, #22]
    break;
 8007294:	e00e      	b.n	80072b4 <pbuf_alloc+0x64>
  case PBUF_RAW_TX:
    /* add room for encapsulating link layer headers (e.g. 802.11) */
    offset = PBUF_LINK_ENCAPSULATION_HLEN;
 8007296:	2300      	movs	r3, #0
 8007298:	82fb      	strh	r3, [r7, #22]
    break;
 800729a:	e00b      	b.n	80072b4 <pbuf_alloc+0x64>
  case PBUF_RAW:
    /* no offset (e.g. RX buffers or chain successors) */
    offset = 0;
 800729c:	2300      	movs	r3, #0
 800729e:	82fb      	strh	r3, [r7, #22]
    break;
 80072a0:	e008      	b.n	80072b4 <pbuf_alloc+0x64>
  default:
    LWIP_ASSERT("pbuf_alloc: bad pbuf layer", 0);
 80072a2:	4ba5      	ldr	r3, [pc, #660]	; (8007538 <pbuf_alloc+0x2e8>)
 80072a4:	f44f 728b 	mov.w	r2, #278	; 0x116
 80072a8:	49a4      	ldr	r1, [pc, #656]	; (800753c <pbuf_alloc+0x2ec>)
 80072aa:	48a5      	ldr	r0, [pc, #660]	; (8007540 <pbuf_alloc+0x2f0>)
 80072ac:	f009 f940 	bl	8010530 <iprintf>
    return NULL;
 80072b0:	2300      	movs	r3, #0
 80072b2:	e15d      	b.n	8007570 <pbuf_alloc+0x320>
  }

  switch (type) {
 80072b4:	79bb      	ldrb	r3, [r7, #6]
 80072b6:	2b03      	cmp	r3, #3
 80072b8:	f200 8134 	bhi.w	8007524 <pbuf_alloc+0x2d4>
 80072bc:	a201      	add	r2, pc, #4	; (adr r2, 80072c4 <pbuf_alloc+0x74>)
 80072be:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80072c2:	bf00      	nop
 80072c4:	08007465 	.word	0x08007465
 80072c8:	080074f1 	.word	0x080074f1
 80072cc:	080074f1 	.word	0x080074f1
 80072d0:	080072d5 	.word	0x080072d5
  case PBUF_POOL:
    /* allocate head of pbuf chain into p */
    p = (struct pbuf *)memp_malloc(MEMP_PBUF_POOL);
 80072d4:	200c      	movs	r0, #12
 80072d6:	f7ff fd0d 	bl	8006cf4 <memp_malloc>
 80072da:	61f8      	str	r0, [r7, #28]
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc: allocated pbuf %p\n", (void *)p));
    if (p == NULL) {
 80072dc:	69fb      	ldr	r3, [r7, #28]
 80072de:	2b00      	cmp	r3, #0
 80072e0:	d103      	bne.n	80072ea <pbuf_alloc+0x9a>
      PBUF_POOL_IS_EMPTY();
 80072e2:	f7ff ff89 	bl	80071f8 <pbuf_pool_is_empty>
      return NULL;
 80072e6:	2300      	movs	r3, #0
 80072e8:	e142      	b.n	8007570 <pbuf_alloc+0x320>
    }
    p->type = type;
 80072ea:	69fb      	ldr	r3, [r7, #28]
 80072ec:	79ba      	ldrb	r2, [r7, #6]
 80072ee:	731a      	strb	r2, [r3, #12]
    p->next = NULL;
 80072f0:	69fb      	ldr	r3, [r7, #28]
 80072f2:	2200      	movs	r2, #0
 80072f4:	601a      	str	r2, [r3, #0]

    /* make the payload pointer point 'offset' bytes into pbuf data memory */
    p->payload = LWIP_MEM_ALIGN((void *)((u8_t *)p + (SIZEOF_STRUCT_PBUF + offset)));
 80072f6:	8afb      	ldrh	r3, [r7, #22]
 80072f8:	3310      	adds	r3, #16
 80072fa:	69fa      	ldr	r2, [r7, #28]
 80072fc:	4413      	add	r3, r2
 80072fe:	3303      	adds	r3, #3
 8007300:	f023 0303 	bic.w	r3, r3, #3
 8007304:	461a      	mov	r2, r3
 8007306:	69fb      	ldr	r3, [r7, #28]
 8007308:	605a      	str	r2, [r3, #4]
    LWIP_ASSERT("pbuf_alloc: pbuf p->payload properly aligned",
 800730a:	69fb      	ldr	r3, [r7, #28]
 800730c:	685b      	ldr	r3, [r3, #4]
 800730e:	f003 0303 	and.w	r3, r3, #3
 8007312:	2b00      	cmp	r3, #0
 8007314:	d006      	beq.n	8007324 <pbuf_alloc+0xd4>
 8007316:	4b88      	ldr	r3, [pc, #544]	; (8007538 <pbuf_alloc+0x2e8>)
 8007318:	f240 1229 	movw	r2, #297	; 0x129
 800731c:	4989      	ldr	r1, [pc, #548]	; (8007544 <pbuf_alloc+0x2f4>)
 800731e:	4888      	ldr	r0, [pc, #544]	; (8007540 <pbuf_alloc+0x2f0>)
 8007320:	f009 f906 	bl	8010530 <iprintf>
            ((mem_ptr_t)p->payload % MEM_ALIGNMENT) == 0);
    /* the total length of the pbuf chain is the requested size */
    p->tot_len = length;
 8007324:	69fb      	ldr	r3, [r7, #28]
 8007326:	88ba      	ldrh	r2, [r7, #4]
 8007328:	811a      	strh	r2, [r3, #8]
    /* set the length of the first pbuf in the chain */
    p->len = LWIP_MIN(length, PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset));
 800732a:	8afb      	ldrh	r3, [r7, #22]
 800732c:	3303      	adds	r3, #3
 800732e:	f023 0303 	bic.w	r3, r3, #3
 8007332:	f5c3 62bf 	rsb	r2, r3, #1528	; 0x5f8
 8007336:	88bb      	ldrh	r3, [r7, #4]
 8007338:	4293      	cmp	r3, r2
 800733a:	bf28      	it	cs
 800733c:	4613      	movcs	r3, r2
 800733e:	b29a      	uxth	r2, r3
 8007340:	69fb      	ldr	r3, [r7, #28]
 8007342:	815a      	strh	r2, [r3, #10]
    LWIP_ASSERT("check p->payload + p->len does not overflow pbuf",
 8007344:	69fb      	ldr	r3, [r7, #28]
 8007346:	685b      	ldr	r3, [r3, #4]
 8007348:	69fa      	ldr	r2, [r7, #28]
 800734a:	8952      	ldrh	r2, [r2, #10]
 800734c:	441a      	add	r2, r3
 800734e:	69fb      	ldr	r3, [r7, #28]
 8007350:	f503 63c1 	add.w	r3, r3, #1544	; 0x608
 8007354:	429a      	cmp	r2, r3
 8007356:	d906      	bls.n	8007366 <pbuf_alloc+0x116>
 8007358:	4b77      	ldr	r3, [pc, #476]	; (8007538 <pbuf_alloc+0x2e8>)
 800735a:	f44f 7298 	mov.w	r2, #304	; 0x130
 800735e:	497a      	ldr	r1, [pc, #488]	; (8007548 <pbuf_alloc+0x2f8>)
 8007360:	4877      	ldr	r0, [pc, #476]	; (8007540 <pbuf_alloc+0x2f0>)
 8007362:	f009 f8e5 	bl	8010530 <iprintf>
                ((u8_t*)p->payload + p->len <=
                 (u8_t*)p + SIZEOF_STRUCT_PBUF + PBUF_POOL_BUFSIZE_ALIGNED));
    LWIP_ASSERT("PBUF_POOL_BUFSIZE must be bigger than MEM_ALIGNMENT",
 8007366:	8afb      	ldrh	r3, [r7, #22]
 8007368:	3303      	adds	r3, #3
 800736a:	f023 0303 	bic.w	r3, r3, #3
 800736e:	f5b3 6fbf 	cmp.w	r3, #1528	; 0x5f8
 8007372:	d106      	bne.n	8007382 <pbuf_alloc+0x132>
 8007374:	4b70      	ldr	r3, [pc, #448]	; (8007538 <pbuf_alloc+0x2e8>)
 8007376:	f44f 7299 	mov.w	r2, #306	; 0x132
 800737a:	4974      	ldr	r1, [pc, #464]	; (800754c <pbuf_alloc+0x2fc>)
 800737c:	4870      	ldr	r0, [pc, #448]	; (8007540 <pbuf_alloc+0x2f0>)
 800737e:	f009 f8d7 	bl	8010530 <iprintf>
      (PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)) > 0 );
    /* set reference count (needed here in case we fail) */
    p->ref = 1;
 8007382:	69fb      	ldr	r3, [r7, #28]
 8007384:	2201      	movs	r2, #1
 8007386:	81da      	strh	r2, [r3, #14]

    /* now allocate the tail of the pbuf chain */

    /* remember first pbuf for linkage in next iteration */
    r = p;
 8007388:	69fb      	ldr	r3, [r7, #28]
 800738a:	61bb      	str	r3, [r7, #24]
    /* remaining length to be allocated */
    rem_len = length - p->len;
 800738c:	88bb      	ldrh	r3, [r7, #4]
 800738e:	69fa      	ldr	r2, [r7, #28]
 8007390:	8952      	ldrh	r2, [r2, #10]
 8007392:	1a9b      	subs	r3, r3, r2
 8007394:	613b      	str	r3, [r7, #16]
    /* any remaining pbufs to be allocated? */
    while (rem_len > 0) {
 8007396:	e061      	b.n	800745c <pbuf_alloc+0x20c>
      q = (struct pbuf *)memp_malloc(MEMP_PBUF_POOL);
 8007398:	200c      	movs	r0, #12
 800739a:	f7ff fcab 	bl	8006cf4 <memp_malloc>
 800739e:	60f8      	str	r0, [r7, #12]
      if (q == NULL) {
 80073a0:	68fb      	ldr	r3, [r7, #12]
 80073a2:	2b00      	cmp	r3, #0
 80073a4:	d106      	bne.n	80073b4 <pbuf_alloc+0x164>
        PBUF_POOL_IS_EMPTY();
 80073a6:	f7ff ff27 	bl	80071f8 <pbuf_pool_is_empty>
        /* free chain so far allocated */
        pbuf_free(p);
 80073aa:	69f8      	ldr	r0, [r7, #28]
 80073ac:	f000 fac2 	bl	8007934 <pbuf_free>
        /* bail out unsuccessfully */
        return NULL;
 80073b0:	2300      	movs	r3, #0
 80073b2:	e0dd      	b.n	8007570 <pbuf_alloc+0x320>
      }
      q->type = type;
 80073b4:	68fb      	ldr	r3, [r7, #12]
 80073b6:	79ba      	ldrb	r2, [r7, #6]
 80073b8:	731a      	strb	r2, [r3, #12]
      q->flags = 0;
 80073ba:	68fb      	ldr	r3, [r7, #12]
 80073bc:	2200      	movs	r2, #0
 80073be:	735a      	strb	r2, [r3, #13]
      q->next = NULL;
 80073c0:	68fb      	ldr	r3, [r7, #12]
 80073c2:	2200      	movs	r2, #0
 80073c4:	601a      	str	r2, [r3, #0]
      /* make previous pbuf point to this pbuf */
      r->next = q;
 80073c6:	69bb      	ldr	r3, [r7, #24]
 80073c8:	68fa      	ldr	r2, [r7, #12]
 80073ca:	601a      	str	r2, [r3, #0]
      /* set total length of this pbuf and next in chain */
      LWIP_ASSERT("rem_len < max_u16_t", rem_len < 0xffff);
 80073cc:	693b      	ldr	r3, [r7, #16]
 80073ce:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 80073d2:	4293      	cmp	r3, r2
 80073d4:	dd06      	ble.n	80073e4 <pbuf_alloc+0x194>
 80073d6:	4b58      	ldr	r3, [pc, #352]	; (8007538 <pbuf_alloc+0x2e8>)
 80073d8:	f44f 72a6 	mov.w	r2, #332	; 0x14c
 80073dc:	495c      	ldr	r1, [pc, #368]	; (8007550 <pbuf_alloc+0x300>)
 80073de:	4858      	ldr	r0, [pc, #352]	; (8007540 <pbuf_alloc+0x2f0>)
 80073e0:	f009 f8a6 	bl	8010530 <iprintf>
      q->tot_len = (u16_t)rem_len;
 80073e4:	693b      	ldr	r3, [r7, #16]
 80073e6:	b29a      	uxth	r2, r3
 80073e8:	68fb      	ldr	r3, [r7, #12]
 80073ea:	811a      	strh	r2, [r3, #8]
      /* this pbuf length is pool size, unless smaller sized tail */
      q->len = LWIP_MIN((u16_t)rem_len, PBUF_POOL_BUFSIZE_ALIGNED);
 80073ec:	693b      	ldr	r3, [r7, #16]
 80073ee:	b29b      	uxth	r3, r3
 80073f0:	f5b3 6fbf 	cmp.w	r3, #1528	; 0x5f8
 80073f4:	bf28      	it	cs
 80073f6:	f44f 63bf 	movcs.w	r3, #1528	; 0x5f8
 80073fa:	b29a      	uxth	r2, r3
 80073fc:	68fb      	ldr	r3, [r7, #12]
 80073fe:	815a      	strh	r2, [r3, #10]
      q->payload = (void *)((u8_t *)q + SIZEOF_STRUCT_PBUF);
 8007400:	68fb      	ldr	r3, [r7, #12]
 8007402:	f103 0210 	add.w	r2, r3, #16
 8007406:	68fb      	ldr	r3, [r7, #12]
 8007408:	605a      	str	r2, [r3, #4]
      LWIP_ASSERT("pbuf_alloc: pbuf q->payload properly aligned",
 800740a:	68fb      	ldr	r3, [r7, #12]
 800740c:	685b      	ldr	r3, [r3, #4]
 800740e:	f003 0303 	and.w	r3, r3, #3
 8007412:	2b00      	cmp	r3, #0
 8007414:	d006      	beq.n	8007424 <pbuf_alloc+0x1d4>
 8007416:	4b48      	ldr	r3, [pc, #288]	; (8007538 <pbuf_alloc+0x2e8>)
 8007418:	f44f 72a9 	mov.w	r2, #338	; 0x152
 800741c:	494d      	ldr	r1, [pc, #308]	; (8007554 <pbuf_alloc+0x304>)
 800741e:	4848      	ldr	r0, [pc, #288]	; (8007540 <pbuf_alloc+0x2f0>)
 8007420:	f009 f886 	bl	8010530 <iprintf>
              ((mem_ptr_t)q->payload % MEM_ALIGNMENT) == 0);
      LWIP_ASSERT("check p->payload + p->len does not overflow pbuf",
 8007424:	69fb      	ldr	r3, [r7, #28]
 8007426:	685b      	ldr	r3, [r3, #4]
 8007428:	69fa      	ldr	r2, [r7, #28]
 800742a:	8952      	ldrh	r2, [r2, #10]
 800742c:	441a      	add	r2, r3
 800742e:	69fb      	ldr	r3, [r7, #28]
 8007430:	f503 63c1 	add.w	r3, r3, #1544	; 0x608
 8007434:	429a      	cmp	r2, r3
 8007436:	d906      	bls.n	8007446 <pbuf_alloc+0x1f6>
 8007438:	4b3f      	ldr	r3, [pc, #252]	; (8007538 <pbuf_alloc+0x2e8>)
 800743a:	f240 1255 	movw	r2, #341	; 0x155
 800743e:	4942      	ldr	r1, [pc, #264]	; (8007548 <pbuf_alloc+0x2f8>)
 8007440:	483f      	ldr	r0, [pc, #252]	; (8007540 <pbuf_alloc+0x2f0>)
 8007442:	f009 f875 	bl	8010530 <iprintf>
                  ((u8_t*)p->payload + p->len <=
                   (u8_t*)p + SIZEOF_STRUCT_PBUF + PBUF_POOL_BUFSIZE_ALIGNED));
      q->ref = 1;
 8007446:	68fb      	ldr	r3, [r7, #12]
 8007448:	2201      	movs	r2, #1
 800744a:	81da      	strh	r2, [r3, #14]
      /* calculate remaining length to be allocated */
      rem_len -= q->len;
 800744c:	68fb      	ldr	r3, [r7, #12]
 800744e:	895b      	ldrh	r3, [r3, #10]
 8007450:	461a      	mov	r2, r3
 8007452:	693b      	ldr	r3, [r7, #16]
 8007454:	1a9b      	subs	r3, r3, r2
 8007456:	613b      	str	r3, [r7, #16]
      /* remember this pbuf for linkage in next iteration */
      r = q;
 8007458:	68fb      	ldr	r3, [r7, #12]
 800745a:	61bb      	str	r3, [r7, #24]
    while (rem_len > 0) {
 800745c:	693b      	ldr	r3, [r7, #16]
 800745e:	2b00      	cmp	r3, #0
 8007460:	dc9a      	bgt.n	8007398 <pbuf_alloc+0x148>
    }
    /* end of chain */
    /*r->next = NULL;*/

    break;
 8007462:	e07e      	b.n	8007562 <pbuf_alloc+0x312>
  case PBUF_RAM:
    {
      mem_size_t alloc_len = LWIP_MEM_ALIGN_SIZE(SIZEOF_STRUCT_PBUF + offset) + LWIP_MEM_ALIGN_SIZE(length);
 8007464:	8afb      	ldrh	r3, [r7, #22]
 8007466:	3313      	adds	r3, #19
 8007468:	b29b      	uxth	r3, r3
 800746a:	f023 0303 	bic.w	r3, r3, #3
 800746e:	b29a      	uxth	r2, r3
 8007470:	88bb      	ldrh	r3, [r7, #4]
 8007472:	3303      	adds	r3, #3
 8007474:	b29b      	uxth	r3, r3
 8007476:	f023 0303 	bic.w	r3, r3, #3
 800747a:	b29b      	uxth	r3, r3
 800747c:	4413      	add	r3, r2
 800747e:	817b      	strh	r3, [r7, #10]
      
      /* bug #50040: Check for integer overflow when calculating alloc_len */
      if (alloc_len < LWIP_MEM_ALIGN_SIZE(length)) {
 8007480:	897a      	ldrh	r2, [r7, #10]
 8007482:	88bb      	ldrh	r3, [r7, #4]
 8007484:	3303      	adds	r3, #3
 8007486:	f023 0303 	bic.w	r3, r3, #3
 800748a:	429a      	cmp	r2, r3
 800748c:	d201      	bcs.n	8007492 <pbuf_alloc+0x242>
        return NULL;
 800748e:	2300      	movs	r3, #0
 8007490:	e06e      	b.n	8007570 <pbuf_alloc+0x320>
      }
    
      /* If pbuf is to be allocated in RAM, allocate memory for it. */
      p = (struct pbuf*)mem_malloc(alloc_len);
 8007492:	897b      	ldrh	r3, [r7, #10]
 8007494:	4618      	mov	r0, r3
 8007496:	f7ff fa9b 	bl	80069d0 <mem_malloc>
 800749a:	61f8      	str	r0, [r7, #28]
    }

    if (p == NULL) {
 800749c:	69fb      	ldr	r3, [r7, #28]
 800749e:	2b00      	cmp	r3, #0
 80074a0:	d101      	bne.n	80074a6 <pbuf_alloc+0x256>
      return NULL;
 80074a2:	2300      	movs	r3, #0
 80074a4:	e064      	b.n	8007570 <pbuf_alloc+0x320>
    }
    /* Set up internal structure of the pbuf. */
    p->payload = LWIP_MEM_ALIGN((void *)((u8_t *)p + SIZEOF_STRUCT_PBUF + offset));
 80074a6:	8afb      	ldrh	r3, [r7, #22]
 80074a8:	3310      	adds	r3, #16
 80074aa:	69fa      	ldr	r2, [r7, #28]
 80074ac:	4413      	add	r3, r2
 80074ae:	3303      	adds	r3, #3
 80074b0:	f023 0303 	bic.w	r3, r3, #3
 80074b4:	461a      	mov	r2, r3
 80074b6:	69fb      	ldr	r3, [r7, #28]
 80074b8:	605a      	str	r2, [r3, #4]
    p->len = p->tot_len = length;
 80074ba:	69fb      	ldr	r3, [r7, #28]
 80074bc:	88ba      	ldrh	r2, [r7, #4]
 80074be:	811a      	strh	r2, [r3, #8]
 80074c0:	69fb      	ldr	r3, [r7, #28]
 80074c2:	891a      	ldrh	r2, [r3, #8]
 80074c4:	69fb      	ldr	r3, [r7, #28]
 80074c6:	815a      	strh	r2, [r3, #10]
    p->next = NULL;
 80074c8:	69fb      	ldr	r3, [r7, #28]
 80074ca:	2200      	movs	r2, #0
 80074cc:	601a      	str	r2, [r3, #0]
    p->type = type;
 80074ce:	69fb      	ldr	r3, [r7, #28]
 80074d0:	79ba      	ldrb	r2, [r7, #6]
 80074d2:	731a      	strb	r2, [r3, #12]

    LWIP_ASSERT("pbuf_alloc: pbuf->payload properly aligned",
 80074d4:	69fb      	ldr	r3, [r7, #28]
 80074d6:	685b      	ldr	r3, [r3, #4]
 80074d8:	f003 0303 	and.w	r3, r3, #3
 80074dc:	2b00      	cmp	r3, #0
 80074de:	d03f      	beq.n	8007560 <pbuf_alloc+0x310>
 80074e0:	4b15      	ldr	r3, [pc, #84]	; (8007538 <pbuf_alloc+0x2e8>)
 80074e2:	f240 1277 	movw	r2, #375	; 0x177
 80074e6:	491c      	ldr	r1, [pc, #112]	; (8007558 <pbuf_alloc+0x308>)
 80074e8:	4815      	ldr	r0, [pc, #84]	; (8007540 <pbuf_alloc+0x2f0>)
 80074ea:	f009 f821 	bl	8010530 <iprintf>
           ((mem_ptr_t)p->payload % MEM_ALIGNMENT) == 0);
    break;
 80074ee:	e037      	b.n	8007560 <pbuf_alloc+0x310>
  /* pbuf references existing (non-volatile static constant) ROM payload? */
  case PBUF_ROM:
  /* pbuf references existing (externally allocated) RAM payload? */
  case PBUF_REF:
    /* only allocate memory for the pbuf structure */
    p = (struct pbuf *)memp_malloc(MEMP_PBUF);
 80074f0:	200b      	movs	r0, #11
 80074f2:	f7ff fbff 	bl	8006cf4 <memp_malloc>
 80074f6:	61f8      	str	r0, [r7, #28]
    if (p == NULL) {
 80074f8:	69fb      	ldr	r3, [r7, #28]
 80074fa:	2b00      	cmp	r3, #0
 80074fc:	d101      	bne.n	8007502 <pbuf_alloc+0x2b2>
      LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                  ("pbuf_alloc: Could not allocate MEMP_PBUF for PBUF_%s.\n",
                  (type == PBUF_ROM) ? "ROM" : "REF"));
      return NULL;
 80074fe:	2300      	movs	r3, #0
 8007500:	e036      	b.n	8007570 <pbuf_alloc+0x320>
    }
    /* caller must set this field properly, afterwards */
    p->payload = NULL;
 8007502:	69fb      	ldr	r3, [r7, #28]
 8007504:	2200      	movs	r2, #0
 8007506:	605a      	str	r2, [r3, #4]
    p->len = p->tot_len = length;
 8007508:	69fb      	ldr	r3, [r7, #28]
 800750a:	88ba      	ldrh	r2, [r7, #4]
 800750c:	811a      	strh	r2, [r3, #8]
 800750e:	69fb      	ldr	r3, [r7, #28]
 8007510:	891a      	ldrh	r2, [r3, #8]
 8007512:	69fb      	ldr	r3, [r7, #28]
 8007514:	815a      	strh	r2, [r3, #10]
    p->next = NULL;
 8007516:	69fb      	ldr	r3, [r7, #28]
 8007518:	2200      	movs	r2, #0
 800751a:	601a      	str	r2, [r3, #0]
    p->type = type;
 800751c:	69fb      	ldr	r3, [r7, #28]
 800751e:	79ba      	ldrb	r2, [r7, #6]
 8007520:	731a      	strb	r2, [r3, #12]
    break;
 8007522:	e01e      	b.n	8007562 <pbuf_alloc+0x312>
  default:
    LWIP_ASSERT("pbuf_alloc: erroneous type", 0);
 8007524:	4b04      	ldr	r3, [pc, #16]	; (8007538 <pbuf_alloc+0x2e8>)
 8007526:	f44f 72c6 	mov.w	r2, #396	; 0x18c
 800752a:	490c      	ldr	r1, [pc, #48]	; (800755c <pbuf_alloc+0x30c>)
 800752c:	4804      	ldr	r0, [pc, #16]	; (8007540 <pbuf_alloc+0x2f0>)
 800752e:	f008 ffff 	bl	8010530 <iprintf>
    return NULL;
 8007532:	2300      	movs	r3, #0
 8007534:	e01c      	b.n	8007570 <pbuf_alloc+0x320>
 8007536:	bf00      	nop
 8007538:	08011770 	.word	0x08011770
 800753c:	080117a0 	.word	0x080117a0
 8007540:	080117bc 	.word	0x080117bc
 8007544:	080117e4 	.word	0x080117e4
 8007548:	08011814 	.word	0x08011814
 800754c:	08011848 	.word	0x08011848
 8007550:	0801187c 	.word	0x0801187c
 8007554:	08011890 	.word	0x08011890
 8007558:	080118c0 	.word	0x080118c0
 800755c:	080118ec 	.word	0x080118ec
    break;
 8007560:	bf00      	nop
  }
  /* set reference count */
  p->ref = 1;
 8007562:	69fb      	ldr	r3, [r7, #28]
 8007564:	2201      	movs	r2, #1
 8007566:	81da      	strh	r2, [r3, #14]
  /* set flags */
  p->flags = 0;
 8007568:	69fb      	ldr	r3, [r7, #28]
 800756a:	2200      	movs	r2, #0
 800756c:	735a      	strb	r2, [r3, #13]
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc(length=%"U16_F") == %p\n", length, (void *)p));
  return p;
 800756e:	69fb      	ldr	r3, [r7, #28]
}
 8007570:	4618      	mov	r0, r3
 8007572:	3720      	adds	r7, #32
 8007574:	46bd      	mov	sp, r7
 8007576:	bd80      	pop	{r7, pc}

08007578 <pbuf_alloced_custom>:
 *        big enough to hold 'length' plus the header size
 */
struct pbuf*
pbuf_alloced_custom(pbuf_layer l, u16_t length, pbuf_type type, struct pbuf_custom *p,
                    void *payload_mem, u16_t payload_mem_len)
{
 8007578:	b580      	push	{r7, lr}
 800757a:	b084      	sub	sp, #16
 800757c:	af00      	add	r7, sp, #0
 800757e:	603b      	str	r3, [r7, #0]
 8007580:	4603      	mov	r3, r0
 8007582:	71fb      	strb	r3, [r7, #7]
 8007584:	460b      	mov	r3, r1
 8007586:	80bb      	strh	r3, [r7, #4]
 8007588:	4613      	mov	r3, r2
 800758a:	71bb      	strb	r3, [r7, #6]
  u16_t offset;
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloced_custom(length=%"U16_F")\n", length));

  /* determine header offset */
  switch (l) {
 800758c:	79fb      	ldrb	r3, [r7, #7]
 800758e:	2b04      	cmp	r3, #4
 8007590:	d81b      	bhi.n	80075ca <pbuf_alloced_custom+0x52>
 8007592:	a201      	add	r2, pc, #4	; (adr r2, 8007598 <pbuf_alloced_custom+0x20>)
 8007594:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007598:	080075ad 	.word	0x080075ad
 800759c:	080075b3 	.word	0x080075b3
 80075a0:	080075b9 	.word	0x080075b9
 80075a4:	080075bf 	.word	0x080075bf
 80075a8:	080075c5 	.word	0x080075c5
  case PBUF_TRANSPORT:
    /* add room for transport (often TCP) layer header */
    offset = PBUF_LINK_ENCAPSULATION_HLEN + PBUF_LINK_HLEN + PBUF_IP_HLEN + PBUF_TRANSPORT_HLEN;
 80075ac:	2336      	movs	r3, #54	; 0x36
 80075ae:	81fb      	strh	r3, [r7, #14]
    break;
 80075b0:	e014      	b.n	80075dc <pbuf_alloced_custom+0x64>
  case PBUF_IP:
    /* add room for IP layer header */
    offset = PBUF_LINK_ENCAPSULATION_HLEN + PBUF_LINK_HLEN + PBUF_IP_HLEN;
 80075b2:	2322      	movs	r3, #34	; 0x22
 80075b4:	81fb      	strh	r3, [r7, #14]
    break;
 80075b6:	e011      	b.n	80075dc <pbuf_alloced_custom+0x64>
  case PBUF_LINK:
    /* add room for link layer header */
    offset = PBUF_LINK_ENCAPSULATION_HLEN + PBUF_LINK_HLEN;
 80075b8:	230e      	movs	r3, #14
 80075ba:	81fb      	strh	r3, [r7, #14]
    break;
 80075bc:	e00e      	b.n	80075dc <pbuf_alloced_custom+0x64>
  case PBUF_RAW_TX:
    /* add room for encapsulating link layer headers (e.g. 802.11) */
    offset = PBUF_LINK_ENCAPSULATION_HLEN;
 80075be:	2300      	movs	r3, #0
 80075c0:	81fb      	strh	r3, [r7, #14]
    break;
 80075c2:	e00b      	b.n	80075dc <pbuf_alloced_custom+0x64>
  case PBUF_RAW:
    offset = 0;
 80075c4:	2300      	movs	r3, #0
 80075c6:	81fb      	strh	r3, [r7, #14]
    break;
 80075c8:	e008      	b.n	80075dc <pbuf_alloced_custom+0x64>
  default:
    LWIP_ASSERT("pbuf_alloced_custom: bad pbuf layer", 0);
 80075ca:	4b1d      	ldr	r3, [pc, #116]	; (8007640 <pbuf_alloced_custom+0xc8>)
 80075cc:	f240 12c5 	movw	r2, #453	; 0x1c5
 80075d0:	491c      	ldr	r1, [pc, #112]	; (8007644 <pbuf_alloced_custom+0xcc>)
 80075d2:	481d      	ldr	r0, [pc, #116]	; (8007648 <pbuf_alloced_custom+0xd0>)
 80075d4:	f008 ffac 	bl	8010530 <iprintf>
    return NULL;
 80075d8:	2300      	movs	r3, #0
 80075da:	e02d      	b.n	8007638 <pbuf_alloced_custom+0xc0>
  }

  if (LWIP_MEM_ALIGN_SIZE(offset) + length > payload_mem_len) {
 80075dc:	89fb      	ldrh	r3, [r7, #14]
 80075de:	3303      	adds	r3, #3
 80075e0:	f023 0203 	bic.w	r2, r3, #3
 80075e4:	88bb      	ldrh	r3, [r7, #4]
 80075e6:	441a      	add	r2, r3
 80075e8:	8bbb      	ldrh	r3, [r7, #28]
 80075ea:	429a      	cmp	r2, r3
 80075ec:	d901      	bls.n	80075f2 <pbuf_alloced_custom+0x7a>
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_WARNING, ("pbuf_alloced_custom(length=%"U16_F") buffer too short\n", length));
    return NULL;
 80075ee:	2300      	movs	r3, #0
 80075f0:	e022      	b.n	8007638 <pbuf_alloced_custom+0xc0>
  }

  p->pbuf.next = NULL;
 80075f2:	683b      	ldr	r3, [r7, #0]
 80075f4:	2200      	movs	r2, #0
 80075f6:	601a      	str	r2, [r3, #0]
  if (payload_mem != NULL) {
 80075f8:	69bb      	ldr	r3, [r7, #24]
 80075fa:	2b00      	cmp	r3, #0
 80075fc:	d008      	beq.n	8007610 <pbuf_alloced_custom+0x98>
    p->pbuf.payload = (u8_t *)payload_mem + LWIP_MEM_ALIGN_SIZE(offset);
 80075fe:	89fb      	ldrh	r3, [r7, #14]
 8007600:	3303      	adds	r3, #3
 8007602:	f023 0303 	bic.w	r3, r3, #3
 8007606:	69ba      	ldr	r2, [r7, #24]
 8007608:	441a      	add	r2, r3
 800760a:	683b      	ldr	r3, [r7, #0]
 800760c:	605a      	str	r2, [r3, #4]
 800760e:	e002      	b.n	8007616 <pbuf_alloced_custom+0x9e>
  } else {
    p->pbuf.payload = NULL;
 8007610:	683b      	ldr	r3, [r7, #0]
 8007612:	2200      	movs	r2, #0
 8007614:	605a      	str	r2, [r3, #4]
  }
  p->pbuf.flags = PBUF_FLAG_IS_CUSTOM;
 8007616:	683b      	ldr	r3, [r7, #0]
 8007618:	2202      	movs	r2, #2
 800761a:	735a      	strb	r2, [r3, #13]
  p->pbuf.len = p->pbuf.tot_len = length;
 800761c:	683b      	ldr	r3, [r7, #0]
 800761e:	88ba      	ldrh	r2, [r7, #4]
 8007620:	811a      	strh	r2, [r3, #8]
 8007622:	683b      	ldr	r3, [r7, #0]
 8007624:	891a      	ldrh	r2, [r3, #8]
 8007626:	683b      	ldr	r3, [r7, #0]
 8007628:	815a      	strh	r2, [r3, #10]
  p->pbuf.type = type;
 800762a:	683b      	ldr	r3, [r7, #0]
 800762c:	79ba      	ldrb	r2, [r7, #6]
 800762e:	731a      	strb	r2, [r3, #12]
  p->pbuf.ref = 1;
 8007630:	683b      	ldr	r3, [r7, #0]
 8007632:	2201      	movs	r2, #1
 8007634:	81da      	strh	r2, [r3, #14]
  return &p->pbuf;
 8007636:	683b      	ldr	r3, [r7, #0]
}
 8007638:	4618      	mov	r0, r3
 800763a:	3710      	adds	r7, #16
 800763c:	46bd      	mov	sp, r7
 800763e:	bd80      	pop	{r7, pc}
 8007640:	08011770 	.word	0x08011770
 8007644:	08011908 	.word	0x08011908
 8007648:	080117bc 	.word	0x080117bc

0800764c <pbuf_realloc>:
 *
 * @note Despite its name, pbuf_realloc cannot grow the size of a pbuf (chain).
 */
void
pbuf_realloc(struct pbuf *p, u16_t new_len)
{
 800764c:	b580      	push	{r7, lr}
 800764e:	b086      	sub	sp, #24
 8007650:	af00      	add	r7, sp, #0
 8007652:	6078      	str	r0, [r7, #4]
 8007654:	460b      	mov	r3, r1
 8007656:	807b      	strh	r3, [r7, #2]
  struct pbuf *q;
  u16_t rem_len; /* remaining length */
  s32_t grow;

  LWIP_ASSERT("pbuf_realloc: p != NULL", p != NULL);
 8007658:	687b      	ldr	r3, [r7, #4]
 800765a:	2b00      	cmp	r3, #0
 800765c:	d106      	bne.n	800766c <pbuf_realloc+0x20>
 800765e:	4b4b      	ldr	r3, [pc, #300]	; (800778c <pbuf_realloc+0x140>)
 8007660:	f240 12f3 	movw	r2, #499	; 0x1f3
 8007664:	494a      	ldr	r1, [pc, #296]	; (8007790 <pbuf_realloc+0x144>)
 8007666:	484b      	ldr	r0, [pc, #300]	; (8007794 <pbuf_realloc+0x148>)
 8007668:	f008 ff62 	bl	8010530 <iprintf>
  LWIP_ASSERT("pbuf_realloc: sane p->type", p->type == PBUF_POOL ||
 800766c:	687b      	ldr	r3, [r7, #4]
 800766e:	7b1b      	ldrb	r3, [r3, #12]
 8007670:	2b03      	cmp	r3, #3
 8007672:	d012      	beq.n	800769a <pbuf_realloc+0x4e>
 8007674:	687b      	ldr	r3, [r7, #4]
 8007676:	7b1b      	ldrb	r3, [r3, #12]
 8007678:	2b01      	cmp	r3, #1
 800767a:	d00e      	beq.n	800769a <pbuf_realloc+0x4e>
 800767c:	687b      	ldr	r3, [r7, #4]
 800767e:	7b1b      	ldrb	r3, [r3, #12]
 8007680:	2b00      	cmp	r3, #0
 8007682:	d00a      	beq.n	800769a <pbuf_realloc+0x4e>
 8007684:	687b      	ldr	r3, [r7, #4]
 8007686:	7b1b      	ldrb	r3, [r3, #12]
 8007688:	2b02      	cmp	r3, #2
 800768a:	d006      	beq.n	800769a <pbuf_realloc+0x4e>
 800768c:	4b3f      	ldr	r3, [pc, #252]	; (800778c <pbuf_realloc+0x140>)
 800768e:	f240 12f7 	movw	r2, #503	; 0x1f7
 8007692:	4941      	ldr	r1, [pc, #260]	; (8007798 <pbuf_realloc+0x14c>)
 8007694:	483f      	ldr	r0, [pc, #252]	; (8007794 <pbuf_realloc+0x148>)
 8007696:	f008 ff4b 	bl	8010530 <iprintf>
              p->type == PBUF_ROM ||
              p->type == PBUF_RAM ||
              p->type == PBUF_REF);

  /* desired length larger than current length? */
  if (new_len >= p->tot_len) {
 800769a:	687b      	ldr	r3, [r7, #4]
 800769c:	891b      	ldrh	r3, [r3, #8]
 800769e:	887a      	ldrh	r2, [r7, #2]
 80076a0:	429a      	cmp	r2, r3
 80076a2:	d26f      	bcs.n	8007784 <pbuf_realloc+0x138>
    return;
  }

  /* the pbuf chain grows by (new_len - p->tot_len) bytes
   * (which may be negative in case of shrinking) */
  grow = new_len - p->tot_len;
 80076a4:	887b      	ldrh	r3, [r7, #2]
 80076a6:	687a      	ldr	r2, [r7, #4]
 80076a8:	8912      	ldrh	r2, [r2, #8]
 80076aa:	1a9b      	subs	r3, r3, r2
 80076ac:	60fb      	str	r3, [r7, #12]

  /* first, step over any pbufs that should remain in the chain */
  rem_len = new_len;
 80076ae:	887b      	ldrh	r3, [r7, #2]
 80076b0:	827b      	strh	r3, [r7, #18]
  q = p;
 80076b2:	687b      	ldr	r3, [r7, #4]
 80076b4:	617b      	str	r3, [r7, #20]
  /* should this pbuf be kept? */
  while (rem_len > q->len) {
 80076b6:	e025      	b.n	8007704 <pbuf_realloc+0xb8>
    /* decrease remaining length by pbuf length */
    rem_len -= q->len;
 80076b8:	697b      	ldr	r3, [r7, #20]
 80076ba:	895b      	ldrh	r3, [r3, #10]
 80076bc:	8a7a      	ldrh	r2, [r7, #18]
 80076be:	1ad3      	subs	r3, r2, r3
 80076c0:	827b      	strh	r3, [r7, #18]
    /* decrease total length indicator */
    LWIP_ASSERT("grow < max_u16_t", grow < 0xffff);
 80076c2:	68fb      	ldr	r3, [r7, #12]
 80076c4:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 80076c8:	4293      	cmp	r3, r2
 80076ca:	dd06      	ble.n	80076da <pbuf_realloc+0x8e>
 80076cc:	4b2f      	ldr	r3, [pc, #188]	; (800778c <pbuf_realloc+0x140>)
 80076ce:	f240 220b 	movw	r2, #523	; 0x20b
 80076d2:	4932      	ldr	r1, [pc, #200]	; (800779c <pbuf_realloc+0x150>)
 80076d4:	482f      	ldr	r0, [pc, #188]	; (8007794 <pbuf_realloc+0x148>)
 80076d6:	f008 ff2b 	bl	8010530 <iprintf>
    q->tot_len += (u16_t)grow;
 80076da:	697b      	ldr	r3, [r7, #20]
 80076dc:	891a      	ldrh	r2, [r3, #8]
 80076de:	68fb      	ldr	r3, [r7, #12]
 80076e0:	b29b      	uxth	r3, r3
 80076e2:	4413      	add	r3, r2
 80076e4:	b29a      	uxth	r2, r3
 80076e6:	697b      	ldr	r3, [r7, #20]
 80076e8:	811a      	strh	r2, [r3, #8]
    /* proceed to next pbuf in chain */
    q = q->next;
 80076ea:	697b      	ldr	r3, [r7, #20]
 80076ec:	681b      	ldr	r3, [r3, #0]
 80076ee:	617b      	str	r3, [r7, #20]
    LWIP_ASSERT("pbuf_realloc: q != NULL", q != NULL);
 80076f0:	697b      	ldr	r3, [r7, #20]
 80076f2:	2b00      	cmp	r3, #0
 80076f4:	d106      	bne.n	8007704 <pbuf_realloc+0xb8>
 80076f6:	4b25      	ldr	r3, [pc, #148]	; (800778c <pbuf_realloc+0x140>)
 80076f8:	f240 220f 	movw	r2, #527	; 0x20f
 80076fc:	4928      	ldr	r1, [pc, #160]	; (80077a0 <pbuf_realloc+0x154>)
 80076fe:	4825      	ldr	r0, [pc, #148]	; (8007794 <pbuf_realloc+0x148>)
 8007700:	f008 ff16 	bl	8010530 <iprintf>
  while (rem_len > q->len) {
 8007704:	697b      	ldr	r3, [r7, #20]
 8007706:	895b      	ldrh	r3, [r3, #10]
 8007708:	8a7a      	ldrh	r2, [r7, #18]
 800770a:	429a      	cmp	r2, r3
 800770c:	d8d4      	bhi.n	80076b8 <pbuf_realloc+0x6c>
  /* we have now reached the new last pbuf (in q) */
  /* rem_len == desired length for pbuf q */

  /* shrink allocated memory for PBUF_RAM */
  /* (other types merely adjust their length fields */
  if ((q->type == PBUF_RAM) && (rem_len != q->len)
 800770e:	697b      	ldr	r3, [r7, #20]
 8007710:	7b1b      	ldrb	r3, [r3, #12]
 8007712:	2b00      	cmp	r3, #0
 8007714:	d122      	bne.n	800775c <pbuf_realloc+0x110>
 8007716:	697b      	ldr	r3, [r7, #20]
 8007718:	895b      	ldrh	r3, [r3, #10]
 800771a:	8a7a      	ldrh	r2, [r7, #18]
 800771c:	429a      	cmp	r2, r3
 800771e:	d01d      	beq.n	800775c <pbuf_realloc+0x110>
#if LWIP_SUPPORT_CUSTOM_PBUF
      && ((q->flags & PBUF_FLAG_IS_CUSTOM) == 0)
 8007720:	697b      	ldr	r3, [r7, #20]
 8007722:	7b5b      	ldrb	r3, [r3, #13]
 8007724:	f003 0302 	and.w	r3, r3, #2
 8007728:	2b00      	cmp	r3, #0
 800772a:	d117      	bne.n	800775c <pbuf_realloc+0x110>
#endif /* LWIP_SUPPORT_CUSTOM_PBUF */
     ) {
    /* reallocate and adjust the length of the pbuf that will be split */
    q = (struct pbuf *)mem_trim(q, (u16_t)((u8_t *)q->payload - (u8_t *)q) + rem_len);
 800772c:	697b      	ldr	r3, [r7, #20]
 800772e:	685b      	ldr	r3, [r3, #4]
 8007730:	461a      	mov	r2, r3
 8007732:	697b      	ldr	r3, [r7, #20]
 8007734:	1ad3      	subs	r3, r2, r3
 8007736:	b29a      	uxth	r2, r3
 8007738:	8a7b      	ldrh	r3, [r7, #18]
 800773a:	4413      	add	r3, r2
 800773c:	b29b      	uxth	r3, r3
 800773e:	4619      	mov	r1, r3
 8007740:	6978      	ldr	r0, [r7, #20]
 8007742:	f7ff f85b 	bl	80067fc <mem_trim>
 8007746:	6178      	str	r0, [r7, #20]
    LWIP_ASSERT("mem_trim returned q == NULL", q != NULL);
 8007748:	697b      	ldr	r3, [r7, #20]
 800774a:	2b00      	cmp	r3, #0
 800774c:	d106      	bne.n	800775c <pbuf_realloc+0x110>
 800774e:	4b0f      	ldr	r3, [pc, #60]	; (800778c <pbuf_realloc+0x140>)
 8007750:	f240 221d 	movw	r2, #541	; 0x21d
 8007754:	4913      	ldr	r1, [pc, #76]	; (80077a4 <pbuf_realloc+0x158>)
 8007756:	480f      	ldr	r0, [pc, #60]	; (8007794 <pbuf_realloc+0x148>)
 8007758:	f008 feea 	bl	8010530 <iprintf>
  }
  /* adjust length fields for new last pbuf */
  q->len = rem_len;
 800775c:	697b      	ldr	r3, [r7, #20]
 800775e:	8a7a      	ldrh	r2, [r7, #18]
 8007760:	815a      	strh	r2, [r3, #10]
  q->tot_len = q->len;
 8007762:	697b      	ldr	r3, [r7, #20]
 8007764:	895a      	ldrh	r2, [r3, #10]
 8007766:	697b      	ldr	r3, [r7, #20]
 8007768:	811a      	strh	r2, [r3, #8]

  /* any remaining pbufs in chain? */
  if (q->next != NULL) {
 800776a:	697b      	ldr	r3, [r7, #20]
 800776c:	681b      	ldr	r3, [r3, #0]
 800776e:	2b00      	cmp	r3, #0
 8007770:	d004      	beq.n	800777c <pbuf_realloc+0x130>
    /* free remaining pbufs in chain */
    pbuf_free(q->next);
 8007772:	697b      	ldr	r3, [r7, #20]
 8007774:	681b      	ldr	r3, [r3, #0]
 8007776:	4618      	mov	r0, r3
 8007778:	f000 f8dc 	bl	8007934 <pbuf_free>
  }
  /* q is last packet in chain */
  q->next = NULL;
 800777c:	697b      	ldr	r3, [r7, #20]
 800777e:	2200      	movs	r2, #0
 8007780:	601a      	str	r2, [r3, #0]
 8007782:	e000      	b.n	8007786 <pbuf_realloc+0x13a>
    return;
 8007784:	bf00      	nop

}
 8007786:	3718      	adds	r7, #24
 8007788:	46bd      	mov	sp, r7
 800778a:	bd80      	pop	{r7, pc}
 800778c:	08011770 	.word	0x08011770
 8007790:	0801192c 	.word	0x0801192c
 8007794:	080117bc 	.word	0x080117bc
 8007798:	08011944 	.word	0x08011944
 800779c:	08011960 	.word	0x08011960
 80077a0:	08011974 	.word	0x08011974
 80077a4:	0801198c 	.word	0x0801198c

080077a8 <pbuf_header_impl>:
 * @return non-zero on failure, zero on success.
 *
 */
static u8_t
pbuf_header_impl(struct pbuf *p, s16_t header_size_increment, u8_t force)
{
 80077a8:	b580      	push	{r7, lr}
 80077aa:	b084      	sub	sp, #16
 80077ac:	af00      	add	r7, sp, #0
 80077ae:	6078      	str	r0, [r7, #4]
 80077b0:	460b      	mov	r3, r1
 80077b2:	807b      	strh	r3, [r7, #2]
 80077b4:	4613      	mov	r3, r2
 80077b6:	707b      	strb	r3, [r7, #1]
  u16_t type;
  void *payload;
  u16_t increment_magnitude;

  LWIP_ASSERT("p != NULL", p != NULL);
 80077b8:	687b      	ldr	r3, [r7, #4]
 80077ba:	2b00      	cmp	r3, #0
 80077bc:	d106      	bne.n	80077cc <pbuf_header_impl+0x24>
 80077be:	4b46      	ldr	r3, [pc, #280]	; (80078d8 <pbuf_header_impl+0x130>)
 80077c0:	f240 223f 	movw	r2, #575	; 0x23f
 80077c4:	4945      	ldr	r1, [pc, #276]	; (80078dc <pbuf_header_impl+0x134>)
 80077c6:	4846      	ldr	r0, [pc, #280]	; (80078e0 <pbuf_header_impl+0x138>)
 80077c8:	f008 feb2 	bl	8010530 <iprintf>
  if ((header_size_increment == 0) || (p == NULL)) {
 80077cc:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 80077d0:	2b00      	cmp	r3, #0
 80077d2:	d002      	beq.n	80077da <pbuf_header_impl+0x32>
 80077d4:	687b      	ldr	r3, [r7, #4]
 80077d6:	2b00      	cmp	r3, #0
 80077d8:	d101      	bne.n	80077de <pbuf_header_impl+0x36>
    return 0;
 80077da:	2300      	movs	r3, #0
 80077dc:	e078      	b.n	80078d0 <pbuf_header_impl+0x128>
  }

  if (header_size_increment < 0) {
 80077de:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 80077e2:	2b00      	cmp	r3, #0
 80077e4:	da10      	bge.n	8007808 <pbuf_header_impl+0x60>
    increment_magnitude = (u16_t)-header_size_increment;
 80077e6:	887b      	ldrh	r3, [r7, #2]
 80077e8:	425b      	negs	r3, r3
 80077ea:	81fb      	strh	r3, [r7, #14]
    /* Check that we aren't going to move off the end of the pbuf */
    LWIP_ERROR("increment_magnitude <= p->len", (increment_magnitude <= p->len), return 1;);
 80077ec:	687b      	ldr	r3, [r7, #4]
 80077ee:	895b      	ldrh	r3, [r3, #10]
 80077f0:	89fa      	ldrh	r2, [r7, #14]
 80077f2:	429a      	cmp	r2, r3
 80077f4:	d90a      	bls.n	800780c <pbuf_header_impl+0x64>
 80077f6:	4b38      	ldr	r3, [pc, #224]	; (80078d8 <pbuf_header_impl+0x130>)
 80077f8:	f240 2247 	movw	r2, #583	; 0x247
 80077fc:	4939      	ldr	r1, [pc, #228]	; (80078e4 <pbuf_header_impl+0x13c>)
 80077fe:	4838      	ldr	r0, [pc, #224]	; (80078e0 <pbuf_header_impl+0x138>)
 8007800:	f008 fe96 	bl	8010530 <iprintf>
 8007804:	2301      	movs	r3, #1
 8007806:	e063      	b.n	80078d0 <pbuf_header_impl+0x128>
  } else {
    increment_magnitude = (u16_t)header_size_increment;
 8007808:	887b      	ldrh	r3, [r7, #2]
 800780a:	81fb      	strh	r3, [r7, #14]
    LWIP_ASSERT("p->payload - increment_magnitude >= p + SIZEOF_STRUCT_PBUF",
                (u8_t *)p->payload - increment_magnitude >= (u8_t *)p + SIZEOF_STRUCT_PBUF);
#endif
  }

  type = p->type;
 800780c:	687b      	ldr	r3, [r7, #4]
 800780e:	7b1b      	ldrb	r3, [r3, #12]
 8007810:	81bb      	strh	r3, [r7, #12]
  /* remember current payload pointer */
  payload = p->payload;
 8007812:	687b      	ldr	r3, [r7, #4]
 8007814:	685b      	ldr	r3, [r3, #4]
 8007816:	60bb      	str	r3, [r7, #8]

  /* pbuf types containing payloads? */
  if (type == PBUF_RAM || type == PBUF_POOL) {
 8007818:	89bb      	ldrh	r3, [r7, #12]
 800781a:	2b00      	cmp	r3, #0
 800781c:	d002      	beq.n	8007824 <pbuf_header_impl+0x7c>
 800781e:	89bb      	ldrh	r3, [r7, #12]
 8007820:	2b03      	cmp	r3, #3
 8007822:	d112      	bne.n	800784a <pbuf_header_impl+0xa2>
    /* set new payload pointer */
    p->payload = (u8_t *)p->payload - header_size_increment;
 8007824:	687b      	ldr	r3, [r7, #4]
 8007826:	685a      	ldr	r2, [r3, #4]
 8007828:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800782c:	425b      	negs	r3, r3
 800782e:	441a      	add	r2, r3
 8007830:	687b      	ldr	r3, [r7, #4]
 8007832:	605a      	str	r2, [r3, #4]
    /* boundary check fails? */
    if ((u8_t *)p->payload < (u8_t *)p + SIZEOF_STRUCT_PBUF) {
 8007834:	687b      	ldr	r3, [r7, #4]
 8007836:	685a      	ldr	r2, [r3, #4]
 8007838:	687b      	ldr	r3, [r7, #4]
 800783a:	3310      	adds	r3, #16
 800783c:	429a      	cmp	r2, r3
 800783e:	d238      	bcs.n	80078b2 <pbuf_header_impl+0x10a>
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE,
        ("pbuf_header: failed as %p < %p (not enough space for new header size)\n",
        (void *)p->payload, (void *)((u8_t *)p + SIZEOF_STRUCT_PBUF)));
      /* restore old payload pointer */
      p->payload = payload;
 8007840:	687b      	ldr	r3, [r7, #4]
 8007842:	68ba      	ldr	r2, [r7, #8]
 8007844:	605a      	str	r2, [r3, #4]
      /* bail out unsuccessfully */
      return 1;
 8007846:	2301      	movs	r3, #1
 8007848:	e042      	b.n	80078d0 <pbuf_header_impl+0x128>
    }
  /* pbuf types referring to external payloads? */
  } else if (type == PBUF_REF || type == PBUF_ROM) {
 800784a:	89bb      	ldrh	r3, [r7, #12]
 800784c:	2b02      	cmp	r3, #2
 800784e:	d002      	beq.n	8007856 <pbuf_header_impl+0xae>
 8007850:	89bb      	ldrh	r3, [r7, #12]
 8007852:	2b01      	cmp	r3, #1
 8007854:	d124      	bne.n	80078a0 <pbuf_header_impl+0xf8>
    /* hide a header in the payload? */
    if ((header_size_increment < 0) && (increment_magnitude <= p->len)) {
 8007856:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800785a:	2b00      	cmp	r3, #0
 800785c:	da0d      	bge.n	800787a <pbuf_header_impl+0xd2>
 800785e:	687b      	ldr	r3, [r7, #4]
 8007860:	895b      	ldrh	r3, [r3, #10]
 8007862:	89fa      	ldrh	r2, [r7, #14]
 8007864:	429a      	cmp	r2, r3
 8007866:	d808      	bhi.n	800787a <pbuf_header_impl+0xd2>
      /* increase payload pointer */
      p->payload = (u8_t *)p->payload - header_size_increment;
 8007868:	687b      	ldr	r3, [r7, #4]
 800786a:	685a      	ldr	r2, [r3, #4]
 800786c:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8007870:	425b      	negs	r3, r3
 8007872:	441a      	add	r2, r3
 8007874:	687b      	ldr	r3, [r7, #4]
 8007876:	605a      	str	r2, [r3, #4]
 8007878:	e011      	b.n	800789e <pbuf_header_impl+0xf6>
    } else if ((header_size_increment > 0) && force) {
 800787a:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800787e:	2b00      	cmp	r3, #0
 8007880:	dd0b      	ble.n	800789a <pbuf_header_impl+0xf2>
 8007882:	787b      	ldrb	r3, [r7, #1]
 8007884:	2b00      	cmp	r3, #0
 8007886:	d008      	beq.n	800789a <pbuf_header_impl+0xf2>
      p->payload = (u8_t *)p->payload - header_size_increment;
 8007888:	687b      	ldr	r3, [r7, #4]
 800788a:	685a      	ldr	r2, [r3, #4]
 800788c:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8007890:	425b      	negs	r3, r3
 8007892:	441a      	add	r2, r3
 8007894:	687b      	ldr	r3, [r7, #4]
 8007896:	605a      	str	r2, [r3, #4]
 8007898:	e001      	b.n	800789e <pbuf_header_impl+0xf6>
    } else {
      /* cannot expand payload to front (yet!)
       * bail out unsuccessfully */
      return 1;
 800789a:	2301      	movs	r3, #1
 800789c:	e018      	b.n	80078d0 <pbuf_header_impl+0x128>
    if ((header_size_increment < 0) && (increment_magnitude <= p->len)) {
 800789e:	e008      	b.n	80078b2 <pbuf_header_impl+0x10a>
    }
  } else {
    /* Unknown type */
    LWIP_ASSERT("bad pbuf type", 0);
 80078a0:	4b0d      	ldr	r3, [pc, #52]	; (80078d8 <pbuf_header_impl+0x130>)
 80078a2:	f240 2277 	movw	r2, #631	; 0x277
 80078a6:	4910      	ldr	r1, [pc, #64]	; (80078e8 <pbuf_header_impl+0x140>)
 80078a8:	480d      	ldr	r0, [pc, #52]	; (80078e0 <pbuf_header_impl+0x138>)
 80078aa:	f008 fe41 	bl	8010530 <iprintf>
    return 1;
 80078ae:	2301      	movs	r3, #1
 80078b0:	e00e      	b.n	80078d0 <pbuf_header_impl+0x128>
  }
  /* modify pbuf length fields */
  p->len += header_size_increment;
 80078b2:	687b      	ldr	r3, [r7, #4]
 80078b4:	895a      	ldrh	r2, [r3, #10]
 80078b6:	887b      	ldrh	r3, [r7, #2]
 80078b8:	4413      	add	r3, r2
 80078ba:	b29a      	uxth	r2, r3
 80078bc:	687b      	ldr	r3, [r7, #4]
 80078be:	815a      	strh	r2, [r3, #10]
  p->tot_len += header_size_increment;
 80078c0:	687b      	ldr	r3, [r7, #4]
 80078c2:	891a      	ldrh	r2, [r3, #8]
 80078c4:	887b      	ldrh	r3, [r7, #2]
 80078c6:	4413      	add	r3, r2
 80078c8:	b29a      	uxth	r2, r3
 80078ca:	687b      	ldr	r3, [r7, #4]
 80078cc:	811a      	strh	r2, [r3, #8]

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_header: old %p new %p (%"S16_F")\n",
    (void *)payload, (void *)p->payload, header_size_increment));

  return 0;
 80078ce:	2300      	movs	r3, #0
}
 80078d0:	4618      	mov	r0, r3
 80078d2:	3710      	adds	r7, #16
 80078d4:	46bd      	mov	sp, r7
 80078d6:	bd80      	pop	{r7, pc}
 80078d8:	08011770 	.word	0x08011770
 80078dc:	080119a8 	.word	0x080119a8
 80078e0:	080117bc 	.word	0x080117bc
 80078e4:	080119b4 	.word	0x080119b4
 80078e8:	080119d4 	.word	0x080119d4

080078ec <pbuf_header>:
 * @return non-zero on failure, zero on success.
 *
 */
u8_t
pbuf_header(struct pbuf *p, s16_t header_size_increment)
{
 80078ec:	b580      	push	{r7, lr}
 80078ee:	b082      	sub	sp, #8
 80078f0:	af00      	add	r7, sp, #0
 80078f2:	6078      	str	r0, [r7, #4]
 80078f4:	460b      	mov	r3, r1
 80078f6:	807b      	strh	r3, [r7, #2]
   return pbuf_header_impl(p, header_size_increment, 0);
 80078f8:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 80078fc:	2200      	movs	r2, #0
 80078fe:	4619      	mov	r1, r3
 8007900:	6878      	ldr	r0, [r7, #4]
 8007902:	f7ff ff51 	bl	80077a8 <pbuf_header_impl>
 8007906:	4603      	mov	r3, r0
}
 8007908:	4618      	mov	r0, r3
 800790a:	3708      	adds	r7, #8
 800790c:	46bd      	mov	sp, r7
 800790e:	bd80      	pop	{r7, pc}

08007910 <pbuf_header_force>:
 * Same as pbuf_header but does not check if 'header_size > 0' is allowed.
 * This is used internally only, to allow PBUF_REF for RX.
 */
u8_t
pbuf_header_force(struct pbuf *p, s16_t header_size_increment)
{
 8007910:	b580      	push	{r7, lr}
 8007912:	b082      	sub	sp, #8
 8007914:	af00      	add	r7, sp, #0
 8007916:	6078      	str	r0, [r7, #4]
 8007918:	460b      	mov	r3, r1
 800791a:	807b      	strh	r3, [r7, #2]
   return pbuf_header_impl(p, header_size_increment, 1);
 800791c:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8007920:	2201      	movs	r2, #1
 8007922:	4619      	mov	r1, r3
 8007924:	6878      	ldr	r0, [r7, #4]
 8007926:	f7ff ff3f 	bl	80077a8 <pbuf_header_impl>
 800792a:	4603      	mov	r3, r0
}
 800792c:	4618      	mov	r0, r3
 800792e:	3708      	adds	r7, #8
 8007930:	46bd      	mov	sp, r7
 8007932:	bd80      	pop	{r7, pc}

08007934 <pbuf_free>:
 * 1->1->1 becomes .......
 *
 */
u8_t
pbuf_free(struct pbuf *p)
{
 8007934:	b580      	push	{r7, lr}
 8007936:	b088      	sub	sp, #32
 8007938:	af00      	add	r7, sp, #0
 800793a:	6078      	str	r0, [r7, #4]
  u16_t type;
  struct pbuf *q;
  u8_t count;

  if (p == NULL) {
 800793c:	687b      	ldr	r3, [r7, #4]
 800793e:	2b00      	cmp	r3, #0
 8007940:	d10b      	bne.n	800795a <pbuf_free+0x26>
    LWIP_ASSERT("p != NULL", p != NULL);
 8007942:	687b      	ldr	r3, [r7, #4]
 8007944:	2b00      	cmp	r3, #0
 8007946:	d106      	bne.n	8007956 <pbuf_free+0x22>
 8007948:	4b41      	ldr	r3, [pc, #260]	; (8007a50 <pbuf_free+0x11c>)
 800794a:	f240 22d2 	movw	r2, #722	; 0x2d2
 800794e:	4941      	ldr	r1, [pc, #260]	; (8007a54 <pbuf_free+0x120>)
 8007950:	4841      	ldr	r0, [pc, #260]	; (8007a58 <pbuf_free+0x124>)
 8007952:	f008 fded 	bl	8010530 <iprintf>
    /* if assertions are disabled, proceed with debug output */
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
      ("pbuf_free(p == NULL) was called.\n"));
    return 0;
 8007956:	2300      	movs	r3, #0
 8007958:	e076      	b.n	8007a48 <pbuf_free+0x114>
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free(%p)\n", (void *)p));

  PERF_START;

  LWIP_ASSERT("pbuf_free: sane type",
 800795a:	687b      	ldr	r3, [r7, #4]
 800795c:	7b1b      	ldrb	r3, [r3, #12]
 800795e:	2b00      	cmp	r3, #0
 8007960:	d012      	beq.n	8007988 <pbuf_free+0x54>
 8007962:	687b      	ldr	r3, [r7, #4]
 8007964:	7b1b      	ldrb	r3, [r3, #12]
 8007966:	2b01      	cmp	r3, #1
 8007968:	d00e      	beq.n	8007988 <pbuf_free+0x54>
 800796a:	687b      	ldr	r3, [r7, #4]
 800796c:	7b1b      	ldrb	r3, [r3, #12]
 800796e:	2b02      	cmp	r3, #2
 8007970:	d00a      	beq.n	8007988 <pbuf_free+0x54>
 8007972:	687b      	ldr	r3, [r7, #4]
 8007974:	7b1b      	ldrb	r3, [r3, #12]
 8007976:	2b03      	cmp	r3, #3
 8007978:	d006      	beq.n	8007988 <pbuf_free+0x54>
 800797a:	4b35      	ldr	r3, [pc, #212]	; (8007a50 <pbuf_free+0x11c>)
 800797c:	f240 22de 	movw	r2, #734	; 0x2de
 8007980:	4936      	ldr	r1, [pc, #216]	; (8007a5c <pbuf_free+0x128>)
 8007982:	4835      	ldr	r0, [pc, #212]	; (8007a58 <pbuf_free+0x124>)
 8007984:	f008 fdd4 	bl	8010530 <iprintf>
    p->type == PBUF_RAM || p->type == PBUF_ROM ||
    p->type == PBUF_REF || p->type == PBUF_POOL);

  count = 0;
 8007988:	2300      	movs	r3, #0
 800798a:	77fb      	strb	r3, [r7, #31]
  /* de-allocate all consecutive pbufs from the head of the chain that
   * obtain a zero reference count after decrementing*/
  while (p != NULL) {
 800798c:	e058      	b.n	8007a40 <pbuf_free+0x10c>
    u16_t ref;
    SYS_ARCH_DECL_PROTECT(old_level);
    /* Since decrementing ref cannot be guaranteed to be a single machine operation
     * we must protect it. We put the new ref into a local variable to prevent
     * further protection. */
    SYS_ARCH_PROTECT(old_level);
 800798e:	f007 fc45 	bl	800f21c <sys_arch_protect>
 8007992:	61b8      	str	r0, [r7, #24]
    /* all pbufs in a chain are referenced at least once */
    LWIP_ASSERT("pbuf_free: p->ref > 0", p->ref > 0);
 8007994:	687b      	ldr	r3, [r7, #4]
 8007996:	89db      	ldrh	r3, [r3, #14]
 8007998:	2b00      	cmp	r3, #0
 800799a:	d106      	bne.n	80079aa <pbuf_free+0x76>
 800799c:	4b2c      	ldr	r3, [pc, #176]	; (8007a50 <pbuf_free+0x11c>)
 800799e:	f240 22eb 	movw	r2, #747	; 0x2eb
 80079a2:	492f      	ldr	r1, [pc, #188]	; (8007a60 <pbuf_free+0x12c>)
 80079a4:	482c      	ldr	r0, [pc, #176]	; (8007a58 <pbuf_free+0x124>)
 80079a6:	f008 fdc3 	bl	8010530 <iprintf>
    /* decrease reference count (number of pointers to pbuf) */
    ref = --(p->ref);
 80079aa:	687b      	ldr	r3, [r7, #4]
 80079ac:	89db      	ldrh	r3, [r3, #14]
 80079ae:	3b01      	subs	r3, #1
 80079b0:	b29a      	uxth	r2, r3
 80079b2:	687b      	ldr	r3, [r7, #4]
 80079b4:	81da      	strh	r2, [r3, #14]
 80079b6:	687b      	ldr	r3, [r7, #4]
 80079b8:	89db      	ldrh	r3, [r3, #14]
 80079ba:	82fb      	strh	r3, [r7, #22]
    SYS_ARCH_UNPROTECT(old_level);
 80079bc:	69b8      	ldr	r0, [r7, #24]
 80079be:	f007 fc3b 	bl	800f238 <sys_arch_unprotect>
    /* this pbuf is no longer referenced to? */
    if (ref == 0) {
 80079c2:	8afb      	ldrh	r3, [r7, #22]
 80079c4:	2b00      	cmp	r3, #0
 80079c6:	d139      	bne.n	8007a3c <pbuf_free+0x108>
      /* remember next pbuf in chain for next iteration */
      q = p->next;
 80079c8:	687b      	ldr	r3, [r7, #4]
 80079ca:	681b      	ldr	r3, [r3, #0]
 80079cc:	613b      	str	r3, [r7, #16]
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free: deallocating %p\n", (void *)p));
      type = p->type;
 80079ce:	687b      	ldr	r3, [r7, #4]
 80079d0:	7b1b      	ldrb	r3, [r3, #12]
 80079d2:	81fb      	strh	r3, [r7, #14]
#if LWIP_SUPPORT_CUSTOM_PBUF
      /* is this a custom pbuf? */
      if ((p->flags & PBUF_FLAG_IS_CUSTOM) != 0) {
 80079d4:	687b      	ldr	r3, [r7, #4]
 80079d6:	7b5b      	ldrb	r3, [r3, #13]
 80079d8:	f003 0302 	and.w	r3, r3, #2
 80079dc:	2b00      	cmp	r3, #0
 80079de:	d011      	beq.n	8007a04 <pbuf_free+0xd0>
        struct pbuf_custom *pc = (struct pbuf_custom*)p;
 80079e0:	687b      	ldr	r3, [r7, #4]
 80079e2:	60bb      	str	r3, [r7, #8]
        LWIP_ASSERT("pc->custom_free_function != NULL", pc->custom_free_function != NULL);
 80079e4:	68bb      	ldr	r3, [r7, #8]
 80079e6:	691b      	ldr	r3, [r3, #16]
 80079e8:	2b00      	cmp	r3, #0
 80079ea:	d106      	bne.n	80079fa <pbuf_free+0xc6>
 80079ec:	4b18      	ldr	r3, [pc, #96]	; (8007a50 <pbuf_free+0x11c>)
 80079ee:	f240 22f9 	movw	r2, #761	; 0x2f9
 80079f2:	491c      	ldr	r1, [pc, #112]	; (8007a64 <pbuf_free+0x130>)
 80079f4:	4818      	ldr	r0, [pc, #96]	; (8007a58 <pbuf_free+0x124>)
 80079f6:	f008 fd9b 	bl	8010530 <iprintf>
        pc->custom_free_function(p);
 80079fa:	68bb      	ldr	r3, [r7, #8]
 80079fc:	691b      	ldr	r3, [r3, #16]
 80079fe:	6878      	ldr	r0, [r7, #4]
 8007a00:	4798      	blx	r3
 8007a02:	e015      	b.n	8007a30 <pbuf_free+0xfc>
      } else
#endif /* LWIP_SUPPORT_CUSTOM_PBUF */
      {
        /* is this a pbuf from the pool? */
        if (type == PBUF_POOL) {
 8007a04:	89fb      	ldrh	r3, [r7, #14]
 8007a06:	2b03      	cmp	r3, #3
 8007a08:	d104      	bne.n	8007a14 <pbuf_free+0xe0>
          memp_free(MEMP_PBUF_POOL, p);
 8007a0a:	6879      	ldr	r1, [r7, #4]
 8007a0c:	200c      	movs	r0, #12
 8007a0e:	f7ff f9e7 	bl	8006de0 <memp_free>
 8007a12:	e00d      	b.n	8007a30 <pbuf_free+0xfc>
        /* is this a ROM or RAM referencing pbuf? */
        } else if (type == PBUF_ROM || type == PBUF_REF) {
 8007a14:	89fb      	ldrh	r3, [r7, #14]
 8007a16:	2b01      	cmp	r3, #1
 8007a18:	d002      	beq.n	8007a20 <pbuf_free+0xec>
 8007a1a:	89fb      	ldrh	r3, [r7, #14]
 8007a1c:	2b02      	cmp	r3, #2
 8007a1e:	d104      	bne.n	8007a2a <pbuf_free+0xf6>
          memp_free(MEMP_PBUF, p);
 8007a20:	6879      	ldr	r1, [r7, #4]
 8007a22:	200b      	movs	r0, #11
 8007a24:	f7ff f9dc 	bl	8006de0 <memp_free>
 8007a28:	e002      	b.n	8007a30 <pbuf_free+0xfc>
        /* type == PBUF_RAM */
        } else {
          mem_free(p);
 8007a2a:	6878      	ldr	r0, [r7, #4]
 8007a2c:	f7fe fe78 	bl	8006720 <mem_free>
        }
      }
      count++;
 8007a30:	7ffb      	ldrb	r3, [r7, #31]
 8007a32:	3301      	adds	r3, #1
 8007a34:	77fb      	strb	r3, [r7, #31]
      /* proceed to next pbuf */
      p = q;
 8007a36:	693b      	ldr	r3, [r7, #16]
 8007a38:	607b      	str	r3, [r7, #4]
 8007a3a:	e001      	b.n	8007a40 <pbuf_free+0x10c>
    /* p->ref > 0, this pbuf is still referenced to */
    /* (and so the remaining pbufs in chain as well) */
    } else {
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free: %p has ref %"U16_F", ending here.\n", (void *)p, ref));
      /* stop walking through the chain */
      p = NULL;
 8007a3c:	2300      	movs	r3, #0
 8007a3e:	607b      	str	r3, [r7, #4]
  while (p != NULL) {
 8007a40:	687b      	ldr	r3, [r7, #4]
 8007a42:	2b00      	cmp	r3, #0
 8007a44:	d1a3      	bne.n	800798e <pbuf_free+0x5a>
    }
  }
  PERF_STOP("pbuf_free");
  /* return number of de-allocated pbufs */
  return count;
 8007a46:	7ffb      	ldrb	r3, [r7, #31]
}
 8007a48:	4618      	mov	r0, r3
 8007a4a:	3720      	adds	r7, #32
 8007a4c:	46bd      	mov	sp, r7
 8007a4e:	bd80      	pop	{r7, pc}
 8007a50:	08011770 	.word	0x08011770
 8007a54:	080119a8 	.word	0x080119a8
 8007a58:	080117bc 	.word	0x080117bc
 8007a5c:	080119e4 	.word	0x080119e4
 8007a60:	080119fc 	.word	0x080119fc
 8007a64:	08011a14 	.word	0x08011a14

08007a68 <pbuf_clen>:
 * @param p first pbuf of chain
 * @return the number of pbufs in a chain
 */
u16_t
pbuf_clen(const struct pbuf *p)
{
 8007a68:	b480      	push	{r7}
 8007a6a:	b085      	sub	sp, #20
 8007a6c:	af00      	add	r7, sp, #0
 8007a6e:	6078      	str	r0, [r7, #4]
  u16_t len;

  len = 0;
 8007a70:	2300      	movs	r3, #0
 8007a72:	81fb      	strh	r3, [r7, #14]
  while (p != NULL) {
 8007a74:	e005      	b.n	8007a82 <pbuf_clen+0x1a>
    ++len;
 8007a76:	89fb      	ldrh	r3, [r7, #14]
 8007a78:	3301      	adds	r3, #1
 8007a7a:	81fb      	strh	r3, [r7, #14]
    p = p->next;
 8007a7c:	687b      	ldr	r3, [r7, #4]
 8007a7e:	681b      	ldr	r3, [r3, #0]
 8007a80:	607b      	str	r3, [r7, #4]
  while (p != NULL) {
 8007a82:	687b      	ldr	r3, [r7, #4]
 8007a84:	2b00      	cmp	r3, #0
 8007a86:	d1f6      	bne.n	8007a76 <pbuf_clen+0xe>
  }
  return len;
 8007a88:	89fb      	ldrh	r3, [r7, #14]
}
 8007a8a:	4618      	mov	r0, r3
 8007a8c:	3714      	adds	r7, #20
 8007a8e:	46bd      	mov	sp, r7
 8007a90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a94:	4770      	bx	lr
	...

08007a98 <pbuf_ref>:
 * @param p pbuf to increase reference counter of
 *
 */
void
pbuf_ref(struct pbuf *p)
{
 8007a98:	b580      	push	{r7, lr}
 8007a9a:	b084      	sub	sp, #16
 8007a9c:	af00      	add	r7, sp, #0
 8007a9e:	6078      	str	r0, [r7, #4]
  /* pbuf given? */
  if (p != NULL) {
 8007aa0:	687b      	ldr	r3, [r7, #4]
 8007aa2:	2b00      	cmp	r3, #0
 8007aa4:	d016      	beq.n	8007ad4 <pbuf_ref+0x3c>
    SYS_ARCH_INC(p->ref, 1);
 8007aa6:	f007 fbb9 	bl	800f21c <sys_arch_protect>
 8007aaa:	60f8      	str	r0, [r7, #12]
 8007aac:	687b      	ldr	r3, [r7, #4]
 8007aae:	89db      	ldrh	r3, [r3, #14]
 8007ab0:	3301      	adds	r3, #1
 8007ab2:	b29a      	uxth	r2, r3
 8007ab4:	687b      	ldr	r3, [r7, #4]
 8007ab6:	81da      	strh	r2, [r3, #14]
 8007ab8:	68f8      	ldr	r0, [r7, #12]
 8007aba:	f007 fbbd 	bl	800f238 <sys_arch_unprotect>
    LWIP_ASSERT("pbuf ref overflow", p->ref > 0);
 8007abe:	687b      	ldr	r3, [r7, #4]
 8007ac0:	89db      	ldrh	r3, [r3, #14]
 8007ac2:	2b00      	cmp	r3, #0
 8007ac4:	d106      	bne.n	8007ad4 <pbuf_ref+0x3c>
 8007ac6:	4b05      	ldr	r3, [pc, #20]	; (8007adc <pbuf_ref+0x44>)
 8007ac8:	f240 3239 	movw	r2, #825	; 0x339
 8007acc:	4904      	ldr	r1, [pc, #16]	; (8007ae0 <pbuf_ref+0x48>)
 8007ace:	4805      	ldr	r0, [pc, #20]	; (8007ae4 <pbuf_ref+0x4c>)
 8007ad0:	f008 fd2e 	bl	8010530 <iprintf>
  }
}
 8007ad4:	bf00      	nop
 8007ad6:	3710      	adds	r7, #16
 8007ad8:	46bd      	mov	sp, r7
 8007ada:	bd80      	pop	{r7, pc}
 8007adc:	08011770 	.word	0x08011770
 8007ae0:	08011a38 	.word	0x08011a38
 8007ae4:	080117bc 	.word	0x080117bc

08007ae8 <pbuf_cat>:
 *
 * @see pbuf_chain()
 */
void
pbuf_cat(struct pbuf *h, struct pbuf *t)
{
 8007ae8:	b580      	push	{r7, lr}
 8007aea:	b084      	sub	sp, #16
 8007aec:	af00      	add	r7, sp, #0
 8007aee:	6078      	str	r0, [r7, #4]
 8007af0:	6039      	str	r1, [r7, #0]
  struct pbuf *p;

  LWIP_ERROR("(h != NULL) && (t != NULL) (programmer violates API)",
 8007af2:	687b      	ldr	r3, [r7, #4]
 8007af4:	2b00      	cmp	r3, #0
 8007af6:	d002      	beq.n	8007afe <pbuf_cat+0x16>
 8007af8:	683b      	ldr	r3, [r7, #0]
 8007afa:	2b00      	cmp	r3, #0
 8007afc:	d107      	bne.n	8007b0e <pbuf_cat+0x26>
 8007afe:	4b20      	ldr	r3, [pc, #128]	; (8007b80 <pbuf_cat+0x98>)
 8007b00:	f240 324d 	movw	r2, #845	; 0x34d
 8007b04:	491f      	ldr	r1, [pc, #124]	; (8007b84 <pbuf_cat+0x9c>)
 8007b06:	4820      	ldr	r0, [pc, #128]	; (8007b88 <pbuf_cat+0xa0>)
 8007b08:	f008 fd12 	bl	8010530 <iprintf>
 8007b0c:	e034      	b.n	8007b78 <pbuf_cat+0x90>
             ((h != NULL) && (t != NULL)), return;);

  /* proceed to last pbuf of chain */
  for (p = h; p->next != NULL; p = p->next) {
 8007b0e:	687b      	ldr	r3, [r7, #4]
 8007b10:	60fb      	str	r3, [r7, #12]
 8007b12:	e00a      	b.n	8007b2a <pbuf_cat+0x42>
    /* add total length of second chain to all totals of first chain */
    p->tot_len += t->tot_len;
 8007b14:	68fb      	ldr	r3, [r7, #12]
 8007b16:	891a      	ldrh	r2, [r3, #8]
 8007b18:	683b      	ldr	r3, [r7, #0]
 8007b1a:	891b      	ldrh	r3, [r3, #8]
 8007b1c:	4413      	add	r3, r2
 8007b1e:	b29a      	uxth	r2, r3
 8007b20:	68fb      	ldr	r3, [r7, #12]
 8007b22:	811a      	strh	r2, [r3, #8]
  for (p = h; p->next != NULL; p = p->next) {
 8007b24:	68fb      	ldr	r3, [r7, #12]
 8007b26:	681b      	ldr	r3, [r3, #0]
 8007b28:	60fb      	str	r3, [r7, #12]
 8007b2a:	68fb      	ldr	r3, [r7, #12]
 8007b2c:	681b      	ldr	r3, [r3, #0]
 8007b2e:	2b00      	cmp	r3, #0
 8007b30:	d1f0      	bne.n	8007b14 <pbuf_cat+0x2c>
  }
  /* { p is last pbuf of first h chain, p->next == NULL } */
  LWIP_ASSERT("p->tot_len == p->len (of last pbuf in chain)", p->tot_len == p->len);
 8007b32:	68fb      	ldr	r3, [r7, #12]
 8007b34:	891a      	ldrh	r2, [r3, #8]
 8007b36:	68fb      	ldr	r3, [r7, #12]
 8007b38:	895b      	ldrh	r3, [r3, #10]
 8007b3a:	429a      	cmp	r2, r3
 8007b3c:	d006      	beq.n	8007b4c <pbuf_cat+0x64>
 8007b3e:	4b10      	ldr	r3, [pc, #64]	; (8007b80 <pbuf_cat+0x98>)
 8007b40:	f240 3255 	movw	r2, #853	; 0x355
 8007b44:	4911      	ldr	r1, [pc, #68]	; (8007b8c <pbuf_cat+0xa4>)
 8007b46:	4810      	ldr	r0, [pc, #64]	; (8007b88 <pbuf_cat+0xa0>)
 8007b48:	f008 fcf2 	bl	8010530 <iprintf>
  LWIP_ASSERT("p->next == NULL", p->next == NULL);
 8007b4c:	68fb      	ldr	r3, [r7, #12]
 8007b4e:	681b      	ldr	r3, [r3, #0]
 8007b50:	2b00      	cmp	r3, #0
 8007b52:	d006      	beq.n	8007b62 <pbuf_cat+0x7a>
 8007b54:	4b0a      	ldr	r3, [pc, #40]	; (8007b80 <pbuf_cat+0x98>)
 8007b56:	f240 3256 	movw	r2, #854	; 0x356
 8007b5a:	490d      	ldr	r1, [pc, #52]	; (8007b90 <pbuf_cat+0xa8>)
 8007b5c:	480a      	ldr	r0, [pc, #40]	; (8007b88 <pbuf_cat+0xa0>)
 8007b5e:	f008 fce7 	bl	8010530 <iprintf>
  /* add total length of second chain to last pbuf total of first chain */
  p->tot_len += t->tot_len;
 8007b62:	68fb      	ldr	r3, [r7, #12]
 8007b64:	891a      	ldrh	r2, [r3, #8]
 8007b66:	683b      	ldr	r3, [r7, #0]
 8007b68:	891b      	ldrh	r3, [r3, #8]
 8007b6a:	4413      	add	r3, r2
 8007b6c:	b29a      	uxth	r2, r3
 8007b6e:	68fb      	ldr	r3, [r7, #12]
 8007b70:	811a      	strh	r2, [r3, #8]
  /* chain last pbuf of head (p) with first of tail (t) */
  p->next = t;
 8007b72:	68fb      	ldr	r3, [r7, #12]
 8007b74:	683a      	ldr	r2, [r7, #0]
 8007b76:	601a      	str	r2, [r3, #0]
  /* p->next now references t, but the caller will drop its reference to t,
   * so netto there is no change to the reference count of t.
   */
}
 8007b78:	3710      	adds	r7, #16
 8007b7a:	46bd      	mov	sp, r7
 8007b7c:	bd80      	pop	{r7, pc}
 8007b7e:	bf00      	nop
 8007b80:	08011770 	.word	0x08011770
 8007b84:	08011a4c 	.word	0x08011a4c
 8007b88:	080117bc 	.word	0x080117bc
 8007b8c:	08011a84 	.word	0x08011a84
 8007b90:	08011ab4 	.word	0x08011ab4

08007b94 <pbuf_copy>:
 *         ERR_ARG if one of the pbufs is NULL or p_to is not big
 *                 enough to hold p_from
 */
err_t
pbuf_copy(struct pbuf *p_to, const struct pbuf *p_from)
{
 8007b94:	b580      	push	{r7, lr}
 8007b96:	b084      	sub	sp, #16
 8007b98:	af00      	add	r7, sp, #0
 8007b9a:	6078      	str	r0, [r7, #4]
 8007b9c:	6039      	str	r1, [r7, #0]
  u16_t offset_to=0, offset_from=0, len;
 8007b9e:	2300      	movs	r3, #0
 8007ba0:	81fb      	strh	r3, [r7, #14]
 8007ba2:	2300      	movs	r3, #0
 8007ba4:	81bb      	strh	r3, [r7, #12]

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy(%p, %p)\n",
    (const void*)p_to, (const void*)p_from));

  /* is the target big enough to hold the source? */
  LWIP_ERROR("pbuf_copy: target not big enough to hold source", ((p_to != NULL) &&
 8007ba6:	687b      	ldr	r3, [r7, #4]
 8007ba8:	2b00      	cmp	r3, #0
 8007baa:	d008      	beq.n	8007bbe <pbuf_copy+0x2a>
 8007bac:	683b      	ldr	r3, [r7, #0]
 8007bae:	2b00      	cmp	r3, #0
 8007bb0:	d005      	beq.n	8007bbe <pbuf_copy+0x2a>
 8007bb2:	687b      	ldr	r3, [r7, #4]
 8007bb4:	891a      	ldrh	r2, [r3, #8]
 8007bb6:	683b      	ldr	r3, [r7, #0]
 8007bb8:	891b      	ldrh	r3, [r3, #8]
 8007bba:	429a      	cmp	r2, r3
 8007bbc:	d209      	bcs.n	8007bd2 <pbuf_copy+0x3e>
 8007bbe:	4b54      	ldr	r3, [pc, #336]	; (8007d10 <pbuf_copy+0x17c>)
 8007bc0:	f240 32bd 	movw	r2, #957	; 0x3bd
 8007bc4:	4953      	ldr	r1, [pc, #332]	; (8007d14 <pbuf_copy+0x180>)
 8007bc6:	4854      	ldr	r0, [pc, #336]	; (8007d18 <pbuf_copy+0x184>)
 8007bc8:	f008 fcb2 	bl	8010530 <iprintf>
 8007bcc:	f06f 030f 	mvn.w	r3, #15
 8007bd0:	e099      	b.n	8007d06 <pbuf_copy+0x172>

  /* iterate through pbuf chain */
  do
  {
    /* copy one part of the original chain */
    if ((p_to->len - offset_to) >= (p_from->len - offset_from)) {
 8007bd2:	687b      	ldr	r3, [r7, #4]
 8007bd4:	895b      	ldrh	r3, [r3, #10]
 8007bd6:	461a      	mov	r2, r3
 8007bd8:	89fb      	ldrh	r3, [r7, #14]
 8007bda:	1ad2      	subs	r2, r2, r3
 8007bdc:	683b      	ldr	r3, [r7, #0]
 8007bde:	895b      	ldrh	r3, [r3, #10]
 8007be0:	4619      	mov	r1, r3
 8007be2:	89bb      	ldrh	r3, [r7, #12]
 8007be4:	1acb      	subs	r3, r1, r3
 8007be6:	429a      	cmp	r2, r3
 8007be8:	db05      	blt.n	8007bf6 <pbuf_copy+0x62>
      /* complete current p_from fits into current p_to */
      len = p_from->len - offset_from;
 8007bea:	683b      	ldr	r3, [r7, #0]
 8007bec:	895a      	ldrh	r2, [r3, #10]
 8007bee:	89bb      	ldrh	r3, [r7, #12]
 8007bf0:	1ad3      	subs	r3, r2, r3
 8007bf2:	817b      	strh	r3, [r7, #10]
 8007bf4:	e004      	b.n	8007c00 <pbuf_copy+0x6c>
    } else {
      /* current p_from does not fit into current p_to */
      len = p_to->len - offset_to;
 8007bf6:	687b      	ldr	r3, [r7, #4]
 8007bf8:	895a      	ldrh	r2, [r3, #10]
 8007bfa:	89fb      	ldrh	r3, [r7, #14]
 8007bfc:	1ad3      	subs	r3, r2, r3
 8007bfe:	817b      	strh	r3, [r7, #10]
    }
    MEMCPY((u8_t*)p_to->payload + offset_to, (u8_t*)p_from->payload + offset_from, len);
 8007c00:	687b      	ldr	r3, [r7, #4]
 8007c02:	685a      	ldr	r2, [r3, #4]
 8007c04:	89fb      	ldrh	r3, [r7, #14]
 8007c06:	18d0      	adds	r0, r2, r3
 8007c08:	683b      	ldr	r3, [r7, #0]
 8007c0a:	685a      	ldr	r2, [r3, #4]
 8007c0c:	89bb      	ldrh	r3, [r7, #12]
 8007c0e:	4413      	add	r3, r2
 8007c10:	897a      	ldrh	r2, [r7, #10]
 8007c12:	4619      	mov	r1, r3
 8007c14:	f008 fc79 	bl	801050a <memcpy>
    offset_to += len;
 8007c18:	89fa      	ldrh	r2, [r7, #14]
 8007c1a:	897b      	ldrh	r3, [r7, #10]
 8007c1c:	4413      	add	r3, r2
 8007c1e:	81fb      	strh	r3, [r7, #14]
    offset_from += len;
 8007c20:	89ba      	ldrh	r2, [r7, #12]
 8007c22:	897b      	ldrh	r3, [r7, #10]
 8007c24:	4413      	add	r3, r2
 8007c26:	81bb      	strh	r3, [r7, #12]
    LWIP_ASSERT("offset_to <= p_to->len", offset_to <= p_to->len);
 8007c28:	687b      	ldr	r3, [r7, #4]
 8007c2a:	895b      	ldrh	r3, [r3, #10]
 8007c2c:	89fa      	ldrh	r2, [r7, #14]
 8007c2e:	429a      	cmp	r2, r3
 8007c30:	d906      	bls.n	8007c40 <pbuf_copy+0xac>
 8007c32:	4b37      	ldr	r3, [pc, #220]	; (8007d10 <pbuf_copy+0x17c>)
 8007c34:	f240 32cd 	movw	r2, #973	; 0x3cd
 8007c38:	4938      	ldr	r1, [pc, #224]	; (8007d1c <pbuf_copy+0x188>)
 8007c3a:	4837      	ldr	r0, [pc, #220]	; (8007d18 <pbuf_copy+0x184>)
 8007c3c:	f008 fc78 	bl	8010530 <iprintf>
    LWIP_ASSERT("offset_from <= p_from->len", offset_from <= p_from->len);
 8007c40:	683b      	ldr	r3, [r7, #0]
 8007c42:	895b      	ldrh	r3, [r3, #10]
 8007c44:	89ba      	ldrh	r2, [r7, #12]
 8007c46:	429a      	cmp	r2, r3
 8007c48:	d906      	bls.n	8007c58 <pbuf_copy+0xc4>
 8007c4a:	4b31      	ldr	r3, [pc, #196]	; (8007d10 <pbuf_copy+0x17c>)
 8007c4c:	f240 32ce 	movw	r2, #974	; 0x3ce
 8007c50:	4933      	ldr	r1, [pc, #204]	; (8007d20 <pbuf_copy+0x18c>)
 8007c52:	4831      	ldr	r0, [pc, #196]	; (8007d18 <pbuf_copy+0x184>)
 8007c54:	f008 fc6c 	bl	8010530 <iprintf>
    if (offset_from >= p_from->len) {
 8007c58:	683b      	ldr	r3, [r7, #0]
 8007c5a:	895b      	ldrh	r3, [r3, #10]
 8007c5c:	89ba      	ldrh	r2, [r7, #12]
 8007c5e:	429a      	cmp	r2, r3
 8007c60:	d304      	bcc.n	8007c6c <pbuf_copy+0xd8>
      /* on to next p_from (if any) */
      offset_from = 0;
 8007c62:	2300      	movs	r3, #0
 8007c64:	81bb      	strh	r3, [r7, #12]
      p_from = p_from->next;
 8007c66:	683b      	ldr	r3, [r7, #0]
 8007c68:	681b      	ldr	r3, [r3, #0]
 8007c6a:	603b      	str	r3, [r7, #0]
    }
    if (offset_to == p_to->len) {
 8007c6c:	687b      	ldr	r3, [r7, #4]
 8007c6e:	895b      	ldrh	r3, [r3, #10]
 8007c70:	89fa      	ldrh	r2, [r7, #14]
 8007c72:	429a      	cmp	r2, r3
 8007c74:	d114      	bne.n	8007ca0 <pbuf_copy+0x10c>
      /* on to next p_to (if any) */
      offset_to = 0;
 8007c76:	2300      	movs	r3, #0
 8007c78:	81fb      	strh	r3, [r7, #14]
      p_to = p_to->next;
 8007c7a:	687b      	ldr	r3, [r7, #4]
 8007c7c:	681b      	ldr	r3, [r3, #0]
 8007c7e:	607b      	str	r3, [r7, #4]
      LWIP_ERROR("p_to != NULL", (p_to != NULL) || (p_from == NULL) , return ERR_ARG;);
 8007c80:	687b      	ldr	r3, [r7, #4]
 8007c82:	2b00      	cmp	r3, #0
 8007c84:	d10c      	bne.n	8007ca0 <pbuf_copy+0x10c>
 8007c86:	683b      	ldr	r3, [r7, #0]
 8007c88:	2b00      	cmp	r3, #0
 8007c8a:	d009      	beq.n	8007ca0 <pbuf_copy+0x10c>
 8007c8c:	4b20      	ldr	r3, [pc, #128]	; (8007d10 <pbuf_copy+0x17c>)
 8007c8e:	f44f 7276 	mov.w	r2, #984	; 0x3d8
 8007c92:	4924      	ldr	r1, [pc, #144]	; (8007d24 <pbuf_copy+0x190>)
 8007c94:	4820      	ldr	r0, [pc, #128]	; (8007d18 <pbuf_copy+0x184>)
 8007c96:	f008 fc4b 	bl	8010530 <iprintf>
 8007c9a:	f06f 030f 	mvn.w	r3, #15
 8007c9e:	e032      	b.n	8007d06 <pbuf_copy+0x172>
    }

    if ((p_from != NULL) && (p_from->len == p_from->tot_len)) {
 8007ca0:	683b      	ldr	r3, [r7, #0]
 8007ca2:	2b00      	cmp	r3, #0
 8007ca4:	d013      	beq.n	8007cce <pbuf_copy+0x13a>
 8007ca6:	683b      	ldr	r3, [r7, #0]
 8007ca8:	895a      	ldrh	r2, [r3, #10]
 8007caa:	683b      	ldr	r3, [r7, #0]
 8007cac:	891b      	ldrh	r3, [r3, #8]
 8007cae:	429a      	cmp	r2, r3
 8007cb0:	d10d      	bne.n	8007cce <pbuf_copy+0x13a>
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 8007cb2:	683b      	ldr	r3, [r7, #0]
 8007cb4:	681b      	ldr	r3, [r3, #0]
 8007cb6:	2b00      	cmp	r3, #0
 8007cb8:	d009      	beq.n	8007cce <pbuf_copy+0x13a>
 8007cba:	4b15      	ldr	r3, [pc, #84]	; (8007d10 <pbuf_copy+0x17c>)
 8007cbc:	f240 32de 	movw	r2, #990	; 0x3de
 8007cc0:	4919      	ldr	r1, [pc, #100]	; (8007d28 <pbuf_copy+0x194>)
 8007cc2:	4815      	ldr	r0, [pc, #84]	; (8007d18 <pbuf_copy+0x184>)
 8007cc4:	f008 fc34 	bl	8010530 <iprintf>
 8007cc8:	f06f 0305 	mvn.w	r3, #5
 8007ccc:	e01b      	b.n	8007d06 <pbuf_copy+0x172>
                 (p_from->next == NULL), return ERR_VAL;);
    }
    if ((p_to != NULL) && (p_to->len == p_to->tot_len)) {
 8007cce:	687b      	ldr	r3, [r7, #4]
 8007cd0:	2b00      	cmp	r3, #0
 8007cd2:	d013      	beq.n	8007cfc <pbuf_copy+0x168>
 8007cd4:	687b      	ldr	r3, [r7, #4]
 8007cd6:	895a      	ldrh	r2, [r3, #10]
 8007cd8:	687b      	ldr	r3, [r7, #4]
 8007cda:	891b      	ldrh	r3, [r3, #8]
 8007cdc:	429a      	cmp	r2, r3
 8007cde:	d10d      	bne.n	8007cfc <pbuf_copy+0x168>
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 8007ce0:	687b      	ldr	r3, [r7, #4]
 8007ce2:	681b      	ldr	r3, [r3, #0]
 8007ce4:	2b00      	cmp	r3, #0
 8007ce6:	d009      	beq.n	8007cfc <pbuf_copy+0x168>
 8007ce8:	4b09      	ldr	r3, [pc, #36]	; (8007d10 <pbuf_copy+0x17c>)
 8007cea:	f240 32e3 	movw	r2, #995	; 0x3e3
 8007cee:	490e      	ldr	r1, [pc, #56]	; (8007d28 <pbuf_copy+0x194>)
 8007cf0:	4809      	ldr	r0, [pc, #36]	; (8007d18 <pbuf_copy+0x184>)
 8007cf2:	f008 fc1d 	bl	8010530 <iprintf>
 8007cf6:	f06f 0305 	mvn.w	r3, #5
 8007cfa:	e004      	b.n	8007d06 <pbuf_copy+0x172>
                  (p_to->next == NULL), return ERR_VAL;);
    }
  } while (p_from);
 8007cfc:	683b      	ldr	r3, [r7, #0]
 8007cfe:	2b00      	cmp	r3, #0
 8007d00:	f47f af67 	bne.w	8007bd2 <pbuf_copy+0x3e>
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy: end of chain reached.\n"));
  return ERR_OK;
 8007d04:	2300      	movs	r3, #0
}
 8007d06:	4618      	mov	r0, r3
 8007d08:	3710      	adds	r7, #16
 8007d0a:	46bd      	mov	sp, r7
 8007d0c:	bd80      	pop	{r7, pc}
 8007d0e:	bf00      	nop
 8007d10:	08011770 	.word	0x08011770
 8007d14:	08011b00 	.word	0x08011b00
 8007d18:	080117bc 	.word	0x080117bc
 8007d1c:	08011b30 	.word	0x08011b30
 8007d20:	08011b48 	.word	0x08011b48
 8007d24:	08011b64 	.word	0x08011b64
 8007d28:	08011b74 	.word	0x08011b74

08007d2c <pbuf_copy_partial>:
 * @param offset offset into the packet buffer from where to begin copying len bytes
 * @return the number of bytes copied, or 0 on failure
 */
u16_t
pbuf_copy_partial(const struct pbuf *buf, void *dataptr, u16_t len, u16_t offset)
{
 8007d2c:	b580      	push	{r7, lr}
 8007d2e:	b088      	sub	sp, #32
 8007d30:	af00      	add	r7, sp, #0
 8007d32:	60f8      	str	r0, [r7, #12]
 8007d34:	60b9      	str	r1, [r7, #8]
 8007d36:	4611      	mov	r1, r2
 8007d38:	461a      	mov	r2, r3
 8007d3a:	460b      	mov	r3, r1
 8007d3c:	80fb      	strh	r3, [r7, #6]
 8007d3e:	4613      	mov	r3, r2
 8007d40:	80bb      	strh	r3, [r7, #4]
  const struct pbuf *p;
  u16_t left;
  u16_t buf_copy_len;
  u16_t copied_total = 0;
 8007d42:	2300      	movs	r3, #0
 8007d44:	82fb      	strh	r3, [r7, #22]

  LWIP_ERROR("pbuf_copy_partial: invalid buf", (buf != NULL), return 0;);
 8007d46:	68fb      	ldr	r3, [r7, #12]
 8007d48:	2b00      	cmp	r3, #0
 8007d4a:	d108      	bne.n	8007d5e <pbuf_copy_partial+0x32>
 8007d4c:	4b30      	ldr	r3, [pc, #192]	; (8007e10 <pbuf_copy_partial+0xe4>)
 8007d4e:	f240 32fe 	movw	r2, #1022	; 0x3fe
 8007d52:	4930      	ldr	r1, [pc, #192]	; (8007e14 <pbuf_copy_partial+0xe8>)
 8007d54:	4830      	ldr	r0, [pc, #192]	; (8007e18 <pbuf_copy_partial+0xec>)
 8007d56:	f008 fbeb 	bl	8010530 <iprintf>
 8007d5a:	2300      	movs	r3, #0
 8007d5c:	e054      	b.n	8007e08 <pbuf_copy_partial+0xdc>
  LWIP_ERROR("pbuf_copy_partial: invalid dataptr", (dataptr != NULL), return 0;);
 8007d5e:	68bb      	ldr	r3, [r7, #8]
 8007d60:	2b00      	cmp	r3, #0
 8007d62:	d108      	bne.n	8007d76 <pbuf_copy_partial+0x4a>
 8007d64:	4b2a      	ldr	r3, [pc, #168]	; (8007e10 <pbuf_copy_partial+0xe4>)
 8007d66:	f240 32ff 	movw	r2, #1023	; 0x3ff
 8007d6a:	492c      	ldr	r1, [pc, #176]	; (8007e1c <pbuf_copy_partial+0xf0>)
 8007d6c:	482a      	ldr	r0, [pc, #168]	; (8007e18 <pbuf_copy_partial+0xec>)
 8007d6e:	f008 fbdf 	bl	8010530 <iprintf>
 8007d72:	2300      	movs	r3, #0
 8007d74:	e048      	b.n	8007e08 <pbuf_copy_partial+0xdc>

  left = 0;
 8007d76:	2300      	movs	r3, #0
 8007d78:	837b      	strh	r3, [r7, #26]

  if ((buf == NULL) || (dataptr == NULL)) {
 8007d7a:	68fb      	ldr	r3, [r7, #12]
 8007d7c:	2b00      	cmp	r3, #0
 8007d7e:	d002      	beq.n	8007d86 <pbuf_copy_partial+0x5a>
 8007d80:	68bb      	ldr	r3, [r7, #8]
 8007d82:	2b00      	cmp	r3, #0
 8007d84:	d101      	bne.n	8007d8a <pbuf_copy_partial+0x5e>
    return 0;
 8007d86:	2300      	movs	r3, #0
 8007d88:	e03e      	b.n	8007e08 <pbuf_copy_partial+0xdc>
  }

  /* Note some systems use byte copy if dataptr or one of the pbuf payload pointers are unaligned. */
  for (p = buf; len != 0 && p != NULL; p = p->next) {
 8007d8a:	68fb      	ldr	r3, [r7, #12]
 8007d8c:	61fb      	str	r3, [r7, #28]
 8007d8e:	e034      	b.n	8007dfa <pbuf_copy_partial+0xce>
    if ((offset != 0) && (offset >= p->len)) {
 8007d90:	88bb      	ldrh	r3, [r7, #4]
 8007d92:	2b00      	cmp	r3, #0
 8007d94:	d00a      	beq.n	8007dac <pbuf_copy_partial+0x80>
 8007d96:	69fb      	ldr	r3, [r7, #28]
 8007d98:	895b      	ldrh	r3, [r3, #10]
 8007d9a:	88ba      	ldrh	r2, [r7, #4]
 8007d9c:	429a      	cmp	r2, r3
 8007d9e:	d305      	bcc.n	8007dac <pbuf_copy_partial+0x80>
      /* don't copy from this buffer -> on to the next */
      offset -= p->len;
 8007da0:	69fb      	ldr	r3, [r7, #28]
 8007da2:	895b      	ldrh	r3, [r3, #10]
 8007da4:	88ba      	ldrh	r2, [r7, #4]
 8007da6:	1ad3      	subs	r3, r2, r3
 8007da8:	80bb      	strh	r3, [r7, #4]
 8007daa:	e023      	b.n	8007df4 <pbuf_copy_partial+0xc8>
    } else {
      /* copy from this buffer. maybe only partially. */
      buf_copy_len = p->len - offset;
 8007dac:	69fb      	ldr	r3, [r7, #28]
 8007dae:	895a      	ldrh	r2, [r3, #10]
 8007db0:	88bb      	ldrh	r3, [r7, #4]
 8007db2:	1ad3      	subs	r3, r2, r3
 8007db4:	833b      	strh	r3, [r7, #24]
      if (buf_copy_len > len) {
 8007db6:	8b3a      	ldrh	r2, [r7, #24]
 8007db8:	88fb      	ldrh	r3, [r7, #6]
 8007dba:	429a      	cmp	r2, r3
 8007dbc:	d901      	bls.n	8007dc2 <pbuf_copy_partial+0x96>
        buf_copy_len = len;
 8007dbe:	88fb      	ldrh	r3, [r7, #6]
 8007dc0:	833b      	strh	r3, [r7, #24]
      }
      /* copy the necessary parts of the buffer */
      MEMCPY(&((char*)dataptr)[left], &((char*)p->payload)[offset], buf_copy_len);
 8007dc2:	8b7b      	ldrh	r3, [r7, #26]
 8007dc4:	68ba      	ldr	r2, [r7, #8]
 8007dc6:	18d0      	adds	r0, r2, r3
 8007dc8:	69fb      	ldr	r3, [r7, #28]
 8007dca:	685a      	ldr	r2, [r3, #4]
 8007dcc:	88bb      	ldrh	r3, [r7, #4]
 8007dce:	4413      	add	r3, r2
 8007dd0:	8b3a      	ldrh	r2, [r7, #24]
 8007dd2:	4619      	mov	r1, r3
 8007dd4:	f008 fb99 	bl	801050a <memcpy>
      copied_total += buf_copy_len;
 8007dd8:	8afa      	ldrh	r2, [r7, #22]
 8007dda:	8b3b      	ldrh	r3, [r7, #24]
 8007ddc:	4413      	add	r3, r2
 8007dde:	82fb      	strh	r3, [r7, #22]
      left += buf_copy_len;
 8007de0:	8b7a      	ldrh	r2, [r7, #26]
 8007de2:	8b3b      	ldrh	r3, [r7, #24]
 8007de4:	4413      	add	r3, r2
 8007de6:	837b      	strh	r3, [r7, #26]
      len -= buf_copy_len;
 8007de8:	88fa      	ldrh	r2, [r7, #6]
 8007dea:	8b3b      	ldrh	r3, [r7, #24]
 8007dec:	1ad3      	subs	r3, r2, r3
 8007dee:	80fb      	strh	r3, [r7, #6]
      offset = 0;
 8007df0:	2300      	movs	r3, #0
 8007df2:	80bb      	strh	r3, [r7, #4]
  for (p = buf; len != 0 && p != NULL; p = p->next) {
 8007df4:	69fb      	ldr	r3, [r7, #28]
 8007df6:	681b      	ldr	r3, [r3, #0]
 8007df8:	61fb      	str	r3, [r7, #28]
 8007dfa:	88fb      	ldrh	r3, [r7, #6]
 8007dfc:	2b00      	cmp	r3, #0
 8007dfe:	d002      	beq.n	8007e06 <pbuf_copy_partial+0xda>
 8007e00:	69fb      	ldr	r3, [r7, #28]
 8007e02:	2b00      	cmp	r3, #0
 8007e04:	d1c4      	bne.n	8007d90 <pbuf_copy_partial+0x64>
    }
  }
  return copied_total;
 8007e06:	8afb      	ldrh	r3, [r7, #22]
}
 8007e08:	4618      	mov	r0, r3
 8007e0a:	3720      	adds	r7, #32
 8007e0c:	46bd      	mov	sp, r7
 8007e0e:	bd80      	pop	{r7, pc}
 8007e10:	08011770 	.word	0x08011770
 8007e14:	08011ba0 	.word	0x08011ba0
 8007e18:	080117bc 	.word	0x080117bc
 8007e1c:	08011bc0 	.word	0x08011bc0

08007e20 <tcp_init>:
/**
 * Initialize this module.
 */
void
tcp_init(void)
{
 8007e20:	b480      	push	{r7}
 8007e22:	af00      	add	r7, sp, #0
#if LWIP_RANDOMIZE_INITIAL_LOCAL_PORTS && defined(LWIP_RAND)
  tcp_port = TCP_ENSURE_LOCAL_PORT_RANGE(LWIP_RAND());
#endif /* LWIP_RANDOMIZE_INITIAL_LOCAL_PORTS && defined(LWIP_RAND) */
}
 8007e24:	bf00      	nop
 8007e26:	46bd      	mov	sp, r7
 8007e28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e2c:	4770      	bx	lr
	...

08007e30 <tcp_tmr>:
/**
 * Called periodically to dispatch TCP timers.
 */
void
tcp_tmr(void)
{
 8007e30:	b580      	push	{r7, lr}
 8007e32:	af00      	add	r7, sp, #0
  /* Call tcp_fasttmr() every 250 ms */
  tcp_fasttmr();
 8007e34:	f000 fdf4 	bl	8008a20 <tcp_fasttmr>

  if (++tcp_timer & 1) {
 8007e38:	4b07      	ldr	r3, [pc, #28]	; (8007e58 <tcp_tmr+0x28>)
 8007e3a:	781b      	ldrb	r3, [r3, #0]
 8007e3c:	3301      	adds	r3, #1
 8007e3e:	b2da      	uxtb	r2, r3
 8007e40:	4b05      	ldr	r3, [pc, #20]	; (8007e58 <tcp_tmr+0x28>)
 8007e42:	701a      	strb	r2, [r3, #0]
 8007e44:	4b04      	ldr	r3, [pc, #16]	; (8007e58 <tcp_tmr+0x28>)
 8007e46:	781b      	ldrb	r3, [r3, #0]
 8007e48:	f003 0301 	and.w	r3, r3, #1
 8007e4c:	2b00      	cmp	r3, #0
 8007e4e:	d001      	beq.n	8007e54 <tcp_tmr+0x24>
    /* Call tcp_slowtmr() every 500 ms, i.e., every other timer
       tcp_tmr() is called. */
    tcp_slowtmr();
 8007e50:	f000 fb26 	bl	80084a0 <tcp_slowtmr>
  }
}
 8007e54:	bf00      	nop
 8007e56:	bd80      	pop	{r7, pc}
 8007e58:	2400403d 	.word	0x2400403d

08007e5c <tcp_remove_listener>:
/** Called when a listen pcb is closed. Iterates one pcb list and removes the
 * closed listener pcb from pcb->listener if matching.
 */
static void
tcp_remove_listener(struct tcp_pcb *list, struct tcp_pcb_listen *lpcb)
{
 8007e5c:	b480      	push	{r7}
 8007e5e:	b085      	sub	sp, #20
 8007e60:	af00      	add	r7, sp, #0
 8007e62:	6078      	str	r0, [r7, #4]
 8007e64:	6039      	str	r1, [r7, #0]
   struct tcp_pcb *pcb;
   for (pcb = list; pcb != NULL; pcb = pcb->next) {
 8007e66:	687b      	ldr	r3, [r7, #4]
 8007e68:	60fb      	str	r3, [r7, #12]
 8007e6a:	e00a      	b.n	8007e82 <tcp_remove_listener+0x26>
      if (pcb->listener == lpcb) {
 8007e6c:	68fb      	ldr	r3, [r7, #12]
 8007e6e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8007e70:	683a      	ldr	r2, [r7, #0]
 8007e72:	429a      	cmp	r2, r3
 8007e74:	d102      	bne.n	8007e7c <tcp_remove_listener+0x20>
         pcb->listener = NULL;
 8007e76:	68fb      	ldr	r3, [r7, #12]
 8007e78:	2200      	movs	r2, #0
 8007e7a:	679a      	str	r2, [r3, #120]	; 0x78
   for (pcb = list; pcb != NULL; pcb = pcb->next) {
 8007e7c:	68fb      	ldr	r3, [r7, #12]
 8007e7e:	68db      	ldr	r3, [r3, #12]
 8007e80:	60fb      	str	r3, [r7, #12]
 8007e82:	68fb      	ldr	r3, [r7, #12]
 8007e84:	2b00      	cmp	r3, #0
 8007e86:	d1f1      	bne.n	8007e6c <tcp_remove_listener+0x10>
      }
   }
}
 8007e88:	bf00      	nop
 8007e8a:	3714      	adds	r7, #20
 8007e8c:	46bd      	mov	sp, r7
 8007e8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e92:	4770      	bx	lr

08007e94 <tcp_listen_closed>:
/** Called when a listen pcb is closed. Iterates all pcb lists and removes the
 * closed listener pcb from pcb->listener if matching.
 */
static void
tcp_listen_closed(struct tcp_pcb *pcb)
{
 8007e94:	b580      	push	{r7, lr}
 8007e96:	b084      	sub	sp, #16
 8007e98:	af00      	add	r7, sp, #0
 8007e9a:	6078      	str	r0, [r7, #4]
#if LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG
  size_t i;
  LWIP_ASSERT("pcb != NULL", pcb != NULL);
 8007e9c:	687b      	ldr	r3, [r7, #4]
 8007e9e:	2b00      	cmp	r3, #0
 8007ea0:	d105      	bne.n	8007eae <tcp_listen_closed+0x1a>
 8007ea2:	4b13      	ldr	r3, [pc, #76]	; (8007ef0 <tcp_listen_closed+0x5c>)
 8007ea4:	22c0      	movs	r2, #192	; 0xc0
 8007ea6:	4913      	ldr	r1, [pc, #76]	; (8007ef4 <tcp_listen_closed+0x60>)
 8007ea8:	4813      	ldr	r0, [pc, #76]	; (8007ef8 <tcp_listen_closed+0x64>)
 8007eaa:	f008 fb41 	bl	8010530 <iprintf>
  LWIP_ASSERT("pcb->state == LISTEN", pcb->state == LISTEN);
 8007eae:	687b      	ldr	r3, [r7, #4]
 8007eb0:	7d1b      	ldrb	r3, [r3, #20]
 8007eb2:	2b01      	cmp	r3, #1
 8007eb4:	d005      	beq.n	8007ec2 <tcp_listen_closed+0x2e>
 8007eb6:	4b0e      	ldr	r3, [pc, #56]	; (8007ef0 <tcp_listen_closed+0x5c>)
 8007eb8:	22c1      	movs	r2, #193	; 0xc1
 8007eba:	4910      	ldr	r1, [pc, #64]	; (8007efc <tcp_listen_closed+0x68>)
 8007ebc:	480e      	ldr	r0, [pc, #56]	; (8007ef8 <tcp_listen_closed+0x64>)
 8007ebe:	f008 fb37 	bl	8010530 <iprintf>
  for (i = 1; i < LWIP_ARRAYSIZE(tcp_pcb_lists); i++) {
 8007ec2:	2301      	movs	r3, #1
 8007ec4:	60fb      	str	r3, [r7, #12]
 8007ec6:	e00b      	b.n	8007ee0 <tcp_listen_closed+0x4c>
    tcp_remove_listener(*tcp_pcb_lists[i], (struct tcp_pcb_listen*)pcb);
 8007ec8:	4a0d      	ldr	r2, [pc, #52]	; (8007f00 <tcp_listen_closed+0x6c>)
 8007eca:	68fb      	ldr	r3, [r7, #12]
 8007ecc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007ed0:	681b      	ldr	r3, [r3, #0]
 8007ed2:	6879      	ldr	r1, [r7, #4]
 8007ed4:	4618      	mov	r0, r3
 8007ed6:	f7ff ffc1 	bl	8007e5c <tcp_remove_listener>
  for (i = 1; i < LWIP_ARRAYSIZE(tcp_pcb_lists); i++) {
 8007eda:	68fb      	ldr	r3, [r7, #12]
 8007edc:	3301      	adds	r3, #1
 8007ede:	60fb      	str	r3, [r7, #12]
 8007ee0:	68fb      	ldr	r3, [r7, #12]
 8007ee2:	2b03      	cmp	r3, #3
 8007ee4:	d9f0      	bls.n	8007ec8 <tcp_listen_closed+0x34>
  }
#endif
  LWIP_UNUSED_ARG(pcb);
}
 8007ee6:	bf00      	nop
 8007ee8:	3710      	adds	r7, #16
 8007eea:	46bd      	mov	sp, r7
 8007eec:	bd80      	pop	{r7, pc}
 8007eee:	bf00      	nop
 8007ef0:	08011cf4 	.word	0x08011cf4
 8007ef4:	08011d24 	.word	0x08011d24
 8007ef8:	08011d30 	.word	0x08011d30
 8007efc:	08011d58 	.word	0x08011d58
 8007f00:	080131d4 	.word	0x080131d4

08007f04 <tcp_close_shutdown>:
 * @return ERR_OK if connection has been closed
 *         another err_t if closing failed and pcb is not freed
 */
static err_t
tcp_close_shutdown(struct tcp_pcb *pcb, u8_t rst_on_unacked_data)
{
 8007f04:	b5b0      	push	{r4, r5, r7, lr}
 8007f06:	b086      	sub	sp, #24
 8007f08:	af02      	add	r7, sp, #8
 8007f0a:	6078      	str	r0, [r7, #4]
 8007f0c:	460b      	mov	r3, r1
 8007f0e:	70fb      	strb	r3, [r7, #3]
  if (rst_on_unacked_data && ((pcb->state == ESTABLISHED) || (pcb->state == CLOSE_WAIT))) {
 8007f10:	78fb      	ldrb	r3, [r7, #3]
 8007f12:	2b00      	cmp	r3, #0
 8007f14:	d076      	beq.n	8008004 <tcp_close_shutdown+0x100>
 8007f16:	687b      	ldr	r3, [r7, #4]
 8007f18:	7d1b      	ldrb	r3, [r3, #20]
 8007f1a:	2b04      	cmp	r3, #4
 8007f1c:	d003      	beq.n	8007f26 <tcp_close_shutdown+0x22>
 8007f1e:	687b      	ldr	r3, [r7, #4]
 8007f20:	7d1b      	ldrb	r3, [r3, #20]
 8007f22:	2b07      	cmp	r3, #7
 8007f24:	d16e      	bne.n	8008004 <tcp_close_shutdown+0x100>
    if ((pcb->refused_data != NULL) || (pcb->rcv_wnd != TCP_WND_MAX(pcb))) {
 8007f26:	687b      	ldr	r3, [r7, #4]
 8007f28:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007f2a:	2b00      	cmp	r3, #0
 8007f2c:	d105      	bne.n	8007f3a <tcp_close_shutdown+0x36>
 8007f2e:	687b      	ldr	r3, [r7, #4]
 8007f30:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007f32:	f241 62d0 	movw	r2, #5840	; 0x16d0
 8007f36:	4293      	cmp	r3, r2
 8007f38:	d064      	beq.n	8008004 <tcp_close_shutdown+0x100>
      /* Not all data received by application, send RST to tell the remote
         side about this. */
      LWIP_ASSERT("pcb->flags & TF_RXCLOSED", pcb->flags & TF_RXCLOSED);
 8007f3a:	687b      	ldr	r3, [r7, #4]
 8007f3c:	7e9b      	ldrb	r3, [r3, #26]
 8007f3e:	f003 0310 	and.w	r3, r3, #16
 8007f42:	2b00      	cmp	r3, #0
 8007f44:	d106      	bne.n	8007f54 <tcp_close_shutdown+0x50>
 8007f46:	4b5a      	ldr	r3, [pc, #360]	; (80080b0 <tcp_close_shutdown+0x1ac>)
 8007f48:	f240 120f 	movw	r2, #271	; 0x10f
 8007f4c:	4959      	ldr	r1, [pc, #356]	; (80080b4 <tcp_close_shutdown+0x1b0>)
 8007f4e:	485a      	ldr	r0, [pc, #360]	; (80080b8 <tcp_close_shutdown+0x1b4>)
 8007f50:	f008 faee 	bl	8010530 <iprintf>

      /* don't call tcp_abort here: we must not deallocate the pcb since
         that might not be expected when calling tcp_close */
      tcp_rst(pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
 8007f54:	687b      	ldr	r3, [r7, #4]
 8007f56:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 8007f58:	687b      	ldr	r3, [r7, #4]
 8007f5a:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8007f5c:	687c      	ldr	r4, [r7, #4]
 8007f5e:	687b      	ldr	r3, [r7, #4]
 8007f60:	1d1d      	adds	r5, r3, #4
 8007f62:	687b      	ldr	r3, [r7, #4]
 8007f64:	8adb      	ldrh	r3, [r3, #22]
 8007f66:	687a      	ldr	r2, [r7, #4]
 8007f68:	8b12      	ldrh	r2, [r2, #24]
 8007f6a:	9201      	str	r2, [sp, #4]
 8007f6c:	9300      	str	r3, [sp, #0]
 8007f6e:	462b      	mov	r3, r5
 8007f70:	4622      	mov	r2, r4
 8007f72:	f004 f865 	bl	800c040 <tcp_rst>
               pcb->local_port, pcb->remote_port);

      tcp_pcb_purge(pcb);
 8007f76:	6878      	ldr	r0, [r7, #4]
 8007f78:	f000 ffc8 	bl	8008f0c <tcp_pcb_purge>
      TCP_RMV_ACTIVE(pcb);
 8007f7c:	4b4f      	ldr	r3, [pc, #316]	; (80080bc <tcp_close_shutdown+0x1b8>)
 8007f7e:	681b      	ldr	r3, [r3, #0]
 8007f80:	687a      	ldr	r2, [r7, #4]
 8007f82:	429a      	cmp	r2, r3
 8007f84:	d105      	bne.n	8007f92 <tcp_close_shutdown+0x8e>
 8007f86:	4b4d      	ldr	r3, [pc, #308]	; (80080bc <tcp_close_shutdown+0x1b8>)
 8007f88:	681b      	ldr	r3, [r3, #0]
 8007f8a:	68db      	ldr	r3, [r3, #12]
 8007f8c:	4a4b      	ldr	r2, [pc, #300]	; (80080bc <tcp_close_shutdown+0x1b8>)
 8007f8e:	6013      	str	r3, [r2, #0]
 8007f90:	e013      	b.n	8007fba <tcp_close_shutdown+0xb6>
 8007f92:	4b4a      	ldr	r3, [pc, #296]	; (80080bc <tcp_close_shutdown+0x1b8>)
 8007f94:	681b      	ldr	r3, [r3, #0]
 8007f96:	60fb      	str	r3, [r7, #12]
 8007f98:	e00c      	b.n	8007fb4 <tcp_close_shutdown+0xb0>
 8007f9a:	68fb      	ldr	r3, [r7, #12]
 8007f9c:	68db      	ldr	r3, [r3, #12]
 8007f9e:	687a      	ldr	r2, [r7, #4]
 8007fa0:	429a      	cmp	r2, r3
 8007fa2:	d104      	bne.n	8007fae <tcp_close_shutdown+0xaa>
 8007fa4:	687b      	ldr	r3, [r7, #4]
 8007fa6:	68da      	ldr	r2, [r3, #12]
 8007fa8:	68fb      	ldr	r3, [r7, #12]
 8007faa:	60da      	str	r2, [r3, #12]
 8007fac:	e005      	b.n	8007fba <tcp_close_shutdown+0xb6>
 8007fae:	68fb      	ldr	r3, [r7, #12]
 8007fb0:	68db      	ldr	r3, [r3, #12]
 8007fb2:	60fb      	str	r3, [r7, #12]
 8007fb4:	68fb      	ldr	r3, [r7, #12]
 8007fb6:	2b00      	cmp	r3, #0
 8007fb8:	d1ef      	bne.n	8007f9a <tcp_close_shutdown+0x96>
 8007fba:	687b      	ldr	r3, [r7, #4]
 8007fbc:	2200      	movs	r2, #0
 8007fbe:	60da      	str	r2, [r3, #12]
 8007fc0:	4b3f      	ldr	r3, [pc, #252]	; (80080c0 <tcp_close_shutdown+0x1bc>)
 8007fc2:	2201      	movs	r2, #1
 8007fc4:	701a      	strb	r2, [r3, #0]
      if (pcb->state == ESTABLISHED) {
 8007fc6:	687b      	ldr	r3, [r7, #4]
 8007fc8:	7d1b      	ldrb	r3, [r3, #20]
 8007fca:	2b04      	cmp	r3, #4
 8007fcc:	d10c      	bne.n	8007fe8 <tcp_close_shutdown+0xe4>
        /* move to TIME_WAIT since we close actively */
        pcb->state = TIME_WAIT;
 8007fce:	687b      	ldr	r3, [r7, #4]
 8007fd0:	220a      	movs	r2, #10
 8007fd2:	751a      	strb	r2, [r3, #20]
        TCP_REG(&tcp_tw_pcbs, pcb);
 8007fd4:	4b3b      	ldr	r3, [pc, #236]	; (80080c4 <tcp_close_shutdown+0x1c0>)
 8007fd6:	681a      	ldr	r2, [r3, #0]
 8007fd8:	687b      	ldr	r3, [r7, #4]
 8007fda:	60da      	str	r2, [r3, #12]
 8007fdc:	4a39      	ldr	r2, [pc, #228]	; (80080c4 <tcp_close_shutdown+0x1c0>)
 8007fde:	687b      	ldr	r3, [r7, #4]
 8007fe0:	6013      	str	r3, [r2, #0]
 8007fe2:	f004 fa7f 	bl	800c4e4 <tcp_timer_needed>
 8007fe6:	e00b      	b.n	8008000 <tcp_close_shutdown+0xfc>
      } else {
        /* CLOSE_WAIT: deallocate the pcb since we already sent a RST for it */
        if (tcp_input_pcb == pcb) {
 8007fe8:	4b37      	ldr	r3, [pc, #220]	; (80080c8 <tcp_close_shutdown+0x1c4>)
 8007fea:	681b      	ldr	r3, [r3, #0]
 8007fec:	687a      	ldr	r2, [r7, #4]
 8007fee:	429a      	cmp	r2, r3
 8007ff0:	d102      	bne.n	8007ff8 <tcp_close_shutdown+0xf4>
          /* prevent using a deallocated pcb: free it from tcp_input later */
          tcp_trigger_input_pcb_close();
 8007ff2:	f003 faef 	bl	800b5d4 <tcp_trigger_input_pcb_close>
 8007ff6:	e003      	b.n	8008000 <tcp_close_shutdown+0xfc>
        } else {
          memp_free(MEMP_TCP_PCB, pcb);
 8007ff8:	6879      	ldr	r1, [r7, #4]
 8007ffa:	2001      	movs	r0, #1
 8007ffc:	f7fe fef0 	bl	8006de0 <memp_free>
        }
      }
      return ERR_OK;
 8008000:	2300      	movs	r3, #0
 8008002:	e050      	b.n	80080a6 <tcp_close_shutdown+0x1a2>
    }
  }

  /* - states which free the pcb are handled here,
     - states which send FIN and change state are handled in tcp_close_shutdown_fin() */
  switch (pcb->state) {
 8008004:	687b      	ldr	r3, [r7, #4]
 8008006:	7d1b      	ldrb	r3, [r3, #20]
 8008008:	2b01      	cmp	r3, #1
 800800a:	d02e      	beq.n	800806a <tcp_close_shutdown+0x166>
 800800c:	2b02      	cmp	r3, #2
 800800e:	d038      	beq.n	8008082 <tcp_close_shutdown+0x17e>
 8008010:	2b00      	cmp	r3, #0
 8008012:	d142      	bne.n	800809a <tcp_close_shutdown+0x196>
     * and the user needs some way to free it should the need arise.
     * Calling tcp_close() with a pcb that has already been closed, (i.e. twice)
     * or for a pcb that has been used and then entered the CLOSED state
     * is erroneous, but this should never happen as the pcb has in those cases
     * been freed, and so any remaining handles are bogus. */
    if (pcb->local_port != 0) {
 8008014:	687b      	ldr	r3, [r7, #4]
 8008016:	8adb      	ldrh	r3, [r3, #22]
 8008018:	2b00      	cmp	r3, #0
 800801a:	d021      	beq.n	8008060 <tcp_close_shutdown+0x15c>
      TCP_RMV(&tcp_bound_pcbs, pcb);
 800801c:	4b2b      	ldr	r3, [pc, #172]	; (80080cc <tcp_close_shutdown+0x1c8>)
 800801e:	681b      	ldr	r3, [r3, #0]
 8008020:	687a      	ldr	r2, [r7, #4]
 8008022:	429a      	cmp	r2, r3
 8008024:	d105      	bne.n	8008032 <tcp_close_shutdown+0x12e>
 8008026:	4b29      	ldr	r3, [pc, #164]	; (80080cc <tcp_close_shutdown+0x1c8>)
 8008028:	681b      	ldr	r3, [r3, #0]
 800802a:	68db      	ldr	r3, [r3, #12]
 800802c:	4a27      	ldr	r2, [pc, #156]	; (80080cc <tcp_close_shutdown+0x1c8>)
 800802e:	6013      	str	r3, [r2, #0]
 8008030:	e013      	b.n	800805a <tcp_close_shutdown+0x156>
 8008032:	4b26      	ldr	r3, [pc, #152]	; (80080cc <tcp_close_shutdown+0x1c8>)
 8008034:	681b      	ldr	r3, [r3, #0]
 8008036:	60bb      	str	r3, [r7, #8]
 8008038:	e00c      	b.n	8008054 <tcp_close_shutdown+0x150>
 800803a:	68bb      	ldr	r3, [r7, #8]
 800803c:	68db      	ldr	r3, [r3, #12]
 800803e:	687a      	ldr	r2, [r7, #4]
 8008040:	429a      	cmp	r2, r3
 8008042:	d104      	bne.n	800804e <tcp_close_shutdown+0x14a>
 8008044:	687b      	ldr	r3, [r7, #4]
 8008046:	68da      	ldr	r2, [r3, #12]
 8008048:	68bb      	ldr	r3, [r7, #8]
 800804a:	60da      	str	r2, [r3, #12]
 800804c:	e005      	b.n	800805a <tcp_close_shutdown+0x156>
 800804e:	68bb      	ldr	r3, [r7, #8]
 8008050:	68db      	ldr	r3, [r3, #12]
 8008052:	60bb      	str	r3, [r7, #8]
 8008054:	68bb      	ldr	r3, [r7, #8]
 8008056:	2b00      	cmp	r3, #0
 8008058:	d1ef      	bne.n	800803a <tcp_close_shutdown+0x136>
 800805a:	687b      	ldr	r3, [r7, #4]
 800805c:	2200      	movs	r2, #0
 800805e:	60da      	str	r2, [r3, #12]
    }
    memp_free(MEMP_TCP_PCB, pcb);
 8008060:	6879      	ldr	r1, [r7, #4]
 8008062:	2001      	movs	r0, #1
 8008064:	f7fe febc 	bl	8006de0 <memp_free>
    break;
 8008068:	e01c      	b.n	80080a4 <tcp_close_shutdown+0x1a0>
  case LISTEN:
    tcp_listen_closed(pcb);
 800806a:	6878      	ldr	r0, [r7, #4]
 800806c:	f7ff ff12 	bl	8007e94 <tcp_listen_closed>
    tcp_pcb_remove(&tcp_listen_pcbs.pcbs, pcb);
 8008070:	6879      	ldr	r1, [r7, #4]
 8008072:	4817      	ldr	r0, [pc, #92]	; (80080d0 <tcp_close_shutdown+0x1cc>)
 8008074:	f000 ff8c 	bl	8008f90 <tcp_pcb_remove>
    memp_free(MEMP_TCP_PCB_LISTEN, pcb);
 8008078:	6879      	ldr	r1, [r7, #4]
 800807a:	2002      	movs	r0, #2
 800807c:	f7fe feb0 	bl	8006de0 <memp_free>
    break;
 8008080:	e010      	b.n	80080a4 <tcp_close_shutdown+0x1a0>
  case SYN_SENT:
    TCP_PCB_REMOVE_ACTIVE(pcb);
 8008082:	6879      	ldr	r1, [r7, #4]
 8008084:	480d      	ldr	r0, [pc, #52]	; (80080bc <tcp_close_shutdown+0x1b8>)
 8008086:	f000 ff83 	bl	8008f90 <tcp_pcb_remove>
 800808a:	4b0d      	ldr	r3, [pc, #52]	; (80080c0 <tcp_close_shutdown+0x1bc>)
 800808c:	2201      	movs	r2, #1
 800808e:	701a      	strb	r2, [r3, #0]
    memp_free(MEMP_TCP_PCB, pcb);
 8008090:	6879      	ldr	r1, [r7, #4]
 8008092:	2001      	movs	r0, #1
 8008094:	f7fe fea4 	bl	8006de0 <memp_free>
    MIB2_STATS_INC(mib2.tcpattemptfails);
    break;
 8008098:	e004      	b.n	80080a4 <tcp_close_shutdown+0x1a0>
  default:
    return tcp_close_shutdown_fin(pcb);
 800809a:	6878      	ldr	r0, [r7, #4]
 800809c:	f000 f81a 	bl	80080d4 <tcp_close_shutdown_fin>
 80080a0:	4603      	mov	r3, r0
 80080a2:	e000      	b.n	80080a6 <tcp_close_shutdown+0x1a2>
  }
  return ERR_OK;
 80080a4:	2300      	movs	r3, #0
}
 80080a6:	4618      	mov	r0, r3
 80080a8:	3710      	adds	r7, #16
 80080aa:	46bd      	mov	sp, r7
 80080ac:	bdb0      	pop	{r4, r5, r7, pc}
 80080ae:	bf00      	nop
 80080b0:	08011cf4 	.word	0x08011cf4
 80080b4:	08011d70 	.word	0x08011d70
 80080b8:	08011d30 	.word	0x08011d30
 80080bc:	2400acd8 	.word	0x2400acd8
 80080c0:	2400acd4 	.word	0x2400acd4
 80080c4:	2400ace8 	.word	0x2400ace8
 80080c8:	2400acec 	.word	0x2400acec
 80080cc:	2400ace4 	.word	0x2400ace4
 80080d0:	2400ace0 	.word	0x2400ace0

080080d4 <tcp_close_shutdown_fin>:

static err_t
tcp_close_shutdown_fin(struct tcp_pcb *pcb)
{
 80080d4:	b580      	push	{r7, lr}
 80080d6:	b084      	sub	sp, #16
 80080d8:	af00      	add	r7, sp, #0
 80080da:	6078      	str	r0, [r7, #4]
  err_t err;
  LWIP_ASSERT("pcb != NULL", pcb != NULL);
 80080dc:	687b      	ldr	r3, [r7, #4]
 80080de:	2b00      	cmp	r3, #0
 80080e0:	d106      	bne.n	80080f0 <tcp_close_shutdown_fin+0x1c>
 80080e2:	4b2c      	ldr	r3, [pc, #176]	; (8008194 <tcp_close_shutdown_fin+0xc0>)
 80080e4:	f240 124d 	movw	r2, #333	; 0x14d
 80080e8:	492b      	ldr	r1, [pc, #172]	; (8008198 <tcp_close_shutdown_fin+0xc4>)
 80080ea:	482c      	ldr	r0, [pc, #176]	; (800819c <tcp_close_shutdown_fin+0xc8>)
 80080ec:	f008 fa20 	bl	8010530 <iprintf>

  switch (pcb->state) {
 80080f0:	687b      	ldr	r3, [r7, #4]
 80080f2:	7d1b      	ldrb	r3, [r3, #20]
 80080f4:	2b04      	cmp	r3, #4
 80080f6:	d010      	beq.n	800811a <tcp_close_shutdown_fin+0x46>
 80080f8:	2b07      	cmp	r3, #7
 80080fa:	d01b      	beq.n	8008134 <tcp_close_shutdown_fin+0x60>
 80080fc:	2b03      	cmp	r3, #3
 80080fe:	d126      	bne.n	800814e <tcp_close_shutdown_fin+0x7a>
  case SYN_RCVD:
    err = tcp_send_fin(pcb);
 8008100:	6878      	ldr	r0, [r7, #4]
 8008102:	f003 faf3 	bl	800b6ec <tcp_send_fin>
 8008106:	4603      	mov	r3, r0
 8008108:	73fb      	strb	r3, [r7, #15]
    if (err == ERR_OK) {
 800810a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800810e:	2b00      	cmp	r3, #0
 8008110:	d11f      	bne.n	8008152 <tcp_close_shutdown_fin+0x7e>
      tcp_backlog_accepted(pcb);
      MIB2_STATS_INC(mib2.tcpattemptfails);
      pcb->state = FIN_WAIT_1;
 8008112:	687b      	ldr	r3, [r7, #4]
 8008114:	2205      	movs	r2, #5
 8008116:	751a      	strb	r2, [r3, #20]
    }
    break;
 8008118:	e01b      	b.n	8008152 <tcp_close_shutdown_fin+0x7e>
  case ESTABLISHED:
    err = tcp_send_fin(pcb);
 800811a:	6878      	ldr	r0, [r7, #4]
 800811c:	f003 fae6 	bl	800b6ec <tcp_send_fin>
 8008120:	4603      	mov	r3, r0
 8008122:	73fb      	strb	r3, [r7, #15]
    if (err == ERR_OK) {
 8008124:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8008128:	2b00      	cmp	r3, #0
 800812a:	d114      	bne.n	8008156 <tcp_close_shutdown_fin+0x82>
      MIB2_STATS_INC(mib2.tcpestabresets);
      pcb->state = FIN_WAIT_1;
 800812c:	687b      	ldr	r3, [r7, #4]
 800812e:	2205      	movs	r2, #5
 8008130:	751a      	strb	r2, [r3, #20]
    }
    break;
 8008132:	e010      	b.n	8008156 <tcp_close_shutdown_fin+0x82>
  case CLOSE_WAIT:
    err = tcp_send_fin(pcb);
 8008134:	6878      	ldr	r0, [r7, #4]
 8008136:	f003 fad9 	bl	800b6ec <tcp_send_fin>
 800813a:	4603      	mov	r3, r0
 800813c:	73fb      	strb	r3, [r7, #15]
    if (err == ERR_OK) {
 800813e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8008142:	2b00      	cmp	r3, #0
 8008144:	d109      	bne.n	800815a <tcp_close_shutdown_fin+0x86>
      MIB2_STATS_INC(mib2.tcpestabresets);
      pcb->state = LAST_ACK;
 8008146:	687b      	ldr	r3, [r7, #4]
 8008148:	2209      	movs	r2, #9
 800814a:	751a      	strb	r2, [r3, #20]
    }
    break;
 800814c:	e005      	b.n	800815a <tcp_close_shutdown_fin+0x86>
  default:
    /* Has already been closed, do nothing. */
    return ERR_OK;
 800814e:	2300      	movs	r3, #0
 8008150:	e01c      	b.n	800818c <tcp_close_shutdown_fin+0xb8>
    break;
 8008152:	bf00      	nop
 8008154:	e002      	b.n	800815c <tcp_close_shutdown_fin+0x88>
    break;
 8008156:	bf00      	nop
 8008158:	e000      	b.n	800815c <tcp_close_shutdown_fin+0x88>
    break;
 800815a:	bf00      	nop
  }

  if (err == ERR_OK) {
 800815c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8008160:	2b00      	cmp	r3, #0
 8008162:	d103      	bne.n	800816c <tcp_close_shutdown_fin+0x98>
    /* To ensure all data has been sent when tcp_close returns, we have
       to make sure tcp_output doesn't fail.
       Since we don't really have to ensure all data has been sent when tcp_close
       returns (unsent data is sent from tcp timer functions, also), we don't care
       for the return value of tcp_output for now. */
    tcp_output(pcb);
 8008164:	6878      	ldr	r0, [r7, #4]
 8008166:	f003 fce1 	bl	800bb2c <tcp_output>
 800816a:	e00d      	b.n	8008188 <tcp_close_shutdown_fin+0xb4>
  } else if (err == ERR_MEM) {
 800816c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8008170:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008174:	d108      	bne.n	8008188 <tcp_close_shutdown_fin+0xb4>
    /* Mark this pcb for closing. Closing is retried from tcp_tmr. */
    pcb->flags |= TF_CLOSEPEND;
 8008176:	687b      	ldr	r3, [r7, #4]
 8008178:	7e9b      	ldrb	r3, [r3, #26]
 800817a:	f043 0308 	orr.w	r3, r3, #8
 800817e:	b2da      	uxtb	r2, r3
 8008180:	687b      	ldr	r3, [r7, #4]
 8008182:	769a      	strb	r2, [r3, #26]
    /* We have to return ERR_OK from here to indicate to the callers that this
       pcb should not be used any more as it will be freed soon via tcp_tmr.
       This is OK here since sending FIN does not guarantee a time frime for
       actually freeing the pcb, either (it is left in closure states for
       remote ACK or timeout) */
    return ERR_OK;
 8008184:	2300      	movs	r3, #0
 8008186:	e001      	b.n	800818c <tcp_close_shutdown_fin+0xb8>
  }
  return err;
 8008188:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800818c:	4618      	mov	r0, r3
 800818e:	3710      	adds	r7, #16
 8008190:	46bd      	mov	sp, r7
 8008192:	bd80      	pop	{r7, pc}
 8008194:	08011cf4 	.word	0x08011cf4
 8008198:	08011d24 	.word	0x08011d24
 800819c:	08011d30 	.word	0x08011d30

080081a0 <tcp_close>:
 * @return ERR_OK if connection has been closed
 *         another err_t if closing failed and pcb is not freed
 */
err_t
tcp_close(struct tcp_pcb *pcb)
{
 80081a0:	b580      	push	{r7, lr}
 80081a2:	b082      	sub	sp, #8
 80081a4:	af00      	add	r7, sp, #0
 80081a6:	6078      	str	r0, [r7, #4]
  LWIP_DEBUGF(TCP_DEBUG, ("tcp_close: closing in "));
  tcp_debug_print_state(pcb->state);

  if (pcb->state != LISTEN) {
 80081a8:	687b      	ldr	r3, [r7, #4]
 80081aa:	7d1b      	ldrb	r3, [r3, #20]
 80081ac:	2b01      	cmp	r3, #1
 80081ae:	d006      	beq.n	80081be <tcp_close+0x1e>
    /* Set a flag not to receive any more data... */
    pcb->flags |= TF_RXCLOSED;
 80081b0:	687b      	ldr	r3, [r7, #4]
 80081b2:	7e9b      	ldrb	r3, [r3, #26]
 80081b4:	f043 0310 	orr.w	r3, r3, #16
 80081b8:	b2da      	uxtb	r2, r3
 80081ba:	687b      	ldr	r3, [r7, #4]
 80081bc:	769a      	strb	r2, [r3, #26]
  }
  /* ... and close */
  return tcp_close_shutdown(pcb, 1);
 80081be:	2101      	movs	r1, #1
 80081c0:	6878      	ldr	r0, [r7, #4]
 80081c2:	f7ff fe9f 	bl	8007f04 <tcp_close_shutdown>
 80081c6:	4603      	mov	r3, r0
}
 80081c8:	4618      	mov	r0, r3
 80081ca:	3708      	adds	r7, #8
 80081cc:	46bd      	mov	sp, r7
 80081ce:	bd80      	pop	{r7, pc}

080081d0 <tcp_abandon>:
 * @param pcb the tcp_pcb to abort
 * @param reset boolean to indicate whether a reset should be sent
 */
void
tcp_abandon(struct tcp_pcb *pcb, int reset)
{
 80081d0:	b580      	push	{r7, lr}
 80081d2:	b08c      	sub	sp, #48	; 0x30
 80081d4:	af02      	add	r7, sp, #8
 80081d6:	6078      	str	r0, [r7, #4]
 80081d8:	6039      	str	r1, [r7, #0]
  tcp_err_fn errf;
#endif /* LWIP_CALLBACK_API */
  void *errf_arg;

  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_abort/tcp_abandon for listen-pcbs",
 80081da:	687b      	ldr	r3, [r7, #4]
 80081dc:	7d1b      	ldrb	r3, [r3, #20]
 80081de:	2b01      	cmp	r3, #1
 80081e0:	d106      	bne.n	80081f0 <tcp_abandon+0x20>
 80081e2:	4b4d      	ldr	r3, [pc, #308]	; (8008318 <tcp_abandon+0x148>)
 80081e4:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 80081e8:	494c      	ldr	r1, [pc, #304]	; (800831c <tcp_abandon+0x14c>)
 80081ea:	484d      	ldr	r0, [pc, #308]	; (8008320 <tcp_abandon+0x150>)
 80081ec:	f008 f9a0 	bl	8010530 <iprintf>
    pcb->state != LISTEN);
  /* Figure out on which TCP PCB list we are, and remove us. If we
     are in an active state, call the receive function associated with
     the PCB with a NULL argument, and send an RST to the remote end. */
  if (pcb->state == TIME_WAIT) {
 80081f0:	687b      	ldr	r3, [r7, #4]
 80081f2:	7d1b      	ldrb	r3, [r3, #20]
 80081f4:	2b0a      	cmp	r3, #10
 80081f6:	d108      	bne.n	800820a <tcp_abandon+0x3a>
    tcp_pcb_remove(&tcp_tw_pcbs, pcb);
 80081f8:	6879      	ldr	r1, [r7, #4]
 80081fa:	484a      	ldr	r0, [pc, #296]	; (8008324 <tcp_abandon+0x154>)
 80081fc:	f000 fec8 	bl	8008f90 <tcp_pcb_remove>
    memp_free(MEMP_TCP_PCB, pcb);
 8008200:	6879      	ldr	r1, [r7, #4]
 8008202:	2001      	movs	r0, #1
 8008204:	f7fe fdec 	bl	8006de0 <memp_free>
    }
    last_state = pcb->state;
    memp_free(MEMP_TCP_PCB, pcb);
    TCP_EVENT_ERR(last_state, errf, errf_arg, ERR_ABRT);
  }
}
 8008208:	e081      	b.n	800830e <tcp_abandon+0x13e>
    int send_rst = 0;
 800820a:	2300      	movs	r3, #0
 800820c:	627b      	str	r3, [r7, #36]	; 0x24
    u16_t local_port = 0;
 800820e:	2300      	movs	r3, #0
 8008210:	847b      	strh	r3, [r7, #34]	; 0x22
    seqno = pcb->snd_nxt;
 8008212:	687b      	ldr	r3, [r7, #4]
 8008214:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008216:	61bb      	str	r3, [r7, #24]
    ackno = pcb->rcv_nxt;
 8008218:	687b      	ldr	r3, [r7, #4]
 800821a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800821c:	617b      	str	r3, [r7, #20]
    errf = pcb->errf;
 800821e:	687b      	ldr	r3, [r7, #4]
 8008220:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8008224:	613b      	str	r3, [r7, #16]
    errf_arg = pcb->callback_arg;
 8008226:	687b      	ldr	r3, [r7, #4]
 8008228:	691b      	ldr	r3, [r3, #16]
 800822a:	60fb      	str	r3, [r7, #12]
    if (pcb->state == CLOSED) {
 800822c:	687b      	ldr	r3, [r7, #4]
 800822e:	7d1b      	ldrb	r3, [r3, #20]
 8008230:	2b00      	cmp	r3, #0
 8008232:	d126      	bne.n	8008282 <tcp_abandon+0xb2>
      if (pcb->local_port != 0) {
 8008234:	687b      	ldr	r3, [r7, #4]
 8008236:	8adb      	ldrh	r3, [r3, #22]
 8008238:	2b00      	cmp	r3, #0
 800823a:	d02e      	beq.n	800829a <tcp_abandon+0xca>
        TCP_RMV(&tcp_bound_pcbs, pcb);
 800823c:	4b3a      	ldr	r3, [pc, #232]	; (8008328 <tcp_abandon+0x158>)
 800823e:	681b      	ldr	r3, [r3, #0]
 8008240:	687a      	ldr	r2, [r7, #4]
 8008242:	429a      	cmp	r2, r3
 8008244:	d105      	bne.n	8008252 <tcp_abandon+0x82>
 8008246:	4b38      	ldr	r3, [pc, #224]	; (8008328 <tcp_abandon+0x158>)
 8008248:	681b      	ldr	r3, [r3, #0]
 800824a:	68db      	ldr	r3, [r3, #12]
 800824c:	4a36      	ldr	r2, [pc, #216]	; (8008328 <tcp_abandon+0x158>)
 800824e:	6013      	str	r3, [r2, #0]
 8008250:	e013      	b.n	800827a <tcp_abandon+0xaa>
 8008252:	4b35      	ldr	r3, [pc, #212]	; (8008328 <tcp_abandon+0x158>)
 8008254:	681b      	ldr	r3, [r3, #0]
 8008256:	61fb      	str	r3, [r7, #28]
 8008258:	e00c      	b.n	8008274 <tcp_abandon+0xa4>
 800825a:	69fb      	ldr	r3, [r7, #28]
 800825c:	68db      	ldr	r3, [r3, #12]
 800825e:	687a      	ldr	r2, [r7, #4]
 8008260:	429a      	cmp	r2, r3
 8008262:	d104      	bne.n	800826e <tcp_abandon+0x9e>
 8008264:	687b      	ldr	r3, [r7, #4]
 8008266:	68da      	ldr	r2, [r3, #12]
 8008268:	69fb      	ldr	r3, [r7, #28]
 800826a:	60da      	str	r2, [r3, #12]
 800826c:	e005      	b.n	800827a <tcp_abandon+0xaa>
 800826e:	69fb      	ldr	r3, [r7, #28]
 8008270:	68db      	ldr	r3, [r3, #12]
 8008272:	61fb      	str	r3, [r7, #28]
 8008274:	69fb      	ldr	r3, [r7, #28]
 8008276:	2b00      	cmp	r3, #0
 8008278:	d1ef      	bne.n	800825a <tcp_abandon+0x8a>
 800827a:	687b      	ldr	r3, [r7, #4]
 800827c:	2200      	movs	r2, #0
 800827e:	60da      	str	r2, [r3, #12]
 8008280:	e00b      	b.n	800829a <tcp_abandon+0xca>
      send_rst = reset;
 8008282:	683b      	ldr	r3, [r7, #0]
 8008284:	627b      	str	r3, [r7, #36]	; 0x24
      local_port = pcb->local_port;
 8008286:	687b      	ldr	r3, [r7, #4]
 8008288:	8adb      	ldrh	r3, [r3, #22]
 800828a:	847b      	strh	r3, [r7, #34]	; 0x22
      TCP_PCB_REMOVE_ACTIVE(pcb);
 800828c:	6879      	ldr	r1, [r7, #4]
 800828e:	4827      	ldr	r0, [pc, #156]	; (800832c <tcp_abandon+0x15c>)
 8008290:	f000 fe7e 	bl	8008f90 <tcp_pcb_remove>
 8008294:	4b26      	ldr	r3, [pc, #152]	; (8008330 <tcp_abandon+0x160>)
 8008296:	2201      	movs	r2, #1
 8008298:	701a      	strb	r2, [r3, #0]
    if (pcb->unacked != NULL) {
 800829a:	687b      	ldr	r3, [r7, #4]
 800829c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800829e:	2b00      	cmp	r3, #0
 80082a0:	d004      	beq.n	80082ac <tcp_abandon+0xdc>
      tcp_segs_free(pcb->unacked);
 80082a2:	687b      	ldr	r3, [r7, #4]
 80082a4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80082a6:	4618      	mov	r0, r3
 80082a8:	f000 fc88 	bl	8008bbc <tcp_segs_free>
    if (pcb->unsent != NULL) {
 80082ac:	687b      	ldr	r3, [r7, #4]
 80082ae:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80082b0:	2b00      	cmp	r3, #0
 80082b2:	d004      	beq.n	80082be <tcp_abandon+0xee>
      tcp_segs_free(pcb->unsent);
 80082b4:	687b      	ldr	r3, [r7, #4]
 80082b6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80082b8:	4618      	mov	r0, r3
 80082ba:	f000 fc7f 	bl	8008bbc <tcp_segs_free>
    if (pcb->ooseq != NULL) {
 80082be:	687b      	ldr	r3, [r7, #4]
 80082c0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80082c2:	2b00      	cmp	r3, #0
 80082c4:	d004      	beq.n	80082d0 <tcp_abandon+0x100>
      tcp_segs_free(pcb->ooseq);
 80082c6:	687b      	ldr	r3, [r7, #4]
 80082c8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80082ca:	4618      	mov	r0, r3
 80082cc:	f000 fc76 	bl	8008bbc <tcp_segs_free>
    if (send_rst) {
 80082d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80082d2:	2b00      	cmp	r3, #0
 80082d4:	d00c      	beq.n	80082f0 <tcp_abandon+0x120>
      tcp_rst(seqno, ackno, &pcb->local_ip, &pcb->remote_ip, local_port, pcb->remote_port);
 80082d6:	687a      	ldr	r2, [r7, #4]
 80082d8:	687b      	ldr	r3, [r7, #4]
 80082da:	1d19      	adds	r1, r3, #4
 80082dc:	687b      	ldr	r3, [r7, #4]
 80082de:	8b1b      	ldrh	r3, [r3, #24]
 80082e0:	9301      	str	r3, [sp, #4]
 80082e2:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80082e4:	9300      	str	r3, [sp, #0]
 80082e6:	460b      	mov	r3, r1
 80082e8:	6979      	ldr	r1, [r7, #20]
 80082ea:	69b8      	ldr	r0, [r7, #24]
 80082ec:	f003 fea8 	bl	800c040 <tcp_rst>
    last_state = pcb->state;
 80082f0:	687b      	ldr	r3, [r7, #4]
 80082f2:	7d1b      	ldrb	r3, [r3, #20]
 80082f4:	72fb      	strb	r3, [r7, #11]
    memp_free(MEMP_TCP_PCB, pcb);
 80082f6:	6879      	ldr	r1, [r7, #4]
 80082f8:	2001      	movs	r0, #1
 80082fa:	f7fe fd71 	bl	8006de0 <memp_free>
    TCP_EVENT_ERR(last_state, errf, errf_arg, ERR_ABRT);
 80082fe:	693b      	ldr	r3, [r7, #16]
 8008300:	2b00      	cmp	r3, #0
 8008302:	d004      	beq.n	800830e <tcp_abandon+0x13e>
 8008304:	693b      	ldr	r3, [r7, #16]
 8008306:	f06f 010c 	mvn.w	r1, #12
 800830a:	68f8      	ldr	r0, [r7, #12]
 800830c:	4798      	blx	r3
}
 800830e:	bf00      	nop
 8008310:	3728      	adds	r7, #40	; 0x28
 8008312:	46bd      	mov	sp, r7
 8008314:	bd80      	pop	{r7, pc}
 8008316:	bf00      	nop
 8008318:	08011cf4 	.word	0x08011cf4
 800831c:	08011d8c 	.word	0x08011d8c
 8008320:	08011d30 	.word	0x08011d30
 8008324:	2400ace8 	.word	0x2400ace8
 8008328:	2400ace4 	.word	0x2400ace4
 800832c:	2400acd8 	.word	0x2400acd8
 8008330:	2400acd4 	.word	0x2400acd4

08008334 <tcp_abort>:
 *
 * @param pcb the tcp pcb to abort
 */
void
tcp_abort(struct tcp_pcb *pcb)
{
 8008334:	b580      	push	{r7, lr}
 8008336:	b082      	sub	sp, #8
 8008338:	af00      	add	r7, sp, #0
 800833a:	6078      	str	r0, [r7, #4]
  tcp_abandon(pcb, 1);
 800833c:	2101      	movs	r1, #1
 800833e:	6878      	ldr	r0, [r7, #4]
 8008340:	f7ff ff46 	bl	80081d0 <tcp_abandon>
}
 8008344:	bf00      	nop
 8008346:	3708      	adds	r7, #8
 8008348:	46bd      	mov	sp, r7
 800834a:	bd80      	pop	{r7, pc}

0800834c <tcp_update_rcv_ann_wnd>:
 * Returns how much extra window would be advertised if we sent an
 * update now.
 */
u32_t
tcp_update_rcv_ann_wnd(struct tcp_pcb *pcb)
{
 800834c:	b580      	push	{r7, lr}
 800834e:	b084      	sub	sp, #16
 8008350:	af00      	add	r7, sp, #0
 8008352:	6078      	str	r0, [r7, #4]
  u32_t new_right_edge = pcb->rcv_nxt + pcb->rcv_wnd;
 8008354:	687b      	ldr	r3, [r7, #4]
 8008356:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008358:	687a      	ldr	r2, [r7, #4]
 800835a:	8d12      	ldrh	r2, [r2, #40]	; 0x28
 800835c:	4413      	add	r3, r2
 800835e:	60fb      	str	r3, [r7, #12]

  if (TCP_SEQ_GEQ(new_right_edge, pcb->rcv_ann_right_edge + LWIP_MIN((TCP_WND / 2), pcb->mss))) {
 8008360:	687b      	ldr	r3, [r7, #4]
 8008362:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008364:	687a      	ldr	r2, [r7, #4]
 8008366:	8e52      	ldrh	r2, [r2, #50]	; 0x32
 8008368:	f640 3168 	movw	r1, #2920	; 0xb68
 800836c:	428a      	cmp	r2, r1
 800836e:	bf28      	it	cs
 8008370:	460a      	movcs	r2, r1
 8008372:	b292      	uxth	r2, r2
 8008374:	4413      	add	r3, r2
 8008376:	68fa      	ldr	r2, [r7, #12]
 8008378:	1ad3      	subs	r3, r2, r3
 800837a:	2b00      	cmp	r3, #0
 800837c:	db08      	blt.n	8008390 <tcp_update_rcv_ann_wnd+0x44>
    /* we can advertise more window */
    pcb->rcv_ann_wnd = pcb->rcv_wnd;
 800837e:	687b      	ldr	r3, [r7, #4]
 8008380:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 8008382:	687b      	ldr	r3, [r7, #4]
 8008384:	855a      	strh	r2, [r3, #42]	; 0x2a
    return new_right_edge - pcb->rcv_ann_right_edge;
 8008386:	687b      	ldr	r3, [r7, #4]
 8008388:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800838a:	68fa      	ldr	r2, [r7, #12]
 800838c:	1ad3      	subs	r3, r2, r3
 800838e:	e020      	b.n	80083d2 <tcp_update_rcv_ann_wnd+0x86>
  } else {
    if (TCP_SEQ_GT(pcb->rcv_nxt, pcb->rcv_ann_right_edge)) {
 8008390:	687b      	ldr	r3, [r7, #4]
 8008392:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8008394:	687b      	ldr	r3, [r7, #4]
 8008396:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008398:	1ad3      	subs	r3, r2, r3
 800839a:	2b00      	cmp	r3, #0
 800839c:	dd03      	ble.n	80083a6 <tcp_update_rcv_ann_wnd+0x5a>
      /* Can happen due to other end sending out of advertised window,
       * but within actual available (but not yet advertised) window */
      pcb->rcv_ann_wnd = 0;
 800839e:	687b      	ldr	r3, [r7, #4]
 80083a0:	2200      	movs	r2, #0
 80083a2:	855a      	strh	r2, [r3, #42]	; 0x2a
 80083a4:	e014      	b.n	80083d0 <tcp_update_rcv_ann_wnd+0x84>
    } else {
      /* keep the right edge of window constant */
      u32_t new_rcv_ann_wnd = pcb->rcv_ann_right_edge - pcb->rcv_nxt;
 80083a6:	687b      	ldr	r3, [r7, #4]
 80083a8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80083aa:	687b      	ldr	r3, [r7, #4]
 80083ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80083ae:	1ad3      	subs	r3, r2, r3
 80083b0:	60bb      	str	r3, [r7, #8]
#if !LWIP_WND_SCALE
      LWIP_ASSERT("new_rcv_ann_wnd <= 0xffff", new_rcv_ann_wnd <= 0xffff);
 80083b2:	68bb      	ldr	r3, [r7, #8]
 80083b4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80083b8:	d306      	bcc.n	80083c8 <tcp_update_rcv_ann_wnd+0x7c>
 80083ba:	4b08      	ldr	r3, [pc, #32]	; (80083dc <tcp_update_rcv_ann_wnd+0x90>)
 80083bc:	f44f 7242 	mov.w	r2, #776	; 0x308
 80083c0:	4907      	ldr	r1, [pc, #28]	; (80083e0 <tcp_update_rcv_ann_wnd+0x94>)
 80083c2:	4808      	ldr	r0, [pc, #32]	; (80083e4 <tcp_update_rcv_ann_wnd+0x98>)
 80083c4:	f008 f8b4 	bl	8010530 <iprintf>
#endif
      pcb->rcv_ann_wnd = (tcpwnd_size_t)new_rcv_ann_wnd;
 80083c8:	68bb      	ldr	r3, [r7, #8]
 80083ca:	b29a      	uxth	r2, r3
 80083cc:	687b      	ldr	r3, [r7, #4]
 80083ce:	855a      	strh	r2, [r3, #42]	; 0x2a
    }
    return 0;
 80083d0:	2300      	movs	r3, #0
  }
}
 80083d2:	4618      	mov	r0, r3
 80083d4:	3710      	adds	r7, #16
 80083d6:	46bd      	mov	sp, r7
 80083d8:	bd80      	pop	{r7, pc}
 80083da:	bf00      	nop
 80083dc:	08011cf4 	.word	0x08011cf4
 80083e0:	08011e0c 	.word	0x08011e0c
 80083e4:	08011d30 	.word	0x08011d30

080083e8 <tcp_recved>:
 * @param pcb the tcp_pcb for which data is read
 * @param len the amount of bytes that have been read by the application
 */
void
tcp_recved(struct tcp_pcb *pcb, u16_t len)
{
 80083e8:	b580      	push	{r7, lr}
 80083ea:	b084      	sub	sp, #16
 80083ec:	af00      	add	r7, sp, #0
 80083ee:	6078      	str	r0, [r7, #4]
 80083f0:	460b      	mov	r3, r1
 80083f2:	807b      	strh	r3, [r7, #2]
  int wnd_inflation;

  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_recved for listen-pcbs",
 80083f4:	687b      	ldr	r3, [r7, #4]
 80083f6:	7d1b      	ldrb	r3, [r3, #20]
 80083f8:	2b01      	cmp	r3, #1
 80083fa:	d106      	bne.n	800840a <tcp_recved+0x22>
 80083fc:	4b24      	ldr	r3, [pc, #144]	; (8008490 <tcp_recved+0xa8>)
 80083fe:	f44f 7248 	mov.w	r2, #800	; 0x320
 8008402:	4924      	ldr	r1, [pc, #144]	; (8008494 <tcp_recved+0xac>)
 8008404:	4824      	ldr	r0, [pc, #144]	; (8008498 <tcp_recved+0xb0>)
 8008406:	f008 f893 	bl	8010530 <iprintf>
    pcb->state != LISTEN);

  pcb->rcv_wnd += len;
 800840a:	687b      	ldr	r3, [r7, #4]
 800840c:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 800840e:	887b      	ldrh	r3, [r7, #2]
 8008410:	4413      	add	r3, r2
 8008412:	b29a      	uxth	r2, r3
 8008414:	687b      	ldr	r3, [r7, #4]
 8008416:	851a      	strh	r2, [r3, #40]	; 0x28
  if (pcb->rcv_wnd > TCP_WND_MAX(pcb)) {
 8008418:	687b      	ldr	r3, [r7, #4]
 800841a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800841c:	f241 62d0 	movw	r2, #5840	; 0x16d0
 8008420:	4293      	cmp	r3, r2
 8008422:	d904      	bls.n	800842e <tcp_recved+0x46>
    pcb->rcv_wnd = TCP_WND_MAX(pcb);
 8008424:	687b      	ldr	r3, [r7, #4]
 8008426:	f241 62d0 	movw	r2, #5840	; 0x16d0
 800842a:	851a      	strh	r2, [r3, #40]	; 0x28
 800842c:	e017      	b.n	800845e <tcp_recved+0x76>
  } else if (pcb->rcv_wnd == 0) {
 800842e:	687b      	ldr	r3, [r7, #4]
 8008430:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008432:	2b00      	cmp	r3, #0
 8008434:	d113      	bne.n	800845e <tcp_recved+0x76>
    /* rcv_wnd overflowed */
    if ((pcb->state == CLOSE_WAIT) || (pcb->state == LAST_ACK)) {
 8008436:	687b      	ldr	r3, [r7, #4]
 8008438:	7d1b      	ldrb	r3, [r3, #20]
 800843a:	2b07      	cmp	r3, #7
 800843c:	d003      	beq.n	8008446 <tcp_recved+0x5e>
 800843e:	687b      	ldr	r3, [r7, #4]
 8008440:	7d1b      	ldrb	r3, [r3, #20]
 8008442:	2b09      	cmp	r3, #9
 8008444:	d104      	bne.n	8008450 <tcp_recved+0x68>
      /* In passive close, we allow this, since the FIN bit is added to rcv_wnd
         by the stack itself, since it is not mandatory for an application
         to call tcp_recved() for the FIN bit, but e.g. the netconn API does so. */
      pcb->rcv_wnd = TCP_WND_MAX(pcb);
 8008446:	687b      	ldr	r3, [r7, #4]
 8008448:	f241 62d0 	movw	r2, #5840	; 0x16d0
 800844c:	851a      	strh	r2, [r3, #40]	; 0x28
 800844e:	e006      	b.n	800845e <tcp_recved+0x76>
    } else {
      LWIP_ASSERT("tcp_recved: len wrapped rcv_wnd\n", 0);
 8008450:	4b0f      	ldr	r3, [pc, #60]	; (8008490 <tcp_recved+0xa8>)
 8008452:	f240 322d 	movw	r2, #813	; 0x32d
 8008456:	4911      	ldr	r1, [pc, #68]	; (800849c <tcp_recved+0xb4>)
 8008458:	480f      	ldr	r0, [pc, #60]	; (8008498 <tcp_recved+0xb0>)
 800845a:	f008 f869 	bl	8010530 <iprintf>
    }
  }

  wnd_inflation = tcp_update_rcv_ann_wnd(pcb);
 800845e:	6878      	ldr	r0, [r7, #4]
 8008460:	f7ff ff74 	bl	800834c <tcp_update_rcv_ann_wnd>
 8008464:	4603      	mov	r3, r0
 8008466:	60fb      	str	r3, [r7, #12]

  /* If the change in the right edge of window is significant (default
   * watermark is TCP_WND/4), then send an explicit update now.
   * Otherwise wait for a packet to be sent in the normal course of
   * events (or more window to be available later) */
  if (wnd_inflation >= TCP_WND_UPDATE_THRESHOLD) {
 8008468:	68fb      	ldr	r3, [r7, #12]
 800846a:	f240 52b3 	movw	r2, #1459	; 0x5b3
 800846e:	4293      	cmp	r3, r2
 8008470:	dd09      	ble.n	8008486 <tcp_recved+0x9e>
    tcp_ack_now(pcb);
 8008472:	687b      	ldr	r3, [r7, #4]
 8008474:	7e9b      	ldrb	r3, [r3, #26]
 8008476:	f043 0302 	orr.w	r3, r3, #2
 800847a:	b2da      	uxtb	r2, r3
 800847c:	687b      	ldr	r3, [r7, #4]
 800847e:	769a      	strb	r2, [r3, #26]
    tcp_output(pcb);
 8008480:	6878      	ldr	r0, [r7, #4]
 8008482:	f003 fb53 	bl	800bb2c <tcp_output>
  }

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_recved: received %"U16_F" bytes, wnd %"TCPWNDSIZE_F" (%"TCPWNDSIZE_F").\n",
         len, pcb->rcv_wnd, (u16_t)(TCP_WND_MAX(pcb) - pcb->rcv_wnd)));
}
 8008486:	bf00      	nop
 8008488:	3710      	adds	r7, #16
 800848a:	46bd      	mov	sp, r7
 800848c:	bd80      	pop	{r7, pc}
 800848e:	bf00      	nop
 8008490:	08011cf4 	.word	0x08011cf4
 8008494:	08011e28 	.word	0x08011e28
 8008498:	08011d30 	.word	0x08011d30
 800849c:	08011e50 	.word	0x08011e50

080084a0 <tcp_slowtmr>:
 *
 * Automatically called from tcp_tmr().
 */
void
tcp_slowtmr(void)
{
 80084a0:	b5b0      	push	{r4, r5, r7, lr}
 80084a2:	b08c      	sub	sp, #48	; 0x30
 80084a4:	af02      	add	r7, sp, #8
  tcpwnd_size_t eff_wnd;
  u8_t pcb_remove;      /* flag if a PCB should be removed */
  u8_t pcb_reset;       /* flag if a RST should be sent when removing */
  err_t err;

  err = ERR_OK;
 80084a6:	2300      	movs	r3, #0
 80084a8:	777b      	strb	r3, [r7, #29]

  ++tcp_ticks;
 80084aa:	4b96      	ldr	r3, [pc, #600]	; (8008704 <tcp_slowtmr+0x264>)
 80084ac:	681b      	ldr	r3, [r3, #0]
 80084ae:	3301      	adds	r3, #1
 80084b0:	4a94      	ldr	r2, [pc, #592]	; (8008704 <tcp_slowtmr+0x264>)
 80084b2:	6013      	str	r3, [r2, #0]
  ++tcp_timer_ctr;
 80084b4:	4b94      	ldr	r3, [pc, #592]	; (8008708 <tcp_slowtmr+0x268>)
 80084b6:	781b      	ldrb	r3, [r3, #0]
 80084b8:	3301      	adds	r3, #1
 80084ba:	b2da      	uxtb	r2, r3
 80084bc:	4b92      	ldr	r3, [pc, #584]	; (8008708 <tcp_slowtmr+0x268>)
 80084be:	701a      	strb	r2, [r3, #0]

tcp_slowtmr_start:
  /* Steps through all of the active PCBs. */
  prev = NULL;
 80084c0:	2300      	movs	r3, #0
 80084c2:	623b      	str	r3, [r7, #32]
  pcb = tcp_active_pcbs;
 80084c4:	4b91      	ldr	r3, [pc, #580]	; (800870c <tcp_slowtmr+0x26c>)
 80084c6:	681b      	ldr	r3, [r3, #0]
 80084c8:	627b      	str	r3, [r7, #36]	; 0x24
  if (pcb == NULL) {
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: no active pcbs\n"));
  }
  while (pcb != NULL) {
 80084ca:	e227      	b.n	800891c <tcp_slowtmr+0x47c>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: processing active pcb\n"));
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != CLOSED\n", pcb->state != CLOSED);
 80084cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80084ce:	7d1b      	ldrb	r3, [r3, #20]
 80084d0:	2b00      	cmp	r3, #0
 80084d2:	d106      	bne.n	80084e2 <tcp_slowtmr+0x42>
 80084d4:	4b8e      	ldr	r3, [pc, #568]	; (8008710 <tcp_slowtmr+0x270>)
 80084d6:	f44f 727c 	mov.w	r2, #1008	; 0x3f0
 80084da:	498e      	ldr	r1, [pc, #568]	; (8008714 <tcp_slowtmr+0x274>)
 80084dc:	488e      	ldr	r0, [pc, #568]	; (8008718 <tcp_slowtmr+0x278>)
 80084de:	f008 f827 	bl	8010530 <iprintf>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != LISTEN\n", pcb->state != LISTEN);
 80084e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80084e4:	7d1b      	ldrb	r3, [r3, #20]
 80084e6:	2b01      	cmp	r3, #1
 80084e8:	d106      	bne.n	80084f8 <tcp_slowtmr+0x58>
 80084ea:	4b89      	ldr	r3, [pc, #548]	; (8008710 <tcp_slowtmr+0x270>)
 80084ec:	f240 32f1 	movw	r2, #1009	; 0x3f1
 80084f0:	498a      	ldr	r1, [pc, #552]	; (800871c <tcp_slowtmr+0x27c>)
 80084f2:	4889      	ldr	r0, [pc, #548]	; (8008718 <tcp_slowtmr+0x278>)
 80084f4:	f008 f81c 	bl	8010530 <iprintf>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != TIME-WAIT\n", pcb->state != TIME_WAIT);
 80084f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80084fa:	7d1b      	ldrb	r3, [r3, #20]
 80084fc:	2b0a      	cmp	r3, #10
 80084fe:	d106      	bne.n	800850e <tcp_slowtmr+0x6e>
 8008500:	4b83      	ldr	r3, [pc, #524]	; (8008710 <tcp_slowtmr+0x270>)
 8008502:	f240 32f2 	movw	r2, #1010	; 0x3f2
 8008506:	4986      	ldr	r1, [pc, #536]	; (8008720 <tcp_slowtmr+0x280>)
 8008508:	4883      	ldr	r0, [pc, #524]	; (8008718 <tcp_slowtmr+0x278>)
 800850a:	f008 f811 	bl	8010530 <iprintf>
    if (pcb->last_timer == tcp_timer_ctr) {
 800850e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008510:	7f5a      	ldrb	r2, [r3, #29]
 8008512:	4b7d      	ldr	r3, [pc, #500]	; (8008708 <tcp_slowtmr+0x268>)
 8008514:	781b      	ldrb	r3, [r3, #0]
 8008516:	429a      	cmp	r2, r3
 8008518:	d103      	bne.n	8008522 <tcp_slowtmr+0x82>
      /* skip this pcb, we have already processed it */
      pcb = pcb->next;
 800851a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800851c:	68db      	ldr	r3, [r3, #12]
 800851e:	627b      	str	r3, [r7, #36]	; 0x24
      continue;
 8008520:	e1fc      	b.n	800891c <tcp_slowtmr+0x47c>
    }
    pcb->last_timer = tcp_timer_ctr;
 8008522:	4b79      	ldr	r3, [pc, #484]	; (8008708 <tcp_slowtmr+0x268>)
 8008524:	781a      	ldrb	r2, [r3, #0]
 8008526:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008528:	775a      	strb	r2, [r3, #29]

    pcb_remove = 0;
 800852a:	2300      	movs	r3, #0
 800852c:	77fb      	strb	r3, [r7, #31]
    pcb_reset = 0;
 800852e:	2300      	movs	r3, #0
 8008530:	77bb      	strb	r3, [r7, #30]

    if (pcb->state == SYN_SENT && pcb->nrtx >= TCP_SYNMAXRTX) {
 8008532:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008534:	7d1b      	ldrb	r3, [r3, #20]
 8008536:	2b02      	cmp	r3, #2
 8008538:	d108      	bne.n	800854c <tcp_slowtmr+0xac>
 800853a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800853c:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8008540:	2b05      	cmp	r3, #5
 8008542:	d903      	bls.n	800854c <tcp_slowtmr+0xac>
      ++pcb_remove;
 8008544:	7ffb      	ldrb	r3, [r7, #31]
 8008546:	3301      	adds	r3, #1
 8008548:	77fb      	strb	r3, [r7, #31]
 800854a:	e0a2      	b.n	8008692 <tcp_slowtmr+0x1f2>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: max SYN retries reached\n"));
    }
    else if (pcb->nrtx >= TCP_MAXRTX) {
 800854c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800854e:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8008552:	2b0b      	cmp	r3, #11
 8008554:	d903      	bls.n	800855e <tcp_slowtmr+0xbe>
      ++pcb_remove;
 8008556:	7ffb      	ldrb	r3, [r7, #31]
 8008558:	3301      	adds	r3, #1
 800855a:	77fb      	strb	r3, [r7, #31]
 800855c:	e099      	b.n	8008692 <tcp_slowtmr+0x1f2>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: max DATA retries reached\n"));
    } else {
      if (pcb->persist_backoff > 0) {
 800855e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008560:	f893 3095 	ldrb.w	r3, [r3, #149]	; 0x95
 8008564:	2b00      	cmp	r3, #0
 8008566:	d032      	beq.n	80085ce <tcp_slowtmr+0x12e>
        /* If snd_wnd is zero, use persist timer to send 1 byte probes
         * instead of using the standard retransmission mechanism. */
        u8_t backoff_cnt = tcp_persist_backoff[pcb->persist_backoff-1];
 8008568:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800856a:	f893 3095 	ldrb.w	r3, [r3, #149]	; 0x95
 800856e:	3b01      	subs	r3, #1
 8008570:	4a6c      	ldr	r2, [pc, #432]	; (8008724 <tcp_slowtmr+0x284>)
 8008572:	5cd3      	ldrb	r3, [r2, r3]
 8008574:	74fb      	strb	r3, [r7, #19]
        if (pcb->persist_cnt < backoff_cnt) {
 8008576:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008578:	f893 3094 	ldrb.w	r3, [r3, #148]	; 0x94
 800857c:	7cfa      	ldrb	r2, [r7, #19]
 800857e:	429a      	cmp	r2, r3
 8008580:	d907      	bls.n	8008592 <tcp_slowtmr+0xf2>
          pcb->persist_cnt++;
 8008582:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008584:	f893 3094 	ldrb.w	r3, [r3, #148]	; 0x94
 8008588:	3301      	adds	r3, #1
 800858a:	b2da      	uxtb	r2, r3
 800858c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800858e:	f883 2094 	strb.w	r2, [r3, #148]	; 0x94
        }
        if (pcb->persist_cnt >= backoff_cnt) {
 8008592:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008594:	f893 3094 	ldrb.w	r3, [r3, #148]	; 0x94
 8008598:	7cfa      	ldrb	r2, [r7, #19]
 800859a:	429a      	cmp	r2, r3
 800859c:	d879      	bhi.n	8008692 <tcp_slowtmr+0x1f2>
          if (tcp_zero_window_probe(pcb) == ERR_OK) {
 800859e:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80085a0:	f003 fee0 	bl	800c364 <tcp_zero_window_probe>
 80085a4:	4603      	mov	r3, r0
 80085a6:	2b00      	cmp	r3, #0
 80085a8:	d173      	bne.n	8008692 <tcp_slowtmr+0x1f2>
            pcb->persist_cnt = 0;
 80085aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80085ac:	2200      	movs	r2, #0
 80085ae:	f883 2094 	strb.w	r2, [r3, #148]	; 0x94
            if (pcb->persist_backoff < sizeof(tcp_persist_backoff)) {
 80085b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80085b4:	f893 3095 	ldrb.w	r3, [r3, #149]	; 0x95
 80085b8:	2b06      	cmp	r3, #6
 80085ba:	d86a      	bhi.n	8008692 <tcp_slowtmr+0x1f2>
              pcb->persist_backoff++;
 80085bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80085be:	f893 3095 	ldrb.w	r3, [r3, #149]	; 0x95
 80085c2:	3301      	adds	r3, #1
 80085c4:	b2da      	uxtb	r2, r3
 80085c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80085c8:	f883 2095 	strb.w	r2, [r3, #149]	; 0x95
 80085cc:	e061      	b.n	8008692 <tcp_slowtmr+0x1f2>
            }
          }
        }
      } else {
        /* Increase the retransmission timer if it is running */
        if (pcb->rtime >= 0) {
 80085ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80085d0:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 80085d4:	2b00      	cmp	r3, #0
 80085d6:	db08      	blt.n	80085ea <tcp_slowtmr+0x14a>
          ++pcb->rtime;
 80085d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80085da:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 80085de:	b29b      	uxth	r3, r3
 80085e0:	3301      	adds	r3, #1
 80085e2:	b29b      	uxth	r3, r3
 80085e4:	b21a      	sxth	r2, r3
 80085e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80085e8:	861a      	strh	r2, [r3, #48]	; 0x30
        }

        if (pcb->unacked != NULL && pcb->rtime >= pcb->rto) {
 80085ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80085ec:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80085ee:	2b00      	cmp	r3, #0
 80085f0:	d04f      	beq.n	8008692 <tcp_slowtmr+0x1f2>
 80085f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80085f4:	f9b3 2030 	ldrsh.w	r2, [r3, #48]	; 0x30
 80085f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80085fa:	f9b3 3040 	ldrsh.w	r3, [r3, #64]	; 0x40
 80085fe:	429a      	cmp	r2, r3
 8008600:	db47      	blt.n	8008692 <tcp_slowtmr+0x1f2>
                                      " pcb->rto %"S16_F"\n",
                                      pcb->rtime, pcb->rto));

          /* Double retransmission time-out unless we are trying to
           * connect to somebody (i.e., we are in SYN_SENT). */
          if (pcb->state != SYN_SENT) {
 8008602:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008604:	7d1b      	ldrb	r3, [r3, #20]
 8008606:	2b02      	cmp	r3, #2
 8008608:	d018      	beq.n	800863c <tcp_slowtmr+0x19c>
            u8_t backoff_idx = LWIP_MIN(pcb->nrtx, sizeof(tcp_backoff)-1);
 800860a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800860c:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8008610:	2b0c      	cmp	r3, #12
 8008612:	bf28      	it	cs
 8008614:	230c      	movcs	r3, #12
 8008616:	75fb      	strb	r3, [r7, #23]
            pcb->rto = ((pcb->sa >> 3) + pcb->sv) << tcp_backoff[backoff_idx];
 8008618:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800861a:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 800861e:	10db      	asrs	r3, r3, #3
 8008620:	b21b      	sxth	r3, r3
 8008622:	461a      	mov	r2, r3
 8008624:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008626:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 800862a:	4413      	add	r3, r2
 800862c:	7dfa      	ldrb	r2, [r7, #23]
 800862e:	493e      	ldr	r1, [pc, #248]	; (8008728 <tcp_slowtmr+0x288>)
 8008630:	5c8a      	ldrb	r2, [r1, r2]
 8008632:	4093      	lsls	r3, r2
 8008634:	b21a      	sxth	r2, r3
 8008636:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008638:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
          }

          /* Reset the retransmission timer. */
          pcb->rtime = 0;
 800863c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800863e:	2200      	movs	r2, #0
 8008640:	861a      	strh	r2, [r3, #48]	; 0x30

          /* Reduce congestion window and ssthresh. */
          eff_wnd = LWIP_MIN(pcb->cwnd, pcb->snd_wnd);
 8008642:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008644:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 8008648:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800864a:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 800864e:	4293      	cmp	r3, r2
 8008650:	bf28      	it	cs
 8008652:	4613      	movcs	r3, r2
 8008654:	82bb      	strh	r3, [r7, #20]
          pcb->ssthresh = eff_wnd >> 1;
 8008656:	8abb      	ldrh	r3, [r7, #20]
 8008658:	085b      	lsrs	r3, r3, #1
 800865a:	b29a      	uxth	r2, r3
 800865c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800865e:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
          if (pcb->ssthresh < (tcpwnd_size_t)(pcb->mss << 1)) {
 8008662:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008664:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 8008668:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800866a:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800866c:	005b      	lsls	r3, r3, #1
 800866e:	b29b      	uxth	r3, r3
 8008670:	429a      	cmp	r2, r3
 8008672:	d206      	bcs.n	8008682 <tcp_slowtmr+0x1e2>
            pcb->ssthresh = (pcb->mss << 1);
 8008674:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008676:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8008678:	005b      	lsls	r3, r3, #1
 800867a:	b29a      	uxth	r2, r3
 800867c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800867e:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
          }
          pcb->cwnd = pcb->mss;
 8008682:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008684:	8e5a      	ldrh	r2, [r3, #50]	; 0x32
 8008686:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008688:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
                                       " ssthresh %"TCPWNDSIZE_F"\n",
                                       pcb->cwnd, pcb->ssthresh));

          /* The following needs to be called AFTER cwnd is set to one
             mss - STJ */
          tcp_rexmit_rto(pcb);
 800868c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800868e:	f003 fd4d 	bl	800c12c <tcp_rexmit_rto>
        }
      }
    }
    /* Check if this PCB has stayed too long in FIN-WAIT-2 */
    if (pcb->state == FIN_WAIT_2) {
 8008692:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008694:	7d1b      	ldrb	r3, [r3, #20]
 8008696:	2b06      	cmp	r3, #6
 8008698:	d10f      	bne.n	80086ba <tcp_slowtmr+0x21a>
      /* If this PCB is in FIN_WAIT_2 because of SHUT_WR don't let it time out. */
      if (pcb->flags & TF_RXCLOSED) {
 800869a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800869c:	7e9b      	ldrb	r3, [r3, #26]
 800869e:	f003 0310 	and.w	r3, r3, #16
 80086a2:	2b00      	cmp	r3, #0
 80086a4:	d009      	beq.n	80086ba <tcp_slowtmr+0x21a>
        /* PCB was fully closed (either through close() or SHUT_RDWR):
           normal FIN-WAIT timeout handling. */
        if ((u32_t)(tcp_ticks - pcb->tmr) >
 80086a6:	4b17      	ldr	r3, [pc, #92]	; (8008704 <tcp_slowtmr+0x264>)
 80086a8:	681a      	ldr	r2, [r3, #0]
 80086aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80086ac:	6a1b      	ldr	r3, [r3, #32]
 80086ae:	1ad3      	subs	r3, r2, r3
 80086b0:	2b28      	cmp	r3, #40	; 0x28
 80086b2:	d902      	bls.n	80086ba <tcp_slowtmr+0x21a>
            TCP_FIN_WAIT_TIMEOUT / TCP_SLOW_INTERVAL) {
          ++pcb_remove;
 80086b4:	7ffb      	ldrb	r3, [r7, #31]
 80086b6:	3301      	adds	r3, #1
 80086b8:	77fb      	strb	r3, [r7, #31]
        }
      }
    }

    /* Check if KEEPALIVE should be sent */
    if (ip_get_option(pcb, SOF_KEEPALIVE) &&
 80086ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80086bc:	7a1b      	ldrb	r3, [r3, #8]
 80086be:	f003 0308 	and.w	r3, r3, #8
 80086c2:	2b00      	cmp	r3, #0
 80086c4:	d05d      	beq.n	8008782 <tcp_slowtmr+0x2e2>
       ((pcb->state == ESTABLISHED) ||
 80086c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80086c8:	7d1b      	ldrb	r3, [r3, #20]
    if (ip_get_option(pcb, SOF_KEEPALIVE) &&
 80086ca:	2b04      	cmp	r3, #4
 80086cc:	d003      	beq.n	80086d6 <tcp_slowtmr+0x236>
        (pcb->state == CLOSE_WAIT))) {
 80086ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80086d0:	7d1b      	ldrb	r3, [r3, #20]
       ((pcb->state == ESTABLISHED) ||
 80086d2:	2b07      	cmp	r3, #7
 80086d4:	d155      	bne.n	8008782 <tcp_slowtmr+0x2e2>
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 80086d6:	4b0b      	ldr	r3, [pc, #44]	; (8008704 <tcp_slowtmr+0x264>)
 80086d8:	681a      	ldr	r2, [r3, #0]
 80086da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80086dc:	6a1b      	ldr	r3, [r3, #32]
 80086de:	1ad2      	subs	r2, r2, r3
         (pcb->keep_idle + TCP_KEEP_DUR(pcb)) / TCP_SLOW_INTERVAL)
 80086e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80086e2:	f8d3 1090 	ldr.w	r1, [r3, #144]	; 0x90
 80086e6:	4b11      	ldr	r3, [pc, #68]	; (800872c <tcp_slowtmr+0x28c>)
 80086e8:	440b      	add	r3, r1
 80086ea:	4911      	ldr	r1, [pc, #68]	; (8008730 <tcp_slowtmr+0x290>)
 80086ec:	fba1 1303 	umull	r1, r3, r1, r3
 80086f0:	095b      	lsrs	r3, r3, #5
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 80086f2:	429a      	cmp	r2, r3
 80086f4:	d91e      	bls.n	8008734 <tcp_slowtmr+0x294>
      {
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: KEEPALIVE timeout. Aborting connection to "));
        ip_addr_debug_print(TCP_DEBUG, &pcb->remote_ip);
        LWIP_DEBUGF(TCP_DEBUG, ("\n"));

        ++pcb_remove;
 80086f6:	7ffb      	ldrb	r3, [r7, #31]
 80086f8:	3301      	adds	r3, #1
 80086fa:	77fb      	strb	r3, [r7, #31]
        ++pcb_reset;
 80086fc:	7fbb      	ldrb	r3, [r7, #30]
 80086fe:	3301      	adds	r3, #1
 8008700:	77bb      	strb	r3, [r7, #30]
 8008702:	e03e      	b.n	8008782 <tcp_slowtmr+0x2e2>
 8008704:	2400acdc 	.word	0x2400acdc
 8008708:	2400403e 	.word	0x2400403e
 800870c:	2400acd8 	.word	0x2400acd8
 8008710:	08011cf4 	.word	0x08011cf4
 8008714:	08011ea4 	.word	0x08011ea4
 8008718:	08011d30 	.word	0x08011d30
 800871c:	08011ed0 	.word	0x08011ed0
 8008720:	08011efc 	.word	0x08011efc
 8008724:	080131cc 	.word	0x080131cc
 8008728:	080131bc 	.word	0x080131bc
 800872c:	000a4cb8 	.word	0x000a4cb8
 8008730:	10624dd3 	.word	0x10624dd3
      } else if ((u32_t)(tcp_ticks - pcb->tmr) >
 8008734:	4b97      	ldr	r3, [pc, #604]	; (8008994 <tcp_slowtmr+0x4f4>)
 8008736:	681a      	ldr	r2, [r3, #0]
 8008738:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800873a:	6a1b      	ldr	r3, [r3, #32]
 800873c:	1ad2      	subs	r2, r2, r3
                (pcb->keep_idle + pcb->keep_cnt_sent * TCP_KEEP_INTVL(pcb))
 800873e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008740:	f8d3 1090 	ldr.w	r1, [r3, #144]	; 0x90
 8008744:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008746:	f893 3096 	ldrb.w	r3, [r3, #150]	; 0x96
 800874a:	4618      	mov	r0, r3
 800874c:	4b92      	ldr	r3, [pc, #584]	; (8008998 <tcp_slowtmr+0x4f8>)
 800874e:	fb03 f300 	mul.w	r3, r3, r0
 8008752:	440b      	add	r3, r1
                / TCP_SLOW_INTERVAL)
 8008754:	4991      	ldr	r1, [pc, #580]	; (800899c <tcp_slowtmr+0x4fc>)
 8008756:	fba1 1303 	umull	r1, r3, r1, r3
 800875a:	095b      	lsrs	r3, r3, #5
      } else if ((u32_t)(tcp_ticks - pcb->tmr) >
 800875c:	429a      	cmp	r2, r3
 800875e:	d910      	bls.n	8008782 <tcp_slowtmr+0x2e2>
      {
        err = tcp_keepalive(pcb);
 8008760:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8008762:	f003 fdc2 	bl	800c2ea <tcp_keepalive>
 8008766:	4603      	mov	r3, r0
 8008768:	777b      	strb	r3, [r7, #29]
        if (err == ERR_OK) {
 800876a:	f997 301d 	ldrsb.w	r3, [r7, #29]
 800876e:	2b00      	cmp	r3, #0
 8008770:	d107      	bne.n	8008782 <tcp_slowtmr+0x2e2>
          pcb->keep_cnt_sent++;
 8008772:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008774:	f893 3096 	ldrb.w	r3, [r3, #150]	; 0x96
 8008778:	3301      	adds	r3, #1
 800877a:	b2da      	uxtb	r2, r3
 800877c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800877e:	f883 2096 	strb.w	r2, [r3, #150]	; 0x96

    /* If this PCB has queued out of sequence data, but has been
       inactive for too long, will drop the data (it will eventually
       be retransmitted). */
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL &&
 8008782:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008784:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008786:	2b00      	cmp	r3, #0
 8008788:	d016      	beq.n	80087b8 <tcp_slowtmr+0x318>
        (u32_t)tcp_ticks - pcb->tmr >= pcb->rto * TCP_OOSEQ_TIMEOUT) {
 800878a:	4b82      	ldr	r3, [pc, #520]	; (8008994 <tcp_slowtmr+0x4f4>)
 800878c:	681a      	ldr	r2, [r3, #0]
 800878e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008790:	6a1b      	ldr	r3, [r3, #32]
 8008792:	1ad2      	subs	r2, r2, r3
 8008794:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008796:	f9b3 3040 	ldrsh.w	r3, [r3, #64]	; 0x40
 800879a:	4619      	mov	r1, r3
 800879c:	460b      	mov	r3, r1
 800879e:	005b      	lsls	r3, r3, #1
 80087a0:	440b      	add	r3, r1
 80087a2:	005b      	lsls	r3, r3, #1
    if (pcb->ooseq != NULL &&
 80087a4:	429a      	cmp	r2, r3
 80087a6:	d307      	bcc.n	80087b8 <tcp_slowtmr+0x318>
      tcp_segs_free(pcb->ooseq);
 80087a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80087aa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80087ac:	4618      	mov	r0, r3
 80087ae:	f000 fa05 	bl	8008bbc <tcp_segs_free>
      pcb->ooseq = NULL;
 80087b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80087b4:	2200      	movs	r2, #0
 80087b6:	671a      	str	r2, [r3, #112]	; 0x70
      LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_slowtmr: dropping OOSEQ queued data\n"));
    }
#endif /* TCP_QUEUE_OOSEQ */

    /* Check if this PCB has stayed too long in SYN-RCVD */
    if (pcb->state == SYN_RCVD) {
 80087b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80087ba:	7d1b      	ldrb	r3, [r3, #20]
 80087bc:	2b03      	cmp	r3, #3
 80087be:	d109      	bne.n	80087d4 <tcp_slowtmr+0x334>
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 80087c0:	4b74      	ldr	r3, [pc, #464]	; (8008994 <tcp_slowtmr+0x4f4>)
 80087c2:	681a      	ldr	r2, [r3, #0]
 80087c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80087c6:	6a1b      	ldr	r3, [r3, #32]
 80087c8:	1ad3      	subs	r3, r2, r3
 80087ca:	2b28      	cmp	r3, #40	; 0x28
 80087cc:	d902      	bls.n	80087d4 <tcp_slowtmr+0x334>
          TCP_SYN_RCVD_TIMEOUT / TCP_SLOW_INTERVAL) {
        ++pcb_remove;
 80087ce:	7ffb      	ldrb	r3, [r7, #31]
 80087d0:	3301      	adds	r3, #1
 80087d2:	77fb      	strb	r3, [r7, #31]
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: removing pcb stuck in SYN-RCVD\n"));
      }
    }

    /* Check if this PCB has stayed too long in LAST-ACK */
    if (pcb->state == LAST_ACK) {
 80087d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80087d6:	7d1b      	ldrb	r3, [r3, #20]
 80087d8:	2b09      	cmp	r3, #9
 80087da:	d109      	bne.n	80087f0 <tcp_slowtmr+0x350>
      if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 80087dc:	4b6d      	ldr	r3, [pc, #436]	; (8008994 <tcp_slowtmr+0x4f4>)
 80087de:	681a      	ldr	r2, [r3, #0]
 80087e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80087e2:	6a1b      	ldr	r3, [r3, #32]
 80087e4:	1ad3      	subs	r3, r2, r3
 80087e6:	2bf0      	cmp	r3, #240	; 0xf0
 80087e8:	d902      	bls.n	80087f0 <tcp_slowtmr+0x350>
        ++pcb_remove;
 80087ea:	7ffb      	ldrb	r3, [r7, #31]
 80087ec:	3301      	adds	r3, #1
 80087ee:	77fb      	strb	r3, [r7, #31]
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: removing pcb stuck in LAST-ACK\n"));
      }
    }

    /* If the PCB should be removed, do it. */
    if (pcb_remove) {
 80087f0:	7ffb      	ldrb	r3, [r7, #31]
 80087f2:	2b00      	cmp	r3, #0
 80087f4:	d05d      	beq.n	80088b2 <tcp_slowtmr+0x412>
      struct tcp_pcb *pcb2;
#if LWIP_CALLBACK_API
      tcp_err_fn err_fn = pcb->errf;
 80087f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80087f8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80087fc:	60fb      	str	r3, [r7, #12]
#endif /* LWIP_CALLBACK_API */
      void *err_arg;
      enum tcp_state last_state;
      tcp_pcb_purge(pcb);
 80087fe:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8008800:	f000 fb84 	bl	8008f0c <tcp_pcb_purge>
      /* Remove PCB from tcp_active_pcbs list. */
      if (prev != NULL) {
 8008804:	6a3b      	ldr	r3, [r7, #32]
 8008806:	2b00      	cmp	r3, #0
 8008808:	d010      	beq.n	800882c <tcp_slowtmr+0x38c>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_active_pcbs", pcb != tcp_active_pcbs);
 800880a:	4b65      	ldr	r3, [pc, #404]	; (80089a0 <tcp_slowtmr+0x500>)
 800880c:	681b      	ldr	r3, [r3, #0]
 800880e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008810:	429a      	cmp	r2, r3
 8008812:	d106      	bne.n	8008822 <tcp_slowtmr+0x382>
 8008814:	4b63      	ldr	r3, [pc, #396]	; (80089a4 <tcp_slowtmr+0x504>)
 8008816:	f240 4289 	movw	r2, #1161	; 0x489
 800881a:	4963      	ldr	r1, [pc, #396]	; (80089a8 <tcp_slowtmr+0x508>)
 800881c:	4863      	ldr	r0, [pc, #396]	; (80089ac <tcp_slowtmr+0x50c>)
 800881e:	f007 fe87 	bl	8010530 <iprintf>
        prev->next = pcb->next;
 8008822:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008824:	68da      	ldr	r2, [r3, #12]
 8008826:	6a3b      	ldr	r3, [r7, #32]
 8008828:	60da      	str	r2, [r3, #12]
 800882a:	e00f      	b.n	800884c <tcp_slowtmr+0x3ac>
      } else {
        /* This PCB was the first. */
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_active_pcbs", tcp_active_pcbs == pcb);
 800882c:	4b5c      	ldr	r3, [pc, #368]	; (80089a0 <tcp_slowtmr+0x500>)
 800882e:	681b      	ldr	r3, [r3, #0]
 8008830:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008832:	429a      	cmp	r2, r3
 8008834:	d006      	beq.n	8008844 <tcp_slowtmr+0x3a4>
 8008836:	4b5b      	ldr	r3, [pc, #364]	; (80089a4 <tcp_slowtmr+0x504>)
 8008838:	f240 428d 	movw	r2, #1165	; 0x48d
 800883c:	495c      	ldr	r1, [pc, #368]	; (80089b0 <tcp_slowtmr+0x510>)
 800883e:	485b      	ldr	r0, [pc, #364]	; (80089ac <tcp_slowtmr+0x50c>)
 8008840:	f007 fe76 	bl	8010530 <iprintf>
        tcp_active_pcbs = pcb->next;
 8008844:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008846:	68db      	ldr	r3, [r3, #12]
 8008848:	4a55      	ldr	r2, [pc, #340]	; (80089a0 <tcp_slowtmr+0x500>)
 800884a:	6013      	str	r3, [r2, #0]
      }

      if (pcb_reset) {
 800884c:	7fbb      	ldrb	r3, [r7, #30]
 800884e:	2b00      	cmp	r3, #0
 8008850:	d010      	beq.n	8008874 <tcp_slowtmr+0x3d4>
        tcp_rst(pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
 8008852:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008854:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 8008856:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008858:	6a59      	ldr	r1, [r3, #36]	; 0x24
 800885a:	6a7c      	ldr	r4, [r7, #36]	; 0x24
 800885c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800885e:	1d1d      	adds	r5, r3, #4
 8008860:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008862:	8adb      	ldrh	r3, [r3, #22]
 8008864:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008866:	8b12      	ldrh	r2, [r2, #24]
 8008868:	9201      	str	r2, [sp, #4]
 800886a:	9300      	str	r3, [sp, #0]
 800886c:	462b      	mov	r3, r5
 800886e:	4622      	mov	r2, r4
 8008870:	f003 fbe6 	bl	800c040 <tcp_rst>
                 pcb->local_port, pcb->remote_port);
      }

      err_arg = pcb->callback_arg;
 8008874:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008876:	691b      	ldr	r3, [r3, #16]
 8008878:	60bb      	str	r3, [r7, #8]
      last_state = pcb->state;
 800887a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800887c:	7d1b      	ldrb	r3, [r3, #20]
 800887e:	71fb      	strb	r3, [r7, #7]
      pcb2 = pcb;
 8008880:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008882:	603b      	str	r3, [r7, #0]
      pcb = pcb->next;
 8008884:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008886:	68db      	ldr	r3, [r3, #12]
 8008888:	627b      	str	r3, [r7, #36]	; 0x24
      memp_free(MEMP_TCP_PCB, pcb2);
 800888a:	6839      	ldr	r1, [r7, #0]
 800888c:	2001      	movs	r0, #1
 800888e:	f7fe faa7 	bl	8006de0 <memp_free>

      tcp_active_pcbs_changed = 0;
 8008892:	4b48      	ldr	r3, [pc, #288]	; (80089b4 <tcp_slowtmr+0x514>)
 8008894:	2200      	movs	r2, #0
 8008896:	701a      	strb	r2, [r3, #0]
      TCP_EVENT_ERR(last_state, err_fn, err_arg, ERR_ABRT);
 8008898:	68fb      	ldr	r3, [r7, #12]
 800889a:	2b00      	cmp	r3, #0
 800889c:	d004      	beq.n	80088a8 <tcp_slowtmr+0x408>
 800889e:	68fb      	ldr	r3, [r7, #12]
 80088a0:	f06f 010c 	mvn.w	r1, #12
 80088a4:	68b8      	ldr	r0, [r7, #8]
 80088a6:	4798      	blx	r3
      if (tcp_active_pcbs_changed) {
 80088a8:	4b42      	ldr	r3, [pc, #264]	; (80089b4 <tcp_slowtmr+0x514>)
 80088aa:	781b      	ldrb	r3, [r3, #0]
 80088ac:	2b00      	cmp	r3, #0
 80088ae:	d035      	beq.n	800891c <tcp_slowtmr+0x47c>
        goto tcp_slowtmr_start;
 80088b0:	e606      	b.n	80084c0 <tcp_slowtmr+0x20>
      }
    } else {
      /* get the 'next' element now and work with 'prev' below (in case of abort) */
      prev = pcb;
 80088b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80088b4:	623b      	str	r3, [r7, #32]
      pcb = pcb->next;
 80088b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80088b8:	68db      	ldr	r3, [r3, #12]
 80088ba:	627b      	str	r3, [r7, #36]	; 0x24

      /* We check if we should poll the connection. */
      ++prev->polltmr;
 80088bc:	6a3b      	ldr	r3, [r7, #32]
 80088be:	7edb      	ldrb	r3, [r3, #27]
 80088c0:	3301      	adds	r3, #1
 80088c2:	b2da      	uxtb	r2, r3
 80088c4:	6a3b      	ldr	r3, [r7, #32]
 80088c6:	76da      	strb	r2, [r3, #27]
      if (prev->polltmr >= prev->pollinterval) {
 80088c8:	6a3b      	ldr	r3, [r7, #32]
 80088ca:	7eda      	ldrb	r2, [r3, #27]
 80088cc:	6a3b      	ldr	r3, [r7, #32]
 80088ce:	7f1b      	ldrb	r3, [r3, #28]
 80088d0:	429a      	cmp	r2, r3
 80088d2:	d323      	bcc.n	800891c <tcp_slowtmr+0x47c>
        prev->polltmr = 0;
 80088d4:	6a3b      	ldr	r3, [r7, #32]
 80088d6:	2200      	movs	r2, #0
 80088d8:	76da      	strb	r2, [r3, #27]
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: polling application\n"));
        tcp_active_pcbs_changed = 0;
 80088da:	4b36      	ldr	r3, [pc, #216]	; (80089b4 <tcp_slowtmr+0x514>)
 80088dc:	2200      	movs	r2, #0
 80088de:	701a      	strb	r2, [r3, #0]
        TCP_EVENT_POLL(prev, err);
 80088e0:	6a3b      	ldr	r3, [r7, #32]
 80088e2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80088e6:	2b00      	cmp	r3, #0
 80088e8:	d00a      	beq.n	8008900 <tcp_slowtmr+0x460>
 80088ea:	6a3b      	ldr	r3, [r7, #32]
 80088ec:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80088f0:	6a3a      	ldr	r2, [r7, #32]
 80088f2:	6912      	ldr	r2, [r2, #16]
 80088f4:	6a39      	ldr	r1, [r7, #32]
 80088f6:	4610      	mov	r0, r2
 80088f8:	4798      	blx	r3
 80088fa:	4603      	mov	r3, r0
 80088fc:	777b      	strb	r3, [r7, #29]
 80088fe:	e001      	b.n	8008904 <tcp_slowtmr+0x464>
 8008900:	2300      	movs	r3, #0
 8008902:	777b      	strb	r3, [r7, #29]
        if (tcp_active_pcbs_changed) {
 8008904:	4b2b      	ldr	r3, [pc, #172]	; (80089b4 <tcp_slowtmr+0x514>)
 8008906:	781b      	ldrb	r3, [r3, #0]
 8008908:	2b00      	cmp	r3, #0
 800890a:	d000      	beq.n	800890e <tcp_slowtmr+0x46e>
          goto tcp_slowtmr_start;
 800890c:	e5d8      	b.n	80084c0 <tcp_slowtmr+0x20>
        }
        /* if err == ERR_ABRT, 'prev' is already deallocated */
        if (err == ERR_OK) {
 800890e:	f997 301d 	ldrsb.w	r3, [r7, #29]
 8008912:	2b00      	cmp	r3, #0
 8008914:	d102      	bne.n	800891c <tcp_slowtmr+0x47c>
          tcp_output(prev);
 8008916:	6a38      	ldr	r0, [r7, #32]
 8008918:	f003 f908 	bl	800bb2c <tcp_output>
  while (pcb != NULL) {
 800891c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800891e:	2b00      	cmp	r3, #0
 8008920:	f47f add4 	bne.w	80084cc <tcp_slowtmr+0x2c>
    }
  }


  /* Steps through all of the TIME-WAIT PCBs. */
  prev = NULL;
 8008924:	2300      	movs	r3, #0
 8008926:	623b      	str	r3, [r7, #32]
  pcb = tcp_tw_pcbs;
 8008928:	4b23      	ldr	r3, [pc, #140]	; (80089b8 <tcp_slowtmr+0x518>)
 800892a:	681b      	ldr	r3, [r3, #0]
 800892c:	627b      	str	r3, [r7, #36]	; 0x24
  while (pcb != NULL) {
 800892e:	e068      	b.n	8008a02 <tcp_slowtmr+0x562>
    LWIP_ASSERT("tcp_slowtmr: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 8008930:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008932:	7d1b      	ldrb	r3, [r3, #20]
 8008934:	2b0a      	cmp	r3, #10
 8008936:	d006      	beq.n	8008946 <tcp_slowtmr+0x4a6>
 8008938:	4b1a      	ldr	r3, [pc, #104]	; (80089a4 <tcp_slowtmr+0x504>)
 800893a:	f240 42bd 	movw	r2, #1213	; 0x4bd
 800893e:	491f      	ldr	r1, [pc, #124]	; (80089bc <tcp_slowtmr+0x51c>)
 8008940:	481a      	ldr	r0, [pc, #104]	; (80089ac <tcp_slowtmr+0x50c>)
 8008942:	f007 fdf5 	bl	8010530 <iprintf>
    pcb_remove = 0;
 8008946:	2300      	movs	r3, #0
 8008948:	77fb      	strb	r3, [r7, #31]

    /* Check if this PCB has stayed long enough in TIME-WAIT */
    if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 800894a:	4b12      	ldr	r3, [pc, #72]	; (8008994 <tcp_slowtmr+0x4f4>)
 800894c:	681a      	ldr	r2, [r3, #0]
 800894e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008950:	6a1b      	ldr	r3, [r3, #32]
 8008952:	1ad3      	subs	r3, r2, r3
 8008954:	2bf0      	cmp	r3, #240	; 0xf0
 8008956:	d902      	bls.n	800895e <tcp_slowtmr+0x4be>
      ++pcb_remove;
 8008958:	7ffb      	ldrb	r3, [r7, #31]
 800895a:	3301      	adds	r3, #1
 800895c:	77fb      	strb	r3, [r7, #31]
    }

    /* If the PCB should be removed, do it. */
    if (pcb_remove) {
 800895e:	7ffb      	ldrb	r3, [r7, #31]
 8008960:	2b00      	cmp	r3, #0
 8008962:	d049      	beq.n	80089f8 <tcp_slowtmr+0x558>
      struct tcp_pcb *pcb2;
      tcp_pcb_purge(pcb);
 8008964:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8008966:	f000 fad1 	bl	8008f0c <tcp_pcb_purge>
      /* Remove PCB from tcp_tw_pcbs list. */
      if (prev != NULL) {
 800896a:	6a3b      	ldr	r3, [r7, #32]
 800896c:	2b00      	cmp	r3, #0
 800896e:	d029      	beq.n	80089c4 <tcp_slowtmr+0x524>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_tw_pcbs", pcb != tcp_tw_pcbs);
 8008970:	4b11      	ldr	r3, [pc, #68]	; (80089b8 <tcp_slowtmr+0x518>)
 8008972:	681b      	ldr	r3, [r3, #0]
 8008974:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008976:	429a      	cmp	r2, r3
 8008978:	d106      	bne.n	8008988 <tcp_slowtmr+0x4e8>
 800897a:	4b0a      	ldr	r3, [pc, #40]	; (80089a4 <tcp_slowtmr+0x504>)
 800897c:	f240 42cb 	movw	r2, #1227	; 0x4cb
 8008980:	490f      	ldr	r1, [pc, #60]	; (80089c0 <tcp_slowtmr+0x520>)
 8008982:	480a      	ldr	r0, [pc, #40]	; (80089ac <tcp_slowtmr+0x50c>)
 8008984:	f007 fdd4 	bl	8010530 <iprintf>
        prev->next = pcb->next;
 8008988:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800898a:	68da      	ldr	r2, [r3, #12]
 800898c:	6a3b      	ldr	r3, [r7, #32]
 800898e:	60da      	str	r2, [r3, #12]
 8008990:	e028      	b.n	80089e4 <tcp_slowtmr+0x544>
 8008992:	bf00      	nop
 8008994:	2400acdc 	.word	0x2400acdc
 8008998:	000124f8 	.word	0x000124f8
 800899c:	10624dd3 	.word	0x10624dd3
 80089a0:	2400acd8 	.word	0x2400acd8
 80089a4:	08011cf4 	.word	0x08011cf4
 80089a8:	08011f2c 	.word	0x08011f2c
 80089ac:	08011d30 	.word	0x08011d30
 80089b0:	08011f58 	.word	0x08011f58
 80089b4:	2400acd4 	.word	0x2400acd4
 80089b8:	2400ace8 	.word	0x2400ace8
 80089bc:	08011f84 	.word	0x08011f84
 80089c0:	08011fb4 	.word	0x08011fb4
      } else {
        /* This PCB was the first. */
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_tw_pcbs", tcp_tw_pcbs == pcb);
 80089c4:	4b12      	ldr	r3, [pc, #72]	; (8008a10 <tcp_slowtmr+0x570>)
 80089c6:	681b      	ldr	r3, [r3, #0]
 80089c8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80089ca:	429a      	cmp	r2, r3
 80089cc:	d006      	beq.n	80089dc <tcp_slowtmr+0x53c>
 80089ce:	4b11      	ldr	r3, [pc, #68]	; (8008a14 <tcp_slowtmr+0x574>)
 80089d0:	f240 42cf 	movw	r2, #1231	; 0x4cf
 80089d4:	4910      	ldr	r1, [pc, #64]	; (8008a18 <tcp_slowtmr+0x578>)
 80089d6:	4811      	ldr	r0, [pc, #68]	; (8008a1c <tcp_slowtmr+0x57c>)
 80089d8:	f007 fdaa 	bl	8010530 <iprintf>
        tcp_tw_pcbs = pcb->next;
 80089dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80089de:	68db      	ldr	r3, [r3, #12]
 80089e0:	4a0b      	ldr	r2, [pc, #44]	; (8008a10 <tcp_slowtmr+0x570>)
 80089e2:	6013      	str	r3, [r2, #0]
      }
      pcb2 = pcb;
 80089e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80089e6:	61bb      	str	r3, [r7, #24]
      pcb = pcb->next;
 80089e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80089ea:	68db      	ldr	r3, [r3, #12]
 80089ec:	627b      	str	r3, [r7, #36]	; 0x24
      memp_free(MEMP_TCP_PCB, pcb2);
 80089ee:	69b9      	ldr	r1, [r7, #24]
 80089f0:	2001      	movs	r0, #1
 80089f2:	f7fe f9f5 	bl	8006de0 <memp_free>
 80089f6:	e004      	b.n	8008a02 <tcp_slowtmr+0x562>
    } else {
      prev = pcb;
 80089f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80089fa:	623b      	str	r3, [r7, #32]
      pcb = pcb->next;
 80089fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80089fe:	68db      	ldr	r3, [r3, #12]
 8008a00:	627b      	str	r3, [r7, #36]	; 0x24
  while (pcb != NULL) {
 8008a02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008a04:	2b00      	cmp	r3, #0
 8008a06:	d193      	bne.n	8008930 <tcp_slowtmr+0x490>
    }
  }
}
 8008a08:	bf00      	nop
 8008a0a:	3728      	adds	r7, #40	; 0x28
 8008a0c:	46bd      	mov	sp, r7
 8008a0e:	bdb0      	pop	{r4, r5, r7, pc}
 8008a10:	2400ace8 	.word	0x2400ace8
 8008a14:	08011cf4 	.word	0x08011cf4
 8008a18:	08011fdc 	.word	0x08011fdc
 8008a1c:	08011d30 	.word	0x08011d30

08008a20 <tcp_fasttmr>:
 *
 * Automatically called from tcp_tmr().
 */
void
tcp_fasttmr(void)
{
 8008a20:	b580      	push	{r7, lr}
 8008a22:	b082      	sub	sp, #8
 8008a24:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb;

  ++tcp_timer_ctr;
 8008a26:	4b2d      	ldr	r3, [pc, #180]	; (8008adc <tcp_fasttmr+0xbc>)
 8008a28:	781b      	ldrb	r3, [r3, #0]
 8008a2a:	3301      	adds	r3, #1
 8008a2c:	b2da      	uxtb	r2, r3
 8008a2e:	4b2b      	ldr	r3, [pc, #172]	; (8008adc <tcp_fasttmr+0xbc>)
 8008a30:	701a      	strb	r2, [r3, #0]

tcp_fasttmr_start:
  pcb = tcp_active_pcbs;
 8008a32:	4b2b      	ldr	r3, [pc, #172]	; (8008ae0 <tcp_fasttmr+0xc0>)
 8008a34:	681b      	ldr	r3, [r3, #0]
 8008a36:	607b      	str	r3, [r7, #4]

  while (pcb != NULL) {
 8008a38:	e048      	b.n	8008acc <tcp_fasttmr+0xac>
    if (pcb->last_timer != tcp_timer_ctr) {
 8008a3a:	687b      	ldr	r3, [r7, #4]
 8008a3c:	7f5a      	ldrb	r2, [r3, #29]
 8008a3e:	4b27      	ldr	r3, [pc, #156]	; (8008adc <tcp_fasttmr+0xbc>)
 8008a40:	781b      	ldrb	r3, [r3, #0]
 8008a42:	429a      	cmp	r2, r3
 8008a44:	d03f      	beq.n	8008ac6 <tcp_fasttmr+0xa6>
      struct tcp_pcb *next;
      pcb->last_timer = tcp_timer_ctr;
 8008a46:	4b25      	ldr	r3, [pc, #148]	; (8008adc <tcp_fasttmr+0xbc>)
 8008a48:	781a      	ldrb	r2, [r3, #0]
 8008a4a:	687b      	ldr	r3, [r7, #4]
 8008a4c:	775a      	strb	r2, [r3, #29]
      /* send delayed ACKs */
      if (pcb->flags & TF_ACK_DELAY) {
 8008a4e:	687b      	ldr	r3, [r7, #4]
 8008a50:	7e9b      	ldrb	r3, [r3, #26]
 8008a52:	f003 0301 	and.w	r3, r3, #1
 8008a56:	2b00      	cmp	r3, #0
 8008a58:	d010      	beq.n	8008a7c <tcp_fasttmr+0x5c>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_fasttmr: delayed ACK\n"));
        tcp_ack_now(pcb);
 8008a5a:	687b      	ldr	r3, [r7, #4]
 8008a5c:	7e9b      	ldrb	r3, [r3, #26]
 8008a5e:	f043 0302 	orr.w	r3, r3, #2
 8008a62:	b2da      	uxtb	r2, r3
 8008a64:	687b      	ldr	r3, [r7, #4]
 8008a66:	769a      	strb	r2, [r3, #26]
        tcp_output(pcb);
 8008a68:	6878      	ldr	r0, [r7, #4]
 8008a6a:	f003 f85f 	bl	800bb2c <tcp_output>
        pcb->flags &= ~(TF_ACK_DELAY | TF_ACK_NOW);
 8008a6e:	687b      	ldr	r3, [r7, #4]
 8008a70:	7e9b      	ldrb	r3, [r3, #26]
 8008a72:	f023 0303 	bic.w	r3, r3, #3
 8008a76:	b2da      	uxtb	r2, r3
 8008a78:	687b      	ldr	r3, [r7, #4]
 8008a7a:	769a      	strb	r2, [r3, #26]
      }
      /* send pending FIN */
      if (pcb->flags & TF_CLOSEPEND) {
 8008a7c:	687b      	ldr	r3, [r7, #4]
 8008a7e:	7e9b      	ldrb	r3, [r3, #26]
 8008a80:	f003 0308 	and.w	r3, r3, #8
 8008a84:	2b00      	cmp	r3, #0
 8008a86:	d009      	beq.n	8008a9c <tcp_fasttmr+0x7c>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_fasttmr: pending FIN\n"));
        pcb->flags &= ~(TF_CLOSEPEND);
 8008a88:	687b      	ldr	r3, [r7, #4]
 8008a8a:	7e9b      	ldrb	r3, [r3, #26]
 8008a8c:	f023 0308 	bic.w	r3, r3, #8
 8008a90:	b2da      	uxtb	r2, r3
 8008a92:	687b      	ldr	r3, [r7, #4]
 8008a94:	769a      	strb	r2, [r3, #26]
        tcp_close_shutdown_fin(pcb);
 8008a96:	6878      	ldr	r0, [r7, #4]
 8008a98:	f7ff fb1c 	bl	80080d4 <tcp_close_shutdown_fin>
      }

      next = pcb->next;
 8008a9c:	687b      	ldr	r3, [r7, #4]
 8008a9e:	68db      	ldr	r3, [r3, #12]
 8008aa0:	603b      	str	r3, [r7, #0]

      /* If there is data which was previously "refused" by upper layer */
      if (pcb->refused_data != NULL) {
 8008aa2:	687b      	ldr	r3, [r7, #4]
 8008aa4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008aa6:	2b00      	cmp	r3, #0
 8008aa8:	d00a      	beq.n	8008ac0 <tcp_fasttmr+0xa0>
        tcp_active_pcbs_changed = 0;
 8008aaa:	4b0e      	ldr	r3, [pc, #56]	; (8008ae4 <tcp_fasttmr+0xc4>)
 8008aac:	2200      	movs	r2, #0
 8008aae:	701a      	strb	r2, [r3, #0]
        tcp_process_refused_data(pcb);
 8008ab0:	6878      	ldr	r0, [r7, #4]
 8008ab2:	f000 f819 	bl	8008ae8 <tcp_process_refused_data>
        if (tcp_active_pcbs_changed) {
 8008ab6:	4b0b      	ldr	r3, [pc, #44]	; (8008ae4 <tcp_fasttmr+0xc4>)
 8008ab8:	781b      	ldrb	r3, [r3, #0]
 8008aba:	2b00      	cmp	r3, #0
 8008abc:	d000      	beq.n	8008ac0 <tcp_fasttmr+0xa0>
          /* application callback has changed the pcb list: restart the loop */
          goto tcp_fasttmr_start;
 8008abe:	e7b8      	b.n	8008a32 <tcp_fasttmr+0x12>
        }
      }
      pcb = next;
 8008ac0:	683b      	ldr	r3, [r7, #0]
 8008ac2:	607b      	str	r3, [r7, #4]
 8008ac4:	e002      	b.n	8008acc <tcp_fasttmr+0xac>
    } else {
      pcb = pcb->next;
 8008ac6:	687b      	ldr	r3, [r7, #4]
 8008ac8:	68db      	ldr	r3, [r3, #12]
 8008aca:	607b      	str	r3, [r7, #4]
  while (pcb != NULL) {
 8008acc:	687b      	ldr	r3, [r7, #4]
 8008ace:	2b00      	cmp	r3, #0
 8008ad0:	d1b3      	bne.n	8008a3a <tcp_fasttmr+0x1a>
    }
  }
}
 8008ad2:	bf00      	nop
 8008ad4:	3708      	adds	r7, #8
 8008ad6:	46bd      	mov	sp, r7
 8008ad8:	bd80      	pop	{r7, pc}
 8008ada:	bf00      	nop
 8008adc:	2400403e 	.word	0x2400403e
 8008ae0:	2400acd8 	.word	0x2400acd8
 8008ae4:	2400acd4 	.word	0x2400acd4

08008ae8 <tcp_process_refused_data>:
}

/** Pass pcb->refused_data to the recv callback */
err_t
tcp_process_refused_data(struct tcp_pcb *pcb)
{
 8008ae8:	b590      	push	{r4, r7, lr}
 8008aea:	b085      	sub	sp, #20
 8008aec:	af00      	add	r7, sp, #0
 8008aee:	6078      	str	r0, [r7, #4]
  struct pbuf *rest;
  while (pcb->refused_data != NULL)
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
  {
    err_t err;
    u8_t refused_flags = pcb->refused_data->flags;
 8008af0:	687b      	ldr	r3, [r7, #4]
 8008af2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008af4:	7b5b      	ldrb	r3, [r3, #13]
 8008af6:	73bb      	strb	r3, [r7, #14]
    /* set pcb->refused_data to NULL in case the callback frees it and then
       closes the pcb */
    struct pbuf *refused_data = pcb->refused_data;
 8008af8:	687b      	ldr	r3, [r7, #4]
 8008afa:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008afc:	60bb      	str	r3, [r7, #8]
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
    pbuf_split_64k(refused_data, &rest);
    pcb->refused_data = rest;
#else /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
    pcb->refused_data = NULL;
 8008afe:	687b      	ldr	r3, [r7, #4]
 8008b00:	2200      	movs	r2, #0
 8008b02:	675a      	str	r2, [r3, #116]	; 0x74
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
    /* Notify again application with data previously received. */
    LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: notify kept packet\n"));
    TCP_EVENT_RECV(pcb, refused_data, ERR_OK, err);
 8008b04:	687b      	ldr	r3, [r7, #4]
 8008b06:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8008b0a:	2b00      	cmp	r3, #0
 8008b0c:	d00b      	beq.n	8008b26 <tcp_process_refused_data+0x3e>
 8008b0e:	687b      	ldr	r3, [r7, #4]
 8008b10:	f8d3 4080 	ldr.w	r4, [r3, #128]	; 0x80
 8008b14:	687b      	ldr	r3, [r7, #4]
 8008b16:	6918      	ldr	r0, [r3, #16]
 8008b18:	2300      	movs	r3, #0
 8008b1a:	68ba      	ldr	r2, [r7, #8]
 8008b1c:	6879      	ldr	r1, [r7, #4]
 8008b1e:	47a0      	blx	r4
 8008b20:	4603      	mov	r3, r0
 8008b22:	73fb      	strb	r3, [r7, #15]
 8008b24:	e007      	b.n	8008b36 <tcp_process_refused_data+0x4e>
 8008b26:	2300      	movs	r3, #0
 8008b28:	68ba      	ldr	r2, [r7, #8]
 8008b2a:	6879      	ldr	r1, [r7, #4]
 8008b2c:	2000      	movs	r0, #0
 8008b2e:	f000 f88d 	bl	8008c4c <tcp_recv_null>
 8008b32:	4603      	mov	r3, r0
 8008b34:	73fb      	strb	r3, [r7, #15]
    if (err == ERR_OK) {
 8008b36:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8008b3a:	2b00      	cmp	r3, #0
 8008b3c:	d12b      	bne.n	8008b96 <tcp_process_refused_data+0xae>
      /* did refused_data include a FIN? */
      if (refused_flags & PBUF_FLAG_TCP_FIN
 8008b3e:	7bbb      	ldrb	r3, [r7, #14]
 8008b40:	f003 0320 	and.w	r3, r3, #32
 8008b44:	2b00      	cmp	r3, #0
 8008b46:	d034      	beq.n	8008bb2 <tcp_process_refused_data+0xca>
          && (rest == NULL)
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
         ) {
        /* correct rcv_wnd as the application won't call tcp_recved()
           for the FIN's seqno */
        if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 8008b48:	687b      	ldr	r3, [r7, #4]
 8008b4a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008b4c:	f241 62d0 	movw	r2, #5840	; 0x16d0
 8008b50:	4293      	cmp	r3, r2
 8008b52:	d005      	beq.n	8008b60 <tcp_process_refused_data+0x78>
          pcb->rcv_wnd++;
 8008b54:	687b      	ldr	r3, [r7, #4]
 8008b56:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008b58:	3301      	adds	r3, #1
 8008b5a:	b29a      	uxth	r2, r3
 8008b5c:	687b      	ldr	r3, [r7, #4]
 8008b5e:	851a      	strh	r2, [r3, #40]	; 0x28
        }
        TCP_EVENT_CLOSED(pcb, err);
 8008b60:	687b      	ldr	r3, [r7, #4]
 8008b62:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8008b66:	2b00      	cmp	r3, #0
 8008b68:	d00b      	beq.n	8008b82 <tcp_process_refused_data+0x9a>
 8008b6a:	687b      	ldr	r3, [r7, #4]
 8008b6c:	f8d3 4080 	ldr.w	r4, [r3, #128]	; 0x80
 8008b70:	687b      	ldr	r3, [r7, #4]
 8008b72:	6918      	ldr	r0, [r3, #16]
 8008b74:	2300      	movs	r3, #0
 8008b76:	2200      	movs	r2, #0
 8008b78:	6879      	ldr	r1, [r7, #4]
 8008b7a:	47a0      	blx	r4
 8008b7c:	4603      	mov	r3, r0
 8008b7e:	73fb      	strb	r3, [r7, #15]
 8008b80:	e001      	b.n	8008b86 <tcp_process_refused_data+0x9e>
 8008b82:	2300      	movs	r3, #0
 8008b84:	73fb      	strb	r3, [r7, #15]
        if (err == ERR_ABRT) {
 8008b86:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8008b8a:	f113 0f0d 	cmn.w	r3, #13
 8008b8e:	d110      	bne.n	8008bb2 <tcp_process_refused_data+0xca>
          return ERR_ABRT;
 8008b90:	f06f 030c 	mvn.w	r3, #12
 8008b94:	e00e      	b.n	8008bb4 <tcp_process_refused_data+0xcc>
        }
      }
    } else if (err == ERR_ABRT) {
 8008b96:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8008b9a:	f113 0f0d 	cmn.w	r3, #13
 8008b9e:	d102      	bne.n	8008ba6 <tcp_process_refused_data+0xbe>
      /* if err == ERR_ABRT, 'pcb' is already deallocated */
      /* Drop incoming packets because pcb is "full" (only if the incoming
         segment contains data). */
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: drop incoming packets, because pcb is \"full\"\n"));
      return ERR_ABRT;
 8008ba0:	f06f 030c 	mvn.w	r3, #12
 8008ba4:	e006      	b.n	8008bb4 <tcp_process_refused_data+0xcc>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
      if (rest != NULL) {
        pbuf_cat(refused_data, rest);
      }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
      pcb->refused_data = refused_data;
 8008ba6:	687b      	ldr	r3, [r7, #4]
 8008ba8:	68ba      	ldr	r2, [r7, #8]
 8008baa:	675a      	str	r2, [r3, #116]	; 0x74
      return ERR_INPROGRESS;
 8008bac:	f06f 0304 	mvn.w	r3, #4
 8008bb0:	e000      	b.n	8008bb4 <tcp_process_refused_data+0xcc>
    }
  }
  return ERR_OK;
 8008bb2:	2300      	movs	r3, #0
}
 8008bb4:	4618      	mov	r0, r3
 8008bb6:	3714      	adds	r7, #20
 8008bb8:	46bd      	mov	sp, r7
 8008bba:	bd90      	pop	{r4, r7, pc}

08008bbc <tcp_segs_free>:
 *
 * @param seg tcp_seg list of TCP segments to free
 */
void
tcp_segs_free(struct tcp_seg *seg)
{
 8008bbc:	b580      	push	{r7, lr}
 8008bbe:	b084      	sub	sp, #16
 8008bc0:	af00      	add	r7, sp, #0
 8008bc2:	6078      	str	r0, [r7, #4]
  while (seg != NULL) {
 8008bc4:	e007      	b.n	8008bd6 <tcp_segs_free+0x1a>
    struct tcp_seg *next = seg->next;
 8008bc6:	687b      	ldr	r3, [r7, #4]
 8008bc8:	681b      	ldr	r3, [r3, #0]
 8008bca:	60fb      	str	r3, [r7, #12]
    tcp_seg_free(seg);
 8008bcc:	6878      	ldr	r0, [r7, #4]
 8008bce:	f000 f809 	bl	8008be4 <tcp_seg_free>
    seg = next;
 8008bd2:	68fb      	ldr	r3, [r7, #12]
 8008bd4:	607b      	str	r3, [r7, #4]
  while (seg != NULL) {
 8008bd6:	687b      	ldr	r3, [r7, #4]
 8008bd8:	2b00      	cmp	r3, #0
 8008bda:	d1f4      	bne.n	8008bc6 <tcp_segs_free+0xa>
  }
}
 8008bdc:	bf00      	nop
 8008bde:	3710      	adds	r7, #16
 8008be0:	46bd      	mov	sp, r7
 8008be2:	bd80      	pop	{r7, pc}

08008be4 <tcp_seg_free>:
 *
 * @param seg single tcp_seg to free
 */
void
tcp_seg_free(struct tcp_seg *seg)
{
 8008be4:	b580      	push	{r7, lr}
 8008be6:	b082      	sub	sp, #8
 8008be8:	af00      	add	r7, sp, #0
 8008bea:	6078      	str	r0, [r7, #4]
  if (seg != NULL) {
 8008bec:	687b      	ldr	r3, [r7, #4]
 8008bee:	2b00      	cmp	r3, #0
 8008bf0:	d00c      	beq.n	8008c0c <tcp_seg_free+0x28>
    if (seg->p != NULL) {
 8008bf2:	687b      	ldr	r3, [r7, #4]
 8008bf4:	685b      	ldr	r3, [r3, #4]
 8008bf6:	2b00      	cmp	r3, #0
 8008bf8:	d004      	beq.n	8008c04 <tcp_seg_free+0x20>
      pbuf_free(seg->p);
 8008bfa:	687b      	ldr	r3, [r7, #4]
 8008bfc:	685b      	ldr	r3, [r3, #4]
 8008bfe:	4618      	mov	r0, r3
 8008c00:	f7fe fe98 	bl	8007934 <pbuf_free>
#if TCP_DEBUG
      seg->p = NULL;
#endif /* TCP_DEBUG */
    }
    memp_free(MEMP_TCP_SEG, seg);
 8008c04:	6879      	ldr	r1, [r7, #4]
 8008c06:	2003      	movs	r0, #3
 8008c08:	f7fe f8ea 	bl	8006de0 <memp_free>
  }
}
 8008c0c:	bf00      	nop
 8008c0e:	3708      	adds	r7, #8
 8008c10:	46bd      	mov	sp, r7
 8008c12:	bd80      	pop	{r7, pc}

08008c14 <tcp_seg_copy>:
 * @param seg the old tcp_seg
 * @return a copy of seg
 */
struct tcp_seg *
tcp_seg_copy(struct tcp_seg *seg)
{
 8008c14:	b580      	push	{r7, lr}
 8008c16:	b084      	sub	sp, #16
 8008c18:	af00      	add	r7, sp, #0
 8008c1a:	6078      	str	r0, [r7, #4]
  struct tcp_seg *cseg;

  cseg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG);
 8008c1c:	2003      	movs	r0, #3
 8008c1e:	f7fe f869 	bl	8006cf4 <memp_malloc>
 8008c22:	60f8      	str	r0, [r7, #12]
  if (cseg == NULL) {
 8008c24:	68fb      	ldr	r3, [r7, #12]
 8008c26:	2b00      	cmp	r3, #0
 8008c28:	d101      	bne.n	8008c2e <tcp_seg_copy+0x1a>
    return NULL;
 8008c2a:	2300      	movs	r3, #0
 8008c2c:	e00a      	b.n	8008c44 <tcp_seg_copy+0x30>
  }
  SMEMCPY((u8_t *)cseg, (const u8_t *)seg, sizeof(struct tcp_seg));
 8008c2e:	2210      	movs	r2, #16
 8008c30:	6879      	ldr	r1, [r7, #4]
 8008c32:	68f8      	ldr	r0, [r7, #12]
 8008c34:	f007 fc69 	bl	801050a <memcpy>
  pbuf_ref(cseg->p);
 8008c38:	68fb      	ldr	r3, [r7, #12]
 8008c3a:	685b      	ldr	r3, [r3, #4]
 8008c3c:	4618      	mov	r0, r3
 8008c3e:	f7fe ff2b 	bl	8007a98 <pbuf_ref>
  return cseg;
 8008c42:	68fb      	ldr	r3, [r7, #12]
}
 8008c44:	4618      	mov	r0, r3
 8008c46:	3710      	adds	r7, #16
 8008c48:	46bd      	mov	sp, r7
 8008c4a:	bd80      	pop	{r7, pc}

08008c4c <tcp_recv_null>:
 * Default receive callback that is called if the user didn't register
 * a recv callback for the pcb.
 */
err_t
tcp_recv_null(void *arg, struct tcp_pcb *pcb, struct pbuf *p, err_t err)
{
 8008c4c:	b580      	push	{r7, lr}
 8008c4e:	b084      	sub	sp, #16
 8008c50:	af00      	add	r7, sp, #0
 8008c52:	60f8      	str	r0, [r7, #12]
 8008c54:	60b9      	str	r1, [r7, #8]
 8008c56:	607a      	str	r2, [r7, #4]
 8008c58:	70fb      	strb	r3, [r7, #3]
  LWIP_UNUSED_ARG(arg);
  if (p != NULL) {
 8008c5a:	687b      	ldr	r3, [r7, #4]
 8008c5c:	2b00      	cmp	r3, #0
 8008c5e:	d009      	beq.n	8008c74 <tcp_recv_null+0x28>
    tcp_recved(pcb, p->tot_len);
 8008c60:	687b      	ldr	r3, [r7, #4]
 8008c62:	891b      	ldrh	r3, [r3, #8]
 8008c64:	4619      	mov	r1, r3
 8008c66:	68b8      	ldr	r0, [r7, #8]
 8008c68:	f7ff fbbe 	bl	80083e8 <tcp_recved>
    pbuf_free(p);
 8008c6c:	6878      	ldr	r0, [r7, #4]
 8008c6e:	f7fe fe61 	bl	8007934 <pbuf_free>
 8008c72:	e008      	b.n	8008c86 <tcp_recv_null+0x3a>
  } else if (err == ERR_OK) {
 8008c74:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8008c78:	2b00      	cmp	r3, #0
 8008c7a:	d104      	bne.n	8008c86 <tcp_recv_null+0x3a>
    return tcp_close(pcb);
 8008c7c:	68b8      	ldr	r0, [r7, #8]
 8008c7e:	f7ff fa8f 	bl	80081a0 <tcp_close>
 8008c82:	4603      	mov	r3, r0
 8008c84:	e000      	b.n	8008c88 <tcp_recv_null+0x3c>
  }
  return ERR_OK;
 8008c86:	2300      	movs	r3, #0
}
 8008c88:	4618      	mov	r0, r3
 8008c8a:	3710      	adds	r7, #16
 8008c8c:	46bd      	mov	sp, r7
 8008c8e:	bd80      	pop	{r7, pc}

08008c90 <tcp_kill_prio>:
 *
 * @param prio minimum priority
 */
static void
tcp_kill_prio(u8_t prio)
{
 8008c90:	b580      	push	{r7, lr}
 8008c92:	b086      	sub	sp, #24
 8008c94:	af00      	add	r7, sp, #0
 8008c96:	4603      	mov	r3, r0
 8008c98:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;
  u8_t mprio;

  mprio = LWIP_MIN(TCP_PRIO_MAX, prio);
 8008c9a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8008c9e:	2b00      	cmp	r3, #0
 8008ca0:	db01      	blt.n	8008ca6 <tcp_kill_prio+0x16>
 8008ca2:	79fb      	ldrb	r3, [r7, #7]
 8008ca4:	e000      	b.n	8008ca8 <tcp_kill_prio+0x18>
 8008ca6:	237f      	movs	r3, #127	; 0x7f
 8008ca8:	72fb      	strb	r3, [r7, #11]

  /* We kill the oldest active connection that has lower priority than prio. */
  inactivity = 0;
 8008caa:	2300      	movs	r3, #0
 8008cac:	60fb      	str	r3, [r7, #12]
  inactive = NULL;
 8008cae:	2300      	movs	r3, #0
 8008cb0:	613b      	str	r3, [r7, #16]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8008cb2:	4b16      	ldr	r3, [pc, #88]	; (8008d0c <tcp_kill_prio+0x7c>)
 8008cb4:	681b      	ldr	r3, [r3, #0]
 8008cb6:	617b      	str	r3, [r7, #20]
 8008cb8:	e01a      	b.n	8008cf0 <tcp_kill_prio+0x60>
    if (pcb->prio <= mprio &&
 8008cba:	697b      	ldr	r3, [r7, #20]
 8008cbc:	7d5b      	ldrb	r3, [r3, #21]
 8008cbe:	7afa      	ldrb	r2, [r7, #11]
 8008cc0:	429a      	cmp	r2, r3
 8008cc2:	d312      	bcc.n	8008cea <tcp_kill_prio+0x5a>
       (u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 8008cc4:	4b12      	ldr	r3, [pc, #72]	; (8008d10 <tcp_kill_prio+0x80>)
 8008cc6:	681a      	ldr	r2, [r3, #0]
 8008cc8:	697b      	ldr	r3, [r7, #20]
 8008cca:	6a1b      	ldr	r3, [r3, #32]
 8008ccc:	1ad3      	subs	r3, r2, r3
    if (pcb->prio <= mprio &&
 8008cce:	68fa      	ldr	r2, [r7, #12]
 8008cd0:	429a      	cmp	r2, r3
 8008cd2:	d80a      	bhi.n	8008cea <tcp_kill_prio+0x5a>
      inactivity = tcp_ticks - pcb->tmr;
 8008cd4:	4b0e      	ldr	r3, [pc, #56]	; (8008d10 <tcp_kill_prio+0x80>)
 8008cd6:	681a      	ldr	r2, [r3, #0]
 8008cd8:	697b      	ldr	r3, [r7, #20]
 8008cda:	6a1b      	ldr	r3, [r3, #32]
 8008cdc:	1ad3      	subs	r3, r2, r3
 8008cde:	60fb      	str	r3, [r7, #12]
      inactive = pcb;
 8008ce0:	697b      	ldr	r3, [r7, #20]
 8008ce2:	613b      	str	r3, [r7, #16]
      mprio = pcb->prio;
 8008ce4:	697b      	ldr	r3, [r7, #20]
 8008ce6:	7d5b      	ldrb	r3, [r3, #21]
 8008ce8:	72fb      	strb	r3, [r7, #11]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8008cea:	697b      	ldr	r3, [r7, #20]
 8008cec:	68db      	ldr	r3, [r3, #12]
 8008cee:	617b      	str	r3, [r7, #20]
 8008cf0:	697b      	ldr	r3, [r7, #20]
 8008cf2:	2b00      	cmp	r3, #0
 8008cf4:	d1e1      	bne.n	8008cba <tcp_kill_prio+0x2a>
    }
  }
  if (inactive != NULL) {
 8008cf6:	693b      	ldr	r3, [r7, #16]
 8008cf8:	2b00      	cmp	r3, #0
 8008cfa:	d002      	beq.n	8008d02 <tcp_kill_prio+0x72>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_prio: killing oldest PCB %p (%"S32_F")\n",
           (void *)inactive, inactivity));
    tcp_abort(inactive);
 8008cfc:	6938      	ldr	r0, [r7, #16]
 8008cfe:	f7ff fb19 	bl	8008334 <tcp_abort>
  }
}
 8008d02:	bf00      	nop
 8008d04:	3718      	adds	r7, #24
 8008d06:	46bd      	mov	sp, r7
 8008d08:	bd80      	pop	{r7, pc}
 8008d0a:	bf00      	nop
 8008d0c:	2400acd8 	.word	0x2400acd8
 8008d10:	2400acdc 	.word	0x2400acdc

08008d14 <tcp_kill_state>:
 * Kills the oldest connection that is in specific state.
 * Called from tcp_alloc() for LAST_ACK and CLOSING if no more connections are available.
 */
static void
tcp_kill_state(enum tcp_state state)
{
 8008d14:	b580      	push	{r7, lr}
 8008d16:	b086      	sub	sp, #24
 8008d18:	af00      	add	r7, sp, #0
 8008d1a:	4603      	mov	r3, r0
 8008d1c:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;

  LWIP_ASSERT("invalid state", (state == CLOSING) || (state == LAST_ACK));
 8008d1e:	79fb      	ldrb	r3, [r7, #7]
 8008d20:	2b08      	cmp	r3, #8
 8008d22:	d009      	beq.n	8008d38 <tcp_kill_state+0x24>
 8008d24:	79fb      	ldrb	r3, [r7, #7]
 8008d26:	2b09      	cmp	r3, #9
 8008d28:	d006      	beq.n	8008d38 <tcp_kill_state+0x24>
 8008d2a:	4b1a      	ldr	r3, [pc, #104]	; (8008d94 <tcp_kill_state+0x80>)
 8008d2c:	f240 52dc 	movw	r2, #1500	; 0x5dc
 8008d30:	4919      	ldr	r1, [pc, #100]	; (8008d98 <tcp_kill_state+0x84>)
 8008d32:	481a      	ldr	r0, [pc, #104]	; (8008d9c <tcp_kill_state+0x88>)
 8008d34:	f007 fbfc 	bl	8010530 <iprintf>

  inactivity = 0;
 8008d38:	2300      	movs	r3, #0
 8008d3a:	60fb      	str	r3, [r7, #12]
  inactive = NULL;
 8008d3c:	2300      	movs	r3, #0
 8008d3e:	613b      	str	r3, [r7, #16]
  /* Go through the list of active pcbs and get the oldest pcb that is in state
     CLOSING/LAST_ACK. */
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8008d40:	4b17      	ldr	r3, [pc, #92]	; (8008da0 <tcp_kill_state+0x8c>)
 8008d42:	681b      	ldr	r3, [r3, #0]
 8008d44:	617b      	str	r3, [r7, #20]
 8008d46:	e017      	b.n	8008d78 <tcp_kill_state+0x64>
    if (pcb->state == state) {
 8008d48:	697b      	ldr	r3, [r7, #20]
 8008d4a:	7d1b      	ldrb	r3, [r3, #20]
 8008d4c:	79fa      	ldrb	r2, [r7, #7]
 8008d4e:	429a      	cmp	r2, r3
 8008d50:	d10f      	bne.n	8008d72 <tcp_kill_state+0x5e>
      if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 8008d52:	4b14      	ldr	r3, [pc, #80]	; (8008da4 <tcp_kill_state+0x90>)
 8008d54:	681a      	ldr	r2, [r3, #0]
 8008d56:	697b      	ldr	r3, [r7, #20]
 8008d58:	6a1b      	ldr	r3, [r3, #32]
 8008d5a:	1ad3      	subs	r3, r2, r3
 8008d5c:	68fa      	ldr	r2, [r7, #12]
 8008d5e:	429a      	cmp	r2, r3
 8008d60:	d807      	bhi.n	8008d72 <tcp_kill_state+0x5e>
        inactivity = tcp_ticks - pcb->tmr;
 8008d62:	4b10      	ldr	r3, [pc, #64]	; (8008da4 <tcp_kill_state+0x90>)
 8008d64:	681a      	ldr	r2, [r3, #0]
 8008d66:	697b      	ldr	r3, [r7, #20]
 8008d68:	6a1b      	ldr	r3, [r3, #32]
 8008d6a:	1ad3      	subs	r3, r2, r3
 8008d6c:	60fb      	str	r3, [r7, #12]
        inactive = pcb;
 8008d6e:	697b      	ldr	r3, [r7, #20]
 8008d70:	613b      	str	r3, [r7, #16]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8008d72:	697b      	ldr	r3, [r7, #20]
 8008d74:	68db      	ldr	r3, [r3, #12]
 8008d76:	617b      	str	r3, [r7, #20]
 8008d78:	697b      	ldr	r3, [r7, #20]
 8008d7a:	2b00      	cmp	r3, #0
 8008d7c:	d1e4      	bne.n	8008d48 <tcp_kill_state+0x34>
      }
    }
  }
  if (inactive != NULL) {
 8008d7e:	693b      	ldr	r3, [r7, #16]
 8008d80:	2b00      	cmp	r3, #0
 8008d82:	d003      	beq.n	8008d8c <tcp_kill_state+0x78>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_closing: killing oldest %s PCB %p (%"S32_F")\n",
           tcp_state_str[state], (void *)inactive, inactivity));
    /* Don't send a RST, since no data is lost. */
    tcp_abandon(inactive, 0);
 8008d84:	2100      	movs	r1, #0
 8008d86:	6938      	ldr	r0, [r7, #16]
 8008d88:	f7ff fa22 	bl	80081d0 <tcp_abandon>
  }
}
 8008d8c:	bf00      	nop
 8008d8e:	3718      	adds	r7, #24
 8008d90:	46bd      	mov	sp, r7
 8008d92:	bd80      	pop	{r7, pc}
 8008d94:	08011cf4 	.word	0x08011cf4
 8008d98:	08012004 	.word	0x08012004
 8008d9c:	08011d30 	.word	0x08011d30
 8008da0:	2400acd8 	.word	0x2400acd8
 8008da4:	2400acdc 	.word	0x2400acdc

08008da8 <tcp_kill_timewait>:
 * Kills the oldest connection that is in TIME_WAIT state.
 * Called from tcp_alloc() if no more connections are available.
 */
static void
tcp_kill_timewait(void)
{
 8008da8:	b580      	push	{r7, lr}
 8008daa:	b084      	sub	sp, #16
 8008dac:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;

  inactivity = 0;
 8008dae:	2300      	movs	r3, #0
 8008db0:	607b      	str	r3, [r7, #4]
  inactive = NULL;
 8008db2:	2300      	movs	r3, #0
 8008db4:	60bb      	str	r3, [r7, #8]
  /* Go through the list of TIME_WAIT pcbs and get the oldest pcb. */
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 8008db6:	4b12      	ldr	r3, [pc, #72]	; (8008e00 <tcp_kill_timewait+0x58>)
 8008db8:	681b      	ldr	r3, [r3, #0]
 8008dba:	60fb      	str	r3, [r7, #12]
 8008dbc:	e012      	b.n	8008de4 <tcp_kill_timewait+0x3c>
    if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 8008dbe:	4b11      	ldr	r3, [pc, #68]	; (8008e04 <tcp_kill_timewait+0x5c>)
 8008dc0:	681a      	ldr	r2, [r3, #0]
 8008dc2:	68fb      	ldr	r3, [r7, #12]
 8008dc4:	6a1b      	ldr	r3, [r3, #32]
 8008dc6:	1ad3      	subs	r3, r2, r3
 8008dc8:	687a      	ldr	r2, [r7, #4]
 8008dca:	429a      	cmp	r2, r3
 8008dcc:	d807      	bhi.n	8008dde <tcp_kill_timewait+0x36>
      inactivity = tcp_ticks - pcb->tmr;
 8008dce:	4b0d      	ldr	r3, [pc, #52]	; (8008e04 <tcp_kill_timewait+0x5c>)
 8008dd0:	681a      	ldr	r2, [r3, #0]
 8008dd2:	68fb      	ldr	r3, [r7, #12]
 8008dd4:	6a1b      	ldr	r3, [r3, #32]
 8008dd6:	1ad3      	subs	r3, r2, r3
 8008dd8:	607b      	str	r3, [r7, #4]
      inactive = pcb;
 8008dda:	68fb      	ldr	r3, [r7, #12]
 8008ddc:	60bb      	str	r3, [r7, #8]
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 8008dde:	68fb      	ldr	r3, [r7, #12]
 8008de0:	68db      	ldr	r3, [r3, #12]
 8008de2:	60fb      	str	r3, [r7, #12]
 8008de4:	68fb      	ldr	r3, [r7, #12]
 8008de6:	2b00      	cmp	r3, #0
 8008de8:	d1e9      	bne.n	8008dbe <tcp_kill_timewait+0x16>
    }
  }
  if (inactive != NULL) {
 8008dea:	68bb      	ldr	r3, [r7, #8]
 8008dec:	2b00      	cmp	r3, #0
 8008dee:	d002      	beq.n	8008df6 <tcp_kill_timewait+0x4e>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_timewait: killing oldest TIME-WAIT PCB %p (%"S32_F")\n",
           (void *)inactive, inactivity));
    tcp_abort(inactive);
 8008df0:	68b8      	ldr	r0, [r7, #8]
 8008df2:	f7ff fa9f 	bl	8008334 <tcp_abort>
  }
}
 8008df6:	bf00      	nop
 8008df8:	3710      	adds	r7, #16
 8008dfa:	46bd      	mov	sp, r7
 8008dfc:	bd80      	pop	{r7, pc}
 8008dfe:	bf00      	nop
 8008e00:	2400ace8 	.word	0x2400ace8
 8008e04:	2400acdc 	.word	0x2400acdc

08008e08 <tcp_alloc>:
 * @param prio priority for the new pcb
 * @return a new tcp_pcb that initially is in state CLOSED
 */
struct tcp_pcb *
tcp_alloc(u8_t prio)
{
 8008e08:	b580      	push	{r7, lr}
 8008e0a:	b084      	sub	sp, #16
 8008e0c:	af00      	add	r7, sp, #0
 8008e0e:	4603      	mov	r3, r0
 8008e10:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb;

  pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 8008e12:	2001      	movs	r0, #1
 8008e14:	f7fd ff6e 	bl	8006cf4 <memp_malloc>
 8008e18:	60f8      	str	r0, [r7, #12]
  if (pcb == NULL) {
 8008e1a:	68fb      	ldr	r3, [r7, #12]
 8008e1c:	2b00      	cmp	r3, #0
 8008e1e:	d124      	bne.n	8008e6a <tcp_alloc+0x62>
    /* Try killing oldest connection in TIME-WAIT. */
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest TIME-WAIT connection\n"));
    tcp_kill_timewait();
 8008e20:	f7ff ffc2 	bl	8008da8 <tcp_kill_timewait>
    /* Try to allocate a tcp_pcb again. */
    pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 8008e24:	2001      	movs	r0, #1
 8008e26:	f7fd ff65 	bl	8006cf4 <memp_malloc>
 8008e2a:	60f8      	str	r0, [r7, #12]
    if (pcb == NULL) {
 8008e2c:	68fb      	ldr	r3, [r7, #12]
 8008e2e:	2b00      	cmp	r3, #0
 8008e30:	d11b      	bne.n	8008e6a <tcp_alloc+0x62>
      /* Try killing oldest connection in LAST-ACK (these wouldn't go to TIME-WAIT). */
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest LAST-ACK connection\n"));
      tcp_kill_state(LAST_ACK);
 8008e32:	2009      	movs	r0, #9
 8008e34:	f7ff ff6e 	bl	8008d14 <tcp_kill_state>
      /* Try to allocate a tcp_pcb again. */
      pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 8008e38:	2001      	movs	r0, #1
 8008e3a:	f7fd ff5b 	bl	8006cf4 <memp_malloc>
 8008e3e:	60f8      	str	r0, [r7, #12]
      if (pcb == NULL) {
 8008e40:	68fb      	ldr	r3, [r7, #12]
 8008e42:	2b00      	cmp	r3, #0
 8008e44:	d111      	bne.n	8008e6a <tcp_alloc+0x62>
        /* Try killing oldest connection in CLOSING. */
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest CLOSING connection\n"));
        tcp_kill_state(CLOSING);
 8008e46:	2008      	movs	r0, #8
 8008e48:	f7ff ff64 	bl	8008d14 <tcp_kill_state>
        /* Try to allocate a tcp_pcb again. */
        pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 8008e4c:	2001      	movs	r0, #1
 8008e4e:	f7fd ff51 	bl	8006cf4 <memp_malloc>
 8008e52:	60f8      	str	r0, [r7, #12]
        if (pcb == NULL) {
 8008e54:	68fb      	ldr	r3, [r7, #12]
 8008e56:	2b00      	cmp	r3, #0
 8008e58:	d107      	bne.n	8008e6a <tcp_alloc+0x62>
          /* Try killing active connections with lower priority than the new one. */
          LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing connection with prio lower than %d\n", prio));
          tcp_kill_prio(prio);
 8008e5a:	79fb      	ldrb	r3, [r7, #7]
 8008e5c:	4618      	mov	r0, r3
 8008e5e:	f7ff ff17 	bl	8008c90 <tcp_kill_prio>
          /* Try to allocate a tcp_pcb again. */
          pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 8008e62:	2001      	movs	r0, #1
 8008e64:	f7fd ff46 	bl	8006cf4 <memp_malloc>
 8008e68:	60f8      	str	r0, [r7, #12]
    if (pcb != NULL) {
      /* adjust err stats: memp_malloc failed above */
      MEMP_STATS_DEC(err, MEMP_TCP_PCB);
    }
  }
  if (pcb != NULL) {
 8008e6a:	68fb      	ldr	r3, [r7, #12]
 8008e6c:	2b00      	cmp	r3, #0
 8008e6e:	d03f      	beq.n	8008ef0 <tcp_alloc+0xe8>
    /* zero out the whole pcb, so there is no need to initialize members to zero */
    memset(pcb, 0, sizeof(struct tcp_pcb));
 8008e70:	2298      	movs	r2, #152	; 0x98
 8008e72:	2100      	movs	r1, #0
 8008e74:	68f8      	ldr	r0, [r7, #12]
 8008e76:	f007 fb53 	bl	8010520 <memset>
    pcb->prio = prio;
 8008e7a:	68fb      	ldr	r3, [r7, #12]
 8008e7c:	79fa      	ldrb	r2, [r7, #7]
 8008e7e:	755a      	strb	r2, [r3, #21]
    pcb->snd_buf = TCP_SND_BUF;
 8008e80:	68fb      	ldr	r3, [r7, #12]
 8008e82:	f640 3268 	movw	r2, #2920	; 0xb68
 8008e86:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
    /* Start with a window that does not need scaling. When window scaling is
       enabled and used, the window is enlarged when both sides agree on scaling. */
    pcb->rcv_wnd = pcb->rcv_ann_wnd = TCPWND_MIN16(TCP_WND);
 8008e8a:	68fb      	ldr	r3, [r7, #12]
 8008e8c:	f241 62d0 	movw	r2, #5840	; 0x16d0
 8008e90:	855a      	strh	r2, [r3, #42]	; 0x2a
 8008e92:	68fb      	ldr	r3, [r7, #12]
 8008e94:	8d5a      	ldrh	r2, [r3, #42]	; 0x2a
 8008e96:	68fb      	ldr	r3, [r7, #12]
 8008e98:	851a      	strh	r2, [r3, #40]	; 0x28
    pcb->ttl = TCP_TTL;
 8008e9a:	68fb      	ldr	r3, [r7, #12]
 8008e9c:	22ff      	movs	r2, #255	; 0xff
 8008e9e:	729a      	strb	r2, [r3, #10]
    /* As initial send MSS, we use TCP_MSS but limit it to 536.
       The send MSS is updated when an MSS option is received. */
    pcb->mss = INITIAL_MSS;
 8008ea0:	68fb      	ldr	r3, [r7, #12]
 8008ea2:	f44f 7206 	mov.w	r2, #536	; 0x218
 8008ea6:	865a      	strh	r2, [r3, #50]	; 0x32
    pcb->rto = 3000 / TCP_SLOW_INTERVAL;
 8008ea8:	68fb      	ldr	r3, [r7, #12]
 8008eaa:	2206      	movs	r2, #6
 8008eac:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    pcb->sv = 3000 / TCP_SLOW_INTERVAL;
 8008eb0:	68fb      	ldr	r3, [r7, #12]
 8008eb2:	2206      	movs	r2, #6
 8008eb4:	87da      	strh	r2, [r3, #62]	; 0x3e
    pcb->rtime = -1;
 8008eb6:	68fb      	ldr	r3, [r7, #12]
 8008eb8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8008ebc:	861a      	strh	r2, [r3, #48]	; 0x30
    pcb->cwnd = 1;
 8008ebe:	68fb      	ldr	r3, [r7, #12]
 8008ec0:	2201      	movs	r2, #1
 8008ec2:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
    pcb->tmr = tcp_ticks;
 8008ec6:	4b0d      	ldr	r3, [pc, #52]	; (8008efc <tcp_alloc+0xf4>)
 8008ec8:	681a      	ldr	r2, [r3, #0]
 8008eca:	68fb      	ldr	r3, [r7, #12]
 8008ecc:	621a      	str	r2, [r3, #32]
    pcb->last_timer = tcp_timer_ctr;
 8008ece:	4b0c      	ldr	r3, [pc, #48]	; (8008f00 <tcp_alloc+0xf8>)
 8008ed0:	781a      	ldrb	r2, [r3, #0]
 8008ed2:	68fb      	ldr	r3, [r7, #12]
 8008ed4:	775a      	strb	r2, [r3, #29]
    of using the largest advertised receive window.  We've seen complications with
    receiving TCPs that use window scaling and/or window auto-tuning where the
    initial advertised window is very small and then grows rapidly once the
    connection is established. To avoid these complications, we set ssthresh to the
    largest effective cwnd (amount of in-flight data) that the sender can have. */
    pcb->ssthresh = TCP_SND_BUF;
 8008ed6:	68fb      	ldr	r3, [r7, #12]
 8008ed8:	f640 3268 	movw	r2, #2920	; 0xb68
 8008edc:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a

#if LWIP_CALLBACK_API
    pcb->recv = tcp_recv_null;
 8008ee0:	68fb      	ldr	r3, [r7, #12]
 8008ee2:	4a08      	ldr	r2, [pc, #32]	; (8008f04 <tcp_alloc+0xfc>)
 8008ee4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
#endif /* LWIP_CALLBACK_API */

    /* Init KEEPALIVE timer */
    pcb->keep_idle  = TCP_KEEPIDLE_DEFAULT;
 8008ee8:	68fb      	ldr	r3, [r7, #12]
 8008eea:	4a07      	ldr	r2, [pc, #28]	; (8008f08 <tcp_alloc+0x100>)
 8008eec:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
#if LWIP_TCP_KEEPALIVE
    pcb->keep_intvl = TCP_KEEPINTVL_DEFAULT;
    pcb->keep_cnt   = TCP_KEEPCNT_DEFAULT;
#endif /* LWIP_TCP_KEEPALIVE */
  }
  return pcb;
 8008ef0:	68fb      	ldr	r3, [r7, #12]
}
 8008ef2:	4618      	mov	r0, r3
 8008ef4:	3710      	adds	r7, #16
 8008ef6:	46bd      	mov	sp, r7
 8008ef8:	bd80      	pop	{r7, pc}
 8008efa:	bf00      	nop
 8008efc:	2400acdc 	.word	0x2400acdc
 8008f00:	2400403e 	.word	0x2400403e
 8008f04:	08008c4d 	.word	0x08008c4d
 8008f08:	006ddd00 	.word	0x006ddd00

08008f0c <tcp_pcb_purge>:
 *
 * @param pcb tcp_pcb to purge. The pcb itself is not deallocated!
 */
void
tcp_pcb_purge(struct tcp_pcb *pcb)
{
 8008f0c:	b580      	push	{r7, lr}
 8008f0e:	b082      	sub	sp, #8
 8008f10:	af00      	add	r7, sp, #0
 8008f12:	6078      	str	r0, [r7, #4]
  if (pcb->state != CLOSED &&
 8008f14:	687b      	ldr	r3, [r7, #4]
 8008f16:	7d1b      	ldrb	r3, [r3, #20]
 8008f18:	2b00      	cmp	r3, #0
 8008f1a:	d034      	beq.n	8008f86 <tcp_pcb_purge+0x7a>
     pcb->state != TIME_WAIT &&
 8008f1c:	687b      	ldr	r3, [r7, #4]
 8008f1e:	7d1b      	ldrb	r3, [r3, #20]
  if (pcb->state != CLOSED &&
 8008f20:	2b0a      	cmp	r3, #10
 8008f22:	d030      	beq.n	8008f86 <tcp_pcb_purge+0x7a>
     pcb->state != LISTEN) {
 8008f24:	687b      	ldr	r3, [r7, #4]
 8008f26:	7d1b      	ldrb	r3, [r3, #20]
     pcb->state != TIME_WAIT &&
 8008f28:	2b01      	cmp	r3, #1
 8008f2a:	d02c      	beq.n	8008f86 <tcp_pcb_purge+0x7a>

    LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge\n"));

    tcp_backlog_accepted(pcb);

    if (pcb->refused_data != NULL) {
 8008f2c:	687b      	ldr	r3, [r7, #4]
 8008f2e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008f30:	2b00      	cmp	r3, #0
 8008f32:	d007      	beq.n	8008f44 <tcp_pcb_purge+0x38>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->refused_data\n"));
      pbuf_free(pcb->refused_data);
 8008f34:	687b      	ldr	r3, [r7, #4]
 8008f36:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008f38:	4618      	mov	r0, r3
 8008f3a:	f7fe fcfb 	bl	8007934 <pbuf_free>
      pcb->refused_data = NULL;
 8008f3e:	687b      	ldr	r3, [r7, #4]
 8008f40:	2200      	movs	r2, #0
 8008f42:	675a      	str	r2, [r3, #116]	; 0x74
    }
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL) {
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->ooseq\n"));
    }
    tcp_segs_free(pcb->ooseq);
 8008f44:	687b      	ldr	r3, [r7, #4]
 8008f46:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008f48:	4618      	mov	r0, r3
 8008f4a:	f7ff fe37 	bl	8008bbc <tcp_segs_free>
    pcb->ooseq = NULL;
 8008f4e:	687b      	ldr	r3, [r7, #4]
 8008f50:	2200      	movs	r2, #0
 8008f52:	671a      	str	r2, [r3, #112]	; 0x70
#endif /* TCP_QUEUE_OOSEQ */

    /* Stop the retransmission timer as it will expect data on unacked
       queue if it fires */
    pcb->rtime = -1;
 8008f54:	687b      	ldr	r3, [r7, #4]
 8008f56:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8008f5a:	861a      	strh	r2, [r3, #48]	; 0x30

    tcp_segs_free(pcb->unsent);
 8008f5c:	687b      	ldr	r3, [r7, #4]
 8008f5e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8008f60:	4618      	mov	r0, r3
 8008f62:	f7ff fe2b 	bl	8008bbc <tcp_segs_free>
    tcp_segs_free(pcb->unacked);
 8008f66:	687b      	ldr	r3, [r7, #4]
 8008f68:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008f6a:	4618      	mov	r0, r3
 8008f6c:	f7ff fe26 	bl	8008bbc <tcp_segs_free>
    pcb->unacked = pcb->unsent = NULL;
 8008f70:	687b      	ldr	r3, [r7, #4]
 8008f72:	2200      	movs	r2, #0
 8008f74:	669a      	str	r2, [r3, #104]	; 0x68
 8008f76:	687b      	ldr	r3, [r7, #4]
 8008f78:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 8008f7a:	687b      	ldr	r3, [r7, #4]
 8008f7c:	66da      	str	r2, [r3, #108]	; 0x6c
#if TCP_OVERSIZE
    pcb->unsent_oversize = 0;
 8008f7e:	687b      	ldr	r3, [r7, #4]
 8008f80:	2200      	movs	r2, #0
 8008f82:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
#endif /* TCP_OVERSIZE */
  }
}
 8008f86:	bf00      	nop
 8008f88:	3708      	adds	r7, #8
 8008f8a:	46bd      	mov	sp, r7
 8008f8c:	bd80      	pop	{r7, pc}
	...

08008f90 <tcp_pcb_remove>:
 * @param pcblist PCB list to purge.
 * @param pcb tcp_pcb to purge. The pcb itself is NOT deallocated!
 */
void
tcp_pcb_remove(struct tcp_pcb **pcblist, struct tcp_pcb *pcb)
{
 8008f90:	b580      	push	{r7, lr}
 8008f92:	b084      	sub	sp, #16
 8008f94:	af00      	add	r7, sp, #0
 8008f96:	6078      	str	r0, [r7, #4]
 8008f98:	6039      	str	r1, [r7, #0]
  TCP_RMV(pcblist, pcb);
 8008f9a:	687b      	ldr	r3, [r7, #4]
 8008f9c:	681b      	ldr	r3, [r3, #0]
 8008f9e:	683a      	ldr	r2, [r7, #0]
 8008fa0:	429a      	cmp	r2, r3
 8008fa2:	d105      	bne.n	8008fb0 <tcp_pcb_remove+0x20>
 8008fa4:	687b      	ldr	r3, [r7, #4]
 8008fa6:	681b      	ldr	r3, [r3, #0]
 8008fa8:	68da      	ldr	r2, [r3, #12]
 8008faa:	687b      	ldr	r3, [r7, #4]
 8008fac:	601a      	str	r2, [r3, #0]
 8008fae:	e013      	b.n	8008fd8 <tcp_pcb_remove+0x48>
 8008fb0:	687b      	ldr	r3, [r7, #4]
 8008fb2:	681b      	ldr	r3, [r3, #0]
 8008fb4:	60fb      	str	r3, [r7, #12]
 8008fb6:	e00c      	b.n	8008fd2 <tcp_pcb_remove+0x42>
 8008fb8:	68fb      	ldr	r3, [r7, #12]
 8008fba:	68db      	ldr	r3, [r3, #12]
 8008fbc:	683a      	ldr	r2, [r7, #0]
 8008fbe:	429a      	cmp	r2, r3
 8008fc0:	d104      	bne.n	8008fcc <tcp_pcb_remove+0x3c>
 8008fc2:	683b      	ldr	r3, [r7, #0]
 8008fc4:	68da      	ldr	r2, [r3, #12]
 8008fc6:	68fb      	ldr	r3, [r7, #12]
 8008fc8:	60da      	str	r2, [r3, #12]
 8008fca:	e005      	b.n	8008fd8 <tcp_pcb_remove+0x48>
 8008fcc:	68fb      	ldr	r3, [r7, #12]
 8008fce:	68db      	ldr	r3, [r3, #12]
 8008fd0:	60fb      	str	r3, [r7, #12]
 8008fd2:	68fb      	ldr	r3, [r7, #12]
 8008fd4:	2b00      	cmp	r3, #0
 8008fd6:	d1ef      	bne.n	8008fb8 <tcp_pcb_remove+0x28>
 8008fd8:	683b      	ldr	r3, [r7, #0]
 8008fda:	2200      	movs	r2, #0
 8008fdc:	60da      	str	r2, [r3, #12]

  tcp_pcb_purge(pcb);
 8008fde:	6838      	ldr	r0, [r7, #0]
 8008fe0:	f7ff ff94 	bl	8008f0c <tcp_pcb_purge>

  /* if there is an outstanding delayed ACKs, send it */
  if (pcb->state != TIME_WAIT &&
 8008fe4:	683b      	ldr	r3, [r7, #0]
 8008fe6:	7d1b      	ldrb	r3, [r3, #20]
 8008fe8:	2b0a      	cmp	r3, #10
 8008fea:	d013      	beq.n	8009014 <tcp_pcb_remove+0x84>
     pcb->state != LISTEN &&
 8008fec:	683b      	ldr	r3, [r7, #0]
 8008fee:	7d1b      	ldrb	r3, [r3, #20]
  if (pcb->state != TIME_WAIT &&
 8008ff0:	2b01      	cmp	r3, #1
 8008ff2:	d00f      	beq.n	8009014 <tcp_pcb_remove+0x84>
     pcb->flags & TF_ACK_DELAY) {
 8008ff4:	683b      	ldr	r3, [r7, #0]
 8008ff6:	7e9b      	ldrb	r3, [r3, #26]
 8008ff8:	f003 0301 	and.w	r3, r3, #1
     pcb->state != LISTEN &&
 8008ffc:	2b00      	cmp	r3, #0
 8008ffe:	d009      	beq.n	8009014 <tcp_pcb_remove+0x84>
    pcb->flags |= TF_ACK_NOW;
 8009000:	683b      	ldr	r3, [r7, #0]
 8009002:	7e9b      	ldrb	r3, [r3, #26]
 8009004:	f043 0302 	orr.w	r3, r3, #2
 8009008:	b2da      	uxtb	r2, r3
 800900a:	683b      	ldr	r3, [r7, #0]
 800900c:	769a      	strb	r2, [r3, #26]
    tcp_output(pcb);
 800900e:	6838      	ldr	r0, [r7, #0]
 8009010:	f002 fd8c 	bl	800bb2c <tcp_output>
  }

  if (pcb->state != LISTEN) {
 8009014:	683b      	ldr	r3, [r7, #0]
 8009016:	7d1b      	ldrb	r3, [r3, #20]
 8009018:	2b01      	cmp	r3, #1
 800901a:	d020      	beq.n	800905e <tcp_pcb_remove+0xce>
    LWIP_ASSERT("unsent segments leaking", pcb->unsent == NULL);
 800901c:	683b      	ldr	r3, [r7, #0]
 800901e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8009020:	2b00      	cmp	r3, #0
 8009022:	d006      	beq.n	8009032 <tcp_pcb_remove+0xa2>
 8009024:	4b13      	ldr	r3, [pc, #76]	; (8009074 <tcp_pcb_remove+0xe4>)
 8009026:	f240 7253 	movw	r2, #1875	; 0x753
 800902a:	4913      	ldr	r1, [pc, #76]	; (8009078 <tcp_pcb_remove+0xe8>)
 800902c:	4813      	ldr	r0, [pc, #76]	; (800907c <tcp_pcb_remove+0xec>)
 800902e:	f007 fa7f 	bl	8010530 <iprintf>
    LWIP_ASSERT("unacked segments leaking", pcb->unacked == NULL);
 8009032:	683b      	ldr	r3, [r7, #0]
 8009034:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009036:	2b00      	cmp	r3, #0
 8009038:	d006      	beq.n	8009048 <tcp_pcb_remove+0xb8>
 800903a:	4b0e      	ldr	r3, [pc, #56]	; (8009074 <tcp_pcb_remove+0xe4>)
 800903c:	f240 7254 	movw	r2, #1876	; 0x754
 8009040:	490f      	ldr	r1, [pc, #60]	; (8009080 <tcp_pcb_remove+0xf0>)
 8009042:	480e      	ldr	r0, [pc, #56]	; (800907c <tcp_pcb_remove+0xec>)
 8009044:	f007 fa74 	bl	8010530 <iprintf>
#if TCP_QUEUE_OOSEQ
    LWIP_ASSERT("ooseq segments leaking", pcb->ooseq == NULL);
 8009048:	683b      	ldr	r3, [r7, #0]
 800904a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800904c:	2b00      	cmp	r3, #0
 800904e:	d006      	beq.n	800905e <tcp_pcb_remove+0xce>
 8009050:	4b08      	ldr	r3, [pc, #32]	; (8009074 <tcp_pcb_remove+0xe4>)
 8009052:	f240 7256 	movw	r2, #1878	; 0x756
 8009056:	490b      	ldr	r1, [pc, #44]	; (8009084 <tcp_pcb_remove+0xf4>)
 8009058:	4808      	ldr	r0, [pc, #32]	; (800907c <tcp_pcb_remove+0xec>)
 800905a:	f007 fa69 	bl	8010530 <iprintf>
#endif /* TCP_QUEUE_OOSEQ */
  }

  pcb->state = CLOSED;
 800905e:	683b      	ldr	r3, [r7, #0]
 8009060:	2200      	movs	r2, #0
 8009062:	751a      	strb	r2, [r3, #20]
  /* reset the local port to prevent the pcb from being 'bound' */
  pcb->local_port = 0;
 8009064:	683b      	ldr	r3, [r7, #0]
 8009066:	2200      	movs	r2, #0
 8009068:	82da      	strh	r2, [r3, #22]

  LWIP_ASSERT("tcp_pcb_remove: tcp_pcbs_sane()", tcp_pcbs_sane());
}
 800906a:	bf00      	nop
 800906c:	3710      	adds	r7, #16
 800906e:	46bd      	mov	sp, r7
 8009070:	bd80      	pop	{r7, pc}
 8009072:	bf00      	nop
 8009074:	08011cf4 	.word	0x08011cf4
 8009078:	080120ac 	.word	0x080120ac
 800907c:	08011d30 	.word	0x08011d30
 8009080:	080120c4 	.word	0x080120c4
 8009084:	080120e0 	.word	0x080120e0

08009088 <tcp_next_iss>:
 *
 * @return u32_t pseudo random sequence number
 */
u32_t
tcp_next_iss(struct tcp_pcb *pcb)
{
 8009088:	b480      	push	{r7}
 800908a:	b083      	sub	sp, #12
 800908c:	af00      	add	r7, sp, #0
 800908e:	6078      	str	r0, [r7, #4]
#else /* LWIP_HOOK_TCP_ISN */
  static u32_t iss = 6510;

  LWIP_UNUSED_ARG(pcb);

  iss += tcp_ticks;       /* XXX */
 8009090:	4b07      	ldr	r3, [pc, #28]	; (80090b0 <tcp_next_iss+0x28>)
 8009092:	681a      	ldr	r2, [r3, #0]
 8009094:	4b07      	ldr	r3, [pc, #28]	; (80090b4 <tcp_next_iss+0x2c>)
 8009096:	681b      	ldr	r3, [r3, #0]
 8009098:	4413      	add	r3, r2
 800909a:	4a05      	ldr	r2, [pc, #20]	; (80090b0 <tcp_next_iss+0x28>)
 800909c:	6013      	str	r3, [r2, #0]
  return iss;
 800909e:	4b04      	ldr	r3, [pc, #16]	; (80090b0 <tcp_next_iss+0x28>)
 80090a0:	681b      	ldr	r3, [r3, #0]
#endif /* LWIP_HOOK_TCP_ISN */
}
 80090a2:	4618      	mov	r0, r3
 80090a4:	370c      	adds	r7, #12
 80090a6:	46bd      	mov	sp, r7
 80090a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090ac:	4770      	bx	lr
 80090ae:	bf00      	nop
 80090b0:	2400000c 	.word	0x2400000c
 80090b4:	2400acdc 	.word	0x2400acdc

080090b8 <tcp_eff_send_mss_impl>:
tcp_eff_send_mss_impl(u16_t sendmss, const ip_addr_t *dest
#if LWIP_IPV6 || LWIP_IPV4_SRC_ROUTING
                     , const ip_addr_t *src
#endif /* LWIP_IPV6 || LWIP_IPV4_SRC_ROUTING */
                     )
{
 80090b8:	b580      	push	{r7, lr}
 80090ba:	b084      	sub	sp, #16
 80090bc:	af00      	add	r7, sp, #0
 80090be:	4603      	mov	r3, r0
 80090c0:	6039      	str	r1, [r7, #0]
 80090c2:	80fb      	strh	r3, [r7, #6]
  u16_t mss_s;
  struct netif *outif;
  s16_t mtu;

  outif = ip_route(src, dest);
 80090c4:	6838      	ldr	r0, [r7, #0]
 80090c6:	f004 fde1 	bl	800dc8c <ip4_route>
 80090ca:	60f8      	str	r0, [r7, #12]
  else
#endif /* LWIP_IPV4 */
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
  {
    if (outif == NULL) {
 80090cc:	68fb      	ldr	r3, [r7, #12]
 80090ce:	2b00      	cmp	r3, #0
 80090d0:	d101      	bne.n	80090d6 <tcp_eff_send_mss_impl+0x1e>
      return sendmss;
 80090d2:	88fb      	ldrh	r3, [r7, #6]
 80090d4:	e010      	b.n	80090f8 <tcp_eff_send_mss_impl+0x40>
    }
    mtu = outif->mtu;
 80090d6:	68fb      	ldr	r3, [r7, #12]
 80090d8:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80090da:	817b      	strh	r3, [r7, #10]
  }
#endif /* LWIP_IPV4 */

  if (mtu != 0) {
 80090dc:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 80090e0:	2b00      	cmp	r3, #0
 80090e2:	d008      	beq.n	80090f6 <tcp_eff_send_mss_impl+0x3e>
    else
#endif /* LWIP_IPV4 */
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
    {
      mss_s = mtu - IP_HLEN - TCP_HLEN;
 80090e4:	897b      	ldrh	r3, [r7, #10]
 80090e6:	3b28      	subs	r3, #40	; 0x28
 80090e8:	813b      	strh	r3, [r7, #8]
#endif /* LWIP_IPV4 */
    /* RFC 1122, chap 4.2.2.6:
     * Eff.snd.MSS = min(SendMSS+20, MMS_S) - TCPhdrsize - IPoptionsize
     * We correct for TCP options in tcp_write(), and don't support IP options.
     */
    sendmss = LWIP_MIN(sendmss, mss_s);
 80090ea:	893a      	ldrh	r2, [r7, #8]
 80090ec:	88fb      	ldrh	r3, [r7, #6]
 80090ee:	4293      	cmp	r3, r2
 80090f0:	bf28      	it	cs
 80090f2:	4613      	movcs	r3, r2
 80090f4:	80fb      	strh	r3, [r7, #6]
  }
  return sendmss;
 80090f6:	88fb      	ldrh	r3, [r7, #6]
}
 80090f8:	4618      	mov	r0, r3
 80090fa:	3710      	adds	r7, #16
 80090fc:	46bd      	mov	sp, r7
 80090fe:	bd80      	pop	{r7, pc}

08009100 <tcp_netif_ip_addr_changed_pcblist>:
#endif /* TCP_CALCULATE_EFF_SEND_MSS */

/** Helper function for tcp_netif_ip_addr_changed() that iterates a pcb list */
static void
tcp_netif_ip_addr_changed_pcblist(const ip_addr_t* old_addr, struct tcp_pcb* pcb_list)
{
 8009100:	b580      	push	{r7, lr}
 8009102:	b084      	sub	sp, #16
 8009104:	af00      	add	r7, sp, #0
 8009106:	6078      	str	r0, [r7, #4]
 8009108:	6039      	str	r1, [r7, #0]
  struct tcp_pcb *pcb;
  pcb = pcb_list;
 800910a:	683b      	ldr	r3, [r7, #0]
 800910c:	60fb      	str	r3, [r7, #12]
  while (pcb != NULL) {
 800910e:	e011      	b.n	8009134 <tcp_netif_ip_addr_changed_pcblist+0x34>
    /* PCB bound to current local interface address? */
    if (ip_addr_cmp(&pcb->local_ip, old_addr)
 8009110:	68fb      	ldr	r3, [r7, #12]
 8009112:	681a      	ldr	r2, [r3, #0]
 8009114:	687b      	ldr	r3, [r7, #4]
 8009116:	681b      	ldr	r3, [r3, #0]
 8009118:	429a      	cmp	r2, r3
 800911a:	d108      	bne.n	800912e <tcp_netif_ip_addr_changed_pcblist+0x2e>
      /* connections to link-local addresses must persist (RFC3927 ch. 1.9) */
      && (!IP_IS_V4_VAL(pcb->local_ip) || !ip4_addr_islinklocal(ip_2_ip4(&pcb->local_ip)))
#endif /* LWIP_AUTOIP */
      ) {
      /* this connection must be aborted */
      struct tcp_pcb *next = pcb->next;
 800911c:	68fb      	ldr	r3, [r7, #12]
 800911e:	68db      	ldr	r3, [r3, #12]
 8009120:	60bb      	str	r3, [r7, #8]
      LWIP_DEBUGF(NETIF_DEBUG | LWIP_DBG_STATE, ("netif_set_ipaddr: aborting TCP pcb %p\n", (void *)pcb));
      tcp_abort(pcb);
 8009122:	68f8      	ldr	r0, [r7, #12]
 8009124:	f7ff f906 	bl	8008334 <tcp_abort>
      pcb = next;
 8009128:	68bb      	ldr	r3, [r7, #8]
 800912a:	60fb      	str	r3, [r7, #12]
 800912c:	e002      	b.n	8009134 <tcp_netif_ip_addr_changed_pcblist+0x34>
    } else {
      pcb = pcb->next;
 800912e:	68fb      	ldr	r3, [r7, #12]
 8009130:	68db      	ldr	r3, [r3, #12]
 8009132:	60fb      	str	r3, [r7, #12]
  while (pcb != NULL) {
 8009134:	68fb      	ldr	r3, [r7, #12]
 8009136:	2b00      	cmp	r3, #0
 8009138:	d1ea      	bne.n	8009110 <tcp_netif_ip_addr_changed_pcblist+0x10>
    }
  }
}
 800913a:	bf00      	nop
 800913c:	3710      	adds	r7, #16
 800913e:	46bd      	mov	sp, r7
 8009140:	bd80      	pop	{r7, pc}
	...

08009144 <tcp_netif_ip_addr_changed>:
 * @param old_addr IP address of the netif before change
 * @param new_addr IP address of the netif after change or NULL if netif has been removed
 */
void
tcp_netif_ip_addr_changed(const ip_addr_t* old_addr, const ip_addr_t* new_addr)
{
 8009144:	b580      	push	{r7, lr}
 8009146:	b084      	sub	sp, #16
 8009148:	af00      	add	r7, sp, #0
 800914a:	6078      	str	r0, [r7, #4]
 800914c:	6039      	str	r1, [r7, #0]
  struct tcp_pcb_listen *lpcb, *next;

  if (!ip_addr_isany(old_addr)) {
 800914e:	687b      	ldr	r3, [r7, #4]
 8009150:	2b00      	cmp	r3, #0
 8009152:	d02c      	beq.n	80091ae <tcp_netif_ip_addr_changed+0x6a>
 8009154:	687b      	ldr	r3, [r7, #4]
 8009156:	681b      	ldr	r3, [r3, #0]
 8009158:	2b00      	cmp	r3, #0
 800915a:	d028      	beq.n	80091ae <tcp_netif_ip_addr_changed+0x6a>
    tcp_netif_ip_addr_changed_pcblist(old_addr, tcp_active_pcbs);
 800915c:	4b16      	ldr	r3, [pc, #88]	; (80091b8 <tcp_netif_ip_addr_changed+0x74>)
 800915e:	681b      	ldr	r3, [r3, #0]
 8009160:	4619      	mov	r1, r3
 8009162:	6878      	ldr	r0, [r7, #4]
 8009164:	f7ff ffcc 	bl	8009100 <tcp_netif_ip_addr_changed_pcblist>
    tcp_netif_ip_addr_changed_pcblist(old_addr, tcp_bound_pcbs);
 8009168:	4b14      	ldr	r3, [pc, #80]	; (80091bc <tcp_netif_ip_addr_changed+0x78>)
 800916a:	681b      	ldr	r3, [r3, #0]
 800916c:	4619      	mov	r1, r3
 800916e:	6878      	ldr	r0, [r7, #4]
 8009170:	f7ff ffc6 	bl	8009100 <tcp_netif_ip_addr_changed_pcblist>

    if (!ip_addr_isany(new_addr)) {
 8009174:	683b      	ldr	r3, [r7, #0]
 8009176:	2b00      	cmp	r3, #0
 8009178:	d019      	beq.n	80091ae <tcp_netif_ip_addr_changed+0x6a>
 800917a:	683b      	ldr	r3, [r7, #0]
 800917c:	681b      	ldr	r3, [r3, #0]
 800917e:	2b00      	cmp	r3, #0
 8009180:	d015      	beq.n	80091ae <tcp_netif_ip_addr_changed+0x6a>
      /* PCB bound to current local interface address? */
      for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = next) {
 8009182:	4b0f      	ldr	r3, [pc, #60]	; (80091c0 <tcp_netif_ip_addr_changed+0x7c>)
 8009184:	681b      	ldr	r3, [r3, #0]
 8009186:	60fb      	str	r3, [r7, #12]
 8009188:	e00e      	b.n	80091a8 <tcp_netif_ip_addr_changed+0x64>
        next = lpcb->next;
 800918a:	68fb      	ldr	r3, [r7, #12]
 800918c:	68db      	ldr	r3, [r3, #12]
 800918e:	60bb      	str	r3, [r7, #8]
        /* PCB bound to current local interface address? */
        if (ip_addr_cmp(&lpcb->local_ip, old_addr)) {
 8009190:	68fb      	ldr	r3, [r7, #12]
 8009192:	681a      	ldr	r2, [r3, #0]
 8009194:	687b      	ldr	r3, [r7, #4]
 8009196:	681b      	ldr	r3, [r3, #0]
 8009198:	429a      	cmp	r2, r3
 800919a:	d103      	bne.n	80091a4 <tcp_netif_ip_addr_changed+0x60>
          /* The PCB is listening to the old ipaddr and
            * is set to listen to the new one instead */
          ip_addr_copy(lpcb->local_ip, *new_addr);
 800919c:	683b      	ldr	r3, [r7, #0]
 800919e:	681a      	ldr	r2, [r3, #0]
 80091a0:	68fb      	ldr	r3, [r7, #12]
 80091a2:	601a      	str	r2, [r3, #0]
      for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = next) {
 80091a4:	68bb      	ldr	r3, [r7, #8]
 80091a6:	60fb      	str	r3, [r7, #12]
 80091a8:	68fb      	ldr	r3, [r7, #12]
 80091aa:	2b00      	cmp	r3, #0
 80091ac:	d1ed      	bne.n	800918a <tcp_netif_ip_addr_changed+0x46>
        }
      }
    }
  }
}
 80091ae:	bf00      	nop
 80091b0:	3710      	adds	r7, #16
 80091b2:	46bd      	mov	sp, r7
 80091b4:	bd80      	pop	{r7, pc}
 80091b6:	bf00      	nop
 80091b8:	2400acd8 	.word	0x2400acd8
 80091bc:	2400ace4 	.word	0x2400ace4
 80091c0:	2400ace0 	.word	0x2400ace0

080091c4 <tcp_input>:
 * @param p received TCP segment to process (p->payload pointing to the TCP header)
 * @param inp network interface on which this segment was received
 */
void
tcp_input(struct pbuf *p, struct netif *inp)
{
 80091c4:	b590      	push	{r4, r7, lr}
 80091c6:	b08b      	sub	sp, #44	; 0x2c
 80091c8:	af02      	add	r7, sp, #8
 80091ca:	6078      	str	r0, [r7, #4]
 80091cc:	6039      	str	r1, [r7, #0]
  PERF_START;

  TCP_STATS_INC(tcp.recv);
  MIB2_STATS_INC(mib2.tcpinsegs);

  tcphdr = (struct tcp_hdr *)p->payload;
 80091ce:	687b      	ldr	r3, [r7, #4]
 80091d0:	685b      	ldr	r3, [r3, #4]
 80091d2:	4a82      	ldr	r2, [pc, #520]	; (80093dc <tcp_input+0x218>)
 80091d4:	6013      	str	r3, [r2, #0]
#if TCP_INPUT_DEBUG
  tcp_debug_print(tcphdr);
#endif

  /* Check that TCP header fits in payload */
  if (p->len < TCP_HLEN) {
 80091d6:	687b      	ldr	r3, [r7, #4]
 80091d8:	895b      	ldrh	r3, [r3, #10]
 80091da:	2b13      	cmp	r3, #19
 80091dc:	f240 838b 	bls.w	80098f6 <tcp_input+0x732>
    TCP_STATS_INC(tcp.lenerr);
    goto dropped;
  }

  /* Don't even process incoming broadcasts/multicasts. */
  if (ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif()) ||
 80091e0:	4b7f      	ldr	r3, [pc, #508]	; (80093e0 <tcp_input+0x21c>)
 80091e2:	695a      	ldr	r2, [r3, #20]
 80091e4:	4b7e      	ldr	r3, [pc, #504]	; (80093e0 <tcp_input+0x21c>)
 80091e6:	681b      	ldr	r3, [r3, #0]
 80091e8:	4619      	mov	r1, r3
 80091ea:	4610      	mov	r0, r2
 80091ec:	f004 ffc8 	bl	800e180 <ip4_addr_isbroadcast_u32>
 80091f0:	4603      	mov	r3, r0
 80091f2:	2b00      	cmp	r3, #0
 80091f4:	f040 8381 	bne.w	80098fa <tcp_input+0x736>
      ip_addr_ismulticast(ip_current_dest_addr())) {
 80091f8:	4b79      	ldr	r3, [pc, #484]	; (80093e0 <tcp_input+0x21c>)
 80091fa:	695b      	ldr	r3, [r3, #20]
 80091fc:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
  if (ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif()) ||
 8009200:	2be0      	cmp	r3, #224	; 0xe0
 8009202:	f000 837a 	beq.w	80098fa <tcp_input+0x736>
    }
  }
#endif /* CHECKSUM_CHECK_TCP */

  /* sanity-check header length */
  hdrlen_bytes = TCPH_HDRLEN(tcphdr) * 4;
 8009206:	4b75      	ldr	r3, [pc, #468]	; (80093dc <tcp_input+0x218>)
 8009208:	681b      	ldr	r3, [r3, #0]
 800920a:	899b      	ldrh	r3, [r3, #12]
 800920c:	b29b      	uxth	r3, r3
 800920e:	4618      	mov	r0, r3
 8009210:	f7fd f964 	bl	80064dc <lwip_htons>
 8009214:	4603      	mov	r3, r0
 8009216:	0b1b      	lsrs	r3, r3, #12
 8009218:	b29b      	uxth	r3, r3
 800921a:	b2db      	uxtb	r3, r3
 800921c:	009b      	lsls	r3, r3, #2
 800921e:	74bb      	strb	r3, [r7, #18]
  if ((hdrlen_bytes < TCP_HLEN) || (hdrlen_bytes > p->tot_len)) {
 8009220:	7cbb      	ldrb	r3, [r7, #18]
 8009222:	2b13      	cmp	r3, #19
 8009224:	f240 8369 	bls.w	80098fa <tcp_input+0x736>
 8009228:	7cbb      	ldrb	r3, [r7, #18]
 800922a:	b29a      	uxth	r2, r3
 800922c:	687b      	ldr	r3, [r7, #4]
 800922e:	891b      	ldrh	r3, [r3, #8]
 8009230:	429a      	cmp	r2, r3
 8009232:	f200 8362 	bhi.w	80098fa <tcp_input+0x736>
    goto dropped;
  }

  /* Move the payload pointer in the pbuf so that it points to the
     TCP data instead of the TCP header. */
  tcphdr_optlen = hdrlen_bytes - TCP_HLEN;
 8009236:	7cbb      	ldrb	r3, [r7, #18]
 8009238:	b29b      	uxth	r3, r3
 800923a:	3b14      	subs	r3, #20
 800923c:	b29a      	uxth	r2, r3
 800923e:	4b69      	ldr	r3, [pc, #420]	; (80093e4 <tcp_input+0x220>)
 8009240:	801a      	strh	r2, [r3, #0]
  tcphdr_opt2 = NULL;
 8009242:	4b69      	ldr	r3, [pc, #420]	; (80093e8 <tcp_input+0x224>)
 8009244:	2200      	movs	r2, #0
 8009246:	601a      	str	r2, [r3, #0]
  if (p->len >= hdrlen_bytes) {
 8009248:	687b      	ldr	r3, [r7, #4]
 800924a:	895a      	ldrh	r2, [r3, #10]
 800924c:	7cbb      	ldrb	r3, [r7, #18]
 800924e:	b29b      	uxth	r3, r3
 8009250:	429a      	cmp	r2, r3
 8009252:	d30d      	bcc.n	8009270 <tcp_input+0xac>
    /* all options are in the first pbuf */
    tcphdr_opt1len = tcphdr_optlen;
 8009254:	4b63      	ldr	r3, [pc, #396]	; (80093e4 <tcp_input+0x220>)
 8009256:	881a      	ldrh	r2, [r3, #0]
 8009258:	4b64      	ldr	r3, [pc, #400]	; (80093ec <tcp_input+0x228>)
 800925a:	801a      	strh	r2, [r3, #0]
    pbuf_header(p, -(s16_t)hdrlen_bytes); /* cannot fail */
 800925c:	7cbb      	ldrb	r3, [r7, #18]
 800925e:	b29b      	uxth	r3, r3
 8009260:	425b      	negs	r3, r3
 8009262:	b29b      	uxth	r3, r3
 8009264:	b21b      	sxth	r3, r3
 8009266:	4619      	mov	r1, r3
 8009268:	6878      	ldr	r0, [r7, #4]
 800926a:	f7fe fb3f 	bl	80078ec <pbuf_header>
 800926e:	e055      	b.n	800931c <tcp_input+0x158>
  } else {
    u16_t opt2len;
    /* TCP header fits into first pbuf, options don't - data is in the next pbuf */
    /* there must be a next pbuf, due to hdrlen_bytes sanity check above */
    LWIP_ASSERT("p->next != NULL", p->next != NULL);
 8009270:	687b      	ldr	r3, [r7, #4]
 8009272:	681b      	ldr	r3, [r3, #0]
 8009274:	2b00      	cmp	r3, #0
 8009276:	d105      	bne.n	8009284 <tcp_input+0xc0>
 8009278:	4b5d      	ldr	r3, [pc, #372]	; (80093f0 <tcp_input+0x22c>)
 800927a:	22b2      	movs	r2, #178	; 0xb2
 800927c:	495d      	ldr	r1, [pc, #372]	; (80093f4 <tcp_input+0x230>)
 800927e:	485e      	ldr	r0, [pc, #376]	; (80093f8 <tcp_input+0x234>)
 8009280:	f007 f956 	bl	8010530 <iprintf>

    /* advance over the TCP header (cannot fail) */
    pbuf_header(p, -TCP_HLEN);
 8009284:	f06f 0113 	mvn.w	r1, #19
 8009288:	6878      	ldr	r0, [r7, #4]
 800928a:	f7fe fb2f 	bl	80078ec <pbuf_header>

    /* determine how long the first and second parts of the options are */
    tcphdr_opt1len = p->len;
 800928e:	687b      	ldr	r3, [r7, #4]
 8009290:	895a      	ldrh	r2, [r3, #10]
 8009292:	4b56      	ldr	r3, [pc, #344]	; (80093ec <tcp_input+0x228>)
 8009294:	801a      	strh	r2, [r3, #0]
    opt2len = tcphdr_optlen - tcphdr_opt1len;
 8009296:	4b53      	ldr	r3, [pc, #332]	; (80093e4 <tcp_input+0x220>)
 8009298:	881a      	ldrh	r2, [r3, #0]
 800929a:	4b54      	ldr	r3, [pc, #336]	; (80093ec <tcp_input+0x228>)
 800929c:	881b      	ldrh	r3, [r3, #0]
 800929e:	1ad3      	subs	r3, r2, r3
 80092a0:	823b      	strh	r3, [r7, #16]

    /* options continue in the next pbuf: set p to zero length and hide the
        options in the next pbuf (adjusting p->tot_len) */
    pbuf_header(p, -(s16_t)tcphdr_opt1len);
 80092a2:	4b52      	ldr	r3, [pc, #328]	; (80093ec <tcp_input+0x228>)
 80092a4:	881b      	ldrh	r3, [r3, #0]
 80092a6:	425b      	negs	r3, r3
 80092a8:	b29b      	uxth	r3, r3
 80092aa:	b21b      	sxth	r3, r3
 80092ac:	4619      	mov	r1, r3
 80092ae:	6878      	ldr	r0, [r7, #4]
 80092b0:	f7fe fb1c 	bl	80078ec <pbuf_header>

    /* check that the options fit in the second pbuf */
    if (opt2len > p->next->len) {
 80092b4:	687b      	ldr	r3, [r7, #4]
 80092b6:	681b      	ldr	r3, [r3, #0]
 80092b8:	895b      	ldrh	r3, [r3, #10]
 80092ba:	8a3a      	ldrh	r2, [r7, #16]
 80092bc:	429a      	cmp	r2, r3
 80092be:	f200 831e 	bhi.w	80098fe <tcp_input+0x73a>
      TCP_STATS_INC(tcp.lenerr);
      goto dropped;
    }

    /* remember the pointer to the second part of the options */
    tcphdr_opt2 = (u8_t*)p->next->payload;
 80092c2:	687b      	ldr	r3, [r7, #4]
 80092c4:	681b      	ldr	r3, [r3, #0]
 80092c6:	685b      	ldr	r3, [r3, #4]
 80092c8:	4a47      	ldr	r2, [pc, #284]	; (80093e8 <tcp_input+0x224>)
 80092ca:	6013      	str	r3, [r2, #0]

    /* advance p->next to point after the options, and manually
        adjust p->tot_len to keep it consistent with the changed p->next */
    pbuf_header(p->next, -(s16_t)opt2len);
 80092cc:	687b      	ldr	r3, [r7, #4]
 80092ce:	681a      	ldr	r2, [r3, #0]
 80092d0:	8a3b      	ldrh	r3, [r7, #16]
 80092d2:	425b      	negs	r3, r3
 80092d4:	b29b      	uxth	r3, r3
 80092d6:	b21b      	sxth	r3, r3
 80092d8:	4619      	mov	r1, r3
 80092da:	4610      	mov	r0, r2
 80092dc:	f7fe fb06 	bl	80078ec <pbuf_header>
    p->tot_len -= opt2len;
 80092e0:	687b      	ldr	r3, [r7, #4]
 80092e2:	891a      	ldrh	r2, [r3, #8]
 80092e4:	8a3b      	ldrh	r3, [r7, #16]
 80092e6:	1ad3      	subs	r3, r2, r3
 80092e8:	b29a      	uxth	r2, r3
 80092ea:	687b      	ldr	r3, [r7, #4]
 80092ec:	811a      	strh	r2, [r3, #8]

    LWIP_ASSERT("p->len == 0", p->len == 0);
 80092ee:	687b      	ldr	r3, [r7, #4]
 80092f0:	895b      	ldrh	r3, [r3, #10]
 80092f2:	2b00      	cmp	r3, #0
 80092f4:	d005      	beq.n	8009302 <tcp_input+0x13e>
 80092f6:	4b3e      	ldr	r3, [pc, #248]	; (80093f0 <tcp_input+0x22c>)
 80092f8:	22cf      	movs	r2, #207	; 0xcf
 80092fa:	4940      	ldr	r1, [pc, #256]	; (80093fc <tcp_input+0x238>)
 80092fc:	483e      	ldr	r0, [pc, #248]	; (80093f8 <tcp_input+0x234>)
 80092fe:	f007 f917 	bl	8010530 <iprintf>
    LWIP_ASSERT("p->tot_len == p->next->tot_len", p->tot_len == p->next->tot_len);
 8009302:	687b      	ldr	r3, [r7, #4]
 8009304:	891a      	ldrh	r2, [r3, #8]
 8009306:	687b      	ldr	r3, [r7, #4]
 8009308:	681b      	ldr	r3, [r3, #0]
 800930a:	891b      	ldrh	r3, [r3, #8]
 800930c:	429a      	cmp	r2, r3
 800930e:	d005      	beq.n	800931c <tcp_input+0x158>
 8009310:	4b37      	ldr	r3, [pc, #220]	; (80093f0 <tcp_input+0x22c>)
 8009312:	22d0      	movs	r2, #208	; 0xd0
 8009314:	493a      	ldr	r1, [pc, #232]	; (8009400 <tcp_input+0x23c>)
 8009316:	4838      	ldr	r0, [pc, #224]	; (80093f8 <tcp_input+0x234>)
 8009318:	f007 f90a 	bl	8010530 <iprintf>
  }

  /* Convert fields in TCP header to host byte order. */
  tcphdr->src = lwip_ntohs(tcphdr->src);
 800931c:	4b2f      	ldr	r3, [pc, #188]	; (80093dc <tcp_input+0x218>)
 800931e:	681b      	ldr	r3, [r3, #0]
 8009320:	881b      	ldrh	r3, [r3, #0]
 8009322:	b29a      	uxth	r2, r3
 8009324:	4b2d      	ldr	r3, [pc, #180]	; (80093dc <tcp_input+0x218>)
 8009326:	681c      	ldr	r4, [r3, #0]
 8009328:	4610      	mov	r0, r2
 800932a:	f7fd f8d7 	bl	80064dc <lwip_htons>
 800932e:	4603      	mov	r3, r0
 8009330:	8023      	strh	r3, [r4, #0]
  tcphdr->dest = lwip_ntohs(tcphdr->dest);
 8009332:	4b2a      	ldr	r3, [pc, #168]	; (80093dc <tcp_input+0x218>)
 8009334:	681b      	ldr	r3, [r3, #0]
 8009336:	885b      	ldrh	r3, [r3, #2]
 8009338:	b29a      	uxth	r2, r3
 800933a:	4b28      	ldr	r3, [pc, #160]	; (80093dc <tcp_input+0x218>)
 800933c:	681c      	ldr	r4, [r3, #0]
 800933e:	4610      	mov	r0, r2
 8009340:	f7fd f8cc 	bl	80064dc <lwip_htons>
 8009344:	4603      	mov	r3, r0
 8009346:	8063      	strh	r3, [r4, #2]
  seqno = tcphdr->seqno = lwip_ntohl(tcphdr->seqno);
 8009348:	4b24      	ldr	r3, [pc, #144]	; (80093dc <tcp_input+0x218>)
 800934a:	681b      	ldr	r3, [r3, #0]
 800934c:	685a      	ldr	r2, [r3, #4]
 800934e:	4b23      	ldr	r3, [pc, #140]	; (80093dc <tcp_input+0x218>)
 8009350:	681c      	ldr	r4, [r3, #0]
 8009352:	4610      	mov	r0, r2
 8009354:	f7fd f8d0 	bl	80064f8 <lwip_htonl>
 8009358:	4603      	mov	r3, r0
 800935a:	6063      	str	r3, [r4, #4]
 800935c:	6863      	ldr	r3, [r4, #4]
 800935e:	4a29      	ldr	r2, [pc, #164]	; (8009404 <tcp_input+0x240>)
 8009360:	6013      	str	r3, [r2, #0]
  ackno = tcphdr->ackno = lwip_ntohl(tcphdr->ackno);
 8009362:	4b1e      	ldr	r3, [pc, #120]	; (80093dc <tcp_input+0x218>)
 8009364:	681b      	ldr	r3, [r3, #0]
 8009366:	689a      	ldr	r2, [r3, #8]
 8009368:	4b1c      	ldr	r3, [pc, #112]	; (80093dc <tcp_input+0x218>)
 800936a:	681c      	ldr	r4, [r3, #0]
 800936c:	4610      	mov	r0, r2
 800936e:	f7fd f8c3 	bl	80064f8 <lwip_htonl>
 8009372:	4603      	mov	r3, r0
 8009374:	60a3      	str	r3, [r4, #8]
 8009376:	68a3      	ldr	r3, [r4, #8]
 8009378:	4a23      	ldr	r2, [pc, #140]	; (8009408 <tcp_input+0x244>)
 800937a:	6013      	str	r3, [r2, #0]
  tcphdr->wnd = lwip_ntohs(tcphdr->wnd);
 800937c:	4b17      	ldr	r3, [pc, #92]	; (80093dc <tcp_input+0x218>)
 800937e:	681b      	ldr	r3, [r3, #0]
 8009380:	89db      	ldrh	r3, [r3, #14]
 8009382:	b29a      	uxth	r2, r3
 8009384:	4b15      	ldr	r3, [pc, #84]	; (80093dc <tcp_input+0x218>)
 8009386:	681c      	ldr	r4, [r3, #0]
 8009388:	4610      	mov	r0, r2
 800938a:	f7fd f8a7 	bl	80064dc <lwip_htons>
 800938e:	4603      	mov	r3, r0
 8009390:	81e3      	strh	r3, [r4, #14]

  flags = TCPH_FLAGS(tcphdr);
 8009392:	4b12      	ldr	r3, [pc, #72]	; (80093dc <tcp_input+0x218>)
 8009394:	681b      	ldr	r3, [r3, #0]
 8009396:	899b      	ldrh	r3, [r3, #12]
 8009398:	b29b      	uxth	r3, r3
 800939a:	4618      	mov	r0, r3
 800939c:	f7fd f89e 	bl	80064dc <lwip_htons>
 80093a0:	4603      	mov	r3, r0
 80093a2:	b2db      	uxtb	r3, r3
 80093a4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80093a8:	b2da      	uxtb	r2, r3
 80093aa:	4b18      	ldr	r3, [pc, #96]	; (800940c <tcp_input+0x248>)
 80093ac:	701a      	strb	r2, [r3, #0]
  tcplen = p->tot_len + ((flags & (TCP_FIN | TCP_SYN)) ? 1 : 0);
 80093ae:	687b      	ldr	r3, [r7, #4]
 80093b0:	891a      	ldrh	r2, [r3, #8]
 80093b2:	4b16      	ldr	r3, [pc, #88]	; (800940c <tcp_input+0x248>)
 80093b4:	781b      	ldrb	r3, [r3, #0]
 80093b6:	f003 0303 	and.w	r3, r3, #3
 80093ba:	2b00      	cmp	r3, #0
 80093bc:	bf14      	ite	ne
 80093be:	2301      	movne	r3, #1
 80093c0:	2300      	moveq	r3, #0
 80093c2:	b2db      	uxtb	r3, r3
 80093c4:	b29b      	uxth	r3, r3
 80093c6:	4413      	add	r3, r2
 80093c8:	b29a      	uxth	r2, r3
 80093ca:	4b11      	ldr	r3, [pc, #68]	; (8009410 <tcp_input+0x24c>)
 80093cc:	801a      	strh	r2, [r3, #0]

  /* Demultiplex an incoming segment. First, we check if it is destined
     for an active connection. */
  prev = NULL;
 80093ce:	2300      	movs	r3, #0
 80093d0:	61bb      	str	r3, [r7, #24]

  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 80093d2:	4b10      	ldr	r3, [pc, #64]	; (8009414 <tcp_input+0x250>)
 80093d4:	681b      	ldr	r3, [r3, #0]
 80093d6:	61fb      	str	r3, [r7, #28]
 80093d8:	e082      	b.n	80094e0 <tcp_input+0x31c>
 80093da:	bf00      	nop
 80093dc:	24004050 	.word	0x24004050
 80093e0:	2400419c 	.word	0x2400419c
 80093e4:	24004054 	.word	0x24004054
 80093e8:	24004058 	.word	0x24004058
 80093ec:	24004056 	.word	0x24004056
 80093f0:	080120f8 	.word	0x080120f8
 80093f4:	0801212c 	.word	0x0801212c
 80093f8:	0801213c 	.word	0x0801213c
 80093fc:	08012164 	.word	0x08012164
 8009400:	08012170 	.word	0x08012170
 8009404:	24004060 	.word	0x24004060
 8009408:	24004064 	.word	0x24004064
 800940c:	2400406c 	.word	0x2400406c
 8009410:	2400406a 	.word	0x2400406a
 8009414:	2400acd8 	.word	0x2400acd8
    LWIP_ASSERT("tcp_input: active pcb->state != CLOSED", pcb->state != CLOSED);
 8009418:	69fb      	ldr	r3, [r7, #28]
 800941a:	7d1b      	ldrb	r3, [r3, #20]
 800941c:	2b00      	cmp	r3, #0
 800941e:	d105      	bne.n	800942c <tcp_input+0x268>
 8009420:	4b8f      	ldr	r3, [pc, #572]	; (8009660 <tcp_input+0x49c>)
 8009422:	22e2      	movs	r2, #226	; 0xe2
 8009424:	498f      	ldr	r1, [pc, #572]	; (8009664 <tcp_input+0x4a0>)
 8009426:	4890      	ldr	r0, [pc, #576]	; (8009668 <tcp_input+0x4a4>)
 8009428:	f007 f882 	bl	8010530 <iprintf>
    LWIP_ASSERT("tcp_input: active pcb->state != TIME-WAIT", pcb->state != TIME_WAIT);
 800942c:	69fb      	ldr	r3, [r7, #28]
 800942e:	7d1b      	ldrb	r3, [r3, #20]
 8009430:	2b0a      	cmp	r3, #10
 8009432:	d105      	bne.n	8009440 <tcp_input+0x27c>
 8009434:	4b8a      	ldr	r3, [pc, #552]	; (8009660 <tcp_input+0x49c>)
 8009436:	22e3      	movs	r2, #227	; 0xe3
 8009438:	498c      	ldr	r1, [pc, #560]	; (800966c <tcp_input+0x4a8>)
 800943a:	488b      	ldr	r0, [pc, #556]	; (8009668 <tcp_input+0x4a4>)
 800943c:	f007 f878 	bl	8010530 <iprintf>
    LWIP_ASSERT("tcp_input: active pcb->state != LISTEN", pcb->state != LISTEN);
 8009440:	69fb      	ldr	r3, [r7, #28]
 8009442:	7d1b      	ldrb	r3, [r3, #20]
 8009444:	2b01      	cmp	r3, #1
 8009446:	d105      	bne.n	8009454 <tcp_input+0x290>
 8009448:	4b85      	ldr	r3, [pc, #532]	; (8009660 <tcp_input+0x49c>)
 800944a:	22e4      	movs	r2, #228	; 0xe4
 800944c:	4988      	ldr	r1, [pc, #544]	; (8009670 <tcp_input+0x4ac>)
 800944e:	4886      	ldr	r0, [pc, #536]	; (8009668 <tcp_input+0x4a4>)
 8009450:	f007 f86e 	bl	8010530 <iprintf>
    if (pcb->remote_port == tcphdr->src &&
 8009454:	69fb      	ldr	r3, [r7, #28]
 8009456:	8b1a      	ldrh	r2, [r3, #24]
 8009458:	4b86      	ldr	r3, [pc, #536]	; (8009674 <tcp_input+0x4b0>)
 800945a:	681b      	ldr	r3, [r3, #0]
 800945c:	881b      	ldrh	r3, [r3, #0]
 800945e:	b29b      	uxth	r3, r3
 8009460:	429a      	cmp	r2, r3
 8009462:	d138      	bne.n	80094d6 <tcp_input+0x312>
        pcb->local_port == tcphdr->dest &&
 8009464:	69fb      	ldr	r3, [r7, #28]
 8009466:	8ada      	ldrh	r2, [r3, #22]
 8009468:	4b82      	ldr	r3, [pc, #520]	; (8009674 <tcp_input+0x4b0>)
 800946a:	681b      	ldr	r3, [r3, #0]
 800946c:	885b      	ldrh	r3, [r3, #2]
 800946e:	b29b      	uxth	r3, r3
    if (pcb->remote_port == tcphdr->src &&
 8009470:	429a      	cmp	r2, r3
 8009472:	d130      	bne.n	80094d6 <tcp_input+0x312>
        ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 8009474:	69fb      	ldr	r3, [r7, #28]
 8009476:	685a      	ldr	r2, [r3, #4]
 8009478:	4b7f      	ldr	r3, [pc, #508]	; (8009678 <tcp_input+0x4b4>)
 800947a:	691b      	ldr	r3, [r3, #16]
        pcb->local_port == tcphdr->dest &&
 800947c:	429a      	cmp	r2, r3
 800947e:	d12a      	bne.n	80094d6 <tcp_input+0x312>
        ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 8009480:	69fb      	ldr	r3, [r7, #28]
 8009482:	681a      	ldr	r2, [r3, #0]
 8009484:	4b7c      	ldr	r3, [pc, #496]	; (8009678 <tcp_input+0x4b4>)
 8009486:	695b      	ldr	r3, [r3, #20]
        ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 8009488:	429a      	cmp	r2, r3
 800948a:	d124      	bne.n	80094d6 <tcp_input+0x312>
      /* Move this PCB to the front of the list so that subsequent
         lookups will be faster (we exploit locality in TCP segment
         arrivals). */
      LWIP_ASSERT("tcp_input: pcb->next != pcb (before cache)", pcb->next != pcb);
 800948c:	69fb      	ldr	r3, [r7, #28]
 800948e:	68db      	ldr	r3, [r3, #12]
 8009490:	69fa      	ldr	r2, [r7, #28]
 8009492:	429a      	cmp	r2, r3
 8009494:	d105      	bne.n	80094a2 <tcp_input+0x2de>
 8009496:	4b72      	ldr	r3, [pc, #456]	; (8009660 <tcp_input+0x49c>)
 8009498:	22ec      	movs	r2, #236	; 0xec
 800949a:	4978      	ldr	r1, [pc, #480]	; (800967c <tcp_input+0x4b8>)
 800949c:	4872      	ldr	r0, [pc, #456]	; (8009668 <tcp_input+0x4a4>)
 800949e:	f007 f847 	bl	8010530 <iprintf>
      if (prev != NULL) {
 80094a2:	69bb      	ldr	r3, [r7, #24]
 80094a4:	2b00      	cmp	r3, #0
 80094a6:	d00a      	beq.n	80094be <tcp_input+0x2fa>
        prev->next = pcb->next;
 80094a8:	69fb      	ldr	r3, [r7, #28]
 80094aa:	68da      	ldr	r2, [r3, #12]
 80094ac:	69bb      	ldr	r3, [r7, #24]
 80094ae:	60da      	str	r2, [r3, #12]
        pcb->next = tcp_active_pcbs;
 80094b0:	4b73      	ldr	r3, [pc, #460]	; (8009680 <tcp_input+0x4bc>)
 80094b2:	681a      	ldr	r2, [r3, #0]
 80094b4:	69fb      	ldr	r3, [r7, #28]
 80094b6:	60da      	str	r2, [r3, #12]
        tcp_active_pcbs = pcb;
 80094b8:	4a71      	ldr	r2, [pc, #452]	; (8009680 <tcp_input+0x4bc>)
 80094ba:	69fb      	ldr	r3, [r7, #28]
 80094bc:	6013      	str	r3, [r2, #0]
      } else {
        TCP_STATS_INC(tcp.cachehit);
      }
      LWIP_ASSERT("tcp_input: pcb->next != pcb (after cache)", pcb->next != pcb);
 80094be:	69fb      	ldr	r3, [r7, #28]
 80094c0:	68db      	ldr	r3, [r3, #12]
 80094c2:	69fa      	ldr	r2, [r7, #28]
 80094c4:	429a      	cmp	r2, r3
 80094c6:	d10f      	bne.n	80094e8 <tcp_input+0x324>
 80094c8:	4b65      	ldr	r3, [pc, #404]	; (8009660 <tcp_input+0x49c>)
 80094ca:	22f4      	movs	r2, #244	; 0xf4
 80094cc:	496d      	ldr	r1, [pc, #436]	; (8009684 <tcp_input+0x4c0>)
 80094ce:	4866      	ldr	r0, [pc, #408]	; (8009668 <tcp_input+0x4a4>)
 80094d0:	f007 f82e 	bl	8010530 <iprintf>
      break;
 80094d4:	e008      	b.n	80094e8 <tcp_input+0x324>
    }
    prev = pcb;
 80094d6:	69fb      	ldr	r3, [r7, #28]
 80094d8:	61bb      	str	r3, [r7, #24]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 80094da:	69fb      	ldr	r3, [r7, #28]
 80094dc:	68db      	ldr	r3, [r3, #12]
 80094de:	61fb      	str	r3, [r7, #28]
 80094e0:	69fb      	ldr	r3, [r7, #28]
 80094e2:	2b00      	cmp	r3, #0
 80094e4:	d198      	bne.n	8009418 <tcp_input+0x254>
 80094e6:	e000      	b.n	80094ea <tcp_input+0x326>
      break;
 80094e8:	bf00      	nop
  }

  if (pcb == NULL) {
 80094ea:	69fb      	ldr	r3, [r7, #28]
 80094ec:	2b00      	cmp	r3, #0
 80094ee:	d173      	bne.n	80095d8 <tcp_input+0x414>
    /* If it did not go to an active connection, we check the connections
       in the TIME-WAIT state. */
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 80094f0:	4b65      	ldr	r3, [pc, #404]	; (8009688 <tcp_input+0x4c4>)
 80094f2:	681b      	ldr	r3, [r3, #0]
 80094f4:	61fb      	str	r3, [r7, #28]
 80094f6:	e02f      	b.n	8009558 <tcp_input+0x394>
      LWIP_ASSERT("tcp_input: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 80094f8:	69fb      	ldr	r3, [r7, #28]
 80094fa:	7d1b      	ldrb	r3, [r3, #20]
 80094fc:	2b0a      	cmp	r3, #10
 80094fe:	d005      	beq.n	800950c <tcp_input+0x348>
 8009500:	4b57      	ldr	r3, [pc, #348]	; (8009660 <tcp_input+0x49c>)
 8009502:	22fe      	movs	r2, #254	; 0xfe
 8009504:	4961      	ldr	r1, [pc, #388]	; (800968c <tcp_input+0x4c8>)
 8009506:	4858      	ldr	r0, [pc, #352]	; (8009668 <tcp_input+0x4a4>)
 8009508:	f007 f812 	bl	8010530 <iprintf>
      if (pcb->remote_port == tcphdr->src &&
 800950c:	69fb      	ldr	r3, [r7, #28]
 800950e:	8b1a      	ldrh	r2, [r3, #24]
 8009510:	4b58      	ldr	r3, [pc, #352]	; (8009674 <tcp_input+0x4b0>)
 8009512:	681b      	ldr	r3, [r3, #0]
 8009514:	881b      	ldrh	r3, [r3, #0]
 8009516:	b29b      	uxth	r3, r3
 8009518:	429a      	cmp	r2, r3
 800951a:	d11a      	bne.n	8009552 <tcp_input+0x38e>
          pcb->local_port == tcphdr->dest &&
 800951c:	69fb      	ldr	r3, [r7, #28]
 800951e:	8ada      	ldrh	r2, [r3, #22]
 8009520:	4b54      	ldr	r3, [pc, #336]	; (8009674 <tcp_input+0x4b0>)
 8009522:	681b      	ldr	r3, [r3, #0]
 8009524:	885b      	ldrh	r3, [r3, #2]
 8009526:	b29b      	uxth	r3, r3
      if (pcb->remote_port == tcphdr->src &&
 8009528:	429a      	cmp	r2, r3
 800952a:	d112      	bne.n	8009552 <tcp_input+0x38e>
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 800952c:	69fb      	ldr	r3, [r7, #28]
 800952e:	685a      	ldr	r2, [r3, #4]
 8009530:	4b51      	ldr	r3, [pc, #324]	; (8009678 <tcp_input+0x4b4>)
 8009532:	691b      	ldr	r3, [r3, #16]
          pcb->local_port == tcphdr->dest &&
 8009534:	429a      	cmp	r2, r3
 8009536:	d10c      	bne.n	8009552 <tcp_input+0x38e>
          ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 8009538:	69fb      	ldr	r3, [r7, #28]
 800953a:	681a      	ldr	r2, [r3, #0]
 800953c:	4b4e      	ldr	r3, [pc, #312]	; (8009678 <tcp_input+0x4b4>)
 800953e:	695b      	ldr	r3, [r3, #20]
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 8009540:	429a      	cmp	r2, r3
 8009542:	d106      	bne.n	8009552 <tcp_input+0x38e>
        /* We don't really care enough to move this PCB to the front
           of the list since we are not very likely to receive that
           many segments for connections in TIME-WAIT. */
        LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: packed for TIME_WAITing connection.\n"));
        tcp_timewait_input(pcb);
 8009544:	69f8      	ldr	r0, [r7, #28]
 8009546:	f000 fb15 	bl	8009b74 <tcp_timewait_input>
        pbuf_free(p);
 800954a:	6878      	ldr	r0, [r7, #4]
 800954c:	f7fe f9f2 	bl	8007934 <pbuf_free>
        return;
 8009550:	e1db      	b.n	800990a <tcp_input+0x746>
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 8009552:	69fb      	ldr	r3, [r7, #28]
 8009554:	68db      	ldr	r3, [r3, #12]
 8009556:	61fb      	str	r3, [r7, #28]
 8009558:	69fb      	ldr	r3, [r7, #28]
 800955a:	2b00      	cmp	r3, #0
 800955c:	d1cc      	bne.n	80094f8 <tcp_input+0x334>
      }
    }

    /* Finally, if we still did not get a match, we check all PCBs that
       are LISTENing for incoming connections. */
    prev = NULL;
 800955e:	2300      	movs	r3, #0
 8009560:	61bb      	str	r3, [r7, #24]
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 8009562:	4b4b      	ldr	r3, [pc, #300]	; (8009690 <tcp_input+0x4cc>)
 8009564:	681b      	ldr	r3, [r3, #0]
 8009566:	617b      	str	r3, [r7, #20]
 8009568:	e019      	b.n	800959e <tcp_input+0x3da>
      if (lpcb->local_port == tcphdr->dest) {
 800956a:	697b      	ldr	r3, [r7, #20]
 800956c:	8ada      	ldrh	r2, [r3, #22]
 800956e:	4b41      	ldr	r3, [pc, #260]	; (8009674 <tcp_input+0x4b0>)
 8009570:	681b      	ldr	r3, [r3, #0]
 8009572:	885b      	ldrh	r3, [r3, #2]
 8009574:	b29b      	uxth	r3, r3
 8009576:	429a      	cmp	r2, r3
 8009578:	d10c      	bne.n	8009594 <tcp_input+0x3d0>
          lpcb_prev = prev;
#else /* SO_REUSE */
          break;
#endif /* SO_REUSE */
        } else if (IP_ADDR_PCB_VERSION_MATCH_EXACT(lpcb, ip_current_dest_addr())) {
          if (ip_addr_cmp(&lpcb->local_ip, ip_current_dest_addr())) {
 800957a:	697b      	ldr	r3, [r7, #20]
 800957c:	681a      	ldr	r2, [r3, #0]
 800957e:	4b3e      	ldr	r3, [pc, #248]	; (8009678 <tcp_input+0x4b4>)
 8009580:	695b      	ldr	r3, [r3, #20]
 8009582:	429a      	cmp	r2, r3
 8009584:	d00f      	beq.n	80095a6 <tcp_input+0x3e2>
            /* found an exact match */
            break;
          } else if (ip_addr_isany(&lpcb->local_ip)) {
 8009586:	697b      	ldr	r3, [r7, #20]
 8009588:	2b00      	cmp	r3, #0
 800958a:	d00d      	beq.n	80095a8 <tcp_input+0x3e4>
 800958c:	697b      	ldr	r3, [r7, #20]
 800958e:	681b      	ldr	r3, [r3, #0]
 8009590:	2b00      	cmp	r3, #0
 8009592:	d009      	beq.n	80095a8 <tcp_input+0x3e4>
            break;
 #endif /* SO_REUSE */
          }
        }
      }
      prev = (struct tcp_pcb *)lpcb;
 8009594:	697b      	ldr	r3, [r7, #20]
 8009596:	61bb      	str	r3, [r7, #24]
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 8009598:	697b      	ldr	r3, [r7, #20]
 800959a:	68db      	ldr	r3, [r3, #12]
 800959c:	617b      	str	r3, [r7, #20]
 800959e:	697b      	ldr	r3, [r7, #20]
 80095a0:	2b00      	cmp	r3, #0
 80095a2:	d1e2      	bne.n	800956a <tcp_input+0x3a6>
 80095a4:	e000      	b.n	80095a8 <tcp_input+0x3e4>
            break;
 80095a6:	bf00      	nop
      /* only pass to ANY if no specific local IP has been found */
      lpcb = lpcb_any;
      prev = lpcb_prev;
    }
#endif /* SO_REUSE */
    if (lpcb != NULL) {
 80095a8:	697b      	ldr	r3, [r7, #20]
 80095aa:	2b00      	cmp	r3, #0
 80095ac:	d014      	beq.n	80095d8 <tcp_input+0x414>
      /* Move this PCB to the front of the list so that subsequent
         lookups will be faster (we exploit locality in TCP segment
         arrivals). */
      if (prev != NULL) {
 80095ae:	69bb      	ldr	r3, [r7, #24]
 80095b0:	2b00      	cmp	r3, #0
 80095b2:	d00a      	beq.n	80095ca <tcp_input+0x406>
        ((struct tcp_pcb_listen *)prev)->next = lpcb->next;
 80095b4:	697b      	ldr	r3, [r7, #20]
 80095b6:	68da      	ldr	r2, [r3, #12]
 80095b8:	69bb      	ldr	r3, [r7, #24]
 80095ba:	60da      	str	r2, [r3, #12]
              /* our successor is the remainder of the listening list */
        lpcb->next = tcp_listen_pcbs.listen_pcbs;
 80095bc:	4b34      	ldr	r3, [pc, #208]	; (8009690 <tcp_input+0x4cc>)
 80095be:	681a      	ldr	r2, [r3, #0]
 80095c0:	697b      	ldr	r3, [r7, #20]
 80095c2:	60da      	str	r2, [r3, #12]
              /* put this listening pcb at the head of the listening list */
        tcp_listen_pcbs.listen_pcbs = lpcb;
 80095c4:	4a32      	ldr	r2, [pc, #200]	; (8009690 <tcp_input+0x4cc>)
 80095c6:	697b      	ldr	r3, [r7, #20]
 80095c8:	6013      	str	r3, [r2, #0]
      } else {
        TCP_STATS_INC(tcp.cachehit);
      }

      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: packed for LISTENing connection.\n"));
      tcp_listen_input(lpcb);
 80095ca:	6978      	ldr	r0, [r7, #20]
 80095cc:	f000 f9f0 	bl	80099b0 <tcp_listen_input>
      pbuf_free(p);
 80095d0:	6878      	ldr	r0, [r7, #4]
 80095d2:	f7fe f9af 	bl	8007934 <pbuf_free>
      return;
 80095d6:	e198      	b.n	800990a <tcp_input+0x746>
  tcp_debug_print_flags(TCPH_FLAGS(tcphdr));
  LWIP_DEBUGF(TCP_INPUT_DEBUG, ("-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n"));
#endif /* TCP_INPUT_DEBUG */


  if (pcb != NULL) {
 80095d8:	69fb      	ldr	r3, [r7, #28]
 80095da:	2b00      	cmp	r3, #0
 80095dc:	f000 8165 	beq.w	80098aa <tcp_input+0x6e6>
#if TCP_INPUT_DEBUG
    tcp_debug_print_state(pcb->state);
#endif /* TCP_INPUT_DEBUG */

    /* Set up a tcp_seg structure. */
    inseg.next = NULL;
 80095e0:	4b2c      	ldr	r3, [pc, #176]	; (8009694 <tcp_input+0x4d0>)
 80095e2:	2200      	movs	r2, #0
 80095e4:	601a      	str	r2, [r3, #0]
    inseg.len = p->tot_len;
 80095e6:	687b      	ldr	r3, [r7, #4]
 80095e8:	891a      	ldrh	r2, [r3, #8]
 80095ea:	4b2a      	ldr	r3, [pc, #168]	; (8009694 <tcp_input+0x4d0>)
 80095ec:	811a      	strh	r2, [r3, #8]
    inseg.p = p;
 80095ee:	4a29      	ldr	r2, [pc, #164]	; (8009694 <tcp_input+0x4d0>)
 80095f0:	687b      	ldr	r3, [r7, #4]
 80095f2:	6053      	str	r3, [r2, #4]
    inseg.tcphdr = tcphdr;
 80095f4:	4b1f      	ldr	r3, [pc, #124]	; (8009674 <tcp_input+0x4b0>)
 80095f6:	681b      	ldr	r3, [r3, #0]
 80095f8:	4a26      	ldr	r2, [pc, #152]	; (8009694 <tcp_input+0x4d0>)
 80095fa:	60d3      	str	r3, [r2, #12]

    recv_data = NULL;
 80095fc:	4b26      	ldr	r3, [pc, #152]	; (8009698 <tcp_input+0x4d4>)
 80095fe:	2200      	movs	r2, #0
 8009600:	601a      	str	r2, [r3, #0]
    recv_flags = 0;
 8009602:	4b26      	ldr	r3, [pc, #152]	; (800969c <tcp_input+0x4d8>)
 8009604:	2200      	movs	r2, #0
 8009606:	701a      	strb	r2, [r3, #0]
    recv_acked = 0;
 8009608:	4b25      	ldr	r3, [pc, #148]	; (80096a0 <tcp_input+0x4dc>)
 800960a:	2200      	movs	r2, #0
 800960c:	801a      	strh	r2, [r3, #0]

    if (flags & TCP_PSH) {
 800960e:	4b25      	ldr	r3, [pc, #148]	; (80096a4 <tcp_input+0x4e0>)
 8009610:	781b      	ldrb	r3, [r3, #0]
 8009612:	f003 0308 	and.w	r3, r3, #8
 8009616:	2b00      	cmp	r3, #0
 8009618:	d006      	beq.n	8009628 <tcp_input+0x464>
      p->flags |= PBUF_FLAG_PUSH;
 800961a:	687b      	ldr	r3, [r7, #4]
 800961c:	7b5b      	ldrb	r3, [r3, #13]
 800961e:	f043 0301 	orr.w	r3, r3, #1
 8009622:	b2da      	uxtb	r2, r3
 8009624:	687b      	ldr	r3, [r7, #4]
 8009626:	735a      	strb	r2, [r3, #13]
    }

    /* If there is data which was previously "refused" by upper layer */
    if (pcb->refused_data != NULL) {
 8009628:	69fb      	ldr	r3, [r7, #28]
 800962a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800962c:	2b00      	cmp	r3, #0
 800962e:	d03d      	beq.n	80096ac <tcp_input+0x4e8>
      if ((tcp_process_refused_data(pcb) == ERR_ABRT) ||
 8009630:	69f8      	ldr	r0, [r7, #28]
 8009632:	f7ff fa59 	bl	8008ae8 <tcp_process_refused_data>
 8009636:	4603      	mov	r3, r0
 8009638:	f113 0f0d 	cmn.w	r3, #13
 800963c:	d007      	beq.n	800964e <tcp_input+0x48a>
        ((pcb->refused_data != NULL) && (tcplen > 0))) {
 800963e:	69fb      	ldr	r3, [r7, #28]
 8009640:	6f5b      	ldr	r3, [r3, #116]	; 0x74
      if ((tcp_process_refused_data(pcb) == ERR_ABRT) ||
 8009642:	2b00      	cmp	r3, #0
 8009644:	d032      	beq.n	80096ac <tcp_input+0x4e8>
        ((pcb->refused_data != NULL) && (tcplen > 0))) {
 8009646:	4b18      	ldr	r3, [pc, #96]	; (80096a8 <tcp_input+0x4e4>)
 8009648:	881b      	ldrh	r3, [r3, #0]
 800964a:	2b00      	cmp	r3, #0
 800964c:	d02e      	beq.n	80096ac <tcp_input+0x4e8>
        /* pcb has been aborted or refused data is still refused and the new
           segment contains data */
        if (pcb->rcv_ann_wnd == 0) {
 800964e:	69fb      	ldr	r3, [r7, #28]
 8009650:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009652:	2b00      	cmp	r3, #0
 8009654:	f040 8109 	bne.w	800986a <tcp_input+0x6a6>
          /* this is a zero-window probe, we respond to it with current RCV.NXT
          and drop the data segment */
          tcp_send_empty_ack(pcb);
 8009658:	69f8      	ldr	r0, [r7, #28]
 800965a:	f002 fa0b 	bl	800ba74 <tcp_send_empty_ack>
        }
        TCP_STATS_INC(tcp.drop);
        MIB2_STATS_INC(mib2.tcpinerrs);
        goto aborted;
 800965e:	e104      	b.n	800986a <tcp_input+0x6a6>
 8009660:	080120f8 	.word	0x080120f8
 8009664:	08012190 	.word	0x08012190
 8009668:	0801213c 	.word	0x0801213c
 800966c:	080121b8 	.word	0x080121b8
 8009670:	080121e4 	.word	0x080121e4
 8009674:	24004050 	.word	0x24004050
 8009678:	2400419c 	.word	0x2400419c
 800967c:	0801220c 	.word	0x0801220c
 8009680:	2400acd8 	.word	0x2400acd8
 8009684:	08012238 	.word	0x08012238
 8009688:	2400ace8 	.word	0x2400ace8
 800968c:	08012264 	.word	0x08012264
 8009690:	2400ace0 	.word	0x2400ace0
 8009694:	24004040 	.word	0x24004040
 8009698:	24004070 	.word	0x24004070
 800969c:	2400406d 	.word	0x2400406d
 80096a0:	24004068 	.word	0x24004068
 80096a4:	2400406c 	.word	0x2400406c
 80096a8:	2400406a 	.word	0x2400406a
      }
    }
    tcp_input_pcb = pcb;
 80096ac:	4a98      	ldr	r2, [pc, #608]	; (8009910 <tcp_input+0x74c>)
 80096ae:	69fb      	ldr	r3, [r7, #28]
 80096b0:	6013      	str	r3, [r2, #0]
    err = tcp_process(pcb);
 80096b2:	69f8      	ldr	r0, [r7, #28]
 80096b4:	f000 fac6 	bl	8009c44 <tcp_process>
 80096b8:	4603      	mov	r3, r0
 80096ba:	74fb      	strb	r3, [r7, #19]
    /* A return value of ERR_ABRT means that tcp_abort() was called
       and that the pcb has been freed. If so, we don't do anything. */
    if (err != ERR_ABRT) {
 80096bc:	f997 3013 	ldrsb.w	r3, [r7, #19]
 80096c0:	f113 0f0d 	cmn.w	r3, #13
 80096c4:	f000 80d3 	beq.w	800986e <tcp_input+0x6aa>
      if (recv_flags & TF_RESET) {
 80096c8:	4b92      	ldr	r3, [pc, #584]	; (8009914 <tcp_input+0x750>)
 80096ca:	781b      	ldrb	r3, [r3, #0]
 80096cc:	f003 0308 	and.w	r3, r3, #8
 80096d0:	2b00      	cmp	r3, #0
 80096d2:	d016      	beq.n	8009702 <tcp_input+0x53e>
        /* TF_RESET means that the connection was reset by the other
           end. We then call the error callback to inform the
           application that the connection is dead before we
           deallocate the PCB. */
        TCP_EVENT_ERR(pcb->state, pcb->errf, pcb->callback_arg, ERR_RST);
 80096d4:	69fb      	ldr	r3, [r7, #28]
 80096d6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80096da:	2b00      	cmp	r3, #0
 80096dc:	d008      	beq.n	80096f0 <tcp_input+0x52c>
 80096de:	69fb      	ldr	r3, [r7, #28]
 80096e0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80096e4:	69fa      	ldr	r2, [r7, #28]
 80096e6:	6912      	ldr	r2, [r2, #16]
 80096e8:	f06f 010d 	mvn.w	r1, #13
 80096ec:	4610      	mov	r0, r2
 80096ee:	4798      	blx	r3
        tcp_pcb_remove(&tcp_active_pcbs, pcb);
 80096f0:	69f9      	ldr	r1, [r7, #28]
 80096f2:	4889      	ldr	r0, [pc, #548]	; (8009918 <tcp_input+0x754>)
 80096f4:	f7ff fc4c 	bl	8008f90 <tcp_pcb_remove>
        memp_free(MEMP_TCP_PCB, pcb);
 80096f8:	69f9      	ldr	r1, [r7, #28]
 80096fa:	2001      	movs	r0, #1
 80096fc:	f7fd fb70 	bl	8006de0 <memp_free>
 8009700:	e0c0      	b.n	8009884 <tcp_input+0x6c0>
      } else {
        err = ERR_OK;
 8009702:	2300      	movs	r3, #0
 8009704:	74fb      	strb	r3, [r7, #19]
        /* If the application has registered a "sent" function to be
           called when new send buffer space is available, we call it
           now. */
        if (recv_acked > 0) {
 8009706:	4b85      	ldr	r3, [pc, #532]	; (800991c <tcp_input+0x758>)
 8009708:	881b      	ldrh	r3, [r3, #0]
 800970a:	2b00      	cmp	r3, #0
 800970c:	d01b      	beq.n	8009746 <tcp_input+0x582>
          while (acked > 0) {
            acked16 = (u16_t)LWIP_MIN(acked, 0xffffu);
            acked -= acked16;
#else
          {
            acked16 = recv_acked;
 800970e:	4b83      	ldr	r3, [pc, #524]	; (800991c <tcp_input+0x758>)
 8009710:	881b      	ldrh	r3, [r3, #0]
 8009712:	81fb      	strh	r3, [r7, #14]
#endif
            TCP_EVENT_SENT(pcb, (u16_t)acked16, err);
 8009714:	69fb      	ldr	r3, [r7, #28]
 8009716:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8009718:	2b00      	cmp	r3, #0
 800971a:	d009      	beq.n	8009730 <tcp_input+0x56c>
 800971c:	69fb      	ldr	r3, [r7, #28]
 800971e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8009720:	69fa      	ldr	r2, [r7, #28]
 8009722:	6910      	ldr	r0, [r2, #16]
 8009724:	89fa      	ldrh	r2, [r7, #14]
 8009726:	69f9      	ldr	r1, [r7, #28]
 8009728:	4798      	blx	r3
 800972a:	4603      	mov	r3, r0
 800972c:	74fb      	strb	r3, [r7, #19]
 800972e:	e001      	b.n	8009734 <tcp_input+0x570>
 8009730:	2300      	movs	r3, #0
 8009732:	74fb      	strb	r3, [r7, #19]
            if (err == ERR_ABRT) {
 8009734:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8009738:	f113 0f0d 	cmn.w	r3, #13
 800973c:	f000 8099 	beq.w	8009872 <tcp_input+0x6ae>
              goto aborted;
            }
          }
          recv_acked = 0;
 8009740:	4b76      	ldr	r3, [pc, #472]	; (800991c <tcp_input+0x758>)
 8009742:	2200      	movs	r2, #0
 8009744:	801a      	strh	r2, [r3, #0]
        }
        if (tcp_input_delayed_close(pcb)) {
 8009746:	69f8      	ldr	r0, [r7, #28]
 8009748:	f000 f900 	bl	800994c <tcp_input_delayed_close>
 800974c:	4603      	mov	r3, r0
 800974e:	2b00      	cmp	r3, #0
 8009750:	f040 8091 	bne.w	8009876 <tcp_input+0x6b2>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
        while (recv_data != NULL) {
          struct pbuf *rest = NULL;
          pbuf_split_64k(recv_data, &rest);
#else /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
        if (recv_data != NULL) {
 8009754:	4b72      	ldr	r3, [pc, #456]	; (8009920 <tcp_input+0x75c>)
 8009756:	681b      	ldr	r3, [r3, #0]
 8009758:	2b00      	cmp	r3, #0
 800975a:	d041      	beq.n	80097e0 <tcp_input+0x61c>
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */

          LWIP_ASSERT("pcb->refused_data == NULL", pcb->refused_data == NULL);
 800975c:	69fb      	ldr	r3, [r7, #28]
 800975e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009760:	2b00      	cmp	r3, #0
 8009762:	d006      	beq.n	8009772 <tcp_input+0x5ae>
 8009764:	4b6f      	ldr	r3, [pc, #444]	; (8009924 <tcp_input+0x760>)
 8009766:	f44f 72d2 	mov.w	r2, #420	; 0x1a4
 800976a:	496f      	ldr	r1, [pc, #444]	; (8009928 <tcp_input+0x764>)
 800976c:	486f      	ldr	r0, [pc, #444]	; (800992c <tcp_input+0x768>)
 800976e:	f006 fedf 	bl	8010530 <iprintf>
          if (pcb->flags & TF_RXCLOSED) {
 8009772:	69fb      	ldr	r3, [r7, #28]
 8009774:	7e9b      	ldrb	r3, [r3, #26]
 8009776:	f003 0310 	and.w	r3, r3, #16
 800977a:	2b00      	cmp	r3, #0
 800977c:	d008      	beq.n	8009790 <tcp_input+0x5cc>
            /* received data although already closed -> abort (send RST) to
               notify the remote host that not all data has been processed */
            pbuf_free(recv_data);
 800977e:	4b68      	ldr	r3, [pc, #416]	; (8009920 <tcp_input+0x75c>)
 8009780:	681b      	ldr	r3, [r3, #0]
 8009782:	4618      	mov	r0, r3
 8009784:	f7fe f8d6 	bl	8007934 <pbuf_free>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
            if (rest != NULL) {
              pbuf_free(rest);
            }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            tcp_abort(pcb);
 8009788:	69f8      	ldr	r0, [r7, #28]
 800978a:	f7fe fdd3 	bl	8008334 <tcp_abort>
            goto aborted;
 800978e:	e079      	b.n	8009884 <tcp_input+0x6c0>
          }

          /* Notify application that data has been received. */
          TCP_EVENT_RECV(pcb, recv_data, ERR_OK, err);
 8009790:	69fb      	ldr	r3, [r7, #28]
 8009792:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8009796:	2b00      	cmp	r3, #0
 8009798:	d00c      	beq.n	80097b4 <tcp_input+0x5f0>
 800979a:	69fb      	ldr	r3, [r7, #28]
 800979c:	f8d3 4080 	ldr.w	r4, [r3, #128]	; 0x80
 80097a0:	69fb      	ldr	r3, [r7, #28]
 80097a2:	6918      	ldr	r0, [r3, #16]
 80097a4:	4b5e      	ldr	r3, [pc, #376]	; (8009920 <tcp_input+0x75c>)
 80097a6:	681a      	ldr	r2, [r3, #0]
 80097a8:	2300      	movs	r3, #0
 80097aa:	69f9      	ldr	r1, [r7, #28]
 80097ac:	47a0      	blx	r4
 80097ae:	4603      	mov	r3, r0
 80097b0:	74fb      	strb	r3, [r7, #19]
 80097b2:	e008      	b.n	80097c6 <tcp_input+0x602>
 80097b4:	4b5a      	ldr	r3, [pc, #360]	; (8009920 <tcp_input+0x75c>)
 80097b6:	681a      	ldr	r2, [r3, #0]
 80097b8:	2300      	movs	r3, #0
 80097ba:	69f9      	ldr	r1, [r7, #28]
 80097bc:	2000      	movs	r0, #0
 80097be:	f7ff fa45 	bl	8008c4c <tcp_recv_null>
 80097c2:	4603      	mov	r3, r0
 80097c4:	74fb      	strb	r3, [r7, #19]
          if (err == ERR_ABRT) {
 80097c6:	f997 3013 	ldrsb.w	r3, [r7, #19]
 80097ca:	f113 0f0d 	cmn.w	r3, #13
 80097ce:	d054      	beq.n	800987a <tcp_input+0x6b6>
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            goto aborted;
          }

          /* If the upper layer can't receive this data, store it */
          if (err != ERR_OK) {
 80097d0:	f997 3013 	ldrsb.w	r3, [r7, #19]
 80097d4:	2b00      	cmp	r3, #0
 80097d6:	d003      	beq.n	80097e0 <tcp_input+0x61c>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
            if (rest != NULL) {
              pbuf_cat(recv_data, rest);
            }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            pcb->refused_data = recv_data;
 80097d8:	4b51      	ldr	r3, [pc, #324]	; (8009920 <tcp_input+0x75c>)
 80097da:	681a      	ldr	r2, [r3, #0]
 80097dc:	69fb      	ldr	r3, [r7, #28]
 80097de:	675a      	str	r2, [r3, #116]	; 0x74
          }
        }

        /* If a FIN segment was received, we call the callback
           function with a NULL buffer to indicate EOF. */
        if (recv_flags & TF_GOT_FIN) {
 80097e0:	4b4c      	ldr	r3, [pc, #304]	; (8009914 <tcp_input+0x750>)
 80097e2:	781b      	ldrb	r3, [r3, #0]
 80097e4:	f003 0320 	and.w	r3, r3, #32
 80097e8:	2b00      	cmp	r3, #0
 80097ea:	d031      	beq.n	8009850 <tcp_input+0x68c>
          if (pcb->refused_data != NULL) {
 80097ec:	69fb      	ldr	r3, [r7, #28]
 80097ee:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80097f0:	2b00      	cmp	r3, #0
 80097f2:	d009      	beq.n	8009808 <tcp_input+0x644>
            /* Delay this if we have refused data. */
            pcb->refused_data->flags |= PBUF_FLAG_TCP_FIN;
 80097f4:	69fb      	ldr	r3, [r7, #28]
 80097f6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80097f8:	7b5a      	ldrb	r2, [r3, #13]
 80097fa:	69fb      	ldr	r3, [r7, #28]
 80097fc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80097fe:	f042 0220 	orr.w	r2, r2, #32
 8009802:	b2d2      	uxtb	r2, r2
 8009804:	735a      	strb	r2, [r3, #13]
 8009806:	e023      	b.n	8009850 <tcp_input+0x68c>
          } else {
            /* correct rcv_wnd as the application won't call tcp_recved()
               for the FIN's seqno */
            if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 8009808:	69fb      	ldr	r3, [r7, #28]
 800980a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800980c:	f241 62d0 	movw	r2, #5840	; 0x16d0
 8009810:	4293      	cmp	r3, r2
 8009812:	d005      	beq.n	8009820 <tcp_input+0x65c>
              pcb->rcv_wnd++;
 8009814:	69fb      	ldr	r3, [r7, #28]
 8009816:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009818:	3301      	adds	r3, #1
 800981a:	b29a      	uxth	r2, r3
 800981c:	69fb      	ldr	r3, [r7, #28]
 800981e:	851a      	strh	r2, [r3, #40]	; 0x28
            }
            TCP_EVENT_CLOSED(pcb, err);
 8009820:	69fb      	ldr	r3, [r7, #28]
 8009822:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8009826:	2b00      	cmp	r3, #0
 8009828:	d00b      	beq.n	8009842 <tcp_input+0x67e>
 800982a:	69fb      	ldr	r3, [r7, #28]
 800982c:	f8d3 4080 	ldr.w	r4, [r3, #128]	; 0x80
 8009830:	69fb      	ldr	r3, [r7, #28]
 8009832:	6918      	ldr	r0, [r3, #16]
 8009834:	2300      	movs	r3, #0
 8009836:	2200      	movs	r2, #0
 8009838:	69f9      	ldr	r1, [r7, #28]
 800983a:	47a0      	blx	r4
 800983c:	4603      	mov	r3, r0
 800983e:	74fb      	strb	r3, [r7, #19]
 8009840:	e001      	b.n	8009846 <tcp_input+0x682>
 8009842:	2300      	movs	r3, #0
 8009844:	74fb      	strb	r3, [r7, #19]
            if (err == ERR_ABRT) {
 8009846:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800984a:	f113 0f0d 	cmn.w	r3, #13
 800984e:	d016      	beq.n	800987e <tcp_input+0x6ba>
              goto aborted;
            }
          }
        }

        tcp_input_pcb = NULL;
 8009850:	4b2f      	ldr	r3, [pc, #188]	; (8009910 <tcp_input+0x74c>)
 8009852:	2200      	movs	r2, #0
 8009854:	601a      	str	r2, [r3, #0]
        if (tcp_input_delayed_close(pcb)) {
 8009856:	69f8      	ldr	r0, [r7, #28]
 8009858:	f000 f878 	bl	800994c <tcp_input_delayed_close>
 800985c:	4603      	mov	r3, r0
 800985e:	2b00      	cmp	r3, #0
 8009860:	d10f      	bne.n	8009882 <tcp_input+0x6be>
          goto aborted;
        }
        /* Try to send something out. */
        tcp_output(pcb);
 8009862:	69f8      	ldr	r0, [r7, #28]
 8009864:	f002 f962 	bl	800bb2c <tcp_output>
 8009868:	e00c      	b.n	8009884 <tcp_input+0x6c0>
        goto aborted;
 800986a:	bf00      	nop
 800986c:	e00a      	b.n	8009884 <tcp_input+0x6c0>
#endif /* TCP_INPUT_DEBUG */
      }
    }
    /* Jump target if pcb has been aborted in a callback (by calling tcp_abort()).
       Below this line, 'pcb' may not be dereferenced! */
aborted:
 800986e:	bf00      	nop
 8009870:	e008      	b.n	8009884 <tcp_input+0x6c0>
              goto aborted;
 8009872:	bf00      	nop
 8009874:	e006      	b.n	8009884 <tcp_input+0x6c0>
          goto aborted;
 8009876:	bf00      	nop
 8009878:	e004      	b.n	8009884 <tcp_input+0x6c0>
            goto aborted;
 800987a:	bf00      	nop
 800987c:	e002      	b.n	8009884 <tcp_input+0x6c0>
              goto aborted;
 800987e:	bf00      	nop
 8009880:	e000      	b.n	8009884 <tcp_input+0x6c0>
          goto aborted;
 8009882:	bf00      	nop
    tcp_input_pcb = NULL;
 8009884:	4b22      	ldr	r3, [pc, #136]	; (8009910 <tcp_input+0x74c>)
 8009886:	2200      	movs	r2, #0
 8009888:	601a      	str	r2, [r3, #0]
    recv_data = NULL;
 800988a:	4b25      	ldr	r3, [pc, #148]	; (8009920 <tcp_input+0x75c>)
 800988c:	2200      	movs	r2, #0
 800988e:	601a      	str	r2, [r3, #0]

    /* give up our reference to inseg.p */
    if (inseg.p != NULL)
 8009890:	4b27      	ldr	r3, [pc, #156]	; (8009930 <tcp_input+0x76c>)
 8009892:	685b      	ldr	r3, [r3, #4]
 8009894:	2b00      	cmp	r3, #0
 8009896:	d037      	beq.n	8009908 <tcp_input+0x744>
    {
      pbuf_free(inseg.p);
 8009898:	4b25      	ldr	r3, [pc, #148]	; (8009930 <tcp_input+0x76c>)
 800989a:	685b      	ldr	r3, [r3, #4]
 800989c:	4618      	mov	r0, r3
 800989e:	f7fe f849 	bl	8007934 <pbuf_free>
      inseg.p = NULL;
 80098a2:	4b23      	ldr	r3, [pc, #140]	; (8009930 <tcp_input+0x76c>)
 80098a4:	2200      	movs	r2, #0
 80098a6:	605a      	str	r2, [r3, #4]
    pbuf_free(p);
  }

  LWIP_ASSERT("tcp_input: tcp_pcbs_sane()", tcp_pcbs_sane());
  PERF_STOP("tcp_input");
  return;
 80098a8:	e02e      	b.n	8009908 <tcp_input+0x744>
    if (!(TCPH_FLAGS(tcphdr) & TCP_RST)) {
 80098aa:	4b22      	ldr	r3, [pc, #136]	; (8009934 <tcp_input+0x770>)
 80098ac:	681b      	ldr	r3, [r3, #0]
 80098ae:	899b      	ldrh	r3, [r3, #12]
 80098b0:	b29b      	uxth	r3, r3
 80098b2:	4618      	mov	r0, r3
 80098b4:	f7fc fe12 	bl	80064dc <lwip_htons>
 80098b8:	4603      	mov	r3, r0
 80098ba:	f003 0304 	and.w	r3, r3, #4
 80098be:	2b00      	cmp	r3, #0
 80098c0:	d115      	bne.n	80098ee <tcp_input+0x72a>
      tcp_rst(ackno, seqno + tcplen, ip_current_dest_addr(),
 80098c2:	4b1d      	ldr	r3, [pc, #116]	; (8009938 <tcp_input+0x774>)
 80098c4:	6818      	ldr	r0, [r3, #0]
 80098c6:	4b1d      	ldr	r3, [pc, #116]	; (800993c <tcp_input+0x778>)
 80098c8:	881b      	ldrh	r3, [r3, #0]
 80098ca:	461a      	mov	r2, r3
 80098cc:	4b1c      	ldr	r3, [pc, #112]	; (8009940 <tcp_input+0x77c>)
 80098ce:	681b      	ldr	r3, [r3, #0]
 80098d0:	18d1      	adds	r1, r2, r3
        ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 80098d2:	4b18      	ldr	r3, [pc, #96]	; (8009934 <tcp_input+0x770>)
 80098d4:	681b      	ldr	r3, [r3, #0]
      tcp_rst(ackno, seqno + tcplen, ip_current_dest_addr(),
 80098d6:	885b      	ldrh	r3, [r3, #2]
 80098d8:	b29b      	uxth	r3, r3
        ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 80098da:	4a16      	ldr	r2, [pc, #88]	; (8009934 <tcp_input+0x770>)
 80098dc:	6812      	ldr	r2, [r2, #0]
      tcp_rst(ackno, seqno + tcplen, ip_current_dest_addr(),
 80098de:	8812      	ldrh	r2, [r2, #0]
 80098e0:	b292      	uxth	r2, r2
 80098e2:	9201      	str	r2, [sp, #4]
 80098e4:	9300      	str	r3, [sp, #0]
 80098e6:	4b17      	ldr	r3, [pc, #92]	; (8009944 <tcp_input+0x780>)
 80098e8:	4a17      	ldr	r2, [pc, #92]	; (8009948 <tcp_input+0x784>)
 80098ea:	f002 fba9 	bl	800c040 <tcp_rst>
    pbuf_free(p);
 80098ee:	6878      	ldr	r0, [r7, #4]
 80098f0:	f7fe f820 	bl	8007934 <pbuf_free>
  return;
 80098f4:	e008      	b.n	8009908 <tcp_input+0x744>
    goto dropped;
 80098f6:	bf00      	nop
 80098f8:	e002      	b.n	8009900 <tcp_input+0x73c>
dropped:
 80098fa:	bf00      	nop
 80098fc:	e000      	b.n	8009900 <tcp_input+0x73c>
      goto dropped;
 80098fe:	bf00      	nop
  TCP_STATS_INC(tcp.drop);
  MIB2_STATS_INC(mib2.tcpinerrs);
  pbuf_free(p);
 8009900:	6878      	ldr	r0, [r7, #4]
 8009902:	f7fe f817 	bl	8007934 <pbuf_free>
 8009906:	e000      	b.n	800990a <tcp_input+0x746>
  return;
 8009908:	bf00      	nop
}
 800990a:	3724      	adds	r7, #36	; 0x24
 800990c:	46bd      	mov	sp, r7
 800990e:	bd90      	pop	{r4, r7, pc}
 8009910:	2400acec 	.word	0x2400acec
 8009914:	2400406d 	.word	0x2400406d
 8009918:	2400acd8 	.word	0x2400acd8
 800991c:	24004068 	.word	0x24004068
 8009920:	24004070 	.word	0x24004070
 8009924:	080120f8 	.word	0x080120f8
 8009928:	08012294 	.word	0x08012294
 800992c:	0801213c 	.word	0x0801213c
 8009930:	24004040 	.word	0x24004040
 8009934:	24004050 	.word	0x24004050
 8009938:	24004064 	.word	0x24004064
 800993c:	2400406a 	.word	0x2400406a
 8009940:	24004060 	.word	0x24004060
 8009944:	240041ac 	.word	0x240041ac
 8009948:	240041b0 	.word	0x240041b0

0800994c <tcp_input_delayed_close>:
 * any more.
 * @returns 1 if the pcb has been closed and deallocated, 0 otherwise
 */
static int
tcp_input_delayed_close(struct tcp_pcb *pcb)
{
 800994c:	b580      	push	{r7, lr}
 800994e:	b082      	sub	sp, #8
 8009950:	af00      	add	r7, sp, #0
 8009952:	6078      	str	r0, [r7, #4]
  if (recv_flags & TF_CLOSED) {
 8009954:	4b14      	ldr	r3, [pc, #80]	; (80099a8 <tcp_input_delayed_close+0x5c>)
 8009956:	781b      	ldrb	r3, [r3, #0]
 8009958:	f003 0310 	and.w	r3, r3, #16
 800995c:	2b00      	cmp	r3, #0
 800995e:	d01d      	beq.n	800999c <tcp_input_delayed_close+0x50>
    /* The connection has been closed and we will deallocate the
        PCB. */
    if (!(pcb->flags & TF_RXCLOSED)) {
 8009960:	687b      	ldr	r3, [r7, #4]
 8009962:	7e9b      	ldrb	r3, [r3, #26]
 8009964:	f003 0310 	and.w	r3, r3, #16
 8009968:	2b00      	cmp	r3, #0
 800996a:	d10d      	bne.n	8009988 <tcp_input_delayed_close+0x3c>
      /* Connection closed although the application has only shut down the
          tx side: call the PCB's err callback and indicate the closure to
          ensure the application doesn't continue using the PCB. */
      TCP_EVENT_ERR(pcb->state, pcb->errf, pcb->callback_arg, ERR_CLSD);
 800996c:	687b      	ldr	r3, [r7, #4]
 800996e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8009972:	2b00      	cmp	r3, #0
 8009974:	d008      	beq.n	8009988 <tcp_input_delayed_close+0x3c>
 8009976:	687b      	ldr	r3, [r7, #4]
 8009978:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800997c:	687a      	ldr	r2, [r7, #4]
 800997e:	6912      	ldr	r2, [r2, #16]
 8009980:	f06f 010e 	mvn.w	r1, #14
 8009984:	4610      	mov	r0, r2
 8009986:	4798      	blx	r3
    }
    tcp_pcb_remove(&tcp_active_pcbs, pcb);
 8009988:	6879      	ldr	r1, [r7, #4]
 800998a:	4808      	ldr	r0, [pc, #32]	; (80099ac <tcp_input_delayed_close+0x60>)
 800998c:	f7ff fb00 	bl	8008f90 <tcp_pcb_remove>
    memp_free(MEMP_TCP_PCB, pcb);
 8009990:	6879      	ldr	r1, [r7, #4]
 8009992:	2001      	movs	r0, #1
 8009994:	f7fd fa24 	bl	8006de0 <memp_free>
    return 1;
 8009998:	2301      	movs	r3, #1
 800999a:	e000      	b.n	800999e <tcp_input_delayed_close+0x52>
  }
  return 0;
 800999c:	2300      	movs	r3, #0
}
 800999e:	4618      	mov	r0, r3
 80099a0:	3708      	adds	r7, #8
 80099a2:	46bd      	mov	sp, r7
 80099a4:	bd80      	pop	{r7, pc}
 80099a6:	bf00      	nop
 80099a8:	2400406d 	.word	0x2400406d
 80099ac:	2400acd8 	.word	0x2400acd8

080099b0 <tcp_listen_input>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static void
tcp_listen_input(struct tcp_pcb_listen *pcb)
{
 80099b0:	b580      	push	{r7, lr}
 80099b2:	b088      	sub	sp, #32
 80099b4:	af02      	add	r7, sp, #8
 80099b6:	6078      	str	r0, [r7, #4]
  struct tcp_pcb *npcb;
  u32_t iss;
  err_t rc;

  if (flags & TCP_RST) {
 80099b8:	4b64      	ldr	r3, [pc, #400]	; (8009b4c <tcp_listen_input+0x19c>)
 80099ba:	781b      	ldrb	r3, [r3, #0]
 80099bc:	f003 0304 	and.w	r3, r3, #4
 80099c0:	2b00      	cmp	r3, #0
 80099c2:	f040 80bc 	bne.w	8009b3e <tcp_listen_input+0x18e>
    return;
  }

  /* In the LISTEN state, we check for incoming SYN segments,
     creates a new PCB, and responds with a SYN|ACK. */
  if (flags & TCP_ACK) {
 80099c6:	4b61      	ldr	r3, [pc, #388]	; (8009b4c <tcp_listen_input+0x19c>)
 80099c8:	781b      	ldrb	r3, [r3, #0]
 80099ca:	f003 0310 	and.w	r3, r3, #16
 80099ce:	2b00      	cmp	r3, #0
 80099d0:	d016      	beq.n	8009a00 <tcp_listen_input+0x50>
    /* For incoming segments with the ACK flag set, respond with a
       RST. */
    LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_listen_input: ACK in LISTEN, sending reset\n"));
    tcp_rst(ackno, seqno + tcplen, ip_current_dest_addr(),
 80099d2:	4b5f      	ldr	r3, [pc, #380]	; (8009b50 <tcp_listen_input+0x1a0>)
 80099d4:	6818      	ldr	r0, [r3, #0]
 80099d6:	4b5f      	ldr	r3, [pc, #380]	; (8009b54 <tcp_listen_input+0x1a4>)
 80099d8:	881b      	ldrh	r3, [r3, #0]
 80099da:	461a      	mov	r2, r3
 80099dc:	4b5e      	ldr	r3, [pc, #376]	; (8009b58 <tcp_listen_input+0x1a8>)
 80099de:	681b      	ldr	r3, [r3, #0]
 80099e0:	18d1      	adds	r1, r2, r3
      ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 80099e2:	4b5e      	ldr	r3, [pc, #376]	; (8009b5c <tcp_listen_input+0x1ac>)
 80099e4:	681b      	ldr	r3, [r3, #0]
    tcp_rst(ackno, seqno + tcplen, ip_current_dest_addr(),
 80099e6:	885b      	ldrh	r3, [r3, #2]
 80099e8:	b29b      	uxth	r3, r3
      ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 80099ea:	4a5c      	ldr	r2, [pc, #368]	; (8009b5c <tcp_listen_input+0x1ac>)
 80099ec:	6812      	ldr	r2, [r2, #0]
    tcp_rst(ackno, seqno + tcplen, ip_current_dest_addr(),
 80099ee:	8812      	ldrh	r2, [r2, #0]
 80099f0:	b292      	uxth	r2, r2
 80099f2:	9201      	str	r2, [sp, #4]
 80099f4:	9300      	str	r3, [sp, #0]
 80099f6:	4b5a      	ldr	r3, [pc, #360]	; (8009b60 <tcp_listen_input+0x1b0>)
 80099f8:	4a5a      	ldr	r2, [pc, #360]	; (8009b64 <tcp_listen_input+0x1b4>)
 80099fa:	f002 fb21 	bl	800c040 <tcp_rst>
      tcp_abandon(npcb, 0);
      return;
    }
    tcp_output(npcb);
  }
  return;
 80099fe:	e0a0      	b.n	8009b42 <tcp_listen_input+0x192>
  } else if (flags & TCP_SYN) {
 8009a00:	4b52      	ldr	r3, [pc, #328]	; (8009b4c <tcp_listen_input+0x19c>)
 8009a02:	781b      	ldrb	r3, [r3, #0]
 8009a04:	f003 0302 	and.w	r3, r3, #2
 8009a08:	2b00      	cmp	r3, #0
 8009a0a:	f000 809a 	beq.w	8009b42 <tcp_listen_input+0x192>
    npcb = tcp_alloc(pcb->prio);
 8009a0e:	687b      	ldr	r3, [r7, #4]
 8009a10:	7d5b      	ldrb	r3, [r3, #21]
 8009a12:	4618      	mov	r0, r3
 8009a14:	f7ff f9f8 	bl	8008e08 <tcp_alloc>
 8009a18:	6178      	str	r0, [r7, #20]
    if (npcb == NULL) {
 8009a1a:	697b      	ldr	r3, [r7, #20]
 8009a1c:	2b00      	cmp	r3, #0
 8009a1e:	d111      	bne.n	8009a44 <tcp_listen_input+0x94>
      TCP_EVENT_ACCEPT(pcb, NULL, pcb->callback_arg, ERR_MEM, err);
 8009a20:	687b      	ldr	r3, [r7, #4]
 8009a22:	699b      	ldr	r3, [r3, #24]
 8009a24:	2b00      	cmp	r3, #0
 8009a26:	d00a      	beq.n	8009a3e <tcp_listen_input+0x8e>
 8009a28:	687b      	ldr	r3, [r7, #4]
 8009a2a:	699b      	ldr	r3, [r3, #24]
 8009a2c:	687a      	ldr	r2, [r7, #4]
 8009a2e:	6910      	ldr	r0, [r2, #16]
 8009a30:	f04f 32ff 	mov.w	r2, #4294967295
 8009a34:	2100      	movs	r1, #0
 8009a36:	4798      	blx	r3
 8009a38:	4603      	mov	r3, r0
 8009a3a:	73bb      	strb	r3, [r7, #14]
      return;
 8009a3c:	e082      	b.n	8009b44 <tcp_listen_input+0x194>
      TCP_EVENT_ACCEPT(pcb, NULL, pcb->callback_arg, ERR_MEM, err);
 8009a3e:	23f0      	movs	r3, #240	; 0xf0
 8009a40:	73bb      	strb	r3, [r7, #14]
      return;
 8009a42:	e07f      	b.n	8009b44 <tcp_listen_input+0x194>
    ip_addr_copy(npcb->local_ip, *ip_current_dest_addr());
 8009a44:	4b48      	ldr	r3, [pc, #288]	; (8009b68 <tcp_listen_input+0x1b8>)
 8009a46:	695a      	ldr	r2, [r3, #20]
 8009a48:	697b      	ldr	r3, [r7, #20]
 8009a4a:	601a      	str	r2, [r3, #0]
    ip_addr_copy(npcb->remote_ip, *ip_current_src_addr());
 8009a4c:	4b46      	ldr	r3, [pc, #280]	; (8009b68 <tcp_listen_input+0x1b8>)
 8009a4e:	691a      	ldr	r2, [r3, #16]
 8009a50:	697b      	ldr	r3, [r7, #20]
 8009a52:	605a      	str	r2, [r3, #4]
    npcb->local_port = pcb->local_port;
 8009a54:	687b      	ldr	r3, [r7, #4]
 8009a56:	8ada      	ldrh	r2, [r3, #22]
 8009a58:	697b      	ldr	r3, [r7, #20]
 8009a5a:	82da      	strh	r2, [r3, #22]
    npcb->remote_port = tcphdr->src;
 8009a5c:	4b3f      	ldr	r3, [pc, #252]	; (8009b5c <tcp_listen_input+0x1ac>)
 8009a5e:	681b      	ldr	r3, [r3, #0]
 8009a60:	881b      	ldrh	r3, [r3, #0]
 8009a62:	b29a      	uxth	r2, r3
 8009a64:	697b      	ldr	r3, [r7, #20]
 8009a66:	831a      	strh	r2, [r3, #24]
    npcb->state = SYN_RCVD;
 8009a68:	697b      	ldr	r3, [r7, #20]
 8009a6a:	2203      	movs	r2, #3
 8009a6c:	751a      	strb	r2, [r3, #20]
    npcb->rcv_nxt = seqno + 1;
 8009a6e:	4b3a      	ldr	r3, [pc, #232]	; (8009b58 <tcp_listen_input+0x1a8>)
 8009a70:	681b      	ldr	r3, [r3, #0]
 8009a72:	1c5a      	adds	r2, r3, #1
 8009a74:	697b      	ldr	r3, [r7, #20]
 8009a76:	625a      	str	r2, [r3, #36]	; 0x24
    npcb->rcv_ann_right_edge = npcb->rcv_nxt;
 8009a78:	697b      	ldr	r3, [r7, #20]
 8009a7a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8009a7c:	697b      	ldr	r3, [r7, #20]
 8009a7e:	62da      	str	r2, [r3, #44]	; 0x2c
    iss = tcp_next_iss(npcb);
 8009a80:	6978      	ldr	r0, [r7, #20]
 8009a82:	f7ff fb01 	bl	8009088 <tcp_next_iss>
 8009a86:	6138      	str	r0, [r7, #16]
    npcb->snd_wl2 = iss;
 8009a88:	697b      	ldr	r3, [r7, #20]
 8009a8a:	693a      	ldr	r2, [r7, #16]
 8009a8c:	655a      	str	r2, [r3, #84]	; 0x54
    npcb->snd_nxt = iss;
 8009a8e:	697b      	ldr	r3, [r7, #20]
 8009a90:	693a      	ldr	r2, [r7, #16]
 8009a92:	64da      	str	r2, [r3, #76]	; 0x4c
    npcb->lastack = iss;
 8009a94:	697b      	ldr	r3, [r7, #20]
 8009a96:	693a      	ldr	r2, [r7, #16]
 8009a98:	645a      	str	r2, [r3, #68]	; 0x44
    npcb->snd_lbb = iss;
 8009a9a:	697b      	ldr	r3, [r7, #20]
 8009a9c:	693a      	ldr	r2, [r7, #16]
 8009a9e:	659a      	str	r2, [r3, #88]	; 0x58
    npcb->snd_wl1 = seqno - 1;/* initialise to seqno-1 to force window update */
 8009aa0:	4b2d      	ldr	r3, [pc, #180]	; (8009b58 <tcp_listen_input+0x1a8>)
 8009aa2:	681b      	ldr	r3, [r3, #0]
 8009aa4:	1e5a      	subs	r2, r3, #1
 8009aa6:	697b      	ldr	r3, [r7, #20]
 8009aa8:	651a      	str	r2, [r3, #80]	; 0x50
    npcb->callback_arg = pcb->callback_arg;
 8009aaa:	687b      	ldr	r3, [r7, #4]
 8009aac:	691a      	ldr	r2, [r3, #16]
 8009aae:	697b      	ldr	r3, [r7, #20]
 8009ab0:	611a      	str	r2, [r3, #16]
    npcb->listener = pcb;
 8009ab2:	697b      	ldr	r3, [r7, #20]
 8009ab4:	687a      	ldr	r2, [r7, #4]
 8009ab6:	679a      	str	r2, [r3, #120]	; 0x78
    npcb->so_options = pcb->so_options & SOF_INHERITED;
 8009ab8:	687b      	ldr	r3, [r7, #4]
 8009aba:	7a1b      	ldrb	r3, [r3, #8]
 8009abc:	f003 030c 	and.w	r3, r3, #12
 8009ac0:	b2da      	uxtb	r2, r3
 8009ac2:	697b      	ldr	r3, [r7, #20]
 8009ac4:	721a      	strb	r2, [r3, #8]
    TCP_REG_ACTIVE(npcb);
 8009ac6:	4b29      	ldr	r3, [pc, #164]	; (8009b6c <tcp_listen_input+0x1bc>)
 8009ac8:	681a      	ldr	r2, [r3, #0]
 8009aca:	697b      	ldr	r3, [r7, #20]
 8009acc:	60da      	str	r2, [r3, #12]
 8009ace:	4a27      	ldr	r2, [pc, #156]	; (8009b6c <tcp_listen_input+0x1bc>)
 8009ad0:	697b      	ldr	r3, [r7, #20]
 8009ad2:	6013      	str	r3, [r2, #0]
 8009ad4:	f002 fd06 	bl	800c4e4 <tcp_timer_needed>
 8009ad8:	4b25      	ldr	r3, [pc, #148]	; (8009b70 <tcp_listen_input+0x1c0>)
 8009ada:	2201      	movs	r2, #1
 8009adc:	701a      	strb	r2, [r3, #0]
    tcp_parseopt(npcb);
 8009ade:	6978      	ldr	r0, [r7, #20]
 8009ae0:	f001 fd14 	bl	800b50c <tcp_parseopt>
    npcb->snd_wnd = tcphdr->wnd;
 8009ae4:	4b1d      	ldr	r3, [pc, #116]	; (8009b5c <tcp_listen_input+0x1ac>)
 8009ae6:	681b      	ldr	r3, [r3, #0]
 8009ae8:	89db      	ldrh	r3, [r3, #14]
 8009aea:	b29a      	uxth	r2, r3
 8009aec:	697b      	ldr	r3, [r7, #20]
 8009aee:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
    npcb->snd_wnd_max = npcb->snd_wnd;
 8009af2:	697b      	ldr	r3, [r7, #20]
 8009af4:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 8009af8:	697b      	ldr	r3, [r7, #20]
 8009afa:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
    npcb->mss = tcp_eff_send_mss(npcb->mss, &npcb->local_ip, &npcb->remote_ip);
 8009afe:	697b      	ldr	r3, [r7, #20]
 8009b00:	8e5a      	ldrh	r2, [r3, #50]	; 0x32
 8009b02:	697b      	ldr	r3, [r7, #20]
 8009b04:	3304      	adds	r3, #4
 8009b06:	4619      	mov	r1, r3
 8009b08:	4610      	mov	r0, r2
 8009b0a:	f7ff fad5 	bl	80090b8 <tcp_eff_send_mss_impl>
 8009b0e:	4603      	mov	r3, r0
 8009b10:	461a      	mov	r2, r3
 8009b12:	697b      	ldr	r3, [r7, #20]
 8009b14:	865a      	strh	r2, [r3, #50]	; 0x32
    rc = tcp_enqueue_flags(npcb, TCP_SYN | TCP_ACK);
 8009b16:	2112      	movs	r1, #18
 8009b18:	6978      	ldr	r0, [r7, #20]
 8009b1a:	f001 feaf 	bl	800b87c <tcp_enqueue_flags>
 8009b1e:	4603      	mov	r3, r0
 8009b20:	73fb      	strb	r3, [r7, #15]
    if (rc != ERR_OK) {
 8009b22:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8009b26:	2b00      	cmp	r3, #0
 8009b28:	d004      	beq.n	8009b34 <tcp_listen_input+0x184>
      tcp_abandon(npcb, 0);
 8009b2a:	2100      	movs	r1, #0
 8009b2c:	6978      	ldr	r0, [r7, #20]
 8009b2e:	f7fe fb4f 	bl	80081d0 <tcp_abandon>
      return;
 8009b32:	e007      	b.n	8009b44 <tcp_listen_input+0x194>
    tcp_output(npcb);
 8009b34:	6978      	ldr	r0, [r7, #20]
 8009b36:	f001 fff9 	bl	800bb2c <tcp_output>
  return;
 8009b3a:	bf00      	nop
 8009b3c:	e001      	b.n	8009b42 <tcp_listen_input+0x192>
    return;
 8009b3e:	bf00      	nop
 8009b40:	e000      	b.n	8009b44 <tcp_listen_input+0x194>
  return;
 8009b42:	bf00      	nop
}
 8009b44:	3718      	adds	r7, #24
 8009b46:	46bd      	mov	sp, r7
 8009b48:	bd80      	pop	{r7, pc}
 8009b4a:	bf00      	nop
 8009b4c:	2400406c 	.word	0x2400406c
 8009b50:	24004064 	.word	0x24004064
 8009b54:	2400406a 	.word	0x2400406a
 8009b58:	24004060 	.word	0x24004060
 8009b5c:	24004050 	.word	0x24004050
 8009b60:	240041ac 	.word	0x240041ac
 8009b64:	240041b0 	.word	0x240041b0
 8009b68:	2400419c 	.word	0x2400419c
 8009b6c:	2400acd8 	.word	0x2400acd8
 8009b70:	2400acd4 	.word	0x2400acd4

08009b74 <tcp_timewait_input>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static void
tcp_timewait_input(struct tcp_pcb *pcb)
{
 8009b74:	b580      	push	{r7, lr}
 8009b76:	b084      	sub	sp, #16
 8009b78:	af02      	add	r7, sp, #8
 8009b7a:	6078      	str	r0, [r7, #4]
  /* RFC 1337: in TIME_WAIT, ignore RST and ACK FINs + any 'acceptable' segments */
  /* RFC 793 3.9 Event Processing - Segment Arrives:
   * - first check sequence number - we skip that one in TIME_WAIT (always
   *   acceptable since we only send ACKs)
   * - second check the RST bit (... return) */
  if (flags & TCP_RST) {
 8009b7c:	4b29      	ldr	r3, [pc, #164]	; (8009c24 <tcp_timewait_input+0xb0>)
 8009b7e:	781b      	ldrb	r3, [r3, #0]
 8009b80:	f003 0304 	and.w	r3, r3, #4
 8009b84:	2b00      	cmp	r3, #0
 8009b86:	d147      	bne.n	8009c18 <tcp_timewait_input+0xa4>
    return;
  }
  /* - fourth, check the SYN bit, */
  if (flags & TCP_SYN) {
 8009b88:	4b26      	ldr	r3, [pc, #152]	; (8009c24 <tcp_timewait_input+0xb0>)
 8009b8a:	781b      	ldrb	r3, [r3, #0]
 8009b8c:	f003 0302 	and.w	r3, r3, #2
 8009b90:	2b00      	cmp	r3, #0
 8009b92:	d027      	beq.n	8009be4 <tcp_timewait_input+0x70>
    /* If an incoming segment is not acceptable, an acknowledgment
       should be sent in reply */
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd)) {
 8009b94:	4b24      	ldr	r3, [pc, #144]	; (8009c28 <tcp_timewait_input+0xb4>)
 8009b96:	681a      	ldr	r2, [r3, #0]
 8009b98:	687b      	ldr	r3, [r7, #4]
 8009b9a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009b9c:	1ad3      	subs	r3, r2, r3
 8009b9e:	2b00      	cmp	r3, #0
 8009ba0:	db2a      	blt.n	8009bf8 <tcp_timewait_input+0x84>
 8009ba2:	4b21      	ldr	r3, [pc, #132]	; (8009c28 <tcp_timewait_input+0xb4>)
 8009ba4:	681a      	ldr	r2, [r3, #0]
 8009ba6:	687b      	ldr	r3, [r7, #4]
 8009ba8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009baa:	6879      	ldr	r1, [r7, #4]
 8009bac:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 8009bae:	440b      	add	r3, r1
 8009bb0:	1ad3      	subs	r3, r2, r3
 8009bb2:	2b00      	cmp	r3, #0
 8009bb4:	dc20      	bgt.n	8009bf8 <tcp_timewait_input+0x84>
      /* If the SYN is in the window it is an error, send a reset */
      tcp_rst(ackno, seqno + tcplen, ip_current_dest_addr(),
 8009bb6:	4b1d      	ldr	r3, [pc, #116]	; (8009c2c <tcp_timewait_input+0xb8>)
 8009bb8:	6818      	ldr	r0, [r3, #0]
 8009bba:	4b1d      	ldr	r3, [pc, #116]	; (8009c30 <tcp_timewait_input+0xbc>)
 8009bbc:	881b      	ldrh	r3, [r3, #0]
 8009bbe:	461a      	mov	r2, r3
 8009bc0:	4b19      	ldr	r3, [pc, #100]	; (8009c28 <tcp_timewait_input+0xb4>)
 8009bc2:	681b      	ldr	r3, [r3, #0]
 8009bc4:	18d1      	adds	r1, r2, r3
        ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8009bc6:	4b1b      	ldr	r3, [pc, #108]	; (8009c34 <tcp_timewait_input+0xc0>)
 8009bc8:	681b      	ldr	r3, [r3, #0]
      tcp_rst(ackno, seqno + tcplen, ip_current_dest_addr(),
 8009bca:	885b      	ldrh	r3, [r3, #2]
 8009bcc:	b29b      	uxth	r3, r3
        ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8009bce:	4a19      	ldr	r2, [pc, #100]	; (8009c34 <tcp_timewait_input+0xc0>)
 8009bd0:	6812      	ldr	r2, [r2, #0]
      tcp_rst(ackno, seqno + tcplen, ip_current_dest_addr(),
 8009bd2:	8812      	ldrh	r2, [r2, #0]
 8009bd4:	b292      	uxth	r2, r2
 8009bd6:	9201      	str	r2, [sp, #4]
 8009bd8:	9300      	str	r3, [sp, #0]
 8009bda:	4b17      	ldr	r3, [pc, #92]	; (8009c38 <tcp_timewait_input+0xc4>)
 8009bdc:	4a17      	ldr	r2, [pc, #92]	; (8009c3c <tcp_timewait_input+0xc8>)
 8009bde:	f002 fa2f 	bl	800c040 <tcp_rst>
      return;
 8009be2:	e01c      	b.n	8009c1e <tcp_timewait_input+0xaa>
    }
  } else if (flags & TCP_FIN) {
 8009be4:	4b0f      	ldr	r3, [pc, #60]	; (8009c24 <tcp_timewait_input+0xb0>)
 8009be6:	781b      	ldrb	r3, [r3, #0]
 8009be8:	f003 0301 	and.w	r3, r3, #1
 8009bec:	2b00      	cmp	r3, #0
 8009bee:	d003      	beq.n	8009bf8 <tcp_timewait_input+0x84>
    /* - eighth, check the FIN bit: Remain in the TIME-WAIT state.
         Restart the 2 MSL time-wait timeout.*/
    pcb->tmr = tcp_ticks;
 8009bf0:	4b13      	ldr	r3, [pc, #76]	; (8009c40 <tcp_timewait_input+0xcc>)
 8009bf2:	681a      	ldr	r2, [r3, #0]
 8009bf4:	687b      	ldr	r3, [r7, #4]
 8009bf6:	621a      	str	r2, [r3, #32]
  }

  if ((tcplen > 0)) {
 8009bf8:	4b0d      	ldr	r3, [pc, #52]	; (8009c30 <tcp_timewait_input+0xbc>)
 8009bfa:	881b      	ldrh	r3, [r3, #0]
 8009bfc:	2b00      	cmp	r3, #0
 8009bfe:	d00d      	beq.n	8009c1c <tcp_timewait_input+0xa8>
    /* Acknowledge data, FIN or out-of-window SYN */
    pcb->flags |= TF_ACK_NOW;
 8009c00:	687b      	ldr	r3, [r7, #4]
 8009c02:	7e9b      	ldrb	r3, [r3, #26]
 8009c04:	f043 0302 	orr.w	r3, r3, #2
 8009c08:	b2da      	uxtb	r2, r3
 8009c0a:	687b      	ldr	r3, [r7, #4]
 8009c0c:	769a      	strb	r2, [r3, #26]
    tcp_output(pcb);
 8009c0e:	6878      	ldr	r0, [r7, #4]
 8009c10:	f001 ff8c 	bl	800bb2c <tcp_output>
  }
  return;
 8009c14:	bf00      	nop
 8009c16:	e001      	b.n	8009c1c <tcp_timewait_input+0xa8>
    return;
 8009c18:	bf00      	nop
 8009c1a:	e000      	b.n	8009c1e <tcp_timewait_input+0xaa>
  return;
 8009c1c:	bf00      	nop
}
 8009c1e:	3708      	adds	r7, #8
 8009c20:	46bd      	mov	sp, r7
 8009c22:	bd80      	pop	{r7, pc}
 8009c24:	2400406c 	.word	0x2400406c
 8009c28:	24004060 	.word	0x24004060
 8009c2c:	24004064 	.word	0x24004064
 8009c30:	2400406a 	.word	0x2400406a
 8009c34:	24004050 	.word	0x24004050
 8009c38:	240041ac 	.word	0x240041ac
 8009c3c:	240041b0 	.word	0x240041b0
 8009c40:	2400acdc 	.word	0x2400acdc

08009c44 <tcp_process>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static err_t
tcp_process(struct tcp_pcb *pcb)
{
 8009c44:	b580      	push	{r7, lr}
 8009c46:	b08a      	sub	sp, #40	; 0x28
 8009c48:	af02      	add	r7, sp, #8
 8009c4a:	6078      	str	r0, [r7, #4]
  struct tcp_seg *rseg;
  u8_t acceptable = 0;
 8009c4c:	2300      	movs	r3, #0
 8009c4e:	76fb      	strb	r3, [r7, #27]
  err_t err;

  err = ERR_OK;
 8009c50:	2300      	movs	r3, #0
 8009c52:	76bb      	strb	r3, [r7, #26]

  /* Process incoming RST segments. */
  if (flags & TCP_RST) {
 8009c54:	4ba4      	ldr	r3, [pc, #656]	; (8009ee8 <tcp_process+0x2a4>)
 8009c56:	781b      	ldrb	r3, [r3, #0]
 8009c58:	f003 0304 	and.w	r3, r3, #4
 8009c5c:	2b00      	cmp	r3, #0
 8009c5e:	d04e      	beq.n	8009cfe <tcp_process+0xba>
    /* First, determine if the reset is acceptable. */
    if (pcb->state == SYN_SENT) {
 8009c60:	687b      	ldr	r3, [r7, #4]
 8009c62:	7d1b      	ldrb	r3, [r3, #20]
 8009c64:	2b02      	cmp	r3, #2
 8009c66:	d108      	bne.n	8009c7a <tcp_process+0x36>
      /* "In the SYN-SENT state (a RST received in response to an initial SYN),
          the RST is acceptable if the ACK field acknowledges the SYN." */
      if (ackno == pcb->snd_nxt) {
 8009c68:	687b      	ldr	r3, [r7, #4]
 8009c6a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8009c6c:	4b9f      	ldr	r3, [pc, #636]	; (8009eec <tcp_process+0x2a8>)
 8009c6e:	681b      	ldr	r3, [r3, #0]
 8009c70:	429a      	cmp	r2, r3
 8009c72:	d123      	bne.n	8009cbc <tcp_process+0x78>
        acceptable = 1;
 8009c74:	2301      	movs	r3, #1
 8009c76:	76fb      	strb	r3, [r7, #27]
 8009c78:	e020      	b.n	8009cbc <tcp_process+0x78>
      }
    } else {
      /* "In all states except SYN-SENT, all reset (RST) segments are validated
          by checking their SEQ-fields." */
      if (seqno == pcb->rcv_nxt) {
 8009c7a:	687b      	ldr	r3, [r7, #4]
 8009c7c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8009c7e:	4b9c      	ldr	r3, [pc, #624]	; (8009ef0 <tcp_process+0x2ac>)
 8009c80:	681b      	ldr	r3, [r3, #0]
 8009c82:	429a      	cmp	r2, r3
 8009c84:	d102      	bne.n	8009c8c <tcp_process+0x48>
        acceptable = 1;
 8009c86:	2301      	movs	r3, #1
 8009c88:	76fb      	strb	r3, [r7, #27]
 8009c8a:	e017      	b.n	8009cbc <tcp_process+0x78>
      } else  if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 8009c8c:	4b98      	ldr	r3, [pc, #608]	; (8009ef0 <tcp_process+0x2ac>)
 8009c8e:	681a      	ldr	r2, [r3, #0]
 8009c90:	687b      	ldr	r3, [r7, #4]
 8009c92:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009c94:	1ad3      	subs	r3, r2, r3
 8009c96:	2b00      	cmp	r3, #0
 8009c98:	db10      	blt.n	8009cbc <tcp_process+0x78>
 8009c9a:	4b95      	ldr	r3, [pc, #596]	; (8009ef0 <tcp_process+0x2ac>)
 8009c9c:	681a      	ldr	r2, [r3, #0]
 8009c9e:	687b      	ldr	r3, [r7, #4]
 8009ca0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009ca2:	6879      	ldr	r1, [r7, #4]
 8009ca4:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 8009ca6:	440b      	add	r3, r1
 8009ca8:	1ad3      	subs	r3, r2, r3
 8009caa:	2b00      	cmp	r3, #0
 8009cac:	dc06      	bgt.n	8009cbc <tcp_process+0x78>
                                  pcb->rcv_nxt + pcb->rcv_wnd)) {
        /* If the sequence number is inside the window, we only send an ACK
           and wait for a re-send with matching sequence number.
           This violates RFC 793, but is required to protection against
           CVE-2004-0230 (RST spoofing attack). */
        tcp_ack_now(pcb);
 8009cae:	687b      	ldr	r3, [r7, #4]
 8009cb0:	7e9b      	ldrb	r3, [r3, #26]
 8009cb2:	f043 0302 	orr.w	r3, r3, #2
 8009cb6:	b2da      	uxtb	r2, r3
 8009cb8:	687b      	ldr	r3, [r7, #4]
 8009cba:	769a      	strb	r2, [r3, #26]
      }
    }

    if (acceptable) {
 8009cbc:	7efb      	ldrb	r3, [r7, #27]
 8009cbe:	2b00      	cmp	r3, #0
 8009cc0:	d01b      	beq.n	8009cfa <tcp_process+0xb6>
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_process: Connection RESET\n"));
      LWIP_ASSERT("tcp_input: pcb->state != CLOSED", pcb->state != CLOSED);
 8009cc2:	687b      	ldr	r3, [r7, #4]
 8009cc4:	7d1b      	ldrb	r3, [r3, #20]
 8009cc6:	2b00      	cmp	r3, #0
 8009cc8:	d106      	bne.n	8009cd8 <tcp_process+0x94>
 8009cca:	4b8a      	ldr	r3, [pc, #552]	; (8009ef4 <tcp_process+0x2b0>)
 8009ccc:	f240 22e7 	movw	r2, #743	; 0x2e7
 8009cd0:	4989      	ldr	r1, [pc, #548]	; (8009ef8 <tcp_process+0x2b4>)
 8009cd2:	488a      	ldr	r0, [pc, #552]	; (8009efc <tcp_process+0x2b8>)
 8009cd4:	f006 fc2c 	bl	8010530 <iprintf>
      recv_flags |= TF_RESET;
 8009cd8:	4b89      	ldr	r3, [pc, #548]	; (8009f00 <tcp_process+0x2bc>)
 8009cda:	781b      	ldrb	r3, [r3, #0]
 8009cdc:	f043 0308 	orr.w	r3, r3, #8
 8009ce0:	b2da      	uxtb	r2, r3
 8009ce2:	4b87      	ldr	r3, [pc, #540]	; (8009f00 <tcp_process+0x2bc>)
 8009ce4:	701a      	strb	r2, [r3, #0]
      pcb->flags &= ~TF_ACK_DELAY;
 8009ce6:	687b      	ldr	r3, [r7, #4]
 8009ce8:	7e9b      	ldrb	r3, [r3, #26]
 8009cea:	f023 0301 	bic.w	r3, r3, #1
 8009cee:	b2da      	uxtb	r2, r3
 8009cf0:	687b      	ldr	r3, [r7, #4]
 8009cf2:	769a      	strb	r2, [r3, #26]
      return ERR_RST;
 8009cf4:	f06f 030d 	mvn.w	r3, #13
 8009cf8:	e34d      	b.n	800a396 <tcp_process+0x752>
    } else {
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_process: unacceptable reset seqno %"U32_F" rcv_nxt %"U32_F"\n",
       seqno, pcb->rcv_nxt));
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_process: unacceptable reset seqno %"U32_F" rcv_nxt %"U32_F"\n",
       seqno, pcb->rcv_nxt));
      return ERR_OK;
 8009cfa:	2300      	movs	r3, #0
 8009cfc:	e34b      	b.n	800a396 <tcp_process+0x752>
    }
  }

  if ((flags & TCP_SYN) && (pcb->state != SYN_SENT && pcb->state != SYN_RCVD)) {
 8009cfe:	4b7a      	ldr	r3, [pc, #488]	; (8009ee8 <tcp_process+0x2a4>)
 8009d00:	781b      	ldrb	r3, [r3, #0]
 8009d02:	f003 0302 	and.w	r3, r3, #2
 8009d06:	2b00      	cmp	r3, #0
 8009d08:	d010      	beq.n	8009d2c <tcp_process+0xe8>
 8009d0a:	687b      	ldr	r3, [r7, #4]
 8009d0c:	7d1b      	ldrb	r3, [r3, #20]
 8009d0e:	2b02      	cmp	r3, #2
 8009d10:	d00c      	beq.n	8009d2c <tcp_process+0xe8>
 8009d12:	687b      	ldr	r3, [r7, #4]
 8009d14:	7d1b      	ldrb	r3, [r3, #20]
 8009d16:	2b03      	cmp	r3, #3
 8009d18:	d008      	beq.n	8009d2c <tcp_process+0xe8>
    /* Cope with new connection attempt after remote end crashed */
    tcp_ack_now(pcb);
 8009d1a:	687b      	ldr	r3, [r7, #4]
 8009d1c:	7e9b      	ldrb	r3, [r3, #26]
 8009d1e:	f043 0302 	orr.w	r3, r3, #2
 8009d22:	b2da      	uxtb	r2, r3
 8009d24:	687b      	ldr	r3, [r7, #4]
 8009d26:	769a      	strb	r2, [r3, #26]
    return ERR_OK;
 8009d28:	2300      	movs	r3, #0
 8009d2a:	e334      	b.n	800a396 <tcp_process+0x752>
  }

  if ((pcb->flags & TF_RXCLOSED) == 0) {
 8009d2c:	687b      	ldr	r3, [r7, #4]
 8009d2e:	7e9b      	ldrb	r3, [r3, #26]
 8009d30:	f003 0310 	and.w	r3, r3, #16
 8009d34:	2b00      	cmp	r3, #0
 8009d36:	d103      	bne.n	8009d40 <tcp_process+0xfc>
    /* Update the PCB (in)activity timer unless rx is closed (see tcp_shutdown) */
    pcb->tmr = tcp_ticks;
 8009d38:	4b72      	ldr	r3, [pc, #456]	; (8009f04 <tcp_process+0x2c0>)
 8009d3a:	681a      	ldr	r2, [r3, #0]
 8009d3c:	687b      	ldr	r3, [r7, #4]
 8009d3e:	621a      	str	r2, [r3, #32]
  }
  pcb->keep_cnt_sent = 0;
 8009d40:	687b      	ldr	r3, [r7, #4]
 8009d42:	2200      	movs	r2, #0
 8009d44:	f883 2096 	strb.w	r2, [r3, #150]	; 0x96

  tcp_parseopt(pcb);
 8009d48:	6878      	ldr	r0, [r7, #4]
 8009d4a:	f001 fbdf 	bl	800b50c <tcp_parseopt>

  /* Do different things depending on the TCP state. */
  switch (pcb->state) {
 8009d4e:	687b      	ldr	r3, [r7, #4]
 8009d50:	7d1b      	ldrb	r3, [r3, #20]
 8009d52:	3b02      	subs	r3, #2
 8009d54:	2b07      	cmp	r3, #7
 8009d56:	f200 830e 	bhi.w	800a376 <tcp_process+0x732>
 8009d5a:	a201      	add	r2, pc, #4	; (adr r2, 8009d60 <tcp_process+0x11c>)
 8009d5c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009d60:	08009d81 	.word	0x08009d81
 8009d64:	08009f79 	.word	0x08009f79
 8009d68:	0800a0d1 	.word	0x0800a0d1
 8009d6c:	0800a0fb 	.word	0x0800a0fb
 8009d70:	0800a225 	.word	0x0800a225
 8009d74:	0800a0d1 	.word	0x0800a0d1
 8009d78:	0800a2b1 	.word	0x0800a2b1
 8009d7c:	0800a341 	.word	0x0800a341
  case SYN_SENT:
    LWIP_DEBUGF(TCP_INPUT_DEBUG, ("SYN-SENT: ackno %"U32_F" pcb->snd_nxt %"U32_F" unacked %"U32_F"\n", ackno,
     pcb->snd_nxt, lwip_ntohl(pcb->unacked->tcphdr->seqno)));
    /* received SYN ACK with expected sequence number? */
    if ((flags & TCP_ACK) && (flags & TCP_SYN)
 8009d80:	4b59      	ldr	r3, [pc, #356]	; (8009ee8 <tcp_process+0x2a4>)
 8009d82:	781b      	ldrb	r3, [r3, #0]
 8009d84:	f003 0310 	and.w	r3, r3, #16
 8009d88:	2b00      	cmp	r3, #0
 8009d8a:	f000 80cb 	beq.w	8009f24 <tcp_process+0x2e0>
 8009d8e:	4b56      	ldr	r3, [pc, #344]	; (8009ee8 <tcp_process+0x2a4>)
 8009d90:	781b      	ldrb	r3, [r3, #0]
 8009d92:	f003 0302 	and.w	r3, r3, #2
 8009d96:	2b00      	cmp	r3, #0
 8009d98:	f000 80c4 	beq.w	8009f24 <tcp_process+0x2e0>
        && (ackno == pcb->lastack + 1)) {
 8009d9c:	687b      	ldr	r3, [r7, #4]
 8009d9e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009da0:	1c5a      	adds	r2, r3, #1
 8009da2:	4b52      	ldr	r3, [pc, #328]	; (8009eec <tcp_process+0x2a8>)
 8009da4:	681b      	ldr	r3, [r3, #0]
 8009da6:	429a      	cmp	r2, r3
 8009da8:	f040 80bc 	bne.w	8009f24 <tcp_process+0x2e0>
      pcb->rcv_nxt = seqno + 1;
 8009dac:	4b50      	ldr	r3, [pc, #320]	; (8009ef0 <tcp_process+0x2ac>)
 8009dae:	681b      	ldr	r3, [r3, #0]
 8009db0:	1c5a      	adds	r2, r3, #1
 8009db2:	687b      	ldr	r3, [r7, #4]
 8009db4:	625a      	str	r2, [r3, #36]	; 0x24
      pcb->rcv_ann_right_edge = pcb->rcv_nxt;
 8009db6:	687b      	ldr	r3, [r7, #4]
 8009db8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8009dba:	687b      	ldr	r3, [r7, #4]
 8009dbc:	62da      	str	r2, [r3, #44]	; 0x2c
      pcb->lastack = ackno;
 8009dbe:	4b4b      	ldr	r3, [pc, #300]	; (8009eec <tcp_process+0x2a8>)
 8009dc0:	681a      	ldr	r2, [r3, #0]
 8009dc2:	687b      	ldr	r3, [r7, #4]
 8009dc4:	645a      	str	r2, [r3, #68]	; 0x44
      pcb->snd_wnd = tcphdr->wnd;
 8009dc6:	4b50      	ldr	r3, [pc, #320]	; (8009f08 <tcp_process+0x2c4>)
 8009dc8:	681b      	ldr	r3, [r3, #0]
 8009dca:	89db      	ldrh	r3, [r3, #14]
 8009dcc:	b29a      	uxth	r2, r3
 8009dce:	687b      	ldr	r3, [r7, #4]
 8009dd0:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
      pcb->snd_wnd_max = pcb->snd_wnd;
 8009dd4:	687b      	ldr	r3, [r7, #4]
 8009dd6:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 8009dda:	687b      	ldr	r3, [r7, #4]
 8009ddc:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
      pcb->snd_wl1 = seqno - 1; /* initialise to seqno - 1 to force window update */
 8009de0:	4b43      	ldr	r3, [pc, #268]	; (8009ef0 <tcp_process+0x2ac>)
 8009de2:	681b      	ldr	r3, [r3, #0]
 8009de4:	1e5a      	subs	r2, r3, #1
 8009de6:	687b      	ldr	r3, [r7, #4]
 8009de8:	651a      	str	r2, [r3, #80]	; 0x50
      pcb->state = ESTABLISHED;
 8009dea:	687b      	ldr	r3, [r7, #4]
 8009dec:	2204      	movs	r2, #4
 8009dee:	751a      	strb	r2, [r3, #20]

#if TCP_CALCULATE_EFF_SEND_MSS
      pcb->mss = tcp_eff_send_mss(pcb->mss, &pcb->local_ip, &pcb->remote_ip);
 8009df0:	687b      	ldr	r3, [r7, #4]
 8009df2:	8e5a      	ldrh	r2, [r3, #50]	; 0x32
 8009df4:	687b      	ldr	r3, [r7, #4]
 8009df6:	3304      	adds	r3, #4
 8009df8:	4619      	mov	r1, r3
 8009dfa:	4610      	mov	r0, r2
 8009dfc:	f7ff f95c 	bl	80090b8 <tcp_eff_send_mss_impl>
 8009e00:	4603      	mov	r3, r0
 8009e02:	461a      	mov	r2, r3
 8009e04:	687b      	ldr	r3, [r7, #4]
 8009e06:	865a      	strh	r2, [r3, #50]	; 0x32
#endif /* TCP_CALCULATE_EFF_SEND_MSS */

      pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 8009e08:	687b      	ldr	r3, [r7, #4]
 8009e0a:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8009e0c:	005b      	lsls	r3, r3, #1
 8009e0e:	f241 121c 	movw	r2, #4380	; 0x111c
 8009e12:	429a      	cmp	r2, r3
 8009e14:	bf38      	it	cc
 8009e16:	461a      	movcc	r2, r3
 8009e18:	687b      	ldr	r3, [r7, #4]
 8009e1a:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8009e1c:	009b      	lsls	r3, r3, #2
 8009e1e:	4293      	cmp	r3, r2
 8009e20:	bf28      	it	cs
 8009e22:	4613      	movcs	r3, r2
 8009e24:	b29a      	uxth	r2, r3
 8009e26:	687b      	ldr	r3, [r7, #4]
 8009e28:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
      LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_process (SENT): cwnd %"TCPWNDSIZE_F
                                   " ssthresh %"TCPWNDSIZE_F"\n",
                                   pcb->cwnd, pcb->ssthresh));
      LWIP_ASSERT("pcb->snd_queuelen > 0", (pcb->snd_queuelen > 0));
 8009e2c:	687b      	ldr	r3, [r7, #4]
 8009e2e:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8009e32:	2b00      	cmp	r3, #0
 8009e34:	d106      	bne.n	8009e44 <tcp_process+0x200>
 8009e36:	4b2f      	ldr	r3, [pc, #188]	; (8009ef4 <tcp_process+0x2b0>)
 8009e38:	f240 321a 	movw	r2, #794	; 0x31a
 8009e3c:	4933      	ldr	r1, [pc, #204]	; (8009f0c <tcp_process+0x2c8>)
 8009e3e:	482f      	ldr	r0, [pc, #188]	; (8009efc <tcp_process+0x2b8>)
 8009e40:	f006 fb76 	bl	8010530 <iprintf>
      --pcb->snd_queuelen;
 8009e44:	687b      	ldr	r3, [r7, #4]
 8009e46:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8009e4a:	3b01      	subs	r3, #1
 8009e4c:	b29a      	uxth	r2, r3
 8009e4e:	687b      	ldr	r3, [r7, #4]
 8009e50:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
      LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_process: SYN-SENT --queuelen %"TCPWNDSIZE_F"\n", (tcpwnd_size_t)pcb->snd_queuelen));
      rseg = pcb->unacked;
 8009e54:	687b      	ldr	r3, [r7, #4]
 8009e56:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009e58:	61fb      	str	r3, [r7, #28]
      if (rseg == NULL) {
 8009e5a:	69fb      	ldr	r3, [r7, #28]
 8009e5c:	2b00      	cmp	r3, #0
 8009e5e:	d111      	bne.n	8009e84 <tcp_process+0x240>
        /* might happen if tcp_output fails in tcp_rexmit_rto()
           in which case the segment is on the unsent list */
        rseg = pcb->unsent;
 8009e60:	687b      	ldr	r3, [r7, #4]
 8009e62:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8009e64:	61fb      	str	r3, [r7, #28]
        LWIP_ASSERT("no segment to free", rseg != NULL);
 8009e66:	69fb      	ldr	r3, [r7, #28]
 8009e68:	2b00      	cmp	r3, #0
 8009e6a:	d106      	bne.n	8009e7a <tcp_process+0x236>
 8009e6c:	4b21      	ldr	r3, [pc, #132]	; (8009ef4 <tcp_process+0x2b0>)
 8009e6e:	f240 3222 	movw	r2, #802	; 0x322
 8009e72:	4927      	ldr	r1, [pc, #156]	; (8009f10 <tcp_process+0x2cc>)
 8009e74:	4821      	ldr	r0, [pc, #132]	; (8009efc <tcp_process+0x2b8>)
 8009e76:	f006 fb5b 	bl	8010530 <iprintf>
        pcb->unsent = rseg->next;
 8009e7a:	69fb      	ldr	r3, [r7, #28]
 8009e7c:	681a      	ldr	r2, [r3, #0]
 8009e7e:	687b      	ldr	r3, [r7, #4]
 8009e80:	669a      	str	r2, [r3, #104]	; 0x68
 8009e82:	e003      	b.n	8009e8c <tcp_process+0x248>
      } else {
        pcb->unacked = rseg->next;
 8009e84:	69fb      	ldr	r3, [r7, #28]
 8009e86:	681a      	ldr	r2, [r3, #0]
 8009e88:	687b      	ldr	r3, [r7, #4]
 8009e8a:	66da      	str	r2, [r3, #108]	; 0x6c
      }
      tcp_seg_free(rseg);
 8009e8c:	69f8      	ldr	r0, [r7, #28]
 8009e8e:	f7fe fea9 	bl	8008be4 <tcp_seg_free>

      /* If there's nothing left to acknowledge, stop the retransmit
         timer, otherwise reset it to start again */
      if (pcb->unacked == NULL) {
 8009e92:	687b      	ldr	r3, [r7, #4]
 8009e94:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009e96:	2b00      	cmp	r3, #0
 8009e98:	d104      	bne.n	8009ea4 <tcp_process+0x260>
        pcb->rtime = -1;
 8009e9a:	687b      	ldr	r3, [r7, #4]
 8009e9c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8009ea0:	861a      	strh	r2, [r3, #48]	; 0x30
 8009ea2:	e006      	b.n	8009eb2 <tcp_process+0x26e>
      } else {
        pcb->rtime = 0;
 8009ea4:	687b      	ldr	r3, [r7, #4]
 8009ea6:	2200      	movs	r2, #0
 8009ea8:	861a      	strh	r2, [r3, #48]	; 0x30
        pcb->nrtx = 0;
 8009eaa:	687b      	ldr	r3, [r7, #4]
 8009eac:	2200      	movs	r2, #0
 8009eae:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      }

      /* Call the user specified function to call when successfully
       * connected. */
      TCP_EVENT_CONNECTED(pcb, ERR_OK, err);
 8009eb2:	687b      	ldr	r3, [r7, #4]
 8009eb4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8009eb8:	2b00      	cmp	r3, #0
 8009eba:	d00a      	beq.n	8009ed2 <tcp_process+0x28e>
 8009ebc:	687b      	ldr	r3, [r7, #4]
 8009ebe:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8009ec2:	687a      	ldr	r2, [r7, #4]
 8009ec4:	6910      	ldr	r0, [r2, #16]
 8009ec6:	2200      	movs	r2, #0
 8009ec8:	6879      	ldr	r1, [r7, #4]
 8009eca:	4798      	blx	r3
 8009ecc:	4603      	mov	r3, r0
 8009ece:	76bb      	strb	r3, [r7, #26]
 8009ed0:	e001      	b.n	8009ed6 <tcp_process+0x292>
 8009ed2:	2300      	movs	r3, #0
 8009ed4:	76bb      	strb	r3, [r7, #26]
      if (err == ERR_ABRT) {
 8009ed6:	f997 301a 	ldrsb.w	r3, [r7, #26]
 8009eda:	f113 0f0d 	cmn.w	r3, #13
 8009ede:	d119      	bne.n	8009f14 <tcp_process+0x2d0>
        return ERR_ABRT;
 8009ee0:	f06f 030c 	mvn.w	r3, #12
 8009ee4:	e257      	b.n	800a396 <tcp_process+0x752>
 8009ee6:	bf00      	nop
 8009ee8:	2400406c 	.word	0x2400406c
 8009eec:	24004064 	.word	0x24004064
 8009ef0:	24004060 	.word	0x24004060
 8009ef4:	080120f8 	.word	0x080120f8
 8009ef8:	080122b0 	.word	0x080122b0
 8009efc:	0801213c 	.word	0x0801213c
 8009f00:	2400406d 	.word	0x2400406d
 8009f04:	2400acdc 	.word	0x2400acdc
 8009f08:	24004050 	.word	0x24004050
 8009f0c:	080122d0 	.word	0x080122d0
 8009f10:	080122e8 	.word	0x080122e8
      }
      tcp_ack_now(pcb);
 8009f14:	687b      	ldr	r3, [r7, #4]
 8009f16:	7e9b      	ldrb	r3, [r3, #26]
 8009f18:	f043 0302 	orr.w	r3, r3, #2
 8009f1c:	b2da      	uxtb	r2, r3
 8009f1e:	687b      	ldr	r3, [r7, #4]
 8009f20:	769a      	strb	r2, [r3, #26]
      if (pcb->nrtx < TCP_SYNMAXRTX) {
        pcb->rtime = 0;
        tcp_rexmit_rto(pcb);
      }
    }
    break;
 8009f22:	e22a      	b.n	800a37a <tcp_process+0x736>
    else if (flags & TCP_ACK) {
 8009f24:	4b9f      	ldr	r3, [pc, #636]	; (800a1a4 <tcp_process+0x560>)
 8009f26:	781b      	ldrb	r3, [r3, #0]
 8009f28:	f003 0310 	and.w	r3, r3, #16
 8009f2c:	2b00      	cmp	r3, #0
 8009f2e:	f000 8224 	beq.w	800a37a <tcp_process+0x736>
      tcp_rst(ackno, seqno + tcplen, ip_current_dest_addr(),
 8009f32:	4b9d      	ldr	r3, [pc, #628]	; (800a1a8 <tcp_process+0x564>)
 8009f34:	6818      	ldr	r0, [r3, #0]
 8009f36:	4b9d      	ldr	r3, [pc, #628]	; (800a1ac <tcp_process+0x568>)
 8009f38:	881b      	ldrh	r3, [r3, #0]
 8009f3a:	461a      	mov	r2, r3
 8009f3c:	4b9c      	ldr	r3, [pc, #624]	; (800a1b0 <tcp_process+0x56c>)
 8009f3e:	681b      	ldr	r3, [r3, #0]
 8009f40:	18d1      	adds	r1, r2, r3
        ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8009f42:	4b9c      	ldr	r3, [pc, #624]	; (800a1b4 <tcp_process+0x570>)
 8009f44:	681b      	ldr	r3, [r3, #0]
      tcp_rst(ackno, seqno + tcplen, ip_current_dest_addr(),
 8009f46:	885b      	ldrh	r3, [r3, #2]
 8009f48:	b29b      	uxth	r3, r3
        ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8009f4a:	4a9a      	ldr	r2, [pc, #616]	; (800a1b4 <tcp_process+0x570>)
 8009f4c:	6812      	ldr	r2, [r2, #0]
      tcp_rst(ackno, seqno + tcplen, ip_current_dest_addr(),
 8009f4e:	8812      	ldrh	r2, [r2, #0]
 8009f50:	b292      	uxth	r2, r2
 8009f52:	9201      	str	r2, [sp, #4]
 8009f54:	9300      	str	r3, [sp, #0]
 8009f56:	4b98      	ldr	r3, [pc, #608]	; (800a1b8 <tcp_process+0x574>)
 8009f58:	4a98      	ldr	r2, [pc, #608]	; (800a1bc <tcp_process+0x578>)
 8009f5a:	f002 f871 	bl	800c040 <tcp_rst>
      if (pcb->nrtx < TCP_SYNMAXRTX) {
 8009f5e:	687b      	ldr	r3, [r7, #4]
 8009f60:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8009f64:	2b05      	cmp	r3, #5
 8009f66:	f200 8208 	bhi.w	800a37a <tcp_process+0x736>
        pcb->rtime = 0;
 8009f6a:	687b      	ldr	r3, [r7, #4]
 8009f6c:	2200      	movs	r2, #0
 8009f6e:	861a      	strh	r2, [r3, #48]	; 0x30
        tcp_rexmit_rto(pcb);
 8009f70:	6878      	ldr	r0, [r7, #4]
 8009f72:	f002 f8db 	bl	800c12c <tcp_rexmit_rto>
    break;
 8009f76:	e200      	b.n	800a37a <tcp_process+0x736>
  case SYN_RCVD:
    if (flags & TCP_ACK) {
 8009f78:	4b8a      	ldr	r3, [pc, #552]	; (800a1a4 <tcp_process+0x560>)
 8009f7a:	781b      	ldrb	r3, [r3, #0]
 8009f7c:	f003 0310 	and.w	r3, r3, #16
 8009f80:	2b00      	cmp	r3, #0
 8009f82:	f000 8091 	beq.w	800a0a8 <tcp_process+0x464>
      /* expected ACK number? */
      if (TCP_SEQ_BETWEEN(ackno, pcb->lastack+1, pcb->snd_nxt)) {
 8009f86:	4b88      	ldr	r3, [pc, #544]	; (800a1a8 <tcp_process+0x564>)
 8009f88:	681a      	ldr	r2, [r3, #0]
 8009f8a:	687b      	ldr	r3, [r7, #4]
 8009f8c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009f8e:	1ad3      	subs	r3, r2, r3
 8009f90:	3b01      	subs	r3, #1
 8009f92:	2b00      	cmp	r3, #0
 8009f94:	db71      	blt.n	800a07a <tcp_process+0x436>
 8009f96:	4b84      	ldr	r3, [pc, #528]	; (800a1a8 <tcp_process+0x564>)
 8009f98:	681a      	ldr	r2, [r3, #0]
 8009f9a:	687b      	ldr	r3, [r7, #4]
 8009f9c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009f9e:	1ad3      	subs	r3, r2, r3
 8009fa0:	2b00      	cmp	r3, #0
 8009fa2:	dc6a      	bgt.n	800a07a <tcp_process+0x436>
        pcb->state = ESTABLISHED;
 8009fa4:	687b      	ldr	r3, [r7, #4]
 8009fa6:	2204      	movs	r2, #4
 8009fa8:	751a      	strb	r2, [r3, #20]
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection established %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
#if LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG
#if LWIP_CALLBACK_API
        LWIP_ASSERT("pcb->listener->accept != NULL",
 8009faa:	687b      	ldr	r3, [r7, #4]
 8009fac:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8009fae:	2b00      	cmp	r3, #0
 8009fb0:	d00b      	beq.n	8009fca <tcp_process+0x386>
 8009fb2:	687b      	ldr	r3, [r7, #4]
 8009fb4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8009fb6:	699b      	ldr	r3, [r3, #24]
 8009fb8:	2b00      	cmp	r3, #0
 8009fba:	d106      	bne.n	8009fca <tcp_process+0x386>
 8009fbc:	4b80      	ldr	r3, [pc, #512]	; (800a1c0 <tcp_process+0x57c>)
 8009fbe:	f240 3251 	movw	r2, #849	; 0x351
 8009fc2:	4980      	ldr	r1, [pc, #512]	; (800a1c4 <tcp_process+0x580>)
 8009fc4:	4880      	ldr	r0, [pc, #512]	; (800a1c8 <tcp_process+0x584>)
 8009fc6:	f006 fab3 	bl	8010530 <iprintf>
          (pcb->listener == NULL) || (pcb->listener->accept != NULL));
#endif
        if (pcb->listener == NULL) {
 8009fca:	687b      	ldr	r3, [r7, #4]
 8009fcc:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8009fce:	2b00      	cmp	r3, #0
 8009fd0:	d102      	bne.n	8009fd8 <tcp_process+0x394>
          /* listen pcb might be closed by now */
          err = ERR_VAL;
 8009fd2:	23fa      	movs	r3, #250	; 0xfa
 8009fd4:	76bb      	strb	r3, [r7, #26]
 8009fd6:	e011      	b.n	8009ffc <tcp_process+0x3b8>
        } else
#endif /* LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG */
        {
          tcp_backlog_accepted(pcb);
          /* Call the accept function. */
          TCP_EVENT_ACCEPT(pcb->listener, pcb, pcb->callback_arg, ERR_OK, err);
 8009fd8:	687b      	ldr	r3, [r7, #4]
 8009fda:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8009fdc:	699b      	ldr	r3, [r3, #24]
 8009fde:	2b00      	cmp	r3, #0
 8009fe0:	d00a      	beq.n	8009ff8 <tcp_process+0x3b4>
 8009fe2:	687b      	ldr	r3, [r7, #4]
 8009fe4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8009fe6:	699b      	ldr	r3, [r3, #24]
 8009fe8:	687a      	ldr	r2, [r7, #4]
 8009fea:	6910      	ldr	r0, [r2, #16]
 8009fec:	2200      	movs	r2, #0
 8009fee:	6879      	ldr	r1, [r7, #4]
 8009ff0:	4798      	blx	r3
 8009ff2:	4603      	mov	r3, r0
 8009ff4:	76bb      	strb	r3, [r7, #26]
 8009ff6:	e001      	b.n	8009ffc <tcp_process+0x3b8>
 8009ff8:	23f0      	movs	r3, #240	; 0xf0
 8009ffa:	76bb      	strb	r3, [r7, #26]
        }
        if (err != ERR_OK) {
 8009ffc:	f997 301a 	ldrsb.w	r3, [r7, #26]
 800a000:	2b00      	cmp	r3, #0
 800a002:	d00a      	beq.n	800a01a <tcp_process+0x3d6>
          /* If the accept function returns with an error, we abort
           * the connection. */
          /* Already aborted? */
          if (err != ERR_ABRT) {
 800a004:	f997 301a 	ldrsb.w	r3, [r7, #26]
 800a008:	f113 0f0d 	cmn.w	r3, #13
 800a00c:	d002      	beq.n	800a014 <tcp_process+0x3d0>
            tcp_abort(pcb);
 800a00e:	6878      	ldr	r0, [r7, #4]
 800a010:	f7fe f990 	bl	8008334 <tcp_abort>
          }
          return ERR_ABRT;
 800a014:	f06f 030c 	mvn.w	r3, #12
 800a018:	e1bd      	b.n	800a396 <tcp_process+0x752>
        }
        /* If there was any data contained within this ACK,
         * we'd better pass it on to the application as well. */
        tcp_receive(pcb);
 800a01a:	6878      	ldr	r0, [r7, #4]
 800a01c:	f000 fa42 	bl	800a4a4 <tcp_receive>

        /* Prevent ACK for SYN to generate a sent event */
        if (recv_acked != 0) {
 800a020:	4b6a      	ldr	r3, [pc, #424]	; (800a1cc <tcp_process+0x588>)
 800a022:	881b      	ldrh	r3, [r3, #0]
 800a024:	2b00      	cmp	r3, #0
 800a026:	d005      	beq.n	800a034 <tcp_process+0x3f0>
          recv_acked--;
 800a028:	4b68      	ldr	r3, [pc, #416]	; (800a1cc <tcp_process+0x588>)
 800a02a:	881b      	ldrh	r3, [r3, #0]
 800a02c:	3b01      	subs	r3, #1
 800a02e:	b29a      	uxth	r2, r3
 800a030:	4b66      	ldr	r3, [pc, #408]	; (800a1cc <tcp_process+0x588>)
 800a032:	801a      	strh	r2, [r3, #0]
        }

        pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 800a034:	687b      	ldr	r3, [r7, #4]
 800a036:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800a038:	005b      	lsls	r3, r3, #1
 800a03a:	f241 121c 	movw	r2, #4380	; 0x111c
 800a03e:	429a      	cmp	r2, r3
 800a040:	bf38      	it	cc
 800a042:	461a      	movcc	r2, r3
 800a044:	687b      	ldr	r3, [r7, #4]
 800a046:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800a048:	009b      	lsls	r3, r3, #2
 800a04a:	4293      	cmp	r3, r2
 800a04c:	bf28      	it	cs
 800a04e:	4613      	movcs	r3, r2
 800a050:	b29a      	uxth	r2, r3
 800a052:	687b      	ldr	r3, [r7, #4]
 800a054:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
        LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_process (SYN_RCVD): cwnd %"TCPWNDSIZE_F
                                     " ssthresh %"TCPWNDSIZE_F"\n",
                                     pcb->cwnd, pcb->ssthresh));

        if (recv_flags & TF_GOT_FIN) {
 800a058:	4b5d      	ldr	r3, [pc, #372]	; (800a1d0 <tcp_process+0x58c>)
 800a05a:	781b      	ldrb	r3, [r3, #0]
 800a05c:	f003 0320 	and.w	r3, r3, #32
 800a060:	2b00      	cmp	r3, #0
 800a062:	d034      	beq.n	800a0ce <tcp_process+0x48a>
          tcp_ack_now(pcb);
 800a064:	687b      	ldr	r3, [r7, #4]
 800a066:	7e9b      	ldrb	r3, [r3, #26]
 800a068:	f043 0302 	orr.w	r3, r3, #2
 800a06c:	b2da      	uxtb	r2, r3
 800a06e:	687b      	ldr	r3, [r7, #4]
 800a070:	769a      	strb	r2, [r3, #26]
          pcb->state = CLOSE_WAIT;
 800a072:	687b      	ldr	r3, [r7, #4]
 800a074:	2207      	movs	r2, #7
 800a076:	751a      	strb	r2, [r3, #20]
        if (recv_flags & TF_GOT_FIN) {
 800a078:	e029      	b.n	800a0ce <tcp_process+0x48a>
        }
      } else {
        /* incorrect ACK number, send RST */
        tcp_rst(ackno, seqno + tcplen, ip_current_dest_addr(),
 800a07a:	4b4b      	ldr	r3, [pc, #300]	; (800a1a8 <tcp_process+0x564>)
 800a07c:	6818      	ldr	r0, [r3, #0]
 800a07e:	4b4b      	ldr	r3, [pc, #300]	; (800a1ac <tcp_process+0x568>)
 800a080:	881b      	ldrh	r3, [r3, #0]
 800a082:	461a      	mov	r2, r3
 800a084:	4b4a      	ldr	r3, [pc, #296]	; (800a1b0 <tcp_process+0x56c>)
 800a086:	681b      	ldr	r3, [r3, #0]
 800a088:	18d1      	adds	r1, r2, r3
          ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800a08a:	4b4a      	ldr	r3, [pc, #296]	; (800a1b4 <tcp_process+0x570>)
 800a08c:	681b      	ldr	r3, [r3, #0]
        tcp_rst(ackno, seqno + tcplen, ip_current_dest_addr(),
 800a08e:	885b      	ldrh	r3, [r3, #2]
 800a090:	b29b      	uxth	r3, r3
          ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800a092:	4a48      	ldr	r2, [pc, #288]	; (800a1b4 <tcp_process+0x570>)
 800a094:	6812      	ldr	r2, [r2, #0]
        tcp_rst(ackno, seqno + tcplen, ip_current_dest_addr(),
 800a096:	8812      	ldrh	r2, [r2, #0]
 800a098:	b292      	uxth	r2, r2
 800a09a:	9201      	str	r2, [sp, #4]
 800a09c:	9300      	str	r3, [sp, #0]
 800a09e:	4b46      	ldr	r3, [pc, #280]	; (800a1b8 <tcp_process+0x574>)
 800a0a0:	4a46      	ldr	r2, [pc, #280]	; (800a1bc <tcp_process+0x578>)
 800a0a2:	f001 ffcd 	bl	800c040 <tcp_rst>
      }
    } else if ((flags & TCP_SYN) && (seqno == pcb->rcv_nxt - 1)) {
      /* Looks like another copy of the SYN - retransmit our SYN-ACK */
      tcp_rexmit(pcb);
    }
    break;
 800a0a6:	e16a      	b.n	800a37e <tcp_process+0x73a>
    } else if ((flags & TCP_SYN) && (seqno == pcb->rcv_nxt - 1)) {
 800a0a8:	4b3e      	ldr	r3, [pc, #248]	; (800a1a4 <tcp_process+0x560>)
 800a0aa:	781b      	ldrb	r3, [r3, #0]
 800a0ac:	f003 0302 	and.w	r3, r3, #2
 800a0b0:	2b00      	cmp	r3, #0
 800a0b2:	f000 8164 	beq.w	800a37e <tcp_process+0x73a>
 800a0b6:	687b      	ldr	r3, [r7, #4]
 800a0b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a0ba:	1e5a      	subs	r2, r3, #1
 800a0bc:	4b3c      	ldr	r3, [pc, #240]	; (800a1b0 <tcp_process+0x56c>)
 800a0be:	681b      	ldr	r3, [r3, #0]
 800a0c0:	429a      	cmp	r2, r3
 800a0c2:	f040 815c 	bne.w	800a37e <tcp_process+0x73a>
      tcp_rexmit(pcb);
 800a0c6:	6878      	ldr	r0, [r7, #4]
 800a0c8:	f002 f866 	bl	800c198 <tcp_rexmit>
    break;
 800a0cc:	e157      	b.n	800a37e <tcp_process+0x73a>
 800a0ce:	e156      	b.n	800a37e <tcp_process+0x73a>
  case CLOSE_WAIT:
    /* FALLTHROUGH */
  case ESTABLISHED:
    tcp_receive(pcb);
 800a0d0:	6878      	ldr	r0, [r7, #4]
 800a0d2:	f000 f9e7 	bl	800a4a4 <tcp_receive>
    if (recv_flags & TF_GOT_FIN) { /* passive close */
 800a0d6:	4b3e      	ldr	r3, [pc, #248]	; (800a1d0 <tcp_process+0x58c>)
 800a0d8:	781b      	ldrb	r3, [r3, #0]
 800a0da:	f003 0320 	and.w	r3, r3, #32
 800a0de:	2b00      	cmp	r3, #0
 800a0e0:	f000 814f 	beq.w	800a382 <tcp_process+0x73e>
      tcp_ack_now(pcb);
 800a0e4:	687b      	ldr	r3, [r7, #4]
 800a0e6:	7e9b      	ldrb	r3, [r3, #26]
 800a0e8:	f043 0302 	orr.w	r3, r3, #2
 800a0ec:	b2da      	uxtb	r2, r3
 800a0ee:	687b      	ldr	r3, [r7, #4]
 800a0f0:	769a      	strb	r2, [r3, #26]
      pcb->state = CLOSE_WAIT;
 800a0f2:	687b      	ldr	r3, [r7, #4]
 800a0f4:	2207      	movs	r2, #7
 800a0f6:	751a      	strb	r2, [r3, #20]
    }
    break;
 800a0f8:	e143      	b.n	800a382 <tcp_process+0x73e>
  case FIN_WAIT_1:
    tcp_receive(pcb);
 800a0fa:	6878      	ldr	r0, [r7, #4]
 800a0fc:	f000 f9d2 	bl	800a4a4 <tcp_receive>
    if (recv_flags & TF_GOT_FIN) {
 800a100:	4b33      	ldr	r3, [pc, #204]	; (800a1d0 <tcp_process+0x58c>)
 800a102:	781b      	ldrb	r3, [r3, #0]
 800a104:	f003 0320 	and.w	r3, r3, #32
 800a108:	2b00      	cmp	r3, #0
 800a10a:	d074      	beq.n	800a1f6 <tcp_process+0x5b2>
      if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 800a10c:	4b25      	ldr	r3, [pc, #148]	; (800a1a4 <tcp_process+0x560>)
 800a10e:	781b      	ldrb	r3, [r3, #0]
 800a110:	f003 0310 	and.w	r3, r3, #16
 800a114:	2b00      	cmp	r3, #0
 800a116:	d063      	beq.n	800a1e0 <tcp_process+0x59c>
 800a118:	687b      	ldr	r3, [r7, #4]
 800a11a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800a11c:	4b22      	ldr	r3, [pc, #136]	; (800a1a8 <tcp_process+0x564>)
 800a11e:	681b      	ldr	r3, [r3, #0]
 800a120:	429a      	cmp	r2, r3
 800a122:	d15d      	bne.n	800a1e0 <tcp_process+0x59c>
          pcb->unsent == NULL) {
 800a124:	687b      	ldr	r3, [r7, #4]
 800a126:	6e9b      	ldr	r3, [r3, #104]	; 0x68
      if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 800a128:	2b00      	cmp	r3, #0
 800a12a:	d159      	bne.n	800a1e0 <tcp_process+0x59c>
        LWIP_DEBUGF(TCP_DEBUG,
          ("TCP connection closed: FIN_WAIT_1 %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        tcp_ack_now(pcb);
 800a12c:	687b      	ldr	r3, [r7, #4]
 800a12e:	7e9b      	ldrb	r3, [r3, #26]
 800a130:	f043 0302 	orr.w	r3, r3, #2
 800a134:	b2da      	uxtb	r2, r3
 800a136:	687b      	ldr	r3, [r7, #4]
 800a138:	769a      	strb	r2, [r3, #26]
        tcp_pcb_purge(pcb);
 800a13a:	6878      	ldr	r0, [r7, #4]
 800a13c:	f7fe fee6 	bl	8008f0c <tcp_pcb_purge>
        TCP_RMV_ACTIVE(pcb);
 800a140:	4b24      	ldr	r3, [pc, #144]	; (800a1d4 <tcp_process+0x590>)
 800a142:	681b      	ldr	r3, [r3, #0]
 800a144:	687a      	ldr	r2, [r7, #4]
 800a146:	429a      	cmp	r2, r3
 800a148:	d105      	bne.n	800a156 <tcp_process+0x512>
 800a14a:	4b22      	ldr	r3, [pc, #136]	; (800a1d4 <tcp_process+0x590>)
 800a14c:	681b      	ldr	r3, [r3, #0]
 800a14e:	68db      	ldr	r3, [r3, #12]
 800a150:	4a20      	ldr	r2, [pc, #128]	; (800a1d4 <tcp_process+0x590>)
 800a152:	6013      	str	r3, [r2, #0]
 800a154:	e013      	b.n	800a17e <tcp_process+0x53a>
 800a156:	4b1f      	ldr	r3, [pc, #124]	; (800a1d4 <tcp_process+0x590>)
 800a158:	681b      	ldr	r3, [r3, #0]
 800a15a:	617b      	str	r3, [r7, #20]
 800a15c:	e00c      	b.n	800a178 <tcp_process+0x534>
 800a15e:	697b      	ldr	r3, [r7, #20]
 800a160:	68db      	ldr	r3, [r3, #12]
 800a162:	687a      	ldr	r2, [r7, #4]
 800a164:	429a      	cmp	r2, r3
 800a166:	d104      	bne.n	800a172 <tcp_process+0x52e>
 800a168:	687b      	ldr	r3, [r7, #4]
 800a16a:	68da      	ldr	r2, [r3, #12]
 800a16c:	697b      	ldr	r3, [r7, #20]
 800a16e:	60da      	str	r2, [r3, #12]
 800a170:	e005      	b.n	800a17e <tcp_process+0x53a>
 800a172:	697b      	ldr	r3, [r7, #20]
 800a174:	68db      	ldr	r3, [r3, #12]
 800a176:	617b      	str	r3, [r7, #20]
 800a178:	697b      	ldr	r3, [r7, #20]
 800a17a:	2b00      	cmp	r3, #0
 800a17c:	d1ef      	bne.n	800a15e <tcp_process+0x51a>
 800a17e:	687b      	ldr	r3, [r7, #4]
 800a180:	2200      	movs	r2, #0
 800a182:	60da      	str	r2, [r3, #12]
 800a184:	4b14      	ldr	r3, [pc, #80]	; (800a1d8 <tcp_process+0x594>)
 800a186:	2201      	movs	r2, #1
 800a188:	701a      	strb	r2, [r3, #0]
        pcb->state = TIME_WAIT;
 800a18a:	687b      	ldr	r3, [r7, #4]
 800a18c:	220a      	movs	r2, #10
 800a18e:	751a      	strb	r2, [r3, #20]
        TCP_REG(&tcp_tw_pcbs, pcb);
 800a190:	4b12      	ldr	r3, [pc, #72]	; (800a1dc <tcp_process+0x598>)
 800a192:	681a      	ldr	r2, [r3, #0]
 800a194:	687b      	ldr	r3, [r7, #4]
 800a196:	60da      	str	r2, [r3, #12]
 800a198:	4a10      	ldr	r2, [pc, #64]	; (800a1dc <tcp_process+0x598>)
 800a19a:	687b      	ldr	r3, [r7, #4]
 800a19c:	6013      	str	r3, [r2, #0]
 800a19e:	f002 f9a1 	bl	800c4e4 <tcp_timer_needed>
      }
    } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
               pcb->unsent == NULL) {
      pcb->state = FIN_WAIT_2;
    }
    break;
 800a1a2:	e0f0      	b.n	800a386 <tcp_process+0x742>
 800a1a4:	2400406c 	.word	0x2400406c
 800a1a8:	24004064 	.word	0x24004064
 800a1ac:	2400406a 	.word	0x2400406a
 800a1b0:	24004060 	.word	0x24004060
 800a1b4:	24004050 	.word	0x24004050
 800a1b8:	240041ac 	.word	0x240041ac
 800a1bc:	240041b0 	.word	0x240041b0
 800a1c0:	080120f8 	.word	0x080120f8
 800a1c4:	080122fc 	.word	0x080122fc
 800a1c8:	0801213c 	.word	0x0801213c
 800a1cc:	24004068 	.word	0x24004068
 800a1d0:	2400406d 	.word	0x2400406d
 800a1d4:	2400acd8 	.word	0x2400acd8
 800a1d8:	2400acd4 	.word	0x2400acd4
 800a1dc:	2400ace8 	.word	0x2400ace8
        tcp_ack_now(pcb);
 800a1e0:	687b      	ldr	r3, [r7, #4]
 800a1e2:	7e9b      	ldrb	r3, [r3, #26]
 800a1e4:	f043 0302 	orr.w	r3, r3, #2
 800a1e8:	b2da      	uxtb	r2, r3
 800a1ea:	687b      	ldr	r3, [r7, #4]
 800a1ec:	769a      	strb	r2, [r3, #26]
        pcb->state = CLOSING;
 800a1ee:	687b      	ldr	r3, [r7, #4]
 800a1f0:	2208      	movs	r2, #8
 800a1f2:	751a      	strb	r2, [r3, #20]
    break;
 800a1f4:	e0c7      	b.n	800a386 <tcp_process+0x742>
    } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 800a1f6:	4b6a      	ldr	r3, [pc, #424]	; (800a3a0 <tcp_process+0x75c>)
 800a1f8:	781b      	ldrb	r3, [r3, #0]
 800a1fa:	f003 0310 	and.w	r3, r3, #16
 800a1fe:	2b00      	cmp	r3, #0
 800a200:	f000 80c1 	beq.w	800a386 <tcp_process+0x742>
 800a204:	687b      	ldr	r3, [r7, #4]
 800a206:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800a208:	4b66      	ldr	r3, [pc, #408]	; (800a3a4 <tcp_process+0x760>)
 800a20a:	681b      	ldr	r3, [r3, #0]
 800a20c:	429a      	cmp	r2, r3
 800a20e:	f040 80ba 	bne.w	800a386 <tcp_process+0x742>
               pcb->unsent == NULL) {
 800a212:	687b      	ldr	r3, [r7, #4]
 800a214:	6e9b      	ldr	r3, [r3, #104]	; 0x68
    } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 800a216:	2b00      	cmp	r3, #0
 800a218:	f040 80b5 	bne.w	800a386 <tcp_process+0x742>
      pcb->state = FIN_WAIT_2;
 800a21c:	687b      	ldr	r3, [r7, #4]
 800a21e:	2206      	movs	r2, #6
 800a220:	751a      	strb	r2, [r3, #20]
    break;
 800a222:	e0b0      	b.n	800a386 <tcp_process+0x742>
  case FIN_WAIT_2:
    tcp_receive(pcb);
 800a224:	6878      	ldr	r0, [r7, #4]
 800a226:	f000 f93d 	bl	800a4a4 <tcp_receive>
    if (recv_flags & TF_GOT_FIN) {
 800a22a:	4b5f      	ldr	r3, [pc, #380]	; (800a3a8 <tcp_process+0x764>)
 800a22c:	781b      	ldrb	r3, [r3, #0]
 800a22e:	f003 0320 	and.w	r3, r3, #32
 800a232:	2b00      	cmp	r3, #0
 800a234:	f000 80a9 	beq.w	800a38a <tcp_process+0x746>
      LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: FIN_WAIT_2 %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
      tcp_ack_now(pcb);
 800a238:	687b      	ldr	r3, [r7, #4]
 800a23a:	7e9b      	ldrb	r3, [r3, #26]
 800a23c:	f043 0302 	orr.w	r3, r3, #2
 800a240:	b2da      	uxtb	r2, r3
 800a242:	687b      	ldr	r3, [r7, #4]
 800a244:	769a      	strb	r2, [r3, #26]
      tcp_pcb_purge(pcb);
 800a246:	6878      	ldr	r0, [r7, #4]
 800a248:	f7fe fe60 	bl	8008f0c <tcp_pcb_purge>
      TCP_RMV_ACTIVE(pcb);
 800a24c:	4b57      	ldr	r3, [pc, #348]	; (800a3ac <tcp_process+0x768>)
 800a24e:	681b      	ldr	r3, [r3, #0]
 800a250:	687a      	ldr	r2, [r7, #4]
 800a252:	429a      	cmp	r2, r3
 800a254:	d105      	bne.n	800a262 <tcp_process+0x61e>
 800a256:	4b55      	ldr	r3, [pc, #340]	; (800a3ac <tcp_process+0x768>)
 800a258:	681b      	ldr	r3, [r3, #0]
 800a25a:	68db      	ldr	r3, [r3, #12]
 800a25c:	4a53      	ldr	r2, [pc, #332]	; (800a3ac <tcp_process+0x768>)
 800a25e:	6013      	str	r3, [r2, #0]
 800a260:	e013      	b.n	800a28a <tcp_process+0x646>
 800a262:	4b52      	ldr	r3, [pc, #328]	; (800a3ac <tcp_process+0x768>)
 800a264:	681b      	ldr	r3, [r3, #0]
 800a266:	613b      	str	r3, [r7, #16]
 800a268:	e00c      	b.n	800a284 <tcp_process+0x640>
 800a26a:	693b      	ldr	r3, [r7, #16]
 800a26c:	68db      	ldr	r3, [r3, #12]
 800a26e:	687a      	ldr	r2, [r7, #4]
 800a270:	429a      	cmp	r2, r3
 800a272:	d104      	bne.n	800a27e <tcp_process+0x63a>
 800a274:	687b      	ldr	r3, [r7, #4]
 800a276:	68da      	ldr	r2, [r3, #12]
 800a278:	693b      	ldr	r3, [r7, #16]
 800a27a:	60da      	str	r2, [r3, #12]
 800a27c:	e005      	b.n	800a28a <tcp_process+0x646>
 800a27e:	693b      	ldr	r3, [r7, #16]
 800a280:	68db      	ldr	r3, [r3, #12]
 800a282:	613b      	str	r3, [r7, #16]
 800a284:	693b      	ldr	r3, [r7, #16]
 800a286:	2b00      	cmp	r3, #0
 800a288:	d1ef      	bne.n	800a26a <tcp_process+0x626>
 800a28a:	687b      	ldr	r3, [r7, #4]
 800a28c:	2200      	movs	r2, #0
 800a28e:	60da      	str	r2, [r3, #12]
 800a290:	4b47      	ldr	r3, [pc, #284]	; (800a3b0 <tcp_process+0x76c>)
 800a292:	2201      	movs	r2, #1
 800a294:	701a      	strb	r2, [r3, #0]
      pcb->state = TIME_WAIT;
 800a296:	687b      	ldr	r3, [r7, #4]
 800a298:	220a      	movs	r2, #10
 800a29a:	751a      	strb	r2, [r3, #20]
      TCP_REG(&tcp_tw_pcbs, pcb);
 800a29c:	4b45      	ldr	r3, [pc, #276]	; (800a3b4 <tcp_process+0x770>)
 800a29e:	681a      	ldr	r2, [r3, #0]
 800a2a0:	687b      	ldr	r3, [r7, #4]
 800a2a2:	60da      	str	r2, [r3, #12]
 800a2a4:	4a43      	ldr	r2, [pc, #268]	; (800a3b4 <tcp_process+0x770>)
 800a2a6:	687b      	ldr	r3, [r7, #4]
 800a2a8:	6013      	str	r3, [r2, #0]
 800a2aa:	f002 f91b 	bl	800c4e4 <tcp_timer_needed>
    }
    break;
 800a2ae:	e06c      	b.n	800a38a <tcp_process+0x746>
  case CLOSING:
    tcp_receive(pcb);
 800a2b0:	6878      	ldr	r0, [r7, #4]
 800a2b2:	f000 f8f7 	bl	800a4a4 <tcp_receive>
    if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
 800a2b6:	4b3a      	ldr	r3, [pc, #232]	; (800a3a0 <tcp_process+0x75c>)
 800a2b8:	781b      	ldrb	r3, [r3, #0]
 800a2ba:	f003 0310 	and.w	r3, r3, #16
 800a2be:	2b00      	cmp	r3, #0
 800a2c0:	d065      	beq.n	800a38e <tcp_process+0x74a>
 800a2c2:	687b      	ldr	r3, [r7, #4]
 800a2c4:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800a2c6:	4b37      	ldr	r3, [pc, #220]	; (800a3a4 <tcp_process+0x760>)
 800a2c8:	681b      	ldr	r3, [r3, #0]
 800a2ca:	429a      	cmp	r2, r3
 800a2cc:	d15f      	bne.n	800a38e <tcp_process+0x74a>
 800a2ce:	687b      	ldr	r3, [r7, #4]
 800a2d0:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800a2d2:	2b00      	cmp	r3, #0
 800a2d4:	d15b      	bne.n	800a38e <tcp_process+0x74a>
      LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: CLOSING %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
      tcp_pcb_purge(pcb);
 800a2d6:	6878      	ldr	r0, [r7, #4]
 800a2d8:	f7fe fe18 	bl	8008f0c <tcp_pcb_purge>
      TCP_RMV_ACTIVE(pcb);
 800a2dc:	4b33      	ldr	r3, [pc, #204]	; (800a3ac <tcp_process+0x768>)
 800a2de:	681b      	ldr	r3, [r3, #0]
 800a2e0:	687a      	ldr	r2, [r7, #4]
 800a2e2:	429a      	cmp	r2, r3
 800a2e4:	d105      	bne.n	800a2f2 <tcp_process+0x6ae>
 800a2e6:	4b31      	ldr	r3, [pc, #196]	; (800a3ac <tcp_process+0x768>)
 800a2e8:	681b      	ldr	r3, [r3, #0]
 800a2ea:	68db      	ldr	r3, [r3, #12]
 800a2ec:	4a2f      	ldr	r2, [pc, #188]	; (800a3ac <tcp_process+0x768>)
 800a2ee:	6013      	str	r3, [r2, #0]
 800a2f0:	e013      	b.n	800a31a <tcp_process+0x6d6>
 800a2f2:	4b2e      	ldr	r3, [pc, #184]	; (800a3ac <tcp_process+0x768>)
 800a2f4:	681b      	ldr	r3, [r3, #0]
 800a2f6:	60fb      	str	r3, [r7, #12]
 800a2f8:	e00c      	b.n	800a314 <tcp_process+0x6d0>
 800a2fa:	68fb      	ldr	r3, [r7, #12]
 800a2fc:	68db      	ldr	r3, [r3, #12]
 800a2fe:	687a      	ldr	r2, [r7, #4]
 800a300:	429a      	cmp	r2, r3
 800a302:	d104      	bne.n	800a30e <tcp_process+0x6ca>
 800a304:	687b      	ldr	r3, [r7, #4]
 800a306:	68da      	ldr	r2, [r3, #12]
 800a308:	68fb      	ldr	r3, [r7, #12]
 800a30a:	60da      	str	r2, [r3, #12]
 800a30c:	e005      	b.n	800a31a <tcp_process+0x6d6>
 800a30e:	68fb      	ldr	r3, [r7, #12]
 800a310:	68db      	ldr	r3, [r3, #12]
 800a312:	60fb      	str	r3, [r7, #12]
 800a314:	68fb      	ldr	r3, [r7, #12]
 800a316:	2b00      	cmp	r3, #0
 800a318:	d1ef      	bne.n	800a2fa <tcp_process+0x6b6>
 800a31a:	687b      	ldr	r3, [r7, #4]
 800a31c:	2200      	movs	r2, #0
 800a31e:	60da      	str	r2, [r3, #12]
 800a320:	4b23      	ldr	r3, [pc, #140]	; (800a3b0 <tcp_process+0x76c>)
 800a322:	2201      	movs	r2, #1
 800a324:	701a      	strb	r2, [r3, #0]
      pcb->state = TIME_WAIT;
 800a326:	687b      	ldr	r3, [r7, #4]
 800a328:	220a      	movs	r2, #10
 800a32a:	751a      	strb	r2, [r3, #20]
      TCP_REG(&tcp_tw_pcbs, pcb);
 800a32c:	4b21      	ldr	r3, [pc, #132]	; (800a3b4 <tcp_process+0x770>)
 800a32e:	681a      	ldr	r2, [r3, #0]
 800a330:	687b      	ldr	r3, [r7, #4]
 800a332:	60da      	str	r2, [r3, #12]
 800a334:	4a1f      	ldr	r2, [pc, #124]	; (800a3b4 <tcp_process+0x770>)
 800a336:	687b      	ldr	r3, [r7, #4]
 800a338:	6013      	str	r3, [r2, #0]
 800a33a:	f002 f8d3 	bl	800c4e4 <tcp_timer_needed>
    }
    break;
 800a33e:	e026      	b.n	800a38e <tcp_process+0x74a>
  case LAST_ACK:
    tcp_receive(pcb);
 800a340:	6878      	ldr	r0, [r7, #4]
 800a342:	f000 f8af 	bl	800a4a4 <tcp_receive>
    if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
 800a346:	4b16      	ldr	r3, [pc, #88]	; (800a3a0 <tcp_process+0x75c>)
 800a348:	781b      	ldrb	r3, [r3, #0]
 800a34a:	f003 0310 	and.w	r3, r3, #16
 800a34e:	2b00      	cmp	r3, #0
 800a350:	d01f      	beq.n	800a392 <tcp_process+0x74e>
 800a352:	687b      	ldr	r3, [r7, #4]
 800a354:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800a356:	4b13      	ldr	r3, [pc, #76]	; (800a3a4 <tcp_process+0x760>)
 800a358:	681b      	ldr	r3, [r3, #0]
 800a35a:	429a      	cmp	r2, r3
 800a35c:	d119      	bne.n	800a392 <tcp_process+0x74e>
 800a35e:	687b      	ldr	r3, [r7, #4]
 800a360:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800a362:	2b00      	cmp	r3, #0
 800a364:	d115      	bne.n	800a392 <tcp_process+0x74e>
      LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: LAST_ACK %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
      /* bugfix #21699: don't set pcb->state to CLOSED here or we risk leaking segments */
      recv_flags |= TF_CLOSED;
 800a366:	4b10      	ldr	r3, [pc, #64]	; (800a3a8 <tcp_process+0x764>)
 800a368:	781b      	ldrb	r3, [r3, #0]
 800a36a:	f043 0310 	orr.w	r3, r3, #16
 800a36e:	b2da      	uxtb	r2, r3
 800a370:	4b0d      	ldr	r3, [pc, #52]	; (800a3a8 <tcp_process+0x764>)
 800a372:	701a      	strb	r2, [r3, #0]
    }
    break;
 800a374:	e00d      	b.n	800a392 <tcp_process+0x74e>
  default:
    break;
 800a376:	bf00      	nop
 800a378:	e00c      	b.n	800a394 <tcp_process+0x750>
    break;
 800a37a:	bf00      	nop
 800a37c:	e00a      	b.n	800a394 <tcp_process+0x750>
    break;
 800a37e:	bf00      	nop
 800a380:	e008      	b.n	800a394 <tcp_process+0x750>
    break;
 800a382:	bf00      	nop
 800a384:	e006      	b.n	800a394 <tcp_process+0x750>
    break;
 800a386:	bf00      	nop
 800a388:	e004      	b.n	800a394 <tcp_process+0x750>
    break;
 800a38a:	bf00      	nop
 800a38c:	e002      	b.n	800a394 <tcp_process+0x750>
    break;
 800a38e:	bf00      	nop
 800a390:	e000      	b.n	800a394 <tcp_process+0x750>
    break;
 800a392:	bf00      	nop
  }
  return ERR_OK;
 800a394:	2300      	movs	r3, #0
}
 800a396:	4618      	mov	r0, r3
 800a398:	3720      	adds	r7, #32
 800a39a:	46bd      	mov	sp, r7
 800a39c:	bd80      	pop	{r7, pc}
 800a39e:	bf00      	nop
 800a3a0:	2400406c 	.word	0x2400406c
 800a3a4:	24004064 	.word	0x24004064
 800a3a8:	2400406d 	.word	0x2400406d
 800a3ac:	2400acd8 	.word	0x2400acd8
 800a3b0:	2400acd4 	.word	0x2400acd4
 800a3b4:	2400ace8 	.word	0x2400ace8

0800a3b8 <tcp_oos_insert_segment>:
 *
 * Called from tcp_receive()
 */
static void
tcp_oos_insert_segment(struct tcp_seg *cseg, struct tcp_seg *next)
{
 800a3b8:	b590      	push	{r4, r7, lr}
 800a3ba:	b085      	sub	sp, #20
 800a3bc:	af00      	add	r7, sp, #0
 800a3be:	6078      	str	r0, [r7, #4]
 800a3c0:	6039      	str	r1, [r7, #0]
  struct tcp_seg *old_seg;

  if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
 800a3c2:	687b      	ldr	r3, [r7, #4]
 800a3c4:	68db      	ldr	r3, [r3, #12]
 800a3c6:	899b      	ldrh	r3, [r3, #12]
 800a3c8:	b29b      	uxth	r3, r3
 800a3ca:	4618      	mov	r0, r3
 800a3cc:	f7fc f886 	bl	80064dc <lwip_htons>
 800a3d0:	4603      	mov	r3, r0
 800a3d2:	f003 0301 	and.w	r3, r3, #1
 800a3d6:	2b00      	cmp	r3, #0
 800a3d8:	d027      	beq.n	800a42a <tcp_oos_insert_segment+0x72>
    /* received segment overlaps all following segments */
    tcp_segs_free(next);
 800a3da:	6838      	ldr	r0, [r7, #0]
 800a3dc:	f7fe fbee 	bl	8008bbc <tcp_segs_free>
    next = NULL;
 800a3e0:	2300      	movs	r3, #0
 800a3e2:	603b      	str	r3, [r7, #0]
 800a3e4:	e055      	b.n	800a492 <tcp_oos_insert_segment+0xda>
       oos queue may have segments with FIN flag */
    while (next &&
           TCP_SEQ_GEQ((seqno + cseg->len),
                      (next->tcphdr->seqno + next->len))) {
      /* cseg with FIN already processed */
      if (TCPH_FLAGS(next->tcphdr) & TCP_FIN) {
 800a3e6:	683b      	ldr	r3, [r7, #0]
 800a3e8:	68db      	ldr	r3, [r3, #12]
 800a3ea:	899b      	ldrh	r3, [r3, #12]
 800a3ec:	b29b      	uxth	r3, r3
 800a3ee:	4618      	mov	r0, r3
 800a3f0:	f7fc f874 	bl	80064dc <lwip_htons>
 800a3f4:	4603      	mov	r3, r0
 800a3f6:	f003 0301 	and.w	r3, r3, #1
 800a3fa:	2b00      	cmp	r3, #0
 800a3fc:	d00d      	beq.n	800a41a <tcp_oos_insert_segment+0x62>
        TCPH_SET_FLAG(cseg->tcphdr, TCP_FIN);
 800a3fe:	687b      	ldr	r3, [r7, #4]
 800a400:	68db      	ldr	r3, [r3, #12]
 800a402:	899b      	ldrh	r3, [r3, #12]
 800a404:	b29c      	uxth	r4, r3
 800a406:	2001      	movs	r0, #1
 800a408:	f7fc f868 	bl	80064dc <lwip_htons>
 800a40c:	4603      	mov	r3, r0
 800a40e:	461a      	mov	r2, r3
 800a410:	687b      	ldr	r3, [r7, #4]
 800a412:	68db      	ldr	r3, [r3, #12]
 800a414:	4322      	orrs	r2, r4
 800a416:	b292      	uxth	r2, r2
 800a418:	819a      	strh	r2, [r3, #12]
      }
      old_seg = next;
 800a41a:	683b      	ldr	r3, [r7, #0]
 800a41c:	60fb      	str	r3, [r7, #12]
      next = next->next;
 800a41e:	683b      	ldr	r3, [r7, #0]
 800a420:	681b      	ldr	r3, [r3, #0]
 800a422:	603b      	str	r3, [r7, #0]
      tcp_seg_free(old_seg);
 800a424:	68f8      	ldr	r0, [r7, #12]
 800a426:	f7fe fbdd 	bl	8008be4 <tcp_seg_free>
    while (next &&
 800a42a:	683b      	ldr	r3, [r7, #0]
 800a42c:	2b00      	cmp	r3, #0
 800a42e:	d00e      	beq.n	800a44e <tcp_oos_insert_segment+0x96>
           TCP_SEQ_GEQ((seqno + cseg->len),
 800a430:	687b      	ldr	r3, [r7, #4]
 800a432:	891b      	ldrh	r3, [r3, #8]
 800a434:	461a      	mov	r2, r3
 800a436:	4b1a      	ldr	r3, [pc, #104]	; (800a4a0 <tcp_oos_insert_segment+0xe8>)
 800a438:	681b      	ldr	r3, [r3, #0]
 800a43a:	441a      	add	r2, r3
 800a43c:	683b      	ldr	r3, [r7, #0]
 800a43e:	68db      	ldr	r3, [r3, #12]
 800a440:	685b      	ldr	r3, [r3, #4]
 800a442:	6839      	ldr	r1, [r7, #0]
 800a444:	8909      	ldrh	r1, [r1, #8]
 800a446:	440b      	add	r3, r1
 800a448:	1ad3      	subs	r3, r2, r3
    while (next &&
 800a44a:	2b00      	cmp	r3, #0
 800a44c:	dacb      	bge.n	800a3e6 <tcp_oos_insert_segment+0x2e>
    }
    if (next &&
 800a44e:	683b      	ldr	r3, [r7, #0]
 800a450:	2b00      	cmp	r3, #0
 800a452:	d01e      	beq.n	800a492 <tcp_oos_insert_segment+0xda>
        TCP_SEQ_GT(seqno + cseg->len, next->tcphdr->seqno)) {
 800a454:	687b      	ldr	r3, [r7, #4]
 800a456:	891b      	ldrh	r3, [r3, #8]
 800a458:	461a      	mov	r2, r3
 800a45a:	4b11      	ldr	r3, [pc, #68]	; (800a4a0 <tcp_oos_insert_segment+0xe8>)
 800a45c:	681b      	ldr	r3, [r3, #0]
 800a45e:	441a      	add	r2, r3
 800a460:	683b      	ldr	r3, [r7, #0]
 800a462:	68db      	ldr	r3, [r3, #12]
 800a464:	685b      	ldr	r3, [r3, #4]
 800a466:	1ad3      	subs	r3, r2, r3
    if (next &&
 800a468:	2b00      	cmp	r3, #0
 800a46a:	dd12      	ble.n	800a492 <tcp_oos_insert_segment+0xda>
      /* We need to trim the incoming segment. */
      cseg->len = (u16_t)(next->tcphdr->seqno - seqno);
 800a46c:	683b      	ldr	r3, [r7, #0]
 800a46e:	68db      	ldr	r3, [r3, #12]
 800a470:	685b      	ldr	r3, [r3, #4]
 800a472:	b29a      	uxth	r2, r3
 800a474:	4b0a      	ldr	r3, [pc, #40]	; (800a4a0 <tcp_oos_insert_segment+0xe8>)
 800a476:	681b      	ldr	r3, [r3, #0]
 800a478:	b29b      	uxth	r3, r3
 800a47a:	1ad3      	subs	r3, r2, r3
 800a47c:	b29a      	uxth	r2, r3
 800a47e:	687b      	ldr	r3, [r7, #4]
 800a480:	811a      	strh	r2, [r3, #8]
      pbuf_realloc(cseg->p, cseg->len);
 800a482:	687b      	ldr	r3, [r7, #4]
 800a484:	685a      	ldr	r2, [r3, #4]
 800a486:	687b      	ldr	r3, [r7, #4]
 800a488:	891b      	ldrh	r3, [r3, #8]
 800a48a:	4619      	mov	r1, r3
 800a48c:	4610      	mov	r0, r2
 800a48e:	f7fd f8dd 	bl	800764c <pbuf_realloc>
    }
  }
  cseg->next = next;
 800a492:	687b      	ldr	r3, [r7, #4]
 800a494:	683a      	ldr	r2, [r7, #0]
 800a496:	601a      	str	r2, [r3, #0]
}
 800a498:	bf00      	nop
 800a49a:	3714      	adds	r7, #20
 800a49c:	46bd      	mov	sp, r7
 800a49e:	bd90      	pop	{r4, r7, pc}
 800a4a0:	24004060 	.word	0x24004060

0800a4a4 <tcp_receive>:
 *
 * Called from tcp_process().
 */
static void
tcp_receive(struct tcp_pcb *pcb)
{
 800a4a4:	b5f0      	push	{r4, r5, r6, r7, lr}
 800a4a6:	b08d      	sub	sp, #52	; 0x34
 800a4a8:	af00      	add	r7, sp, #0
 800a4aa:	6078      	str	r0, [r7, #4]
#endif /* TCP_QUEUE_OOSEQ */
  s32_t off;
  s16_t m;
  u32_t right_wnd_edge;
  u16_t new_tot_len;
  int found_dupack = 0;
 800a4ac:	2300      	movs	r3, #0
 800a4ae:	61fb      	str	r3, [r7, #28]
#if TCP_OOSEQ_MAX_BYTES || TCP_OOSEQ_MAX_PBUFS
  u32_t ooseq_blen;
  u16_t ooseq_qlen;
#endif /* TCP_OOSEQ_MAX_BYTES || TCP_OOSEQ_MAX_PBUFS */

  LWIP_ASSERT("tcp_receive: wrong state", pcb->state >= ESTABLISHED);
 800a4b0:	687b      	ldr	r3, [r7, #4]
 800a4b2:	7d1b      	ldrb	r3, [r3, #20]
 800a4b4:	2b03      	cmp	r3, #3
 800a4b6:	d806      	bhi.n	800a4c6 <tcp_receive+0x22>
 800a4b8:	4ba6      	ldr	r3, [pc, #664]	; (800a754 <tcp_receive+0x2b0>)
 800a4ba:	f44f 6281 	mov.w	r2, #1032	; 0x408
 800a4be:	49a6      	ldr	r1, [pc, #664]	; (800a758 <tcp_receive+0x2b4>)
 800a4c0:	48a6      	ldr	r0, [pc, #664]	; (800a75c <tcp_receive+0x2b8>)
 800a4c2:	f006 f835 	bl	8010530 <iprintf>

  if (flags & TCP_ACK) {
 800a4c6:	4ba6      	ldr	r3, [pc, #664]	; (800a760 <tcp_receive+0x2bc>)
 800a4c8:	781b      	ldrb	r3, [r3, #0]
 800a4ca:	f003 0310 	and.w	r3, r3, #16
 800a4ce:	2b00      	cmp	r3, #0
 800a4d0:	f000 82bf 	beq.w	800aa52 <tcp_receive+0x5ae>
    right_wnd_edge = pcb->snd_wnd + pcb->snd_wl2;
 800a4d4:	687b      	ldr	r3, [r7, #4]
 800a4d6:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800a4da:	461a      	mov	r2, r3
 800a4dc:	687b      	ldr	r3, [r7, #4]
 800a4de:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a4e0:	4413      	add	r3, r2
 800a4e2:	617b      	str	r3, [r7, #20]

    /* Update window. */
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 800a4e4:	687b      	ldr	r3, [r7, #4]
 800a4e6:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800a4e8:	4b9e      	ldr	r3, [pc, #632]	; (800a764 <tcp_receive+0x2c0>)
 800a4ea:	681b      	ldr	r3, [r3, #0]
 800a4ec:	1ad3      	subs	r3, r2, r3
 800a4ee:	2b00      	cmp	r3, #0
 800a4f0:	db1b      	blt.n	800a52a <tcp_receive+0x86>
       (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 800a4f2:	687b      	ldr	r3, [r7, #4]
 800a4f4:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800a4f6:	4b9b      	ldr	r3, [pc, #620]	; (800a764 <tcp_receive+0x2c0>)
 800a4f8:	681b      	ldr	r3, [r3, #0]
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 800a4fa:	429a      	cmp	r2, r3
 800a4fc:	d106      	bne.n	800a50c <tcp_receive+0x68>
       (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 800a4fe:	687b      	ldr	r3, [r7, #4]
 800a500:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800a502:	4b99      	ldr	r3, [pc, #612]	; (800a768 <tcp_receive+0x2c4>)
 800a504:	681b      	ldr	r3, [r3, #0]
 800a506:	1ad3      	subs	r3, r2, r3
 800a508:	2b00      	cmp	r3, #0
 800a50a:	db0e      	blt.n	800a52a <tcp_receive+0x86>
       (pcb->snd_wl2 == ackno && (u32_t)SND_WND_SCALE(pcb, tcphdr->wnd) > pcb->snd_wnd)) {
 800a50c:	687b      	ldr	r3, [r7, #4]
 800a50e:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800a510:	4b95      	ldr	r3, [pc, #596]	; (800a768 <tcp_receive+0x2c4>)
 800a512:	681b      	ldr	r3, [r3, #0]
       (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 800a514:	429a      	cmp	r2, r3
 800a516:	d141      	bne.n	800a59c <tcp_receive+0xf8>
       (pcb->snd_wl2 == ackno && (u32_t)SND_WND_SCALE(pcb, tcphdr->wnd) > pcb->snd_wnd)) {
 800a518:	4b94      	ldr	r3, [pc, #592]	; (800a76c <tcp_receive+0x2c8>)
 800a51a:	681b      	ldr	r3, [r3, #0]
 800a51c:	89db      	ldrh	r3, [r3, #14]
 800a51e:	b29a      	uxth	r2, r3
 800a520:	687b      	ldr	r3, [r7, #4]
 800a522:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800a526:	429a      	cmp	r2, r3
 800a528:	d938      	bls.n	800a59c <tcp_receive+0xf8>
      pcb->snd_wnd = SND_WND_SCALE(pcb, tcphdr->wnd);
 800a52a:	4b90      	ldr	r3, [pc, #576]	; (800a76c <tcp_receive+0x2c8>)
 800a52c:	681b      	ldr	r3, [r3, #0]
 800a52e:	89db      	ldrh	r3, [r3, #14]
 800a530:	b29a      	uxth	r2, r3
 800a532:	687b      	ldr	r3, [r7, #4]
 800a534:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
      /* keep track of the biggest window announced by the remote host to calculate
         the maximum segment size */
      if (pcb->snd_wnd_max < pcb->snd_wnd) {
 800a538:	687b      	ldr	r3, [r7, #4]
 800a53a:	f8b3 205e 	ldrh.w	r2, [r3, #94]	; 0x5e
 800a53e:	687b      	ldr	r3, [r7, #4]
 800a540:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800a544:	429a      	cmp	r2, r3
 800a546:	d205      	bcs.n	800a554 <tcp_receive+0xb0>
        pcb->snd_wnd_max = pcb->snd_wnd;
 800a548:	687b      	ldr	r3, [r7, #4]
 800a54a:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 800a54e:	687b      	ldr	r3, [r7, #4]
 800a550:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
      }
      pcb->snd_wl1 = seqno;
 800a554:	4b83      	ldr	r3, [pc, #524]	; (800a764 <tcp_receive+0x2c0>)
 800a556:	681a      	ldr	r2, [r3, #0]
 800a558:	687b      	ldr	r3, [r7, #4]
 800a55a:	651a      	str	r2, [r3, #80]	; 0x50
      pcb->snd_wl2 = ackno;
 800a55c:	4b82      	ldr	r3, [pc, #520]	; (800a768 <tcp_receive+0x2c4>)
 800a55e:	681a      	ldr	r2, [r3, #0]
 800a560:	687b      	ldr	r3, [r7, #4]
 800a562:	655a      	str	r2, [r3, #84]	; 0x54
      if (pcb->snd_wnd == 0) {
 800a564:	687b      	ldr	r3, [r7, #4]
 800a566:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800a56a:	2b00      	cmp	r3, #0
 800a56c:	d10d      	bne.n	800a58a <tcp_receive+0xe6>
        if (pcb->persist_backoff == 0) {
 800a56e:	687b      	ldr	r3, [r7, #4]
 800a570:	f893 3095 	ldrb.w	r3, [r3, #149]	; 0x95
 800a574:	2b00      	cmp	r3, #0
 800a576:	d111      	bne.n	800a59c <tcp_receive+0xf8>
          /* start persist timer */
          pcb->persist_cnt = 0;
 800a578:	687b      	ldr	r3, [r7, #4]
 800a57a:	2200      	movs	r2, #0
 800a57c:	f883 2094 	strb.w	r2, [r3, #148]	; 0x94
          pcb->persist_backoff = 1;
 800a580:	687b      	ldr	r3, [r7, #4]
 800a582:	2201      	movs	r2, #1
 800a584:	f883 2095 	strb.w	r2, [r3, #149]	; 0x95
 800a588:	e008      	b.n	800a59c <tcp_receive+0xf8>
        }
      } else if (pcb->persist_backoff > 0) {
 800a58a:	687b      	ldr	r3, [r7, #4]
 800a58c:	f893 3095 	ldrb.w	r3, [r3, #149]	; 0x95
 800a590:	2b00      	cmp	r3, #0
 800a592:	d003      	beq.n	800a59c <tcp_receive+0xf8>
        /* stop persist timer */
          pcb->persist_backoff = 0;
 800a594:	687b      	ldr	r3, [r7, #4]
 800a596:	2200      	movs	r2, #0
 800a598:	f883 2095 	strb.w	r2, [r3, #149]	; 0x95
     * If it only passes 1, should reset dupack counter
     *
     */

    /* Clause 1 */
    if (TCP_SEQ_LEQ(ackno, pcb->lastack)) {
 800a59c:	4b72      	ldr	r3, [pc, #456]	; (800a768 <tcp_receive+0x2c4>)
 800a59e:	681a      	ldr	r2, [r3, #0]
 800a5a0:	687b      	ldr	r3, [r7, #4]
 800a5a2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a5a4:	1ad3      	subs	r3, r2, r3
 800a5a6:	2b00      	cmp	r3, #0
 800a5a8:	dc53      	bgt.n	800a652 <tcp_receive+0x1ae>
      /* Clause 2 */
      if (tcplen == 0) {
 800a5aa:	4b71      	ldr	r3, [pc, #452]	; (800a770 <tcp_receive+0x2cc>)
 800a5ac:	881b      	ldrh	r3, [r3, #0]
 800a5ae:	2b00      	cmp	r3, #0
 800a5b0:	d146      	bne.n	800a640 <tcp_receive+0x19c>
        /* Clause 3 */
        if (pcb->snd_wl2 + pcb->snd_wnd == right_wnd_edge) {
 800a5b2:	687b      	ldr	r3, [r7, #4]
 800a5b4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a5b6:	687a      	ldr	r2, [r7, #4]
 800a5b8:	f8b2 205c 	ldrh.w	r2, [r2, #92]	; 0x5c
 800a5bc:	4413      	add	r3, r2
 800a5be:	697a      	ldr	r2, [r7, #20]
 800a5c0:	429a      	cmp	r2, r3
 800a5c2:	d13d      	bne.n	800a640 <tcp_receive+0x19c>
          /* Clause 4 */
          if (pcb->rtime >= 0) {
 800a5c4:	687b      	ldr	r3, [r7, #4]
 800a5c6:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 800a5ca:	2b00      	cmp	r3, #0
 800a5cc:	db38      	blt.n	800a640 <tcp_receive+0x19c>
            /* Clause 5 */
            if (pcb->lastack == ackno) {
 800a5ce:	687b      	ldr	r3, [r7, #4]
 800a5d0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800a5d2:	4b65      	ldr	r3, [pc, #404]	; (800a768 <tcp_receive+0x2c4>)
 800a5d4:	681b      	ldr	r3, [r3, #0]
 800a5d6:	429a      	cmp	r2, r3
 800a5d8:	d132      	bne.n	800a640 <tcp_receive+0x19c>
              found_dupack = 1;
 800a5da:	2301      	movs	r3, #1
 800a5dc:	61fb      	str	r3, [r7, #28]
              if ((u8_t)(pcb->dupacks + 1) > pcb->dupacks) {
 800a5de:	687b      	ldr	r3, [r7, #4]
 800a5e0:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800a5e4:	2bff      	cmp	r3, #255	; 0xff
 800a5e6:	d007      	beq.n	800a5f8 <tcp_receive+0x154>
                ++pcb->dupacks;
 800a5e8:	687b      	ldr	r3, [r7, #4]
 800a5ea:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800a5ee:	3301      	adds	r3, #1
 800a5f0:	b2da      	uxtb	r2, r3
 800a5f2:	687b      	ldr	r3, [r7, #4]
 800a5f4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
              }
              if (pcb->dupacks > 3) {
 800a5f8:	687b      	ldr	r3, [r7, #4]
 800a5fa:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800a5fe:	2b03      	cmp	r3, #3
 800a600:	d916      	bls.n	800a630 <tcp_receive+0x18c>
                /* Inflate the congestion window, but not if it means that
                   the value overflows. */
                if ((tcpwnd_size_t)(pcb->cwnd + pcb->mss) > pcb->cwnd) {
 800a602:	687b      	ldr	r3, [r7, #4]
 800a604:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800a608:	687b      	ldr	r3, [r7, #4]
 800a60a:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800a60c:	4413      	add	r3, r2
 800a60e:	b29a      	uxth	r2, r3
 800a610:	687b      	ldr	r3, [r7, #4]
 800a612:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 800a616:	429a      	cmp	r2, r3
 800a618:	d912      	bls.n	800a640 <tcp_receive+0x19c>
                  pcb->cwnd += pcb->mss;
 800a61a:	687b      	ldr	r3, [r7, #4]
 800a61c:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800a620:	687b      	ldr	r3, [r7, #4]
 800a622:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800a624:	4413      	add	r3, r2
 800a626:	b29a      	uxth	r2, r3
 800a628:	687b      	ldr	r3, [r7, #4]
 800a62a:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 800a62e:	e007      	b.n	800a640 <tcp_receive+0x19c>
                }
              } else if (pcb->dupacks == 3) {
 800a630:	687b      	ldr	r3, [r7, #4]
 800a632:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800a636:	2b03      	cmp	r3, #3
 800a638:	d102      	bne.n	800a640 <tcp_receive+0x19c>
                /* Do fast retransmit */
                tcp_rexmit_fast(pcb);
 800a63a:	6878      	ldr	r0, [r7, #4]
 800a63c:	f001 fdfc 	bl	800c238 <tcp_rexmit_fast>
          }
        }
      }
      /* If Clause (1) or more is true, but not a duplicate ack, reset
       * count of consecutive duplicate acks */
      if (!found_dupack) {
 800a640:	69fb      	ldr	r3, [r7, #28]
 800a642:	2b00      	cmp	r3, #0
 800a644:	f040 8169 	bne.w	800a91a <tcp_receive+0x476>
        pcb->dupacks = 0;
 800a648:	687b      	ldr	r3, [r7, #4]
 800a64a:	2200      	movs	r2, #0
 800a64c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800a650:	e163      	b.n	800a91a <tcp_receive+0x476>
      }
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack+1, pcb->snd_nxt)) {
 800a652:	4b45      	ldr	r3, [pc, #276]	; (800a768 <tcp_receive+0x2c4>)
 800a654:	681a      	ldr	r2, [r3, #0]
 800a656:	687b      	ldr	r3, [r7, #4]
 800a658:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a65a:	1ad3      	subs	r3, r2, r3
 800a65c:	3b01      	subs	r3, #1
 800a65e:	2b00      	cmp	r3, #0
 800a660:	f2c0 8107 	blt.w	800a872 <tcp_receive+0x3ce>
 800a664:	4b40      	ldr	r3, [pc, #256]	; (800a768 <tcp_receive+0x2c4>)
 800a666:	681a      	ldr	r2, [r3, #0]
 800a668:	687b      	ldr	r3, [r7, #4]
 800a66a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a66c:	1ad3      	subs	r3, r2, r3
 800a66e:	2b00      	cmp	r3, #0
 800a670:	f300 80ff 	bgt.w	800a872 <tcp_receive+0x3ce>
      /* We come here when the ACK acknowledges new data. */

      /* Reset the "IN Fast Retransmit" flag, since we are no longer
         in fast retransmit. Also reset the congestion window to the
         slow start threshold. */
      if (pcb->flags & TF_INFR) {
 800a674:	687b      	ldr	r3, [r7, #4]
 800a676:	7e9b      	ldrb	r3, [r3, #26]
 800a678:	f003 0304 	and.w	r3, r3, #4
 800a67c:	2b00      	cmp	r3, #0
 800a67e:	d00c      	beq.n	800a69a <tcp_receive+0x1f6>
        pcb->flags &= ~TF_INFR;
 800a680:	687b      	ldr	r3, [r7, #4]
 800a682:	7e9b      	ldrb	r3, [r3, #26]
 800a684:	f023 0304 	bic.w	r3, r3, #4
 800a688:	b2da      	uxtb	r2, r3
 800a68a:	687b      	ldr	r3, [r7, #4]
 800a68c:	769a      	strb	r2, [r3, #26]
        pcb->cwnd = pcb->ssthresh;
 800a68e:	687b      	ldr	r3, [r7, #4]
 800a690:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 800a694:	687b      	ldr	r3, [r7, #4]
 800a696:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
      }

      /* Reset the number of retransmissions. */
      pcb->nrtx = 0;
 800a69a:	687b      	ldr	r3, [r7, #4]
 800a69c:	2200      	movs	r2, #0
 800a69e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Reset the retransmission time-out. */
      pcb->rto = (pcb->sa >> 3) + pcb->sv;
 800a6a2:	687b      	ldr	r3, [r7, #4]
 800a6a4:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 800a6a8:	10db      	asrs	r3, r3, #3
 800a6aa:	b21b      	sxth	r3, r3
 800a6ac:	b29a      	uxth	r2, r3
 800a6ae:	687b      	ldr	r3, [r7, #4]
 800a6b0:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 800a6b4:	b29b      	uxth	r3, r3
 800a6b6:	4413      	add	r3, r2
 800a6b8:	b29b      	uxth	r3, r3
 800a6ba:	b21a      	sxth	r2, r3
 800a6bc:	687b      	ldr	r3, [r7, #4]
 800a6be:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

      /* Reset the fast retransmit variables. */
      pcb->dupacks = 0;
 800a6c2:	687b      	ldr	r3, [r7, #4]
 800a6c4:	2200      	movs	r2, #0
 800a6c6:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
      pcb->lastack = ackno;
 800a6ca:	4b27      	ldr	r3, [pc, #156]	; (800a768 <tcp_receive+0x2c4>)
 800a6cc:	681a      	ldr	r2, [r3, #0]
 800a6ce:	687b      	ldr	r3, [r7, #4]
 800a6d0:	645a      	str	r2, [r3, #68]	; 0x44

      /* Update the congestion control variables (cwnd and
         ssthresh). */
      if (pcb->state >= ESTABLISHED) {
 800a6d2:	687b      	ldr	r3, [r7, #4]
 800a6d4:	7d1b      	ldrb	r3, [r3, #20]
 800a6d6:	2b03      	cmp	r3, #3
 800a6d8:	f240 8094 	bls.w	800a804 <tcp_receive+0x360>
        if (pcb->cwnd < pcb->ssthresh) {
 800a6dc:	687b      	ldr	r3, [r7, #4]
 800a6de:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800a6e2:	687b      	ldr	r3, [r7, #4]
 800a6e4:	f8b3 304a 	ldrh.w	r3, [r3, #74]	; 0x4a
 800a6e8:	429a      	cmp	r2, r3
 800a6ea:	d216      	bcs.n	800a71a <tcp_receive+0x276>
          if ((tcpwnd_size_t)(pcb->cwnd + pcb->mss) > pcb->cwnd) {
 800a6ec:	687b      	ldr	r3, [r7, #4]
 800a6ee:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800a6f2:	687b      	ldr	r3, [r7, #4]
 800a6f4:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800a6f6:	4413      	add	r3, r2
 800a6f8:	b29a      	uxth	r2, r3
 800a6fa:	687b      	ldr	r3, [r7, #4]
 800a6fc:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 800a700:	429a      	cmp	r2, r3
 800a702:	d97f      	bls.n	800a804 <tcp_receive+0x360>
            pcb->cwnd += pcb->mss;
 800a704:	687b      	ldr	r3, [r7, #4]
 800a706:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800a70a:	687b      	ldr	r3, [r7, #4]
 800a70c:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800a70e:	4413      	add	r3, r2
 800a710:	b29a      	uxth	r2, r3
 800a712:	687b      	ldr	r3, [r7, #4]
 800a714:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 800a718:	e074      	b.n	800a804 <tcp_receive+0x360>
          }
          LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_receive: slow start cwnd %"TCPWNDSIZE_F"\n", pcb->cwnd));
        } else {
          tcpwnd_size_t new_cwnd = (pcb->cwnd + pcb->mss * pcb->mss / pcb->cwnd);
 800a71a:	687b      	ldr	r3, [r7, #4]
 800a71c:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800a720:	687b      	ldr	r3, [r7, #4]
 800a722:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800a724:	4619      	mov	r1, r3
 800a726:	687b      	ldr	r3, [r7, #4]
 800a728:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800a72a:	fb03 f301 	mul.w	r3, r3, r1
 800a72e:	6879      	ldr	r1, [r7, #4]
 800a730:	f8b1 1048 	ldrh.w	r1, [r1, #72]	; 0x48
 800a734:	fb93 f3f1 	sdiv	r3, r3, r1
 800a738:	b29b      	uxth	r3, r3
 800a73a:	4413      	add	r3, r2
 800a73c:	827b      	strh	r3, [r7, #18]
          if (new_cwnd > pcb->cwnd) {
 800a73e:	687b      	ldr	r3, [r7, #4]
 800a740:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 800a744:	8a7a      	ldrh	r2, [r7, #18]
 800a746:	429a      	cmp	r2, r3
 800a748:	d95c      	bls.n	800a804 <tcp_receive+0x360>
            pcb->cwnd = new_cwnd;
 800a74a:	687b      	ldr	r3, [r7, #4]
 800a74c:	8a7a      	ldrh	r2, [r7, #18]
 800a74e:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
                                    pcb->unacked != NULL?
                                    lwip_ntohl(pcb->unacked->tcphdr->seqno) + TCP_TCPLEN(pcb->unacked): 0));

      /* Remove segment from the unacknowledged list if the incoming
         ACK acknowledges them. */
      while (pcb->unacked != NULL &&
 800a752:	e057      	b.n	800a804 <tcp_receive+0x360>
 800a754:	080120f8 	.word	0x080120f8
 800a758:	0801231c 	.word	0x0801231c
 800a75c:	0801213c 	.word	0x0801213c
 800a760:	2400406c 	.word	0x2400406c
 800a764:	24004060 	.word	0x24004060
 800a768:	24004064 	.word	0x24004064
 800a76c:	24004050 	.word	0x24004050
 800a770:	2400406a 	.word	0x2400406a
        LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: removing %"U32_F":%"U32_F" from pcb->unacked\n",
                                      lwip_ntohl(pcb->unacked->tcphdr->seqno),
                                      lwip_ntohl(pcb->unacked->tcphdr->seqno) +
                                      TCP_TCPLEN(pcb->unacked)));

        next = pcb->unacked;
 800a774:	687b      	ldr	r3, [r7, #4]
 800a776:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800a778:	62fb      	str	r3, [r7, #44]	; 0x2c
        pcb->unacked = pcb->unacked->next;
 800a77a:	687b      	ldr	r3, [r7, #4]
 800a77c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800a77e:	681a      	ldr	r2, [r3, #0]
 800a780:	687b      	ldr	r3, [r7, #4]
 800a782:	66da      	str	r2, [r3, #108]	; 0x6c

        LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_receive: queuelen %"TCPWNDSIZE_F" ... ", (tcpwnd_size_t)pcb->snd_queuelen));
        LWIP_ASSERT("pcb->snd_queuelen >= pbuf_clen(next->p)", (pcb->snd_queuelen >= pbuf_clen(next->p)));
 800a784:	687b      	ldr	r3, [r7, #4]
 800a786:	f8b3 4062 	ldrh.w	r4, [r3, #98]	; 0x62
 800a78a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a78c:	685b      	ldr	r3, [r3, #4]
 800a78e:	4618      	mov	r0, r3
 800a790:	f7fd f96a 	bl	8007a68 <pbuf_clen>
 800a794:	4603      	mov	r3, r0
 800a796:	429c      	cmp	r4, r3
 800a798:	d206      	bcs.n	800a7a8 <tcp_receive+0x304>
 800a79a:	4b70      	ldr	r3, [pc, #448]	; (800a95c <tcp_receive+0x4b8>)
 800a79c:	f240 429e 	movw	r2, #1182	; 0x49e
 800a7a0:	496f      	ldr	r1, [pc, #444]	; (800a960 <tcp_receive+0x4bc>)
 800a7a2:	4870      	ldr	r0, [pc, #448]	; (800a964 <tcp_receive+0x4c0>)
 800a7a4:	f005 fec4 	bl	8010530 <iprintf>

        pcb->snd_queuelen -= pbuf_clen(next->p);
 800a7a8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a7aa:	685b      	ldr	r3, [r3, #4]
 800a7ac:	4618      	mov	r0, r3
 800a7ae:	f7fd f95b 	bl	8007a68 <pbuf_clen>
 800a7b2:	4603      	mov	r3, r0
 800a7b4:	461a      	mov	r2, r3
 800a7b6:	687b      	ldr	r3, [r7, #4]
 800a7b8:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800a7bc:	1a9b      	subs	r3, r3, r2
 800a7be:	b29a      	uxth	r2, r3
 800a7c0:	687b      	ldr	r3, [r7, #4]
 800a7c2:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
        recv_acked += next->len;
 800a7c6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a7c8:	891a      	ldrh	r2, [r3, #8]
 800a7ca:	4b67      	ldr	r3, [pc, #412]	; (800a968 <tcp_receive+0x4c4>)
 800a7cc:	881b      	ldrh	r3, [r3, #0]
 800a7ce:	4413      	add	r3, r2
 800a7d0:	b29a      	uxth	r2, r3
 800a7d2:	4b65      	ldr	r3, [pc, #404]	; (800a968 <tcp_receive+0x4c4>)
 800a7d4:	801a      	strh	r2, [r3, #0]
        tcp_seg_free(next);
 800a7d6:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800a7d8:	f7fe fa04 	bl	8008be4 <tcp_seg_free>

        LWIP_DEBUGF(TCP_QLEN_DEBUG, ("%"TCPWNDSIZE_F" (after freeing unacked)\n", (tcpwnd_size_t)pcb->snd_queuelen));
        if (pcb->snd_queuelen != 0) {
 800a7dc:	687b      	ldr	r3, [r7, #4]
 800a7de:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800a7e2:	2b00      	cmp	r3, #0
 800a7e4:	d00e      	beq.n	800a804 <tcp_receive+0x360>
          LWIP_ASSERT("tcp_receive: valid queue length", pcb->unacked != NULL ||
 800a7e6:	687b      	ldr	r3, [r7, #4]
 800a7e8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800a7ea:	2b00      	cmp	r3, #0
 800a7ec:	d10a      	bne.n	800a804 <tcp_receive+0x360>
 800a7ee:	687b      	ldr	r3, [r7, #4]
 800a7f0:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800a7f2:	2b00      	cmp	r3, #0
 800a7f4:	d106      	bne.n	800a804 <tcp_receive+0x360>
 800a7f6:	4b59      	ldr	r3, [pc, #356]	; (800a95c <tcp_receive+0x4b8>)
 800a7f8:	f240 42a7 	movw	r2, #1191	; 0x4a7
 800a7fc:	495b      	ldr	r1, [pc, #364]	; (800a96c <tcp_receive+0x4c8>)
 800a7fe:	4859      	ldr	r0, [pc, #356]	; (800a964 <tcp_receive+0x4c0>)
 800a800:	f005 fe96 	bl	8010530 <iprintf>
      while (pcb->unacked != NULL &&
 800a804:	687b      	ldr	r3, [r7, #4]
 800a806:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800a808:	2b00      	cmp	r3, #0
 800a80a:	d022      	beq.n	800a852 <tcp_receive+0x3ae>
             TCP_SEQ_LEQ(lwip_ntohl(pcb->unacked->tcphdr->seqno) +
 800a80c:	687b      	ldr	r3, [r7, #4]
 800a80e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800a810:	68db      	ldr	r3, [r3, #12]
 800a812:	685b      	ldr	r3, [r3, #4]
 800a814:	4618      	mov	r0, r3
 800a816:	f7fb fe6f 	bl	80064f8 <lwip_htonl>
 800a81a:	4604      	mov	r4, r0
 800a81c:	687b      	ldr	r3, [r7, #4]
 800a81e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800a820:	891b      	ldrh	r3, [r3, #8]
 800a822:	461d      	mov	r5, r3
 800a824:	687b      	ldr	r3, [r7, #4]
 800a826:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800a828:	68db      	ldr	r3, [r3, #12]
 800a82a:	899b      	ldrh	r3, [r3, #12]
 800a82c:	b29b      	uxth	r3, r3
 800a82e:	4618      	mov	r0, r3
 800a830:	f7fb fe54 	bl	80064dc <lwip_htons>
 800a834:	4603      	mov	r3, r0
 800a836:	f003 0303 	and.w	r3, r3, #3
 800a83a:	2b00      	cmp	r3, #0
 800a83c:	d001      	beq.n	800a842 <tcp_receive+0x39e>
 800a83e:	2301      	movs	r3, #1
 800a840:	e000      	b.n	800a844 <tcp_receive+0x3a0>
 800a842:	2300      	movs	r3, #0
 800a844:	442b      	add	r3, r5
 800a846:	18e2      	adds	r2, r4, r3
 800a848:	4b49      	ldr	r3, [pc, #292]	; (800a970 <tcp_receive+0x4cc>)
 800a84a:	681b      	ldr	r3, [r3, #0]
 800a84c:	1ad3      	subs	r3, r2, r3
      while (pcb->unacked != NULL &&
 800a84e:	2b00      	cmp	r3, #0
 800a850:	dd90      	ble.n	800a774 <tcp_receive+0x2d0>
        }
      }

      /* If there's nothing left to acknowledge, stop the retransmit
         timer, otherwise reset it to start again */
      if (pcb->unacked == NULL) {
 800a852:	687b      	ldr	r3, [r7, #4]
 800a854:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800a856:	2b00      	cmp	r3, #0
 800a858:	d104      	bne.n	800a864 <tcp_receive+0x3c0>
        pcb->rtime = -1;
 800a85a:	687b      	ldr	r3, [r7, #4]
 800a85c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800a860:	861a      	strh	r2, [r3, #48]	; 0x30
 800a862:	e002      	b.n	800a86a <tcp_receive+0x3c6>
      } else {
        pcb->rtime = 0;
 800a864:	687b      	ldr	r3, [r7, #4]
 800a866:	2200      	movs	r2, #0
 800a868:	861a      	strh	r2, [r3, #48]	; 0x30
      }

      pcb->polltmr = 0;
 800a86a:	687b      	ldr	r3, [r7, #4]
 800a86c:	2200      	movs	r2, #0
 800a86e:	76da      	strb	r2, [r3, #27]
 800a870:	e002      	b.n	800a878 <tcp_receive+0x3d4>
        nd6_reachability_hint(ip6_current_src_addr());
      }
#endif /* LWIP_IPV6 && LWIP_ND6_TCP_REACHABILITY_HINTS*/
    } else {
      /* Out of sequence ACK, didn't really ack anything */
      tcp_send_empty_ack(pcb);
 800a872:	6878      	ldr	r0, [r7, #4]
 800a874:	f001 f8fe 	bl	800ba74 <tcp_send_empty_ack>
       on the list are acknowledged by the ACK. This may seem
       strange since an "unsent" segment shouldn't be acked. The
       rationale is that lwIP puts all outstanding segments on the
       ->unsent list after a retransmission, so these segments may
       in fact have been sent once. */
    while (pcb->unsent != NULL &&
 800a878:	e04f      	b.n	800a91a <tcp_receive+0x476>
                           TCP_TCPLEN(pcb->unsent), pcb->snd_nxt)) {
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: removing %"U32_F":%"U32_F" from pcb->unsent\n",
                                    lwip_ntohl(pcb->unsent->tcphdr->seqno), lwip_ntohl(pcb->unsent->tcphdr->seqno) +
                                    TCP_TCPLEN(pcb->unsent)));

      next = pcb->unsent;
 800a87a:	687b      	ldr	r3, [r7, #4]
 800a87c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800a87e:	62fb      	str	r3, [r7, #44]	; 0x2c
      pcb->unsent = pcb->unsent->next;
 800a880:	687b      	ldr	r3, [r7, #4]
 800a882:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800a884:	681a      	ldr	r2, [r3, #0]
 800a886:	687b      	ldr	r3, [r7, #4]
 800a888:	669a      	str	r2, [r3, #104]	; 0x68
#if TCP_OVERSIZE
      if (pcb->unsent == NULL) {
 800a88a:	687b      	ldr	r3, [r7, #4]
 800a88c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800a88e:	2b00      	cmp	r3, #0
 800a890:	d103      	bne.n	800a89a <tcp_receive+0x3f6>
        pcb->unsent_oversize = 0;
 800a892:	687b      	ldr	r3, [r7, #4]
 800a894:	2200      	movs	r2, #0
 800a896:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
      }
#endif /* TCP_OVERSIZE */
      LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_receive: queuelen %"TCPWNDSIZE_F" ... ", (tcpwnd_size_t)pcb->snd_queuelen));
      LWIP_ASSERT("pcb->snd_queuelen >= pbuf_clen(next->p)", (pcb->snd_queuelen >= pbuf_clen(next->p)));
 800a89a:	687b      	ldr	r3, [r7, #4]
 800a89c:	f8b3 4062 	ldrh.w	r4, [r3, #98]	; 0x62
 800a8a0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a8a2:	685b      	ldr	r3, [r3, #4]
 800a8a4:	4618      	mov	r0, r3
 800a8a6:	f7fd f8df 	bl	8007a68 <pbuf_clen>
 800a8aa:	4603      	mov	r3, r0
 800a8ac:	429c      	cmp	r4, r3
 800a8ae:	d206      	bcs.n	800a8be <tcp_receive+0x41a>
 800a8b0:	4b2a      	ldr	r3, [pc, #168]	; (800a95c <tcp_receive+0x4b8>)
 800a8b2:	f240 42d5 	movw	r2, #1237	; 0x4d5
 800a8b6:	492a      	ldr	r1, [pc, #168]	; (800a960 <tcp_receive+0x4bc>)
 800a8b8:	482a      	ldr	r0, [pc, #168]	; (800a964 <tcp_receive+0x4c0>)
 800a8ba:	f005 fe39 	bl	8010530 <iprintf>
      /* Prevent ACK for FIN to generate a sent event */
      pcb->snd_queuelen -= pbuf_clen(next->p);
 800a8be:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a8c0:	685b      	ldr	r3, [r3, #4]
 800a8c2:	4618      	mov	r0, r3
 800a8c4:	f7fd f8d0 	bl	8007a68 <pbuf_clen>
 800a8c8:	4603      	mov	r3, r0
 800a8ca:	461a      	mov	r2, r3
 800a8cc:	687b      	ldr	r3, [r7, #4]
 800a8ce:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800a8d2:	1a9b      	subs	r3, r3, r2
 800a8d4:	b29a      	uxth	r2, r3
 800a8d6:	687b      	ldr	r3, [r7, #4]
 800a8d8:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
      recv_acked += next->len;
 800a8dc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a8de:	891a      	ldrh	r2, [r3, #8]
 800a8e0:	4b21      	ldr	r3, [pc, #132]	; (800a968 <tcp_receive+0x4c4>)
 800a8e2:	881b      	ldrh	r3, [r3, #0]
 800a8e4:	4413      	add	r3, r2
 800a8e6:	b29a      	uxth	r2, r3
 800a8e8:	4b1f      	ldr	r3, [pc, #124]	; (800a968 <tcp_receive+0x4c4>)
 800a8ea:	801a      	strh	r2, [r3, #0]
      tcp_seg_free(next);
 800a8ec:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800a8ee:	f7fe f979 	bl	8008be4 <tcp_seg_free>
      LWIP_DEBUGF(TCP_QLEN_DEBUG, ("%"TCPWNDSIZE_F" (after freeing unsent)\n", (tcpwnd_size_t)pcb->snd_queuelen));
      if (pcb->snd_queuelen != 0) {
 800a8f2:	687b      	ldr	r3, [r7, #4]
 800a8f4:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800a8f8:	2b00      	cmp	r3, #0
 800a8fa:	d00e      	beq.n	800a91a <tcp_receive+0x476>
        LWIP_ASSERT("tcp_receive: valid queue length",
 800a8fc:	687b      	ldr	r3, [r7, #4]
 800a8fe:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800a900:	2b00      	cmp	r3, #0
 800a902:	d10a      	bne.n	800a91a <tcp_receive+0x476>
 800a904:	687b      	ldr	r3, [r7, #4]
 800a906:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800a908:	2b00      	cmp	r3, #0
 800a90a:	d106      	bne.n	800a91a <tcp_receive+0x476>
 800a90c:	4b13      	ldr	r3, [pc, #76]	; (800a95c <tcp_receive+0x4b8>)
 800a90e:	f240 42dd 	movw	r2, #1245	; 0x4dd
 800a912:	4916      	ldr	r1, [pc, #88]	; (800a96c <tcp_receive+0x4c8>)
 800a914:	4813      	ldr	r0, [pc, #76]	; (800a964 <tcp_receive+0x4c0>)
 800a916:	f005 fe0b 	bl	8010530 <iprintf>
    while (pcb->unsent != NULL &&
 800a91a:	687b      	ldr	r3, [r7, #4]
 800a91c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800a91e:	2b00      	cmp	r3, #0
 800a920:	d036      	beq.n	800a990 <tcp_receive+0x4ec>
           TCP_SEQ_BETWEEN(ackno, lwip_ntohl(pcb->unsent->tcphdr->seqno) +
 800a922:	4b13      	ldr	r3, [pc, #76]	; (800a970 <tcp_receive+0x4cc>)
 800a924:	681c      	ldr	r4, [r3, #0]
 800a926:	687b      	ldr	r3, [r7, #4]
 800a928:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800a92a:	68db      	ldr	r3, [r3, #12]
 800a92c:	685b      	ldr	r3, [r3, #4]
 800a92e:	4618      	mov	r0, r3
 800a930:	f7fb fde2 	bl	80064f8 <lwip_htonl>
 800a934:	4605      	mov	r5, r0
 800a936:	687b      	ldr	r3, [r7, #4]
 800a938:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800a93a:	891b      	ldrh	r3, [r3, #8]
 800a93c:	461e      	mov	r6, r3
 800a93e:	687b      	ldr	r3, [r7, #4]
 800a940:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800a942:	68db      	ldr	r3, [r3, #12]
 800a944:	899b      	ldrh	r3, [r3, #12]
 800a946:	b29b      	uxth	r3, r3
 800a948:	4618      	mov	r0, r3
 800a94a:	f7fb fdc7 	bl	80064dc <lwip_htons>
 800a94e:	4603      	mov	r3, r0
 800a950:	f003 0303 	and.w	r3, r3, #3
 800a954:	2b00      	cmp	r3, #0
 800a956:	d00d      	beq.n	800a974 <tcp_receive+0x4d0>
 800a958:	2301      	movs	r3, #1
 800a95a:	e00c      	b.n	800a976 <tcp_receive+0x4d2>
 800a95c:	080120f8 	.word	0x080120f8
 800a960:	08012338 	.word	0x08012338
 800a964:	0801213c 	.word	0x0801213c
 800a968:	24004068 	.word	0x24004068
 800a96c:	08012360 	.word	0x08012360
 800a970:	24004064 	.word	0x24004064
 800a974:	2300      	movs	r3, #0
 800a976:	4433      	add	r3, r6
 800a978:	442b      	add	r3, r5
 800a97a:	1ae3      	subs	r3, r4, r3
    while (pcb->unsent != NULL &&
 800a97c:	2b00      	cmp	r3, #0
 800a97e:	db07      	blt.n	800a990 <tcp_receive+0x4ec>
           TCP_SEQ_BETWEEN(ackno, lwip_ntohl(pcb->unsent->tcphdr->seqno) +
 800a980:	4b8d      	ldr	r3, [pc, #564]	; (800abb8 <tcp_receive+0x714>)
 800a982:	681a      	ldr	r2, [r3, #0]
 800a984:	687b      	ldr	r3, [r7, #4]
 800a986:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a988:	1ad3      	subs	r3, r2, r3
 800a98a:	2b00      	cmp	r3, #0
 800a98c:	f77f af75 	ble.w	800a87a <tcp_receive+0x3d6>
          pcb->unacked != NULL || pcb->unsent != NULL);
      }
    }
    pcb->snd_buf += recv_acked;
 800a990:	687b      	ldr	r3, [r7, #4]
 800a992:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 800a996:	4b89      	ldr	r3, [pc, #548]	; (800abbc <tcp_receive+0x718>)
 800a998:	881b      	ldrh	r3, [r3, #0]
 800a99a:	4413      	add	r3, r2
 800a99c:	b29a      	uxth	r2, r3
 800a99e:	687b      	ldr	r3, [r7, #4]
 800a9a0:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
                                pcb->rttest, pcb->rtseq, ackno));

    /* RTT estimation calculations. This is done by checking if the
       incoming segment acknowledges the segment we use to take a
       round-trip time measurement. */
    if (pcb->rttest && TCP_SEQ_LT(pcb->rtseq, ackno)) {
 800a9a4:	687b      	ldr	r3, [r7, #4]
 800a9a6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a9a8:	2b00      	cmp	r3, #0
 800a9aa:	d052      	beq.n	800aa52 <tcp_receive+0x5ae>
 800a9ac:	687b      	ldr	r3, [r7, #4]
 800a9ae:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800a9b0:	4b81      	ldr	r3, [pc, #516]	; (800abb8 <tcp_receive+0x714>)
 800a9b2:	681b      	ldr	r3, [r3, #0]
 800a9b4:	1ad3      	subs	r3, r2, r3
 800a9b6:	2b00      	cmp	r3, #0
 800a9b8:	da4b      	bge.n	800aa52 <tcp_receive+0x5ae>
      /* diff between this shouldn't exceed 32K since this are tcp timer ticks
         and a round-trip shouldn't be that long... */
      m = (s16_t)(tcp_ticks - pcb->rttest);
 800a9ba:	4b81      	ldr	r3, [pc, #516]	; (800abc0 <tcp_receive+0x71c>)
 800a9bc:	681b      	ldr	r3, [r3, #0]
 800a9be:	b29a      	uxth	r2, r3
 800a9c0:	687b      	ldr	r3, [r7, #4]
 800a9c2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a9c4:	b29b      	uxth	r3, r3
 800a9c6:	1ad3      	subs	r3, r2, r3
 800a9c8:	b29b      	uxth	r3, r3
 800a9ca:	847b      	strh	r3, [r7, #34]	; 0x22

      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_receive: experienced rtt %"U16_F" ticks (%"U16_F" msec).\n",
                                  m, (u16_t)(m * TCP_SLOW_INTERVAL)));

      /* This is taken directly from VJs original code in his paper */
      m = m - (pcb->sa >> 3);
 800a9cc:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 800a9ce:	687b      	ldr	r3, [r7, #4]
 800a9d0:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 800a9d4:	10db      	asrs	r3, r3, #3
 800a9d6:	b21b      	sxth	r3, r3
 800a9d8:	b29b      	uxth	r3, r3
 800a9da:	1ad3      	subs	r3, r2, r3
 800a9dc:	b29b      	uxth	r3, r3
 800a9de:	847b      	strh	r3, [r7, #34]	; 0x22
      pcb->sa += m;
 800a9e0:	687b      	ldr	r3, [r7, #4]
 800a9e2:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 800a9e6:	b29a      	uxth	r2, r3
 800a9e8:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800a9ea:	4413      	add	r3, r2
 800a9ec:	b29b      	uxth	r3, r3
 800a9ee:	b21a      	sxth	r2, r3
 800a9f0:	687b      	ldr	r3, [r7, #4]
 800a9f2:	879a      	strh	r2, [r3, #60]	; 0x3c
      if (m < 0) {
 800a9f4:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 800a9f8:	2b00      	cmp	r3, #0
 800a9fa:	da03      	bge.n	800aa04 <tcp_receive+0x560>
        m = -m;
 800a9fc:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800a9fe:	425b      	negs	r3, r3
 800aa00:	b29b      	uxth	r3, r3
 800aa02:	847b      	strh	r3, [r7, #34]	; 0x22
      }
      m = m - (pcb->sv >> 2);
 800aa04:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 800aa06:	687b      	ldr	r3, [r7, #4]
 800aa08:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 800aa0c:	109b      	asrs	r3, r3, #2
 800aa0e:	b21b      	sxth	r3, r3
 800aa10:	b29b      	uxth	r3, r3
 800aa12:	1ad3      	subs	r3, r2, r3
 800aa14:	b29b      	uxth	r3, r3
 800aa16:	847b      	strh	r3, [r7, #34]	; 0x22
      pcb->sv += m;
 800aa18:	687b      	ldr	r3, [r7, #4]
 800aa1a:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 800aa1e:	b29a      	uxth	r2, r3
 800aa20:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800aa22:	4413      	add	r3, r2
 800aa24:	b29b      	uxth	r3, r3
 800aa26:	b21a      	sxth	r2, r3
 800aa28:	687b      	ldr	r3, [r7, #4]
 800aa2a:	87da      	strh	r2, [r3, #62]	; 0x3e
      pcb->rto = (pcb->sa >> 3) + pcb->sv;
 800aa2c:	687b      	ldr	r3, [r7, #4]
 800aa2e:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 800aa32:	10db      	asrs	r3, r3, #3
 800aa34:	b21b      	sxth	r3, r3
 800aa36:	b29a      	uxth	r2, r3
 800aa38:	687b      	ldr	r3, [r7, #4]
 800aa3a:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 800aa3e:	b29b      	uxth	r3, r3
 800aa40:	4413      	add	r3, r2
 800aa42:	b29b      	uxth	r3, r3
 800aa44:	b21a      	sxth	r2, r3
 800aa46:	687b      	ldr	r3, [r7, #4]
 800aa48:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_receive: RTO %"U16_F" (%"U16_F" milliseconds)\n",
                                  pcb->rto, (u16_t)(pcb->rto * TCP_SLOW_INTERVAL)));

      pcb->rttest = 0;
 800aa4c:	687b      	ldr	r3, [r7, #4]
 800aa4e:	2200      	movs	r2, #0
 800aa50:	635a      	str	r2, [r3, #52]	; 0x34

  /* If the incoming segment contains data, we must process it
     further unless the pcb already received a FIN.
     (RFC 793, chapter 3.9, "SEGMENT ARRIVES" in states CLOSE-WAIT, CLOSING,
     LAST-ACK and TIME-WAIT: "Ignore the segment text.") */
  if ((tcplen > 0) && (pcb->state < CLOSE_WAIT)) {
 800aa52:	4b5c      	ldr	r3, [pc, #368]	; (800abc4 <tcp_receive+0x720>)
 800aa54:	881b      	ldrh	r3, [r3, #0]
 800aa56:	2b00      	cmp	r3, #0
 800aa58:	f000 84f1 	beq.w	800b43e <tcp_receive+0xf9a>
 800aa5c:	687b      	ldr	r3, [r7, #4]
 800aa5e:	7d1b      	ldrb	r3, [r3, #20]
 800aa60:	2b06      	cmp	r3, #6
 800aa62:	f200 84ec 	bhi.w	800b43e <tcp_receive+0xf9a>
       this if the sequence number of the incoming segment is less
       than rcv_nxt, and the sequence number plus the length of the
       segment is larger than rcv_nxt. */
    /*    if (TCP_SEQ_LT(seqno, pcb->rcv_nxt)) {
          if (TCP_SEQ_LT(pcb->rcv_nxt, seqno + tcplen)) {*/
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)) {
 800aa66:	687b      	ldr	r3, [r7, #4]
 800aa68:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800aa6a:	4b57      	ldr	r3, [pc, #348]	; (800abc8 <tcp_receive+0x724>)
 800aa6c:	681b      	ldr	r3, [r3, #0]
 800aa6e:	1ad3      	subs	r3, r2, r3
 800aa70:	3b01      	subs	r3, #1
 800aa72:	2b00      	cmp	r3, #0
 800aa74:	f2c0 80b8 	blt.w	800abe8 <tcp_receive+0x744>
 800aa78:	687b      	ldr	r3, [r7, #4]
 800aa7a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800aa7c:	4b51      	ldr	r3, [pc, #324]	; (800abc4 <tcp_receive+0x720>)
 800aa7e:	881b      	ldrh	r3, [r3, #0]
 800aa80:	4619      	mov	r1, r3
 800aa82:	4b51      	ldr	r3, [pc, #324]	; (800abc8 <tcp_receive+0x724>)
 800aa84:	681b      	ldr	r3, [r3, #0]
 800aa86:	440b      	add	r3, r1
 800aa88:	1ad3      	subs	r3, r2, r3
 800aa8a:	3301      	adds	r3, #1
 800aa8c:	2b00      	cmp	r3, #0
 800aa8e:	f300 80ab 	bgt.w	800abe8 <tcp_receive+0x744>

         After we are done with adjusting the pbuf pointers we must
         adjust the ->data pointer in the seg and the segment
         length.*/

      struct pbuf *p = inseg.p;
 800aa92:	4b4e      	ldr	r3, [pc, #312]	; (800abcc <tcp_receive+0x728>)
 800aa94:	685b      	ldr	r3, [r3, #4]
 800aa96:	61bb      	str	r3, [r7, #24]
      off = pcb->rcv_nxt - seqno;
 800aa98:	687b      	ldr	r3, [r7, #4]
 800aa9a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800aa9c:	4b4a      	ldr	r3, [pc, #296]	; (800abc8 <tcp_receive+0x724>)
 800aa9e:	681b      	ldr	r3, [r3, #0]
 800aaa0:	1ad3      	subs	r3, r2, r3
 800aaa2:	627b      	str	r3, [r7, #36]	; 0x24
      LWIP_ASSERT("inseg.p != NULL", inseg.p);
 800aaa4:	4b49      	ldr	r3, [pc, #292]	; (800abcc <tcp_receive+0x728>)
 800aaa6:	685b      	ldr	r3, [r3, #4]
 800aaa8:	2b00      	cmp	r3, #0
 800aaaa:	d106      	bne.n	800aaba <tcp_receive+0x616>
 800aaac:	4b48      	ldr	r3, [pc, #288]	; (800abd0 <tcp_receive+0x72c>)
 800aaae:	f240 523c 	movw	r2, #1340	; 0x53c
 800aab2:	4948      	ldr	r1, [pc, #288]	; (800abd4 <tcp_receive+0x730>)
 800aab4:	4848      	ldr	r0, [pc, #288]	; (800abd8 <tcp_receive+0x734>)
 800aab6:	f005 fd3b 	bl	8010530 <iprintf>
      LWIP_ASSERT("insane offset!", (off < 0x7fff));
 800aaba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aabc:	f647 72fe 	movw	r2, #32766	; 0x7ffe
 800aac0:	4293      	cmp	r3, r2
 800aac2:	dd06      	ble.n	800aad2 <tcp_receive+0x62e>
 800aac4:	4b42      	ldr	r3, [pc, #264]	; (800abd0 <tcp_receive+0x72c>)
 800aac6:	f240 523d 	movw	r2, #1341	; 0x53d
 800aaca:	4944      	ldr	r1, [pc, #272]	; (800abdc <tcp_receive+0x738>)
 800aacc:	4842      	ldr	r0, [pc, #264]	; (800abd8 <tcp_receive+0x734>)
 800aace:	f005 fd2f 	bl	8010530 <iprintf>
      if (inseg.p->len < off) {
 800aad2:	4b3e      	ldr	r3, [pc, #248]	; (800abcc <tcp_receive+0x728>)
 800aad4:	685b      	ldr	r3, [r3, #4]
 800aad6:	895b      	ldrh	r3, [r3, #10]
 800aad8:	461a      	mov	r2, r3
 800aada:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aadc:	4293      	cmp	r3, r2
 800aade:	dd3e      	ble.n	800ab5e <tcp_receive+0x6ba>
        LWIP_ASSERT("pbuf too short!", (((s32_t)inseg.p->tot_len) >= off));
 800aae0:	4b3a      	ldr	r3, [pc, #232]	; (800abcc <tcp_receive+0x728>)
 800aae2:	685b      	ldr	r3, [r3, #4]
 800aae4:	891b      	ldrh	r3, [r3, #8]
 800aae6:	461a      	mov	r2, r3
 800aae8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aaea:	4293      	cmp	r3, r2
 800aaec:	dd06      	ble.n	800aafc <tcp_receive+0x658>
 800aaee:	4b38      	ldr	r3, [pc, #224]	; (800abd0 <tcp_receive+0x72c>)
 800aaf0:	f240 523f 	movw	r2, #1343	; 0x53f
 800aaf4:	493a      	ldr	r1, [pc, #232]	; (800abe0 <tcp_receive+0x73c>)
 800aaf6:	4838      	ldr	r0, [pc, #224]	; (800abd8 <tcp_receive+0x734>)
 800aaf8:	f005 fd1a 	bl	8010530 <iprintf>
        new_tot_len = (u16_t)(inseg.p->tot_len - off);
 800aafc:	4b33      	ldr	r3, [pc, #204]	; (800abcc <tcp_receive+0x728>)
 800aafe:	685b      	ldr	r3, [r3, #4]
 800ab00:	891a      	ldrh	r2, [r3, #8]
 800ab02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ab04:	b29b      	uxth	r3, r3
 800ab06:	1ad3      	subs	r3, r2, r3
 800ab08:	823b      	strh	r3, [r7, #16]
        while (p->len < off) {
 800ab0a:	e00e      	b.n	800ab2a <tcp_receive+0x686>
          off -= p->len;
 800ab0c:	69bb      	ldr	r3, [r7, #24]
 800ab0e:	895b      	ldrh	r3, [r3, #10]
 800ab10:	461a      	mov	r2, r3
 800ab12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ab14:	1a9b      	subs	r3, r3, r2
 800ab16:	627b      	str	r3, [r7, #36]	; 0x24
          /* KJM following line changed (with addition of new_tot_len var)
             to fix bug #9076
             inseg.p->tot_len -= p->len; */
          p->tot_len = new_tot_len;
 800ab18:	69bb      	ldr	r3, [r7, #24]
 800ab1a:	8a3a      	ldrh	r2, [r7, #16]
 800ab1c:	811a      	strh	r2, [r3, #8]
          p->len = 0;
 800ab1e:	69bb      	ldr	r3, [r7, #24]
 800ab20:	2200      	movs	r2, #0
 800ab22:	815a      	strh	r2, [r3, #10]
          p = p->next;
 800ab24:	69bb      	ldr	r3, [r7, #24]
 800ab26:	681b      	ldr	r3, [r3, #0]
 800ab28:	61bb      	str	r3, [r7, #24]
        while (p->len < off) {
 800ab2a:	69bb      	ldr	r3, [r7, #24]
 800ab2c:	895b      	ldrh	r3, [r3, #10]
 800ab2e:	461a      	mov	r2, r3
 800ab30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ab32:	4293      	cmp	r3, r2
 800ab34:	dcea      	bgt.n	800ab0c <tcp_receive+0x668>
        }
        if (pbuf_header(p, (s16_t)-off)) {
 800ab36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ab38:	b29b      	uxth	r3, r3
 800ab3a:	425b      	negs	r3, r3
 800ab3c:	b29b      	uxth	r3, r3
 800ab3e:	b21b      	sxth	r3, r3
 800ab40:	4619      	mov	r1, r3
 800ab42:	69b8      	ldr	r0, [r7, #24]
 800ab44:	f7fc fed2 	bl	80078ec <pbuf_header>
 800ab48:	4603      	mov	r3, r0
 800ab4a:	2b00      	cmp	r3, #0
 800ab4c:	d01c      	beq.n	800ab88 <tcp_receive+0x6e4>
          /* Do we need to cope with this failing?  Assert for now */
          LWIP_ASSERT("pbuf_header failed", 0);
 800ab4e:	4b20      	ldr	r3, [pc, #128]	; (800abd0 <tcp_receive+0x72c>)
 800ab50:	f240 524c 	movw	r2, #1356	; 0x54c
 800ab54:	4923      	ldr	r1, [pc, #140]	; (800abe4 <tcp_receive+0x740>)
 800ab56:	4820      	ldr	r0, [pc, #128]	; (800abd8 <tcp_receive+0x734>)
 800ab58:	f005 fcea 	bl	8010530 <iprintf>
 800ab5c:	e014      	b.n	800ab88 <tcp_receive+0x6e4>
        }
      } else {
        if (pbuf_header(inseg.p, (s16_t)-off)) {
 800ab5e:	4b1b      	ldr	r3, [pc, #108]	; (800abcc <tcp_receive+0x728>)
 800ab60:	685b      	ldr	r3, [r3, #4]
 800ab62:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800ab64:	b292      	uxth	r2, r2
 800ab66:	4252      	negs	r2, r2
 800ab68:	b292      	uxth	r2, r2
 800ab6a:	b212      	sxth	r2, r2
 800ab6c:	4611      	mov	r1, r2
 800ab6e:	4618      	mov	r0, r3
 800ab70:	f7fc febc 	bl	80078ec <pbuf_header>
 800ab74:	4603      	mov	r3, r0
 800ab76:	2b00      	cmp	r3, #0
 800ab78:	d006      	beq.n	800ab88 <tcp_receive+0x6e4>
          /* Do we need to cope with this failing?  Assert for now */
          LWIP_ASSERT("pbuf_header failed", 0);
 800ab7a:	4b15      	ldr	r3, [pc, #84]	; (800abd0 <tcp_receive+0x72c>)
 800ab7c:	f240 5251 	movw	r2, #1361	; 0x551
 800ab80:	4918      	ldr	r1, [pc, #96]	; (800abe4 <tcp_receive+0x740>)
 800ab82:	4815      	ldr	r0, [pc, #84]	; (800abd8 <tcp_receive+0x734>)
 800ab84:	f005 fcd4 	bl	8010530 <iprintf>
        }
      }
      inseg.len -= (u16_t)(pcb->rcv_nxt - seqno);
 800ab88:	4b10      	ldr	r3, [pc, #64]	; (800abcc <tcp_receive+0x728>)
 800ab8a:	891a      	ldrh	r2, [r3, #8]
 800ab8c:	4b0e      	ldr	r3, [pc, #56]	; (800abc8 <tcp_receive+0x724>)
 800ab8e:	681b      	ldr	r3, [r3, #0]
 800ab90:	b299      	uxth	r1, r3
 800ab92:	687b      	ldr	r3, [r7, #4]
 800ab94:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ab96:	b29b      	uxth	r3, r3
 800ab98:	1acb      	subs	r3, r1, r3
 800ab9a:	b29b      	uxth	r3, r3
 800ab9c:	4413      	add	r3, r2
 800ab9e:	b29a      	uxth	r2, r3
 800aba0:	4b0a      	ldr	r3, [pc, #40]	; (800abcc <tcp_receive+0x728>)
 800aba2:	811a      	strh	r2, [r3, #8]
      inseg.tcphdr->seqno = seqno = pcb->rcv_nxt;
 800aba4:	687b      	ldr	r3, [r7, #4]
 800aba6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800aba8:	4a07      	ldr	r2, [pc, #28]	; (800abc8 <tcp_receive+0x724>)
 800abaa:	6013      	str	r3, [r2, #0]
 800abac:	4b07      	ldr	r3, [pc, #28]	; (800abcc <tcp_receive+0x728>)
 800abae:	68db      	ldr	r3, [r3, #12]
 800abb0:	4a05      	ldr	r2, [pc, #20]	; (800abc8 <tcp_receive+0x724>)
 800abb2:	6812      	ldr	r2, [r2, #0]
 800abb4:	605a      	str	r2, [r3, #4]
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)) {
 800abb6:	e025      	b.n	800ac04 <tcp_receive+0x760>
 800abb8:	24004064 	.word	0x24004064
 800abbc:	24004068 	.word	0x24004068
 800abc0:	2400acdc 	.word	0x2400acdc
 800abc4:	2400406a 	.word	0x2400406a
 800abc8:	24004060 	.word	0x24004060
 800abcc:	24004040 	.word	0x24004040
 800abd0:	080120f8 	.word	0x080120f8
 800abd4:	08012380 	.word	0x08012380
 800abd8:	0801213c 	.word	0x0801213c
 800abdc:	08012390 	.word	0x08012390
 800abe0:	080123a0 	.word	0x080123a0
 800abe4:	080123b0 	.word	0x080123b0
    }
    else {
      if (TCP_SEQ_LT(seqno, pcb->rcv_nxt)) {
 800abe8:	4b87      	ldr	r3, [pc, #540]	; (800ae08 <tcp_receive+0x964>)
 800abea:	681a      	ldr	r2, [r3, #0]
 800abec:	687b      	ldr	r3, [r7, #4]
 800abee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800abf0:	1ad3      	subs	r3, r2, r3
 800abf2:	2b00      	cmp	r3, #0
 800abf4:	da06      	bge.n	800ac04 <tcp_receive+0x760>
        /* the whole segment is < rcv_nxt */
        /* must be a duplicate of a packet that has already been correctly handled */

        LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: duplicate seqno %"U32_F"\n", seqno));
        tcp_ack_now(pcb);
 800abf6:	687b      	ldr	r3, [r7, #4]
 800abf8:	7e9b      	ldrb	r3, [r3, #26]
 800abfa:	f043 0302 	orr.w	r3, r3, #2
 800abfe:	b2da      	uxtb	r2, r3
 800ac00:	687b      	ldr	r3, [r7, #4]
 800ac02:	769a      	strb	r2, [r3, #26]
    }

    /* The sequence number must be within the window (above rcv_nxt
       and below rcv_nxt + rcv_wnd) in order to be further
       processed. */
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 800ac04:	4b80      	ldr	r3, [pc, #512]	; (800ae08 <tcp_receive+0x964>)
 800ac06:	681a      	ldr	r2, [r3, #0]
 800ac08:	687b      	ldr	r3, [r7, #4]
 800ac0a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ac0c:	1ad3      	subs	r3, r2, r3
 800ac0e:	2b00      	cmp	r3, #0
 800ac10:	f2c0 8410 	blt.w	800b434 <tcp_receive+0xf90>
 800ac14:	4b7c      	ldr	r3, [pc, #496]	; (800ae08 <tcp_receive+0x964>)
 800ac16:	681a      	ldr	r2, [r3, #0]
 800ac18:	687b      	ldr	r3, [r7, #4]
 800ac1a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ac1c:	6879      	ldr	r1, [r7, #4]
 800ac1e:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 800ac20:	440b      	add	r3, r1
 800ac22:	1ad3      	subs	r3, r2, r3
 800ac24:	3301      	adds	r3, #1
 800ac26:	2b00      	cmp	r3, #0
 800ac28:	f300 8404 	bgt.w	800b434 <tcp_receive+0xf90>
                        pcb->rcv_nxt + pcb->rcv_wnd - 1)) {
      if (pcb->rcv_nxt == seqno) {
 800ac2c:	687b      	ldr	r3, [r7, #4]
 800ac2e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800ac30:	4b75      	ldr	r3, [pc, #468]	; (800ae08 <tcp_receive+0x964>)
 800ac32:	681b      	ldr	r3, [r3, #0]
 800ac34:	429a      	cmp	r2, r3
 800ac36:	f040 8287 	bne.w	800b148 <tcp_receive+0xca4>
        /* The incoming segment is the next in sequence. We check if
           we have to trim the end of the segment and update rcv_nxt
           and pass the data to the application. */
        tcplen = TCP_TCPLEN(&inseg);
 800ac3a:	4b74      	ldr	r3, [pc, #464]	; (800ae0c <tcp_receive+0x968>)
 800ac3c:	891c      	ldrh	r4, [r3, #8]
 800ac3e:	4b73      	ldr	r3, [pc, #460]	; (800ae0c <tcp_receive+0x968>)
 800ac40:	68db      	ldr	r3, [r3, #12]
 800ac42:	899b      	ldrh	r3, [r3, #12]
 800ac44:	b29b      	uxth	r3, r3
 800ac46:	4618      	mov	r0, r3
 800ac48:	f7fb fc48 	bl	80064dc <lwip_htons>
 800ac4c:	4603      	mov	r3, r0
 800ac4e:	f003 0303 	and.w	r3, r3, #3
 800ac52:	2b00      	cmp	r3, #0
 800ac54:	d001      	beq.n	800ac5a <tcp_receive+0x7b6>
 800ac56:	2301      	movs	r3, #1
 800ac58:	e000      	b.n	800ac5c <tcp_receive+0x7b8>
 800ac5a:	2300      	movs	r3, #0
 800ac5c:	4423      	add	r3, r4
 800ac5e:	b29a      	uxth	r2, r3
 800ac60:	4b6b      	ldr	r3, [pc, #428]	; (800ae10 <tcp_receive+0x96c>)
 800ac62:	801a      	strh	r2, [r3, #0]

        if (tcplen > pcb->rcv_wnd) {
 800ac64:	687b      	ldr	r3, [r7, #4]
 800ac66:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 800ac68:	4b69      	ldr	r3, [pc, #420]	; (800ae10 <tcp_receive+0x96c>)
 800ac6a:	881b      	ldrh	r3, [r3, #0]
 800ac6c:	429a      	cmp	r2, r3
 800ac6e:	d26e      	bcs.n	800ad4e <tcp_receive+0x8aa>
          LWIP_DEBUGF(TCP_INPUT_DEBUG,
                      ("tcp_receive: other end overran receive window"
                       "seqno %"U32_F" len %"U16_F" right edge %"U32_F"\n",
                       seqno, tcplen, pcb->rcv_nxt + pcb->rcv_wnd));
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 800ac70:	4b66      	ldr	r3, [pc, #408]	; (800ae0c <tcp_receive+0x968>)
 800ac72:	68db      	ldr	r3, [r3, #12]
 800ac74:	899b      	ldrh	r3, [r3, #12]
 800ac76:	b29b      	uxth	r3, r3
 800ac78:	4618      	mov	r0, r3
 800ac7a:	f7fb fc2f 	bl	80064dc <lwip_htons>
 800ac7e:	4603      	mov	r3, r0
 800ac80:	f003 0301 	and.w	r3, r3, #1
 800ac84:	2b00      	cmp	r3, #0
 800ac86:	d01b      	beq.n	800acc0 <tcp_receive+0x81c>
            /* Must remove the FIN from the header as we're trimming
             * that byte of sequence-space from the packet */
            TCPH_FLAGS_SET(inseg.tcphdr, TCPH_FLAGS(inseg.tcphdr) & ~(unsigned int)TCP_FIN);
 800ac88:	4b60      	ldr	r3, [pc, #384]	; (800ae0c <tcp_receive+0x968>)
 800ac8a:	68db      	ldr	r3, [r3, #12]
 800ac8c:	899b      	ldrh	r3, [r3, #12]
 800ac8e:	b29b      	uxth	r3, r3
 800ac90:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 800ac94:	b29c      	uxth	r4, r3
 800ac96:	4b5d      	ldr	r3, [pc, #372]	; (800ae0c <tcp_receive+0x968>)
 800ac98:	68db      	ldr	r3, [r3, #12]
 800ac9a:	899b      	ldrh	r3, [r3, #12]
 800ac9c:	b29b      	uxth	r3, r3
 800ac9e:	4618      	mov	r0, r3
 800aca0:	f7fb fc1c 	bl	80064dc <lwip_htons>
 800aca4:	4603      	mov	r3, r0
 800aca6:	f003 033e 	and.w	r3, r3, #62	; 0x3e
 800acaa:	b29b      	uxth	r3, r3
 800acac:	4618      	mov	r0, r3
 800acae:	f7fb fc15 	bl	80064dc <lwip_htons>
 800acb2:	4603      	mov	r3, r0
 800acb4:	461a      	mov	r2, r3
 800acb6:	4b55      	ldr	r3, [pc, #340]	; (800ae0c <tcp_receive+0x968>)
 800acb8:	68db      	ldr	r3, [r3, #12]
 800acba:	4322      	orrs	r2, r4
 800acbc:	b292      	uxth	r2, r2
 800acbe:	819a      	strh	r2, [r3, #12]
          }
          /* Adjust length of segment to fit in the window. */
          TCPWND_CHECK16(pcb->rcv_wnd);
          inseg.len = (u16_t)pcb->rcv_wnd;
 800acc0:	687b      	ldr	r3, [r7, #4]
 800acc2:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 800acc4:	4b51      	ldr	r3, [pc, #324]	; (800ae0c <tcp_receive+0x968>)
 800acc6:	811a      	strh	r2, [r3, #8]
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 800acc8:	4b50      	ldr	r3, [pc, #320]	; (800ae0c <tcp_receive+0x968>)
 800acca:	68db      	ldr	r3, [r3, #12]
 800accc:	899b      	ldrh	r3, [r3, #12]
 800acce:	b29b      	uxth	r3, r3
 800acd0:	4618      	mov	r0, r3
 800acd2:	f7fb fc03 	bl	80064dc <lwip_htons>
 800acd6:	4603      	mov	r3, r0
 800acd8:	f003 0302 	and.w	r3, r3, #2
 800acdc:	2b00      	cmp	r3, #0
 800acde:	d005      	beq.n	800acec <tcp_receive+0x848>
            inseg.len -= 1;
 800ace0:	4b4a      	ldr	r3, [pc, #296]	; (800ae0c <tcp_receive+0x968>)
 800ace2:	891b      	ldrh	r3, [r3, #8]
 800ace4:	3b01      	subs	r3, #1
 800ace6:	b29a      	uxth	r2, r3
 800ace8:	4b48      	ldr	r3, [pc, #288]	; (800ae0c <tcp_receive+0x968>)
 800acea:	811a      	strh	r2, [r3, #8]
          }
          pbuf_realloc(inseg.p, inseg.len);
 800acec:	4b47      	ldr	r3, [pc, #284]	; (800ae0c <tcp_receive+0x968>)
 800acee:	685a      	ldr	r2, [r3, #4]
 800acf0:	4b46      	ldr	r3, [pc, #280]	; (800ae0c <tcp_receive+0x968>)
 800acf2:	891b      	ldrh	r3, [r3, #8]
 800acf4:	4619      	mov	r1, r3
 800acf6:	4610      	mov	r0, r2
 800acf8:	f7fc fca8 	bl	800764c <pbuf_realloc>
          tcplen = TCP_TCPLEN(&inseg);
 800acfc:	4b43      	ldr	r3, [pc, #268]	; (800ae0c <tcp_receive+0x968>)
 800acfe:	891c      	ldrh	r4, [r3, #8]
 800ad00:	4b42      	ldr	r3, [pc, #264]	; (800ae0c <tcp_receive+0x968>)
 800ad02:	68db      	ldr	r3, [r3, #12]
 800ad04:	899b      	ldrh	r3, [r3, #12]
 800ad06:	b29b      	uxth	r3, r3
 800ad08:	4618      	mov	r0, r3
 800ad0a:	f7fb fbe7 	bl	80064dc <lwip_htons>
 800ad0e:	4603      	mov	r3, r0
 800ad10:	f003 0303 	and.w	r3, r3, #3
 800ad14:	2b00      	cmp	r3, #0
 800ad16:	d001      	beq.n	800ad1c <tcp_receive+0x878>
 800ad18:	2301      	movs	r3, #1
 800ad1a:	e000      	b.n	800ad1e <tcp_receive+0x87a>
 800ad1c:	2300      	movs	r3, #0
 800ad1e:	4423      	add	r3, r4
 800ad20:	b29a      	uxth	r2, r3
 800ad22:	4b3b      	ldr	r3, [pc, #236]	; (800ae10 <tcp_receive+0x96c>)
 800ad24:	801a      	strh	r2, [r3, #0]
          LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 800ad26:	4b3a      	ldr	r3, [pc, #232]	; (800ae10 <tcp_receive+0x96c>)
 800ad28:	881b      	ldrh	r3, [r3, #0]
 800ad2a:	461a      	mov	r2, r3
 800ad2c:	4b36      	ldr	r3, [pc, #216]	; (800ae08 <tcp_receive+0x964>)
 800ad2e:	681b      	ldr	r3, [r3, #0]
 800ad30:	441a      	add	r2, r3
 800ad32:	687b      	ldr	r3, [r7, #4]
 800ad34:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ad36:	6879      	ldr	r1, [r7, #4]
 800ad38:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 800ad3a:	440b      	add	r3, r1
 800ad3c:	429a      	cmp	r2, r3
 800ad3e:	d006      	beq.n	800ad4e <tcp_receive+0x8aa>
 800ad40:	4b34      	ldr	r3, [pc, #208]	; (800ae14 <tcp_receive+0x970>)
 800ad42:	f240 527f 	movw	r2, #1407	; 0x57f
 800ad46:	4934      	ldr	r1, [pc, #208]	; (800ae18 <tcp_receive+0x974>)
 800ad48:	4834      	ldr	r0, [pc, #208]	; (800ae1c <tcp_receive+0x978>)
 800ad4a:	f005 fbf1 	bl	8010530 <iprintf>
        }
#if TCP_QUEUE_OOSEQ
        /* Received in-sequence data, adjust ooseq data if:
           - FIN has been received or
           - inseq overlaps with ooseq */
        if (pcb->ooseq != NULL) {
 800ad4e:	687b      	ldr	r3, [r7, #4]
 800ad50:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ad52:	2b00      	cmp	r3, #0
 800ad54:	f000 80e1 	beq.w	800af1a <tcp_receive+0xa76>
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 800ad58:	4b2c      	ldr	r3, [pc, #176]	; (800ae0c <tcp_receive+0x968>)
 800ad5a:	68db      	ldr	r3, [r3, #12]
 800ad5c:	899b      	ldrh	r3, [r3, #12]
 800ad5e:	b29b      	uxth	r3, r3
 800ad60:	4618      	mov	r0, r3
 800ad62:	f7fb fbbb 	bl	80064dc <lwip_htons>
 800ad66:	4603      	mov	r3, r0
 800ad68:	f003 0301 	and.w	r3, r3, #1
 800ad6c:	2b00      	cmp	r3, #0
 800ad6e:	d010      	beq.n	800ad92 <tcp_receive+0x8ee>
            LWIP_DEBUGF(TCP_INPUT_DEBUG,
                        ("tcp_receive: received in-order FIN, binning ooseq queue\n"));
            /* Received in-order FIN means anything that was received
             * out of order must now have been received in-order, so
             * bin the ooseq queue */
            while (pcb->ooseq != NULL) {
 800ad70:	e00a      	b.n	800ad88 <tcp_receive+0x8e4>
              struct tcp_seg *old_ooseq = pcb->ooseq;
 800ad72:	687b      	ldr	r3, [r7, #4]
 800ad74:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ad76:	60bb      	str	r3, [r7, #8]
              pcb->ooseq = pcb->ooseq->next;
 800ad78:	687b      	ldr	r3, [r7, #4]
 800ad7a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ad7c:	681a      	ldr	r2, [r3, #0]
 800ad7e:	687b      	ldr	r3, [r7, #4]
 800ad80:	671a      	str	r2, [r3, #112]	; 0x70
              tcp_seg_free(old_ooseq);
 800ad82:	68b8      	ldr	r0, [r7, #8]
 800ad84:	f7fd ff2e 	bl	8008be4 <tcp_seg_free>
            while (pcb->ooseq != NULL) {
 800ad88:	687b      	ldr	r3, [r7, #4]
 800ad8a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ad8c:	2b00      	cmp	r3, #0
 800ad8e:	d1f0      	bne.n	800ad72 <tcp_receive+0x8ce>
 800ad90:	e0c3      	b.n	800af1a <tcp_receive+0xa76>
            }
          } else {
            next = pcb->ooseq;
 800ad92:	687b      	ldr	r3, [r7, #4]
 800ad94:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ad96:	62fb      	str	r3, [r7, #44]	; 0x2c
            /* Remove all segments on ooseq that are covered by inseg already.
             * FIN is copied from ooseq to inseg if present. */
            while (next &&
 800ad98:	e04f      	b.n	800ae3a <tcp_receive+0x996>
                   TCP_SEQ_GEQ(seqno + tcplen,
                               next->tcphdr->seqno + next->len)) {
              /* inseg cannot have FIN here (already processed above) */
              if ((TCPH_FLAGS(next->tcphdr) & TCP_FIN) != 0 &&
 800ad9a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ad9c:	68db      	ldr	r3, [r3, #12]
 800ad9e:	899b      	ldrh	r3, [r3, #12]
 800ada0:	b29b      	uxth	r3, r3
 800ada2:	4618      	mov	r0, r3
 800ada4:	f7fb fb9a 	bl	80064dc <lwip_htons>
 800ada8:	4603      	mov	r3, r0
 800adaa:	f003 0301 	and.w	r3, r3, #1
 800adae:	2b00      	cmp	r3, #0
 800adb0:	d03b      	beq.n	800ae2a <tcp_receive+0x986>
                  (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) == 0) {
 800adb2:	4b16      	ldr	r3, [pc, #88]	; (800ae0c <tcp_receive+0x968>)
 800adb4:	68db      	ldr	r3, [r3, #12]
 800adb6:	899b      	ldrh	r3, [r3, #12]
 800adb8:	b29b      	uxth	r3, r3
 800adba:	4618      	mov	r0, r3
 800adbc:	f7fb fb8e 	bl	80064dc <lwip_htons>
 800adc0:	4603      	mov	r3, r0
 800adc2:	f003 0302 	and.w	r3, r3, #2
              if ((TCPH_FLAGS(next->tcphdr) & TCP_FIN) != 0 &&
 800adc6:	2b00      	cmp	r3, #0
 800adc8:	d12f      	bne.n	800ae2a <tcp_receive+0x986>
                TCPH_SET_FLAG(inseg.tcphdr, TCP_FIN);
 800adca:	4b10      	ldr	r3, [pc, #64]	; (800ae0c <tcp_receive+0x968>)
 800adcc:	68db      	ldr	r3, [r3, #12]
 800adce:	899b      	ldrh	r3, [r3, #12]
 800add0:	b29c      	uxth	r4, r3
 800add2:	2001      	movs	r0, #1
 800add4:	f7fb fb82 	bl	80064dc <lwip_htons>
 800add8:	4603      	mov	r3, r0
 800adda:	461a      	mov	r2, r3
 800addc:	4b0b      	ldr	r3, [pc, #44]	; (800ae0c <tcp_receive+0x968>)
 800adde:	68db      	ldr	r3, [r3, #12]
 800ade0:	4322      	orrs	r2, r4
 800ade2:	b292      	uxth	r2, r2
 800ade4:	819a      	strh	r2, [r3, #12]
                tcplen = TCP_TCPLEN(&inseg);
 800ade6:	4b09      	ldr	r3, [pc, #36]	; (800ae0c <tcp_receive+0x968>)
 800ade8:	891c      	ldrh	r4, [r3, #8]
 800adea:	4b08      	ldr	r3, [pc, #32]	; (800ae0c <tcp_receive+0x968>)
 800adec:	68db      	ldr	r3, [r3, #12]
 800adee:	899b      	ldrh	r3, [r3, #12]
 800adf0:	b29b      	uxth	r3, r3
 800adf2:	4618      	mov	r0, r3
 800adf4:	f7fb fb72 	bl	80064dc <lwip_htons>
 800adf8:	4603      	mov	r3, r0
 800adfa:	f003 0303 	and.w	r3, r3, #3
 800adfe:	2b00      	cmp	r3, #0
 800ae00:	d00e      	beq.n	800ae20 <tcp_receive+0x97c>
 800ae02:	2301      	movs	r3, #1
 800ae04:	e00d      	b.n	800ae22 <tcp_receive+0x97e>
 800ae06:	bf00      	nop
 800ae08:	24004060 	.word	0x24004060
 800ae0c:	24004040 	.word	0x24004040
 800ae10:	2400406a 	.word	0x2400406a
 800ae14:	080120f8 	.word	0x080120f8
 800ae18:	080123c4 	.word	0x080123c4
 800ae1c:	0801213c 	.word	0x0801213c
 800ae20:	2300      	movs	r3, #0
 800ae22:	4423      	add	r3, r4
 800ae24:	b29a      	uxth	r2, r3
 800ae26:	4b95      	ldr	r3, [pc, #596]	; (800b07c <tcp_receive+0xbd8>)
 800ae28:	801a      	strh	r2, [r3, #0]
              }
              prev = next;
 800ae2a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ae2c:	62bb      	str	r3, [r7, #40]	; 0x28
              next = next->next;
 800ae2e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ae30:	681b      	ldr	r3, [r3, #0]
 800ae32:	62fb      	str	r3, [r7, #44]	; 0x2c
              tcp_seg_free(prev);
 800ae34:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800ae36:	f7fd fed5 	bl	8008be4 <tcp_seg_free>
            while (next &&
 800ae3a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ae3c:	2b00      	cmp	r3, #0
 800ae3e:	d00e      	beq.n	800ae5e <tcp_receive+0x9ba>
                   TCP_SEQ_GEQ(seqno + tcplen,
 800ae40:	4b8e      	ldr	r3, [pc, #568]	; (800b07c <tcp_receive+0xbd8>)
 800ae42:	881b      	ldrh	r3, [r3, #0]
 800ae44:	461a      	mov	r2, r3
 800ae46:	4b8e      	ldr	r3, [pc, #568]	; (800b080 <tcp_receive+0xbdc>)
 800ae48:	681b      	ldr	r3, [r3, #0]
 800ae4a:	441a      	add	r2, r3
 800ae4c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ae4e:	68db      	ldr	r3, [r3, #12]
 800ae50:	685b      	ldr	r3, [r3, #4]
 800ae52:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800ae54:	8909      	ldrh	r1, [r1, #8]
 800ae56:	440b      	add	r3, r1
 800ae58:	1ad3      	subs	r3, r2, r3
            while (next &&
 800ae5a:	2b00      	cmp	r3, #0
 800ae5c:	da9d      	bge.n	800ad9a <tcp_receive+0x8f6>
            }
            /* Now trim right side of inseg if it overlaps with the first
             * segment on ooseq */
            if (next &&
 800ae5e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ae60:	2b00      	cmp	r3, #0
 800ae62:	d057      	beq.n	800af14 <tcp_receive+0xa70>
                TCP_SEQ_GT(seqno + tcplen,
 800ae64:	4b85      	ldr	r3, [pc, #532]	; (800b07c <tcp_receive+0xbd8>)
 800ae66:	881b      	ldrh	r3, [r3, #0]
 800ae68:	461a      	mov	r2, r3
 800ae6a:	4b85      	ldr	r3, [pc, #532]	; (800b080 <tcp_receive+0xbdc>)
 800ae6c:	681b      	ldr	r3, [r3, #0]
 800ae6e:	441a      	add	r2, r3
 800ae70:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ae72:	68db      	ldr	r3, [r3, #12]
 800ae74:	685b      	ldr	r3, [r3, #4]
 800ae76:	1ad3      	subs	r3, r2, r3
            if (next &&
 800ae78:	2b00      	cmp	r3, #0
 800ae7a:	dd4b      	ble.n	800af14 <tcp_receive+0xa70>
                           next->tcphdr->seqno)) {
              /* inseg cannot have FIN here (already processed above) */
              inseg.len = (u16_t)(next->tcphdr->seqno - seqno);
 800ae7c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ae7e:	68db      	ldr	r3, [r3, #12]
 800ae80:	685b      	ldr	r3, [r3, #4]
 800ae82:	b29a      	uxth	r2, r3
 800ae84:	4b7e      	ldr	r3, [pc, #504]	; (800b080 <tcp_receive+0xbdc>)
 800ae86:	681b      	ldr	r3, [r3, #0]
 800ae88:	b29b      	uxth	r3, r3
 800ae8a:	1ad3      	subs	r3, r2, r3
 800ae8c:	b29a      	uxth	r2, r3
 800ae8e:	4b7d      	ldr	r3, [pc, #500]	; (800b084 <tcp_receive+0xbe0>)
 800ae90:	811a      	strh	r2, [r3, #8]
              if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 800ae92:	4b7c      	ldr	r3, [pc, #496]	; (800b084 <tcp_receive+0xbe0>)
 800ae94:	68db      	ldr	r3, [r3, #12]
 800ae96:	899b      	ldrh	r3, [r3, #12]
 800ae98:	b29b      	uxth	r3, r3
 800ae9a:	4618      	mov	r0, r3
 800ae9c:	f7fb fb1e 	bl	80064dc <lwip_htons>
 800aea0:	4603      	mov	r3, r0
 800aea2:	f003 0302 	and.w	r3, r3, #2
 800aea6:	2b00      	cmp	r3, #0
 800aea8:	d005      	beq.n	800aeb6 <tcp_receive+0xa12>
                inseg.len -= 1;
 800aeaa:	4b76      	ldr	r3, [pc, #472]	; (800b084 <tcp_receive+0xbe0>)
 800aeac:	891b      	ldrh	r3, [r3, #8]
 800aeae:	3b01      	subs	r3, #1
 800aeb0:	b29a      	uxth	r2, r3
 800aeb2:	4b74      	ldr	r3, [pc, #464]	; (800b084 <tcp_receive+0xbe0>)
 800aeb4:	811a      	strh	r2, [r3, #8]
              }
              pbuf_realloc(inseg.p, inseg.len);
 800aeb6:	4b73      	ldr	r3, [pc, #460]	; (800b084 <tcp_receive+0xbe0>)
 800aeb8:	685a      	ldr	r2, [r3, #4]
 800aeba:	4b72      	ldr	r3, [pc, #456]	; (800b084 <tcp_receive+0xbe0>)
 800aebc:	891b      	ldrh	r3, [r3, #8]
 800aebe:	4619      	mov	r1, r3
 800aec0:	4610      	mov	r0, r2
 800aec2:	f7fc fbc3 	bl	800764c <pbuf_realloc>
              tcplen = TCP_TCPLEN(&inseg);
 800aec6:	4b6f      	ldr	r3, [pc, #444]	; (800b084 <tcp_receive+0xbe0>)
 800aec8:	891c      	ldrh	r4, [r3, #8]
 800aeca:	4b6e      	ldr	r3, [pc, #440]	; (800b084 <tcp_receive+0xbe0>)
 800aecc:	68db      	ldr	r3, [r3, #12]
 800aece:	899b      	ldrh	r3, [r3, #12]
 800aed0:	b29b      	uxth	r3, r3
 800aed2:	4618      	mov	r0, r3
 800aed4:	f7fb fb02 	bl	80064dc <lwip_htons>
 800aed8:	4603      	mov	r3, r0
 800aeda:	f003 0303 	and.w	r3, r3, #3
 800aede:	2b00      	cmp	r3, #0
 800aee0:	d001      	beq.n	800aee6 <tcp_receive+0xa42>
 800aee2:	2301      	movs	r3, #1
 800aee4:	e000      	b.n	800aee8 <tcp_receive+0xa44>
 800aee6:	2300      	movs	r3, #0
 800aee8:	4423      	add	r3, r4
 800aeea:	b29a      	uxth	r2, r3
 800aeec:	4b63      	ldr	r3, [pc, #396]	; (800b07c <tcp_receive+0xbd8>)
 800aeee:	801a      	strh	r2, [r3, #0]
              LWIP_ASSERT("tcp_receive: segment not trimmed correctly to ooseq queue\n",
 800aef0:	4b62      	ldr	r3, [pc, #392]	; (800b07c <tcp_receive+0xbd8>)
 800aef2:	881b      	ldrh	r3, [r3, #0]
 800aef4:	461a      	mov	r2, r3
 800aef6:	4b62      	ldr	r3, [pc, #392]	; (800b080 <tcp_receive+0xbdc>)
 800aef8:	681b      	ldr	r3, [r3, #0]
 800aefa:	441a      	add	r2, r3
 800aefc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800aefe:	68db      	ldr	r3, [r3, #12]
 800af00:	685b      	ldr	r3, [r3, #4]
 800af02:	429a      	cmp	r2, r3
 800af04:	d006      	beq.n	800af14 <tcp_receive+0xa70>
 800af06:	4b60      	ldr	r3, [pc, #384]	; (800b088 <tcp_receive+0xbe4>)
 800af08:	f240 52af 	movw	r2, #1455	; 0x5af
 800af0c:	495f      	ldr	r1, [pc, #380]	; (800b08c <tcp_receive+0xbe8>)
 800af0e:	4860      	ldr	r0, [pc, #384]	; (800b090 <tcp_receive+0xbec>)
 800af10:	f005 fb0e 	bl	8010530 <iprintf>
                          (seqno + tcplen) == next->tcphdr->seqno);
            }
            pcb->ooseq = next;
 800af14:	687b      	ldr	r3, [r7, #4]
 800af16:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800af18:	671a      	str	r2, [r3, #112]	; 0x70
          }
        }
#endif /* TCP_QUEUE_OOSEQ */

        pcb->rcv_nxt = seqno + tcplen;
 800af1a:	4b58      	ldr	r3, [pc, #352]	; (800b07c <tcp_receive+0xbd8>)
 800af1c:	881b      	ldrh	r3, [r3, #0]
 800af1e:	461a      	mov	r2, r3
 800af20:	4b57      	ldr	r3, [pc, #348]	; (800b080 <tcp_receive+0xbdc>)
 800af22:	681b      	ldr	r3, [r3, #0]
 800af24:	441a      	add	r2, r3
 800af26:	687b      	ldr	r3, [r7, #4]
 800af28:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update the receiver's (our) window. */
        LWIP_ASSERT("tcp_receive: tcplen > rcv_wnd\n", pcb->rcv_wnd >= tcplen);
 800af2a:	687b      	ldr	r3, [r7, #4]
 800af2c:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 800af2e:	4b53      	ldr	r3, [pc, #332]	; (800b07c <tcp_receive+0xbd8>)
 800af30:	881b      	ldrh	r3, [r3, #0]
 800af32:	429a      	cmp	r2, r3
 800af34:	d206      	bcs.n	800af44 <tcp_receive+0xaa0>
 800af36:	4b54      	ldr	r3, [pc, #336]	; (800b088 <tcp_receive+0xbe4>)
 800af38:	f240 52b9 	movw	r2, #1465	; 0x5b9
 800af3c:	4955      	ldr	r1, [pc, #340]	; (800b094 <tcp_receive+0xbf0>)
 800af3e:	4854      	ldr	r0, [pc, #336]	; (800b090 <tcp_receive+0xbec>)
 800af40:	f005 faf6 	bl	8010530 <iprintf>
        pcb->rcv_wnd -= tcplen;
 800af44:	687b      	ldr	r3, [r7, #4]
 800af46:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 800af48:	4b4c      	ldr	r3, [pc, #304]	; (800b07c <tcp_receive+0xbd8>)
 800af4a:	881b      	ldrh	r3, [r3, #0]
 800af4c:	1ad3      	subs	r3, r2, r3
 800af4e:	b29a      	uxth	r2, r3
 800af50:	687b      	ldr	r3, [r7, #4]
 800af52:	851a      	strh	r2, [r3, #40]	; 0x28

        tcp_update_rcv_ann_wnd(pcb);
 800af54:	6878      	ldr	r0, [r7, #4]
 800af56:	f7fd f9f9 	bl	800834c <tcp_update_rcv_ann_wnd>
           chains its data on this pbuf as well.

           If the segment was a FIN, we set the TF_GOT_FIN flag that will
           be used to indicate to the application that the remote side has
           closed its end of the connection. */
        if (inseg.p->tot_len > 0) {
 800af5a:	4b4a      	ldr	r3, [pc, #296]	; (800b084 <tcp_receive+0xbe0>)
 800af5c:	685b      	ldr	r3, [r3, #4]
 800af5e:	891b      	ldrh	r3, [r3, #8]
 800af60:	2b00      	cmp	r3, #0
 800af62:	d006      	beq.n	800af72 <tcp_receive+0xace>
          recv_data = inseg.p;
 800af64:	4b47      	ldr	r3, [pc, #284]	; (800b084 <tcp_receive+0xbe0>)
 800af66:	685b      	ldr	r3, [r3, #4]
 800af68:	4a4b      	ldr	r2, [pc, #300]	; (800b098 <tcp_receive+0xbf4>)
 800af6a:	6013      	str	r3, [r2, #0]
          /* Since this pbuf now is the responsibility of the
             application, we delete our reference to it so that we won't
             (mistakingly) deallocate it. */
          inseg.p = NULL;
 800af6c:	4b45      	ldr	r3, [pc, #276]	; (800b084 <tcp_receive+0xbe0>)
 800af6e:	2200      	movs	r2, #0
 800af70:	605a      	str	r2, [r3, #4]
        }
        if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 800af72:	4b44      	ldr	r3, [pc, #272]	; (800b084 <tcp_receive+0xbe0>)
 800af74:	68db      	ldr	r3, [r3, #12]
 800af76:	899b      	ldrh	r3, [r3, #12]
 800af78:	b29b      	uxth	r3, r3
 800af7a:	4618      	mov	r0, r3
 800af7c:	f7fb faae 	bl	80064dc <lwip_htons>
 800af80:	4603      	mov	r3, r0
 800af82:	f003 0301 	and.w	r3, r3, #1
 800af86:	2b00      	cmp	r3, #0
 800af88:	f000 80b4 	beq.w	800b0f4 <tcp_receive+0xc50>
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: received FIN.\n"));
          recv_flags |= TF_GOT_FIN;
 800af8c:	4b43      	ldr	r3, [pc, #268]	; (800b09c <tcp_receive+0xbf8>)
 800af8e:	781b      	ldrb	r3, [r3, #0]
 800af90:	f043 0320 	orr.w	r3, r3, #32
 800af94:	b2da      	uxtb	r2, r3
 800af96:	4b41      	ldr	r3, [pc, #260]	; (800b09c <tcp_receive+0xbf8>)
 800af98:	701a      	strb	r2, [r3, #0]
        }

#if TCP_QUEUE_OOSEQ
        /* We now check if we have segments on the ->ooseq queue that
           are now in sequence. */
        while (pcb->ooseq != NULL &&
 800af9a:	e0ab      	b.n	800b0f4 <tcp_receive+0xc50>
               pcb->ooseq->tcphdr->seqno == pcb->rcv_nxt) {

          cseg = pcb->ooseq;
 800af9c:	687b      	ldr	r3, [r7, #4]
 800af9e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800afa0:	60fb      	str	r3, [r7, #12]
          seqno = pcb->ooseq->tcphdr->seqno;
 800afa2:	687b      	ldr	r3, [r7, #4]
 800afa4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800afa6:	68db      	ldr	r3, [r3, #12]
 800afa8:	685b      	ldr	r3, [r3, #4]
 800afaa:	4a35      	ldr	r2, [pc, #212]	; (800b080 <tcp_receive+0xbdc>)
 800afac:	6013      	str	r3, [r2, #0]

          pcb->rcv_nxt += TCP_TCPLEN(cseg);
 800afae:	68fb      	ldr	r3, [r7, #12]
 800afb0:	891b      	ldrh	r3, [r3, #8]
 800afb2:	461c      	mov	r4, r3
 800afb4:	68fb      	ldr	r3, [r7, #12]
 800afb6:	68db      	ldr	r3, [r3, #12]
 800afb8:	899b      	ldrh	r3, [r3, #12]
 800afba:	b29b      	uxth	r3, r3
 800afbc:	4618      	mov	r0, r3
 800afbe:	f7fb fa8d 	bl	80064dc <lwip_htons>
 800afc2:	4603      	mov	r3, r0
 800afc4:	f003 0303 	and.w	r3, r3, #3
 800afc8:	2b00      	cmp	r3, #0
 800afca:	d001      	beq.n	800afd0 <tcp_receive+0xb2c>
 800afcc:	2301      	movs	r3, #1
 800afce:	e000      	b.n	800afd2 <tcp_receive+0xb2e>
 800afd0:	2300      	movs	r3, #0
 800afd2:	191a      	adds	r2, r3, r4
 800afd4:	687b      	ldr	r3, [r7, #4]
 800afd6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800afd8:	441a      	add	r2, r3
 800afda:	687b      	ldr	r3, [r7, #4]
 800afdc:	625a      	str	r2, [r3, #36]	; 0x24
          LWIP_ASSERT("tcp_receive: ooseq tcplen > rcv_wnd\n",
 800afde:	687b      	ldr	r3, [r7, #4]
 800afe0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800afe2:	461c      	mov	r4, r3
 800afe4:	68fb      	ldr	r3, [r7, #12]
 800afe6:	891b      	ldrh	r3, [r3, #8]
 800afe8:	461d      	mov	r5, r3
 800afea:	68fb      	ldr	r3, [r7, #12]
 800afec:	68db      	ldr	r3, [r3, #12]
 800afee:	899b      	ldrh	r3, [r3, #12]
 800aff0:	b29b      	uxth	r3, r3
 800aff2:	4618      	mov	r0, r3
 800aff4:	f7fb fa72 	bl	80064dc <lwip_htons>
 800aff8:	4603      	mov	r3, r0
 800affa:	f003 0303 	and.w	r3, r3, #3
 800affe:	2b00      	cmp	r3, #0
 800b000:	d001      	beq.n	800b006 <tcp_receive+0xb62>
 800b002:	2301      	movs	r3, #1
 800b004:	e000      	b.n	800b008 <tcp_receive+0xb64>
 800b006:	2300      	movs	r3, #0
 800b008:	442b      	add	r3, r5
 800b00a:	429c      	cmp	r4, r3
 800b00c:	d206      	bcs.n	800b01c <tcp_receive+0xb78>
 800b00e:	4b1e      	ldr	r3, [pc, #120]	; (800b088 <tcp_receive+0xbe4>)
 800b010:	f240 52de 	movw	r2, #1502	; 0x5de
 800b014:	4922      	ldr	r1, [pc, #136]	; (800b0a0 <tcp_receive+0xbfc>)
 800b016:	481e      	ldr	r0, [pc, #120]	; (800b090 <tcp_receive+0xbec>)
 800b018:	f005 fa8a 	bl	8010530 <iprintf>
                      pcb->rcv_wnd >= TCP_TCPLEN(cseg));
          pcb->rcv_wnd -= TCP_TCPLEN(cseg);
 800b01c:	68fb      	ldr	r3, [r7, #12]
 800b01e:	891b      	ldrh	r3, [r3, #8]
 800b020:	461c      	mov	r4, r3
 800b022:	68fb      	ldr	r3, [r7, #12]
 800b024:	68db      	ldr	r3, [r3, #12]
 800b026:	899b      	ldrh	r3, [r3, #12]
 800b028:	b29b      	uxth	r3, r3
 800b02a:	4618      	mov	r0, r3
 800b02c:	f7fb fa56 	bl	80064dc <lwip_htons>
 800b030:	4603      	mov	r3, r0
 800b032:	f003 0303 	and.w	r3, r3, #3
 800b036:	2b00      	cmp	r3, #0
 800b038:	d001      	beq.n	800b03e <tcp_receive+0xb9a>
 800b03a:	2301      	movs	r3, #1
 800b03c:	e000      	b.n	800b040 <tcp_receive+0xb9c>
 800b03e:	2300      	movs	r3, #0
 800b040:	1919      	adds	r1, r3, r4
 800b042:	687b      	ldr	r3, [r7, #4]
 800b044:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 800b046:	b28b      	uxth	r3, r1
 800b048:	1ad3      	subs	r3, r2, r3
 800b04a:	b29a      	uxth	r2, r3
 800b04c:	687b      	ldr	r3, [r7, #4]
 800b04e:	851a      	strh	r2, [r3, #40]	; 0x28

          tcp_update_rcv_ann_wnd(pcb);
 800b050:	6878      	ldr	r0, [r7, #4]
 800b052:	f7fd f97b 	bl	800834c <tcp_update_rcv_ann_wnd>

          if (cseg->p->tot_len > 0) {
 800b056:	68fb      	ldr	r3, [r7, #12]
 800b058:	685b      	ldr	r3, [r3, #4]
 800b05a:	891b      	ldrh	r3, [r3, #8]
 800b05c:	2b00      	cmp	r3, #0
 800b05e:	d028      	beq.n	800b0b2 <tcp_receive+0xc0e>
            /* Chain this pbuf onto the pbuf that we will pass to
               the application. */
            /* With window scaling, this can overflow recv_data->tot_len, but
               that's not a problem since we explicitly fix that before passing
               recv_data to the application. */
            if (recv_data) {
 800b060:	4b0d      	ldr	r3, [pc, #52]	; (800b098 <tcp_receive+0xbf4>)
 800b062:	681b      	ldr	r3, [r3, #0]
 800b064:	2b00      	cmp	r3, #0
 800b066:	d01d      	beq.n	800b0a4 <tcp_receive+0xc00>
              pbuf_cat(recv_data, cseg->p);
 800b068:	4b0b      	ldr	r3, [pc, #44]	; (800b098 <tcp_receive+0xbf4>)
 800b06a:	681a      	ldr	r2, [r3, #0]
 800b06c:	68fb      	ldr	r3, [r7, #12]
 800b06e:	685b      	ldr	r3, [r3, #4]
 800b070:	4619      	mov	r1, r3
 800b072:	4610      	mov	r0, r2
 800b074:	f7fc fd38 	bl	8007ae8 <pbuf_cat>
 800b078:	e018      	b.n	800b0ac <tcp_receive+0xc08>
 800b07a:	bf00      	nop
 800b07c:	2400406a 	.word	0x2400406a
 800b080:	24004060 	.word	0x24004060
 800b084:	24004040 	.word	0x24004040
 800b088:	080120f8 	.word	0x080120f8
 800b08c:	080123fc 	.word	0x080123fc
 800b090:	0801213c 	.word	0x0801213c
 800b094:	08012438 	.word	0x08012438
 800b098:	24004070 	.word	0x24004070
 800b09c:	2400406d 	.word	0x2400406d
 800b0a0:	08012458 	.word	0x08012458
            } else {
              recv_data = cseg->p;
 800b0a4:	68fb      	ldr	r3, [r7, #12]
 800b0a6:	685b      	ldr	r3, [r3, #4]
 800b0a8:	4a71      	ldr	r2, [pc, #452]	; (800b270 <tcp_receive+0xdcc>)
 800b0aa:	6013      	str	r3, [r2, #0]
            }
            cseg->p = NULL;
 800b0ac:	68fb      	ldr	r3, [r7, #12]
 800b0ae:	2200      	movs	r2, #0
 800b0b0:	605a      	str	r2, [r3, #4]
          }
          if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
 800b0b2:	68fb      	ldr	r3, [r7, #12]
 800b0b4:	68db      	ldr	r3, [r3, #12]
 800b0b6:	899b      	ldrh	r3, [r3, #12]
 800b0b8:	b29b      	uxth	r3, r3
 800b0ba:	4618      	mov	r0, r3
 800b0bc:	f7fb fa0e 	bl	80064dc <lwip_htons>
 800b0c0:	4603      	mov	r3, r0
 800b0c2:	f003 0301 	and.w	r3, r3, #1
 800b0c6:	2b00      	cmp	r3, #0
 800b0c8:	d00d      	beq.n	800b0e6 <tcp_receive+0xc42>
            LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: dequeued FIN.\n"));
            recv_flags |= TF_GOT_FIN;
 800b0ca:	4b6a      	ldr	r3, [pc, #424]	; (800b274 <tcp_receive+0xdd0>)
 800b0cc:	781b      	ldrb	r3, [r3, #0]
 800b0ce:	f043 0320 	orr.w	r3, r3, #32
 800b0d2:	b2da      	uxtb	r2, r3
 800b0d4:	4b67      	ldr	r3, [pc, #412]	; (800b274 <tcp_receive+0xdd0>)
 800b0d6:	701a      	strb	r2, [r3, #0]
            if (pcb->state == ESTABLISHED) { /* force passive close or we can move to active close */
 800b0d8:	687b      	ldr	r3, [r7, #4]
 800b0da:	7d1b      	ldrb	r3, [r3, #20]
 800b0dc:	2b04      	cmp	r3, #4
 800b0de:	d102      	bne.n	800b0e6 <tcp_receive+0xc42>
              pcb->state = CLOSE_WAIT;
 800b0e0:	687b      	ldr	r3, [r7, #4]
 800b0e2:	2207      	movs	r2, #7
 800b0e4:	751a      	strb	r2, [r3, #20]
            }
          }

          pcb->ooseq = cseg->next;
 800b0e6:	68fb      	ldr	r3, [r7, #12]
 800b0e8:	681a      	ldr	r2, [r3, #0]
 800b0ea:	687b      	ldr	r3, [r7, #4]
 800b0ec:	671a      	str	r2, [r3, #112]	; 0x70
          tcp_seg_free(cseg);
 800b0ee:	68f8      	ldr	r0, [r7, #12]
 800b0f0:	f7fd fd78 	bl	8008be4 <tcp_seg_free>
        while (pcb->ooseq != NULL &&
 800b0f4:	687b      	ldr	r3, [r7, #4]
 800b0f6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b0f8:	2b00      	cmp	r3, #0
 800b0fa:	d008      	beq.n	800b10e <tcp_receive+0xc6a>
               pcb->ooseq->tcphdr->seqno == pcb->rcv_nxt) {
 800b0fc:	687b      	ldr	r3, [r7, #4]
 800b0fe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b100:	68db      	ldr	r3, [r3, #12]
 800b102:	685a      	ldr	r2, [r3, #4]
 800b104:	687b      	ldr	r3, [r7, #4]
 800b106:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        while (pcb->ooseq != NULL &&
 800b108:	429a      	cmp	r2, r3
 800b10a:	f43f af47 	beq.w	800af9c <tcp_receive+0xaf8>
        }
#endif /* TCP_QUEUE_OOSEQ */


        /* Acknowledge the segment(s). */
        tcp_ack(pcb);
 800b10e:	687b      	ldr	r3, [r7, #4]
 800b110:	7e9b      	ldrb	r3, [r3, #26]
 800b112:	f003 0301 	and.w	r3, r3, #1
 800b116:	2b00      	cmp	r3, #0
 800b118:	d00e      	beq.n	800b138 <tcp_receive+0xc94>
 800b11a:	687b      	ldr	r3, [r7, #4]
 800b11c:	7e9b      	ldrb	r3, [r3, #26]
 800b11e:	f023 0301 	bic.w	r3, r3, #1
 800b122:	b2da      	uxtb	r2, r3
 800b124:	687b      	ldr	r3, [r7, #4]
 800b126:	769a      	strb	r2, [r3, #26]
 800b128:	687b      	ldr	r3, [r7, #4]
 800b12a:	7e9b      	ldrb	r3, [r3, #26]
 800b12c:	f043 0302 	orr.w	r3, r3, #2
 800b130:	b2da      	uxtb	r2, r3
 800b132:	687b      	ldr	r3, [r7, #4]
 800b134:	769a      	strb	r2, [r3, #26]
      if (pcb->rcv_nxt == seqno) {
 800b136:	e181      	b.n	800b43c <tcp_receive+0xf98>
        tcp_ack(pcb);
 800b138:	687b      	ldr	r3, [r7, #4]
 800b13a:	7e9b      	ldrb	r3, [r3, #26]
 800b13c:	f043 0301 	orr.w	r3, r3, #1
 800b140:	b2da      	uxtb	r2, r3
 800b142:	687b      	ldr	r3, [r7, #4]
 800b144:	769a      	strb	r2, [r3, #26]
      if (pcb->rcv_nxt == seqno) {
 800b146:	e179      	b.n	800b43c <tcp_receive+0xf98>
        }
#endif /* LWIP_IPV6 && LWIP_ND6_TCP_REACHABILITY_HINTS*/

      } else {
        /* We get here if the incoming segment is out-of-sequence. */
        tcp_send_empty_ack(pcb);
 800b148:	6878      	ldr	r0, [r7, #4]
 800b14a:	f000 fc93 	bl	800ba74 <tcp_send_empty_ack>
#if TCP_QUEUE_OOSEQ
        /* We queue the segment on the ->ooseq queue. */
        if (pcb->ooseq == NULL) {
 800b14e:	687b      	ldr	r3, [r7, #4]
 800b150:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b152:	2b00      	cmp	r3, #0
 800b154:	d106      	bne.n	800b164 <tcp_receive+0xcc0>
          pcb->ooseq = tcp_seg_copy(&inseg);
 800b156:	4848      	ldr	r0, [pc, #288]	; (800b278 <tcp_receive+0xdd4>)
 800b158:	f7fd fd5c 	bl	8008c14 <tcp_seg_copy>
 800b15c:	4602      	mov	r2, r0
 800b15e:	687b      	ldr	r3, [r7, #4]
 800b160:	671a      	str	r2, [r3, #112]	; 0x70
      if (pcb->rcv_nxt == seqno) {
 800b162:	e16b      	b.n	800b43c <tcp_receive+0xf98>

             If the incoming segment has the same sequence number as a
             segment on the ->ooseq queue, we discard the segment that
             contains less data. */

          prev = NULL;
 800b164:	2300      	movs	r3, #0
 800b166:	62bb      	str	r3, [r7, #40]	; 0x28
          for (next = pcb->ooseq; next != NULL; next = next->next) {
 800b168:	687b      	ldr	r3, [r7, #4]
 800b16a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b16c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800b16e:	e150      	b.n	800b412 <tcp_receive+0xf6e>
            if (seqno == next->tcphdr->seqno) {
 800b170:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b172:	68db      	ldr	r3, [r3, #12]
 800b174:	685a      	ldr	r2, [r3, #4]
 800b176:	4b41      	ldr	r3, [pc, #260]	; (800b27c <tcp_receive+0xdd8>)
 800b178:	681b      	ldr	r3, [r3, #0]
 800b17a:	429a      	cmp	r2, r3
 800b17c:	d11d      	bne.n	800b1ba <tcp_receive+0xd16>
              /* The sequence number of the incoming segment is the
                 same as the sequence number of the segment on
                 ->ooseq. We check the lengths to see which one to
                 discard. */
              if (inseg.len > next->len) {
 800b17e:	4b3e      	ldr	r3, [pc, #248]	; (800b278 <tcp_receive+0xdd4>)
 800b180:	891a      	ldrh	r2, [r3, #8]
 800b182:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b184:	891b      	ldrh	r3, [r3, #8]
 800b186:	429a      	cmp	r2, r3
 800b188:	f240 8148 	bls.w	800b41c <tcp_receive+0xf78>
                /* The incoming segment is larger than the old
                   segment. We replace some segments with the new
                   one. */
                cseg = tcp_seg_copy(&inseg);
 800b18c:	483a      	ldr	r0, [pc, #232]	; (800b278 <tcp_receive+0xdd4>)
 800b18e:	f7fd fd41 	bl	8008c14 <tcp_seg_copy>
 800b192:	60f8      	str	r0, [r7, #12]
                if (cseg != NULL) {
 800b194:	68fb      	ldr	r3, [r7, #12]
 800b196:	2b00      	cmp	r3, #0
 800b198:	f000 8142 	beq.w	800b420 <tcp_receive+0xf7c>
                  if (prev != NULL) {
 800b19c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b19e:	2b00      	cmp	r3, #0
 800b1a0:	d003      	beq.n	800b1aa <tcp_receive+0xd06>
                    prev->next = cseg;
 800b1a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b1a4:	68fa      	ldr	r2, [r7, #12]
 800b1a6:	601a      	str	r2, [r3, #0]
 800b1a8:	e002      	b.n	800b1b0 <tcp_receive+0xd0c>
                  } else {
                    pcb->ooseq = cseg;
 800b1aa:	687b      	ldr	r3, [r7, #4]
 800b1ac:	68fa      	ldr	r2, [r7, #12]
 800b1ae:	671a      	str	r2, [r3, #112]	; 0x70
                  }
                  tcp_oos_insert_segment(cseg, next);
 800b1b0:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800b1b2:	68f8      	ldr	r0, [r7, #12]
 800b1b4:	f7ff f900 	bl	800a3b8 <tcp_oos_insert_segment>
                }
                break;
 800b1b8:	e132      	b.n	800b420 <tcp_receive+0xf7c>
                   segment was smaller than the old one; in either
                   case, we ditch the incoming segment. */
                break;
              }
            } else {
              if (prev == NULL) {
 800b1ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b1bc:	2b00      	cmp	r3, #0
 800b1be:	d117      	bne.n	800b1f0 <tcp_receive+0xd4c>
                if (TCP_SEQ_LT(seqno, next->tcphdr->seqno)) {
 800b1c0:	4b2e      	ldr	r3, [pc, #184]	; (800b27c <tcp_receive+0xdd8>)
 800b1c2:	681a      	ldr	r2, [r3, #0]
 800b1c4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b1c6:	68db      	ldr	r3, [r3, #12]
 800b1c8:	685b      	ldr	r3, [r3, #4]
 800b1ca:	1ad3      	subs	r3, r2, r3
 800b1cc:	2b00      	cmp	r3, #0
 800b1ce:	da57      	bge.n	800b280 <tcp_receive+0xddc>
                  /* The sequence number of the incoming segment is lower
                     than the sequence number of the first segment on the
                     queue. We put the incoming segment first on the
                     queue. */
                  cseg = tcp_seg_copy(&inseg);
 800b1d0:	4829      	ldr	r0, [pc, #164]	; (800b278 <tcp_receive+0xdd4>)
 800b1d2:	f7fd fd1f 	bl	8008c14 <tcp_seg_copy>
 800b1d6:	60f8      	str	r0, [r7, #12]
                  if (cseg != NULL) {
 800b1d8:	68fb      	ldr	r3, [r7, #12]
 800b1da:	2b00      	cmp	r3, #0
 800b1dc:	f000 8122 	beq.w	800b424 <tcp_receive+0xf80>
                    pcb->ooseq = cseg;
 800b1e0:	687b      	ldr	r3, [r7, #4]
 800b1e2:	68fa      	ldr	r2, [r7, #12]
 800b1e4:	671a      	str	r2, [r3, #112]	; 0x70
                    tcp_oos_insert_segment(cseg, next);
 800b1e6:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800b1e8:	68f8      	ldr	r0, [r7, #12]
 800b1ea:	f7ff f8e5 	bl	800a3b8 <tcp_oos_insert_segment>
                  }
                  break;
 800b1ee:	e119      	b.n	800b424 <tcp_receive+0xf80>
                }
              } else {
                /*if (TCP_SEQ_LT(prev->tcphdr->seqno, seqno) &&
                  TCP_SEQ_LT(seqno, next->tcphdr->seqno)) {*/
                if (TCP_SEQ_BETWEEN(seqno, prev->tcphdr->seqno+1, next->tcphdr->seqno-1)) {
 800b1f0:	4b22      	ldr	r3, [pc, #136]	; (800b27c <tcp_receive+0xdd8>)
 800b1f2:	681a      	ldr	r2, [r3, #0]
 800b1f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b1f6:	68db      	ldr	r3, [r3, #12]
 800b1f8:	685b      	ldr	r3, [r3, #4]
 800b1fa:	1ad3      	subs	r3, r2, r3
 800b1fc:	3b01      	subs	r3, #1
 800b1fe:	2b00      	cmp	r3, #0
 800b200:	db3e      	blt.n	800b280 <tcp_receive+0xddc>
 800b202:	4b1e      	ldr	r3, [pc, #120]	; (800b27c <tcp_receive+0xdd8>)
 800b204:	681a      	ldr	r2, [r3, #0]
 800b206:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b208:	68db      	ldr	r3, [r3, #12]
 800b20a:	685b      	ldr	r3, [r3, #4]
 800b20c:	1ad3      	subs	r3, r2, r3
 800b20e:	3301      	adds	r3, #1
 800b210:	2b00      	cmp	r3, #0
 800b212:	dc35      	bgt.n	800b280 <tcp_receive+0xddc>
                  /* The sequence number of the incoming segment is in
                     between the sequence numbers of the previous and
                     the next segment on ->ooseq. We trim trim the previous
                     segment, delete next segments that included in received segment
                     and trim received, if needed. */
                  cseg = tcp_seg_copy(&inseg);
 800b214:	4818      	ldr	r0, [pc, #96]	; (800b278 <tcp_receive+0xdd4>)
 800b216:	f7fd fcfd 	bl	8008c14 <tcp_seg_copy>
 800b21a:	60f8      	str	r0, [r7, #12]
                  if (cseg != NULL) {
 800b21c:	68fb      	ldr	r3, [r7, #12]
 800b21e:	2b00      	cmp	r3, #0
 800b220:	f000 8102 	beq.w	800b428 <tcp_receive+0xf84>
                    if (TCP_SEQ_GT(prev->tcphdr->seqno + prev->len, seqno)) {
 800b224:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b226:	68db      	ldr	r3, [r3, #12]
 800b228:	685b      	ldr	r3, [r3, #4]
 800b22a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800b22c:	8912      	ldrh	r2, [r2, #8]
 800b22e:	441a      	add	r2, r3
 800b230:	4b12      	ldr	r3, [pc, #72]	; (800b27c <tcp_receive+0xdd8>)
 800b232:	681b      	ldr	r3, [r3, #0]
 800b234:	1ad3      	subs	r3, r2, r3
 800b236:	2b00      	cmp	r3, #0
 800b238:	dd12      	ble.n	800b260 <tcp_receive+0xdbc>
                      /* We need to trim the prev segment. */
                      prev->len = (u16_t)(seqno - prev->tcphdr->seqno);
 800b23a:	4b10      	ldr	r3, [pc, #64]	; (800b27c <tcp_receive+0xdd8>)
 800b23c:	681b      	ldr	r3, [r3, #0]
 800b23e:	b29a      	uxth	r2, r3
 800b240:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b242:	68db      	ldr	r3, [r3, #12]
 800b244:	685b      	ldr	r3, [r3, #4]
 800b246:	b29b      	uxth	r3, r3
 800b248:	1ad3      	subs	r3, r2, r3
 800b24a:	b29a      	uxth	r2, r3
 800b24c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b24e:	811a      	strh	r2, [r3, #8]
                      pbuf_realloc(prev->p, prev->len);
 800b250:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b252:	685a      	ldr	r2, [r3, #4]
 800b254:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b256:	891b      	ldrh	r3, [r3, #8]
 800b258:	4619      	mov	r1, r3
 800b25a:	4610      	mov	r0, r2
 800b25c:	f7fc f9f6 	bl	800764c <pbuf_realloc>
                    }
                    prev->next = cseg;
 800b260:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b262:	68fa      	ldr	r2, [r7, #12]
 800b264:	601a      	str	r2, [r3, #0]
                    tcp_oos_insert_segment(cseg, next);
 800b266:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800b268:	68f8      	ldr	r0, [r7, #12]
 800b26a:	f7ff f8a5 	bl	800a3b8 <tcp_oos_insert_segment>
                  }
                  break;
 800b26e:	e0db      	b.n	800b428 <tcp_receive+0xf84>
 800b270:	24004070 	.word	0x24004070
 800b274:	2400406d 	.word	0x2400406d
 800b278:	24004040 	.word	0x24004040
 800b27c:	24004060 	.word	0x24004060
                }
              }
              /* If the "next" segment is the last segment on the
                 ooseq queue, we add the incoming segment to the end
                 of the list. */
              if (next->next == NULL &&
 800b280:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b282:	681b      	ldr	r3, [r3, #0]
 800b284:	2b00      	cmp	r3, #0
 800b286:	f040 80bf 	bne.w	800b408 <tcp_receive+0xf64>
                  TCP_SEQ_GT(seqno, next->tcphdr->seqno)) {
 800b28a:	4b7c      	ldr	r3, [pc, #496]	; (800b47c <tcp_receive+0xfd8>)
 800b28c:	681a      	ldr	r2, [r3, #0]
 800b28e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b290:	68db      	ldr	r3, [r3, #12]
 800b292:	685b      	ldr	r3, [r3, #4]
 800b294:	1ad3      	subs	r3, r2, r3
              if (next->next == NULL &&
 800b296:	2b00      	cmp	r3, #0
 800b298:	f340 80b6 	ble.w	800b408 <tcp_receive+0xf64>
                if (TCPH_FLAGS(next->tcphdr) & TCP_FIN) {
 800b29c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b29e:	68db      	ldr	r3, [r3, #12]
 800b2a0:	899b      	ldrh	r3, [r3, #12]
 800b2a2:	b29b      	uxth	r3, r3
 800b2a4:	4618      	mov	r0, r3
 800b2a6:	f7fb f919 	bl	80064dc <lwip_htons>
 800b2aa:	4603      	mov	r3, r0
 800b2ac:	f003 0301 	and.w	r3, r3, #1
 800b2b0:	2b00      	cmp	r3, #0
 800b2b2:	f040 80bb 	bne.w	800b42c <tcp_receive+0xf88>
                  /* segment "next" already contains all data */
                  break;
                }
                next->next = tcp_seg_copy(&inseg);
 800b2b6:	4872      	ldr	r0, [pc, #456]	; (800b480 <tcp_receive+0xfdc>)
 800b2b8:	f7fd fcac 	bl	8008c14 <tcp_seg_copy>
 800b2bc:	4602      	mov	r2, r0
 800b2be:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b2c0:	601a      	str	r2, [r3, #0]
                if (next->next != NULL) {
 800b2c2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b2c4:	681b      	ldr	r3, [r3, #0]
 800b2c6:	2b00      	cmp	r3, #0
 800b2c8:	f000 80b2 	beq.w	800b430 <tcp_receive+0xf8c>
                  if (TCP_SEQ_GT(next->tcphdr->seqno + next->len, seqno)) {
 800b2cc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b2ce:	68db      	ldr	r3, [r3, #12]
 800b2d0:	685b      	ldr	r3, [r3, #4]
 800b2d2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800b2d4:	8912      	ldrh	r2, [r2, #8]
 800b2d6:	441a      	add	r2, r3
 800b2d8:	4b68      	ldr	r3, [pc, #416]	; (800b47c <tcp_receive+0xfd8>)
 800b2da:	681b      	ldr	r3, [r3, #0]
 800b2dc:	1ad3      	subs	r3, r2, r3
 800b2de:	2b00      	cmp	r3, #0
 800b2e0:	dd12      	ble.n	800b308 <tcp_receive+0xe64>
                    /* We need to trim the last segment. */
                    next->len = (u16_t)(seqno - next->tcphdr->seqno);
 800b2e2:	4b66      	ldr	r3, [pc, #408]	; (800b47c <tcp_receive+0xfd8>)
 800b2e4:	681b      	ldr	r3, [r3, #0]
 800b2e6:	b29a      	uxth	r2, r3
 800b2e8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b2ea:	68db      	ldr	r3, [r3, #12]
 800b2ec:	685b      	ldr	r3, [r3, #4]
 800b2ee:	b29b      	uxth	r3, r3
 800b2f0:	1ad3      	subs	r3, r2, r3
 800b2f2:	b29a      	uxth	r2, r3
 800b2f4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b2f6:	811a      	strh	r2, [r3, #8]
                    pbuf_realloc(next->p, next->len);
 800b2f8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b2fa:	685a      	ldr	r2, [r3, #4]
 800b2fc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b2fe:	891b      	ldrh	r3, [r3, #8]
 800b300:	4619      	mov	r1, r3
 800b302:	4610      	mov	r0, r2
 800b304:	f7fc f9a2 	bl	800764c <pbuf_realloc>
                  }
                  /* check if the remote side overruns our receive window */
                  if (TCP_SEQ_GT((u32_t)tcplen + seqno, pcb->rcv_nxt + (u32_t)pcb->rcv_wnd)) {
 800b308:	4b5e      	ldr	r3, [pc, #376]	; (800b484 <tcp_receive+0xfe0>)
 800b30a:	881b      	ldrh	r3, [r3, #0]
 800b30c:	461a      	mov	r2, r3
 800b30e:	4b5b      	ldr	r3, [pc, #364]	; (800b47c <tcp_receive+0xfd8>)
 800b310:	681b      	ldr	r3, [r3, #0]
 800b312:	441a      	add	r2, r3
 800b314:	687b      	ldr	r3, [r7, #4]
 800b316:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b318:	6879      	ldr	r1, [r7, #4]
 800b31a:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 800b31c:	440b      	add	r3, r1
 800b31e:	1ad3      	subs	r3, r2, r3
 800b320:	2b00      	cmp	r3, #0
 800b322:	f340 8085 	ble.w	800b430 <tcp_receive+0xf8c>
                    LWIP_DEBUGF(TCP_INPUT_DEBUG,
                                ("tcp_receive: other end overran receive window"
                                 "seqno %"U32_F" len %"U16_F" right edge %"U32_F"\n",
                                 seqno, tcplen, pcb->rcv_nxt + pcb->rcv_wnd));
                    if (TCPH_FLAGS(next->next->tcphdr) & TCP_FIN) {
 800b326:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b328:	681b      	ldr	r3, [r3, #0]
 800b32a:	68db      	ldr	r3, [r3, #12]
 800b32c:	899b      	ldrh	r3, [r3, #12]
 800b32e:	b29b      	uxth	r3, r3
 800b330:	4618      	mov	r0, r3
 800b332:	f7fb f8d3 	bl	80064dc <lwip_htons>
 800b336:	4603      	mov	r3, r0
 800b338:	f003 0301 	and.w	r3, r3, #1
 800b33c:	2b00      	cmp	r3, #0
 800b33e:	d01e      	beq.n	800b37e <tcp_receive+0xeda>
                      /* Must remove the FIN from the header as we're trimming
                       * that byte of sequence-space from the packet */
                      TCPH_FLAGS_SET(next->next->tcphdr, TCPH_FLAGS(next->next->tcphdr) & ~TCP_FIN);
 800b340:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b342:	681b      	ldr	r3, [r3, #0]
 800b344:	68db      	ldr	r3, [r3, #12]
 800b346:	899b      	ldrh	r3, [r3, #12]
 800b348:	b29b      	uxth	r3, r3
 800b34a:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 800b34e:	b29c      	uxth	r4, r3
 800b350:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b352:	681b      	ldr	r3, [r3, #0]
 800b354:	68db      	ldr	r3, [r3, #12]
 800b356:	899b      	ldrh	r3, [r3, #12]
 800b358:	b29b      	uxth	r3, r3
 800b35a:	4618      	mov	r0, r3
 800b35c:	f7fb f8be 	bl	80064dc <lwip_htons>
 800b360:	4603      	mov	r3, r0
 800b362:	f003 033e 	and.w	r3, r3, #62	; 0x3e
 800b366:	b29b      	uxth	r3, r3
 800b368:	4618      	mov	r0, r3
 800b36a:	f7fb f8b7 	bl	80064dc <lwip_htons>
 800b36e:	4603      	mov	r3, r0
 800b370:	461a      	mov	r2, r3
 800b372:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b374:	681b      	ldr	r3, [r3, #0]
 800b376:	68db      	ldr	r3, [r3, #12]
 800b378:	4322      	orrs	r2, r4
 800b37a:	b292      	uxth	r2, r2
 800b37c:	819a      	strh	r2, [r3, #12]
                    }
                    /* Adjust length of segment to fit in the window. */
                    next->next->len = (u16_t)(pcb->rcv_nxt + pcb->rcv_wnd - seqno);
 800b37e:	687b      	ldr	r3, [r7, #4]
 800b380:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b382:	b29a      	uxth	r2, r3
 800b384:	687b      	ldr	r3, [r7, #4]
 800b386:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800b388:	4413      	add	r3, r2
 800b38a:	b299      	uxth	r1, r3
 800b38c:	4b3b      	ldr	r3, [pc, #236]	; (800b47c <tcp_receive+0xfd8>)
 800b38e:	681b      	ldr	r3, [r3, #0]
 800b390:	b29a      	uxth	r2, r3
 800b392:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b394:	681b      	ldr	r3, [r3, #0]
 800b396:	1a8a      	subs	r2, r1, r2
 800b398:	b292      	uxth	r2, r2
 800b39a:	811a      	strh	r2, [r3, #8]
                    pbuf_realloc(next->next->p, next->next->len);
 800b39c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b39e:	681b      	ldr	r3, [r3, #0]
 800b3a0:	685a      	ldr	r2, [r3, #4]
 800b3a2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b3a4:	681b      	ldr	r3, [r3, #0]
 800b3a6:	891b      	ldrh	r3, [r3, #8]
 800b3a8:	4619      	mov	r1, r3
 800b3aa:	4610      	mov	r0, r2
 800b3ac:	f7fc f94e 	bl	800764c <pbuf_realloc>
                    tcplen = TCP_TCPLEN(next->next);
 800b3b0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b3b2:	681b      	ldr	r3, [r3, #0]
 800b3b4:	891c      	ldrh	r4, [r3, #8]
 800b3b6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b3b8:	681b      	ldr	r3, [r3, #0]
 800b3ba:	68db      	ldr	r3, [r3, #12]
 800b3bc:	899b      	ldrh	r3, [r3, #12]
 800b3be:	b29b      	uxth	r3, r3
 800b3c0:	4618      	mov	r0, r3
 800b3c2:	f7fb f88b 	bl	80064dc <lwip_htons>
 800b3c6:	4603      	mov	r3, r0
 800b3c8:	f003 0303 	and.w	r3, r3, #3
 800b3cc:	2b00      	cmp	r3, #0
 800b3ce:	d001      	beq.n	800b3d4 <tcp_receive+0xf30>
 800b3d0:	2301      	movs	r3, #1
 800b3d2:	e000      	b.n	800b3d6 <tcp_receive+0xf32>
 800b3d4:	2300      	movs	r3, #0
 800b3d6:	4423      	add	r3, r4
 800b3d8:	b29a      	uxth	r2, r3
 800b3da:	4b2a      	ldr	r3, [pc, #168]	; (800b484 <tcp_receive+0xfe0>)
 800b3dc:	801a      	strh	r2, [r3, #0]
                    LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 800b3de:	4b29      	ldr	r3, [pc, #164]	; (800b484 <tcp_receive+0xfe0>)
 800b3e0:	881b      	ldrh	r3, [r3, #0]
 800b3e2:	461a      	mov	r2, r3
 800b3e4:	4b25      	ldr	r3, [pc, #148]	; (800b47c <tcp_receive+0xfd8>)
 800b3e6:	681b      	ldr	r3, [r3, #0]
 800b3e8:	441a      	add	r2, r3
 800b3ea:	687b      	ldr	r3, [r7, #4]
 800b3ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b3ee:	6879      	ldr	r1, [r7, #4]
 800b3f0:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 800b3f2:	440b      	add	r3, r1
 800b3f4:	429a      	cmp	r2, r3
 800b3f6:	d01b      	beq.n	800b430 <tcp_receive+0xf8c>
 800b3f8:	4b23      	ldr	r3, [pc, #140]	; (800b488 <tcp_receive+0xfe4>)
 800b3fa:	f240 627b 	movw	r2, #1659	; 0x67b
 800b3fe:	4923      	ldr	r1, [pc, #140]	; (800b48c <tcp_receive+0xfe8>)
 800b400:	4823      	ldr	r0, [pc, #140]	; (800b490 <tcp_receive+0xfec>)
 800b402:	f005 f895 	bl	8010530 <iprintf>
                                (seqno + tcplen) == (pcb->rcv_nxt + pcb->rcv_wnd));
                  }
                }
                break;
 800b406:	e013      	b.n	800b430 <tcp_receive+0xf8c>
              }
            }
            prev = next;
 800b408:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b40a:	62bb      	str	r3, [r7, #40]	; 0x28
          for (next = pcb->ooseq; next != NULL; next = next->next) {
 800b40c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b40e:	681b      	ldr	r3, [r3, #0]
 800b410:	62fb      	str	r3, [r7, #44]	; 0x2c
 800b412:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b414:	2b00      	cmp	r3, #0
 800b416:	f47f aeab 	bne.w	800b170 <tcp_receive+0xccc>
      if (pcb->rcv_nxt == seqno) {
 800b41a:	e00f      	b.n	800b43c <tcp_receive+0xf98>
                break;
 800b41c:	bf00      	nop
 800b41e:	e00d      	b.n	800b43c <tcp_receive+0xf98>
                break;
 800b420:	bf00      	nop
 800b422:	e00b      	b.n	800b43c <tcp_receive+0xf98>
                  break;
 800b424:	bf00      	nop
 800b426:	e009      	b.n	800b43c <tcp_receive+0xf98>
                  break;
 800b428:	bf00      	nop
 800b42a:	e007      	b.n	800b43c <tcp_receive+0xf98>
                  break;
 800b42c:	bf00      	nop
 800b42e:	e005      	b.n	800b43c <tcp_receive+0xf98>
                break;
 800b430:	bf00      	nop
      if (pcb->rcv_nxt == seqno) {
 800b432:	e003      	b.n	800b43c <tcp_receive+0xf98>
#endif /* TCP_OOSEQ_MAX_BYTES || TCP_OOSEQ_MAX_PBUFS */
#endif /* TCP_QUEUE_OOSEQ */
      }
    } else {
      /* The incoming segment is not within the window. */
      tcp_send_empty_ack(pcb);
 800b434:	6878      	ldr	r0, [r7, #4]
 800b436:	f000 fb1d 	bl	800ba74 <tcp_send_empty_ack>
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 800b43a:	e01a      	b.n	800b472 <tcp_receive+0xfce>
 800b43c:	e019      	b.n	800b472 <tcp_receive+0xfce>
    }
  } else {
    /* Segments with length 0 is taken care of here. Segments that
       fall out of the window are ACKed. */
    if (!TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd - 1)) {
 800b43e:	4b0f      	ldr	r3, [pc, #60]	; (800b47c <tcp_receive+0xfd8>)
 800b440:	681a      	ldr	r2, [r3, #0]
 800b442:	687b      	ldr	r3, [r7, #4]
 800b444:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b446:	1ad3      	subs	r3, r2, r3
 800b448:	2b00      	cmp	r3, #0
 800b44a:	db0a      	blt.n	800b462 <tcp_receive+0xfbe>
 800b44c:	4b0b      	ldr	r3, [pc, #44]	; (800b47c <tcp_receive+0xfd8>)
 800b44e:	681a      	ldr	r2, [r3, #0]
 800b450:	687b      	ldr	r3, [r7, #4]
 800b452:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b454:	6879      	ldr	r1, [r7, #4]
 800b456:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 800b458:	440b      	add	r3, r1
 800b45a:	1ad3      	subs	r3, r2, r3
 800b45c:	3301      	adds	r3, #1
 800b45e:	2b00      	cmp	r3, #0
 800b460:	dd07      	ble.n	800b472 <tcp_receive+0xfce>
      tcp_ack_now(pcb);
 800b462:	687b      	ldr	r3, [r7, #4]
 800b464:	7e9b      	ldrb	r3, [r3, #26]
 800b466:	f043 0302 	orr.w	r3, r3, #2
 800b46a:	b2da      	uxtb	r2, r3
 800b46c:	687b      	ldr	r3, [r7, #4]
 800b46e:	769a      	strb	r2, [r3, #26]
    }
  }
}
 800b470:	e7ff      	b.n	800b472 <tcp_receive+0xfce>
 800b472:	bf00      	nop
 800b474:	3734      	adds	r7, #52	; 0x34
 800b476:	46bd      	mov	sp, r7
 800b478:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800b47a:	bf00      	nop
 800b47c:	24004060 	.word	0x24004060
 800b480:	24004040 	.word	0x24004040
 800b484:	2400406a 	.word	0x2400406a
 800b488:	080120f8 	.word	0x080120f8
 800b48c:	080123c4 	.word	0x080123c4
 800b490:	0801213c 	.word	0x0801213c

0800b494 <tcp_getoptbyte>:

static u8_t
tcp_getoptbyte(void)
{
 800b494:	b480      	push	{r7}
 800b496:	b083      	sub	sp, #12
 800b498:	af00      	add	r7, sp, #0
  if ((tcphdr_opt2 == NULL) || (tcp_optidx < tcphdr_opt1len)) {
 800b49a:	4b18      	ldr	r3, [pc, #96]	; (800b4fc <tcp_getoptbyte+0x68>)
 800b49c:	681b      	ldr	r3, [r3, #0]
 800b49e:	2b00      	cmp	r3, #0
 800b4a0:	d005      	beq.n	800b4ae <tcp_getoptbyte+0x1a>
 800b4a2:	4b17      	ldr	r3, [pc, #92]	; (800b500 <tcp_getoptbyte+0x6c>)
 800b4a4:	881a      	ldrh	r2, [r3, #0]
 800b4a6:	4b17      	ldr	r3, [pc, #92]	; (800b504 <tcp_getoptbyte+0x70>)
 800b4a8:	881b      	ldrh	r3, [r3, #0]
 800b4aa:	429a      	cmp	r2, r3
 800b4ac:	d20e      	bcs.n	800b4cc <tcp_getoptbyte+0x38>
    u8_t* opts = (u8_t *)tcphdr + TCP_HLEN;
 800b4ae:	4b16      	ldr	r3, [pc, #88]	; (800b508 <tcp_getoptbyte+0x74>)
 800b4b0:	681b      	ldr	r3, [r3, #0]
 800b4b2:	3314      	adds	r3, #20
 800b4b4:	603b      	str	r3, [r7, #0]
    return opts[tcp_optidx++];
 800b4b6:	4b12      	ldr	r3, [pc, #72]	; (800b500 <tcp_getoptbyte+0x6c>)
 800b4b8:	881b      	ldrh	r3, [r3, #0]
 800b4ba:	1c5a      	adds	r2, r3, #1
 800b4bc:	b291      	uxth	r1, r2
 800b4be:	4a10      	ldr	r2, [pc, #64]	; (800b500 <tcp_getoptbyte+0x6c>)
 800b4c0:	8011      	strh	r1, [r2, #0]
 800b4c2:	461a      	mov	r2, r3
 800b4c4:	683b      	ldr	r3, [r7, #0]
 800b4c6:	4413      	add	r3, r2
 800b4c8:	781b      	ldrb	r3, [r3, #0]
 800b4ca:	e010      	b.n	800b4ee <tcp_getoptbyte+0x5a>
  } else {
    u8_t idx = (u8_t)(tcp_optidx++ - tcphdr_opt1len);
 800b4cc:	4b0c      	ldr	r3, [pc, #48]	; (800b500 <tcp_getoptbyte+0x6c>)
 800b4ce:	881b      	ldrh	r3, [r3, #0]
 800b4d0:	1c5a      	adds	r2, r3, #1
 800b4d2:	b291      	uxth	r1, r2
 800b4d4:	4a0a      	ldr	r2, [pc, #40]	; (800b500 <tcp_getoptbyte+0x6c>)
 800b4d6:	8011      	strh	r1, [r2, #0]
 800b4d8:	b2da      	uxtb	r2, r3
 800b4da:	4b0a      	ldr	r3, [pc, #40]	; (800b504 <tcp_getoptbyte+0x70>)
 800b4dc:	881b      	ldrh	r3, [r3, #0]
 800b4de:	b2db      	uxtb	r3, r3
 800b4e0:	1ad3      	subs	r3, r2, r3
 800b4e2:	71fb      	strb	r3, [r7, #7]
    return tcphdr_opt2[idx];
 800b4e4:	4b05      	ldr	r3, [pc, #20]	; (800b4fc <tcp_getoptbyte+0x68>)
 800b4e6:	681a      	ldr	r2, [r3, #0]
 800b4e8:	79fb      	ldrb	r3, [r7, #7]
 800b4ea:	4413      	add	r3, r2
 800b4ec:	781b      	ldrb	r3, [r3, #0]
  }
}
 800b4ee:	4618      	mov	r0, r3
 800b4f0:	370c      	adds	r7, #12
 800b4f2:	46bd      	mov	sp, r7
 800b4f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b4f8:	4770      	bx	lr
 800b4fa:	bf00      	nop
 800b4fc:	24004058 	.word	0x24004058
 800b500:	2400405c 	.word	0x2400405c
 800b504:	24004056 	.word	0x24004056
 800b508:	24004050 	.word	0x24004050

0800b50c <tcp_parseopt>:
 *
 * @param pcb the tcp_pcb for which a segment arrived
 */
static void
tcp_parseopt(struct tcp_pcb *pcb)
{
 800b50c:	b580      	push	{r7, lr}
 800b50e:	b084      	sub	sp, #16
 800b510:	af00      	add	r7, sp, #0
 800b512:	6078      	str	r0, [r7, #4]
#if LWIP_TCP_TIMESTAMPS
  u32_t tsval;
#endif

  /* Parse the TCP MSS option, if present. */
  if (tcphdr_optlen != 0) {
 800b514:	4b2d      	ldr	r3, [pc, #180]	; (800b5cc <tcp_parseopt+0xc0>)
 800b516:	881b      	ldrh	r3, [r3, #0]
 800b518:	2b00      	cmp	r3, #0
 800b51a:	d054      	beq.n	800b5c6 <tcp_parseopt+0xba>
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 800b51c:	4b2c      	ldr	r3, [pc, #176]	; (800b5d0 <tcp_parseopt+0xc4>)
 800b51e:	2200      	movs	r2, #0
 800b520:	801a      	strh	r2, [r3, #0]
 800b522:	e044      	b.n	800b5ae <tcp_parseopt+0xa2>
      u8_t opt = tcp_getoptbyte();
 800b524:	f7ff ffb6 	bl	800b494 <tcp_getoptbyte>
 800b528:	4603      	mov	r3, r0
 800b52a:	73fb      	strb	r3, [r7, #15]
      switch (opt) {
 800b52c:	7bfb      	ldrb	r3, [r7, #15]
 800b52e:	2b01      	cmp	r3, #1
 800b530:	d03d      	beq.n	800b5ae <tcp_parseopt+0xa2>
 800b532:	2b02      	cmp	r3, #2
 800b534:	d002      	beq.n	800b53c <tcp_parseopt+0x30>
 800b536:	2b00      	cmp	r3, #0
 800b538:	d040      	beq.n	800b5bc <tcp_parseopt+0xb0>
 800b53a:	e027      	b.n	800b58c <tcp_parseopt+0x80>
        /* NOP option. */
        LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: NOP\n"));
        break;
      case LWIP_TCP_OPT_MSS:
        LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: MSS\n"));
        if (tcp_getoptbyte() != LWIP_TCP_OPT_LEN_MSS || (tcp_optidx - 2 + LWIP_TCP_OPT_LEN_MSS) > tcphdr_optlen) {
 800b53c:	f7ff ffaa 	bl	800b494 <tcp_getoptbyte>
 800b540:	4603      	mov	r3, r0
 800b542:	2b04      	cmp	r3, #4
 800b544:	d13c      	bne.n	800b5c0 <tcp_parseopt+0xb4>
 800b546:	4b22      	ldr	r3, [pc, #136]	; (800b5d0 <tcp_parseopt+0xc4>)
 800b548:	881b      	ldrh	r3, [r3, #0]
 800b54a:	3302      	adds	r3, #2
 800b54c:	4a1f      	ldr	r2, [pc, #124]	; (800b5cc <tcp_parseopt+0xc0>)
 800b54e:	8812      	ldrh	r2, [r2, #0]
 800b550:	4293      	cmp	r3, r2
 800b552:	dc35      	bgt.n	800b5c0 <tcp_parseopt+0xb4>
          /* Bad length */
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: bad length\n"));
          return;
        }
        /* An MSS option with the right option length. */
        mss = (tcp_getoptbyte() << 8);
 800b554:	f7ff ff9e 	bl	800b494 <tcp_getoptbyte>
 800b558:	4603      	mov	r3, r0
 800b55a:	b29b      	uxth	r3, r3
 800b55c:	021b      	lsls	r3, r3, #8
 800b55e:	81bb      	strh	r3, [r7, #12]
        mss |= tcp_getoptbyte();
 800b560:	f7ff ff98 	bl	800b494 <tcp_getoptbyte>
 800b564:	4603      	mov	r3, r0
 800b566:	b29a      	uxth	r2, r3
 800b568:	89bb      	ldrh	r3, [r7, #12]
 800b56a:	4313      	orrs	r3, r2
 800b56c:	81bb      	strh	r3, [r7, #12]
        /* Limit the mss to the configured TCP_MSS and prevent division by zero */
        pcb->mss = ((mss > TCP_MSS) || (mss == 0)) ? TCP_MSS : mss;
 800b56e:	89bb      	ldrh	r3, [r7, #12]
 800b570:	f240 52b4 	movw	r2, #1460	; 0x5b4
 800b574:	4293      	cmp	r3, r2
 800b576:	d804      	bhi.n	800b582 <tcp_parseopt+0x76>
 800b578:	89bb      	ldrh	r3, [r7, #12]
 800b57a:	2b00      	cmp	r3, #0
 800b57c:	d001      	beq.n	800b582 <tcp_parseopt+0x76>
 800b57e:	89ba      	ldrh	r2, [r7, #12]
 800b580:	e001      	b.n	800b586 <tcp_parseopt+0x7a>
 800b582:	f240 52b4 	movw	r2, #1460	; 0x5b4
 800b586:	687b      	ldr	r3, [r7, #4]
 800b588:	865a      	strh	r2, [r3, #50]	; 0x32
        break;
 800b58a:	e010      	b.n	800b5ae <tcp_parseopt+0xa2>
        tcp_optidx += LWIP_TCP_OPT_LEN_TS - 6;
        break;
#endif
      default:
        LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: other\n"));
        data = tcp_getoptbyte();
 800b58c:	f7ff ff82 	bl	800b494 <tcp_getoptbyte>
 800b590:	4603      	mov	r3, r0
 800b592:	72fb      	strb	r3, [r7, #11]
        if (data < 2) {
 800b594:	7afb      	ldrb	r3, [r7, #11]
 800b596:	2b01      	cmp	r3, #1
 800b598:	d914      	bls.n	800b5c4 <tcp_parseopt+0xb8>
             and we don't process them further. */
          return;
        }
        /* All other options have a length field, so that we easily
           can skip past them. */
        tcp_optidx += data - 2;
 800b59a:	7afb      	ldrb	r3, [r7, #11]
 800b59c:	b29a      	uxth	r2, r3
 800b59e:	4b0c      	ldr	r3, [pc, #48]	; (800b5d0 <tcp_parseopt+0xc4>)
 800b5a0:	881b      	ldrh	r3, [r3, #0]
 800b5a2:	4413      	add	r3, r2
 800b5a4:	b29b      	uxth	r3, r3
 800b5a6:	3b02      	subs	r3, #2
 800b5a8:	b29a      	uxth	r2, r3
 800b5aa:	4b09      	ldr	r3, [pc, #36]	; (800b5d0 <tcp_parseopt+0xc4>)
 800b5ac:	801a      	strh	r2, [r3, #0]
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 800b5ae:	4b08      	ldr	r3, [pc, #32]	; (800b5d0 <tcp_parseopt+0xc4>)
 800b5b0:	881a      	ldrh	r2, [r3, #0]
 800b5b2:	4b06      	ldr	r3, [pc, #24]	; (800b5cc <tcp_parseopt+0xc0>)
 800b5b4:	881b      	ldrh	r3, [r3, #0]
 800b5b6:	429a      	cmp	r2, r3
 800b5b8:	d3b4      	bcc.n	800b524 <tcp_parseopt+0x18>
 800b5ba:	e004      	b.n	800b5c6 <tcp_parseopt+0xba>
        return;
 800b5bc:	bf00      	nop
 800b5be:	e002      	b.n	800b5c6 <tcp_parseopt+0xba>
          return;
 800b5c0:	bf00      	nop
 800b5c2:	e000      	b.n	800b5c6 <tcp_parseopt+0xba>
          return;
 800b5c4:	bf00      	nop
      }
    }
  }
}
 800b5c6:	3710      	adds	r7, #16
 800b5c8:	46bd      	mov	sp, r7
 800b5ca:	bd80      	pop	{r7, pc}
 800b5cc:	24004054 	.word	0x24004054
 800b5d0:	2400405c 	.word	0x2400405c

0800b5d4 <tcp_trigger_input_pcb_close>:

void
tcp_trigger_input_pcb_close(void)
{
 800b5d4:	b480      	push	{r7}
 800b5d6:	af00      	add	r7, sp, #0
  recv_flags |= TF_CLOSED;
 800b5d8:	4b05      	ldr	r3, [pc, #20]	; (800b5f0 <tcp_trigger_input_pcb_close+0x1c>)
 800b5da:	781b      	ldrb	r3, [r3, #0]
 800b5dc:	f043 0310 	orr.w	r3, r3, #16
 800b5e0:	b2da      	uxtb	r2, r3
 800b5e2:	4b03      	ldr	r3, [pc, #12]	; (800b5f0 <tcp_trigger_input_pcb_close+0x1c>)
 800b5e4:	701a      	strb	r2, [r3, #0]
}
 800b5e6:	bf00      	nop
 800b5e8:	46bd      	mov	sp, r7
 800b5ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b5ee:	4770      	bx	lr
 800b5f0:	2400406d 	.word	0x2400406d

0800b5f4 <tcp_output_alloc_header>:
 * @return pbuf with p->payload being the tcp_hdr
 */
static struct pbuf *
tcp_output_alloc_header(struct tcp_pcb *pcb, u16_t optlen, u16_t datalen,
                      u32_t seqno_be /* already in network byte order */)
{
 800b5f4:	b580      	push	{r7, lr}
 800b5f6:	b086      	sub	sp, #24
 800b5f8:	af00      	add	r7, sp, #0
 800b5fa:	60f8      	str	r0, [r7, #12]
 800b5fc:	607b      	str	r3, [r7, #4]
 800b5fe:	460b      	mov	r3, r1
 800b600:	817b      	strh	r3, [r7, #10]
 800b602:	4613      	mov	r3, r2
 800b604:	813b      	strh	r3, [r7, #8]
  struct tcp_hdr *tcphdr;
  struct pbuf *p = pbuf_alloc(PBUF_IP, TCP_HLEN + optlen + datalen, PBUF_RAM);
 800b606:	897a      	ldrh	r2, [r7, #10]
 800b608:	893b      	ldrh	r3, [r7, #8]
 800b60a:	4413      	add	r3, r2
 800b60c:	b29b      	uxth	r3, r3
 800b60e:	3314      	adds	r3, #20
 800b610:	b29b      	uxth	r3, r3
 800b612:	2200      	movs	r2, #0
 800b614:	4619      	mov	r1, r3
 800b616:	2001      	movs	r0, #1
 800b618:	f7fb fe1a 	bl	8007250 <pbuf_alloc>
 800b61c:	6178      	str	r0, [r7, #20]
  if (p != NULL) {
 800b61e:	697b      	ldr	r3, [r7, #20]
 800b620:	2b00      	cmp	r3, #0
 800b622:	d057      	beq.n	800b6d4 <tcp_output_alloc_header+0xe0>
    LWIP_ASSERT("check that first pbuf can hold struct tcp_hdr",
 800b624:	697b      	ldr	r3, [r7, #20]
 800b626:	895b      	ldrh	r3, [r3, #10]
 800b628:	461a      	mov	r2, r3
 800b62a:	897b      	ldrh	r3, [r7, #10]
 800b62c:	3314      	adds	r3, #20
 800b62e:	429a      	cmp	r2, r3
 800b630:	da05      	bge.n	800b63e <tcp_output_alloc_header+0x4a>
 800b632:	4b2b      	ldr	r3, [pc, #172]	; (800b6e0 <tcp_output_alloc_header+0xec>)
 800b634:	2273      	movs	r2, #115	; 0x73
 800b636:	492b      	ldr	r1, [pc, #172]	; (800b6e4 <tcp_output_alloc_header+0xf0>)
 800b638:	482b      	ldr	r0, [pc, #172]	; (800b6e8 <tcp_output_alloc_header+0xf4>)
 800b63a:	f004 ff79 	bl	8010530 <iprintf>
                 (p->len >= TCP_HLEN + optlen));
    tcphdr = (struct tcp_hdr *)p->payload;
 800b63e:	697b      	ldr	r3, [r7, #20]
 800b640:	685b      	ldr	r3, [r3, #4]
 800b642:	613b      	str	r3, [r7, #16]
    tcphdr->src = lwip_htons(pcb->local_port);
 800b644:	68fb      	ldr	r3, [r7, #12]
 800b646:	8adb      	ldrh	r3, [r3, #22]
 800b648:	4618      	mov	r0, r3
 800b64a:	f7fa ff47 	bl	80064dc <lwip_htons>
 800b64e:	4603      	mov	r3, r0
 800b650:	461a      	mov	r2, r3
 800b652:	693b      	ldr	r3, [r7, #16]
 800b654:	801a      	strh	r2, [r3, #0]
    tcphdr->dest = lwip_htons(pcb->remote_port);
 800b656:	68fb      	ldr	r3, [r7, #12]
 800b658:	8b1b      	ldrh	r3, [r3, #24]
 800b65a:	4618      	mov	r0, r3
 800b65c:	f7fa ff3e 	bl	80064dc <lwip_htons>
 800b660:	4603      	mov	r3, r0
 800b662:	461a      	mov	r2, r3
 800b664:	693b      	ldr	r3, [r7, #16]
 800b666:	805a      	strh	r2, [r3, #2]
    tcphdr->seqno = seqno_be;
 800b668:	693b      	ldr	r3, [r7, #16]
 800b66a:	687a      	ldr	r2, [r7, #4]
 800b66c:	605a      	str	r2, [r3, #4]
    tcphdr->ackno = lwip_htonl(pcb->rcv_nxt);
 800b66e:	68fb      	ldr	r3, [r7, #12]
 800b670:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b672:	4618      	mov	r0, r3
 800b674:	f7fa ff40 	bl	80064f8 <lwip_htonl>
 800b678:	4602      	mov	r2, r0
 800b67a:	693b      	ldr	r3, [r7, #16]
 800b67c:	609a      	str	r2, [r3, #8]
    TCPH_HDRLEN_FLAGS_SET(tcphdr, (5 + optlen / 4), TCP_ACK);
 800b67e:	897b      	ldrh	r3, [r7, #10]
 800b680:	089b      	lsrs	r3, r3, #2
 800b682:	b29b      	uxth	r3, r3
 800b684:	3305      	adds	r3, #5
 800b686:	b29b      	uxth	r3, r3
 800b688:	031b      	lsls	r3, r3, #12
 800b68a:	b29b      	uxth	r3, r3
 800b68c:	f043 0310 	orr.w	r3, r3, #16
 800b690:	b29b      	uxth	r3, r3
 800b692:	4618      	mov	r0, r3
 800b694:	f7fa ff22 	bl	80064dc <lwip_htons>
 800b698:	4603      	mov	r3, r0
 800b69a:	461a      	mov	r2, r3
 800b69c:	693b      	ldr	r3, [r7, #16]
 800b69e:	819a      	strh	r2, [r3, #12]
    tcphdr->wnd = lwip_htons(TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
 800b6a0:	68fb      	ldr	r3, [r7, #12]
 800b6a2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800b6a4:	4618      	mov	r0, r3
 800b6a6:	f7fa ff19 	bl	80064dc <lwip_htons>
 800b6aa:	4603      	mov	r3, r0
 800b6ac:	461a      	mov	r2, r3
 800b6ae:	693b      	ldr	r3, [r7, #16]
 800b6b0:	81da      	strh	r2, [r3, #14]
    tcphdr->chksum = 0;
 800b6b2:	693b      	ldr	r3, [r7, #16]
 800b6b4:	2200      	movs	r2, #0
 800b6b6:	741a      	strb	r2, [r3, #16]
 800b6b8:	2200      	movs	r2, #0
 800b6ba:	745a      	strb	r2, [r3, #17]
    tcphdr->urgp = 0;
 800b6bc:	693b      	ldr	r3, [r7, #16]
 800b6be:	2200      	movs	r2, #0
 800b6c0:	749a      	strb	r2, [r3, #18]
 800b6c2:	2200      	movs	r2, #0
 800b6c4:	74da      	strb	r2, [r3, #19]

    /* If we're sending a packet, update the announced right window edge */
    pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 800b6c6:	68fb      	ldr	r3, [r7, #12]
 800b6c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b6ca:	68fa      	ldr	r2, [r7, #12]
 800b6cc:	8d52      	ldrh	r2, [r2, #42]	; 0x2a
 800b6ce:	441a      	add	r2, r3
 800b6d0:	68fb      	ldr	r3, [r7, #12]
 800b6d2:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  return p;
 800b6d4:	697b      	ldr	r3, [r7, #20]
}
 800b6d6:	4618      	mov	r0, r3
 800b6d8:	3718      	adds	r7, #24
 800b6da:	46bd      	mov	sp, r7
 800b6dc:	bd80      	pop	{r7, pc}
 800b6de:	bf00      	nop
 800b6e0:	08012480 	.word	0x08012480
 800b6e4:	080124b4 	.word	0x080124b4
 800b6e8:	080124e4 	.word	0x080124e4

0800b6ec <tcp_send_fin>:
 * @param pcb the tcp_pcb over which to send a segment
 * @return ERR_OK if sent, another err_t otherwise
 */
err_t
tcp_send_fin(struct tcp_pcb *pcb)
{
 800b6ec:	b590      	push	{r4, r7, lr}
 800b6ee:	b085      	sub	sp, #20
 800b6f0:	af00      	add	r7, sp, #0
 800b6f2:	6078      	str	r0, [r7, #4]
  /* first, try to add the fin to the last unsent segment */
  if (pcb->unsent != NULL) {
 800b6f4:	687b      	ldr	r3, [r7, #4]
 800b6f6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800b6f8:	2b00      	cmp	r3, #0
 800b6fa:	d02d      	beq.n	800b758 <tcp_send_fin+0x6c>
    struct tcp_seg *last_unsent;
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 800b6fc:	687b      	ldr	r3, [r7, #4]
 800b6fe:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800b700:	60fb      	str	r3, [r7, #12]
 800b702:	e002      	b.n	800b70a <tcp_send_fin+0x1e>
         last_unsent = last_unsent->next);
 800b704:	68fb      	ldr	r3, [r7, #12]
 800b706:	681b      	ldr	r3, [r3, #0]
 800b708:	60fb      	str	r3, [r7, #12]
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 800b70a:	68fb      	ldr	r3, [r7, #12]
 800b70c:	681b      	ldr	r3, [r3, #0]
 800b70e:	2b00      	cmp	r3, #0
 800b710:	d1f8      	bne.n	800b704 <tcp_send_fin+0x18>

    if ((TCPH_FLAGS(last_unsent->tcphdr) & (TCP_SYN | TCP_FIN | TCP_RST)) == 0) {
 800b712:	68fb      	ldr	r3, [r7, #12]
 800b714:	68db      	ldr	r3, [r3, #12]
 800b716:	899b      	ldrh	r3, [r3, #12]
 800b718:	b29b      	uxth	r3, r3
 800b71a:	4618      	mov	r0, r3
 800b71c:	f7fa fede 	bl	80064dc <lwip_htons>
 800b720:	4603      	mov	r3, r0
 800b722:	f003 0307 	and.w	r3, r3, #7
 800b726:	2b00      	cmp	r3, #0
 800b728:	d116      	bne.n	800b758 <tcp_send_fin+0x6c>
      /* no SYN/FIN/RST flag in the header, we can add the FIN flag */
      TCPH_SET_FLAG(last_unsent->tcphdr, TCP_FIN);
 800b72a:	68fb      	ldr	r3, [r7, #12]
 800b72c:	68db      	ldr	r3, [r3, #12]
 800b72e:	899b      	ldrh	r3, [r3, #12]
 800b730:	b29c      	uxth	r4, r3
 800b732:	2001      	movs	r0, #1
 800b734:	f7fa fed2 	bl	80064dc <lwip_htons>
 800b738:	4603      	mov	r3, r0
 800b73a:	461a      	mov	r2, r3
 800b73c:	68fb      	ldr	r3, [r7, #12]
 800b73e:	68db      	ldr	r3, [r3, #12]
 800b740:	4322      	orrs	r2, r4
 800b742:	b292      	uxth	r2, r2
 800b744:	819a      	strh	r2, [r3, #12]
      pcb->flags |= TF_FIN;
 800b746:	687b      	ldr	r3, [r7, #4]
 800b748:	7e9b      	ldrb	r3, [r3, #26]
 800b74a:	f043 0320 	orr.w	r3, r3, #32
 800b74e:	b2da      	uxtb	r2, r3
 800b750:	687b      	ldr	r3, [r7, #4]
 800b752:	769a      	strb	r2, [r3, #26]
      return ERR_OK;
 800b754:	2300      	movs	r3, #0
 800b756:	e004      	b.n	800b762 <tcp_send_fin+0x76>
    }
  }
  /* no data, no length, flags, copy=1, no optdata */
  return tcp_enqueue_flags(pcb, TCP_FIN);
 800b758:	2101      	movs	r1, #1
 800b75a:	6878      	ldr	r0, [r7, #4]
 800b75c:	f000 f88e 	bl	800b87c <tcp_enqueue_flags>
 800b760:	4603      	mov	r3, r0
}
 800b762:	4618      	mov	r0, r3
 800b764:	3714      	adds	r7, #20
 800b766:	46bd      	mov	sp, r7
 800b768:	bd90      	pop	{r4, r7, pc}
	...

0800b76c <tcp_create_segment>:
 * The TCP header is filled in except ackno and wnd.
 * p is freed on failure.
 */
static struct tcp_seg *
tcp_create_segment(struct tcp_pcb *pcb, struct pbuf *p, u8_t flags, u32_t seqno, u8_t optflags)
{
 800b76c:	b590      	push	{r4, r7, lr}
 800b76e:	b087      	sub	sp, #28
 800b770:	af00      	add	r7, sp, #0
 800b772:	60f8      	str	r0, [r7, #12]
 800b774:	60b9      	str	r1, [r7, #8]
 800b776:	603b      	str	r3, [r7, #0]
 800b778:	4613      	mov	r3, r2
 800b77a:	71fb      	strb	r3, [r7, #7]
  struct tcp_seg *seg;
  u8_t optlen = LWIP_TCP_OPT_LENGTH(optflags);
 800b77c:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800b780:	009b      	lsls	r3, r3, #2
 800b782:	b2db      	uxtb	r3, r3
 800b784:	f003 0304 	and.w	r3, r3, #4
 800b788:	75fb      	strb	r3, [r7, #23]

  if ((seg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG)) == NULL) {
 800b78a:	2003      	movs	r0, #3
 800b78c:	f7fb fab2 	bl	8006cf4 <memp_malloc>
 800b790:	6138      	str	r0, [r7, #16]
 800b792:	693b      	ldr	r3, [r7, #16]
 800b794:	2b00      	cmp	r3, #0
 800b796:	d104      	bne.n	800b7a2 <tcp_create_segment+0x36>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_create_segment: no memory.\n"));
    pbuf_free(p);
 800b798:	68b8      	ldr	r0, [r7, #8]
 800b79a:	f7fc f8cb 	bl	8007934 <pbuf_free>
    return NULL;
 800b79e:	2300      	movs	r3, #0
 800b7a0:	e061      	b.n	800b866 <tcp_create_segment+0xfa>
  }
  seg->flags = optflags;
 800b7a2:	693b      	ldr	r3, [r7, #16]
 800b7a4:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 800b7a8:	729a      	strb	r2, [r3, #10]
  seg->next = NULL;
 800b7aa:	693b      	ldr	r3, [r7, #16]
 800b7ac:	2200      	movs	r2, #0
 800b7ae:	601a      	str	r2, [r3, #0]
  seg->p = p;
 800b7b0:	693b      	ldr	r3, [r7, #16]
 800b7b2:	68ba      	ldr	r2, [r7, #8]
 800b7b4:	605a      	str	r2, [r3, #4]
  LWIP_ASSERT("p->tot_len >= optlen", p->tot_len >= optlen);
 800b7b6:	68bb      	ldr	r3, [r7, #8]
 800b7b8:	891a      	ldrh	r2, [r3, #8]
 800b7ba:	7dfb      	ldrb	r3, [r7, #23]
 800b7bc:	b29b      	uxth	r3, r3
 800b7be:	429a      	cmp	r2, r3
 800b7c0:	d205      	bcs.n	800b7ce <tcp_create_segment+0x62>
 800b7c2:	4b2b      	ldr	r3, [pc, #172]	; (800b870 <tcp_create_segment+0x104>)
 800b7c4:	22ba      	movs	r2, #186	; 0xba
 800b7c6:	492b      	ldr	r1, [pc, #172]	; (800b874 <tcp_create_segment+0x108>)
 800b7c8:	482b      	ldr	r0, [pc, #172]	; (800b878 <tcp_create_segment+0x10c>)
 800b7ca:	f004 feb1 	bl	8010530 <iprintf>
  seg->len = p->tot_len - optlen;
 800b7ce:	68bb      	ldr	r3, [r7, #8]
 800b7d0:	891a      	ldrh	r2, [r3, #8]
 800b7d2:	7dfb      	ldrb	r3, [r7, #23]
 800b7d4:	b29b      	uxth	r3, r3
 800b7d6:	1ad3      	subs	r3, r2, r3
 800b7d8:	b29a      	uxth	r2, r3
 800b7da:	693b      	ldr	r3, [r7, #16]
 800b7dc:	811a      	strh	r2, [r3, #8]
  LWIP_ASSERT("invalid optflags passed: TF_SEG_DATA_CHECKSUMMED",
              (optflags & TF_SEG_DATA_CHECKSUMMED) == 0);
#endif /* TCP_CHECKSUM_ON_COPY */

  /* build TCP header */
  if (pbuf_header(p, TCP_HLEN)) {
 800b7de:	2114      	movs	r1, #20
 800b7e0:	68b8      	ldr	r0, [r7, #8]
 800b7e2:	f7fc f883 	bl	80078ec <pbuf_header>
 800b7e6:	4603      	mov	r3, r0
 800b7e8:	2b00      	cmp	r3, #0
 800b7ea:	d004      	beq.n	800b7f6 <tcp_create_segment+0x8a>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_create_segment: no room for TCP header in pbuf.\n"));
    TCP_STATS_INC(tcp.err);
    tcp_seg_free(seg);
 800b7ec:	6938      	ldr	r0, [r7, #16]
 800b7ee:	f7fd f9f9 	bl	8008be4 <tcp_seg_free>
    return NULL;
 800b7f2:	2300      	movs	r3, #0
 800b7f4:	e037      	b.n	800b866 <tcp_create_segment+0xfa>
  }
  seg->tcphdr = (struct tcp_hdr *)seg->p->payload;
 800b7f6:	693b      	ldr	r3, [r7, #16]
 800b7f8:	685b      	ldr	r3, [r3, #4]
 800b7fa:	685a      	ldr	r2, [r3, #4]
 800b7fc:	693b      	ldr	r3, [r7, #16]
 800b7fe:	60da      	str	r2, [r3, #12]
  seg->tcphdr->src = lwip_htons(pcb->local_port);
 800b800:	68fb      	ldr	r3, [r7, #12]
 800b802:	8ada      	ldrh	r2, [r3, #22]
 800b804:	693b      	ldr	r3, [r7, #16]
 800b806:	68dc      	ldr	r4, [r3, #12]
 800b808:	4610      	mov	r0, r2
 800b80a:	f7fa fe67 	bl	80064dc <lwip_htons>
 800b80e:	4603      	mov	r3, r0
 800b810:	8023      	strh	r3, [r4, #0]
  seg->tcphdr->dest = lwip_htons(pcb->remote_port);
 800b812:	68fb      	ldr	r3, [r7, #12]
 800b814:	8b1a      	ldrh	r2, [r3, #24]
 800b816:	693b      	ldr	r3, [r7, #16]
 800b818:	68dc      	ldr	r4, [r3, #12]
 800b81a:	4610      	mov	r0, r2
 800b81c:	f7fa fe5e 	bl	80064dc <lwip_htons>
 800b820:	4603      	mov	r3, r0
 800b822:	8063      	strh	r3, [r4, #2]
  seg->tcphdr->seqno = lwip_htonl(seqno);
 800b824:	693b      	ldr	r3, [r7, #16]
 800b826:	68dc      	ldr	r4, [r3, #12]
 800b828:	6838      	ldr	r0, [r7, #0]
 800b82a:	f7fa fe65 	bl	80064f8 <lwip_htonl>
 800b82e:	4603      	mov	r3, r0
 800b830:	6063      	str	r3, [r4, #4]
  /* ackno is set in tcp_output */
  TCPH_HDRLEN_FLAGS_SET(seg->tcphdr, (5 + optlen / 4), flags);
 800b832:	7dfb      	ldrb	r3, [r7, #23]
 800b834:	089b      	lsrs	r3, r3, #2
 800b836:	b2db      	uxtb	r3, r3
 800b838:	b29b      	uxth	r3, r3
 800b83a:	3305      	adds	r3, #5
 800b83c:	b29b      	uxth	r3, r3
 800b83e:	031b      	lsls	r3, r3, #12
 800b840:	b29a      	uxth	r2, r3
 800b842:	79fb      	ldrb	r3, [r7, #7]
 800b844:	b29b      	uxth	r3, r3
 800b846:	4313      	orrs	r3, r2
 800b848:	b29a      	uxth	r2, r3
 800b84a:	693b      	ldr	r3, [r7, #16]
 800b84c:	68dc      	ldr	r4, [r3, #12]
 800b84e:	4610      	mov	r0, r2
 800b850:	f7fa fe44 	bl	80064dc <lwip_htons>
 800b854:	4603      	mov	r3, r0
 800b856:	81a3      	strh	r3, [r4, #12]
  /* wnd and chksum are set in tcp_output */
  seg->tcphdr->urgp = 0;
 800b858:	693b      	ldr	r3, [r7, #16]
 800b85a:	68db      	ldr	r3, [r3, #12]
 800b85c:	2200      	movs	r2, #0
 800b85e:	749a      	strb	r2, [r3, #18]
 800b860:	2200      	movs	r2, #0
 800b862:	74da      	strb	r2, [r3, #19]
  return seg;
 800b864:	693b      	ldr	r3, [r7, #16]
}
 800b866:	4618      	mov	r0, r3
 800b868:	371c      	adds	r7, #28
 800b86a:	46bd      	mov	sp, r7
 800b86c:	bd90      	pop	{r4, r7, pc}
 800b86e:	bf00      	nop
 800b870:	08012480 	.word	0x08012480
 800b874:	0801250c 	.word	0x0801250c
 800b878:	080124e4 	.word	0x080124e4

0800b87c <tcp_enqueue_flags>:
 * @param pcb Protocol control block for the TCP connection.
 * @param flags TCP header flags to set in the outgoing segment.
 */
err_t
tcp_enqueue_flags(struct tcp_pcb *pcb, u8_t flags)
{
 800b87c:	b580      	push	{r7, lr}
 800b87e:	b08a      	sub	sp, #40	; 0x28
 800b880:	af02      	add	r7, sp, #8
 800b882:	6078      	str	r0, [r7, #4]
 800b884:	460b      	mov	r3, r1
 800b886:	70fb      	strb	r3, [r7, #3]
  struct pbuf *p;
  struct tcp_seg *seg;
  u8_t optflags = 0;
 800b888:	2300      	movs	r3, #0
 800b88a:	77fb      	strb	r3, [r7, #31]
  u8_t optlen = 0;
 800b88c:	2300      	movs	r3, #0
 800b88e:	75fb      	strb	r3, [r7, #23]

  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue_flags: queuelen: %"U16_F"\n", (u16_t)pcb->snd_queuelen));

  LWIP_ASSERT("tcp_enqueue_flags: need either TCP_SYN or TCP_FIN in flags (programmer violates API)",
 800b890:	78fb      	ldrb	r3, [r7, #3]
 800b892:	f003 0303 	and.w	r3, r3, #3
 800b896:	2b00      	cmp	r3, #0
 800b898:	d106      	bne.n	800b8a8 <tcp_enqueue_flags+0x2c>
 800b89a:	4b6f      	ldr	r3, [pc, #444]	; (800ba58 <tcp_enqueue_flags+0x1dc>)
 800b89c:	f240 321b 	movw	r2, #795	; 0x31b
 800b8a0:	496e      	ldr	r1, [pc, #440]	; (800ba5c <tcp_enqueue_flags+0x1e0>)
 800b8a2:	486f      	ldr	r0, [pc, #444]	; (800ba60 <tcp_enqueue_flags+0x1e4>)
 800b8a4:	f004 fe44 	bl	8010530 <iprintf>
              (flags & (TCP_SYN | TCP_FIN)) != 0);

  /* check for configured max queuelen and possible overflow (FIN flag should always come through!) */
  if (((pcb->snd_queuelen >= TCP_SND_QUEUELEN) || (pcb->snd_queuelen > TCP_SNDQUEUELEN_OVERFLOW)) &&
 800b8a8:	687b      	ldr	r3, [r7, #4]
 800b8aa:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800b8ae:	2b08      	cmp	r3, #8
 800b8b0:	d806      	bhi.n	800b8c0 <tcp_enqueue_flags+0x44>
 800b8b2:	687b      	ldr	r3, [r7, #4]
 800b8b4:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800b8b8:	f64f 72fc 	movw	r2, #65532	; 0xfffc
 800b8bc:	4293      	cmp	r3, r2
 800b8be:	d90e      	bls.n	800b8de <tcp_enqueue_flags+0x62>
      ((flags & TCP_FIN) == 0)) {
 800b8c0:	78fb      	ldrb	r3, [r7, #3]
 800b8c2:	f003 0301 	and.w	r3, r3, #1
  if (((pcb->snd_queuelen >= TCP_SND_QUEUELEN) || (pcb->snd_queuelen > TCP_SNDQUEUELEN_OVERFLOW)) &&
 800b8c6:	2b00      	cmp	r3, #0
 800b8c8:	d109      	bne.n	800b8de <tcp_enqueue_flags+0x62>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("tcp_enqueue_flags: too long queue %"U16_F" (max %"U16_F")\n",
                                       pcb->snd_queuelen, (u16_t)TCP_SND_QUEUELEN));
    TCP_STATS_INC(tcp.memerr);
    pcb->flags |= TF_NAGLEMEMERR;
 800b8ca:	687b      	ldr	r3, [r7, #4]
 800b8cc:	7e9b      	ldrb	r3, [r3, #26]
 800b8ce:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800b8d2:	b2da      	uxtb	r2, r3
 800b8d4:	687b      	ldr	r3, [r7, #4]
 800b8d6:	769a      	strb	r2, [r3, #26]
    return ERR_MEM;
 800b8d8:	f04f 33ff 	mov.w	r3, #4294967295
 800b8dc:	e0b7      	b.n	800ba4e <tcp_enqueue_flags+0x1d2>
  }

  if (flags & TCP_SYN) {
 800b8de:	78fb      	ldrb	r3, [r7, #3]
 800b8e0:	f003 0302 	and.w	r3, r3, #2
 800b8e4:	2b00      	cmp	r3, #0
 800b8e6:	d001      	beq.n	800b8ec <tcp_enqueue_flags+0x70>
    optflags = TF_SEG_OPTS_MSS;
 800b8e8:	2301      	movs	r3, #1
 800b8ea:	77fb      	strb	r3, [r7, #31]
    /* Make sure the timestamp option is only included in data segments if we
       agreed about it with the remote host. */
    optflags |= TF_SEG_OPTS_TS;
  }
#endif /* LWIP_TCP_TIMESTAMPS */
  optlen = LWIP_TCP_OPT_LENGTH(optflags);
 800b8ec:	7ffb      	ldrb	r3, [r7, #31]
 800b8ee:	009b      	lsls	r3, r3, #2
 800b8f0:	b2db      	uxtb	r3, r3
 800b8f2:	f003 0304 	and.w	r3, r3, #4
 800b8f6:	75fb      	strb	r3, [r7, #23]

  /* Allocate pbuf with room for TCP header + options */
  if ((p = pbuf_alloc(PBUF_TRANSPORT, optlen, PBUF_RAM)) == NULL) {
 800b8f8:	7dfb      	ldrb	r3, [r7, #23]
 800b8fa:	b29b      	uxth	r3, r3
 800b8fc:	2200      	movs	r2, #0
 800b8fe:	4619      	mov	r1, r3
 800b900:	2000      	movs	r0, #0
 800b902:	f7fb fca5 	bl	8007250 <pbuf_alloc>
 800b906:	6138      	str	r0, [r7, #16]
 800b908:	693b      	ldr	r3, [r7, #16]
 800b90a:	2b00      	cmp	r3, #0
 800b90c:	d109      	bne.n	800b922 <tcp_enqueue_flags+0xa6>
    pcb->flags |= TF_NAGLEMEMERR;
 800b90e:	687b      	ldr	r3, [r7, #4]
 800b910:	7e9b      	ldrb	r3, [r3, #26]
 800b912:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800b916:	b2da      	uxtb	r2, r3
 800b918:	687b      	ldr	r3, [r7, #4]
 800b91a:	769a      	strb	r2, [r3, #26]
    TCP_STATS_INC(tcp.memerr);
    return ERR_MEM;
 800b91c:	f04f 33ff 	mov.w	r3, #4294967295
 800b920:	e095      	b.n	800ba4e <tcp_enqueue_flags+0x1d2>
  }
  LWIP_ASSERT("tcp_enqueue_flags: check that first pbuf can hold optlen",
 800b922:	693b      	ldr	r3, [r7, #16]
 800b924:	895a      	ldrh	r2, [r3, #10]
 800b926:	7dfb      	ldrb	r3, [r7, #23]
 800b928:	b29b      	uxth	r3, r3
 800b92a:	429a      	cmp	r2, r3
 800b92c:	d206      	bcs.n	800b93c <tcp_enqueue_flags+0xc0>
 800b92e:	4b4a      	ldr	r3, [pc, #296]	; (800ba58 <tcp_enqueue_flags+0x1dc>)
 800b930:	f240 3241 	movw	r2, #833	; 0x341
 800b934:	494b      	ldr	r1, [pc, #300]	; (800ba64 <tcp_enqueue_flags+0x1e8>)
 800b936:	484a      	ldr	r0, [pc, #296]	; (800ba60 <tcp_enqueue_flags+0x1e4>)
 800b938:	f004 fdfa 	bl	8010530 <iprintf>
              (p->len >= optlen));

  /* Allocate memory for tcp_seg, and fill in fields. */
  if ((seg = tcp_create_segment(pcb, p, flags, pcb->snd_lbb, optflags)) == NULL) {
 800b93c:	687b      	ldr	r3, [r7, #4]
 800b93e:	6d99      	ldr	r1, [r3, #88]	; 0x58
 800b940:	78fa      	ldrb	r2, [r7, #3]
 800b942:	7ffb      	ldrb	r3, [r7, #31]
 800b944:	9300      	str	r3, [sp, #0]
 800b946:	460b      	mov	r3, r1
 800b948:	6939      	ldr	r1, [r7, #16]
 800b94a:	6878      	ldr	r0, [r7, #4]
 800b94c:	f7ff ff0e 	bl	800b76c <tcp_create_segment>
 800b950:	60f8      	str	r0, [r7, #12]
 800b952:	68fb      	ldr	r3, [r7, #12]
 800b954:	2b00      	cmp	r3, #0
 800b956:	d109      	bne.n	800b96c <tcp_enqueue_flags+0xf0>
    pcb->flags |= TF_NAGLEMEMERR;
 800b958:	687b      	ldr	r3, [r7, #4]
 800b95a:	7e9b      	ldrb	r3, [r3, #26]
 800b95c:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800b960:	b2da      	uxtb	r2, r3
 800b962:	687b      	ldr	r3, [r7, #4]
 800b964:	769a      	strb	r2, [r3, #26]
    TCP_STATS_INC(tcp.memerr);
    return ERR_MEM;
 800b966:	f04f 33ff 	mov.w	r3, #4294967295
 800b96a:	e070      	b.n	800ba4e <tcp_enqueue_flags+0x1d2>
  }
  LWIP_ASSERT("seg->tcphdr not aligned", ((mem_ptr_t)seg->tcphdr % LWIP_MIN(MEM_ALIGNMENT, 4)) == 0);
 800b96c:	68fb      	ldr	r3, [r7, #12]
 800b96e:	68db      	ldr	r3, [r3, #12]
 800b970:	f003 0303 	and.w	r3, r3, #3
 800b974:	2b00      	cmp	r3, #0
 800b976:	d006      	beq.n	800b986 <tcp_enqueue_flags+0x10a>
 800b978:	4b37      	ldr	r3, [pc, #220]	; (800ba58 <tcp_enqueue_flags+0x1dc>)
 800b97a:	f240 3249 	movw	r2, #841	; 0x349
 800b97e:	493a      	ldr	r1, [pc, #232]	; (800ba68 <tcp_enqueue_flags+0x1ec>)
 800b980:	4837      	ldr	r0, [pc, #220]	; (800ba60 <tcp_enqueue_flags+0x1e4>)
 800b982:	f004 fdd5 	bl	8010530 <iprintf>
  LWIP_ASSERT("tcp_enqueue_flags: invalid segment length", seg->len == 0);
 800b986:	68fb      	ldr	r3, [r7, #12]
 800b988:	891b      	ldrh	r3, [r3, #8]
 800b98a:	2b00      	cmp	r3, #0
 800b98c:	d006      	beq.n	800b99c <tcp_enqueue_flags+0x120>
 800b98e:	4b32      	ldr	r3, [pc, #200]	; (800ba58 <tcp_enqueue_flags+0x1dc>)
 800b990:	f240 324a 	movw	r2, #842	; 0x34a
 800b994:	4935      	ldr	r1, [pc, #212]	; (800ba6c <tcp_enqueue_flags+0x1f0>)
 800b996:	4832      	ldr	r0, [pc, #200]	; (800ba60 <tcp_enqueue_flags+0x1e4>)
 800b998:	f004 fdca 	bl	8010530 <iprintf>
               lwip_ntohl(seg->tcphdr->seqno),
               lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg),
               (u16_t)flags));

  /* Now append seg to pcb->unsent queue */
  if (pcb->unsent == NULL) {
 800b99c:	687b      	ldr	r3, [r7, #4]
 800b99e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800b9a0:	2b00      	cmp	r3, #0
 800b9a2:	d103      	bne.n	800b9ac <tcp_enqueue_flags+0x130>
    pcb->unsent = seg;
 800b9a4:	687b      	ldr	r3, [r7, #4]
 800b9a6:	68fa      	ldr	r2, [r7, #12]
 800b9a8:	669a      	str	r2, [r3, #104]	; 0x68
 800b9aa:	e00d      	b.n	800b9c8 <tcp_enqueue_flags+0x14c>
  } else {
    struct tcp_seg *useg;
    for (useg = pcb->unsent; useg->next != NULL; useg = useg->next);
 800b9ac:	687b      	ldr	r3, [r7, #4]
 800b9ae:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800b9b0:	61bb      	str	r3, [r7, #24]
 800b9b2:	e002      	b.n	800b9ba <tcp_enqueue_flags+0x13e>
 800b9b4:	69bb      	ldr	r3, [r7, #24]
 800b9b6:	681b      	ldr	r3, [r3, #0]
 800b9b8:	61bb      	str	r3, [r7, #24]
 800b9ba:	69bb      	ldr	r3, [r7, #24]
 800b9bc:	681b      	ldr	r3, [r3, #0]
 800b9be:	2b00      	cmp	r3, #0
 800b9c0:	d1f8      	bne.n	800b9b4 <tcp_enqueue_flags+0x138>
    useg->next = seg;
 800b9c2:	69bb      	ldr	r3, [r7, #24]
 800b9c4:	68fa      	ldr	r2, [r7, #12]
 800b9c6:	601a      	str	r2, [r3, #0]
  }
#if TCP_OVERSIZE
  /* The new unsent tail has no space */
  pcb->unsent_oversize = 0;
 800b9c8:	687b      	ldr	r3, [r7, #4]
 800b9ca:	2200      	movs	r2, #0
 800b9cc:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
#endif /* TCP_OVERSIZE */

  /* SYN and FIN bump the sequence number */
  if ((flags & TCP_SYN) || (flags & TCP_FIN)) {
 800b9d0:	78fb      	ldrb	r3, [r7, #3]
 800b9d2:	f003 0302 	and.w	r3, r3, #2
 800b9d6:	2b00      	cmp	r3, #0
 800b9d8:	d104      	bne.n	800b9e4 <tcp_enqueue_flags+0x168>
 800b9da:	78fb      	ldrb	r3, [r7, #3]
 800b9dc:	f003 0301 	and.w	r3, r3, #1
 800b9e0:	2b00      	cmp	r3, #0
 800b9e2:	d004      	beq.n	800b9ee <tcp_enqueue_flags+0x172>
    pcb->snd_lbb++;
 800b9e4:	687b      	ldr	r3, [r7, #4]
 800b9e6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b9e8:	1c5a      	adds	r2, r3, #1
 800b9ea:	687b      	ldr	r3, [r7, #4]
 800b9ec:	659a      	str	r2, [r3, #88]	; 0x58
    /* optlen does not influence snd_buf */
  }
  if (flags & TCP_FIN) {
 800b9ee:	78fb      	ldrb	r3, [r7, #3]
 800b9f0:	f003 0301 	and.w	r3, r3, #1
 800b9f4:	2b00      	cmp	r3, #0
 800b9f6:	d006      	beq.n	800ba06 <tcp_enqueue_flags+0x18a>
    pcb->flags |= TF_FIN;
 800b9f8:	687b      	ldr	r3, [r7, #4]
 800b9fa:	7e9b      	ldrb	r3, [r3, #26]
 800b9fc:	f043 0320 	orr.w	r3, r3, #32
 800ba00:	b2da      	uxtb	r2, r3
 800ba02:	687b      	ldr	r3, [r7, #4]
 800ba04:	769a      	strb	r2, [r3, #26]
  }

  /* update number of segments on the queues */
  pcb->snd_queuelen += pbuf_clen(seg->p);
 800ba06:	68fb      	ldr	r3, [r7, #12]
 800ba08:	685b      	ldr	r3, [r3, #4]
 800ba0a:	4618      	mov	r0, r3
 800ba0c:	f7fc f82c 	bl	8007a68 <pbuf_clen>
 800ba10:	4603      	mov	r3, r0
 800ba12:	461a      	mov	r2, r3
 800ba14:	687b      	ldr	r3, [r7, #4]
 800ba16:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800ba1a:	4413      	add	r3, r2
 800ba1c:	b29a      	uxth	r2, r3
 800ba1e:	687b      	ldr	r3, [r7, #4]
 800ba20:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue_flags: %"S16_F" (after enqueued)\n", pcb->snd_queuelen));
  if (pcb->snd_queuelen != 0) {
 800ba24:	687b      	ldr	r3, [r7, #4]
 800ba26:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800ba2a:	2b00      	cmp	r3, #0
 800ba2c:	d00e      	beq.n	800ba4c <tcp_enqueue_flags+0x1d0>
    LWIP_ASSERT("tcp_enqueue_flags: invalid queue length",
 800ba2e:	687b      	ldr	r3, [r7, #4]
 800ba30:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800ba32:	2b00      	cmp	r3, #0
 800ba34:	d10a      	bne.n	800ba4c <tcp_enqueue_flags+0x1d0>
 800ba36:	687b      	ldr	r3, [r7, #4]
 800ba38:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800ba3a:	2b00      	cmp	r3, #0
 800ba3c:	d106      	bne.n	800ba4c <tcp_enqueue_flags+0x1d0>
 800ba3e:	4b06      	ldr	r3, [pc, #24]	; (800ba58 <tcp_enqueue_flags+0x1dc>)
 800ba40:	f240 326d 	movw	r2, #877	; 0x36d
 800ba44:	490a      	ldr	r1, [pc, #40]	; (800ba70 <tcp_enqueue_flags+0x1f4>)
 800ba46:	4806      	ldr	r0, [pc, #24]	; (800ba60 <tcp_enqueue_flags+0x1e4>)
 800ba48:	f004 fd72 	bl	8010530 <iprintf>
      pcb->unacked != NULL || pcb->unsent != NULL);
  }

  return ERR_OK;
 800ba4c:	2300      	movs	r3, #0
}
 800ba4e:	4618      	mov	r0, r3
 800ba50:	3720      	adds	r7, #32
 800ba52:	46bd      	mov	sp, r7
 800ba54:	bd80      	pop	{r7, pc}
 800ba56:	bf00      	nop
 800ba58:	08012480 	.word	0x08012480
 800ba5c:	08012784 	.word	0x08012784
 800ba60:	080124e4 	.word	0x080124e4
 800ba64:	080127dc 	.word	0x080127dc
 800ba68:	08012818 	.word	0x08012818
 800ba6c:	08012830 	.word	0x08012830
 800ba70:	0801285c 	.word	0x0801285c

0800ba74 <tcp_send_empty_ack>:
 *
 * @param pcb Protocol control block for the TCP connection to send the ACK
 */
err_t
tcp_send_empty_ack(struct tcp_pcb *pcb)
{
 800ba74:	b590      	push	{r4, r7, lr}
 800ba76:	b08b      	sub	sp, #44	; 0x2c
 800ba78:	af04      	add	r7, sp, #16
 800ba7a:	6078      	str	r0, [r7, #4]
  err_t err;
  struct pbuf *p;
  u8_t optlen = 0;
 800ba7c:	2300      	movs	r3, #0
 800ba7e:	75bb      	strb	r3, [r7, #22]
  if (pcb->flags & TF_TIMESTAMP) {
    optlen = LWIP_TCP_OPT_LENGTH(TF_SEG_OPTS_TS);
  }
#endif

  p = tcp_output_alloc_header(pcb, optlen, 0, lwip_htonl(pcb->snd_nxt));
 800ba80:	7dbb      	ldrb	r3, [r7, #22]
 800ba82:	b29c      	uxth	r4, r3
 800ba84:	687b      	ldr	r3, [r7, #4]
 800ba86:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800ba88:	4618      	mov	r0, r3
 800ba8a:	f7fa fd35 	bl	80064f8 <lwip_htonl>
 800ba8e:	4603      	mov	r3, r0
 800ba90:	2200      	movs	r2, #0
 800ba92:	4621      	mov	r1, r4
 800ba94:	6878      	ldr	r0, [r7, #4]
 800ba96:	f7ff fdad 	bl	800b5f4 <tcp_output_alloc_header>
 800ba9a:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 800ba9c:	693b      	ldr	r3, [r7, #16]
 800ba9e:	2b00      	cmp	r3, #0
 800baa0:	d109      	bne.n	800bab6 <tcp_send_empty_ack+0x42>
    /* let tcp_fasttmr retry sending this ACK */
    pcb->flags |= (TF_ACK_DELAY | TF_ACK_NOW);
 800baa2:	687b      	ldr	r3, [r7, #4]
 800baa4:	7e9b      	ldrb	r3, [r3, #26]
 800baa6:	f043 0303 	orr.w	r3, r3, #3
 800baaa:	b2da      	uxtb	r2, r3
 800baac:	687b      	ldr	r3, [r7, #4]
 800baae:	769a      	strb	r2, [r3, #26]
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_output: (ACK) could not allocate pbuf\n"));
    return ERR_BUF;
 800bab0:	f06f 0301 	mvn.w	r3, #1
 800bab4:	e036      	b.n	800bb24 <tcp_send_empty_ack+0xb0>
  if (pcb->flags & TF_TIMESTAMP) {
    tcp_build_timestamp_option(pcb, (u32_t *)(tcphdr + 1));
  }
#endif

  netif = ip_route(&pcb->local_ip, &pcb->remote_ip);
 800bab6:	687b      	ldr	r3, [r7, #4]
 800bab8:	3304      	adds	r3, #4
 800baba:	4618      	mov	r0, r3
 800babc:	f002 f8e6 	bl	800dc8c <ip4_route>
 800bac0:	60f8      	str	r0, [r7, #12]
  if (netif == NULL) {
 800bac2:	68fb      	ldr	r3, [r7, #12]
 800bac4:	2b00      	cmp	r3, #0
 800bac6:	d102      	bne.n	800bace <tcp_send_empty_ack+0x5a>
    err = ERR_RTE;
 800bac8:	23fc      	movs	r3, #252	; 0xfc
 800baca:	75fb      	strb	r3, [r7, #23]
 800bacc:	e012      	b.n	800baf4 <tcp_send_empty_ack+0x80>
      tcphdr->chksum = ip_chksum_pseudo(p, IP_PROTO_TCP, p->tot_len,
        &pcb->local_ip, &pcb->remote_ip);
    }
#endif
    NETIF_SET_HWADDRHINT(netif, &(pcb->addr_hint));
    err = ip_output_if(p, &pcb->local_ip, &pcb->remote_ip,
 800bace:	6879      	ldr	r1, [r7, #4]
 800bad0:	687b      	ldr	r3, [r7, #4]
 800bad2:	1d18      	adds	r0, r3, #4
 800bad4:	687b      	ldr	r3, [r7, #4]
 800bad6:	7a9c      	ldrb	r4, [r3, #10]
 800bad8:	687b      	ldr	r3, [r7, #4]
 800bada:	7a5b      	ldrb	r3, [r3, #9]
 800badc:	68fa      	ldr	r2, [r7, #12]
 800bade:	9202      	str	r2, [sp, #8]
 800bae0:	2206      	movs	r2, #6
 800bae2:	9201      	str	r2, [sp, #4]
 800bae4:	9300      	str	r3, [sp, #0]
 800bae6:	4623      	mov	r3, r4
 800bae8:	4602      	mov	r2, r0
 800baea:	6938      	ldr	r0, [r7, #16]
 800baec:	f002 fa76 	bl	800dfdc <ip4_output_if>
 800baf0:	4603      	mov	r3, r0
 800baf2:	75fb      	strb	r3, [r7, #23]
      pcb->ttl, pcb->tos, IP_PROTO_TCP, netif);
    NETIF_SET_HWADDRHINT(netif, NULL);
  }
  pbuf_free(p);
 800baf4:	6938      	ldr	r0, [r7, #16]
 800baf6:	f7fb ff1d 	bl	8007934 <pbuf_free>

  if (err != ERR_OK) {
 800bafa:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800bafe:	2b00      	cmp	r3, #0
 800bb00:	d007      	beq.n	800bb12 <tcp_send_empty_ack+0x9e>
    /* let tcp_fasttmr retry sending this ACK */
    pcb->flags |= (TF_ACK_DELAY | TF_ACK_NOW);
 800bb02:	687b      	ldr	r3, [r7, #4]
 800bb04:	7e9b      	ldrb	r3, [r3, #26]
 800bb06:	f043 0303 	orr.w	r3, r3, #3
 800bb0a:	b2da      	uxtb	r2, r3
 800bb0c:	687b      	ldr	r3, [r7, #4]
 800bb0e:	769a      	strb	r2, [r3, #26]
 800bb10:	e006      	b.n	800bb20 <tcp_send_empty_ack+0xac>
  } else {
    /* remove ACK flags from the PCB, as we sent an empty ACK now */
    pcb->flags &= ~(TF_ACK_DELAY | TF_ACK_NOW);
 800bb12:	687b      	ldr	r3, [r7, #4]
 800bb14:	7e9b      	ldrb	r3, [r3, #26]
 800bb16:	f023 0303 	bic.w	r3, r3, #3
 800bb1a:	b2da      	uxtb	r2, r3
 800bb1c:	687b      	ldr	r3, [r7, #4]
 800bb1e:	769a      	strb	r2, [r3, #26]
  }

  return err;
 800bb20:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800bb24:	4618      	mov	r0, r3
 800bb26:	371c      	adds	r7, #28
 800bb28:	46bd      	mov	sp, r7
 800bb2a:	bd90      	pop	{r4, r7, pc}

0800bb2c <tcp_output>:
 * @return ERR_OK if data has been sent or nothing to send
 *         another err_t on error
 */
err_t
tcp_output(struct tcp_pcb *pcb)
{
 800bb2c:	b5b0      	push	{r4, r5, r7, lr}
 800bb2e:	b08a      	sub	sp, #40	; 0x28
 800bb30:	af00      	add	r7, sp, #0
 800bb32:	6078      	str	r0, [r7, #4]
#if TCP_CWND_DEBUG
  s16_t i = 0;
#endif /* TCP_CWND_DEBUG */

  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_output for listen-pcbs",
 800bb34:	687b      	ldr	r3, [r7, #4]
 800bb36:	7d1b      	ldrb	r3, [r3, #20]
 800bb38:	2b01      	cmp	r3, #1
 800bb3a:	d106      	bne.n	800bb4a <tcp_output+0x1e>
 800bb3c:	4b9b      	ldr	r3, [pc, #620]	; (800bdac <tcp_output+0x280>)
 800bb3e:	f240 32ed 	movw	r2, #1005	; 0x3ed
 800bb42:	499b      	ldr	r1, [pc, #620]	; (800bdb0 <tcp_output+0x284>)
 800bb44:	489b      	ldr	r0, [pc, #620]	; (800bdb4 <tcp_output+0x288>)
 800bb46:	f004 fcf3 	bl	8010530 <iprintf>

  /* First, check if we are invoked by the TCP input processing
     code. If so, we do not output anything. Instead, we rely on the
     input processing code to call us when input processing is done
     with. */
  if (tcp_input_pcb == pcb) {
 800bb4a:	4b9b      	ldr	r3, [pc, #620]	; (800bdb8 <tcp_output+0x28c>)
 800bb4c:	681b      	ldr	r3, [r3, #0]
 800bb4e:	687a      	ldr	r2, [r7, #4]
 800bb50:	429a      	cmp	r2, r3
 800bb52:	d101      	bne.n	800bb58 <tcp_output+0x2c>
    return ERR_OK;
 800bb54:	2300      	movs	r3, #0
 800bb56:	e1cf      	b.n	800bef8 <tcp_output+0x3cc>
  }

  wnd = LWIP_MIN(pcb->snd_wnd, pcb->cwnd);
 800bb58:	687b      	ldr	r3, [r7, #4]
 800bb5a:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 800bb5e:	687b      	ldr	r3, [r7, #4]
 800bb60:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 800bb64:	429a      	cmp	r2, r3
 800bb66:	d203      	bcs.n	800bb70 <tcp_output+0x44>
 800bb68:	687b      	ldr	r3, [r7, #4]
 800bb6a:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800bb6e:	e002      	b.n	800bb76 <tcp_output+0x4a>
 800bb70:	687b      	ldr	r3, [r7, #4]
 800bb72:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 800bb76:	61bb      	str	r3, [r7, #24]

  seg = pcb->unsent;
 800bb78:	687b      	ldr	r3, [r7, #4]
 800bb7a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800bb7c:	627b      	str	r3, [r7, #36]	; 0x24
   * because the ->unsent queue is empty or because the window does
   * not allow it), construct an empty ACK segment and send it.
   *
   * If data is to be sent, we will just piggyback the ACK (see below).
   */
  if (pcb->flags & TF_ACK_NOW &&
 800bb7e:	687b      	ldr	r3, [r7, #4]
 800bb80:	7e9b      	ldrb	r3, [r3, #26]
 800bb82:	f003 0302 	and.w	r3, r3, #2
 800bb86:	2b00      	cmp	r3, #0
 800bb88:	d017      	beq.n	800bbba <tcp_output+0x8e>
 800bb8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bb8c:	2b00      	cmp	r3, #0
 800bb8e:	d00f      	beq.n	800bbb0 <tcp_output+0x84>
     (seg == NULL ||
      lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len > wnd)) {
 800bb90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bb92:	68db      	ldr	r3, [r3, #12]
 800bb94:	685b      	ldr	r3, [r3, #4]
 800bb96:	4618      	mov	r0, r3
 800bb98:	f7fa fcae 	bl	80064f8 <lwip_htonl>
 800bb9c:	4602      	mov	r2, r0
 800bb9e:	687b      	ldr	r3, [r7, #4]
 800bba0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800bba2:	1ad3      	subs	r3, r2, r3
 800bba4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800bba6:	8912      	ldrh	r2, [r2, #8]
 800bba8:	4413      	add	r3, r2
     (seg == NULL ||
 800bbaa:	69ba      	ldr	r2, [r7, #24]
 800bbac:	429a      	cmp	r2, r3
 800bbae:	d204      	bcs.n	800bbba <tcp_output+0x8e>
     return tcp_send_empty_ack(pcb);
 800bbb0:	6878      	ldr	r0, [r7, #4]
 800bbb2:	f7ff ff5f 	bl	800ba74 <tcp_send_empty_ack>
 800bbb6:	4603      	mov	r3, r0
 800bbb8:	e19e      	b.n	800bef8 <tcp_output+0x3cc>
  }

  /* useg should point to last segment on unacked queue */
  useg = pcb->unacked;
 800bbba:	687b      	ldr	r3, [r7, #4]
 800bbbc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800bbbe:	623b      	str	r3, [r7, #32]
  if (useg != NULL) {
 800bbc0:	6a3b      	ldr	r3, [r7, #32]
 800bbc2:	2b00      	cmp	r3, #0
 800bbc4:	d007      	beq.n	800bbd6 <tcp_output+0xaa>
    for (; useg->next != NULL; useg = useg->next);
 800bbc6:	e002      	b.n	800bbce <tcp_output+0xa2>
 800bbc8:	6a3b      	ldr	r3, [r7, #32]
 800bbca:	681b      	ldr	r3, [r3, #0]
 800bbcc:	623b      	str	r3, [r7, #32]
 800bbce:	6a3b      	ldr	r3, [r7, #32]
 800bbd0:	681b      	ldr	r3, [r3, #0]
 800bbd2:	2b00      	cmp	r3, #0
 800bbd4:	d1f8      	bne.n	800bbc8 <tcp_output+0x9c>
  }

  netif = ip_route(&pcb->local_ip, &pcb->remote_ip);
 800bbd6:	687b      	ldr	r3, [r7, #4]
 800bbd8:	3304      	adds	r3, #4
 800bbda:	4618      	mov	r0, r3
 800bbdc:	f002 f856 	bl	800dc8c <ip4_route>
 800bbe0:	6178      	str	r0, [r7, #20]
  if (netif == NULL) {
 800bbe2:	697b      	ldr	r3, [r7, #20]
 800bbe4:	2b00      	cmp	r3, #0
 800bbe6:	d102      	bne.n	800bbee <tcp_output+0xc2>
    return ERR_RTE;
 800bbe8:	f06f 0303 	mvn.w	r3, #3
 800bbec:	e184      	b.n	800bef8 <tcp_output+0x3cc>
  }

  /* If we don't have a local IP address, we get one from netif */
  if (ip_addr_isany(&pcb->local_ip)) {
 800bbee:	687b      	ldr	r3, [r7, #4]
 800bbf0:	2b00      	cmp	r3, #0
 800bbf2:	d003      	beq.n	800bbfc <tcp_output+0xd0>
 800bbf4:	687b      	ldr	r3, [r7, #4]
 800bbf6:	681b      	ldr	r3, [r3, #0]
 800bbf8:	2b00      	cmp	r3, #0
 800bbfa:	d111      	bne.n	800bc20 <tcp_output+0xf4>
    const ip_addr_t *local_ip = ip_netif_get_local_ip(netif, &pcb->remote_ip);
 800bbfc:	697b      	ldr	r3, [r7, #20]
 800bbfe:	2b00      	cmp	r3, #0
 800bc00:	d002      	beq.n	800bc08 <tcp_output+0xdc>
 800bc02:	697b      	ldr	r3, [r7, #20]
 800bc04:	3304      	adds	r3, #4
 800bc06:	e000      	b.n	800bc0a <tcp_output+0xde>
 800bc08:	2300      	movs	r3, #0
 800bc0a:	613b      	str	r3, [r7, #16]
    if (local_ip == NULL) {
 800bc0c:	693b      	ldr	r3, [r7, #16]
 800bc0e:	2b00      	cmp	r3, #0
 800bc10:	d102      	bne.n	800bc18 <tcp_output+0xec>
      return ERR_RTE;
 800bc12:	f06f 0303 	mvn.w	r3, #3
 800bc16:	e16f      	b.n	800bef8 <tcp_output+0x3cc>
    }
    ip_addr_copy(pcb->local_ip, *local_ip);
 800bc18:	693b      	ldr	r3, [r7, #16]
 800bc1a:	681a      	ldr	r2, [r3, #0]
 800bc1c:	687b      	ldr	r3, [r7, #4]
 800bc1e:	601a      	str	r2, [r3, #0]
   * with part of the unsent segment (which will engage zero-window probing upon
   * reception of the zero window update from the receiver). This ensures the
   * subsequent window update is reliably received. With the goal of being lightweight,
   * we avoid splitting the unsent segment and treat the window as already zero.
   */
  if (seg != NULL &&
 800bc20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bc22:	2b00      	cmp	r3, #0
 800bc24:	f000 813e 	beq.w	800bea4 <tcp_output+0x378>
      lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len > wnd &&
 800bc28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bc2a:	68db      	ldr	r3, [r3, #12]
 800bc2c:	685b      	ldr	r3, [r3, #4]
 800bc2e:	4618      	mov	r0, r3
 800bc30:	f7fa fc62 	bl	80064f8 <lwip_htonl>
 800bc34:	4602      	mov	r2, r0
 800bc36:	687b      	ldr	r3, [r7, #4]
 800bc38:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800bc3a:	1ad3      	subs	r3, r2, r3
 800bc3c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800bc3e:	8912      	ldrh	r2, [r2, #8]
 800bc40:	4413      	add	r3, r2
  if (seg != NULL &&
 800bc42:	69ba      	ldr	r2, [r7, #24]
 800bc44:	429a      	cmp	r2, r3
 800bc46:	f080 812d 	bcs.w	800bea4 <tcp_output+0x378>
      lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len > wnd &&
 800bc4a:	69bb      	ldr	r3, [r7, #24]
 800bc4c:	2b00      	cmp	r3, #0
 800bc4e:	f000 8129 	beq.w	800bea4 <tcp_output+0x378>
      wnd > 0 && wnd == pcb->snd_wnd && pcb->unacked == NULL) {
 800bc52:	687b      	ldr	r3, [r7, #4]
 800bc54:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800bc58:	461a      	mov	r2, r3
 800bc5a:	69bb      	ldr	r3, [r7, #24]
 800bc5c:	4293      	cmp	r3, r2
 800bc5e:	f040 8121 	bne.w	800bea4 <tcp_output+0x378>
 800bc62:	687b      	ldr	r3, [r7, #4]
 800bc64:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800bc66:	2b00      	cmp	r3, #0
 800bc68:	f040 811c 	bne.w	800bea4 <tcp_output+0x378>
    /* Start the persist timer */
    if (pcb->persist_backoff == 0) {
 800bc6c:	687b      	ldr	r3, [r7, #4]
 800bc6e:	f893 3095 	ldrb.w	r3, [r3, #149]	; 0x95
 800bc72:	2b00      	cmp	r3, #0
 800bc74:	f040 812b 	bne.w	800bece <tcp_output+0x3a2>
      pcb->persist_cnt = 0;
 800bc78:	687b      	ldr	r3, [r7, #4]
 800bc7a:	2200      	movs	r2, #0
 800bc7c:	f883 2094 	strb.w	r2, [r3, #148]	; 0x94
      pcb->persist_backoff = 1;
 800bc80:	687b      	ldr	r3, [r7, #4]
 800bc82:	2201      	movs	r2, #1
 800bc84:	f883 2095 	strb.w	r2, [r3, #149]	; 0x95
    }
    goto output_done;
 800bc88:	e121      	b.n	800bece <tcp_output+0x3a2>
  }
  /* data available and window allows it to be sent? */
  while (seg != NULL &&
         lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len <= wnd) {
    LWIP_ASSERT("RST not expected here!",
 800bc8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bc8c:	68db      	ldr	r3, [r3, #12]
 800bc8e:	899b      	ldrh	r3, [r3, #12]
 800bc90:	b29b      	uxth	r3, r3
 800bc92:	4618      	mov	r0, r3
 800bc94:	f7fa fc22 	bl	80064dc <lwip_htons>
 800bc98:	4603      	mov	r3, r0
 800bc9a:	f003 0304 	and.w	r3, r3, #4
 800bc9e:	2b00      	cmp	r3, #0
 800bca0:	d006      	beq.n	800bcb0 <tcp_output+0x184>
 800bca2:	4b42      	ldr	r3, [pc, #264]	; (800bdac <tcp_output+0x280>)
 800bca4:	f240 4246 	movw	r2, #1094	; 0x446
 800bca8:	4944      	ldr	r1, [pc, #272]	; (800bdbc <tcp_output+0x290>)
 800bcaa:	4842      	ldr	r0, [pc, #264]	; (800bdb4 <tcp_output+0x288>)
 800bcac:	f004 fc40 	bl	8010530 <iprintf>
     * - if tcp_write had a memory error before (prevent delayed ACK timeout) or
     * - if FIN was already enqueued for this PCB (SYN is always alone in a segment -
     *   either seg->next != NULL or pcb->unacked == NULL;
     *   RST is no sent using tcp_write/tcp_output.
     */
    if ((tcp_do_output_nagle(pcb) == 0) &&
 800bcb0:	687b      	ldr	r3, [r7, #4]
 800bcb2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800bcb4:	2b00      	cmp	r3, #0
 800bcb6:	d01f      	beq.n	800bcf8 <tcp_output+0x1cc>
 800bcb8:	687b      	ldr	r3, [r7, #4]
 800bcba:	7e9b      	ldrb	r3, [r3, #26]
 800bcbc:	f003 0344 	and.w	r3, r3, #68	; 0x44
 800bcc0:	2b00      	cmp	r3, #0
 800bcc2:	d119      	bne.n	800bcf8 <tcp_output+0x1cc>
 800bcc4:	687b      	ldr	r3, [r7, #4]
 800bcc6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800bcc8:	2b00      	cmp	r3, #0
 800bcca:	d00b      	beq.n	800bce4 <tcp_output+0x1b8>
 800bccc:	687b      	ldr	r3, [r7, #4]
 800bcce:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800bcd0:	681b      	ldr	r3, [r3, #0]
 800bcd2:	2b00      	cmp	r3, #0
 800bcd4:	d110      	bne.n	800bcf8 <tcp_output+0x1cc>
 800bcd6:	687b      	ldr	r3, [r7, #4]
 800bcd8:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800bcda:	891a      	ldrh	r2, [r3, #8]
 800bcdc:	687b      	ldr	r3, [r7, #4]
 800bcde:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800bce0:	429a      	cmp	r2, r3
 800bce2:	d209      	bcs.n	800bcf8 <tcp_output+0x1cc>
 800bce4:	687b      	ldr	r3, [r7, #4]
 800bce6:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800bcea:	2b00      	cmp	r3, #0
 800bcec:	d004      	beq.n	800bcf8 <tcp_output+0x1cc>
 800bcee:	687b      	ldr	r3, [r7, #4]
 800bcf0:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800bcf4:	2b08      	cmp	r3, #8
 800bcf6:	d901      	bls.n	800bcfc <tcp_output+0x1d0>
 800bcf8:	2301      	movs	r3, #1
 800bcfa:	e000      	b.n	800bcfe <tcp_output+0x1d2>
 800bcfc:	2300      	movs	r3, #0
 800bcfe:	2b00      	cmp	r3, #0
 800bd00:	d106      	bne.n	800bd10 <tcp_output+0x1e4>
      ((pcb->flags & (TF_NAGLEMEMERR | TF_FIN)) == 0)) {
 800bd02:	687b      	ldr	r3, [r7, #4]
 800bd04:	7e9b      	ldrb	r3, [r3, #26]
 800bd06:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
    if ((tcp_do_output_nagle(pcb) == 0) &&
 800bd0a:	2b00      	cmp	r3, #0
 800bd0c:	f000 80e1 	beq.w	800bed2 <tcp_output+0x3a6>
                            pcb->lastack,
                            lwip_ntohl(seg->tcphdr->seqno), pcb->lastack, i));
    ++i;
#endif /* TCP_CWND_DEBUG */

    if (pcb->state != SYN_SENT) {
 800bd10:	687b      	ldr	r3, [r7, #4]
 800bd12:	7d1b      	ldrb	r3, [r3, #20]
 800bd14:	2b02      	cmp	r3, #2
 800bd16:	d00d      	beq.n	800bd34 <tcp_output+0x208>
      TCPH_SET_FLAG(seg->tcphdr, TCP_ACK);
 800bd18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bd1a:	68db      	ldr	r3, [r3, #12]
 800bd1c:	899b      	ldrh	r3, [r3, #12]
 800bd1e:	b29c      	uxth	r4, r3
 800bd20:	2010      	movs	r0, #16
 800bd22:	f7fa fbdb 	bl	80064dc <lwip_htons>
 800bd26:	4603      	mov	r3, r0
 800bd28:	461a      	mov	r2, r3
 800bd2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bd2c:	68db      	ldr	r3, [r3, #12]
 800bd2e:	4322      	orrs	r2, r4
 800bd30:	b292      	uxth	r2, r2
 800bd32:	819a      	strh	r2, [r3, #12]
    }

#if TCP_OVERSIZE_DBGCHECK
    seg->oversize_left = 0;
#endif /* TCP_OVERSIZE_DBGCHECK */
    err = tcp_output_segment(seg, pcb, netif);
 800bd34:	697a      	ldr	r2, [r7, #20]
 800bd36:	6879      	ldr	r1, [r7, #4]
 800bd38:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800bd3a:	f000 f8e1 	bl	800bf00 <tcp_output_segment>
 800bd3e:	4603      	mov	r3, r0
 800bd40:	73fb      	strb	r3, [r7, #15]
    if (err != ERR_OK) {
 800bd42:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800bd46:	2b00      	cmp	r3, #0
 800bd48:	d009      	beq.n	800bd5e <tcp_output+0x232>
      /* segment could not be sent, for whatever reason */
      pcb->flags |= TF_NAGLEMEMERR;
 800bd4a:	687b      	ldr	r3, [r7, #4]
 800bd4c:	7e9b      	ldrb	r3, [r3, #26]
 800bd4e:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800bd52:	b2da      	uxtb	r2, r3
 800bd54:	687b      	ldr	r3, [r7, #4]
 800bd56:	769a      	strb	r2, [r3, #26]
      return err;
 800bd58:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800bd5c:	e0cc      	b.n	800bef8 <tcp_output+0x3cc>
    }
    pcb->unsent = seg->next;
 800bd5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bd60:	681a      	ldr	r2, [r3, #0]
 800bd62:	687b      	ldr	r3, [r7, #4]
 800bd64:	669a      	str	r2, [r3, #104]	; 0x68
    if (pcb->state != SYN_SENT) {
 800bd66:	687b      	ldr	r3, [r7, #4]
 800bd68:	7d1b      	ldrb	r3, [r3, #20]
 800bd6a:	2b02      	cmp	r3, #2
 800bd6c:	d006      	beq.n	800bd7c <tcp_output+0x250>
      pcb->flags &= ~(TF_ACK_DELAY | TF_ACK_NOW);
 800bd6e:	687b      	ldr	r3, [r7, #4]
 800bd70:	7e9b      	ldrb	r3, [r3, #26]
 800bd72:	f023 0303 	bic.w	r3, r3, #3
 800bd76:	b2da      	uxtb	r2, r3
 800bd78:	687b      	ldr	r3, [r7, #4]
 800bd7a:	769a      	strb	r2, [r3, #26]
    }
    snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 800bd7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bd7e:	68db      	ldr	r3, [r3, #12]
 800bd80:	685b      	ldr	r3, [r3, #4]
 800bd82:	4618      	mov	r0, r3
 800bd84:	f7fa fbb8 	bl	80064f8 <lwip_htonl>
 800bd88:	4604      	mov	r4, r0
 800bd8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bd8c:	891b      	ldrh	r3, [r3, #8]
 800bd8e:	461d      	mov	r5, r3
 800bd90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bd92:	68db      	ldr	r3, [r3, #12]
 800bd94:	899b      	ldrh	r3, [r3, #12]
 800bd96:	b29b      	uxth	r3, r3
 800bd98:	4618      	mov	r0, r3
 800bd9a:	f7fa fb9f 	bl	80064dc <lwip_htons>
 800bd9e:	4603      	mov	r3, r0
 800bda0:	f003 0303 	and.w	r3, r3, #3
 800bda4:	2b00      	cmp	r3, #0
 800bda6:	d00b      	beq.n	800bdc0 <tcp_output+0x294>
 800bda8:	2301      	movs	r3, #1
 800bdaa:	e00a      	b.n	800bdc2 <tcp_output+0x296>
 800bdac:	08012480 	.word	0x08012480
 800bdb0:	08012884 	.word	0x08012884
 800bdb4:	080124e4 	.word	0x080124e4
 800bdb8:	2400acec 	.word	0x2400acec
 800bdbc:	080128ac 	.word	0x080128ac
 800bdc0:	2300      	movs	r3, #0
 800bdc2:	442b      	add	r3, r5
 800bdc4:	4423      	add	r3, r4
 800bdc6:	60bb      	str	r3, [r7, #8]
    if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 800bdc8:	687b      	ldr	r3, [r7, #4]
 800bdca:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800bdcc:	68bb      	ldr	r3, [r7, #8]
 800bdce:	1ad3      	subs	r3, r2, r3
 800bdd0:	2b00      	cmp	r3, #0
 800bdd2:	da02      	bge.n	800bdda <tcp_output+0x2ae>
      pcb->snd_nxt = snd_nxt;
 800bdd4:	687b      	ldr	r3, [r7, #4]
 800bdd6:	68ba      	ldr	r2, [r7, #8]
 800bdd8:	64da      	str	r2, [r3, #76]	; 0x4c
    }
    /* put segment on unacknowledged list if length > 0 */
    if (TCP_TCPLEN(seg) > 0) {
 800bdda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bddc:	891b      	ldrh	r3, [r3, #8]
 800bdde:	461c      	mov	r4, r3
 800bde0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bde2:	68db      	ldr	r3, [r3, #12]
 800bde4:	899b      	ldrh	r3, [r3, #12]
 800bde6:	b29b      	uxth	r3, r3
 800bde8:	4618      	mov	r0, r3
 800bdea:	f7fa fb77 	bl	80064dc <lwip_htons>
 800bdee:	4603      	mov	r3, r0
 800bdf0:	f003 0303 	and.w	r3, r3, #3
 800bdf4:	2b00      	cmp	r3, #0
 800bdf6:	d001      	beq.n	800bdfc <tcp_output+0x2d0>
 800bdf8:	2301      	movs	r3, #1
 800bdfa:	e000      	b.n	800bdfe <tcp_output+0x2d2>
 800bdfc:	2300      	movs	r3, #0
 800bdfe:	4423      	add	r3, r4
 800be00:	2b00      	cmp	r3, #0
 800be02:	d049      	beq.n	800be98 <tcp_output+0x36c>
      seg->next = NULL;
 800be04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800be06:	2200      	movs	r2, #0
 800be08:	601a      	str	r2, [r3, #0]
      /* unacked list is empty? */
      if (pcb->unacked == NULL) {
 800be0a:	687b      	ldr	r3, [r7, #4]
 800be0c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800be0e:	2b00      	cmp	r3, #0
 800be10:	d105      	bne.n	800be1e <tcp_output+0x2f2>
        pcb->unacked = seg;
 800be12:	687b      	ldr	r3, [r7, #4]
 800be14:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800be16:	66da      	str	r2, [r3, #108]	; 0x6c
        useg = seg;
 800be18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800be1a:	623b      	str	r3, [r7, #32]
 800be1c:	e03f      	b.n	800be9e <tcp_output+0x372>
      /* unacked list is not empty? */
      } else {
        /* In the case of fast retransmit, the packet should not go to the tail
         * of the unacked queue, but rather somewhere before it. We need to check for
         * this case. -STJ Jul 27, 2004 */
        if (TCP_SEQ_LT(lwip_ntohl(seg->tcphdr->seqno), lwip_ntohl(useg->tcphdr->seqno))) {
 800be1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800be20:	68db      	ldr	r3, [r3, #12]
 800be22:	685b      	ldr	r3, [r3, #4]
 800be24:	4618      	mov	r0, r3
 800be26:	f7fa fb67 	bl	80064f8 <lwip_htonl>
 800be2a:	4604      	mov	r4, r0
 800be2c:	6a3b      	ldr	r3, [r7, #32]
 800be2e:	68db      	ldr	r3, [r3, #12]
 800be30:	685b      	ldr	r3, [r3, #4]
 800be32:	4618      	mov	r0, r3
 800be34:	f7fa fb60 	bl	80064f8 <lwip_htonl>
 800be38:	4603      	mov	r3, r0
 800be3a:	1ae3      	subs	r3, r4, r3
 800be3c:	2b00      	cmp	r3, #0
 800be3e:	da24      	bge.n	800be8a <tcp_output+0x35e>
          /* add segment to before tail of unacked list, keeping the list sorted */
          struct tcp_seg **cur_seg = &(pcb->unacked);
 800be40:	687b      	ldr	r3, [r7, #4]
 800be42:	336c      	adds	r3, #108	; 0x6c
 800be44:	61fb      	str	r3, [r7, #28]
          while (*cur_seg &&
 800be46:	e002      	b.n	800be4e <tcp_output+0x322>
            TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
              cur_seg = &((*cur_seg)->next );
 800be48:	69fb      	ldr	r3, [r7, #28]
 800be4a:	681b      	ldr	r3, [r3, #0]
 800be4c:	61fb      	str	r3, [r7, #28]
          while (*cur_seg &&
 800be4e:	69fb      	ldr	r3, [r7, #28]
 800be50:	681b      	ldr	r3, [r3, #0]
 800be52:	2b00      	cmp	r3, #0
 800be54:	d011      	beq.n	800be7a <tcp_output+0x34e>
            TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
 800be56:	69fb      	ldr	r3, [r7, #28]
 800be58:	681b      	ldr	r3, [r3, #0]
 800be5a:	68db      	ldr	r3, [r3, #12]
 800be5c:	685b      	ldr	r3, [r3, #4]
 800be5e:	4618      	mov	r0, r3
 800be60:	f7fa fb4a 	bl	80064f8 <lwip_htonl>
 800be64:	4604      	mov	r4, r0
 800be66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800be68:	68db      	ldr	r3, [r3, #12]
 800be6a:	685b      	ldr	r3, [r3, #4]
 800be6c:	4618      	mov	r0, r3
 800be6e:	f7fa fb43 	bl	80064f8 <lwip_htonl>
 800be72:	4603      	mov	r3, r0
 800be74:	1ae3      	subs	r3, r4, r3
          while (*cur_seg &&
 800be76:	2b00      	cmp	r3, #0
 800be78:	dbe6      	blt.n	800be48 <tcp_output+0x31c>
          }
          seg->next = (*cur_seg);
 800be7a:	69fb      	ldr	r3, [r7, #28]
 800be7c:	681a      	ldr	r2, [r3, #0]
 800be7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800be80:	601a      	str	r2, [r3, #0]
          (*cur_seg) = seg;
 800be82:	69fb      	ldr	r3, [r7, #28]
 800be84:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800be86:	601a      	str	r2, [r3, #0]
 800be88:	e009      	b.n	800be9e <tcp_output+0x372>
        } else {
          /* add segment to tail of unacked list */
          useg->next = seg;
 800be8a:	6a3b      	ldr	r3, [r7, #32]
 800be8c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800be8e:	601a      	str	r2, [r3, #0]
          useg = useg->next;
 800be90:	6a3b      	ldr	r3, [r7, #32]
 800be92:	681b      	ldr	r3, [r3, #0]
 800be94:	623b      	str	r3, [r7, #32]
 800be96:	e002      	b.n	800be9e <tcp_output+0x372>
        }
      }
    /* do not queue empty segments on the unacked list */
    } else {
      tcp_seg_free(seg);
 800be98:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800be9a:	f7fc fea3 	bl	8008be4 <tcp_seg_free>
    }
    seg = pcb->unsent;
 800be9e:	687b      	ldr	r3, [r7, #4]
 800bea0:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800bea2:	627b      	str	r3, [r7, #36]	; 0x24
  while (seg != NULL &&
 800bea4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bea6:	2b00      	cmp	r3, #0
 800bea8:	d015      	beq.n	800bed6 <tcp_output+0x3aa>
         lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len <= wnd) {
 800beaa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800beac:	68db      	ldr	r3, [r3, #12]
 800beae:	685b      	ldr	r3, [r3, #4]
 800beb0:	4618      	mov	r0, r3
 800beb2:	f7fa fb21 	bl	80064f8 <lwip_htonl>
 800beb6:	4602      	mov	r2, r0
 800beb8:	687b      	ldr	r3, [r7, #4]
 800beba:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800bebc:	1ad3      	subs	r3, r2, r3
 800bebe:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800bec0:	8912      	ldrh	r2, [r2, #8]
 800bec2:	4413      	add	r3, r2
  while (seg != NULL &&
 800bec4:	69ba      	ldr	r2, [r7, #24]
 800bec6:	429a      	cmp	r2, r3
 800bec8:	f4bf aedf 	bcs.w	800bc8a <tcp_output+0x15e>
  }
output_done:
 800becc:	e003      	b.n	800bed6 <tcp_output+0x3aa>
    goto output_done;
 800bece:	bf00      	nop
 800bed0:	e002      	b.n	800bed8 <tcp_output+0x3ac>
      break;
 800bed2:	bf00      	nop
 800bed4:	e000      	b.n	800bed8 <tcp_output+0x3ac>
output_done:
 800bed6:	bf00      	nop
#if TCP_OVERSIZE
  if (pcb->unsent == NULL) {
 800bed8:	687b      	ldr	r3, [r7, #4]
 800beda:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800bedc:	2b00      	cmp	r3, #0
 800bede:	d103      	bne.n	800bee8 <tcp_output+0x3bc>
    /* last unsent has been removed, reset unsent_oversize */
    pcb->unsent_oversize = 0;
 800bee0:	687b      	ldr	r3, [r7, #4]
 800bee2:	2200      	movs	r2, #0
 800bee4:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
  }
#endif /* TCP_OVERSIZE */

  pcb->flags &= ~TF_NAGLEMEMERR;
 800bee8:	687b      	ldr	r3, [r7, #4]
 800beea:	7e9b      	ldrb	r3, [r3, #26]
 800beec:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800bef0:	b2da      	uxtb	r2, r3
 800bef2:	687b      	ldr	r3, [r7, #4]
 800bef4:	769a      	strb	r2, [r3, #26]
  return ERR_OK;
 800bef6:	2300      	movs	r3, #0
}
 800bef8:	4618      	mov	r0, r3
 800befa:	3728      	adds	r7, #40	; 0x28
 800befc:	46bd      	mov	sp, r7
 800befe:	bdb0      	pop	{r4, r5, r7, pc}

0800bf00 <tcp_output_segment>:
 * @param pcb the tcp_pcb for the TCP connection used to send the segment
 * @param netif the netif used to send the segment
 */
static err_t
tcp_output_segment(struct tcp_seg *seg, struct tcp_pcb *pcb, struct netif *netif)
{
 800bf00:	b5b0      	push	{r4, r5, r7, lr}
 800bf02:	b08c      	sub	sp, #48	; 0x30
 800bf04:	af04      	add	r7, sp, #16
 800bf06:	60f8      	str	r0, [r7, #12]
 800bf08:	60b9      	str	r1, [r7, #8]
 800bf0a:	607a      	str	r2, [r7, #4]
  err_t err;
  u16_t len;
  u32_t *opts;

  if (seg->p->ref != 1) {
 800bf0c:	68fb      	ldr	r3, [r7, #12]
 800bf0e:	685b      	ldr	r3, [r3, #4]
 800bf10:	89db      	ldrh	r3, [r3, #14]
 800bf12:	2b01      	cmp	r3, #1
 800bf14:	d001      	beq.n	800bf1a <tcp_output_segment+0x1a>
    /* This can happen if the pbuf of this segment is still referenced by the
       netif driver due to deferred transmission. Since this function modifies
       p->len, we must not continue in this case. */
    return ERR_OK;
 800bf16:	2300      	movs	r3, #0
 800bf18:	e08b      	b.n	800c032 <tcp_output_segment+0x132>
  }

  /* The TCP header has already been constructed, but the ackno and
   wnd fields remain. */
  seg->tcphdr->ackno = lwip_htonl(pcb->rcv_nxt);
 800bf1a:	68bb      	ldr	r3, [r7, #8]
 800bf1c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800bf1e:	68fb      	ldr	r3, [r7, #12]
 800bf20:	68dc      	ldr	r4, [r3, #12]
 800bf22:	4610      	mov	r0, r2
 800bf24:	f7fa fae8 	bl	80064f8 <lwip_htonl>
 800bf28:	4603      	mov	r3, r0
 800bf2a:	60a3      	str	r3, [r4, #8]
       the window scale option) is never scaled. */
    seg->tcphdr->wnd = lwip_htons(TCPWND_MIN16(pcb->rcv_ann_wnd));
  } else
#endif /* LWIP_WND_SCALE */
  {
    seg->tcphdr->wnd = lwip_htons(TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
 800bf2c:	68bb      	ldr	r3, [r7, #8]
 800bf2e:	8d5a      	ldrh	r2, [r3, #42]	; 0x2a
 800bf30:	68fb      	ldr	r3, [r7, #12]
 800bf32:	68dc      	ldr	r4, [r3, #12]
 800bf34:	4610      	mov	r0, r2
 800bf36:	f7fa fad1 	bl	80064dc <lwip_htons>
 800bf3a:	4603      	mov	r3, r0
 800bf3c:	81e3      	strh	r3, [r4, #14]
  }

  pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 800bf3e:	68bb      	ldr	r3, [r7, #8]
 800bf40:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bf42:	68ba      	ldr	r2, [r7, #8]
 800bf44:	8d52      	ldrh	r2, [r2, #42]	; 0x2a
 800bf46:	441a      	add	r2, r3
 800bf48:	68bb      	ldr	r3, [r7, #8]
 800bf4a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Add any requested options.  NB MSS option is only set on SYN
     packets, so ignore it here */
  /* cast through void* to get rid of alignment warnings */
  opts = (u32_t *)(void *)(seg->tcphdr + 1);
 800bf4c:	68fb      	ldr	r3, [r7, #12]
 800bf4e:	68db      	ldr	r3, [r3, #12]
 800bf50:	3314      	adds	r3, #20
 800bf52:	61fb      	str	r3, [r7, #28]
  if (seg->flags & TF_SEG_OPTS_MSS) {
 800bf54:	68fb      	ldr	r3, [r7, #12]
 800bf56:	7a9b      	ldrb	r3, [r3, #10]
 800bf58:	f003 0301 	and.w	r3, r3, #1
 800bf5c:	2b00      	cmp	r3, #0
 800bf5e:	d014      	beq.n	800bf8a <tcp_output_segment+0x8a>
    u16_t mss;
#if TCP_CALCULATE_EFF_SEND_MSS
    mss = tcp_eff_send_mss(TCP_MSS, &pcb->local_ip, &pcb->remote_ip);
 800bf60:	68bb      	ldr	r3, [r7, #8]
 800bf62:	3304      	adds	r3, #4
 800bf64:	4619      	mov	r1, r3
 800bf66:	f240 50b4 	movw	r0, #1460	; 0x5b4
 800bf6a:	f7fd f8a5 	bl	80090b8 <tcp_eff_send_mss_impl>
 800bf6e:	4603      	mov	r3, r0
 800bf70:	837b      	strh	r3, [r7, #26]
#else /* TCP_CALCULATE_EFF_SEND_MSS */
    mss = TCP_MSS;
#endif /* TCP_CALCULATE_EFF_SEND_MSS */
    *opts = TCP_BUILD_MSS_OPTION(mss);
 800bf72:	8b7b      	ldrh	r3, [r7, #26]
 800bf74:	f043 7301 	orr.w	r3, r3, #33816576	; 0x2040000
 800bf78:	4618      	mov	r0, r3
 800bf7a:	f7fa fabd 	bl	80064f8 <lwip_htonl>
 800bf7e:	4602      	mov	r2, r0
 800bf80:	69fb      	ldr	r3, [r7, #28]
 800bf82:	601a      	str	r2, [r3, #0]
    opts += 1;
 800bf84:	69fb      	ldr	r3, [r7, #28]
 800bf86:	3304      	adds	r3, #4
 800bf88:	61fb      	str	r3, [r7, #28]
  }
#endif

  /* Set retransmission timer running if it is not currently enabled
     This must be set before checking the route. */
  if (pcb->rtime < 0) {
 800bf8a:	68bb      	ldr	r3, [r7, #8]
 800bf8c:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 800bf90:	2b00      	cmp	r3, #0
 800bf92:	da02      	bge.n	800bf9a <tcp_output_segment+0x9a>
    pcb->rtime = 0;
 800bf94:	68bb      	ldr	r3, [r7, #8]
 800bf96:	2200      	movs	r2, #0
 800bf98:	861a      	strh	r2, [r3, #48]	; 0x30
  }

  if (pcb->rttest == 0) {
 800bf9a:	68bb      	ldr	r3, [r7, #8]
 800bf9c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800bf9e:	2b00      	cmp	r3, #0
 800bfa0:	d10c      	bne.n	800bfbc <tcp_output_segment+0xbc>
    pcb->rttest = tcp_ticks;
 800bfa2:	4b26      	ldr	r3, [pc, #152]	; (800c03c <tcp_output_segment+0x13c>)
 800bfa4:	681a      	ldr	r2, [r3, #0]
 800bfa6:	68bb      	ldr	r3, [r7, #8]
 800bfa8:	635a      	str	r2, [r3, #52]	; 0x34
    pcb->rtseq = lwip_ntohl(seg->tcphdr->seqno);
 800bfaa:	68fb      	ldr	r3, [r7, #12]
 800bfac:	68db      	ldr	r3, [r3, #12]
 800bfae:	685b      	ldr	r3, [r3, #4]
 800bfb0:	4618      	mov	r0, r3
 800bfb2:	f7fa faa1 	bl	80064f8 <lwip_htonl>
 800bfb6:	4602      	mov	r2, r0
 800bfb8:	68bb      	ldr	r3, [r7, #8]
 800bfba:	639a      	str	r2, [r3, #56]	; 0x38
  }
  LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_output_segment: %"U32_F":%"U32_F"\n",
          lwip_htonl(seg->tcphdr->seqno), lwip_htonl(seg->tcphdr->seqno) +
          seg->len));

  len = (u16_t)((u8_t *)seg->tcphdr - (u8_t *)seg->p->payload);
 800bfbc:	68fb      	ldr	r3, [r7, #12]
 800bfbe:	68db      	ldr	r3, [r3, #12]
 800bfc0:	461a      	mov	r2, r3
 800bfc2:	68fb      	ldr	r3, [r7, #12]
 800bfc4:	685b      	ldr	r3, [r3, #4]
 800bfc6:	685b      	ldr	r3, [r3, #4]
 800bfc8:	1ad3      	subs	r3, r2, r3
 800bfca:	833b      	strh	r3, [r7, #24]
  if (len == 0) {
    /** Exclude retransmitted segments from this count. */
    MIB2_STATS_INC(mib2.tcpoutsegs);
  }

  seg->p->len -= len;
 800bfcc:	68fb      	ldr	r3, [r7, #12]
 800bfce:	685b      	ldr	r3, [r3, #4]
 800bfd0:	8959      	ldrh	r1, [r3, #10]
 800bfd2:	68fb      	ldr	r3, [r7, #12]
 800bfd4:	685b      	ldr	r3, [r3, #4]
 800bfd6:	8b3a      	ldrh	r2, [r7, #24]
 800bfd8:	1a8a      	subs	r2, r1, r2
 800bfda:	b292      	uxth	r2, r2
 800bfdc:	815a      	strh	r2, [r3, #10]
  seg->p->tot_len -= len;
 800bfde:	68fb      	ldr	r3, [r7, #12]
 800bfe0:	685b      	ldr	r3, [r3, #4]
 800bfe2:	8919      	ldrh	r1, [r3, #8]
 800bfe4:	68fb      	ldr	r3, [r7, #12]
 800bfe6:	685b      	ldr	r3, [r3, #4]
 800bfe8:	8b3a      	ldrh	r2, [r7, #24]
 800bfea:	1a8a      	subs	r2, r1, r2
 800bfec:	b292      	uxth	r2, r2
 800bfee:	811a      	strh	r2, [r3, #8]

  seg->p->payload = seg->tcphdr;
 800bff0:	68fb      	ldr	r3, [r7, #12]
 800bff2:	685b      	ldr	r3, [r3, #4]
 800bff4:	68fa      	ldr	r2, [r7, #12]
 800bff6:	68d2      	ldr	r2, [r2, #12]
 800bff8:	605a      	str	r2, [r3, #4]

  seg->tcphdr->chksum = 0;
 800bffa:	68fb      	ldr	r3, [r7, #12]
 800bffc:	68db      	ldr	r3, [r3, #12]
 800bffe:	2200      	movs	r2, #0
 800c000:	741a      	strb	r2, [r3, #16]
 800c002:	2200      	movs	r2, #0
 800c004:	745a      	strb	r2, [r3, #17]
  }
#endif /* CHECKSUM_GEN_TCP */
  TCP_STATS_INC(tcp.xmit);

  NETIF_SET_HWADDRHINT(netif, &(pcb->addr_hint));
  err = ip_output_if(seg->p, &pcb->local_ip, &pcb->remote_ip, pcb->ttl,
 800c006:	68fb      	ldr	r3, [r7, #12]
 800c008:	6858      	ldr	r0, [r3, #4]
 800c00a:	68b9      	ldr	r1, [r7, #8]
 800c00c:	68bb      	ldr	r3, [r7, #8]
 800c00e:	1d1c      	adds	r4, r3, #4
 800c010:	68bb      	ldr	r3, [r7, #8]
 800c012:	7a9d      	ldrb	r5, [r3, #10]
 800c014:	68bb      	ldr	r3, [r7, #8]
 800c016:	7a5b      	ldrb	r3, [r3, #9]
 800c018:	687a      	ldr	r2, [r7, #4]
 800c01a:	9202      	str	r2, [sp, #8]
 800c01c:	2206      	movs	r2, #6
 800c01e:	9201      	str	r2, [sp, #4]
 800c020:	9300      	str	r3, [sp, #0]
 800c022:	462b      	mov	r3, r5
 800c024:	4622      	mov	r2, r4
 800c026:	f001 ffd9 	bl	800dfdc <ip4_output_if>
 800c02a:	4603      	mov	r3, r0
 800c02c:	75fb      	strb	r3, [r7, #23]
    pcb->tos, IP_PROTO_TCP, netif);
  NETIF_SET_HWADDRHINT(netif, NULL);
  return err;
 800c02e:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800c032:	4618      	mov	r0, r3
 800c034:	3720      	adds	r7, #32
 800c036:	46bd      	mov	sp, r7
 800c038:	bdb0      	pop	{r4, r5, r7, pc}
 800c03a:	bf00      	nop
 800c03c:	2400acdc 	.word	0x2400acdc

0800c040 <tcp_rst>:
 */
void
tcp_rst(u32_t seqno, u32_t ackno,
  const ip_addr_t *local_ip, const ip_addr_t *remote_ip,
  u16_t local_port, u16_t remote_port)
{
 800c040:	b580      	push	{r7, lr}
 800c042:	b08c      	sub	sp, #48	; 0x30
 800c044:	af04      	add	r7, sp, #16
 800c046:	60f8      	str	r0, [r7, #12]
 800c048:	60b9      	str	r1, [r7, #8]
 800c04a:	607a      	str	r2, [r7, #4]
 800c04c:	603b      	str	r3, [r7, #0]
  struct pbuf *p;
  struct tcp_hdr *tcphdr;
  struct netif *netif;
  p = pbuf_alloc(PBUF_IP, TCP_HLEN, PBUF_RAM);
 800c04e:	2200      	movs	r2, #0
 800c050:	2114      	movs	r1, #20
 800c052:	2001      	movs	r0, #1
 800c054:	f7fb f8fc 	bl	8007250 <pbuf_alloc>
 800c058:	61f8      	str	r0, [r7, #28]
  if (p == NULL) {
 800c05a:	69fb      	ldr	r3, [r7, #28]
 800c05c:	2b00      	cmp	r3, #0
 800c05e:	d05b      	beq.n	800c118 <tcp_rst+0xd8>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_rst: could not allocate memory for pbuf\n"));
    return;
  }
  LWIP_ASSERT("check that first pbuf can hold struct tcp_hdr",
 800c060:	69fb      	ldr	r3, [r7, #28]
 800c062:	895b      	ldrh	r3, [r3, #10]
 800c064:	2b13      	cmp	r3, #19
 800c066:	d806      	bhi.n	800c076 <tcp_rst+0x36>
 800c068:	4b2d      	ldr	r3, [pc, #180]	; (800c120 <tcp_rst+0xe0>)
 800c06a:	f240 524d 	movw	r2, #1357	; 0x54d
 800c06e:	492d      	ldr	r1, [pc, #180]	; (800c124 <tcp_rst+0xe4>)
 800c070:	482d      	ldr	r0, [pc, #180]	; (800c128 <tcp_rst+0xe8>)
 800c072:	f004 fa5d 	bl	8010530 <iprintf>
              (p->len >= sizeof(struct tcp_hdr)));

  tcphdr = (struct tcp_hdr *)p->payload;
 800c076:	69fb      	ldr	r3, [r7, #28]
 800c078:	685b      	ldr	r3, [r3, #4]
 800c07a:	61bb      	str	r3, [r7, #24]
  tcphdr->src = lwip_htons(local_port);
 800c07c:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800c07e:	4618      	mov	r0, r3
 800c080:	f7fa fa2c 	bl	80064dc <lwip_htons>
 800c084:	4603      	mov	r3, r0
 800c086:	461a      	mov	r2, r3
 800c088:	69bb      	ldr	r3, [r7, #24]
 800c08a:	801a      	strh	r2, [r3, #0]
  tcphdr->dest = lwip_htons(remote_port);
 800c08c:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 800c08e:	4618      	mov	r0, r3
 800c090:	f7fa fa24 	bl	80064dc <lwip_htons>
 800c094:	4603      	mov	r3, r0
 800c096:	461a      	mov	r2, r3
 800c098:	69bb      	ldr	r3, [r7, #24]
 800c09a:	805a      	strh	r2, [r3, #2]
  tcphdr->seqno = lwip_htonl(seqno);
 800c09c:	68f8      	ldr	r0, [r7, #12]
 800c09e:	f7fa fa2b 	bl	80064f8 <lwip_htonl>
 800c0a2:	4602      	mov	r2, r0
 800c0a4:	69bb      	ldr	r3, [r7, #24]
 800c0a6:	605a      	str	r2, [r3, #4]
  tcphdr->ackno = lwip_htonl(ackno);
 800c0a8:	68b8      	ldr	r0, [r7, #8]
 800c0aa:	f7fa fa25 	bl	80064f8 <lwip_htonl>
 800c0ae:	4602      	mov	r2, r0
 800c0b0:	69bb      	ldr	r3, [r7, #24]
 800c0b2:	609a      	str	r2, [r3, #8]
  TCPH_HDRLEN_FLAGS_SET(tcphdr, TCP_HLEN/4, TCP_RST | TCP_ACK);
 800c0b4:	f245 0014 	movw	r0, #20500	; 0x5014
 800c0b8:	f7fa fa10 	bl	80064dc <lwip_htons>
 800c0bc:	4603      	mov	r3, r0
 800c0be:	461a      	mov	r2, r3
 800c0c0:	69bb      	ldr	r3, [r7, #24]
 800c0c2:	819a      	strh	r2, [r3, #12]
#if LWIP_WND_SCALE
  tcphdr->wnd = PP_HTONS(((TCP_WND >> TCP_RCV_SCALE) & 0xFFFF));
#else
  tcphdr->wnd = PP_HTONS(TCP_WND);
 800c0c4:	69bb      	ldr	r3, [r7, #24]
 800c0c6:	2200      	movs	r2, #0
 800c0c8:	f042 0216 	orr.w	r2, r2, #22
 800c0cc:	739a      	strb	r2, [r3, #14]
 800c0ce:	2200      	movs	r2, #0
 800c0d0:	f062 022f 	orn	r2, r2, #47	; 0x2f
 800c0d4:	73da      	strb	r2, [r3, #15]
#endif
  tcphdr->chksum = 0;
 800c0d6:	69bb      	ldr	r3, [r7, #24]
 800c0d8:	2200      	movs	r2, #0
 800c0da:	741a      	strb	r2, [r3, #16]
 800c0dc:	2200      	movs	r2, #0
 800c0de:	745a      	strb	r2, [r3, #17]
  tcphdr->urgp = 0;
 800c0e0:	69bb      	ldr	r3, [r7, #24]
 800c0e2:	2200      	movs	r2, #0
 800c0e4:	749a      	strb	r2, [r3, #18]
 800c0e6:	2200      	movs	r2, #0
 800c0e8:	74da      	strb	r2, [r3, #19]

  TCP_STATS_INC(tcp.xmit);
  MIB2_STATS_INC(mib2.tcpoutrsts);

  netif = ip_route(local_ip, remote_ip);
 800c0ea:	6838      	ldr	r0, [r7, #0]
 800c0ec:	f001 fdce 	bl	800dc8c <ip4_route>
 800c0f0:	6178      	str	r0, [r7, #20]
  if (netif != NULL) {
 800c0f2:	697b      	ldr	r3, [r7, #20]
 800c0f4:	2b00      	cmp	r3, #0
 800c0f6:	d00b      	beq.n	800c110 <tcp_rst+0xd0>
      tcphdr->chksum = ip_chksum_pseudo(p, IP_PROTO_TCP, p->tot_len,
                                        local_ip, remote_ip);
    }
#endif
    /* Send output with hardcoded TTL/HL since we have no access to the pcb */
    ip_output_if(p, local_ip, remote_ip, TCP_TTL, 0, IP_PROTO_TCP, netif);
 800c0f8:	697b      	ldr	r3, [r7, #20]
 800c0fa:	9302      	str	r3, [sp, #8]
 800c0fc:	2306      	movs	r3, #6
 800c0fe:	9301      	str	r3, [sp, #4]
 800c100:	2300      	movs	r3, #0
 800c102:	9300      	str	r3, [sp, #0]
 800c104:	23ff      	movs	r3, #255	; 0xff
 800c106:	683a      	ldr	r2, [r7, #0]
 800c108:	6879      	ldr	r1, [r7, #4]
 800c10a:	69f8      	ldr	r0, [r7, #28]
 800c10c:	f001 ff66 	bl	800dfdc <ip4_output_if>
  }
  pbuf_free(p);
 800c110:	69f8      	ldr	r0, [r7, #28]
 800c112:	f7fb fc0f 	bl	8007934 <pbuf_free>
 800c116:	e000      	b.n	800c11a <tcp_rst+0xda>
    return;
 800c118:	bf00      	nop
  LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_rst: seqno %"U32_F" ackno %"U32_F".\n", seqno, ackno));
}
 800c11a:	3720      	adds	r7, #32
 800c11c:	46bd      	mov	sp, r7
 800c11e:	bd80      	pop	{r7, pc}
 800c120:	08012480 	.word	0x08012480
 800c124:	080124b4 	.word	0x080124b4
 800c128:	080124e4 	.word	0x080124e4

0800c12c <tcp_rexmit_rto>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
void
tcp_rexmit_rto(struct tcp_pcb *pcb)
{
 800c12c:	b580      	push	{r7, lr}
 800c12e:	b084      	sub	sp, #16
 800c130:	af00      	add	r7, sp, #0
 800c132:	6078      	str	r0, [r7, #4]
  struct tcp_seg *seg;

  if (pcb->unacked == NULL) {
 800c134:	687b      	ldr	r3, [r7, #4]
 800c136:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800c138:	2b00      	cmp	r3, #0
 800c13a:	d029      	beq.n	800c190 <tcp_rexmit_rto+0x64>
    return;
  }

  /* Move all unacked segments to the head of the unsent queue */
  for (seg = pcb->unacked; seg->next != NULL; seg = seg->next);
 800c13c:	687b      	ldr	r3, [r7, #4]
 800c13e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800c140:	60fb      	str	r3, [r7, #12]
 800c142:	e002      	b.n	800c14a <tcp_rexmit_rto+0x1e>
 800c144:	68fb      	ldr	r3, [r7, #12]
 800c146:	681b      	ldr	r3, [r3, #0]
 800c148:	60fb      	str	r3, [r7, #12]
 800c14a:	68fb      	ldr	r3, [r7, #12]
 800c14c:	681b      	ldr	r3, [r3, #0]
 800c14e:	2b00      	cmp	r3, #0
 800c150:	d1f8      	bne.n	800c144 <tcp_rexmit_rto+0x18>
  /* concatenate unsent queue after unacked queue */
  seg->next = pcb->unsent;
 800c152:	687b      	ldr	r3, [r7, #4]
 800c154:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 800c156:	68fb      	ldr	r3, [r7, #12]
 800c158:	601a      	str	r2, [r3, #0]
  if (pcb->unsent == NULL) {
    pcb->unsent_oversize = seg->oversize_left;
  }
#endif /* TCP_OVERSIZE_DBGCHECK */
  /* unsent queue is the concatenated queue (of unacked, unsent) */
  pcb->unsent = pcb->unacked;
 800c15a:	687b      	ldr	r3, [r7, #4]
 800c15c:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 800c15e:	687b      	ldr	r3, [r7, #4]
 800c160:	669a      	str	r2, [r3, #104]	; 0x68
  /* unacked queue is now empty */
  pcb->unacked = NULL;
 800c162:	687b      	ldr	r3, [r7, #4]
 800c164:	2200      	movs	r2, #0
 800c166:	66da      	str	r2, [r3, #108]	; 0x6c

  /* increment number of retransmissions */
  if (pcb->nrtx < 0xFF) {
 800c168:	687b      	ldr	r3, [r7, #4]
 800c16a:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800c16e:	2bff      	cmp	r3, #255	; 0xff
 800c170:	d007      	beq.n	800c182 <tcp_rexmit_rto+0x56>
    ++pcb->nrtx;
 800c172:	687b      	ldr	r3, [r7, #4]
 800c174:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800c178:	3301      	adds	r3, #1
 800c17a:	b2da      	uxtb	r2, r3
 800c17c:	687b      	ldr	r3, [r7, #4]
 800c17e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  }

  /* Don't take any RTT measurements after retransmitting. */
  pcb->rttest = 0;
 800c182:	687b      	ldr	r3, [r7, #4]
 800c184:	2200      	movs	r2, #0
 800c186:	635a      	str	r2, [r3, #52]	; 0x34

  /* Do the actual retransmission */
  tcp_output(pcb);
 800c188:	6878      	ldr	r0, [r7, #4]
 800c18a:	f7ff fccf 	bl	800bb2c <tcp_output>
 800c18e:	e000      	b.n	800c192 <tcp_rexmit_rto+0x66>
    return;
 800c190:	bf00      	nop
}
 800c192:	3710      	adds	r7, #16
 800c194:	46bd      	mov	sp, r7
 800c196:	bd80      	pop	{r7, pc}

0800c198 <tcp_rexmit>:
 *
 * @param pcb the tcp_pcb for which to retransmit the first unacked segment
 */
void
tcp_rexmit(struct tcp_pcb *pcb)
{
 800c198:	b590      	push	{r4, r7, lr}
 800c19a:	b085      	sub	sp, #20
 800c19c:	af00      	add	r7, sp, #0
 800c19e:	6078      	str	r0, [r7, #4]
  struct tcp_seg *seg;
  struct tcp_seg **cur_seg;

  if (pcb->unacked == NULL) {
 800c1a0:	687b      	ldr	r3, [r7, #4]
 800c1a2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800c1a4:	2b00      	cmp	r3, #0
 800c1a6:	d043      	beq.n	800c230 <tcp_rexmit+0x98>
    return;
  }

  /* Move the first unacked segment to the unsent queue */
  /* Keep the unsent queue sorted. */
  seg = pcb->unacked;
 800c1a8:	687b      	ldr	r3, [r7, #4]
 800c1aa:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800c1ac:	60bb      	str	r3, [r7, #8]
  pcb->unacked = seg->next;
 800c1ae:	68bb      	ldr	r3, [r7, #8]
 800c1b0:	681a      	ldr	r2, [r3, #0]
 800c1b2:	687b      	ldr	r3, [r7, #4]
 800c1b4:	66da      	str	r2, [r3, #108]	; 0x6c

  cur_seg = &(pcb->unsent);
 800c1b6:	687b      	ldr	r3, [r7, #4]
 800c1b8:	3368      	adds	r3, #104	; 0x68
 800c1ba:	60fb      	str	r3, [r7, #12]
  while (*cur_seg &&
 800c1bc:	e002      	b.n	800c1c4 <tcp_rexmit+0x2c>
    TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
      cur_seg = &((*cur_seg)->next );
 800c1be:	68fb      	ldr	r3, [r7, #12]
 800c1c0:	681b      	ldr	r3, [r3, #0]
 800c1c2:	60fb      	str	r3, [r7, #12]
  while (*cur_seg &&
 800c1c4:	68fb      	ldr	r3, [r7, #12]
 800c1c6:	681b      	ldr	r3, [r3, #0]
 800c1c8:	2b00      	cmp	r3, #0
 800c1ca:	d011      	beq.n	800c1f0 <tcp_rexmit+0x58>
    TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
 800c1cc:	68fb      	ldr	r3, [r7, #12]
 800c1ce:	681b      	ldr	r3, [r3, #0]
 800c1d0:	68db      	ldr	r3, [r3, #12]
 800c1d2:	685b      	ldr	r3, [r3, #4]
 800c1d4:	4618      	mov	r0, r3
 800c1d6:	f7fa f98f 	bl	80064f8 <lwip_htonl>
 800c1da:	4604      	mov	r4, r0
 800c1dc:	68bb      	ldr	r3, [r7, #8]
 800c1de:	68db      	ldr	r3, [r3, #12]
 800c1e0:	685b      	ldr	r3, [r3, #4]
 800c1e2:	4618      	mov	r0, r3
 800c1e4:	f7fa f988 	bl	80064f8 <lwip_htonl>
 800c1e8:	4603      	mov	r3, r0
 800c1ea:	1ae3      	subs	r3, r4, r3
  while (*cur_seg &&
 800c1ec:	2b00      	cmp	r3, #0
 800c1ee:	dbe6      	blt.n	800c1be <tcp_rexmit+0x26>
  }
  seg->next = *cur_seg;
 800c1f0:	68fb      	ldr	r3, [r7, #12]
 800c1f2:	681a      	ldr	r2, [r3, #0]
 800c1f4:	68bb      	ldr	r3, [r7, #8]
 800c1f6:	601a      	str	r2, [r3, #0]
  *cur_seg = seg;
 800c1f8:	68fb      	ldr	r3, [r7, #12]
 800c1fa:	68ba      	ldr	r2, [r7, #8]
 800c1fc:	601a      	str	r2, [r3, #0]
#if TCP_OVERSIZE
  if (seg->next == NULL) {
 800c1fe:	68bb      	ldr	r3, [r7, #8]
 800c200:	681b      	ldr	r3, [r3, #0]
 800c202:	2b00      	cmp	r3, #0
 800c204:	d103      	bne.n	800c20e <tcp_rexmit+0x76>
    /* the retransmitted segment is last in unsent, so reset unsent_oversize */
    pcb->unsent_oversize = 0;
 800c206:	687b      	ldr	r3, [r7, #4]
 800c208:	2200      	movs	r2, #0
 800c20a:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
  }
#endif /* TCP_OVERSIZE */

  if (pcb->nrtx < 0xFF) {
 800c20e:	687b      	ldr	r3, [r7, #4]
 800c210:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800c214:	2bff      	cmp	r3, #255	; 0xff
 800c216:	d007      	beq.n	800c228 <tcp_rexmit+0x90>
    ++pcb->nrtx;
 800c218:	687b      	ldr	r3, [r7, #4]
 800c21a:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800c21e:	3301      	adds	r3, #1
 800c220:	b2da      	uxtb	r2, r3
 800c222:	687b      	ldr	r3, [r7, #4]
 800c224:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  }

  /* Don't take any rtt measurements after retransmitting. */
  pcb->rttest = 0;
 800c228:	687b      	ldr	r3, [r7, #4]
 800c22a:	2200      	movs	r2, #0
 800c22c:	635a      	str	r2, [r3, #52]	; 0x34
 800c22e:	e000      	b.n	800c232 <tcp_rexmit+0x9a>
    return;
 800c230:	bf00      	nop

  /* Do the actual retransmission. */
  MIB2_STATS_INC(mib2.tcpretranssegs);
  /* No need to call tcp_output: we are always called from tcp_input()
     and thus tcp_output directly returns. */
}
 800c232:	3714      	adds	r7, #20
 800c234:	46bd      	mov	sp, r7
 800c236:	bd90      	pop	{r4, r7, pc}

0800c238 <tcp_rexmit_fast>:
 *
 * @param pcb the tcp_pcb for which to retransmit the first unacked segment
 */
void
tcp_rexmit_fast(struct tcp_pcb *pcb)
{
 800c238:	b580      	push	{r7, lr}
 800c23a:	b082      	sub	sp, #8
 800c23c:	af00      	add	r7, sp, #0
 800c23e:	6078      	str	r0, [r7, #4]
  if (pcb->unacked != NULL && !(pcb->flags & TF_INFR)) {
 800c240:	687b      	ldr	r3, [r7, #4]
 800c242:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800c244:	2b00      	cmp	r3, #0
 800c246:	d04c      	beq.n	800c2e2 <tcp_rexmit_fast+0xaa>
 800c248:	687b      	ldr	r3, [r7, #4]
 800c24a:	7e9b      	ldrb	r3, [r3, #26]
 800c24c:	f003 0304 	and.w	r3, r3, #4
 800c250:	2b00      	cmp	r3, #0
 800c252:	d146      	bne.n	800c2e2 <tcp_rexmit_fast+0xaa>
    LWIP_DEBUGF(TCP_FR_DEBUG,
                ("tcp_receive: dupacks %"U16_F" (%"U32_F
                 "), fast retransmit %"U32_F"\n",
                 (u16_t)pcb->dupacks, pcb->lastack,
                 lwip_ntohl(pcb->unacked->tcphdr->seqno)));
    tcp_rexmit(pcb);
 800c254:	6878      	ldr	r0, [r7, #4]
 800c256:	f7ff ff9f 	bl	800c198 <tcp_rexmit>

    /* Set ssthresh to half of the minimum of the current
     * cwnd and the advertised window */
    pcb->ssthresh = LWIP_MIN(pcb->cwnd, pcb->snd_wnd) / 2;
 800c25a:	687b      	ldr	r3, [r7, #4]
 800c25c:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800c260:	687b      	ldr	r3, [r7, #4]
 800c262:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800c266:	429a      	cmp	r2, r3
 800c268:	d208      	bcs.n	800c27c <tcp_rexmit_fast+0x44>
 800c26a:	687b      	ldr	r3, [r7, #4]
 800c26c:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 800c270:	2b00      	cmp	r3, #0
 800c272:	da00      	bge.n	800c276 <tcp_rexmit_fast+0x3e>
 800c274:	3301      	adds	r3, #1
 800c276:	105b      	asrs	r3, r3, #1
 800c278:	b29b      	uxth	r3, r3
 800c27a:	e007      	b.n	800c28c <tcp_rexmit_fast+0x54>
 800c27c:	687b      	ldr	r3, [r7, #4]
 800c27e:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800c282:	2b00      	cmp	r3, #0
 800c284:	da00      	bge.n	800c288 <tcp_rexmit_fast+0x50>
 800c286:	3301      	adds	r3, #1
 800c288:	105b      	asrs	r3, r3, #1
 800c28a:	b29b      	uxth	r3, r3
 800c28c:	687a      	ldr	r2, [r7, #4]
 800c28e:	f8a2 304a 	strh.w	r3, [r2, #74]	; 0x4a

    /* The minimum value for ssthresh should be 2 MSS */
    if (pcb->ssthresh < (2U * pcb->mss)) {
 800c292:	687b      	ldr	r3, [r7, #4]
 800c294:	f8b3 304a 	ldrh.w	r3, [r3, #74]	; 0x4a
 800c298:	461a      	mov	r2, r3
 800c29a:	687b      	ldr	r3, [r7, #4]
 800c29c:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800c29e:	005b      	lsls	r3, r3, #1
 800c2a0:	429a      	cmp	r2, r3
 800c2a2:	d206      	bcs.n	800c2b2 <tcp_rexmit_fast+0x7a>
      LWIP_DEBUGF(TCP_FR_DEBUG,
                  ("tcp_receive: The minimum value for ssthresh %"TCPWNDSIZE_F
                   " should be min 2 mss %"U16_F"...\n",
                   pcb->ssthresh, (u16_t)(2*pcb->mss)));
      pcb->ssthresh = 2*pcb->mss;
 800c2a4:	687b      	ldr	r3, [r7, #4]
 800c2a6:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800c2a8:	005b      	lsls	r3, r3, #1
 800c2aa:	b29a      	uxth	r2, r3
 800c2ac:	687b      	ldr	r3, [r7, #4]
 800c2ae:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
    }

    pcb->cwnd = pcb->ssthresh + 3 * pcb->mss;
 800c2b2:	687b      	ldr	r3, [r7, #4]
 800c2b4:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 800c2b8:	687b      	ldr	r3, [r7, #4]
 800c2ba:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800c2bc:	4619      	mov	r1, r3
 800c2be:	0049      	lsls	r1, r1, #1
 800c2c0:	440b      	add	r3, r1
 800c2c2:	b29b      	uxth	r3, r3
 800c2c4:	4413      	add	r3, r2
 800c2c6:	b29a      	uxth	r2, r3
 800c2c8:	687b      	ldr	r3, [r7, #4]
 800c2ca:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
    pcb->flags |= TF_INFR;
 800c2ce:	687b      	ldr	r3, [r7, #4]
 800c2d0:	7e9b      	ldrb	r3, [r3, #26]
 800c2d2:	f043 0304 	orr.w	r3, r3, #4
 800c2d6:	b2da      	uxtb	r2, r3
 800c2d8:	687b      	ldr	r3, [r7, #4]
 800c2da:	769a      	strb	r2, [r3, #26]

    /* Reset the retransmission timer to prevent immediate rto retransmissions */
    pcb->rtime = 0;
 800c2dc:	687b      	ldr	r3, [r7, #4]
 800c2de:	2200      	movs	r2, #0
 800c2e0:	861a      	strh	r2, [r3, #48]	; 0x30
  }
}
 800c2e2:	bf00      	nop
 800c2e4:	3708      	adds	r7, #8
 800c2e6:	46bd      	mov	sp, r7
 800c2e8:	bd80      	pop	{r7, pc}

0800c2ea <tcp_keepalive>:
 *
 * @param pcb the tcp_pcb for which to send a keepalive packet
 */
err_t
tcp_keepalive(struct tcp_pcb *pcb)
{
 800c2ea:	b580      	push	{r7, lr}
 800c2ec:	b08a      	sub	sp, #40	; 0x28
 800c2ee:	af04      	add	r7, sp, #16
 800c2f0:	6078      	str	r0, [r7, #4]
  LWIP_DEBUGF(TCP_DEBUG, ("\n"));

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: tcp_ticks %"U32_F"   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n",
                          tcp_ticks, pcb->tmr, (u16_t)pcb->keep_cnt_sent));

  p = tcp_output_alloc_header(pcb, 0, 0, lwip_htonl(pcb->snd_nxt - 1));
 800c2f2:	687b      	ldr	r3, [r7, #4]
 800c2f4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800c2f6:	3b01      	subs	r3, #1
 800c2f8:	4618      	mov	r0, r3
 800c2fa:	f7fa f8fd 	bl	80064f8 <lwip_htonl>
 800c2fe:	4603      	mov	r3, r0
 800c300:	2200      	movs	r2, #0
 800c302:	2100      	movs	r1, #0
 800c304:	6878      	ldr	r0, [r7, #4]
 800c306:	f7ff f975 	bl	800b5f4 <tcp_output_alloc_header>
 800c30a:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 800c30c:	693b      	ldr	r3, [r7, #16]
 800c30e:	2b00      	cmp	r3, #0
 800c310:	d102      	bne.n	800c318 <tcp_keepalive+0x2e>
    LWIP_DEBUGF(TCP_DEBUG,
                ("tcp_keepalive: could not allocate memory for pbuf\n"));
    return ERR_MEM;
 800c312:	f04f 33ff 	mov.w	r3, #4294967295
 800c316:	e021      	b.n	800c35c <tcp_keepalive+0x72>
  }
  netif = ip_route(&pcb->local_ip, &pcb->remote_ip);
 800c318:	687b      	ldr	r3, [r7, #4]
 800c31a:	3304      	adds	r3, #4
 800c31c:	4618      	mov	r0, r3
 800c31e:	f001 fcb5 	bl	800dc8c <ip4_route>
 800c322:	60f8      	str	r0, [r7, #12]
  if (netif == NULL) {
 800c324:	68fb      	ldr	r3, [r7, #12]
 800c326:	2b00      	cmp	r3, #0
 800c328:	d102      	bne.n	800c330 <tcp_keepalive+0x46>
    err = ERR_RTE;
 800c32a:	23fc      	movs	r3, #252	; 0xfc
 800c32c:	75fb      	strb	r3, [r7, #23]
 800c32e:	e010      	b.n	800c352 <tcp_keepalive+0x68>
#endif /* CHECKSUM_GEN_TCP */
    TCP_STATS_INC(tcp.xmit);

    /* Send output to IP */
    NETIF_SET_HWADDRHINT(netif, &(pcb->addr_hint));
    err = ip_output_if(p, &pcb->local_ip, &pcb->remote_ip, pcb->ttl, 0, IP_PROTO_TCP, netif);
 800c330:	6879      	ldr	r1, [r7, #4]
 800c332:	687b      	ldr	r3, [r7, #4]
 800c334:	1d1a      	adds	r2, r3, #4
 800c336:	687b      	ldr	r3, [r7, #4]
 800c338:	7a98      	ldrb	r0, [r3, #10]
 800c33a:	68fb      	ldr	r3, [r7, #12]
 800c33c:	9302      	str	r3, [sp, #8]
 800c33e:	2306      	movs	r3, #6
 800c340:	9301      	str	r3, [sp, #4]
 800c342:	2300      	movs	r3, #0
 800c344:	9300      	str	r3, [sp, #0]
 800c346:	4603      	mov	r3, r0
 800c348:	6938      	ldr	r0, [r7, #16]
 800c34a:	f001 fe47 	bl	800dfdc <ip4_output_if>
 800c34e:	4603      	mov	r3, r0
 800c350:	75fb      	strb	r3, [r7, #23]
    NETIF_SET_HWADDRHINT(netif, NULL);
  }
  pbuf_free(p);
 800c352:	6938      	ldr	r0, [r7, #16]
 800c354:	f7fb faee 	bl	8007934 <pbuf_free>

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: seqno %"U32_F" ackno %"U32_F" err %d.\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt, (int)err));
  return err;
 800c358:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800c35c:	4618      	mov	r0, r3
 800c35e:	3718      	adds	r7, #24
 800c360:	46bd      	mov	sp, r7
 800c362:	bd80      	pop	{r7, pc}

0800c364 <tcp_zero_window_probe>:
 *
 * @param pcb the tcp_pcb for which to send a zero-window probe packet
 */
err_t
tcp_zero_window_probe(struct tcp_pcb *pcb)
{
 800c364:	b590      	push	{r4, r7, lr}
 800c366:	b08f      	sub	sp, #60	; 0x3c
 800c368:	af04      	add	r7, sp, #16
 800c36a:	6078      	str	r0, [r7, #4]
  LWIP_DEBUGF(TCP_DEBUG,
              ("tcp_zero_window_probe: tcp_ticks %"U32_F
               "   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n",
               tcp_ticks, pcb->tmr, (u16_t)pcb->keep_cnt_sent));

  seg = pcb->unacked;
 800c36c:	687b      	ldr	r3, [r7, #4]
 800c36e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800c370:	623b      	str	r3, [r7, #32]

  if (seg == NULL) {
 800c372:	6a3b      	ldr	r3, [r7, #32]
 800c374:	2b00      	cmp	r3, #0
 800c376:	d102      	bne.n	800c37e <tcp_zero_window_probe+0x1a>
    seg = pcb->unsent;
 800c378:	687b      	ldr	r3, [r7, #4]
 800c37a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800c37c:	623b      	str	r3, [r7, #32]
  }
  if (seg == NULL) {
 800c37e:	6a3b      	ldr	r3, [r7, #32]
 800c380:	2b00      	cmp	r3, #0
 800c382:	d101      	bne.n	800c388 <tcp_zero_window_probe+0x24>
    /* nothing to send, zero window probe not needed */
    return ERR_OK;
 800c384:	2300      	movs	r3, #0
 800c386:	e085      	b.n	800c494 <tcp_zero_window_probe+0x130>
  }

  is_fin = ((TCPH_FLAGS(seg->tcphdr) & TCP_FIN) != 0) && (seg->len == 0);
 800c388:	6a3b      	ldr	r3, [r7, #32]
 800c38a:	68db      	ldr	r3, [r3, #12]
 800c38c:	899b      	ldrh	r3, [r3, #12]
 800c38e:	b29b      	uxth	r3, r3
 800c390:	4618      	mov	r0, r3
 800c392:	f7fa f8a3 	bl	80064dc <lwip_htons>
 800c396:	4603      	mov	r3, r0
 800c398:	f003 0301 	and.w	r3, r3, #1
 800c39c:	2b00      	cmp	r3, #0
 800c39e:	d005      	beq.n	800c3ac <tcp_zero_window_probe+0x48>
 800c3a0:	6a3b      	ldr	r3, [r7, #32]
 800c3a2:	891b      	ldrh	r3, [r3, #8]
 800c3a4:	2b00      	cmp	r3, #0
 800c3a6:	d101      	bne.n	800c3ac <tcp_zero_window_probe+0x48>
 800c3a8:	2301      	movs	r3, #1
 800c3aa:	e000      	b.n	800c3ae <tcp_zero_window_probe+0x4a>
 800c3ac:	2300      	movs	r3, #0
 800c3ae:	77fb      	strb	r3, [r7, #31]
  /* we want to send one seqno: either FIN or data (no options) */
  len = is_fin ? 0 : 1;
 800c3b0:	7ffb      	ldrb	r3, [r7, #31]
 800c3b2:	2b00      	cmp	r3, #0
 800c3b4:	bf0c      	ite	eq
 800c3b6:	2301      	moveq	r3, #1
 800c3b8:	2300      	movne	r3, #0
 800c3ba:	b2db      	uxtb	r3, r3
 800c3bc:	83bb      	strh	r3, [r7, #28]

  p = tcp_output_alloc_header(pcb, 0, len, seg->tcphdr->seqno);
 800c3be:	6a3b      	ldr	r3, [r7, #32]
 800c3c0:	68db      	ldr	r3, [r3, #12]
 800c3c2:	685b      	ldr	r3, [r3, #4]
 800c3c4:	8bba      	ldrh	r2, [r7, #28]
 800c3c6:	2100      	movs	r1, #0
 800c3c8:	6878      	ldr	r0, [r7, #4]
 800c3ca:	f7ff f913 	bl	800b5f4 <tcp_output_alloc_header>
 800c3ce:	61b8      	str	r0, [r7, #24]
  if (p == NULL) {
 800c3d0:	69bb      	ldr	r3, [r7, #24]
 800c3d2:	2b00      	cmp	r3, #0
 800c3d4:	d102      	bne.n	800c3dc <tcp_zero_window_probe+0x78>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: no memory for pbuf\n"));
    return ERR_MEM;
 800c3d6:	f04f 33ff 	mov.w	r3, #4294967295
 800c3da:	e05b      	b.n	800c494 <tcp_zero_window_probe+0x130>
  }
  tcphdr = (struct tcp_hdr *)p->payload;
 800c3dc:	69bb      	ldr	r3, [r7, #24]
 800c3de:	685b      	ldr	r3, [r3, #4]
 800c3e0:	617b      	str	r3, [r7, #20]

  if (is_fin) {
 800c3e2:	7ffb      	ldrb	r3, [r7, #31]
 800c3e4:	2b00      	cmp	r3, #0
 800c3e6:	d00e      	beq.n	800c406 <tcp_zero_window_probe+0xa2>
    /* FIN segment, no data */
    TCPH_FLAGS_SET(tcphdr, TCP_ACK | TCP_FIN);
 800c3e8:	697b      	ldr	r3, [r7, #20]
 800c3ea:	899b      	ldrh	r3, [r3, #12]
 800c3ec:	b29b      	uxth	r3, r3
 800c3ee:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 800c3f2:	b29c      	uxth	r4, r3
 800c3f4:	2011      	movs	r0, #17
 800c3f6:	f7fa f871 	bl	80064dc <lwip_htons>
 800c3fa:	4603      	mov	r3, r0
 800c3fc:	4323      	orrs	r3, r4
 800c3fe:	b29a      	uxth	r2, r3
 800c400:	697b      	ldr	r3, [r7, #20]
 800c402:	819a      	strh	r2, [r3, #12]
 800c404:	e010      	b.n	800c428 <tcp_zero_window_probe+0xc4>
  } else {
    /* Data segment, copy in one byte from the head of the unacked queue */
    char *d = ((char *)p->payload + TCP_HLEN);
 800c406:	69bb      	ldr	r3, [r7, #24]
 800c408:	685b      	ldr	r3, [r3, #4]
 800c40a:	3314      	adds	r3, #20
 800c40c:	613b      	str	r3, [r7, #16]
    /* Depending on whether the segment has already been sent (unacked) or not
       (unsent), seg->p->payload points to the IP header or TCP header.
       Ensure we copy the first TCP data byte: */
    pbuf_copy_partial(seg->p, d, 1, seg->p->tot_len - seg->len);
 800c40e:	6a3b      	ldr	r3, [r7, #32]
 800c410:	6858      	ldr	r0, [r3, #4]
 800c412:	6a3b      	ldr	r3, [r7, #32]
 800c414:	685b      	ldr	r3, [r3, #4]
 800c416:	891a      	ldrh	r2, [r3, #8]
 800c418:	6a3b      	ldr	r3, [r7, #32]
 800c41a:	891b      	ldrh	r3, [r3, #8]
 800c41c:	1ad3      	subs	r3, r2, r3
 800c41e:	b29b      	uxth	r3, r3
 800c420:	2201      	movs	r2, #1
 800c422:	6939      	ldr	r1, [r7, #16]
 800c424:	f7fb fc82 	bl	8007d2c <pbuf_copy_partial>
  }

  /* The byte may be acknowledged without the window being opened. */
  snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + 1;
 800c428:	6a3b      	ldr	r3, [r7, #32]
 800c42a:	68db      	ldr	r3, [r3, #12]
 800c42c:	685b      	ldr	r3, [r3, #4]
 800c42e:	4618      	mov	r0, r3
 800c430:	f7fa f862 	bl	80064f8 <lwip_htonl>
 800c434:	4603      	mov	r3, r0
 800c436:	3301      	adds	r3, #1
 800c438:	60fb      	str	r3, [r7, #12]
  if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 800c43a:	687b      	ldr	r3, [r7, #4]
 800c43c:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800c43e:	68fb      	ldr	r3, [r7, #12]
 800c440:	1ad3      	subs	r3, r2, r3
 800c442:	2b00      	cmp	r3, #0
 800c444:	da02      	bge.n	800c44c <tcp_zero_window_probe+0xe8>
    pcb->snd_nxt = snd_nxt;
 800c446:	687b      	ldr	r3, [r7, #4]
 800c448:	68fa      	ldr	r2, [r7, #12]
 800c44a:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  netif = ip_route(&pcb->local_ip, &pcb->remote_ip);
 800c44c:	687b      	ldr	r3, [r7, #4]
 800c44e:	3304      	adds	r3, #4
 800c450:	4618      	mov	r0, r3
 800c452:	f001 fc1b 	bl	800dc8c <ip4_route>
 800c456:	60b8      	str	r0, [r7, #8]
  if (netif == NULL) {
 800c458:	68bb      	ldr	r3, [r7, #8]
 800c45a:	2b00      	cmp	r3, #0
 800c45c:	d103      	bne.n	800c466 <tcp_zero_window_probe+0x102>
    err = ERR_RTE;
 800c45e:	23fc      	movs	r3, #252	; 0xfc
 800c460:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800c464:	e011      	b.n	800c48a <tcp_zero_window_probe+0x126>
#endif
    TCP_STATS_INC(tcp.xmit);

    /* Send output to IP */
    NETIF_SET_HWADDRHINT(netif, &(pcb->addr_hint));
    err = ip_output_if(p, &pcb->local_ip, &pcb->remote_ip, pcb->ttl,
 800c466:	6879      	ldr	r1, [r7, #4]
 800c468:	687b      	ldr	r3, [r7, #4]
 800c46a:	1d1a      	adds	r2, r3, #4
 800c46c:	687b      	ldr	r3, [r7, #4]
 800c46e:	7a98      	ldrb	r0, [r3, #10]
 800c470:	68bb      	ldr	r3, [r7, #8]
 800c472:	9302      	str	r3, [sp, #8]
 800c474:	2306      	movs	r3, #6
 800c476:	9301      	str	r3, [sp, #4]
 800c478:	2300      	movs	r3, #0
 800c47a:	9300      	str	r3, [sp, #0]
 800c47c:	4603      	mov	r3, r0
 800c47e:	69b8      	ldr	r0, [r7, #24]
 800c480:	f001 fdac 	bl	800dfdc <ip4_output_if>
 800c484:	4603      	mov	r3, r0
 800c486:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      0, IP_PROTO_TCP, netif);
    NETIF_SET_HWADDRHINT(netif, NULL);
  }

  pbuf_free(p);
 800c48a:	69b8      	ldr	r0, [r7, #24]
 800c48c:	f7fb fa52 	bl	8007934 <pbuf_free>

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: seqno %"U32_F
                          " ackno %"U32_F" err %d.\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt, (int)err));
  return err;
 800c490:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 800c494:	4618      	mov	r0, r3
 800c496:	372c      	adds	r7, #44	; 0x2c
 800c498:	46bd      	mov	sp, r7
 800c49a:	bd90      	pop	{r4, r7, pc}

0800c49c <tcpip_tcp_timer>:
 *
 * @param arg unused argument
 */
static void
tcpip_tcp_timer(void *arg)
{
 800c49c:	b580      	push	{r7, lr}
 800c49e:	b082      	sub	sp, #8
 800c4a0:	af00      	add	r7, sp, #0
 800c4a2:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(arg);

  /* call TCP timer handler */
  tcp_tmr();
 800c4a4:	f7fb fcc4 	bl	8007e30 <tcp_tmr>
  /* timer still needed? */
  if (tcp_active_pcbs || tcp_tw_pcbs) {
 800c4a8:	4b0a      	ldr	r3, [pc, #40]	; (800c4d4 <tcpip_tcp_timer+0x38>)
 800c4aa:	681b      	ldr	r3, [r3, #0]
 800c4ac:	2b00      	cmp	r3, #0
 800c4ae:	d103      	bne.n	800c4b8 <tcpip_tcp_timer+0x1c>
 800c4b0:	4b09      	ldr	r3, [pc, #36]	; (800c4d8 <tcpip_tcp_timer+0x3c>)
 800c4b2:	681b      	ldr	r3, [r3, #0]
 800c4b4:	2b00      	cmp	r3, #0
 800c4b6:	d005      	beq.n	800c4c4 <tcpip_tcp_timer+0x28>
    /* restart timer */
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
 800c4b8:	2200      	movs	r2, #0
 800c4ba:	4908      	ldr	r1, [pc, #32]	; (800c4dc <tcpip_tcp_timer+0x40>)
 800c4bc:	20fa      	movs	r0, #250	; 0xfa
 800c4be:	f000 f86f 	bl	800c5a0 <sys_timeout>
 800c4c2:	e002      	b.n	800c4ca <tcpip_tcp_timer+0x2e>
  } else {
    /* disable timer */
    tcpip_tcp_timer_active = 0;
 800c4c4:	4b06      	ldr	r3, [pc, #24]	; (800c4e0 <tcpip_tcp_timer+0x44>)
 800c4c6:	2200      	movs	r2, #0
 800c4c8:	601a      	str	r2, [r3, #0]
  }
}
 800c4ca:	bf00      	nop
 800c4cc:	3708      	adds	r7, #8
 800c4ce:	46bd      	mov	sp, r7
 800c4d0:	bd80      	pop	{r7, pc}
 800c4d2:	bf00      	nop
 800c4d4:	2400acd8 	.word	0x2400acd8
 800c4d8:	2400ace8 	.word	0x2400ace8
 800c4dc:	0800c49d 	.word	0x0800c49d
 800c4e0:	2400407c 	.word	0x2400407c

0800c4e4 <tcp_timer_needed>:
 * the reason is to have the TCP timer only running when
 * there are active (or time-wait) PCBs.
 */
void
tcp_timer_needed(void)
{
 800c4e4:	b580      	push	{r7, lr}
 800c4e6:	af00      	add	r7, sp, #0
  /* timer is off but needed again? */
  if (!tcpip_tcp_timer_active && (tcp_active_pcbs || tcp_tw_pcbs)) {
 800c4e8:	4b0a      	ldr	r3, [pc, #40]	; (800c514 <tcp_timer_needed+0x30>)
 800c4ea:	681b      	ldr	r3, [r3, #0]
 800c4ec:	2b00      	cmp	r3, #0
 800c4ee:	d10f      	bne.n	800c510 <tcp_timer_needed+0x2c>
 800c4f0:	4b09      	ldr	r3, [pc, #36]	; (800c518 <tcp_timer_needed+0x34>)
 800c4f2:	681b      	ldr	r3, [r3, #0]
 800c4f4:	2b00      	cmp	r3, #0
 800c4f6:	d103      	bne.n	800c500 <tcp_timer_needed+0x1c>
 800c4f8:	4b08      	ldr	r3, [pc, #32]	; (800c51c <tcp_timer_needed+0x38>)
 800c4fa:	681b      	ldr	r3, [r3, #0]
 800c4fc:	2b00      	cmp	r3, #0
 800c4fe:	d007      	beq.n	800c510 <tcp_timer_needed+0x2c>
    /* enable and start timer */
    tcpip_tcp_timer_active = 1;
 800c500:	4b04      	ldr	r3, [pc, #16]	; (800c514 <tcp_timer_needed+0x30>)
 800c502:	2201      	movs	r2, #1
 800c504:	601a      	str	r2, [r3, #0]
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
 800c506:	2200      	movs	r2, #0
 800c508:	4905      	ldr	r1, [pc, #20]	; (800c520 <tcp_timer_needed+0x3c>)
 800c50a:	20fa      	movs	r0, #250	; 0xfa
 800c50c:	f000 f848 	bl	800c5a0 <sys_timeout>
  }
}
 800c510:	bf00      	nop
 800c512:	bd80      	pop	{r7, pc}
 800c514:	2400407c 	.word	0x2400407c
 800c518:	2400acd8 	.word	0x2400acd8
 800c51c:	2400ace8 	.word	0x2400ace8
 800c520:	0800c49d 	.word	0x0800c49d

0800c524 <cyclic_timer>:
 *
 * @param arg unused argument
 */
static void
cyclic_timer(void *arg)
{
 800c524:	b580      	push	{r7, lr}
 800c526:	b084      	sub	sp, #16
 800c528:	af00      	add	r7, sp, #0
 800c52a:	6078      	str	r0, [r7, #4]
  const struct lwip_cyclic_timer* cyclic = (const struct lwip_cyclic_timer*)arg;
 800c52c:	687b      	ldr	r3, [r7, #4]
 800c52e:	60fb      	str	r3, [r7, #12]
#if LWIP_DEBUG_TIMERNAMES
  LWIP_DEBUGF(TIMERS_DEBUG, ("tcpip: %s()\n", cyclic->handler_name));
#endif
  cyclic->handler();
 800c530:	68fb      	ldr	r3, [r7, #12]
 800c532:	685b      	ldr	r3, [r3, #4]
 800c534:	4798      	blx	r3
  sys_timeout(cyclic->interval_ms, cyclic_timer, arg);
 800c536:	68fb      	ldr	r3, [r7, #12]
 800c538:	681b      	ldr	r3, [r3, #0]
 800c53a:	687a      	ldr	r2, [r7, #4]
 800c53c:	4903      	ldr	r1, [pc, #12]	; (800c54c <cyclic_timer+0x28>)
 800c53e:	4618      	mov	r0, r3
 800c540:	f000 f82e 	bl	800c5a0 <sys_timeout>
}
 800c544:	bf00      	nop
 800c546:	3710      	adds	r7, #16
 800c548:	46bd      	mov	sp, r7
 800c54a:	bd80      	pop	{r7, pc}
 800c54c:	0800c525 	.word	0x0800c525

0800c550 <sys_timeouts_init>:

/** Initialize this module */
void sys_timeouts_init(void)
{
 800c550:	b580      	push	{r7, lr}
 800c552:	b082      	sub	sp, #8
 800c554:	af00      	add	r7, sp, #0
  size_t i;
  /* tcp_tmr() at index 0 is started on demand */
  for (i = (LWIP_TCP ? 1 : 0); i < LWIP_ARRAYSIZE(lwip_cyclic_timers); i++) {
 800c556:	2301      	movs	r3, #1
 800c558:	607b      	str	r3, [r7, #4]
 800c55a:	e00e      	b.n	800c57a <sys_timeouts_init+0x2a>
    /* we have to cast via size_t to get rid of const warning
      (this is OK as cyclic_timer() casts back to const* */
    sys_timeout(lwip_cyclic_timers[i].interval_ms, cyclic_timer, LWIP_CONST_CAST(void*, &lwip_cyclic_timers[i]));
 800c55c:	4a0d      	ldr	r2, [pc, #52]	; (800c594 <sys_timeouts_init+0x44>)
 800c55e:	687b      	ldr	r3, [r7, #4]
 800c560:	f852 0033 	ldr.w	r0, [r2, r3, lsl #3]
 800c564:	687b      	ldr	r3, [r7, #4]
 800c566:	00db      	lsls	r3, r3, #3
 800c568:	4a0a      	ldr	r2, [pc, #40]	; (800c594 <sys_timeouts_init+0x44>)
 800c56a:	4413      	add	r3, r2
 800c56c:	461a      	mov	r2, r3
 800c56e:	490a      	ldr	r1, [pc, #40]	; (800c598 <sys_timeouts_init+0x48>)
 800c570:	f000 f816 	bl	800c5a0 <sys_timeout>
  for (i = (LWIP_TCP ? 1 : 0); i < LWIP_ARRAYSIZE(lwip_cyclic_timers); i++) {
 800c574:	687b      	ldr	r3, [r7, #4]
 800c576:	3301      	adds	r3, #1
 800c578:	607b      	str	r3, [r7, #4]
 800c57a:	687b      	ldr	r3, [r7, #4]
 800c57c:	2b02      	cmp	r3, #2
 800c57e:	d9ed      	bls.n	800c55c <sys_timeouts_init+0xc>
  }

  /* Initialise timestamp for sys_check_timeouts */
  timeouts_last_time = sys_now();
 800c580:	f003 fa84 	bl	800fa8c <sys_now>
 800c584:	4602      	mov	r2, r0
 800c586:	4b05      	ldr	r3, [pc, #20]	; (800c59c <sys_timeouts_init+0x4c>)
 800c588:	601a      	str	r2, [r3, #0]
}
 800c58a:	bf00      	nop
 800c58c:	3708      	adds	r7, #8
 800c58e:	46bd      	mov	sp, r7
 800c590:	bd80      	pop	{r7, pc}
 800c592:	bf00      	nop
 800c594:	080131e4 	.word	0x080131e4
 800c598:	0800c525 	.word	0x0800c525
 800c59c:	24004078 	.word	0x24004078

0800c5a0 <sys_timeout>:
sys_timeout_debug(u32_t msecs, sys_timeout_handler handler, void *arg, const char* handler_name)
#else /* LWIP_DEBUG_TIMERNAMES */
void
sys_timeout(u32_t msecs, sys_timeout_handler handler, void *arg)
#endif /* LWIP_DEBUG_TIMERNAMES */
{
 800c5a0:	b580      	push	{r7, lr}
 800c5a2:	b088      	sub	sp, #32
 800c5a4:	af00      	add	r7, sp, #0
 800c5a6:	60f8      	str	r0, [r7, #12]
 800c5a8:	60b9      	str	r1, [r7, #8]
 800c5aa:	607a      	str	r2, [r7, #4]
  struct sys_timeo *timeout, *t;
  u32_t now, diff;

  timeout = (struct sys_timeo *)memp_malloc(MEMP_SYS_TIMEOUT);
 800c5ac:	200a      	movs	r0, #10
 800c5ae:	f7fa fba1 	bl	8006cf4 <memp_malloc>
 800c5b2:	6178      	str	r0, [r7, #20]
  if (timeout == NULL) {
 800c5b4:	697b      	ldr	r3, [r7, #20]
 800c5b6:	2b00      	cmp	r3, #0
 800c5b8:	d10a      	bne.n	800c5d0 <sys_timeout+0x30>
    LWIP_ASSERT("sys_timeout: timeout != NULL, pool MEMP_SYS_TIMEOUT is empty", timeout != NULL);
 800c5ba:	697b      	ldr	r3, [r7, #20]
 800c5bc:	2b00      	cmp	r3, #0
 800c5be:	f040 8084 	bne.w	800c6ca <sys_timeout+0x12a>
 800c5c2:	4b44      	ldr	r3, [pc, #272]	; (800c6d4 <sys_timeout+0x134>)
 800c5c4:	22d4      	movs	r2, #212	; 0xd4
 800c5c6:	4944      	ldr	r1, [pc, #272]	; (800c6d8 <sys_timeout+0x138>)
 800c5c8:	4844      	ldr	r0, [pc, #272]	; (800c6dc <sys_timeout+0x13c>)
 800c5ca:	f003 ffb1 	bl	8010530 <iprintf>
    return;
 800c5ce:	e07c      	b.n	800c6ca <sys_timeout+0x12a>
  }

  now = sys_now();
 800c5d0:	f003 fa5c 	bl	800fa8c <sys_now>
 800c5d4:	6138      	str	r0, [r7, #16]
  if (next_timeout == NULL) {
 800c5d6:	4b42      	ldr	r3, [pc, #264]	; (800c6e0 <sys_timeout+0x140>)
 800c5d8:	681b      	ldr	r3, [r3, #0]
 800c5da:	2b00      	cmp	r3, #0
 800c5dc:	d105      	bne.n	800c5ea <sys_timeout+0x4a>
    diff = 0;
 800c5de:	2300      	movs	r3, #0
 800c5e0:	61bb      	str	r3, [r7, #24]
    timeouts_last_time = now;
 800c5e2:	4a40      	ldr	r2, [pc, #256]	; (800c6e4 <sys_timeout+0x144>)
 800c5e4:	693b      	ldr	r3, [r7, #16]
 800c5e6:	6013      	str	r3, [r2, #0]
 800c5e8:	e004      	b.n	800c5f4 <sys_timeout+0x54>
  } else {
    diff = now - timeouts_last_time;
 800c5ea:	4b3e      	ldr	r3, [pc, #248]	; (800c6e4 <sys_timeout+0x144>)
 800c5ec:	681b      	ldr	r3, [r3, #0]
 800c5ee:	693a      	ldr	r2, [r7, #16]
 800c5f0:	1ad3      	subs	r3, r2, r3
 800c5f2:	61bb      	str	r3, [r7, #24]
  }

  timeout->next = NULL;
 800c5f4:	697b      	ldr	r3, [r7, #20]
 800c5f6:	2200      	movs	r2, #0
 800c5f8:	601a      	str	r2, [r3, #0]
  timeout->h = handler;
 800c5fa:	697b      	ldr	r3, [r7, #20]
 800c5fc:	68ba      	ldr	r2, [r7, #8]
 800c5fe:	609a      	str	r2, [r3, #8]
  timeout->arg = arg;
 800c600:	697b      	ldr	r3, [r7, #20]
 800c602:	687a      	ldr	r2, [r7, #4]
 800c604:	60da      	str	r2, [r3, #12]
  timeout->time = msecs + diff;
 800c606:	68fa      	ldr	r2, [r7, #12]
 800c608:	69bb      	ldr	r3, [r7, #24]
 800c60a:	441a      	add	r2, r3
 800c60c:	697b      	ldr	r3, [r7, #20]
 800c60e:	605a      	str	r2, [r3, #4]
  timeout->handler_name = handler_name;
  LWIP_DEBUGF(TIMERS_DEBUG, ("sys_timeout: %p msecs=%"U32_F" handler=%s arg=%p\n",
    (void *)timeout, msecs, handler_name, (void *)arg));
#endif /* LWIP_DEBUG_TIMERNAMES */

  if (next_timeout == NULL) {
 800c610:	4b33      	ldr	r3, [pc, #204]	; (800c6e0 <sys_timeout+0x140>)
 800c612:	681b      	ldr	r3, [r3, #0]
 800c614:	2b00      	cmp	r3, #0
 800c616:	d103      	bne.n	800c620 <sys_timeout+0x80>
    next_timeout = timeout;
 800c618:	4a31      	ldr	r2, [pc, #196]	; (800c6e0 <sys_timeout+0x140>)
 800c61a:	697b      	ldr	r3, [r7, #20]
 800c61c:	6013      	str	r3, [r2, #0]
    return;
 800c61e:	e055      	b.n	800c6cc <sys_timeout+0x12c>
  }

  if (next_timeout->time > msecs) {
 800c620:	4b2f      	ldr	r3, [pc, #188]	; (800c6e0 <sys_timeout+0x140>)
 800c622:	681b      	ldr	r3, [r3, #0]
 800c624:	685b      	ldr	r3, [r3, #4]
 800c626:	68fa      	ldr	r2, [r7, #12]
 800c628:	429a      	cmp	r2, r3
 800c62a:	d20f      	bcs.n	800c64c <sys_timeout+0xac>
    next_timeout->time -= msecs;
 800c62c:	4b2c      	ldr	r3, [pc, #176]	; (800c6e0 <sys_timeout+0x140>)
 800c62e:	681b      	ldr	r3, [r3, #0]
 800c630:	6859      	ldr	r1, [r3, #4]
 800c632:	4b2b      	ldr	r3, [pc, #172]	; (800c6e0 <sys_timeout+0x140>)
 800c634:	681b      	ldr	r3, [r3, #0]
 800c636:	68fa      	ldr	r2, [r7, #12]
 800c638:	1a8a      	subs	r2, r1, r2
 800c63a:	605a      	str	r2, [r3, #4]
    timeout->next = next_timeout;
 800c63c:	4b28      	ldr	r3, [pc, #160]	; (800c6e0 <sys_timeout+0x140>)
 800c63e:	681a      	ldr	r2, [r3, #0]
 800c640:	697b      	ldr	r3, [r7, #20]
 800c642:	601a      	str	r2, [r3, #0]
    next_timeout = timeout;
 800c644:	4a26      	ldr	r2, [pc, #152]	; (800c6e0 <sys_timeout+0x140>)
 800c646:	697b      	ldr	r3, [r7, #20]
 800c648:	6013      	str	r3, [r2, #0]
 800c64a:	e03f      	b.n	800c6cc <sys_timeout+0x12c>
  } else {
    for (t = next_timeout; t != NULL; t = t->next) {
 800c64c:	4b24      	ldr	r3, [pc, #144]	; (800c6e0 <sys_timeout+0x140>)
 800c64e:	681b      	ldr	r3, [r3, #0]
 800c650:	61fb      	str	r3, [r7, #28]
 800c652:	e036      	b.n	800c6c2 <sys_timeout+0x122>
      timeout->time -= t->time;
 800c654:	697b      	ldr	r3, [r7, #20]
 800c656:	685a      	ldr	r2, [r3, #4]
 800c658:	69fb      	ldr	r3, [r7, #28]
 800c65a:	685b      	ldr	r3, [r3, #4]
 800c65c:	1ad2      	subs	r2, r2, r3
 800c65e:	697b      	ldr	r3, [r7, #20]
 800c660:	605a      	str	r2, [r3, #4]
      if (t->next == NULL || t->next->time > timeout->time) {
 800c662:	69fb      	ldr	r3, [r7, #28]
 800c664:	681b      	ldr	r3, [r3, #0]
 800c666:	2b00      	cmp	r3, #0
 800c668:	d006      	beq.n	800c678 <sys_timeout+0xd8>
 800c66a:	69fb      	ldr	r3, [r7, #28]
 800c66c:	681b      	ldr	r3, [r3, #0]
 800c66e:	685a      	ldr	r2, [r3, #4]
 800c670:	697b      	ldr	r3, [r7, #20]
 800c672:	685b      	ldr	r3, [r3, #4]
 800c674:	429a      	cmp	r2, r3
 800c676:	d921      	bls.n	800c6bc <sys_timeout+0x11c>
        if (t->next != NULL) {
 800c678:	69fb      	ldr	r3, [r7, #28]
 800c67a:	681b      	ldr	r3, [r3, #0]
 800c67c:	2b00      	cmp	r3, #0
 800c67e:	d009      	beq.n	800c694 <sys_timeout+0xf4>
          t->next->time -= timeout->time;
 800c680:	69fb      	ldr	r3, [r7, #28]
 800c682:	681b      	ldr	r3, [r3, #0]
 800c684:	6859      	ldr	r1, [r3, #4]
 800c686:	697b      	ldr	r3, [r7, #20]
 800c688:	685a      	ldr	r2, [r3, #4]
 800c68a:	69fb      	ldr	r3, [r7, #28]
 800c68c:	681b      	ldr	r3, [r3, #0]
 800c68e:	1a8a      	subs	r2, r1, r2
 800c690:	605a      	str	r2, [r3, #4]
 800c692:	e00b      	b.n	800c6ac <sys_timeout+0x10c>
        } else if (timeout->time > msecs) {
 800c694:	697b      	ldr	r3, [r7, #20]
 800c696:	685b      	ldr	r3, [r3, #4]
 800c698:	68fa      	ldr	r2, [r7, #12]
 800c69a:	429a      	cmp	r2, r3
 800c69c:	d206      	bcs.n	800c6ac <sys_timeout+0x10c>
          /* If this is the case, 'timeouts_last_time' and 'now' differs too much.
             This can be due to sys_check_timeouts() not being called at the right
             times, but also when stopping in a breakpoint. Anyway, let's assume
             this is not wanted, so add the first timer's time instead of 'diff' */
          timeout->time = msecs + next_timeout->time;
 800c69e:	4b10      	ldr	r3, [pc, #64]	; (800c6e0 <sys_timeout+0x140>)
 800c6a0:	681b      	ldr	r3, [r3, #0]
 800c6a2:	685a      	ldr	r2, [r3, #4]
 800c6a4:	68fb      	ldr	r3, [r7, #12]
 800c6a6:	441a      	add	r2, r3
 800c6a8:	697b      	ldr	r3, [r7, #20]
 800c6aa:	605a      	str	r2, [r3, #4]
        }
        timeout->next = t->next;
 800c6ac:	69fb      	ldr	r3, [r7, #28]
 800c6ae:	681a      	ldr	r2, [r3, #0]
 800c6b0:	697b      	ldr	r3, [r7, #20]
 800c6b2:	601a      	str	r2, [r3, #0]
        t->next = timeout;
 800c6b4:	69fb      	ldr	r3, [r7, #28]
 800c6b6:	697a      	ldr	r2, [r7, #20]
 800c6b8:	601a      	str	r2, [r3, #0]
        break;
 800c6ba:	e007      	b.n	800c6cc <sys_timeout+0x12c>
    for (t = next_timeout; t != NULL; t = t->next) {
 800c6bc:	69fb      	ldr	r3, [r7, #28]
 800c6be:	681b      	ldr	r3, [r3, #0]
 800c6c0:	61fb      	str	r3, [r7, #28]
 800c6c2:	69fb      	ldr	r3, [r7, #28]
 800c6c4:	2b00      	cmp	r3, #0
 800c6c6:	d1c5      	bne.n	800c654 <sys_timeout+0xb4>
 800c6c8:	e000      	b.n	800c6cc <sys_timeout+0x12c>
    return;
 800c6ca:	bf00      	nop
      }
    }
  }
}
 800c6cc:	3720      	adds	r7, #32
 800c6ce:	46bd      	mov	sp, r7
 800c6d0:	bd80      	pop	{r7, pc}
 800c6d2:	bf00      	nop
 800c6d4:	080128c4 	.word	0x080128c4
 800c6d8:	080128f8 	.word	0x080128f8
 800c6dc:	08012938 	.word	0x08012938
 800c6e0:	24004074 	.word	0x24004074
 800c6e4:	24004078 	.word	0x24004078

0800c6e8 <sys_check_timeouts>:
#if !NO_SYS && !defined __DOXYGEN__
static
#endif /* !NO_SYS */
void
sys_check_timeouts(void)
{
 800c6e8:	b580      	push	{r7, lr}
 800c6ea:	b086      	sub	sp, #24
 800c6ec:	af00      	add	r7, sp, #0
  if (next_timeout) {
 800c6ee:	4b24      	ldr	r3, [pc, #144]	; (800c780 <sys_check_timeouts+0x98>)
 800c6f0:	681b      	ldr	r3, [r3, #0]
 800c6f2:	2b00      	cmp	r3, #0
 800c6f4:	d03f      	beq.n	800c776 <sys_check_timeouts+0x8e>
    sys_timeout_handler handler;
    void *arg;
    u8_t had_one;
    u32_t now;

    now = sys_now();
 800c6f6:	f003 f9c9 	bl	800fa8c <sys_now>
 800c6fa:	60f8      	str	r0, [r7, #12]
    /* this cares for wraparounds */
    diff = now - timeouts_last_time;
 800c6fc:	4b21      	ldr	r3, [pc, #132]	; (800c784 <sys_check_timeouts+0x9c>)
 800c6fe:	681b      	ldr	r3, [r3, #0]
 800c700:	68fa      	ldr	r2, [r7, #12]
 800c702:	1ad3      	subs	r3, r2, r3
 800c704:	617b      	str	r3, [r7, #20]
    do {
      PBUF_CHECK_FREE_OOSEQ();
      had_one = 0;
 800c706:	2300      	movs	r3, #0
 800c708:	74fb      	strb	r3, [r7, #19]
      tmptimeout = next_timeout;
 800c70a:	4b1d      	ldr	r3, [pc, #116]	; (800c780 <sys_check_timeouts+0x98>)
 800c70c:	681b      	ldr	r3, [r3, #0]
 800c70e:	60bb      	str	r3, [r7, #8]
      if (tmptimeout && (tmptimeout->time <= diff)) {
 800c710:	68bb      	ldr	r3, [r7, #8]
 800c712:	2b00      	cmp	r3, #0
 800c714:	d02c      	beq.n	800c770 <sys_check_timeouts+0x88>
 800c716:	68bb      	ldr	r3, [r7, #8]
 800c718:	685b      	ldr	r3, [r3, #4]
 800c71a:	697a      	ldr	r2, [r7, #20]
 800c71c:	429a      	cmp	r2, r3
 800c71e:	d327      	bcc.n	800c770 <sys_check_timeouts+0x88>
        /* timeout has expired */
        had_one = 1;
 800c720:	2301      	movs	r3, #1
 800c722:	74fb      	strb	r3, [r7, #19]
        timeouts_last_time += tmptimeout->time;
 800c724:	68bb      	ldr	r3, [r7, #8]
 800c726:	685a      	ldr	r2, [r3, #4]
 800c728:	4b16      	ldr	r3, [pc, #88]	; (800c784 <sys_check_timeouts+0x9c>)
 800c72a:	681b      	ldr	r3, [r3, #0]
 800c72c:	4413      	add	r3, r2
 800c72e:	4a15      	ldr	r2, [pc, #84]	; (800c784 <sys_check_timeouts+0x9c>)
 800c730:	6013      	str	r3, [r2, #0]
        diff -= tmptimeout->time;
 800c732:	68bb      	ldr	r3, [r7, #8]
 800c734:	685b      	ldr	r3, [r3, #4]
 800c736:	697a      	ldr	r2, [r7, #20]
 800c738:	1ad3      	subs	r3, r2, r3
 800c73a:	617b      	str	r3, [r7, #20]
        next_timeout = tmptimeout->next;
 800c73c:	68bb      	ldr	r3, [r7, #8]
 800c73e:	681b      	ldr	r3, [r3, #0]
 800c740:	4a0f      	ldr	r2, [pc, #60]	; (800c780 <sys_check_timeouts+0x98>)
 800c742:	6013      	str	r3, [r2, #0]
        handler = tmptimeout->h;
 800c744:	68bb      	ldr	r3, [r7, #8]
 800c746:	689b      	ldr	r3, [r3, #8]
 800c748:	607b      	str	r3, [r7, #4]
        arg = tmptimeout->arg;
 800c74a:	68bb      	ldr	r3, [r7, #8]
 800c74c:	68db      	ldr	r3, [r3, #12]
 800c74e:	603b      	str	r3, [r7, #0]
        if (handler != NULL) {
          LWIP_DEBUGF(TIMERS_DEBUG, ("sct calling h=%s arg=%p\n",
            tmptimeout->handler_name, arg));
        }
#endif /* LWIP_DEBUG_TIMERNAMES */
        memp_free(MEMP_SYS_TIMEOUT, tmptimeout);
 800c750:	68b9      	ldr	r1, [r7, #8]
 800c752:	200a      	movs	r0, #10
 800c754:	f7fa fb44 	bl	8006de0 <memp_free>
        if (handler != NULL) {
 800c758:	687b      	ldr	r3, [r7, #4]
 800c75a:	2b00      	cmp	r3, #0
 800c75c:	d008      	beq.n	800c770 <sys_check_timeouts+0x88>
#if !NO_SYS
          /* For LWIP_TCPIP_CORE_LOCKING, lock the core before calling the
             timeout handler function. */
          LOCK_TCPIP_CORE();
 800c75e:	480a      	ldr	r0, [pc, #40]	; (800c788 <sys_check_timeouts+0xa0>)
 800c760:	f002 fd22 	bl	800f1a8 <sys_mutex_lock>
#endif /* !NO_SYS */
          handler(arg);
 800c764:	687b      	ldr	r3, [r7, #4]
 800c766:	6838      	ldr	r0, [r7, #0]
 800c768:	4798      	blx	r3
#if !NO_SYS
          UNLOCK_TCPIP_CORE();
 800c76a:	4807      	ldr	r0, [pc, #28]	; (800c788 <sys_check_timeouts+0xa0>)
 800c76c:	f002 fd2b 	bl	800f1c6 <sys_mutex_unlock>
#endif /* !NO_SYS */
        }
        LWIP_TCPIP_THREAD_ALIVE();
      }
    /* repeat until all expired timers have been called */
    } while (had_one);
 800c770:	7cfb      	ldrb	r3, [r7, #19]
 800c772:	2b00      	cmp	r3, #0
 800c774:	d1c7      	bne.n	800c706 <sys_check_timeouts+0x1e>
  }
}
 800c776:	bf00      	nop
 800c778:	3718      	adds	r7, #24
 800c77a:	46bd      	mov	sp, r7
 800c77c:	bd80      	pop	{r7, pc}
 800c77e:	bf00      	nop
 800c780:	24004074 	.word	0x24004074
 800c784:	24004078 	.word	0x24004078
 800c788:	24004198 	.word	0x24004198

0800c78c <sys_timeouts_sleeptime>:
#if !NO_SYS
static
#endif /* !NO_SYS */
u32_t
sys_timeouts_sleeptime(void)
{
 800c78c:	b580      	push	{r7, lr}
 800c78e:	b082      	sub	sp, #8
 800c790:	af00      	add	r7, sp, #0
  u32_t diff;
  if (next_timeout == NULL) {
 800c792:	4b0f      	ldr	r3, [pc, #60]	; (800c7d0 <sys_timeouts_sleeptime+0x44>)
 800c794:	681b      	ldr	r3, [r3, #0]
 800c796:	2b00      	cmp	r3, #0
 800c798:	d102      	bne.n	800c7a0 <sys_timeouts_sleeptime+0x14>
    return 0xffffffff;
 800c79a:	f04f 33ff 	mov.w	r3, #4294967295
 800c79e:	e013      	b.n	800c7c8 <sys_timeouts_sleeptime+0x3c>
  }
  diff = sys_now() - timeouts_last_time;
 800c7a0:	f003 f974 	bl	800fa8c <sys_now>
 800c7a4:	4602      	mov	r2, r0
 800c7a6:	4b0b      	ldr	r3, [pc, #44]	; (800c7d4 <sys_timeouts_sleeptime+0x48>)
 800c7a8:	681b      	ldr	r3, [r3, #0]
 800c7aa:	1ad3      	subs	r3, r2, r3
 800c7ac:	607b      	str	r3, [r7, #4]
  if (diff > next_timeout->time) {
 800c7ae:	4b08      	ldr	r3, [pc, #32]	; (800c7d0 <sys_timeouts_sleeptime+0x44>)
 800c7b0:	681b      	ldr	r3, [r3, #0]
 800c7b2:	685b      	ldr	r3, [r3, #4]
 800c7b4:	687a      	ldr	r2, [r7, #4]
 800c7b6:	429a      	cmp	r2, r3
 800c7b8:	d901      	bls.n	800c7be <sys_timeouts_sleeptime+0x32>
    return 0;
 800c7ba:	2300      	movs	r3, #0
 800c7bc:	e004      	b.n	800c7c8 <sys_timeouts_sleeptime+0x3c>
  } else {
    return next_timeout->time - diff;
 800c7be:	4b04      	ldr	r3, [pc, #16]	; (800c7d0 <sys_timeouts_sleeptime+0x44>)
 800c7c0:	681b      	ldr	r3, [r3, #0]
 800c7c2:	685a      	ldr	r2, [r3, #4]
 800c7c4:	687b      	ldr	r3, [r7, #4]
 800c7c6:	1ad3      	subs	r3, r2, r3
  }
}
 800c7c8:	4618      	mov	r0, r3
 800c7ca:	3708      	adds	r7, #8
 800c7cc:	46bd      	mov	sp, r7
 800c7ce:	bd80      	pop	{r7, pc}
 800c7d0:	24004074 	.word	0x24004074
 800c7d4:	24004078 	.word	0x24004078

0800c7d8 <sys_timeouts_mbox_fetch>:
 * @param mbox the mbox to fetch the message from
 * @param msg the place to store the message
 */
void
sys_timeouts_mbox_fetch(sys_mbox_t *mbox, void **msg)
{
 800c7d8:	b580      	push	{r7, lr}
 800c7da:	b084      	sub	sp, #16
 800c7dc:	af00      	add	r7, sp, #0
 800c7de:	6078      	str	r0, [r7, #4]
 800c7e0:	6039      	str	r1, [r7, #0]
  u32_t sleeptime;

again:
  if (!next_timeout) {
 800c7e2:	4b0f      	ldr	r3, [pc, #60]	; (800c820 <sys_timeouts_mbox_fetch+0x48>)
 800c7e4:	681b      	ldr	r3, [r3, #0]
 800c7e6:	2b00      	cmp	r3, #0
 800c7e8:	d105      	bne.n	800c7f6 <sys_timeouts_mbox_fetch+0x1e>
    sys_arch_mbox_fetch(mbox, msg, 0);
 800c7ea:	2200      	movs	r2, #0
 800c7ec:	6839      	ldr	r1, [r7, #0]
 800c7ee:	6878      	ldr	r0, [r7, #4]
 800c7f0:	f002 fbfd 	bl	800efee <sys_arch_mbox_fetch>
    return;
 800c7f4:	e011      	b.n	800c81a <sys_timeouts_mbox_fetch+0x42>
  }

  sleeptime = sys_timeouts_sleeptime();
 800c7f6:	f7ff ffc9 	bl	800c78c <sys_timeouts_sleeptime>
 800c7fa:	60f8      	str	r0, [r7, #12]
  if (sleeptime == 0 || sys_arch_mbox_fetch(mbox, msg, sleeptime) == SYS_ARCH_TIMEOUT) {
 800c7fc:	68fb      	ldr	r3, [r7, #12]
 800c7fe:	2b00      	cmp	r3, #0
 800c800:	d008      	beq.n	800c814 <sys_timeouts_mbox_fetch+0x3c>
 800c802:	68fa      	ldr	r2, [r7, #12]
 800c804:	6839      	ldr	r1, [r7, #0]
 800c806:	6878      	ldr	r0, [r7, #4]
 800c808:	f002 fbf1 	bl	800efee <sys_arch_mbox_fetch>
 800c80c:	4603      	mov	r3, r0
 800c80e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c812:	d102      	bne.n	800c81a <sys_timeouts_mbox_fetch+0x42>
    /* If a SYS_ARCH_TIMEOUT value is returned, a timeout occurred
       before a message could be fetched. */
    sys_check_timeouts();
 800c814:	f7ff ff68 	bl	800c6e8 <sys_check_timeouts>
    /* We try again to fetch a message from the mbox. */
    goto again;
 800c818:	e7e3      	b.n	800c7e2 <sys_timeouts_mbox_fetch+0xa>
  }
}
 800c81a:	3710      	adds	r7, #16
 800c81c:	46bd      	mov	sp, r7
 800c81e:	bd80      	pop	{r7, pc}
 800c820:	24004074 	.word	0x24004074

0800c824 <udp_init>:
/**
 * Initialize this module.
 */
void
udp_init(void)
{
 800c824:	b480      	push	{r7}
 800c826:	af00      	add	r7, sp, #0
#if LWIP_RANDOMIZE_INITIAL_LOCAL_PORTS && defined(LWIP_RAND)
  udp_port = UDP_ENSURE_LOCAL_PORT_RANGE(LWIP_RAND());
#endif /* LWIP_RANDOMIZE_INITIAL_LOCAL_PORTS && defined(LWIP_RAND) */
}
 800c828:	bf00      	nop
 800c82a:	46bd      	mov	sp, r7
 800c82c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c830:	4770      	bx	lr
	...

0800c834 <udp_input_local_match>:
 * @param broadcast 1 if his is an IPv4 broadcast (global or subnet-only), 0 otherwise (only used for IPv4)
 * @return 1 on match, 0 otherwise
 */
static u8_t
udp_input_local_match(struct udp_pcb *pcb, struct netif *inp, u8_t broadcast)
{
 800c834:	b480      	push	{r7}
 800c836:	b085      	sub	sp, #20
 800c838:	af00      	add	r7, sp, #0
 800c83a:	60f8      	str	r0, [r7, #12]
 800c83c:	60b9      	str	r1, [r7, #8]
 800c83e:	4613      	mov	r3, r2
 800c840:	71fb      	strb	r3, [r7, #7]
  /* Only need to check PCB if incoming IP version matches PCB IP version */
  if (IP_ADDR_PCB_VERSION_MATCH_EXACT(pcb, ip_current_dest_addr())) {
#if LWIP_IPV4
    /* Special case: IPv4 broadcast: all or broadcasts in my subnet
     * Note: broadcast variable can only be 1 if it is an IPv4 broadcast */
    if (broadcast != 0) {
 800c842:	79fb      	ldrb	r3, [r7, #7]
 800c844:	2b00      	cmp	r3, #0
 800c846:	d018      	beq.n	800c87a <udp_input_local_match+0x46>
#if IP_SOF_BROADCAST_RECV
      if (ip_get_option(pcb, SOF_BROADCAST))
#endif /* IP_SOF_BROADCAST_RECV */
      {
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 800c848:	68fb      	ldr	r3, [r7, #12]
 800c84a:	2b00      	cmp	r3, #0
 800c84c:	d013      	beq.n	800c876 <udp_input_local_match+0x42>
 800c84e:	68fb      	ldr	r3, [r7, #12]
 800c850:	681b      	ldr	r3, [r3, #0]
 800c852:	2b00      	cmp	r3, #0
 800c854:	d00f      	beq.n	800c876 <udp_input_local_match+0x42>
          ((ip4_current_dest_addr()->addr == IPADDR_BROADCAST)) ||
 800c856:	4b14      	ldr	r3, [pc, #80]	; (800c8a8 <udp_input_local_match+0x74>)
 800c858:	695b      	ldr	r3, [r3, #20]
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 800c85a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c85e:	d00a      	beq.n	800c876 <udp_input_local_match+0x42>
           ip4_addr_netcmp(ip_2_ip4(&pcb->local_ip), ip4_current_dest_addr(), netif_ip4_netmask(inp))) {
 800c860:	68fb      	ldr	r3, [r7, #12]
 800c862:	681a      	ldr	r2, [r3, #0]
 800c864:	4b10      	ldr	r3, [pc, #64]	; (800c8a8 <udp_input_local_match+0x74>)
 800c866:	695b      	ldr	r3, [r3, #20]
 800c868:	405a      	eors	r2, r3
 800c86a:	68bb      	ldr	r3, [r7, #8]
 800c86c:	3308      	adds	r3, #8
 800c86e:	681b      	ldr	r3, [r3, #0]
 800c870:	4013      	ands	r3, r2
          ((ip4_current_dest_addr()->addr == IPADDR_BROADCAST)) ||
 800c872:	2b00      	cmp	r3, #0
 800c874:	d110      	bne.n	800c898 <udp_input_local_match+0x64>
          return 1;
 800c876:	2301      	movs	r3, #1
 800c878:	e00f      	b.n	800c89a <udp_input_local_match+0x66>
        }
      }
    } else
#endif /* LWIP_IPV4 */
    /* Handle IPv4 and IPv6: all or exact match */
    if (ip_addr_isany(&pcb->local_ip) || ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 800c87a:	68fb      	ldr	r3, [r7, #12]
 800c87c:	2b00      	cmp	r3, #0
 800c87e:	d009      	beq.n	800c894 <udp_input_local_match+0x60>
 800c880:	68fb      	ldr	r3, [r7, #12]
 800c882:	681b      	ldr	r3, [r3, #0]
 800c884:	2b00      	cmp	r3, #0
 800c886:	d005      	beq.n	800c894 <udp_input_local_match+0x60>
 800c888:	68fb      	ldr	r3, [r7, #12]
 800c88a:	681a      	ldr	r2, [r3, #0]
 800c88c:	4b06      	ldr	r3, [pc, #24]	; (800c8a8 <udp_input_local_match+0x74>)
 800c88e:	695b      	ldr	r3, [r3, #20]
 800c890:	429a      	cmp	r2, r3
 800c892:	d101      	bne.n	800c898 <udp_input_local_match+0x64>
      return 1;
 800c894:	2301      	movs	r3, #1
 800c896:	e000      	b.n	800c89a <udp_input_local_match+0x66>
    }
  }

  return 0;
 800c898:	2300      	movs	r3, #0
}
 800c89a:	4618      	mov	r0, r3
 800c89c:	3714      	adds	r7, #20
 800c89e:	46bd      	mov	sp, r7
 800c8a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c8a4:	4770      	bx	lr
 800c8a6:	bf00      	nop
 800c8a8:	2400419c 	.word	0x2400419c

0800c8ac <udp_input>:
 * @param inp network interface on which the datagram was received.
 *
 */
void
udp_input(struct pbuf *p, struct netif *inp)
{
 800c8ac:	b590      	push	{r4, r7, lr}
 800c8ae:	b08d      	sub	sp, #52	; 0x34
 800c8b0:	af02      	add	r7, sp, #8
 800c8b2:	6078      	str	r0, [r7, #4]
 800c8b4:	6039      	str	r1, [r7, #0]
  struct udp_hdr *udphdr;
  struct udp_pcb *pcb, *prev;
  struct udp_pcb *uncon_pcb;
  u16_t src, dest;
  u8_t broadcast;
  u8_t for_us = 0;
 800c8b6:	2300      	movs	r3, #0
 800c8b8:	76fb      	strb	r3, [r7, #27]
  PERF_START;

  UDP_STATS_INC(udp.recv);

  /* Check minimum length (UDP header) */
  if (p->len < UDP_HLEN) {
 800c8ba:	687b      	ldr	r3, [r7, #4]
 800c8bc:	895b      	ldrh	r3, [r3, #10]
 800c8be:	2b07      	cmp	r3, #7
 800c8c0:	d803      	bhi.n	800c8ca <udp_input+0x1e>
    LWIP_DEBUGF(UDP_DEBUG,
                ("udp_input: short UDP datagram (%"U16_F" bytes) discarded\n", p->tot_len));
    UDP_STATS_INC(udp.lenerr);
    UDP_STATS_INC(udp.drop);
    MIB2_STATS_INC(mib2.udpinerrors);
    pbuf_free(p);
 800c8c2:	6878      	ldr	r0, [r7, #4]
 800c8c4:	f7fb f836 	bl	8007934 <pbuf_free>
    goto end;
 800c8c8:	e0c6      	b.n	800ca58 <udp_input+0x1ac>
  }

  udphdr = (struct udp_hdr *)p->payload;
 800c8ca:	687b      	ldr	r3, [r7, #4]
 800c8cc:	685b      	ldr	r3, [r3, #4]
 800c8ce:	617b      	str	r3, [r7, #20]

  /* is broadcast packet ? */
  broadcast = ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif());
 800c8d0:	4b63      	ldr	r3, [pc, #396]	; (800ca60 <udp_input+0x1b4>)
 800c8d2:	695a      	ldr	r2, [r3, #20]
 800c8d4:	4b62      	ldr	r3, [pc, #392]	; (800ca60 <udp_input+0x1b4>)
 800c8d6:	681b      	ldr	r3, [r3, #0]
 800c8d8:	4619      	mov	r1, r3
 800c8da:	4610      	mov	r0, r2
 800c8dc:	f001 fc50 	bl	800e180 <ip4_addr_isbroadcast_u32>
 800c8e0:	4603      	mov	r3, r0
 800c8e2:	74fb      	strb	r3, [r7, #19]

  LWIP_DEBUGF(UDP_DEBUG, ("udp_input: received datagram of length %"U16_F"\n", p->tot_len));

  /* convert src and dest ports to host byte order */
  src = lwip_ntohs(udphdr->src);
 800c8e4:	697b      	ldr	r3, [r7, #20]
 800c8e6:	881b      	ldrh	r3, [r3, #0]
 800c8e8:	b29b      	uxth	r3, r3
 800c8ea:	4618      	mov	r0, r3
 800c8ec:	f7f9 fdf6 	bl	80064dc <lwip_htons>
 800c8f0:	4603      	mov	r3, r0
 800c8f2:	823b      	strh	r3, [r7, #16]
  dest = lwip_ntohs(udphdr->dest);
 800c8f4:	697b      	ldr	r3, [r7, #20]
 800c8f6:	885b      	ldrh	r3, [r3, #2]
 800c8f8:	b29b      	uxth	r3, r3
 800c8fa:	4618      	mov	r0, r3
 800c8fc:	f7f9 fdee 	bl	80064dc <lwip_htons>
 800c900:	4603      	mov	r3, r0
 800c902:	81fb      	strh	r3, [r7, #14]
  ip_addr_debug_print(UDP_DEBUG, ip_current_dest_addr());
  LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F") <-- (", lwip_ntohs(udphdr->dest)));
  ip_addr_debug_print(UDP_DEBUG, ip_current_src_addr());
  LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F")\n", lwip_ntohs(udphdr->src)));

  pcb = NULL;
 800c904:	2300      	movs	r3, #0
 800c906:	627b      	str	r3, [r7, #36]	; 0x24
  prev = NULL;
 800c908:	2300      	movs	r3, #0
 800c90a:	623b      	str	r3, [r7, #32]
  uncon_pcb = NULL;
 800c90c:	2300      	movs	r3, #0
 800c90e:	61fb      	str	r3, [r7, #28]
  /* Iterate through the UDP pcb list for a matching pcb.
   * 'Perfect match' pcbs (connected to the remote port & ip address) are
   * preferred. If no perfect match is found, the first unconnected pcb that
   * matches the local port and ip address gets the datagram. */
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 800c910:	4b54      	ldr	r3, [pc, #336]	; (800ca64 <udp_input+0x1b8>)
 800c912:	681b      	ldr	r3, [r3, #0]
 800c914:	627b      	str	r3, [r7, #36]	; 0x24
 800c916:	e03b      	b.n	800c990 <udp_input+0xe4>
    LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F") <-- (", pcb->local_port));
    ip_addr_debug_print(UDP_DEBUG, &pcb->remote_ip);
    LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F")\n", pcb->remote_port));

    /* compare PCB local addr+port to UDP destination addr+port */
    if ((pcb->local_port == dest) &&
 800c918:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c91a:	8a5b      	ldrh	r3, [r3, #18]
 800c91c:	89fa      	ldrh	r2, [r7, #14]
 800c91e:	429a      	cmp	r2, r3
 800c920:	d131      	bne.n	800c986 <udp_input+0xda>
        (udp_input_local_match(pcb, inp, broadcast) != 0)) {
 800c922:	7cfb      	ldrb	r3, [r7, #19]
 800c924:	461a      	mov	r2, r3
 800c926:	6839      	ldr	r1, [r7, #0]
 800c928:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800c92a:	f7ff ff83 	bl	800c834 <udp_input_local_match>
 800c92e:	4603      	mov	r3, r0
    if ((pcb->local_port == dest) &&
 800c930:	2b00      	cmp	r3, #0
 800c932:	d028      	beq.n	800c986 <udp_input+0xda>
      if (((pcb->flags & UDP_FLAGS_CONNECTED) == 0) &&
 800c934:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c936:	7c1b      	ldrb	r3, [r3, #16]
 800c938:	f003 0304 	and.w	r3, r3, #4
 800c93c:	2b00      	cmp	r3, #0
 800c93e:	d104      	bne.n	800c94a <udp_input+0x9e>
 800c940:	69fb      	ldr	r3, [r7, #28]
 800c942:	2b00      	cmp	r3, #0
 800c944:	d101      	bne.n	800c94a <udp_input+0x9e>
          /* prefer specific IPs over cath-all */
          || !ip_addr_isany(&pcb->local_ip)
#endif /* SO_REUSE */
          )) {
        /* the first unconnected matching PCB */
        uncon_pcb = pcb;
 800c946:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c948:	61fb      	str	r3, [r7, #28]
      }

      /* compare PCB remote addr+port to UDP source addr+port */
      if ((pcb->remote_port == src) &&
 800c94a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c94c:	8a9b      	ldrh	r3, [r3, #20]
 800c94e:	8a3a      	ldrh	r2, [r7, #16]
 800c950:	429a      	cmp	r2, r3
 800c952:	d118      	bne.n	800c986 <udp_input+0xda>
          (ip_addr_isany_val(pcb->remote_ip) ||
 800c954:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c956:	685b      	ldr	r3, [r3, #4]
      if ((pcb->remote_port == src) &&
 800c958:	2b00      	cmp	r3, #0
 800c95a:	d005      	beq.n	800c968 <udp_input+0xbc>
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()))) {
 800c95c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c95e:	685a      	ldr	r2, [r3, #4]
 800c960:	4b3f      	ldr	r3, [pc, #252]	; (800ca60 <udp_input+0x1b4>)
 800c962:	691b      	ldr	r3, [r3, #16]
          (ip_addr_isany_val(pcb->remote_ip) ||
 800c964:	429a      	cmp	r2, r3
 800c966:	d10e      	bne.n	800c986 <udp_input+0xda>
        /* the first fully matching PCB */
        if (prev != NULL) {
 800c968:	6a3b      	ldr	r3, [r7, #32]
 800c96a:	2b00      	cmp	r3, #0
 800c96c:	d014      	beq.n	800c998 <udp_input+0xec>
          /* move the pcb to the front of udp_pcbs so that is
             found faster next time */
          prev->next = pcb->next;
 800c96e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c970:	68da      	ldr	r2, [r3, #12]
 800c972:	6a3b      	ldr	r3, [r7, #32]
 800c974:	60da      	str	r2, [r3, #12]
          pcb->next = udp_pcbs;
 800c976:	4b3b      	ldr	r3, [pc, #236]	; (800ca64 <udp_input+0x1b8>)
 800c978:	681a      	ldr	r2, [r3, #0]
 800c97a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c97c:	60da      	str	r2, [r3, #12]
          udp_pcbs = pcb;
 800c97e:	4a39      	ldr	r2, [pc, #228]	; (800ca64 <udp_input+0x1b8>)
 800c980:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c982:	6013      	str	r3, [r2, #0]
        } else {
          UDP_STATS_INC(udp.cachehit);
        }
        break;
 800c984:	e008      	b.n	800c998 <udp_input+0xec>
      }
    }

    prev = pcb;
 800c986:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c988:	623b      	str	r3, [r7, #32]
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 800c98a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c98c:	68db      	ldr	r3, [r3, #12]
 800c98e:	627b      	str	r3, [r7, #36]	; 0x24
 800c990:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c992:	2b00      	cmp	r3, #0
 800c994:	d1c0      	bne.n	800c918 <udp_input+0x6c>
 800c996:	e000      	b.n	800c99a <udp_input+0xee>
        break;
 800c998:	bf00      	nop
  }
  /* no fully matching pcb found? then look for an unconnected pcb */
  if (pcb == NULL) {
 800c99a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c99c:	2b00      	cmp	r3, #0
 800c99e:	d101      	bne.n	800c9a4 <udp_input+0xf8>
    pcb = uncon_pcb;
 800c9a0:	69fb      	ldr	r3, [r7, #28]
 800c9a2:	627b      	str	r3, [r7, #36]	; 0x24
  }

  /* Check checksum if this is a match or if it was directed at us. */
  if (pcb != NULL) {
 800c9a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c9a6:	2b00      	cmp	r3, #0
 800c9a8:	d002      	beq.n	800c9b0 <udp_input+0x104>
    for_us = 1;
 800c9aa:	2301      	movs	r3, #1
 800c9ac:	76fb      	strb	r3, [r7, #27]
 800c9ae:	e00a      	b.n	800c9c6 <udp_input+0x11a>
      for_us = netif_get_ip6_addr_match(inp, ip6_current_dest_addr()) >= 0;
    }
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
    if (!ip_current_is_v6()) {
      for_us = ip4_addr_cmp(netif_ip4_addr(inp), ip4_current_dest_addr());
 800c9b0:	683b      	ldr	r3, [r7, #0]
 800c9b2:	3304      	adds	r3, #4
 800c9b4:	681a      	ldr	r2, [r3, #0]
 800c9b6:	4b2a      	ldr	r3, [pc, #168]	; (800ca60 <udp_input+0x1b4>)
 800c9b8:	695b      	ldr	r3, [r3, #20]
 800c9ba:	429a      	cmp	r2, r3
 800c9bc:	bf0c      	ite	eq
 800c9be:	2301      	moveq	r3, #1
 800c9c0:	2300      	movne	r3, #0
 800c9c2:	b2db      	uxtb	r3, r3
 800c9c4:	76fb      	strb	r3, [r7, #27]
    }
#endif /* LWIP_IPV4 */
  }

  if (for_us) {
 800c9c6:	7efb      	ldrb	r3, [r7, #27]
 800c9c8:	2b00      	cmp	r3, #0
 800c9ca:	d042      	beq.n	800ca52 <udp_input+0x1a6>
          }
        }
      }
    }
#endif /* CHECKSUM_CHECK_UDP */
    if (pbuf_header(p, -UDP_HLEN)) {
 800c9cc:	f06f 0107 	mvn.w	r1, #7
 800c9d0:	6878      	ldr	r0, [r7, #4]
 800c9d2:	f7fa ff8b 	bl	80078ec <pbuf_header>
 800c9d6:	4603      	mov	r3, r0
 800c9d8:	2b00      	cmp	r3, #0
 800c9da:	d00a      	beq.n	800c9f2 <udp_input+0x146>
      /* Can we cope with this failing? Just assert for now */
      LWIP_ASSERT("pbuf_header failed\n", 0);
 800c9dc:	4b22      	ldr	r3, [pc, #136]	; (800ca68 <udp_input+0x1bc>)
 800c9de:	f240 1255 	movw	r2, #341	; 0x155
 800c9e2:	4922      	ldr	r1, [pc, #136]	; (800ca6c <udp_input+0x1c0>)
 800c9e4:	4822      	ldr	r0, [pc, #136]	; (800ca70 <udp_input+0x1c4>)
 800c9e6:	f003 fda3 	bl	8010530 <iprintf>
      UDP_STATS_INC(udp.drop);
      MIB2_STATS_INC(mib2.udpinerrors);
      pbuf_free(p);
 800c9ea:	6878      	ldr	r0, [r7, #4]
 800c9ec:	f7fa ffa2 	bl	8007934 <pbuf_free>
      goto end;
 800c9f0:	e032      	b.n	800ca58 <udp_input+0x1ac>
    }

    if (pcb != NULL) {
 800c9f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c9f4:	2b00      	cmp	r3, #0
 800c9f6:	d012      	beq.n	800ca1e <udp_input+0x172>
          pbuf_header(p, -hdrs_len);
        }
      }
#endif /* SO_REUSE && SO_REUSE_RXTOALL */
      /* callback */
      if (pcb->recv != NULL) {
 800c9f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c9fa:	699b      	ldr	r3, [r3, #24]
 800c9fc:	2b00      	cmp	r3, #0
 800c9fe:	d00a      	beq.n	800ca16 <udp_input+0x16a>
        /* now the recv function is responsible for freeing p */
        pcb->recv(pcb->recv_arg, pcb, p, ip_current_src_addr(), src);
 800ca00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ca02:	699c      	ldr	r4, [r3, #24]
 800ca04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ca06:	69d8      	ldr	r0, [r3, #28]
 800ca08:	8a3b      	ldrh	r3, [r7, #16]
 800ca0a:	9300      	str	r3, [sp, #0]
 800ca0c:	4b19      	ldr	r3, [pc, #100]	; (800ca74 <udp_input+0x1c8>)
 800ca0e:	687a      	ldr	r2, [r7, #4]
 800ca10:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800ca12:	47a0      	blx	r4
  } else {
    pbuf_free(p);
  }
end:
  PERF_STOP("udp_input");
  return;
 800ca14:	e021      	b.n	800ca5a <udp_input+0x1ae>
        pbuf_free(p);
 800ca16:	6878      	ldr	r0, [r7, #4]
 800ca18:	f7fa ff8c 	bl	8007934 <pbuf_free>
        goto end;
 800ca1c:	e01c      	b.n	800ca58 <udp_input+0x1ac>
      if (!broadcast && !ip_addr_ismulticast(ip_current_dest_addr())) {
 800ca1e:	7cfb      	ldrb	r3, [r7, #19]
 800ca20:	2b00      	cmp	r3, #0
 800ca22:	d112      	bne.n	800ca4a <udp_input+0x19e>
 800ca24:	4b0e      	ldr	r3, [pc, #56]	; (800ca60 <udp_input+0x1b4>)
 800ca26:	695b      	ldr	r3, [r3, #20]
 800ca28:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800ca2c:	2be0      	cmp	r3, #224	; 0xe0
 800ca2e:	d00c      	beq.n	800ca4a <udp_input+0x19e>
        pbuf_header_force(p, (s16_t)(ip_current_header_tot_len() + UDP_HLEN));
 800ca30:	4b0b      	ldr	r3, [pc, #44]	; (800ca60 <udp_input+0x1b4>)
 800ca32:	899b      	ldrh	r3, [r3, #12]
 800ca34:	3308      	adds	r3, #8
 800ca36:	b29b      	uxth	r3, r3
 800ca38:	b21b      	sxth	r3, r3
 800ca3a:	4619      	mov	r1, r3
 800ca3c:	6878      	ldr	r0, [r7, #4]
 800ca3e:	f7fa ff67 	bl	8007910 <pbuf_header_force>
        icmp_port_unreach(ip_current_is_v6(), p);
 800ca42:	2103      	movs	r1, #3
 800ca44:	6878      	ldr	r0, [r7, #4]
 800ca46:	f001 f899 	bl	800db7c <icmp_dest_unreach>
      pbuf_free(p);
 800ca4a:	6878      	ldr	r0, [r7, #4]
 800ca4c:	f7fa ff72 	bl	8007934 <pbuf_free>
  return;
 800ca50:	e003      	b.n	800ca5a <udp_input+0x1ae>
    pbuf_free(p);
 800ca52:	6878      	ldr	r0, [r7, #4]
 800ca54:	f7fa ff6e 	bl	8007934 <pbuf_free>
  return;
 800ca58:	bf00      	nop
  UDP_STATS_INC(udp.drop);
  MIB2_STATS_INC(mib2.udpinerrors);
  pbuf_free(p);
  PERF_STOP("udp_input");
#endif /* CHECKSUM_CHECK_UDP */
}
 800ca5a:	372c      	adds	r7, #44	; 0x2c
 800ca5c:	46bd      	mov	sp, r7
 800ca5e:	bd90      	pop	{r4, r7, pc}
 800ca60:	2400419c 	.word	0x2400419c
 800ca64:	2400acf0 	.word	0x2400acf0
 800ca68:	08012960 	.word	0x08012960
 800ca6c:	08012990 	.word	0x08012990
 800ca70:	080129a4 	.word	0x080129a4
 800ca74:	240041ac 	.word	0x240041ac

0800ca78 <udp_netif_ip_addr_changed>:
 *
 * @param old_addr IP address of the netif before change
 * @param new_addr IP address of the netif after change
 */
void udp_netif_ip_addr_changed(const ip_addr_t* old_addr, const ip_addr_t* new_addr)
{
 800ca78:	b480      	push	{r7}
 800ca7a:	b085      	sub	sp, #20
 800ca7c:	af00      	add	r7, sp, #0
 800ca7e:	6078      	str	r0, [r7, #4]
 800ca80:	6039      	str	r1, [r7, #0]
  struct udp_pcb* upcb;

  if (!ip_addr_isany(old_addr) && !ip_addr_isany(new_addr)) {
 800ca82:	687b      	ldr	r3, [r7, #4]
 800ca84:	2b00      	cmp	r3, #0
 800ca86:	d01e      	beq.n	800cac6 <udp_netif_ip_addr_changed+0x4e>
 800ca88:	687b      	ldr	r3, [r7, #4]
 800ca8a:	681b      	ldr	r3, [r3, #0]
 800ca8c:	2b00      	cmp	r3, #0
 800ca8e:	d01a      	beq.n	800cac6 <udp_netif_ip_addr_changed+0x4e>
 800ca90:	683b      	ldr	r3, [r7, #0]
 800ca92:	2b00      	cmp	r3, #0
 800ca94:	d017      	beq.n	800cac6 <udp_netif_ip_addr_changed+0x4e>
 800ca96:	683b      	ldr	r3, [r7, #0]
 800ca98:	681b      	ldr	r3, [r3, #0]
 800ca9a:	2b00      	cmp	r3, #0
 800ca9c:	d013      	beq.n	800cac6 <udp_netif_ip_addr_changed+0x4e>
    for (upcb = udp_pcbs; upcb != NULL; upcb = upcb->next) {
 800ca9e:	4b0d      	ldr	r3, [pc, #52]	; (800cad4 <udp_netif_ip_addr_changed+0x5c>)
 800caa0:	681b      	ldr	r3, [r3, #0]
 800caa2:	60fb      	str	r3, [r7, #12]
 800caa4:	e00c      	b.n	800cac0 <udp_netif_ip_addr_changed+0x48>
      /* PCB bound to current local interface address? */
      if (ip_addr_cmp(&upcb->local_ip, old_addr)) {
 800caa6:	68fb      	ldr	r3, [r7, #12]
 800caa8:	681a      	ldr	r2, [r3, #0]
 800caaa:	687b      	ldr	r3, [r7, #4]
 800caac:	681b      	ldr	r3, [r3, #0]
 800caae:	429a      	cmp	r2, r3
 800cab0:	d103      	bne.n	800caba <udp_netif_ip_addr_changed+0x42>
        /* The PCB is bound to the old ipaddr and
         * is set to bound to the new one instead */
        ip_addr_copy(upcb->local_ip, *new_addr);
 800cab2:	683b      	ldr	r3, [r7, #0]
 800cab4:	681a      	ldr	r2, [r3, #0]
 800cab6:	68fb      	ldr	r3, [r7, #12]
 800cab8:	601a      	str	r2, [r3, #0]
    for (upcb = udp_pcbs; upcb != NULL; upcb = upcb->next) {
 800caba:	68fb      	ldr	r3, [r7, #12]
 800cabc:	68db      	ldr	r3, [r3, #12]
 800cabe:	60fb      	str	r3, [r7, #12]
 800cac0:	68fb      	ldr	r3, [r7, #12]
 800cac2:	2b00      	cmp	r3, #0
 800cac4:	d1ef      	bne.n	800caa6 <udp_netif_ip_addr_changed+0x2e>
      }
    }
  }
}
 800cac6:	bf00      	nop
 800cac8:	3714      	adds	r7, #20
 800caca:	46bd      	mov	sp, r7
 800cacc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cad0:	4770      	bx	lr
 800cad2:	bf00      	nop
 800cad4:	2400acf0 	.word	0x2400acf0

0800cad8 <etharp_free_entry>:
#endif /* ARP_QUEUEING */

/** Clean up ARP table entries */
static void
etharp_free_entry(int i)
{
 800cad8:	b580      	push	{r7, lr}
 800cada:	b082      	sub	sp, #8
 800cadc:	af00      	add	r7, sp, #0
 800cade:	6078      	str	r0, [r7, #4]
  /* remove from SNMP ARP index tree */
  mib2_remove_arp_entry(arp_table[i].netif, &arp_table[i].ipaddr);
  /* and empty packet queue */
  if (arp_table[i].q != NULL) {
 800cae0:	4915      	ldr	r1, [pc, #84]	; (800cb38 <etharp_free_entry+0x60>)
 800cae2:	687a      	ldr	r2, [r7, #4]
 800cae4:	4613      	mov	r3, r2
 800cae6:	005b      	lsls	r3, r3, #1
 800cae8:	4413      	add	r3, r2
 800caea:	00db      	lsls	r3, r3, #3
 800caec:	440b      	add	r3, r1
 800caee:	681b      	ldr	r3, [r3, #0]
 800caf0:	2b00      	cmp	r3, #0
 800caf2:	d013      	beq.n	800cb1c <etharp_free_entry+0x44>
    /* remove all queued packets */
    LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_free_entry: freeing entry %"U16_F", packet queue %p.\n", (u16_t)i, (void *)(arp_table[i].q)));
    free_etharp_q(arp_table[i].q);
 800caf4:	4910      	ldr	r1, [pc, #64]	; (800cb38 <etharp_free_entry+0x60>)
 800caf6:	687a      	ldr	r2, [r7, #4]
 800caf8:	4613      	mov	r3, r2
 800cafa:	005b      	lsls	r3, r3, #1
 800cafc:	4413      	add	r3, r2
 800cafe:	00db      	lsls	r3, r3, #3
 800cb00:	440b      	add	r3, r1
 800cb02:	681b      	ldr	r3, [r3, #0]
 800cb04:	4618      	mov	r0, r3
 800cb06:	f7fa ff15 	bl	8007934 <pbuf_free>
    arp_table[i].q = NULL;
 800cb0a:	490b      	ldr	r1, [pc, #44]	; (800cb38 <etharp_free_entry+0x60>)
 800cb0c:	687a      	ldr	r2, [r7, #4]
 800cb0e:	4613      	mov	r3, r2
 800cb10:	005b      	lsls	r3, r3, #1
 800cb12:	4413      	add	r3, r2
 800cb14:	00db      	lsls	r3, r3, #3
 800cb16:	440b      	add	r3, r1
 800cb18:	2200      	movs	r2, #0
 800cb1a:	601a      	str	r2, [r3, #0]
  }
  /* recycle entry for re-use */
  arp_table[i].state = ETHARP_STATE_EMPTY;
 800cb1c:	4906      	ldr	r1, [pc, #24]	; (800cb38 <etharp_free_entry+0x60>)
 800cb1e:	687a      	ldr	r2, [r7, #4]
 800cb20:	4613      	mov	r3, r2
 800cb22:	005b      	lsls	r3, r3, #1
 800cb24:	4413      	add	r3, r2
 800cb26:	00db      	lsls	r3, r3, #3
 800cb28:	440b      	add	r3, r1
 800cb2a:	3314      	adds	r3, #20
 800cb2c:	2200      	movs	r2, #0
 800cb2e:	701a      	strb	r2, [r3, #0]
  arp_table[i].ctime = 0;
  arp_table[i].netif = NULL;
  ip4_addr_set_zero(&arp_table[i].ipaddr);
  arp_table[i].ethaddr = ethzero;
#endif /* LWIP_DEBUG */
}
 800cb30:	bf00      	nop
 800cb32:	3708      	adds	r7, #8
 800cb34:	46bd      	mov	sp, r7
 800cb36:	bd80      	pop	{r7, pc}
 800cb38:	24004080 	.word	0x24004080

0800cb3c <etharp_tmr>:
 * This function should be called every ARP_TMR_INTERVAL milliseconds (1 second),
 * in order to expire entries in the ARP table.
 */
void
etharp_tmr(void)
{
 800cb3c:	b580      	push	{r7, lr}
 800cb3e:	b082      	sub	sp, #8
 800cb40:	af00      	add	r7, sp, #0
  u8_t i;

  LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_timer\n"));
  /* remove expired entries from the ARP table */
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 800cb42:	2300      	movs	r3, #0
 800cb44:	71fb      	strb	r3, [r7, #7]
 800cb46:	e096      	b.n	800cc76 <etharp_tmr+0x13a>
    u8_t state = arp_table[i].state;
 800cb48:	79fa      	ldrb	r2, [r7, #7]
 800cb4a:	494f      	ldr	r1, [pc, #316]	; (800cc88 <etharp_tmr+0x14c>)
 800cb4c:	4613      	mov	r3, r2
 800cb4e:	005b      	lsls	r3, r3, #1
 800cb50:	4413      	add	r3, r2
 800cb52:	00db      	lsls	r3, r3, #3
 800cb54:	440b      	add	r3, r1
 800cb56:	3314      	adds	r3, #20
 800cb58:	781b      	ldrb	r3, [r3, #0]
 800cb5a:	71bb      	strb	r3, [r7, #6]
    if (state != ETHARP_STATE_EMPTY
 800cb5c:	79bb      	ldrb	r3, [r7, #6]
 800cb5e:	2b00      	cmp	r3, #0
 800cb60:	f000 8086 	beq.w	800cc70 <etharp_tmr+0x134>
#if ETHARP_SUPPORT_STATIC_ENTRIES
      && (state != ETHARP_STATE_STATIC)
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
      ) {
      arp_table[i].ctime++;
 800cb64:	79fa      	ldrb	r2, [r7, #7]
 800cb66:	4948      	ldr	r1, [pc, #288]	; (800cc88 <etharp_tmr+0x14c>)
 800cb68:	4613      	mov	r3, r2
 800cb6a:	005b      	lsls	r3, r3, #1
 800cb6c:	4413      	add	r3, r2
 800cb6e:	00db      	lsls	r3, r3, #3
 800cb70:	440b      	add	r3, r1
 800cb72:	3312      	adds	r3, #18
 800cb74:	881b      	ldrh	r3, [r3, #0]
 800cb76:	3301      	adds	r3, #1
 800cb78:	b298      	uxth	r0, r3
 800cb7a:	4943      	ldr	r1, [pc, #268]	; (800cc88 <etharp_tmr+0x14c>)
 800cb7c:	4613      	mov	r3, r2
 800cb7e:	005b      	lsls	r3, r3, #1
 800cb80:	4413      	add	r3, r2
 800cb82:	00db      	lsls	r3, r3, #3
 800cb84:	440b      	add	r3, r1
 800cb86:	3312      	adds	r3, #18
 800cb88:	4602      	mov	r2, r0
 800cb8a:	801a      	strh	r2, [r3, #0]
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 800cb8c:	79fa      	ldrb	r2, [r7, #7]
 800cb8e:	493e      	ldr	r1, [pc, #248]	; (800cc88 <etharp_tmr+0x14c>)
 800cb90:	4613      	mov	r3, r2
 800cb92:	005b      	lsls	r3, r3, #1
 800cb94:	4413      	add	r3, r2
 800cb96:	00db      	lsls	r3, r3, #3
 800cb98:	440b      	add	r3, r1
 800cb9a:	3312      	adds	r3, #18
 800cb9c:	881b      	ldrh	r3, [r3, #0]
 800cb9e:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 800cba2:	d215      	bcs.n	800cbd0 <etharp_tmr+0x94>
          ((arp_table[i].state == ETHARP_STATE_PENDING)  &&
 800cba4:	79fa      	ldrb	r2, [r7, #7]
 800cba6:	4938      	ldr	r1, [pc, #224]	; (800cc88 <etharp_tmr+0x14c>)
 800cba8:	4613      	mov	r3, r2
 800cbaa:	005b      	lsls	r3, r3, #1
 800cbac:	4413      	add	r3, r2
 800cbae:	00db      	lsls	r3, r3, #3
 800cbb0:	440b      	add	r3, r1
 800cbb2:	3314      	adds	r3, #20
 800cbb4:	781b      	ldrb	r3, [r3, #0]
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 800cbb6:	2b01      	cmp	r3, #1
 800cbb8:	d10f      	bne.n	800cbda <etharp_tmr+0x9e>
           (arp_table[i].ctime >= ARP_MAXPENDING))) {
 800cbba:	79fa      	ldrb	r2, [r7, #7]
 800cbbc:	4932      	ldr	r1, [pc, #200]	; (800cc88 <etharp_tmr+0x14c>)
 800cbbe:	4613      	mov	r3, r2
 800cbc0:	005b      	lsls	r3, r3, #1
 800cbc2:	4413      	add	r3, r2
 800cbc4:	00db      	lsls	r3, r3, #3
 800cbc6:	440b      	add	r3, r1
 800cbc8:	3312      	adds	r3, #18
 800cbca:	881b      	ldrh	r3, [r3, #0]
          ((arp_table[i].state == ETHARP_STATE_PENDING)  &&
 800cbcc:	2b04      	cmp	r3, #4
 800cbce:	d904      	bls.n	800cbda <etharp_tmr+0x9e>
        /* pending or stable entry has become old! */
        LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_timer: expired %s entry %"U16_F".\n",
             arp_table[i].state >= ETHARP_STATE_STABLE ? "stable" : "pending", (u16_t)i));
        /* clean up entries that have just been expired */
        etharp_free_entry(i);
 800cbd0:	79fb      	ldrb	r3, [r7, #7]
 800cbd2:	4618      	mov	r0, r3
 800cbd4:	f7ff ff80 	bl	800cad8 <etharp_free_entry>
 800cbd8:	e04a      	b.n	800cc70 <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_1) {
 800cbda:	79fa      	ldrb	r2, [r7, #7]
 800cbdc:	492a      	ldr	r1, [pc, #168]	; (800cc88 <etharp_tmr+0x14c>)
 800cbde:	4613      	mov	r3, r2
 800cbe0:	005b      	lsls	r3, r3, #1
 800cbe2:	4413      	add	r3, r2
 800cbe4:	00db      	lsls	r3, r3, #3
 800cbe6:	440b      	add	r3, r1
 800cbe8:	3314      	adds	r3, #20
 800cbea:	781b      	ldrb	r3, [r3, #0]
 800cbec:	2b03      	cmp	r3, #3
 800cbee:	d10a      	bne.n	800cc06 <etharp_tmr+0xca>
        /* Don't send more than one request every 2 seconds. */
        arp_table[i].state = ETHARP_STATE_STABLE_REREQUESTING_2;
 800cbf0:	79fa      	ldrb	r2, [r7, #7]
 800cbf2:	4925      	ldr	r1, [pc, #148]	; (800cc88 <etharp_tmr+0x14c>)
 800cbf4:	4613      	mov	r3, r2
 800cbf6:	005b      	lsls	r3, r3, #1
 800cbf8:	4413      	add	r3, r2
 800cbfa:	00db      	lsls	r3, r3, #3
 800cbfc:	440b      	add	r3, r1
 800cbfe:	3314      	adds	r3, #20
 800cc00:	2204      	movs	r2, #4
 800cc02:	701a      	strb	r2, [r3, #0]
 800cc04:	e034      	b.n	800cc70 <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_2) {
 800cc06:	79fa      	ldrb	r2, [r7, #7]
 800cc08:	491f      	ldr	r1, [pc, #124]	; (800cc88 <etharp_tmr+0x14c>)
 800cc0a:	4613      	mov	r3, r2
 800cc0c:	005b      	lsls	r3, r3, #1
 800cc0e:	4413      	add	r3, r2
 800cc10:	00db      	lsls	r3, r3, #3
 800cc12:	440b      	add	r3, r1
 800cc14:	3314      	adds	r3, #20
 800cc16:	781b      	ldrb	r3, [r3, #0]
 800cc18:	2b04      	cmp	r3, #4
 800cc1a:	d10a      	bne.n	800cc32 <etharp_tmr+0xf6>
        /* Reset state to stable, so that the next transmitted packet will
           re-send an ARP request. */
        arp_table[i].state = ETHARP_STATE_STABLE;
 800cc1c:	79fa      	ldrb	r2, [r7, #7]
 800cc1e:	491a      	ldr	r1, [pc, #104]	; (800cc88 <etharp_tmr+0x14c>)
 800cc20:	4613      	mov	r3, r2
 800cc22:	005b      	lsls	r3, r3, #1
 800cc24:	4413      	add	r3, r2
 800cc26:	00db      	lsls	r3, r3, #3
 800cc28:	440b      	add	r3, r1
 800cc2a:	3314      	adds	r3, #20
 800cc2c:	2202      	movs	r2, #2
 800cc2e:	701a      	strb	r2, [r3, #0]
 800cc30:	e01e      	b.n	800cc70 <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_PENDING) {
 800cc32:	79fa      	ldrb	r2, [r7, #7]
 800cc34:	4914      	ldr	r1, [pc, #80]	; (800cc88 <etharp_tmr+0x14c>)
 800cc36:	4613      	mov	r3, r2
 800cc38:	005b      	lsls	r3, r3, #1
 800cc3a:	4413      	add	r3, r2
 800cc3c:	00db      	lsls	r3, r3, #3
 800cc3e:	440b      	add	r3, r1
 800cc40:	3314      	adds	r3, #20
 800cc42:	781b      	ldrb	r3, [r3, #0]
 800cc44:	2b01      	cmp	r3, #1
 800cc46:	d113      	bne.n	800cc70 <etharp_tmr+0x134>
        /* still pending, resend an ARP query */
        etharp_request(arp_table[i].netif, &arp_table[i].ipaddr);
 800cc48:	79fa      	ldrb	r2, [r7, #7]
 800cc4a:	490f      	ldr	r1, [pc, #60]	; (800cc88 <etharp_tmr+0x14c>)
 800cc4c:	4613      	mov	r3, r2
 800cc4e:	005b      	lsls	r3, r3, #1
 800cc50:	4413      	add	r3, r2
 800cc52:	00db      	lsls	r3, r3, #3
 800cc54:	440b      	add	r3, r1
 800cc56:	3308      	adds	r3, #8
 800cc58:	6818      	ldr	r0, [r3, #0]
 800cc5a:	79fa      	ldrb	r2, [r7, #7]
 800cc5c:	4613      	mov	r3, r2
 800cc5e:	005b      	lsls	r3, r3, #1
 800cc60:	4413      	add	r3, r2
 800cc62:	00db      	lsls	r3, r3, #3
 800cc64:	4a08      	ldr	r2, [pc, #32]	; (800cc88 <etharp_tmr+0x14c>)
 800cc66:	4413      	add	r3, r2
 800cc68:	3304      	adds	r3, #4
 800cc6a:	4619      	mov	r1, r3
 800cc6c:	f000 fe6e 	bl	800d94c <etharp_request>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 800cc70:	79fb      	ldrb	r3, [r7, #7]
 800cc72:	3301      	adds	r3, #1
 800cc74:	71fb      	strb	r3, [r7, #7]
 800cc76:	79fb      	ldrb	r3, [r7, #7]
 800cc78:	2b09      	cmp	r3, #9
 800cc7a:	f67f af65 	bls.w	800cb48 <etharp_tmr+0xc>
      }
    }
  }
}
 800cc7e:	bf00      	nop
 800cc80:	3708      	adds	r7, #8
 800cc82:	46bd      	mov	sp, r7
 800cc84:	bd80      	pop	{r7, pc}
 800cc86:	bf00      	nop
 800cc88:	24004080 	.word	0x24004080

0800cc8c <etharp_find_entry>:
 * @return The ARP entry index that matched or is created, ERR_MEM if no
 * entry is found or could be recycled.
 */
static s8_t
etharp_find_entry(const ip4_addr_t *ipaddr, u8_t flags, struct netif* netif)
{
 800cc8c:	b580      	push	{r7, lr}
 800cc8e:	b088      	sub	sp, #32
 800cc90:	af00      	add	r7, sp, #0
 800cc92:	60f8      	str	r0, [r7, #12]
 800cc94:	460b      	mov	r3, r1
 800cc96:	607a      	str	r2, [r7, #4]
 800cc98:	72fb      	strb	r3, [r7, #11]
  s8_t old_pending = ARP_TABLE_SIZE, old_stable = ARP_TABLE_SIZE;
 800cc9a:	230a      	movs	r3, #10
 800cc9c:	77fb      	strb	r3, [r7, #31]
 800cc9e:	230a      	movs	r3, #10
 800cca0:	77bb      	strb	r3, [r7, #30]
  s8_t empty = ARP_TABLE_SIZE;
 800cca2:	230a      	movs	r3, #10
 800cca4:	777b      	strb	r3, [r7, #29]
  u8_t i = 0;
 800cca6:	2300      	movs	r3, #0
 800cca8:	773b      	strb	r3, [r7, #28]
  /* oldest entry with packets on queue */
  s8_t old_queue = ARP_TABLE_SIZE;
 800ccaa:	230a      	movs	r3, #10
 800ccac:	76fb      	strb	r3, [r7, #27]
  /* its age */
  u16_t age_queue = 0, age_pending = 0, age_stable = 0;
 800ccae:	2300      	movs	r3, #0
 800ccb0:	833b      	strh	r3, [r7, #24]
 800ccb2:	2300      	movs	r3, #0
 800ccb4:	82fb      	strh	r3, [r7, #22]
 800ccb6:	2300      	movs	r3, #0
 800ccb8:	82bb      	strh	r3, [r7, #20]
   * 4) remember the oldest pending entry with queued packets (if any)
   * 5) search for a matching IP entry, either pending or stable
   *    until 5 matches, or all entries are searched for.
   */

  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 800ccba:	2300      	movs	r3, #0
 800ccbc:	773b      	strb	r3, [r7, #28]
 800ccbe:	e0a3      	b.n	800ce08 <etharp_find_entry+0x17c>
    u8_t state = arp_table[i].state;
 800ccc0:	7f3a      	ldrb	r2, [r7, #28]
 800ccc2:	499d      	ldr	r1, [pc, #628]	; (800cf38 <etharp_find_entry+0x2ac>)
 800ccc4:	4613      	mov	r3, r2
 800ccc6:	005b      	lsls	r3, r3, #1
 800ccc8:	4413      	add	r3, r2
 800ccca:	00db      	lsls	r3, r3, #3
 800cccc:	440b      	add	r3, r1
 800ccce:	3314      	adds	r3, #20
 800ccd0:	781b      	ldrb	r3, [r3, #0]
 800ccd2:	74fb      	strb	r3, [r7, #19]
    /* no empty entry found yet and now we do find one? */
    if ((empty == ARP_TABLE_SIZE) && (state == ETHARP_STATE_EMPTY)) {
 800ccd4:	f997 301d 	ldrsb.w	r3, [r7, #29]
 800ccd8:	2b0a      	cmp	r3, #10
 800ccda:	d105      	bne.n	800cce8 <etharp_find_entry+0x5c>
 800ccdc:	7cfb      	ldrb	r3, [r7, #19]
 800ccde:	2b00      	cmp	r3, #0
 800cce0:	d102      	bne.n	800cce8 <etharp_find_entry+0x5c>
      LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_find_entry: found empty entry %"U16_F"\n", (u16_t)i));
      /* remember first empty entry */
      empty = i;
 800cce2:	7f3b      	ldrb	r3, [r7, #28]
 800cce4:	777b      	strb	r3, [r7, #29]
 800cce6:	e08c      	b.n	800ce02 <etharp_find_entry+0x176>
    } else if (state != ETHARP_STATE_EMPTY) {
 800cce8:	7cfb      	ldrb	r3, [r7, #19]
 800ccea:	2b00      	cmp	r3, #0
 800ccec:	f000 8089 	beq.w	800ce02 <etharp_find_entry+0x176>
      LWIP_ASSERT("state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE",
 800ccf0:	7cfb      	ldrb	r3, [r7, #19]
 800ccf2:	2b01      	cmp	r3, #1
 800ccf4:	d009      	beq.n	800cd0a <etharp_find_entry+0x7e>
 800ccf6:	7cfb      	ldrb	r3, [r7, #19]
 800ccf8:	2b01      	cmp	r3, #1
 800ccfa:	d806      	bhi.n	800cd0a <etharp_find_entry+0x7e>
 800ccfc:	4b8f      	ldr	r3, [pc, #572]	; (800cf3c <etharp_find_entry+0x2b0>)
 800ccfe:	f44f 7293 	mov.w	r2, #294	; 0x126
 800cd02:	498f      	ldr	r1, [pc, #572]	; (800cf40 <etharp_find_entry+0x2b4>)
 800cd04:	488f      	ldr	r0, [pc, #572]	; (800cf44 <etharp_find_entry+0x2b8>)
 800cd06:	f003 fc13 	bl	8010530 <iprintf>
        state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE);
      /* if given, does IP address match IP address in ARP entry? */
      if (ipaddr && ip4_addr_cmp(ipaddr, &arp_table[i].ipaddr)
 800cd0a:	68fb      	ldr	r3, [r7, #12]
 800cd0c:	2b00      	cmp	r3, #0
 800cd0e:	d01e      	beq.n	800cd4e <etharp_find_entry+0xc2>
 800cd10:	68fb      	ldr	r3, [r7, #12]
 800cd12:	6819      	ldr	r1, [r3, #0]
 800cd14:	7f3a      	ldrb	r2, [r7, #28]
 800cd16:	4888      	ldr	r0, [pc, #544]	; (800cf38 <etharp_find_entry+0x2ac>)
 800cd18:	4613      	mov	r3, r2
 800cd1a:	005b      	lsls	r3, r3, #1
 800cd1c:	4413      	add	r3, r2
 800cd1e:	00db      	lsls	r3, r3, #3
 800cd20:	4403      	add	r3, r0
 800cd22:	3304      	adds	r3, #4
 800cd24:	681b      	ldr	r3, [r3, #0]
 800cd26:	4299      	cmp	r1, r3
 800cd28:	d111      	bne.n	800cd4e <etharp_find_entry+0xc2>
#if ETHARP_TABLE_MATCH_NETIF
          && ((netif == NULL) || (netif == arp_table[i].netif))
 800cd2a:	687b      	ldr	r3, [r7, #4]
 800cd2c:	2b00      	cmp	r3, #0
 800cd2e:	d00b      	beq.n	800cd48 <etharp_find_entry+0xbc>
 800cd30:	7f3a      	ldrb	r2, [r7, #28]
 800cd32:	4981      	ldr	r1, [pc, #516]	; (800cf38 <etharp_find_entry+0x2ac>)
 800cd34:	4613      	mov	r3, r2
 800cd36:	005b      	lsls	r3, r3, #1
 800cd38:	4413      	add	r3, r2
 800cd3a:	00db      	lsls	r3, r3, #3
 800cd3c:	440b      	add	r3, r1
 800cd3e:	3308      	adds	r3, #8
 800cd40:	681b      	ldr	r3, [r3, #0]
 800cd42:	687a      	ldr	r2, [r7, #4]
 800cd44:	429a      	cmp	r2, r3
 800cd46:	d102      	bne.n	800cd4e <etharp_find_entry+0xc2>
#endif /* ETHARP_TABLE_MATCH_NETIF */
        ) {
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: found matching entry %"U16_F"\n", (u16_t)i));
        /* found exact IP address match, simply bail out */
        return i;
 800cd48:	f997 301c 	ldrsb.w	r3, [r7, #28]
 800cd4c:	e0ef      	b.n	800cf2e <etharp_find_entry+0x2a2>
      }
      /* pending entry? */
      if (state == ETHARP_STATE_PENDING) {
 800cd4e:	7cfb      	ldrb	r3, [r7, #19]
 800cd50:	2b01      	cmp	r3, #1
 800cd52:	d13b      	bne.n	800cdcc <etharp_find_entry+0x140>
        /* pending with queued packets? */
        if (arp_table[i].q != NULL) {
 800cd54:	7f3a      	ldrb	r2, [r7, #28]
 800cd56:	4978      	ldr	r1, [pc, #480]	; (800cf38 <etharp_find_entry+0x2ac>)
 800cd58:	4613      	mov	r3, r2
 800cd5a:	005b      	lsls	r3, r3, #1
 800cd5c:	4413      	add	r3, r2
 800cd5e:	00db      	lsls	r3, r3, #3
 800cd60:	440b      	add	r3, r1
 800cd62:	681b      	ldr	r3, [r3, #0]
 800cd64:	2b00      	cmp	r3, #0
 800cd66:	d018      	beq.n	800cd9a <etharp_find_entry+0x10e>
          if (arp_table[i].ctime >= age_queue) {
 800cd68:	7f3a      	ldrb	r2, [r7, #28]
 800cd6a:	4973      	ldr	r1, [pc, #460]	; (800cf38 <etharp_find_entry+0x2ac>)
 800cd6c:	4613      	mov	r3, r2
 800cd6e:	005b      	lsls	r3, r3, #1
 800cd70:	4413      	add	r3, r2
 800cd72:	00db      	lsls	r3, r3, #3
 800cd74:	440b      	add	r3, r1
 800cd76:	3312      	adds	r3, #18
 800cd78:	881b      	ldrh	r3, [r3, #0]
 800cd7a:	8b3a      	ldrh	r2, [r7, #24]
 800cd7c:	429a      	cmp	r2, r3
 800cd7e:	d840      	bhi.n	800ce02 <etharp_find_entry+0x176>
            old_queue = i;
 800cd80:	7f3b      	ldrb	r3, [r7, #28]
 800cd82:	76fb      	strb	r3, [r7, #27]
            age_queue = arp_table[i].ctime;
 800cd84:	7f3a      	ldrb	r2, [r7, #28]
 800cd86:	496c      	ldr	r1, [pc, #432]	; (800cf38 <etharp_find_entry+0x2ac>)
 800cd88:	4613      	mov	r3, r2
 800cd8a:	005b      	lsls	r3, r3, #1
 800cd8c:	4413      	add	r3, r2
 800cd8e:	00db      	lsls	r3, r3, #3
 800cd90:	440b      	add	r3, r1
 800cd92:	3312      	adds	r3, #18
 800cd94:	881b      	ldrh	r3, [r3, #0]
 800cd96:	833b      	strh	r3, [r7, #24]
 800cd98:	e033      	b.n	800ce02 <etharp_find_entry+0x176>
          }
        } else
        /* pending without queued packets? */
        {
          if (arp_table[i].ctime >= age_pending) {
 800cd9a:	7f3a      	ldrb	r2, [r7, #28]
 800cd9c:	4966      	ldr	r1, [pc, #408]	; (800cf38 <etharp_find_entry+0x2ac>)
 800cd9e:	4613      	mov	r3, r2
 800cda0:	005b      	lsls	r3, r3, #1
 800cda2:	4413      	add	r3, r2
 800cda4:	00db      	lsls	r3, r3, #3
 800cda6:	440b      	add	r3, r1
 800cda8:	3312      	adds	r3, #18
 800cdaa:	881b      	ldrh	r3, [r3, #0]
 800cdac:	8afa      	ldrh	r2, [r7, #22]
 800cdae:	429a      	cmp	r2, r3
 800cdb0:	d827      	bhi.n	800ce02 <etharp_find_entry+0x176>
            old_pending = i;
 800cdb2:	7f3b      	ldrb	r3, [r7, #28]
 800cdb4:	77fb      	strb	r3, [r7, #31]
            age_pending = arp_table[i].ctime;
 800cdb6:	7f3a      	ldrb	r2, [r7, #28]
 800cdb8:	495f      	ldr	r1, [pc, #380]	; (800cf38 <etharp_find_entry+0x2ac>)
 800cdba:	4613      	mov	r3, r2
 800cdbc:	005b      	lsls	r3, r3, #1
 800cdbe:	4413      	add	r3, r2
 800cdc0:	00db      	lsls	r3, r3, #3
 800cdc2:	440b      	add	r3, r1
 800cdc4:	3312      	adds	r3, #18
 800cdc6:	881b      	ldrh	r3, [r3, #0]
 800cdc8:	82fb      	strh	r3, [r7, #22]
 800cdca:	e01a      	b.n	800ce02 <etharp_find_entry+0x176>
          }
        }
      /* stable entry? */
      } else if (state >= ETHARP_STATE_STABLE) {
 800cdcc:	7cfb      	ldrb	r3, [r7, #19]
 800cdce:	2b01      	cmp	r3, #1
 800cdd0:	d917      	bls.n	800ce02 <etharp_find_entry+0x176>
        /* don't record old_stable for static entries since they never expire */
        if (state < ETHARP_STATE_STATIC)
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
        {
          /* remember entry with oldest stable entry in oldest, its age in maxtime */
          if (arp_table[i].ctime >= age_stable) {
 800cdd2:	7f3a      	ldrb	r2, [r7, #28]
 800cdd4:	4958      	ldr	r1, [pc, #352]	; (800cf38 <etharp_find_entry+0x2ac>)
 800cdd6:	4613      	mov	r3, r2
 800cdd8:	005b      	lsls	r3, r3, #1
 800cdda:	4413      	add	r3, r2
 800cddc:	00db      	lsls	r3, r3, #3
 800cdde:	440b      	add	r3, r1
 800cde0:	3312      	adds	r3, #18
 800cde2:	881b      	ldrh	r3, [r3, #0]
 800cde4:	8aba      	ldrh	r2, [r7, #20]
 800cde6:	429a      	cmp	r2, r3
 800cde8:	d80b      	bhi.n	800ce02 <etharp_find_entry+0x176>
            old_stable = i;
 800cdea:	7f3b      	ldrb	r3, [r7, #28]
 800cdec:	77bb      	strb	r3, [r7, #30]
            age_stable = arp_table[i].ctime;
 800cdee:	7f3a      	ldrb	r2, [r7, #28]
 800cdf0:	4951      	ldr	r1, [pc, #324]	; (800cf38 <etharp_find_entry+0x2ac>)
 800cdf2:	4613      	mov	r3, r2
 800cdf4:	005b      	lsls	r3, r3, #1
 800cdf6:	4413      	add	r3, r2
 800cdf8:	00db      	lsls	r3, r3, #3
 800cdfa:	440b      	add	r3, r1
 800cdfc:	3312      	adds	r3, #18
 800cdfe:	881b      	ldrh	r3, [r3, #0]
 800ce00:	82bb      	strh	r3, [r7, #20]
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 800ce02:	7f3b      	ldrb	r3, [r7, #28]
 800ce04:	3301      	adds	r3, #1
 800ce06:	773b      	strb	r3, [r7, #28]
 800ce08:	7f3b      	ldrb	r3, [r7, #28]
 800ce0a:	2b09      	cmp	r3, #9
 800ce0c:	f67f af58 	bls.w	800ccc0 <etharp_find_entry+0x34>
    }
  }
  /* { we have no match } => try to create a new entry */

  /* don't create new entry, only search? */
  if (((flags & ETHARP_FLAG_FIND_ONLY) != 0) ||
 800ce10:	7afb      	ldrb	r3, [r7, #11]
 800ce12:	f003 0302 	and.w	r3, r3, #2
 800ce16:	2b00      	cmp	r3, #0
 800ce18:	d108      	bne.n	800ce2c <etharp_find_entry+0x1a0>
 800ce1a:	f997 301d 	ldrsb.w	r3, [r7, #29]
 800ce1e:	2b0a      	cmp	r3, #10
 800ce20:	d107      	bne.n	800ce32 <etharp_find_entry+0x1a6>
      /* or no empty entry found and not allowed to recycle? */
      ((empty == ARP_TABLE_SIZE) && ((flags & ETHARP_FLAG_TRY_HARD) == 0))) {
 800ce22:	7afb      	ldrb	r3, [r7, #11]
 800ce24:	f003 0301 	and.w	r3, r3, #1
 800ce28:	2b00      	cmp	r3, #0
 800ce2a:	d102      	bne.n	800ce32 <etharp_find_entry+0x1a6>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: no empty entry found and not allowed to recycle\n"));
    return (s8_t)ERR_MEM;
 800ce2c:	f04f 33ff 	mov.w	r3, #4294967295
 800ce30:	e07d      	b.n	800cf2e <etharp_find_entry+0x2a2>
   *
   * { ETHARP_FLAG_TRY_HARD is set at this point }
   */

  /* 1) empty entry available? */
  if (empty < ARP_TABLE_SIZE) {
 800ce32:	f997 301d 	ldrsb.w	r3, [r7, #29]
 800ce36:	2b09      	cmp	r3, #9
 800ce38:	dc02      	bgt.n	800ce40 <etharp_find_entry+0x1b4>
    i = empty;
 800ce3a:	7f7b      	ldrb	r3, [r7, #29]
 800ce3c:	773b      	strb	r3, [r7, #28]
 800ce3e:	e036      	b.n	800ceae <etharp_find_entry+0x222>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting empty entry %"U16_F"\n", (u16_t)i));
  } else {
    /* 2) found recyclable stable entry? */
    if (old_stable < ARP_TABLE_SIZE) {
 800ce40:	f997 301e 	ldrsb.w	r3, [r7, #30]
 800ce44:	2b09      	cmp	r3, #9
 800ce46:	dc13      	bgt.n	800ce70 <etharp_find_entry+0x1e4>
      /* recycle oldest stable*/
      i = old_stable;
 800ce48:	7fbb      	ldrb	r3, [r7, #30]
 800ce4a:	773b      	strb	r3, [r7, #28]
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest stable entry %"U16_F"\n", (u16_t)i));
      /* no queued packets should exist on stable entries */
      LWIP_ASSERT("arp_table[i].q == NULL", arp_table[i].q == NULL);
 800ce4c:	7f3a      	ldrb	r2, [r7, #28]
 800ce4e:	493a      	ldr	r1, [pc, #232]	; (800cf38 <etharp_find_entry+0x2ac>)
 800ce50:	4613      	mov	r3, r2
 800ce52:	005b      	lsls	r3, r3, #1
 800ce54:	4413      	add	r3, r2
 800ce56:	00db      	lsls	r3, r3, #3
 800ce58:	440b      	add	r3, r1
 800ce5a:	681b      	ldr	r3, [r3, #0]
 800ce5c:	2b00      	cmp	r3, #0
 800ce5e:	d018      	beq.n	800ce92 <etharp_find_entry+0x206>
 800ce60:	4b36      	ldr	r3, [pc, #216]	; (800cf3c <etharp_find_entry+0x2b0>)
 800ce62:	f240 126f 	movw	r2, #367	; 0x16f
 800ce66:	4938      	ldr	r1, [pc, #224]	; (800cf48 <etharp_find_entry+0x2bc>)
 800ce68:	4836      	ldr	r0, [pc, #216]	; (800cf44 <etharp_find_entry+0x2b8>)
 800ce6a:	f003 fb61 	bl	8010530 <iprintf>
 800ce6e:	e010      	b.n	800ce92 <etharp_find_entry+0x206>
    /* 3) found recyclable pending entry without queued packets? */
    } else if (old_pending < ARP_TABLE_SIZE) {
 800ce70:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800ce74:	2b09      	cmp	r3, #9
 800ce76:	dc02      	bgt.n	800ce7e <etharp_find_entry+0x1f2>
      /* recycle oldest pending */
      i = old_pending;
 800ce78:	7ffb      	ldrb	r3, [r7, #31]
 800ce7a:	773b      	strb	r3, [r7, #28]
 800ce7c:	e009      	b.n	800ce92 <etharp_find_entry+0x206>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest pending entry %"U16_F" (without queue)\n", (u16_t)i));
    /* 4) found recyclable pending entry with queued packets? */
    } else if (old_queue < ARP_TABLE_SIZE) {
 800ce7e:	f997 301b 	ldrsb.w	r3, [r7, #27]
 800ce82:	2b09      	cmp	r3, #9
 800ce84:	dc02      	bgt.n	800ce8c <etharp_find_entry+0x200>
      /* recycle oldest pending (queued packets are free in etharp_free_entry) */
      i = old_queue;
 800ce86:	7efb      	ldrb	r3, [r7, #27]
 800ce88:	773b      	strb	r3, [r7, #28]
 800ce8a:	e002      	b.n	800ce92 <etharp_find_entry+0x206>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest pending entry %"U16_F", freeing packet queue %p\n", (u16_t)i, (void *)(arp_table[i].q)));
      /* no empty or recyclable entries found */
    } else {
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: no empty or recyclable entries found\n"));
      return (s8_t)ERR_MEM;
 800ce8c:	f04f 33ff 	mov.w	r3, #4294967295
 800ce90:	e04d      	b.n	800cf2e <etharp_find_entry+0x2a2>
    }

    /* { empty or recyclable entry found } */
    LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
 800ce92:	7f3b      	ldrb	r3, [r7, #28]
 800ce94:	2b09      	cmp	r3, #9
 800ce96:	d906      	bls.n	800cea6 <etharp_find_entry+0x21a>
 800ce98:	4b28      	ldr	r3, [pc, #160]	; (800cf3c <etharp_find_entry+0x2b0>)
 800ce9a:	f240 1281 	movw	r2, #385	; 0x181
 800ce9e:	492b      	ldr	r1, [pc, #172]	; (800cf4c <etharp_find_entry+0x2c0>)
 800cea0:	4828      	ldr	r0, [pc, #160]	; (800cf44 <etharp_find_entry+0x2b8>)
 800cea2:	f003 fb45 	bl	8010530 <iprintf>
    etharp_free_entry(i);
 800cea6:	7f3b      	ldrb	r3, [r7, #28]
 800cea8:	4618      	mov	r0, r3
 800ceaa:	f7ff fe15 	bl	800cad8 <etharp_free_entry>
  }

  LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
 800ceae:	7f3b      	ldrb	r3, [r7, #28]
 800ceb0:	2b09      	cmp	r3, #9
 800ceb2:	d906      	bls.n	800cec2 <etharp_find_entry+0x236>
 800ceb4:	4b21      	ldr	r3, [pc, #132]	; (800cf3c <etharp_find_entry+0x2b0>)
 800ceb6:	f240 1285 	movw	r2, #389	; 0x185
 800ceba:	4924      	ldr	r1, [pc, #144]	; (800cf4c <etharp_find_entry+0x2c0>)
 800cebc:	4821      	ldr	r0, [pc, #132]	; (800cf44 <etharp_find_entry+0x2b8>)
 800cebe:	f003 fb37 	bl	8010530 <iprintf>
  LWIP_ASSERT("arp_table[i].state == ETHARP_STATE_EMPTY",
 800cec2:	7f3a      	ldrb	r2, [r7, #28]
 800cec4:	491c      	ldr	r1, [pc, #112]	; (800cf38 <etharp_find_entry+0x2ac>)
 800cec6:	4613      	mov	r3, r2
 800cec8:	005b      	lsls	r3, r3, #1
 800ceca:	4413      	add	r3, r2
 800cecc:	00db      	lsls	r3, r3, #3
 800cece:	440b      	add	r3, r1
 800ced0:	3314      	adds	r3, #20
 800ced2:	781b      	ldrb	r3, [r3, #0]
 800ced4:	2b00      	cmp	r3, #0
 800ced6:	d006      	beq.n	800cee6 <etharp_find_entry+0x25a>
 800ced8:	4b18      	ldr	r3, [pc, #96]	; (800cf3c <etharp_find_entry+0x2b0>)
 800ceda:	f240 1287 	movw	r2, #391	; 0x187
 800cede:	491c      	ldr	r1, [pc, #112]	; (800cf50 <etharp_find_entry+0x2c4>)
 800cee0:	4818      	ldr	r0, [pc, #96]	; (800cf44 <etharp_find_entry+0x2b8>)
 800cee2:	f003 fb25 	bl	8010530 <iprintf>
    arp_table[i].state == ETHARP_STATE_EMPTY);

  /* IP address given? */
  if (ipaddr != NULL) {
 800cee6:	68fb      	ldr	r3, [r7, #12]
 800cee8:	2b00      	cmp	r3, #0
 800ceea:	d00a      	beq.n	800cf02 <etharp_find_entry+0x276>
    /* set IP address */
    ip4_addr_copy(arp_table[i].ipaddr, *ipaddr);
 800ceec:	7f3a      	ldrb	r2, [r7, #28]
 800ceee:	68fb      	ldr	r3, [r7, #12]
 800cef0:	6819      	ldr	r1, [r3, #0]
 800cef2:	4811      	ldr	r0, [pc, #68]	; (800cf38 <etharp_find_entry+0x2ac>)
 800cef4:	4613      	mov	r3, r2
 800cef6:	005b      	lsls	r3, r3, #1
 800cef8:	4413      	add	r3, r2
 800cefa:	00db      	lsls	r3, r3, #3
 800cefc:	4403      	add	r3, r0
 800cefe:	3304      	adds	r3, #4
 800cf00:	6019      	str	r1, [r3, #0]
  }
  arp_table[i].ctime = 0;
 800cf02:	7f3a      	ldrb	r2, [r7, #28]
 800cf04:	490c      	ldr	r1, [pc, #48]	; (800cf38 <etharp_find_entry+0x2ac>)
 800cf06:	4613      	mov	r3, r2
 800cf08:	005b      	lsls	r3, r3, #1
 800cf0a:	4413      	add	r3, r2
 800cf0c:	00db      	lsls	r3, r3, #3
 800cf0e:	440b      	add	r3, r1
 800cf10:	3312      	adds	r3, #18
 800cf12:	2200      	movs	r2, #0
 800cf14:	801a      	strh	r2, [r3, #0]
#if ETHARP_TABLE_MATCH_NETIF
  arp_table[i].netif = netif;
 800cf16:	7f3a      	ldrb	r2, [r7, #28]
 800cf18:	4907      	ldr	r1, [pc, #28]	; (800cf38 <etharp_find_entry+0x2ac>)
 800cf1a:	4613      	mov	r3, r2
 800cf1c:	005b      	lsls	r3, r3, #1
 800cf1e:	4413      	add	r3, r2
 800cf20:	00db      	lsls	r3, r3, #3
 800cf22:	440b      	add	r3, r1
 800cf24:	3308      	adds	r3, #8
 800cf26:	687a      	ldr	r2, [r7, #4]
 800cf28:	601a      	str	r2, [r3, #0]
#endif /* ETHARP_TABLE_MATCH_NETIF*/
  return (err_t)i;
 800cf2a:	f997 301c 	ldrsb.w	r3, [r7, #28]
}
 800cf2e:	4618      	mov	r0, r3
 800cf30:	3720      	adds	r7, #32
 800cf32:	46bd      	mov	sp, r7
 800cf34:	bd80      	pop	{r7, pc}
 800cf36:	bf00      	nop
 800cf38:	24004080 	.word	0x24004080
 800cf3c:	080129fc 	.word	0x080129fc
 800cf40:	08012a34 	.word	0x08012a34
 800cf44:	08012a74 	.word	0x08012a74
 800cf48:	08012a9c 	.word	0x08012a9c
 800cf4c:	08012ab4 	.word	0x08012ab4
 800cf50:	08012ac8 	.word	0x08012ac8

0800cf54 <etharp_update_arp_entry>:
 *
 * @see pbuf_free()
 */
static err_t
etharp_update_arp_entry(struct netif *netif, const ip4_addr_t *ipaddr, struct eth_addr *ethaddr, u8_t flags)
{
 800cf54:	b580      	push	{r7, lr}
 800cf56:	b088      	sub	sp, #32
 800cf58:	af02      	add	r7, sp, #8
 800cf5a:	60f8      	str	r0, [r7, #12]
 800cf5c:	60b9      	str	r1, [r7, #8]
 800cf5e:	607a      	str	r2, [r7, #4]
 800cf60:	70fb      	strb	r3, [r7, #3]
  s8_t i;
  LWIP_ASSERT("netif->hwaddr_len == ETH_HWADDR_LEN", netif->hwaddr_len == ETH_HWADDR_LEN);
 800cf62:	68fb      	ldr	r3, [r7, #12]
 800cf64:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800cf68:	2b06      	cmp	r3, #6
 800cf6a:	d006      	beq.n	800cf7a <etharp_update_arp_entry+0x26>
 800cf6c:	4b48      	ldr	r3, [pc, #288]	; (800d090 <etharp_update_arp_entry+0x13c>)
 800cf6e:	f240 12ab 	movw	r2, #427	; 0x1ab
 800cf72:	4948      	ldr	r1, [pc, #288]	; (800d094 <etharp_update_arp_entry+0x140>)
 800cf74:	4848      	ldr	r0, [pc, #288]	; (800d098 <etharp_update_arp_entry+0x144>)
 800cf76:	f003 fadb 	bl	8010530 <iprintf>
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: %"U16_F".%"U16_F".%"U16_F".%"U16_F" - %02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F"\n",
    ip4_addr1_16(ipaddr), ip4_addr2_16(ipaddr), ip4_addr3_16(ipaddr), ip4_addr4_16(ipaddr),
    (u16_t)ethaddr->addr[0], (u16_t)ethaddr->addr[1], (u16_t)ethaddr->addr[2],
    (u16_t)ethaddr->addr[3], (u16_t)ethaddr->addr[4], (u16_t)ethaddr->addr[5]));
  /* non-unicast address? */
  if (ip4_addr_isany(ipaddr) ||
 800cf7a:	68bb      	ldr	r3, [r7, #8]
 800cf7c:	2b00      	cmp	r3, #0
 800cf7e:	d012      	beq.n	800cfa6 <etharp_update_arp_entry+0x52>
 800cf80:	68bb      	ldr	r3, [r7, #8]
 800cf82:	681b      	ldr	r3, [r3, #0]
 800cf84:	2b00      	cmp	r3, #0
 800cf86:	d00e      	beq.n	800cfa6 <etharp_update_arp_entry+0x52>
      ip4_addr_isbroadcast(ipaddr, netif) ||
 800cf88:	68bb      	ldr	r3, [r7, #8]
 800cf8a:	681b      	ldr	r3, [r3, #0]
 800cf8c:	68f9      	ldr	r1, [r7, #12]
 800cf8e:	4618      	mov	r0, r3
 800cf90:	f001 f8f6 	bl	800e180 <ip4_addr_isbroadcast_u32>
 800cf94:	4603      	mov	r3, r0
  if (ip4_addr_isany(ipaddr) ||
 800cf96:	2b00      	cmp	r3, #0
 800cf98:	d105      	bne.n	800cfa6 <etharp_update_arp_entry+0x52>
      ip4_addr_ismulticast(ipaddr)) {
 800cf9a:	68bb      	ldr	r3, [r7, #8]
 800cf9c:	681b      	ldr	r3, [r3, #0]
 800cf9e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
      ip4_addr_isbroadcast(ipaddr, netif) ||
 800cfa2:	2be0      	cmp	r3, #224	; 0xe0
 800cfa4:	d102      	bne.n	800cfac <etharp_update_arp_entry+0x58>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: will not add non-unicast IP address to ARP cache\n"));
    return ERR_ARG;
 800cfa6:	f06f 030f 	mvn.w	r3, #15
 800cfaa:	e06c      	b.n	800d086 <etharp_update_arp_entry+0x132>
  }
  /* find or create ARP entry */
  i = etharp_find_entry(ipaddr, flags, netif);
 800cfac:	78fb      	ldrb	r3, [r7, #3]
 800cfae:	68fa      	ldr	r2, [r7, #12]
 800cfb0:	4619      	mov	r1, r3
 800cfb2:	68b8      	ldr	r0, [r7, #8]
 800cfb4:	f7ff fe6a 	bl	800cc8c <etharp_find_entry>
 800cfb8:	4603      	mov	r3, r0
 800cfba:	75fb      	strb	r3, [r7, #23]
  /* bail out if no entry could be found */
  if (i < 0) {
 800cfbc:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800cfc0:	2b00      	cmp	r3, #0
 800cfc2:	da02      	bge.n	800cfca <etharp_update_arp_entry+0x76>
    return (err_t)i;
 800cfc4:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800cfc8:	e05d      	b.n	800d086 <etharp_update_arp_entry+0x132>
    return ERR_VAL;
  } else
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
  {
    /* mark it stable */
    arp_table[i].state = ETHARP_STATE_STABLE;
 800cfca:	f997 2017 	ldrsb.w	r2, [r7, #23]
 800cfce:	4933      	ldr	r1, [pc, #204]	; (800d09c <etharp_update_arp_entry+0x148>)
 800cfd0:	4613      	mov	r3, r2
 800cfd2:	005b      	lsls	r3, r3, #1
 800cfd4:	4413      	add	r3, r2
 800cfd6:	00db      	lsls	r3, r3, #3
 800cfd8:	440b      	add	r3, r1
 800cfda:	3314      	adds	r3, #20
 800cfdc:	2202      	movs	r2, #2
 800cfde:	701a      	strb	r2, [r3, #0]
  }

  /* record network interface */
  arp_table[i].netif = netif;
 800cfe0:	f997 2017 	ldrsb.w	r2, [r7, #23]
 800cfe4:	492d      	ldr	r1, [pc, #180]	; (800d09c <etharp_update_arp_entry+0x148>)
 800cfe6:	4613      	mov	r3, r2
 800cfe8:	005b      	lsls	r3, r3, #1
 800cfea:	4413      	add	r3, r2
 800cfec:	00db      	lsls	r3, r3, #3
 800cfee:	440b      	add	r3, r1
 800cff0:	3308      	adds	r3, #8
 800cff2:	68fa      	ldr	r2, [r7, #12]
 800cff4:	601a      	str	r2, [r3, #0]
  /* insert in SNMP ARP index tree */
  mib2_add_arp_entry(netif, &arp_table[i].ipaddr);

  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: updating stable entry %"S16_F"\n", (s16_t)i));
  /* update address */
  ETHADDR32_COPY(&arp_table[i].ethaddr, ethaddr);
 800cff6:	f997 2017 	ldrsb.w	r2, [r7, #23]
 800cffa:	4613      	mov	r3, r2
 800cffc:	005b      	lsls	r3, r3, #1
 800cffe:	4413      	add	r3, r2
 800d000:	00db      	lsls	r3, r3, #3
 800d002:	3308      	adds	r3, #8
 800d004:	4a25      	ldr	r2, [pc, #148]	; (800d09c <etharp_update_arp_entry+0x148>)
 800d006:	4413      	add	r3, r2
 800d008:	3304      	adds	r3, #4
 800d00a:	2206      	movs	r2, #6
 800d00c:	6879      	ldr	r1, [r7, #4]
 800d00e:	4618      	mov	r0, r3
 800d010:	f003 fa7b 	bl	801050a <memcpy>
  /* reset time stamp */
  arp_table[i].ctime = 0;
 800d014:	f997 2017 	ldrsb.w	r2, [r7, #23]
 800d018:	4920      	ldr	r1, [pc, #128]	; (800d09c <etharp_update_arp_entry+0x148>)
 800d01a:	4613      	mov	r3, r2
 800d01c:	005b      	lsls	r3, r3, #1
 800d01e:	4413      	add	r3, r2
 800d020:	00db      	lsls	r3, r3, #3
 800d022:	440b      	add	r3, r1
 800d024:	3312      	adds	r3, #18
 800d026:	2200      	movs	r2, #0
 800d028:	801a      	strh	r2, [r3, #0]
    /* get the packet pointer */
    p = q->p;
    /* now queue entry can be freed */
    memp_free(MEMP_ARP_QUEUE, q);
#else /* ARP_QUEUEING */
  if (arp_table[i].q != NULL) {
 800d02a:	f997 2017 	ldrsb.w	r2, [r7, #23]
 800d02e:	491b      	ldr	r1, [pc, #108]	; (800d09c <etharp_update_arp_entry+0x148>)
 800d030:	4613      	mov	r3, r2
 800d032:	005b      	lsls	r3, r3, #1
 800d034:	4413      	add	r3, r2
 800d036:	00db      	lsls	r3, r3, #3
 800d038:	440b      	add	r3, r1
 800d03a:	681b      	ldr	r3, [r3, #0]
 800d03c:	2b00      	cmp	r3, #0
 800d03e:	d021      	beq.n	800d084 <etharp_update_arp_entry+0x130>
    struct pbuf *p = arp_table[i].q;
 800d040:	f997 2017 	ldrsb.w	r2, [r7, #23]
 800d044:	4915      	ldr	r1, [pc, #84]	; (800d09c <etharp_update_arp_entry+0x148>)
 800d046:	4613      	mov	r3, r2
 800d048:	005b      	lsls	r3, r3, #1
 800d04a:	4413      	add	r3, r2
 800d04c:	00db      	lsls	r3, r3, #3
 800d04e:	440b      	add	r3, r1
 800d050:	681b      	ldr	r3, [r3, #0]
 800d052:	613b      	str	r3, [r7, #16]
    arp_table[i].q = NULL;
 800d054:	f997 2017 	ldrsb.w	r2, [r7, #23]
 800d058:	4910      	ldr	r1, [pc, #64]	; (800d09c <etharp_update_arp_entry+0x148>)
 800d05a:	4613      	mov	r3, r2
 800d05c:	005b      	lsls	r3, r3, #1
 800d05e:	4413      	add	r3, r2
 800d060:	00db      	lsls	r3, r3, #3
 800d062:	440b      	add	r3, r1
 800d064:	2200      	movs	r2, #0
 800d066:	601a      	str	r2, [r3, #0]
#endif /* ARP_QUEUEING */
    /* send the queued IP packet */
    ethernet_output(netif, p, (struct eth_addr*)(netif->hwaddr), ethaddr, ETHTYPE_IP);
 800d068:	68fb      	ldr	r3, [r7, #12]
 800d06a:	f103 0229 	add.w	r2, r3, #41	; 0x29
 800d06e:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800d072:	9300      	str	r3, [sp, #0]
 800d074:	687b      	ldr	r3, [r7, #4]
 800d076:	6939      	ldr	r1, [r7, #16]
 800d078:	68f8      	ldr	r0, [r7, #12]
 800d07a:	f001 ff23 	bl	800eec4 <ethernet_output>
    /* free the queued IP packet */
    pbuf_free(p);
 800d07e:	6938      	ldr	r0, [r7, #16]
 800d080:	f7fa fc58 	bl	8007934 <pbuf_free>
  }
  return ERR_OK;
 800d084:	2300      	movs	r3, #0
}
 800d086:	4618      	mov	r0, r3
 800d088:	3718      	adds	r7, #24
 800d08a:	46bd      	mov	sp, r7
 800d08c:	bd80      	pop	{r7, pc}
 800d08e:	bf00      	nop
 800d090:	080129fc 	.word	0x080129fc
 800d094:	08012af4 	.word	0x08012af4
 800d098:	08012a74 	.word	0x08012a74
 800d09c:	24004080 	.word	0x24004080

0800d0a0 <etharp_cleanup_netif>:
 *
 * @param netif points to a network interface
 */
void
etharp_cleanup_netif(struct netif *netif)
{
 800d0a0:	b580      	push	{r7, lr}
 800d0a2:	b084      	sub	sp, #16
 800d0a4:	af00      	add	r7, sp, #0
 800d0a6:	6078      	str	r0, [r7, #4]
  u8_t i;

  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 800d0a8:	2300      	movs	r3, #0
 800d0aa:	73fb      	strb	r3, [r7, #15]
 800d0ac:	e01f      	b.n	800d0ee <etharp_cleanup_netif+0x4e>
    u8_t state = arp_table[i].state;
 800d0ae:	7bfa      	ldrb	r2, [r7, #15]
 800d0b0:	4912      	ldr	r1, [pc, #72]	; (800d0fc <etharp_cleanup_netif+0x5c>)
 800d0b2:	4613      	mov	r3, r2
 800d0b4:	005b      	lsls	r3, r3, #1
 800d0b6:	4413      	add	r3, r2
 800d0b8:	00db      	lsls	r3, r3, #3
 800d0ba:	440b      	add	r3, r1
 800d0bc:	3314      	adds	r3, #20
 800d0be:	781b      	ldrb	r3, [r3, #0]
 800d0c0:	73bb      	strb	r3, [r7, #14]
    if ((state != ETHARP_STATE_EMPTY) && (arp_table[i].netif == netif)) {
 800d0c2:	7bbb      	ldrb	r3, [r7, #14]
 800d0c4:	2b00      	cmp	r3, #0
 800d0c6:	d00f      	beq.n	800d0e8 <etharp_cleanup_netif+0x48>
 800d0c8:	7bfa      	ldrb	r2, [r7, #15]
 800d0ca:	490c      	ldr	r1, [pc, #48]	; (800d0fc <etharp_cleanup_netif+0x5c>)
 800d0cc:	4613      	mov	r3, r2
 800d0ce:	005b      	lsls	r3, r3, #1
 800d0d0:	4413      	add	r3, r2
 800d0d2:	00db      	lsls	r3, r3, #3
 800d0d4:	440b      	add	r3, r1
 800d0d6:	3308      	adds	r3, #8
 800d0d8:	681b      	ldr	r3, [r3, #0]
 800d0da:	687a      	ldr	r2, [r7, #4]
 800d0dc:	429a      	cmp	r2, r3
 800d0de:	d103      	bne.n	800d0e8 <etharp_cleanup_netif+0x48>
      etharp_free_entry(i);
 800d0e0:	7bfb      	ldrb	r3, [r7, #15]
 800d0e2:	4618      	mov	r0, r3
 800d0e4:	f7ff fcf8 	bl	800cad8 <etharp_free_entry>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 800d0e8:	7bfb      	ldrb	r3, [r7, #15]
 800d0ea:	3301      	adds	r3, #1
 800d0ec:	73fb      	strb	r3, [r7, #15]
 800d0ee:	7bfb      	ldrb	r3, [r7, #15]
 800d0f0:	2b09      	cmp	r3, #9
 800d0f2:	d9dc      	bls.n	800d0ae <etharp_cleanup_netif+0xe>
    }
  }
}
 800d0f4:	bf00      	nop
 800d0f6:	3710      	adds	r7, #16
 800d0f8:	46bd      	mov	sp, r7
 800d0fa:	bd80      	pop	{r7, pc}
 800d0fc:	24004080 	.word	0x24004080

0800d100 <etharp_input>:
 *
 * @see pbuf_free()
 */
void
etharp_input(struct pbuf *p, struct netif *netif)
{
 800d100:	b5b0      	push	{r4, r5, r7, lr}
 800d102:	b08a      	sub	sp, #40	; 0x28
 800d104:	af04      	add	r7, sp, #16
 800d106:	6078      	str	r0, [r7, #4]
 800d108:	6039      	str	r1, [r7, #0]
  struct etharp_hdr *hdr;
  /* these are aligned properly, whereas the ARP header fields might not be */
  ip4_addr_t sipaddr, dipaddr;
  u8_t for_us;

  LWIP_ERROR("netif != NULL", (netif != NULL), return;);
 800d10a:	683b      	ldr	r3, [r7, #0]
 800d10c:	2b00      	cmp	r3, #0
 800d10e:	d107      	bne.n	800d120 <etharp_input+0x20>
 800d110:	4b3d      	ldr	r3, [pc, #244]	; (800d208 <etharp_input+0x108>)
 800d112:	f44f 7222 	mov.w	r2, #648	; 0x288
 800d116:	493d      	ldr	r1, [pc, #244]	; (800d20c <etharp_input+0x10c>)
 800d118:	483d      	ldr	r0, [pc, #244]	; (800d210 <etharp_input+0x110>)
 800d11a:	f003 fa09 	bl	8010530 <iprintf>
 800d11e:	e06f      	b.n	800d200 <etharp_input+0x100>

  hdr = (struct etharp_hdr *)p->payload;
 800d120:	687b      	ldr	r3, [r7, #4]
 800d122:	685b      	ldr	r3, [r3, #4]
 800d124:	613b      	str	r3, [r7, #16]

  /* RFC 826 "Packet Reception": */
  if ((hdr->hwtype != PP_HTONS(HWTYPE_ETHERNET)) ||
 800d126:	693b      	ldr	r3, [r7, #16]
 800d128:	881b      	ldrh	r3, [r3, #0]
 800d12a:	b29b      	uxth	r3, r3
 800d12c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800d130:	d10c      	bne.n	800d14c <etharp_input+0x4c>
      (hdr->hwlen != ETH_HWADDR_LEN) ||
 800d132:	693b      	ldr	r3, [r7, #16]
 800d134:	791b      	ldrb	r3, [r3, #4]
  if ((hdr->hwtype != PP_HTONS(HWTYPE_ETHERNET)) ||
 800d136:	2b06      	cmp	r3, #6
 800d138:	d108      	bne.n	800d14c <etharp_input+0x4c>
      (hdr->protolen != sizeof(ip4_addr_t)) ||
 800d13a:	693b      	ldr	r3, [r7, #16]
 800d13c:	795b      	ldrb	r3, [r3, #5]
      (hdr->hwlen != ETH_HWADDR_LEN) ||
 800d13e:	2b04      	cmp	r3, #4
 800d140:	d104      	bne.n	800d14c <etharp_input+0x4c>
      (hdr->proto != PP_HTONS(ETHTYPE_IP)))  {
 800d142:	693b      	ldr	r3, [r7, #16]
 800d144:	885b      	ldrh	r3, [r3, #2]
 800d146:	b29b      	uxth	r3, r3
      (hdr->protolen != sizeof(ip4_addr_t)) ||
 800d148:	2b08      	cmp	r3, #8
 800d14a:	d003      	beq.n	800d154 <etharp_input+0x54>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING,
      ("etharp_input: packet dropped, wrong hw type, hwlen, proto, protolen or ethernet type (%"U16_F"/%"U16_F"/%"U16_F"/%"U16_F")\n",
      hdr->hwtype, (u16_t)hdr->hwlen, hdr->proto, (u16_t)hdr->protolen));
    ETHARP_STATS_INC(etharp.proterr);
    ETHARP_STATS_INC(etharp.drop);
    pbuf_free(p);
 800d14c:	6878      	ldr	r0, [r7, #4]
 800d14e:	f7fa fbf1 	bl	8007934 <pbuf_free>
    return;
 800d152:	e055      	b.n	800d200 <etharp_input+0x100>
  autoip_arp_reply(netif, hdr);
#endif /* LWIP_AUTOIP */

  /* Copy struct ip4_addr2 to aligned ip4_addr, to support compilers without
   * structure packing (not using structure copy which breaks strict-aliasing rules). */
  IPADDR2_COPY(&sipaddr, &hdr->sipaddr);
 800d154:	693b      	ldr	r3, [r7, #16]
 800d156:	330e      	adds	r3, #14
 800d158:	681b      	ldr	r3, [r3, #0]
 800d15a:	60fb      	str	r3, [r7, #12]
  IPADDR2_COPY(&dipaddr, &hdr->dipaddr);
 800d15c:	693b      	ldr	r3, [r7, #16]
 800d15e:	3318      	adds	r3, #24
 800d160:	681b      	ldr	r3, [r3, #0]
 800d162:	60bb      	str	r3, [r7, #8]

  /* this interface is not configured? */
  if (ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 800d164:	683b      	ldr	r3, [r7, #0]
 800d166:	3304      	adds	r3, #4
 800d168:	681b      	ldr	r3, [r3, #0]
 800d16a:	2b00      	cmp	r3, #0
 800d16c:	d102      	bne.n	800d174 <etharp_input+0x74>
    for_us = 0;
 800d16e:	2300      	movs	r3, #0
 800d170:	75fb      	strb	r3, [r7, #23]
 800d172:	e009      	b.n	800d188 <etharp_input+0x88>
  } else {
    /* ARP packet directed to us? */
    for_us = (u8_t)ip4_addr_cmp(&dipaddr, netif_ip4_addr(netif));
 800d174:	68ba      	ldr	r2, [r7, #8]
 800d176:	683b      	ldr	r3, [r7, #0]
 800d178:	3304      	adds	r3, #4
 800d17a:	681b      	ldr	r3, [r3, #0]
 800d17c:	429a      	cmp	r2, r3
 800d17e:	bf0c      	ite	eq
 800d180:	2301      	moveq	r3, #1
 800d182:	2300      	movne	r3, #0
 800d184:	b2db      	uxtb	r3, r3
 800d186:	75fb      	strb	r3, [r7, #23]
  /* ARP message directed to us?
      -> add IP address in ARP cache; assume requester wants to talk to us,
         can result in directly sending the queued packets for this host.
     ARP message not directed to us?
      ->  update the source IP address in the cache, if present */
  etharp_update_arp_entry(netif, &sipaddr, &(hdr->shwaddr),
 800d188:	693b      	ldr	r3, [r7, #16]
 800d18a:	f103 0208 	add.w	r2, r3, #8
 800d18e:	7dfb      	ldrb	r3, [r7, #23]
 800d190:	2b00      	cmp	r3, #0
 800d192:	d001      	beq.n	800d198 <etharp_input+0x98>
 800d194:	2301      	movs	r3, #1
 800d196:	e000      	b.n	800d19a <etharp_input+0x9a>
 800d198:	2302      	movs	r3, #2
 800d19a:	f107 010c 	add.w	r1, r7, #12
 800d19e:	6838      	ldr	r0, [r7, #0]
 800d1a0:	f7ff fed8 	bl	800cf54 <etharp_update_arp_entry>
                   for_us ? ETHARP_FLAG_TRY_HARD : ETHARP_FLAG_FIND_ONLY);

  /* now act on the message itself */
  switch (hdr->opcode) {
 800d1a4:	693b      	ldr	r3, [r7, #16]
 800d1a6:	88db      	ldrh	r3, [r3, #6]
 800d1a8:	b29b      	uxth	r3, r3
 800d1aa:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800d1ae:	d003      	beq.n	800d1b8 <etharp_input+0xb8>
 800d1b0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800d1b4:	d01e      	beq.n	800d1f4 <etharp_input+0xf4>
#endif /* (LWIP_DHCP && DHCP_DOES_ARP_CHECK) */
    break;
  default:
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_input: ARP unknown opcode type %"S16_F"\n", lwip_htons(hdr->opcode)));
    ETHARP_STATS_INC(etharp.err);
    break;
 800d1b6:	e020      	b.n	800d1fa <etharp_input+0xfa>
    if (for_us) {
 800d1b8:	7dfb      	ldrb	r3, [r7, #23]
 800d1ba:	2b00      	cmp	r3, #0
 800d1bc:	d01c      	beq.n	800d1f8 <etharp_input+0xf8>
                 (struct eth_addr *)netif->hwaddr, &hdr->shwaddr,
 800d1be:	683b      	ldr	r3, [r7, #0]
 800d1c0:	f103 0029 	add.w	r0, r3, #41	; 0x29
 800d1c4:	693b      	ldr	r3, [r7, #16]
 800d1c6:	f103 0408 	add.w	r4, r3, #8
                 (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif),
 800d1ca:	683b      	ldr	r3, [r7, #0]
 800d1cc:	f103 0529 	add.w	r5, r3, #41	; 0x29
 800d1d0:	683b      	ldr	r3, [r7, #0]
 800d1d2:	3304      	adds	r3, #4
                 &hdr->shwaddr, &sipaddr,
 800d1d4:	693a      	ldr	r2, [r7, #16]
 800d1d6:	3208      	adds	r2, #8
      etharp_raw(netif,
 800d1d8:	2102      	movs	r1, #2
 800d1da:	9103      	str	r1, [sp, #12]
 800d1dc:	f107 010c 	add.w	r1, r7, #12
 800d1e0:	9102      	str	r1, [sp, #8]
 800d1e2:	9201      	str	r2, [sp, #4]
 800d1e4:	9300      	str	r3, [sp, #0]
 800d1e6:	462b      	mov	r3, r5
 800d1e8:	4622      	mov	r2, r4
 800d1ea:	4601      	mov	r1, r0
 800d1ec:	6838      	ldr	r0, [r7, #0]
 800d1ee:	f000 faff 	bl	800d7f0 <etharp_raw>
    break;
 800d1f2:	e001      	b.n	800d1f8 <etharp_input+0xf8>
    break;
 800d1f4:	bf00      	nop
 800d1f6:	e000      	b.n	800d1fa <etharp_input+0xfa>
    break;
 800d1f8:	bf00      	nop
  }
  /* free ARP packet */
  pbuf_free(p);
 800d1fa:	6878      	ldr	r0, [r7, #4]
 800d1fc:	f7fa fb9a 	bl	8007934 <pbuf_free>
}
 800d200:	3718      	adds	r7, #24
 800d202:	46bd      	mov	sp, r7
 800d204:	bdb0      	pop	{r4, r5, r7, pc}
 800d206:	bf00      	nop
 800d208:	080129fc 	.word	0x080129fc
 800d20c:	08012b4c 	.word	0x08012b4c
 800d210:	08012a74 	.word	0x08012a74

0800d214 <etharp_output_to_arp_index>:
/** Just a small helper function that sends a pbuf to an ethernet address
 * in the arp_table specified by the index 'arp_idx'.
 */
static err_t
etharp_output_to_arp_index(struct netif *netif, struct pbuf *q, u8_t arp_idx)
{
 800d214:	b580      	push	{r7, lr}
 800d216:	b086      	sub	sp, #24
 800d218:	af02      	add	r7, sp, #8
 800d21a:	60f8      	str	r0, [r7, #12]
 800d21c:	60b9      	str	r1, [r7, #8]
 800d21e:	4613      	mov	r3, r2
 800d220:	71fb      	strb	r3, [r7, #7]
  LWIP_ASSERT("arp_table[arp_idx].state >= ETHARP_STATE_STABLE",
 800d222:	79fa      	ldrb	r2, [r7, #7]
 800d224:	4944      	ldr	r1, [pc, #272]	; (800d338 <etharp_output_to_arp_index+0x124>)
 800d226:	4613      	mov	r3, r2
 800d228:	005b      	lsls	r3, r3, #1
 800d22a:	4413      	add	r3, r2
 800d22c:	00db      	lsls	r3, r3, #3
 800d22e:	440b      	add	r3, r1
 800d230:	3314      	adds	r3, #20
 800d232:	781b      	ldrb	r3, [r3, #0]
 800d234:	2b01      	cmp	r3, #1
 800d236:	d806      	bhi.n	800d246 <etharp_output_to_arp_index+0x32>
 800d238:	4b40      	ldr	r3, [pc, #256]	; (800d33c <etharp_output_to_arp_index+0x128>)
 800d23a:	f240 22ed 	movw	r2, #749	; 0x2ed
 800d23e:	4940      	ldr	r1, [pc, #256]	; (800d340 <etharp_output_to_arp_index+0x12c>)
 800d240:	4840      	ldr	r0, [pc, #256]	; (800d344 <etharp_output_to_arp_index+0x130>)
 800d242:	f003 f975 	bl	8010530 <iprintf>
              arp_table[arp_idx].state >= ETHARP_STATE_STABLE);
  /* if arp table entry is about to expire: re-request it,
     but only if its state is ETHARP_STATE_STABLE to prevent flooding the
     network with ARP requests if this address is used frequently. */
  if (arp_table[arp_idx].state == ETHARP_STATE_STABLE) {
 800d246:	79fa      	ldrb	r2, [r7, #7]
 800d248:	493b      	ldr	r1, [pc, #236]	; (800d338 <etharp_output_to_arp_index+0x124>)
 800d24a:	4613      	mov	r3, r2
 800d24c:	005b      	lsls	r3, r3, #1
 800d24e:	4413      	add	r3, r2
 800d250:	00db      	lsls	r3, r3, #3
 800d252:	440b      	add	r3, r1
 800d254:	3314      	adds	r3, #20
 800d256:	781b      	ldrb	r3, [r3, #0]
 800d258:	2b02      	cmp	r3, #2
 800d25a:	d153      	bne.n	800d304 <etharp_output_to_arp_index+0xf0>
    if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_BROADCAST) {
 800d25c:	79fa      	ldrb	r2, [r7, #7]
 800d25e:	4936      	ldr	r1, [pc, #216]	; (800d338 <etharp_output_to_arp_index+0x124>)
 800d260:	4613      	mov	r3, r2
 800d262:	005b      	lsls	r3, r3, #1
 800d264:	4413      	add	r3, r2
 800d266:	00db      	lsls	r3, r3, #3
 800d268:	440b      	add	r3, r1
 800d26a:	3312      	adds	r3, #18
 800d26c:	881b      	ldrh	r3, [r3, #0]
 800d26e:	f5b3 7f8e 	cmp.w	r3, #284	; 0x11c
 800d272:	d919      	bls.n	800d2a8 <etharp_output_to_arp_index+0x94>
      /* issue a standard request using broadcast */
      if (etharp_request(netif, &arp_table[arp_idx].ipaddr) == ERR_OK) {
 800d274:	79fa      	ldrb	r2, [r7, #7]
 800d276:	4613      	mov	r3, r2
 800d278:	005b      	lsls	r3, r3, #1
 800d27a:	4413      	add	r3, r2
 800d27c:	00db      	lsls	r3, r3, #3
 800d27e:	4a2e      	ldr	r2, [pc, #184]	; (800d338 <etharp_output_to_arp_index+0x124>)
 800d280:	4413      	add	r3, r2
 800d282:	3304      	adds	r3, #4
 800d284:	4619      	mov	r1, r3
 800d286:	68f8      	ldr	r0, [r7, #12]
 800d288:	f000 fb60 	bl	800d94c <etharp_request>
 800d28c:	4603      	mov	r3, r0
 800d28e:	2b00      	cmp	r3, #0
 800d290:	d138      	bne.n	800d304 <etharp_output_to_arp_index+0xf0>
        arp_table[arp_idx].state = ETHARP_STATE_STABLE_REREQUESTING_1;
 800d292:	79fa      	ldrb	r2, [r7, #7]
 800d294:	4928      	ldr	r1, [pc, #160]	; (800d338 <etharp_output_to_arp_index+0x124>)
 800d296:	4613      	mov	r3, r2
 800d298:	005b      	lsls	r3, r3, #1
 800d29a:	4413      	add	r3, r2
 800d29c:	00db      	lsls	r3, r3, #3
 800d29e:	440b      	add	r3, r1
 800d2a0:	3314      	adds	r3, #20
 800d2a2:	2203      	movs	r2, #3
 800d2a4:	701a      	strb	r2, [r3, #0]
 800d2a6:	e02d      	b.n	800d304 <etharp_output_to_arp_index+0xf0>
      }
    } else if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_UNICAST) {
 800d2a8:	79fa      	ldrb	r2, [r7, #7]
 800d2aa:	4923      	ldr	r1, [pc, #140]	; (800d338 <etharp_output_to_arp_index+0x124>)
 800d2ac:	4613      	mov	r3, r2
 800d2ae:	005b      	lsls	r3, r3, #1
 800d2b0:	4413      	add	r3, r2
 800d2b2:	00db      	lsls	r3, r3, #3
 800d2b4:	440b      	add	r3, r1
 800d2b6:	3312      	adds	r3, #18
 800d2b8:	881b      	ldrh	r3, [r3, #0]
 800d2ba:	f5b3 7f87 	cmp.w	r3, #270	; 0x10e
 800d2be:	d321      	bcc.n	800d304 <etharp_output_to_arp_index+0xf0>
      /* issue a unicast request (for 15 seconds) to prevent unnecessary broadcast */
      if (etharp_request_dst(netif, &arp_table[arp_idx].ipaddr, &arp_table[arp_idx].ethaddr) == ERR_OK) {
 800d2c0:	79fa      	ldrb	r2, [r7, #7]
 800d2c2:	4613      	mov	r3, r2
 800d2c4:	005b      	lsls	r3, r3, #1
 800d2c6:	4413      	add	r3, r2
 800d2c8:	00db      	lsls	r3, r3, #3
 800d2ca:	4a1b      	ldr	r2, [pc, #108]	; (800d338 <etharp_output_to_arp_index+0x124>)
 800d2cc:	4413      	add	r3, r2
 800d2ce:	1d19      	adds	r1, r3, #4
 800d2d0:	79fa      	ldrb	r2, [r7, #7]
 800d2d2:	4613      	mov	r3, r2
 800d2d4:	005b      	lsls	r3, r3, #1
 800d2d6:	4413      	add	r3, r2
 800d2d8:	00db      	lsls	r3, r3, #3
 800d2da:	3308      	adds	r3, #8
 800d2dc:	4a16      	ldr	r2, [pc, #88]	; (800d338 <etharp_output_to_arp_index+0x124>)
 800d2de:	4413      	add	r3, r2
 800d2e0:	3304      	adds	r3, #4
 800d2e2:	461a      	mov	r2, r3
 800d2e4:	68f8      	ldr	r0, [r7, #12]
 800d2e6:	f000 fb0f 	bl	800d908 <etharp_request_dst>
 800d2ea:	4603      	mov	r3, r0
 800d2ec:	2b00      	cmp	r3, #0
 800d2ee:	d109      	bne.n	800d304 <etharp_output_to_arp_index+0xf0>
        arp_table[arp_idx].state = ETHARP_STATE_STABLE_REREQUESTING_1;
 800d2f0:	79fa      	ldrb	r2, [r7, #7]
 800d2f2:	4911      	ldr	r1, [pc, #68]	; (800d338 <etharp_output_to_arp_index+0x124>)
 800d2f4:	4613      	mov	r3, r2
 800d2f6:	005b      	lsls	r3, r3, #1
 800d2f8:	4413      	add	r3, r2
 800d2fa:	00db      	lsls	r3, r3, #3
 800d2fc:	440b      	add	r3, r1
 800d2fe:	3314      	adds	r3, #20
 800d300:	2203      	movs	r2, #3
 800d302:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  return ethernet_output(netif, q, (struct eth_addr*)(netif->hwaddr), &arp_table[arp_idx].ethaddr, ETHTYPE_IP);
 800d304:	68fb      	ldr	r3, [r7, #12]
 800d306:	f103 0129 	add.w	r1, r3, #41	; 0x29
 800d30a:	79fa      	ldrb	r2, [r7, #7]
 800d30c:	4613      	mov	r3, r2
 800d30e:	005b      	lsls	r3, r3, #1
 800d310:	4413      	add	r3, r2
 800d312:	00db      	lsls	r3, r3, #3
 800d314:	3308      	adds	r3, #8
 800d316:	4a08      	ldr	r2, [pc, #32]	; (800d338 <etharp_output_to_arp_index+0x124>)
 800d318:	4413      	add	r3, r2
 800d31a:	1d1a      	adds	r2, r3, #4
 800d31c:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800d320:	9300      	str	r3, [sp, #0]
 800d322:	4613      	mov	r3, r2
 800d324:	460a      	mov	r2, r1
 800d326:	68b9      	ldr	r1, [r7, #8]
 800d328:	68f8      	ldr	r0, [r7, #12]
 800d32a:	f001 fdcb 	bl	800eec4 <ethernet_output>
 800d32e:	4603      	mov	r3, r0
}
 800d330:	4618      	mov	r0, r3
 800d332:	3710      	adds	r7, #16
 800d334:	46bd      	mov	sp, r7
 800d336:	bd80      	pop	{r7, pc}
 800d338:	24004080 	.word	0x24004080
 800d33c:	080129fc 	.word	0x080129fc
 800d340:	08012b6c 	.word	0x08012b6c
 800d344:	08012a74 	.word	0x08012a74

0800d348 <etharp_output>:
 * - ERR_RTE No route to destination (no gateway to external networks),
 * or the return type of either etharp_query() or ethernet_output().
 */
err_t
etharp_output(struct netif *netif, struct pbuf *q, const ip4_addr_t *ipaddr)
{
 800d348:	b580      	push	{r7, lr}
 800d34a:	b08a      	sub	sp, #40	; 0x28
 800d34c:	af02      	add	r7, sp, #8
 800d34e:	60f8      	str	r0, [r7, #12]
 800d350:	60b9      	str	r1, [r7, #8]
 800d352:	607a      	str	r2, [r7, #4]
  const struct eth_addr *dest;
  struct eth_addr mcastaddr;
  const ip4_addr_t *dst_addr = ipaddr;
 800d354:	687b      	ldr	r3, [r7, #4]
 800d356:	61bb      	str	r3, [r7, #24]

  LWIP_ASSERT("netif != NULL", netif != NULL);
 800d358:	68fb      	ldr	r3, [r7, #12]
 800d35a:	2b00      	cmp	r3, #0
 800d35c:	d106      	bne.n	800d36c <etharp_output+0x24>
 800d35e:	4b77      	ldr	r3, [pc, #476]	; (800d53c <etharp_output+0x1f4>)
 800d360:	f240 321b 	movw	r2, #795	; 0x31b
 800d364:	4976      	ldr	r1, [pc, #472]	; (800d540 <etharp_output+0x1f8>)
 800d366:	4877      	ldr	r0, [pc, #476]	; (800d544 <etharp_output+0x1fc>)
 800d368:	f003 f8e2 	bl	8010530 <iprintf>
  LWIP_ASSERT("q != NULL", q != NULL);
 800d36c:	68bb      	ldr	r3, [r7, #8]
 800d36e:	2b00      	cmp	r3, #0
 800d370:	d106      	bne.n	800d380 <etharp_output+0x38>
 800d372:	4b72      	ldr	r3, [pc, #456]	; (800d53c <etharp_output+0x1f4>)
 800d374:	f44f 7247 	mov.w	r2, #796	; 0x31c
 800d378:	4973      	ldr	r1, [pc, #460]	; (800d548 <etharp_output+0x200>)
 800d37a:	4872      	ldr	r0, [pc, #456]	; (800d544 <etharp_output+0x1fc>)
 800d37c:	f003 f8d8 	bl	8010530 <iprintf>
  LWIP_ASSERT("ipaddr != NULL", ipaddr != NULL);
 800d380:	687b      	ldr	r3, [r7, #4]
 800d382:	2b00      	cmp	r3, #0
 800d384:	d106      	bne.n	800d394 <etharp_output+0x4c>
 800d386:	4b6d      	ldr	r3, [pc, #436]	; (800d53c <etharp_output+0x1f4>)
 800d388:	f240 321d 	movw	r2, #797	; 0x31d
 800d38c:	496f      	ldr	r1, [pc, #444]	; (800d54c <etharp_output+0x204>)
 800d38e:	486d      	ldr	r0, [pc, #436]	; (800d544 <etharp_output+0x1fc>)
 800d390:	f003 f8ce 	bl	8010530 <iprintf>

  /* Determine on destination hardware address. Broadcasts and multicasts
   * are special, other IP addresses are looked up in the ARP table. */

  /* broadcast destination IP address? */
  if (ip4_addr_isbroadcast(ipaddr, netif)) {
 800d394:	687b      	ldr	r3, [r7, #4]
 800d396:	681b      	ldr	r3, [r3, #0]
 800d398:	68f9      	ldr	r1, [r7, #12]
 800d39a:	4618      	mov	r0, r3
 800d39c:	f000 fef0 	bl	800e180 <ip4_addr_isbroadcast_u32>
 800d3a0:	4603      	mov	r3, r0
 800d3a2:	2b00      	cmp	r3, #0
 800d3a4:	d002      	beq.n	800d3ac <etharp_output+0x64>
    /* broadcast on Ethernet also */
    dest = (const struct eth_addr *)&ethbroadcast;
 800d3a6:	4b6a      	ldr	r3, [pc, #424]	; (800d550 <etharp_output+0x208>)
 800d3a8:	61fb      	str	r3, [r7, #28]
 800d3aa:	e0b6      	b.n	800d51a <etharp_output+0x1d2>
  /* multicast destination IP address? */
  } else if (ip4_addr_ismulticast(ipaddr)) {
 800d3ac:	687b      	ldr	r3, [r7, #4]
 800d3ae:	681b      	ldr	r3, [r3, #0]
 800d3b0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800d3b4:	2be0      	cmp	r3, #224	; 0xe0
 800d3b6:	d118      	bne.n	800d3ea <etharp_output+0xa2>
    /* Hash IP multicast address to MAC address.*/
    mcastaddr.addr[0] = LL_IP4_MULTICAST_ADDR_0;
 800d3b8:	2301      	movs	r3, #1
 800d3ba:	743b      	strb	r3, [r7, #16]
    mcastaddr.addr[1] = LL_IP4_MULTICAST_ADDR_1;
 800d3bc:	2300      	movs	r3, #0
 800d3be:	747b      	strb	r3, [r7, #17]
    mcastaddr.addr[2] = LL_IP4_MULTICAST_ADDR_2;
 800d3c0:	235e      	movs	r3, #94	; 0x5e
 800d3c2:	74bb      	strb	r3, [r7, #18]
    mcastaddr.addr[3] = ip4_addr2(ipaddr) & 0x7f;
 800d3c4:	687b      	ldr	r3, [r7, #4]
 800d3c6:	3301      	adds	r3, #1
 800d3c8:	781b      	ldrb	r3, [r3, #0]
 800d3ca:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800d3ce:	b2db      	uxtb	r3, r3
 800d3d0:	74fb      	strb	r3, [r7, #19]
    mcastaddr.addr[4] = ip4_addr3(ipaddr);
 800d3d2:	687b      	ldr	r3, [r7, #4]
 800d3d4:	3302      	adds	r3, #2
 800d3d6:	781b      	ldrb	r3, [r3, #0]
 800d3d8:	753b      	strb	r3, [r7, #20]
    mcastaddr.addr[5] = ip4_addr4(ipaddr);
 800d3da:	687b      	ldr	r3, [r7, #4]
 800d3dc:	3303      	adds	r3, #3
 800d3de:	781b      	ldrb	r3, [r3, #0]
 800d3e0:	757b      	strb	r3, [r7, #21]
    /* destination Ethernet address is multicast */
    dest = &mcastaddr;
 800d3e2:	f107 0310 	add.w	r3, r7, #16
 800d3e6:	61fb      	str	r3, [r7, #28]
 800d3e8:	e097      	b.n	800d51a <etharp_output+0x1d2>
  /* unicast destination IP address? */
  } else {
    s8_t i;
    /* outside local network? if so, this can neither be a global broadcast nor
       a subnet broadcast. */
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
 800d3ea:	687b      	ldr	r3, [r7, #4]
 800d3ec:	681a      	ldr	r2, [r3, #0]
 800d3ee:	68fb      	ldr	r3, [r7, #12]
 800d3f0:	3304      	adds	r3, #4
 800d3f2:	681b      	ldr	r3, [r3, #0]
 800d3f4:	405a      	eors	r2, r3
 800d3f6:	68fb      	ldr	r3, [r7, #12]
 800d3f8:	3308      	adds	r3, #8
 800d3fa:	681b      	ldr	r3, [r3, #0]
 800d3fc:	4013      	ands	r3, r2
 800d3fe:	2b00      	cmp	r3, #0
 800d400:	d012      	beq.n	800d428 <etharp_output+0xe0>
        !ip4_addr_islinklocal(ipaddr)) {
 800d402:	687b      	ldr	r3, [r7, #4]
 800d404:	681b      	ldr	r3, [r3, #0]
 800d406:	b29b      	uxth	r3, r3
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
 800d408:	f64f 62a9 	movw	r2, #65193	; 0xfea9
 800d40c:	4293      	cmp	r3, r2
 800d40e:	d00b      	beq.n	800d428 <etharp_output+0xe0>
        dst_addr = LWIP_HOOK_ETHARP_GET_GW(netif, ipaddr);
        if (dst_addr == NULL)
#endif /* LWIP_HOOK_ETHARP_GET_GW */
        {
          /* interface has default gateway? */
          if (!ip4_addr_isany_val(*netif_ip4_gw(netif))) {
 800d410:	68fb      	ldr	r3, [r7, #12]
 800d412:	330c      	adds	r3, #12
 800d414:	681b      	ldr	r3, [r3, #0]
 800d416:	2b00      	cmp	r3, #0
 800d418:	d003      	beq.n	800d422 <etharp_output+0xda>
            /* send to hardware address of default gateway IP address */
            dst_addr = netif_ip4_gw(netif);
 800d41a:	68fb      	ldr	r3, [r7, #12]
 800d41c:	330c      	adds	r3, #12
 800d41e:	61bb      	str	r3, [r7, #24]
 800d420:	e002      	b.n	800d428 <etharp_output+0xe0>
          /* no default gateway available */
          } else {
            /* no route to destination error (default gateway missing) */
            return ERR_RTE;
 800d422:	f06f 0303 	mvn.w	r3, #3
 800d426:	e084      	b.n	800d532 <etharp_output+0x1ea>
    if (netif->addr_hint != NULL) {
      /* per-pcb cached entry was given */
      u8_t etharp_cached_entry = *(netif->addr_hint);
      if (etharp_cached_entry < ARP_TABLE_SIZE) {
#endif /* LWIP_NETIF_HWADDRHINT */
        if ((arp_table[etharp_cached_entry].state >= ETHARP_STATE_STABLE) &&
 800d428:	4b4a      	ldr	r3, [pc, #296]	; (800d554 <etharp_output+0x20c>)
 800d42a:	781b      	ldrb	r3, [r3, #0]
 800d42c:	4619      	mov	r1, r3
 800d42e:	4a4a      	ldr	r2, [pc, #296]	; (800d558 <etharp_output+0x210>)
 800d430:	460b      	mov	r3, r1
 800d432:	005b      	lsls	r3, r3, #1
 800d434:	440b      	add	r3, r1
 800d436:	00db      	lsls	r3, r3, #3
 800d438:	4413      	add	r3, r2
 800d43a:	3314      	adds	r3, #20
 800d43c:	781b      	ldrb	r3, [r3, #0]
 800d43e:	2b01      	cmp	r3, #1
 800d440:	d925      	bls.n	800d48e <etharp_output+0x146>
#if ETHARP_TABLE_MATCH_NETIF
            (arp_table[etharp_cached_entry].netif == netif) &&
 800d442:	4b44      	ldr	r3, [pc, #272]	; (800d554 <etharp_output+0x20c>)
 800d444:	781b      	ldrb	r3, [r3, #0]
 800d446:	4619      	mov	r1, r3
 800d448:	4a43      	ldr	r2, [pc, #268]	; (800d558 <etharp_output+0x210>)
 800d44a:	460b      	mov	r3, r1
 800d44c:	005b      	lsls	r3, r3, #1
 800d44e:	440b      	add	r3, r1
 800d450:	00db      	lsls	r3, r3, #3
 800d452:	4413      	add	r3, r2
 800d454:	3308      	adds	r3, #8
 800d456:	681b      	ldr	r3, [r3, #0]
        if ((arp_table[etharp_cached_entry].state >= ETHARP_STATE_STABLE) &&
 800d458:	68fa      	ldr	r2, [r7, #12]
 800d45a:	429a      	cmp	r2, r3
 800d45c:	d117      	bne.n	800d48e <etharp_output+0x146>
#endif
            (ip4_addr_cmp(dst_addr, &arp_table[etharp_cached_entry].ipaddr))) {
 800d45e:	69bb      	ldr	r3, [r7, #24]
 800d460:	681a      	ldr	r2, [r3, #0]
 800d462:	4b3c      	ldr	r3, [pc, #240]	; (800d554 <etharp_output+0x20c>)
 800d464:	781b      	ldrb	r3, [r3, #0]
 800d466:	4618      	mov	r0, r3
 800d468:	493b      	ldr	r1, [pc, #236]	; (800d558 <etharp_output+0x210>)
 800d46a:	4603      	mov	r3, r0
 800d46c:	005b      	lsls	r3, r3, #1
 800d46e:	4403      	add	r3, r0
 800d470:	00db      	lsls	r3, r3, #3
 800d472:	440b      	add	r3, r1
 800d474:	3304      	adds	r3, #4
 800d476:	681b      	ldr	r3, [r3, #0]
            (arp_table[etharp_cached_entry].netif == netif) &&
 800d478:	429a      	cmp	r2, r3
 800d47a:	d108      	bne.n	800d48e <etharp_output+0x146>
          /* the per-pcb-cached entry is stable and the right one! */
          ETHARP_STATS_INC(etharp.cachehit);
          return etharp_output_to_arp_index(netif, q, etharp_cached_entry);
 800d47c:	4b35      	ldr	r3, [pc, #212]	; (800d554 <etharp_output+0x20c>)
 800d47e:	781b      	ldrb	r3, [r3, #0]
 800d480:	461a      	mov	r2, r3
 800d482:	68b9      	ldr	r1, [r7, #8]
 800d484:	68f8      	ldr	r0, [r7, #12]
 800d486:	f7ff fec5 	bl	800d214 <etharp_output_to_arp_index>
 800d48a:	4603      	mov	r3, r0
 800d48c:	e051      	b.n	800d532 <etharp_output+0x1ea>
    }
#endif /* LWIP_NETIF_HWADDRHINT */

    /* find stable entry: do this here since this is a critical path for
       throughput and etharp_find_entry() is kind of slow */
    for (i = 0; i < ARP_TABLE_SIZE; i++) {
 800d48e:	2300      	movs	r3, #0
 800d490:	75fb      	strb	r3, [r7, #23]
 800d492:	e037      	b.n	800d504 <etharp_output+0x1bc>
      if ((arp_table[i].state >= ETHARP_STATE_STABLE) &&
 800d494:	f997 2017 	ldrsb.w	r2, [r7, #23]
 800d498:	492f      	ldr	r1, [pc, #188]	; (800d558 <etharp_output+0x210>)
 800d49a:	4613      	mov	r3, r2
 800d49c:	005b      	lsls	r3, r3, #1
 800d49e:	4413      	add	r3, r2
 800d4a0:	00db      	lsls	r3, r3, #3
 800d4a2:	440b      	add	r3, r1
 800d4a4:	3314      	adds	r3, #20
 800d4a6:	781b      	ldrb	r3, [r3, #0]
 800d4a8:	2b01      	cmp	r3, #1
 800d4aa:	d925      	bls.n	800d4f8 <etharp_output+0x1b0>
#if ETHARP_TABLE_MATCH_NETIF
          (arp_table[i].netif == netif) &&
 800d4ac:	f997 2017 	ldrsb.w	r2, [r7, #23]
 800d4b0:	4929      	ldr	r1, [pc, #164]	; (800d558 <etharp_output+0x210>)
 800d4b2:	4613      	mov	r3, r2
 800d4b4:	005b      	lsls	r3, r3, #1
 800d4b6:	4413      	add	r3, r2
 800d4b8:	00db      	lsls	r3, r3, #3
 800d4ba:	440b      	add	r3, r1
 800d4bc:	3308      	adds	r3, #8
 800d4be:	681b      	ldr	r3, [r3, #0]
      if ((arp_table[i].state >= ETHARP_STATE_STABLE) &&
 800d4c0:	68fa      	ldr	r2, [r7, #12]
 800d4c2:	429a      	cmp	r2, r3
 800d4c4:	d118      	bne.n	800d4f8 <etharp_output+0x1b0>
#endif
          (ip4_addr_cmp(dst_addr, &arp_table[i].ipaddr))) {
 800d4c6:	69bb      	ldr	r3, [r7, #24]
 800d4c8:	6819      	ldr	r1, [r3, #0]
 800d4ca:	f997 2017 	ldrsb.w	r2, [r7, #23]
 800d4ce:	4822      	ldr	r0, [pc, #136]	; (800d558 <etharp_output+0x210>)
 800d4d0:	4613      	mov	r3, r2
 800d4d2:	005b      	lsls	r3, r3, #1
 800d4d4:	4413      	add	r3, r2
 800d4d6:	00db      	lsls	r3, r3, #3
 800d4d8:	4403      	add	r3, r0
 800d4da:	3304      	adds	r3, #4
 800d4dc:	681b      	ldr	r3, [r3, #0]
          (arp_table[i].netif == netif) &&
 800d4de:	4299      	cmp	r1, r3
 800d4e0:	d10a      	bne.n	800d4f8 <etharp_output+0x1b0>
        /* found an existing, stable entry */
        ETHARP_SET_HINT(netif, i);
 800d4e2:	7dfa      	ldrb	r2, [r7, #23]
 800d4e4:	4b1b      	ldr	r3, [pc, #108]	; (800d554 <etharp_output+0x20c>)
 800d4e6:	701a      	strb	r2, [r3, #0]
        return etharp_output_to_arp_index(netif, q, i);
 800d4e8:	7dfb      	ldrb	r3, [r7, #23]
 800d4ea:	461a      	mov	r2, r3
 800d4ec:	68b9      	ldr	r1, [r7, #8]
 800d4ee:	68f8      	ldr	r0, [r7, #12]
 800d4f0:	f7ff fe90 	bl	800d214 <etharp_output_to_arp_index>
 800d4f4:	4603      	mov	r3, r0
 800d4f6:	e01c      	b.n	800d532 <etharp_output+0x1ea>
    for (i = 0; i < ARP_TABLE_SIZE; i++) {
 800d4f8:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800d4fc:	b2db      	uxtb	r3, r3
 800d4fe:	3301      	adds	r3, #1
 800d500:	b2db      	uxtb	r3, r3
 800d502:	75fb      	strb	r3, [r7, #23]
 800d504:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800d508:	2b09      	cmp	r3, #9
 800d50a:	ddc3      	ble.n	800d494 <etharp_output+0x14c>
      }
    }
    /* no stable entry found, use the (slower) query function:
       queue on destination Ethernet address belonging to ipaddr */
    return etharp_query(netif, dst_addr, q);
 800d50c:	68ba      	ldr	r2, [r7, #8]
 800d50e:	69b9      	ldr	r1, [r7, #24]
 800d510:	68f8      	ldr	r0, [r7, #12]
 800d512:	f000 f823 	bl	800d55c <etharp_query>
 800d516:	4603      	mov	r3, r0
 800d518:	e00b      	b.n	800d532 <etharp_output+0x1ea>
  }

  /* continuation for multicast/broadcast destinations */
  /* obtain source Ethernet address of the given interface */
  /* send packet directly on the link */
  return ethernet_output(netif, q, (struct eth_addr*)(netif->hwaddr), dest, ETHTYPE_IP);
 800d51a:	68fb      	ldr	r3, [r7, #12]
 800d51c:	f103 0229 	add.w	r2, r3, #41	; 0x29
 800d520:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800d524:	9300      	str	r3, [sp, #0]
 800d526:	69fb      	ldr	r3, [r7, #28]
 800d528:	68b9      	ldr	r1, [r7, #8]
 800d52a:	68f8      	ldr	r0, [r7, #12]
 800d52c:	f001 fcca 	bl	800eec4 <ethernet_output>
 800d530:	4603      	mov	r3, r0
}
 800d532:	4618      	mov	r0, r3
 800d534:	3720      	adds	r7, #32
 800d536:	46bd      	mov	sp, r7
 800d538:	bd80      	pop	{r7, pc}
 800d53a:	bf00      	nop
 800d53c:	080129fc 	.word	0x080129fc
 800d540:	08012b4c 	.word	0x08012b4c
 800d544:	08012a74 	.word	0x08012a74
 800d548:	08012b9c 	.word	0x08012b9c
 800d54c:	08012b3c 	.word	0x08012b3c
 800d550:	08013200 	.word	0x08013200
 800d554:	24004170 	.word	0x24004170
 800d558:	24004080 	.word	0x24004080

0800d55c <etharp_query>:
 * - ERR_ARG Non-unicast address given, those will not appear in ARP cache.
 *
 */
err_t
etharp_query(struct netif *netif, const ip4_addr_t *ipaddr, struct pbuf *q)
{
 800d55c:	b580      	push	{r7, lr}
 800d55e:	b08c      	sub	sp, #48	; 0x30
 800d560:	af02      	add	r7, sp, #8
 800d562:	60f8      	str	r0, [r7, #12]
 800d564:	60b9      	str	r1, [r7, #8]
 800d566:	607a      	str	r2, [r7, #4]
  struct eth_addr * srcaddr = (struct eth_addr *)netif->hwaddr;
 800d568:	68fb      	ldr	r3, [r7, #12]
 800d56a:	3329      	adds	r3, #41	; 0x29
 800d56c:	617b      	str	r3, [r7, #20]
  err_t result = ERR_MEM;
 800d56e:	23ff      	movs	r3, #255	; 0xff
 800d570:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  int is_new_entry = 0;
 800d574:	2300      	movs	r3, #0
 800d576:	623b      	str	r3, [r7, #32]
  s8_t i; /* ARP entry index */

  /* non-unicast address? */
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 800d578:	68bb      	ldr	r3, [r7, #8]
 800d57a:	681b      	ldr	r3, [r3, #0]
 800d57c:	68f9      	ldr	r1, [r7, #12]
 800d57e:	4618      	mov	r0, r3
 800d580:	f000 fdfe 	bl	800e180 <ip4_addr_isbroadcast_u32>
 800d584:	4603      	mov	r3, r0
 800d586:	2b00      	cmp	r3, #0
 800d588:	d10c      	bne.n	800d5a4 <etharp_query+0x48>
      ip4_addr_ismulticast(ipaddr) ||
 800d58a:	68bb      	ldr	r3, [r7, #8]
 800d58c:	681b      	ldr	r3, [r3, #0]
 800d58e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 800d592:	2be0      	cmp	r3, #224	; 0xe0
 800d594:	d006      	beq.n	800d5a4 <etharp_query+0x48>
      ip4_addr_ismulticast(ipaddr) ||
 800d596:	68bb      	ldr	r3, [r7, #8]
 800d598:	2b00      	cmp	r3, #0
 800d59a:	d003      	beq.n	800d5a4 <etharp_query+0x48>
      ip4_addr_isany(ipaddr)) {
 800d59c:	68bb      	ldr	r3, [r7, #8]
 800d59e:	681b      	ldr	r3, [r3, #0]
 800d5a0:	2b00      	cmp	r3, #0
 800d5a2:	d102      	bne.n	800d5aa <etharp_query+0x4e>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: will not add non-unicast IP address to ARP cache\n"));
    return ERR_ARG;
 800d5a4:	f06f 030f 	mvn.w	r3, #15
 800d5a8:	e10f      	b.n	800d7ca <etharp_query+0x26e>
  }

  /* find entry in ARP cache, ask to create entry if queueing packet */
  i = etharp_find_entry(ipaddr, ETHARP_FLAG_TRY_HARD, netif);
 800d5aa:	68fa      	ldr	r2, [r7, #12]
 800d5ac:	2101      	movs	r1, #1
 800d5ae:	68b8      	ldr	r0, [r7, #8]
 800d5b0:	f7ff fb6c 	bl	800cc8c <etharp_find_entry>
 800d5b4:	4603      	mov	r3, r0
 800d5b6:	74fb      	strb	r3, [r7, #19]

  /* could not find or create entry? */
  if (i < 0) {
 800d5b8:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800d5bc:	2b00      	cmp	r3, #0
 800d5be:	da02      	bge.n	800d5c6 <etharp_query+0x6a>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not create ARP entry\n"));
    if (q) {
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: packet dropped\n"));
      ETHARP_STATS_INC(etharp.memerr);
    }
    return (err_t)i;
 800d5c0:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800d5c4:	e101      	b.n	800d7ca <etharp_query+0x26e>
  }

  /* mark a fresh entry as pending (we just sent a request) */
  if (arp_table[i].state == ETHARP_STATE_EMPTY) {
 800d5c6:	f997 2013 	ldrsb.w	r2, [r7, #19]
 800d5ca:	4982      	ldr	r1, [pc, #520]	; (800d7d4 <etharp_query+0x278>)
 800d5cc:	4613      	mov	r3, r2
 800d5ce:	005b      	lsls	r3, r3, #1
 800d5d0:	4413      	add	r3, r2
 800d5d2:	00db      	lsls	r3, r3, #3
 800d5d4:	440b      	add	r3, r1
 800d5d6:	3314      	adds	r3, #20
 800d5d8:	781b      	ldrb	r3, [r3, #0]
 800d5da:	2b00      	cmp	r3, #0
 800d5dc:	d117      	bne.n	800d60e <etharp_query+0xb2>
    is_new_entry = 1;
 800d5de:	2301      	movs	r3, #1
 800d5e0:	623b      	str	r3, [r7, #32]
    arp_table[i].state = ETHARP_STATE_PENDING;
 800d5e2:	f997 2013 	ldrsb.w	r2, [r7, #19]
 800d5e6:	497b      	ldr	r1, [pc, #492]	; (800d7d4 <etharp_query+0x278>)
 800d5e8:	4613      	mov	r3, r2
 800d5ea:	005b      	lsls	r3, r3, #1
 800d5ec:	4413      	add	r3, r2
 800d5ee:	00db      	lsls	r3, r3, #3
 800d5f0:	440b      	add	r3, r1
 800d5f2:	3314      	adds	r3, #20
 800d5f4:	2201      	movs	r2, #1
 800d5f6:	701a      	strb	r2, [r3, #0]
    /* record network interface for re-sending arp request in etharp_tmr */
    arp_table[i].netif = netif;
 800d5f8:	f997 2013 	ldrsb.w	r2, [r7, #19]
 800d5fc:	4975      	ldr	r1, [pc, #468]	; (800d7d4 <etharp_query+0x278>)
 800d5fe:	4613      	mov	r3, r2
 800d600:	005b      	lsls	r3, r3, #1
 800d602:	4413      	add	r3, r2
 800d604:	00db      	lsls	r3, r3, #3
 800d606:	440b      	add	r3, r1
 800d608:	3308      	adds	r3, #8
 800d60a:	68fa      	ldr	r2, [r7, #12]
 800d60c:	601a      	str	r2, [r3, #0]
  }

  /* { i is either a STABLE or (new or existing) PENDING entry } */
  LWIP_ASSERT("arp_table[i].state == PENDING or STABLE",
 800d60e:	f997 2013 	ldrsb.w	r2, [r7, #19]
 800d612:	4970      	ldr	r1, [pc, #448]	; (800d7d4 <etharp_query+0x278>)
 800d614:	4613      	mov	r3, r2
 800d616:	005b      	lsls	r3, r3, #1
 800d618:	4413      	add	r3, r2
 800d61a:	00db      	lsls	r3, r3, #3
 800d61c:	440b      	add	r3, r1
 800d61e:	3314      	adds	r3, #20
 800d620:	781b      	ldrb	r3, [r3, #0]
 800d622:	2b01      	cmp	r3, #1
 800d624:	d012      	beq.n	800d64c <etharp_query+0xf0>
 800d626:	f997 2013 	ldrsb.w	r2, [r7, #19]
 800d62a:	496a      	ldr	r1, [pc, #424]	; (800d7d4 <etharp_query+0x278>)
 800d62c:	4613      	mov	r3, r2
 800d62e:	005b      	lsls	r3, r3, #1
 800d630:	4413      	add	r3, r2
 800d632:	00db      	lsls	r3, r3, #3
 800d634:	440b      	add	r3, r1
 800d636:	3314      	adds	r3, #20
 800d638:	781b      	ldrb	r3, [r3, #0]
 800d63a:	2b01      	cmp	r3, #1
 800d63c:	d806      	bhi.n	800d64c <etharp_query+0xf0>
 800d63e:	4b66      	ldr	r3, [pc, #408]	; (800d7d8 <etharp_query+0x27c>)
 800d640:	f240 32c9 	movw	r2, #969	; 0x3c9
 800d644:	4965      	ldr	r1, [pc, #404]	; (800d7dc <etharp_query+0x280>)
 800d646:	4866      	ldr	r0, [pc, #408]	; (800d7e0 <etharp_query+0x284>)
 800d648:	f002 ff72 	bl	8010530 <iprintf>
  ((arp_table[i].state == ETHARP_STATE_PENDING) ||
   (arp_table[i].state >= ETHARP_STATE_STABLE)));

  /* do we have a new entry? or an implicit query request? */
  if (is_new_entry || (q == NULL)) {
 800d64c:	6a3b      	ldr	r3, [r7, #32]
 800d64e:	2b00      	cmp	r3, #0
 800d650:	d102      	bne.n	800d658 <etharp_query+0xfc>
 800d652:	687b      	ldr	r3, [r7, #4]
 800d654:	2b00      	cmp	r3, #0
 800d656:	d10c      	bne.n	800d672 <etharp_query+0x116>
    /* try to resolve it; send out ARP request */
    result = etharp_request(netif, ipaddr);
 800d658:	68b9      	ldr	r1, [r7, #8]
 800d65a:	68f8      	ldr	r0, [r7, #12]
 800d65c:	f000 f976 	bl	800d94c <etharp_request>
 800d660:	4603      	mov	r3, r0
 800d662:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      /* ARP request couldn't be sent */
      /* We don't re-send arp request in etharp_tmr, but we still queue packets,
         since this failure could be temporary, and the next packet calling
         etharp_query again could lead to sending the queued packets. */
    }
    if (q == NULL) {
 800d666:	687b      	ldr	r3, [r7, #4]
 800d668:	2b00      	cmp	r3, #0
 800d66a:	d102      	bne.n	800d672 <etharp_query+0x116>
      return result;
 800d66c:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800d670:	e0ab      	b.n	800d7ca <etharp_query+0x26e>
    }
  }

  /* packet given? */
  LWIP_ASSERT("q != NULL", q != NULL);
 800d672:	687b      	ldr	r3, [r7, #4]
 800d674:	2b00      	cmp	r3, #0
 800d676:	d106      	bne.n	800d686 <etharp_query+0x12a>
 800d678:	4b57      	ldr	r3, [pc, #348]	; (800d7d8 <etharp_query+0x27c>)
 800d67a:	f240 32db 	movw	r2, #987	; 0x3db
 800d67e:	4959      	ldr	r1, [pc, #356]	; (800d7e4 <etharp_query+0x288>)
 800d680:	4857      	ldr	r0, [pc, #348]	; (800d7e0 <etharp_query+0x284>)
 800d682:	f002 ff55 	bl	8010530 <iprintf>
  /* stable entry? */
  if (arp_table[i].state >= ETHARP_STATE_STABLE) {
 800d686:	f997 2013 	ldrsb.w	r2, [r7, #19]
 800d68a:	4952      	ldr	r1, [pc, #328]	; (800d7d4 <etharp_query+0x278>)
 800d68c:	4613      	mov	r3, r2
 800d68e:	005b      	lsls	r3, r3, #1
 800d690:	4413      	add	r3, r2
 800d692:	00db      	lsls	r3, r3, #3
 800d694:	440b      	add	r3, r1
 800d696:	3314      	adds	r3, #20
 800d698:	781b      	ldrb	r3, [r3, #0]
 800d69a:	2b01      	cmp	r3, #1
 800d69c:	d919      	bls.n	800d6d2 <etharp_query+0x176>
    /* we have a valid IP->Ethernet address mapping */
    ETHARP_SET_HINT(netif, i);
 800d69e:	7cfa      	ldrb	r2, [r7, #19]
 800d6a0:	4b51      	ldr	r3, [pc, #324]	; (800d7e8 <etharp_query+0x28c>)
 800d6a2:	701a      	strb	r2, [r3, #0]
    /* send the packet */
    result = ethernet_output(netif, q, srcaddr, &(arp_table[i].ethaddr), ETHTYPE_IP);
 800d6a4:	f997 2013 	ldrsb.w	r2, [r7, #19]
 800d6a8:	4613      	mov	r3, r2
 800d6aa:	005b      	lsls	r3, r3, #1
 800d6ac:	4413      	add	r3, r2
 800d6ae:	00db      	lsls	r3, r3, #3
 800d6b0:	3308      	adds	r3, #8
 800d6b2:	4a48      	ldr	r2, [pc, #288]	; (800d7d4 <etharp_query+0x278>)
 800d6b4:	4413      	add	r3, r2
 800d6b6:	1d1a      	adds	r2, r3, #4
 800d6b8:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800d6bc:	9300      	str	r3, [sp, #0]
 800d6be:	4613      	mov	r3, r2
 800d6c0:	697a      	ldr	r2, [r7, #20]
 800d6c2:	6879      	ldr	r1, [r7, #4]
 800d6c4:	68f8      	ldr	r0, [r7, #12]
 800d6c6:	f001 fbfd 	bl	800eec4 <ethernet_output>
 800d6ca:	4603      	mov	r3, r0
 800d6cc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800d6d0:	e079      	b.n	800d7c6 <etharp_query+0x26a>
  /* pending entry? (either just created or already pending */
  } else if (arp_table[i].state == ETHARP_STATE_PENDING) {
 800d6d2:	f997 2013 	ldrsb.w	r2, [r7, #19]
 800d6d6:	493f      	ldr	r1, [pc, #252]	; (800d7d4 <etharp_query+0x278>)
 800d6d8:	4613      	mov	r3, r2
 800d6da:	005b      	lsls	r3, r3, #1
 800d6dc:	4413      	add	r3, r2
 800d6de:	00db      	lsls	r3, r3, #3
 800d6e0:	440b      	add	r3, r1
 800d6e2:	3314      	adds	r3, #20
 800d6e4:	781b      	ldrb	r3, [r3, #0]
 800d6e6:	2b01      	cmp	r3, #1
 800d6e8:	d16d      	bne.n	800d7c6 <etharp_query+0x26a>
    /* entry is still pending, queue the given packet 'q' */
    struct pbuf *p;
    int copy_needed = 0;
 800d6ea:	2300      	movs	r3, #0
 800d6ec:	61bb      	str	r3, [r7, #24]
    /* IF q includes a PBUF_REF, PBUF_POOL or PBUF_RAM, we have no choice but
     * to copy the whole queue into a new PBUF_RAM (see bug #11400)
     * PBUF_ROMs can be left as they are, since ROM must not get changed. */
    p = q;
 800d6ee:	687b      	ldr	r3, [r7, #4]
 800d6f0:	61fb      	str	r3, [r7, #28]
    while (p) {
 800d6f2:	e01a      	b.n	800d72a <etharp_query+0x1ce>
      LWIP_ASSERT("no packet queues allowed!", (p->len != p->tot_len) || (p->next == 0));
 800d6f4:	69fb      	ldr	r3, [r7, #28]
 800d6f6:	895a      	ldrh	r2, [r3, #10]
 800d6f8:	69fb      	ldr	r3, [r7, #28]
 800d6fa:	891b      	ldrh	r3, [r3, #8]
 800d6fc:	429a      	cmp	r2, r3
 800d6fe:	d10a      	bne.n	800d716 <etharp_query+0x1ba>
 800d700:	69fb      	ldr	r3, [r7, #28]
 800d702:	681b      	ldr	r3, [r3, #0]
 800d704:	2b00      	cmp	r3, #0
 800d706:	d006      	beq.n	800d716 <etharp_query+0x1ba>
 800d708:	4b33      	ldr	r3, [pc, #204]	; (800d7d8 <etharp_query+0x27c>)
 800d70a:	f44f 727b 	mov.w	r2, #1004	; 0x3ec
 800d70e:	4937      	ldr	r1, [pc, #220]	; (800d7ec <etharp_query+0x290>)
 800d710:	4833      	ldr	r0, [pc, #204]	; (800d7e0 <etharp_query+0x284>)
 800d712:	f002 ff0d 	bl	8010530 <iprintf>
      if (p->type != PBUF_ROM) {
 800d716:	69fb      	ldr	r3, [r7, #28]
 800d718:	7b1b      	ldrb	r3, [r3, #12]
 800d71a:	2b01      	cmp	r3, #1
 800d71c:	d002      	beq.n	800d724 <etharp_query+0x1c8>
        copy_needed = 1;
 800d71e:	2301      	movs	r3, #1
 800d720:	61bb      	str	r3, [r7, #24]
        break;
 800d722:	e005      	b.n	800d730 <etharp_query+0x1d4>
      }
      p = p->next;
 800d724:	69fb      	ldr	r3, [r7, #28]
 800d726:	681b      	ldr	r3, [r3, #0]
 800d728:	61fb      	str	r3, [r7, #28]
    while (p) {
 800d72a:	69fb      	ldr	r3, [r7, #28]
 800d72c:	2b00      	cmp	r3, #0
 800d72e:	d1e1      	bne.n	800d6f4 <etharp_query+0x198>
    }
    if (copy_needed) {
 800d730:	69bb      	ldr	r3, [r7, #24]
 800d732:	2b00      	cmp	r3, #0
 800d734:	d017      	beq.n	800d766 <etharp_query+0x20a>
      /* copy the whole packet into new pbufs */
      p = pbuf_alloc(PBUF_LINK, p->tot_len, PBUF_RAM);
 800d736:	69fb      	ldr	r3, [r7, #28]
 800d738:	891b      	ldrh	r3, [r3, #8]
 800d73a:	2200      	movs	r2, #0
 800d73c:	4619      	mov	r1, r3
 800d73e:	2002      	movs	r0, #2
 800d740:	f7f9 fd86 	bl	8007250 <pbuf_alloc>
 800d744:	61f8      	str	r0, [r7, #28]
      if (p != NULL) {
 800d746:	69fb      	ldr	r3, [r7, #28]
 800d748:	2b00      	cmp	r3, #0
 800d74a:	d011      	beq.n	800d770 <etharp_query+0x214>
        if (pbuf_copy(p, q) != ERR_OK) {
 800d74c:	6879      	ldr	r1, [r7, #4]
 800d74e:	69f8      	ldr	r0, [r7, #28]
 800d750:	f7fa fa20 	bl	8007b94 <pbuf_copy>
 800d754:	4603      	mov	r3, r0
 800d756:	2b00      	cmp	r3, #0
 800d758:	d00a      	beq.n	800d770 <etharp_query+0x214>
          pbuf_free(p);
 800d75a:	69f8      	ldr	r0, [r7, #28]
 800d75c:	f7fa f8ea 	bl	8007934 <pbuf_free>
          p = NULL;
 800d760:	2300      	movs	r3, #0
 800d762:	61fb      	str	r3, [r7, #28]
 800d764:	e004      	b.n	800d770 <etharp_query+0x214>
        }
      }
    } else {
      /* referencing the old pbuf is enough */
      p = q;
 800d766:	687b      	ldr	r3, [r7, #4]
 800d768:	61fb      	str	r3, [r7, #28]
      pbuf_ref(p);
 800d76a:	69f8      	ldr	r0, [r7, #28]
 800d76c:	f7fa f994 	bl	8007a98 <pbuf_ref>
    }
    /* packet could be taken over? */
    if (p != NULL) {
 800d770:	69fb      	ldr	r3, [r7, #28]
 800d772:	2b00      	cmp	r3, #0
 800d774:	d024      	beq.n	800d7c0 <etharp_query+0x264>
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not queue a copy of PBUF_REF packet %p (out of memory)\n", (void *)q));
        result = ERR_MEM;
      }
#else /* ARP_QUEUEING */
      /* always queue one packet per ARP request only, freeing a previously queued packet */
      if (arp_table[i].q != NULL) {
 800d776:	f997 2013 	ldrsb.w	r2, [r7, #19]
 800d77a:	4916      	ldr	r1, [pc, #88]	; (800d7d4 <etharp_query+0x278>)
 800d77c:	4613      	mov	r3, r2
 800d77e:	005b      	lsls	r3, r3, #1
 800d780:	4413      	add	r3, r2
 800d782:	00db      	lsls	r3, r3, #3
 800d784:	440b      	add	r3, r1
 800d786:	681b      	ldr	r3, [r3, #0]
 800d788:	2b00      	cmp	r3, #0
 800d78a:	d00b      	beq.n	800d7a4 <etharp_query+0x248>
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: dropped previously queued packet %p for ARP entry %"S16_F"\n", (void *)q, (s16_t)i));
        pbuf_free(arp_table[i].q);
 800d78c:	f997 2013 	ldrsb.w	r2, [r7, #19]
 800d790:	4910      	ldr	r1, [pc, #64]	; (800d7d4 <etharp_query+0x278>)
 800d792:	4613      	mov	r3, r2
 800d794:	005b      	lsls	r3, r3, #1
 800d796:	4413      	add	r3, r2
 800d798:	00db      	lsls	r3, r3, #3
 800d79a:	440b      	add	r3, r1
 800d79c:	681b      	ldr	r3, [r3, #0]
 800d79e:	4618      	mov	r0, r3
 800d7a0:	f7fa f8c8 	bl	8007934 <pbuf_free>
      }
      arp_table[i].q = p;
 800d7a4:	f997 2013 	ldrsb.w	r2, [r7, #19]
 800d7a8:	490a      	ldr	r1, [pc, #40]	; (800d7d4 <etharp_query+0x278>)
 800d7aa:	4613      	mov	r3, r2
 800d7ac:	005b      	lsls	r3, r3, #1
 800d7ae:	4413      	add	r3, r2
 800d7b0:	00db      	lsls	r3, r3, #3
 800d7b2:	440b      	add	r3, r1
 800d7b4:	69fa      	ldr	r2, [r7, #28]
 800d7b6:	601a      	str	r2, [r3, #0]
      result = ERR_OK;
 800d7b8:	2300      	movs	r3, #0
 800d7ba:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800d7be:	e002      	b.n	800d7c6 <etharp_query+0x26a>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: queued packet %p on ARP entry %"S16_F"\n", (void *)q, (s16_t)i));
#endif /* ARP_QUEUEING */
    } else {
      ETHARP_STATS_INC(etharp.memerr);
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not queue a copy of PBUF_REF packet %p (out of memory)\n", (void *)q));
      result = ERR_MEM;
 800d7c0:	23ff      	movs	r3, #255	; 0xff
 800d7c2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }
  }
  return result;
 800d7c6:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 800d7ca:	4618      	mov	r0, r3
 800d7cc:	3728      	adds	r7, #40	; 0x28
 800d7ce:	46bd      	mov	sp, r7
 800d7d0:	bd80      	pop	{r7, pc}
 800d7d2:	bf00      	nop
 800d7d4:	24004080 	.word	0x24004080
 800d7d8:	080129fc 	.word	0x080129fc
 800d7dc:	08012ba8 	.word	0x08012ba8
 800d7e0:	08012a74 	.word	0x08012a74
 800d7e4:	08012b9c 	.word	0x08012b9c
 800d7e8:	24004170 	.word	0x24004170
 800d7ec:	08012bd0 	.word	0x08012bd0

0800d7f0 <etharp_raw>:
etharp_raw(struct netif *netif, const struct eth_addr *ethsrc_addr,
           const struct eth_addr *ethdst_addr,
           const struct eth_addr *hwsrc_addr, const ip4_addr_t *ipsrc_addr,
           const struct eth_addr *hwdst_addr, const ip4_addr_t *ipdst_addr,
           const u16_t opcode)
{
 800d7f0:	b580      	push	{r7, lr}
 800d7f2:	b08a      	sub	sp, #40	; 0x28
 800d7f4:	af02      	add	r7, sp, #8
 800d7f6:	60f8      	str	r0, [r7, #12]
 800d7f8:	60b9      	str	r1, [r7, #8]
 800d7fa:	607a      	str	r2, [r7, #4]
 800d7fc:	603b      	str	r3, [r7, #0]
  struct pbuf *p;
  err_t result = ERR_OK;
 800d7fe:	2300      	movs	r3, #0
 800d800:	77fb      	strb	r3, [r7, #31]
  struct etharp_hdr *hdr;

  LWIP_ASSERT("netif != NULL", netif != NULL);
 800d802:	68fb      	ldr	r3, [r7, #12]
 800d804:	2b00      	cmp	r3, #0
 800d806:	d106      	bne.n	800d816 <etharp_raw+0x26>
 800d808:	4b3a      	ldr	r3, [pc, #232]	; (800d8f4 <etharp_raw+0x104>)
 800d80a:	f44f 628b 	mov.w	r2, #1112	; 0x458
 800d80e:	493a      	ldr	r1, [pc, #232]	; (800d8f8 <etharp_raw+0x108>)
 800d810:	483a      	ldr	r0, [pc, #232]	; (800d8fc <etharp_raw+0x10c>)
 800d812:	f002 fe8d 	bl	8010530 <iprintf>

  /* allocate a pbuf for the outgoing ARP request packet */
  p = pbuf_alloc(PBUF_LINK, SIZEOF_ETHARP_HDR, PBUF_RAM);
 800d816:	2200      	movs	r2, #0
 800d818:	211c      	movs	r1, #28
 800d81a:	2002      	movs	r0, #2
 800d81c:	f7f9 fd18 	bl	8007250 <pbuf_alloc>
 800d820:	61b8      	str	r0, [r7, #24]
  /* could allocate a pbuf for an ARP request? */
  if (p == NULL) {
 800d822:	69bb      	ldr	r3, [r7, #24]
 800d824:	2b00      	cmp	r3, #0
 800d826:	d102      	bne.n	800d82e <etharp_raw+0x3e>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
      ("etharp_raw: could not allocate pbuf for ARP request.\n"));
    ETHARP_STATS_INC(etharp.memerr);
    return ERR_MEM;
 800d828:	f04f 33ff 	mov.w	r3, #4294967295
 800d82c:	e05d      	b.n	800d8ea <etharp_raw+0xfa>
  }
  LWIP_ASSERT("check that first pbuf can hold struct etharp_hdr",
 800d82e:	69bb      	ldr	r3, [r7, #24]
 800d830:	895b      	ldrh	r3, [r3, #10]
 800d832:	2b1b      	cmp	r3, #27
 800d834:	d806      	bhi.n	800d844 <etharp_raw+0x54>
 800d836:	4b2f      	ldr	r3, [pc, #188]	; (800d8f4 <etharp_raw+0x104>)
 800d838:	f240 4264 	movw	r2, #1124	; 0x464
 800d83c:	4930      	ldr	r1, [pc, #192]	; (800d900 <etharp_raw+0x110>)
 800d83e:	482f      	ldr	r0, [pc, #188]	; (800d8fc <etharp_raw+0x10c>)
 800d840:	f002 fe76 	bl	8010530 <iprintf>
              (p->len >= SIZEOF_ETHARP_HDR));

  hdr = (struct etharp_hdr *)p->payload;
 800d844:	69bb      	ldr	r3, [r7, #24]
 800d846:	685b      	ldr	r3, [r3, #4]
 800d848:	617b      	str	r3, [r7, #20]
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_raw: sending raw ARP packet.\n"));
  hdr->opcode = lwip_htons(opcode);
 800d84a:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 800d84c:	4618      	mov	r0, r3
 800d84e:	f7f8 fe45 	bl	80064dc <lwip_htons>
 800d852:	4603      	mov	r3, r0
 800d854:	461a      	mov	r2, r3
 800d856:	697b      	ldr	r3, [r7, #20]
 800d858:	80da      	strh	r2, [r3, #6]

  LWIP_ASSERT("netif->hwaddr_len must be the same as ETH_HWADDR_LEN for etharp!",
 800d85a:	68fb      	ldr	r3, [r7, #12]
 800d85c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800d860:	2b06      	cmp	r3, #6
 800d862:	d006      	beq.n	800d872 <etharp_raw+0x82>
 800d864:	4b23      	ldr	r3, [pc, #140]	; (800d8f4 <etharp_raw+0x104>)
 800d866:	f240 426b 	movw	r2, #1131	; 0x46b
 800d86a:	4926      	ldr	r1, [pc, #152]	; (800d904 <etharp_raw+0x114>)
 800d86c:	4823      	ldr	r0, [pc, #140]	; (800d8fc <etharp_raw+0x10c>)
 800d86e:	f002 fe5f 	bl	8010530 <iprintf>
              (netif->hwaddr_len == ETH_HWADDR_LEN));

  /* Write the ARP MAC-Addresses */
  ETHADDR16_COPY(&hdr->shwaddr, hwsrc_addr);
 800d872:	697b      	ldr	r3, [r7, #20]
 800d874:	3308      	adds	r3, #8
 800d876:	2206      	movs	r2, #6
 800d878:	6839      	ldr	r1, [r7, #0]
 800d87a:	4618      	mov	r0, r3
 800d87c:	f002 fe45 	bl	801050a <memcpy>
  ETHADDR16_COPY(&hdr->dhwaddr, hwdst_addr);
 800d880:	697b      	ldr	r3, [r7, #20]
 800d882:	3312      	adds	r3, #18
 800d884:	2206      	movs	r2, #6
 800d886:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800d888:	4618      	mov	r0, r3
 800d88a:	f002 fe3e 	bl	801050a <memcpy>
  /* Copy struct ip4_addr2 to aligned ip4_addr, to support compilers without
   * structure packing. */
  IPADDR2_COPY(&hdr->sipaddr, ipsrc_addr);
 800d88e:	697b      	ldr	r3, [r7, #20]
 800d890:	330e      	adds	r3, #14
 800d892:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800d894:	6812      	ldr	r2, [r2, #0]
 800d896:	601a      	str	r2, [r3, #0]
  IPADDR2_COPY(&hdr->dipaddr, ipdst_addr);
 800d898:	697b      	ldr	r3, [r7, #20]
 800d89a:	3318      	adds	r3, #24
 800d89c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800d89e:	6812      	ldr	r2, [r2, #0]
 800d8a0:	601a      	str	r2, [r3, #0]

  hdr->hwtype = PP_HTONS(HWTYPE_ETHERNET);
 800d8a2:	697b      	ldr	r3, [r7, #20]
 800d8a4:	2200      	movs	r2, #0
 800d8a6:	701a      	strb	r2, [r3, #0]
 800d8a8:	2200      	movs	r2, #0
 800d8aa:	f042 0201 	orr.w	r2, r2, #1
 800d8ae:	705a      	strb	r2, [r3, #1]
  hdr->proto = PP_HTONS(ETHTYPE_IP);
 800d8b0:	697b      	ldr	r3, [r7, #20]
 800d8b2:	2200      	movs	r2, #0
 800d8b4:	f042 0208 	orr.w	r2, r2, #8
 800d8b8:	709a      	strb	r2, [r3, #2]
 800d8ba:	2200      	movs	r2, #0
 800d8bc:	70da      	strb	r2, [r3, #3]
  /* set hwlen and protolen */
  hdr->hwlen = ETH_HWADDR_LEN;
 800d8be:	697b      	ldr	r3, [r7, #20]
 800d8c0:	2206      	movs	r2, #6
 800d8c2:	711a      	strb	r2, [r3, #4]
  hdr->protolen = sizeof(ip4_addr_t);
 800d8c4:	697b      	ldr	r3, [r7, #20]
 800d8c6:	2204      	movs	r2, #4
 800d8c8:	715a      	strb	r2, [r3, #5]
  if(ip4_addr_islinklocal(ipsrc_addr)) {
    ethernet_output(netif, p, ethsrc_addr, &ethbroadcast, ETHTYPE_ARP);
  } else
#endif /* LWIP_AUTOIP */
  {
    ethernet_output(netif, p, ethsrc_addr, ethdst_addr, ETHTYPE_ARP);
 800d8ca:	f640 0306 	movw	r3, #2054	; 0x806
 800d8ce:	9300      	str	r3, [sp, #0]
 800d8d0:	687b      	ldr	r3, [r7, #4]
 800d8d2:	68ba      	ldr	r2, [r7, #8]
 800d8d4:	69b9      	ldr	r1, [r7, #24]
 800d8d6:	68f8      	ldr	r0, [r7, #12]
 800d8d8:	f001 faf4 	bl	800eec4 <ethernet_output>
  }

  ETHARP_STATS_INC(etharp.xmit);
  /* free ARP query packet */
  pbuf_free(p);
 800d8dc:	69b8      	ldr	r0, [r7, #24]
 800d8de:	f7fa f829 	bl	8007934 <pbuf_free>
  p = NULL;
 800d8e2:	2300      	movs	r3, #0
 800d8e4:	61bb      	str	r3, [r7, #24]
  /* could not allocate pbuf for ARP request */

  return result;
 800d8e6:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 800d8ea:	4618      	mov	r0, r3
 800d8ec:	3720      	adds	r7, #32
 800d8ee:	46bd      	mov	sp, r7
 800d8f0:	bd80      	pop	{r7, pc}
 800d8f2:	bf00      	nop
 800d8f4:	080129fc 	.word	0x080129fc
 800d8f8:	08012b4c 	.word	0x08012b4c
 800d8fc:	08012a74 	.word	0x08012a74
 800d900:	08012bec 	.word	0x08012bec
 800d904:	08012c20 	.word	0x08012c20

0800d908 <etharp_request_dst>:
 *         ERR_MEM if the ARP packet couldn't be allocated
 *         any other err_t on failure
 */
static err_t
etharp_request_dst(struct netif *netif, const ip4_addr_t *ipaddr, const struct eth_addr* hw_dst_addr)
{
 800d908:	b580      	push	{r7, lr}
 800d90a:	b088      	sub	sp, #32
 800d90c:	af04      	add	r7, sp, #16
 800d90e:	60f8      	str	r0, [r7, #12]
 800d910:	60b9      	str	r1, [r7, #8]
 800d912:	607a      	str	r2, [r7, #4]
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 800d914:	68fb      	ldr	r3, [r7, #12]
 800d916:	f103 0129 	add.w	r1, r3, #41	; 0x29
                    (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif), &ethzero,
 800d91a:	68fb      	ldr	r3, [r7, #12]
 800d91c:	f103 0029 	add.w	r0, r3, #41	; 0x29
 800d920:	68fb      	ldr	r3, [r7, #12]
 800d922:	3304      	adds	r3, #4
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 800d924:	2201      	movs	r2, #1
 800d926:	9203      	str	r2, [sp, #12]
 800d928:	68ba      	ldr	r2, [r7, #8]
 800d92a:	9202      	str	r2, [sp, #8]
 800d92c:	4a06      	ldr	r2, [pc, #24]	; (800d948 <etharp_request_dst+0x40>)
 800d92e:	9201      	str	r2, [sp, #4]
 800d930:	9300      	str	r3, [sp, #0]
 800d932:	4603      	mov	r3, r0
 800d934:	687a      	ldr	r2, [r7, #4]
 800d936:	68f8      	ldr	r0, [r7, #12]
 800d938:	f7ff ff5a 	bl	800d7f0 <etharp_raw>
 800d93c:	4603      	mov	r3, r0
                    ipaddr, ARP_REQUEST);
}
 800d93e:	4618      	mov	r0, r3
 800d940:	3710      	adds	r7, #16
 800d942:	46bd      	mov	sp, r7
 800d944:	bd80      	pop	{r7, pc}
 800d946:	bf00      	nop
 800d948:	08013208 	.word	0x08013208

0800d94c <etharp_request>:
 *         ERR_MEM if the ARP packet couldn't be allocated
 *         any other err_t on failure
 */
err_t
etharp_request(struct netif *netif, const ip4_addr_t *ipaddr)
{
 800d94c:	b580      	push	{r7, lr}
 800d94e:	b082      	sub	sp, #8
 800d950:	af00      	add	r7, sp, #0
 800d952:	6078      	str	r0, [r7, #4]
 800d954:	6039      	str	r1, [r7, #0]
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_request: sending ARP request.\n"));
  return etharp_request_dst(netif, ipaddr, &ethbroadcast);
 800d956:	4a05      	ldr	r2, [pc, #20]	; (800d96c <etharp_request+0x20>)
 800d958:	6839      	ldr	r1, [r7, #0]
 800d95a:	6878      	ldr	r0, [r7, #4]
 800d95c:	f7ff ffd4 	bl	800d908 <etharp_request_dst>
 800d960:	4603      	mov	r3, r0
}
 800d962:	4618      	mov	r0, r3
 800d964:	3708      	adds	r7, #8
 800d966:	46bd      	mov	sp, r7
 800d968:	bd80      	pop	{r7, pc}
 800d96a:	bf00      	nop
 800d96c:	08013200 	.word	0x08013200

0800d970 <icmp_input>:
 * @param p the icmp echo request packet, p->payload pointing to the icmp header
 * @param inp the netif on which this packet was received
 */
void
icmp_input(struct pbuf *p, struct netif *inp)
{
 800d970:	b580      	push	{r7, lr}
 800d972:	b08e      	sub	sp, #56	; 0x38
 800d974:	af04      	add	r7, sp, #16
 800d976:	6078      	str	r0, [r7, #4]
 800d978:	6039      	str	r1, [r7, #0]
  const ip4_addr_t* src;

  ICMP_STATS_INC(icmp.recv);
  MIB2_STATS_INC(mib2.icmpinmsgs);

  iphdr_in = ip4_current_header();
 800d97a:	4b7a      	ldr	r3, [pc, #488]	; (800db64 <icmp_input+0x1f4>)
 800d97c:	689b      	ldr	r3, [r3, #8]
 800d97e:	627b      	str	r3, [r7, #36]	; 0x24
  hlen = IPH_HL(iphdr_in) * 4;
 800d980:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d982:	781b      	ldrb	r3, [r3, #0]
 800d984:	b29b      	uxth	r3, r3
 800d986:	f003 030f 	and.w	r3, r3, #15
 800d98a:	b29b      	uxth	r3, r3
 800d98c:	009b      	lsls	r3, r3, #2
 800d98e:	847b      	strh	r3, [r7, #34]	; 0x22
  if (hlen < IP_HLEN) {
 800d990:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800d992:	2b13      	cmp	r3, #19
 800d994:	f240 80d1 	bls.w	800db3a <icmp_input+0x1ca>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: short IP header (%"S16_F" bytes) received\n", hlen));
    goto lenerr;
  }
  if (p->len < sizeof(u16_t)*2) {
 800d998:	687b      	ldr	r3, [r7, #4]
 800d99a:	895b      	ldrh	r3, [r3, #10]
 800d99c:	2b03      	cmp	r3, #3
 800d99e:	f240 80ce 	bls.w	800db3e <icmp_input+0x1ce>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: short ICMP (%"U16_F" bytes) received\n", p->tot_len));
    goto lenerr;
  }

  type = *((u8_t *)p->payload);
 800d9a2:	687b      	ldr	r3, [r7, #4]
 800d9a4:	685b      	ldr	r3, [r3, #4]
 800d9a6:	781b      	ldrb	r3, [r3, #0]
 800d9a8:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
#ifdef LWIP_DEBUG
  code = *(((u8_t *)p->payload)+1);
#endif /* LWIP_DEBUG */
  switch (type) {
 800d9ac:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 800d9b0:	2b00      	cmp	r3, #0
 800d9b2:	f000 80bb 	beq.w	800db2c <icmp_input+0x1bc>
 800d9b6:	2b08      	cmp	r3, #8
 800d9b8:	f040 80bb 	bne.w	800db32 <icmp_input+0x1c2>
       (as obviously, an echo request has been sent, too). */
    MIB2_STATS_INC(mib2.icmpinechoreps);
    break;
  case ICMP_ECHO:
    MIB2_STATS_INC(mib2.icmpinechos);
    src = ip4_current_dest_addr();
 800d9bc:	4b6a      	ldr	r3, [pc, #424]	; (800db68 <icmp_input+0x1f8>)
 800d9be:	61fb      	str	r3, [r7, #28]
    /* multicast destination address? */
    if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 800d9c0:	4b68      	ldr	r3, [pc, #416]	; (800db64 <icmp_input+0x1f4>)
 800d9c2:	695b      	ldr	r3, [r3, #20]
 800d9c4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800d9c8:	2be0      	cmp	r3, #224	; 0xe0
 800d9ca:	f000 80bf 	beq.w	800db4c <icmp_input+0x1dc>
      LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: Not echoing to multicast pings\n"));
      goto icmperr;
#endif /* LWIP_MULTICAST_PING */
    }
    /* broadcast destination address? */
    if (ip4_addr_isbroadcast(ip4_current_dest_addr(), ip_current_netif())) {
 800d9ce:	4b65      	ldr	r3, [pc, #404]	; (800db64 <icmp_input+0x1f4>)
 800d9d0:	695a      	ldr	r2, [r3, #20]
 800d9d2:	4b64      	ldr	r3, [pc, #400]	; (800db64 <icmp_input+0x1f4>)
 800d9d4:	681b      	ldr	r3, [r3, #0]
 800d9d6:	4619      	mov	r1, r3
 800d9d8:	4610      	mov	r0, r2
 800d9da:	f000 fbd1 	bl	800e180 <ip4_addr_isbroadcast_u32>
 800d9de:	4603      	mov	r3, r0
 800d9e0:	2b00      	cmp	r3, #0
 800d9e2:	f040 80b5 	bne.w	800db50 <icmp_input+0x1e0>
      LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: Not echoing to broadcast pings\n"));
      goto icmperr;
#endif /* LWIP_BROADCAST_PING */
    }
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ping\n"));
    if (p->tot_len < sizeof(struct icmp_echo_hdr)) {
 800d9e6:	687b      	ldr	r3, [r7, #4]
 800d9e8:	891b      	ldrh	r3, [r3, #8]
 800d9ea:	2b07      	cmp	r3, #7
 800d9ec:	f240 80a9 	bls.w	800db42 <icmp_input+0x1d2>
        return;
      }
    }
#endif
#if LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN
    if (pbuf_header(p, (s16_t)(hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN))) {
 800d9f0:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800d9f2:	330e      	adds	r3, #14
 800d9f4:	b29b      	uxth	r3, r3
 800d9f6:	b21b      	sxth	r3, r3
 800d9f8:	4619      	mov	r1, r3
 800d9fa:	6878      	ldr	r0, [r7, #4]
 800d9fc:	f7f9 ff76 	bl	80078ec <pbuf_header>
 800da00:	4603      	mov	r3, r0
 800da02:	2b00      	cmp	r3, #0
 800da04:	d046      	beq.n	800da94 <icmp_input+0x124>
      /* p is not big enough to contain link headers
       * allocate a new one and copy p into it
       */
      struct pbuf *r;
      /* allocate new packet buffer with space for link headers */
      r = pbuf_alloc(PBUF_LINK, p->tot_len + hlen, PBUF_RAM);
 800da06:	687b      	ldr	r3, [r7, #4]
 800da08:	891a      	ldrh	r2, [r3, #8]
 800da0a:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800da0c:	4413      	add	r3, r2
 800da0e:	b29b      	uxth	r3, r3
 800da10:	2200      	movs	r2, #0
 800da12:	4619      	mov	r1, r3
 800da14:	2002      	movs	r0, #2
 800da16:	f7f9 fc1b 	bl	8007250 <pbuf_alloc>
 800da1a:	61b8      	str	r0, [r7, #24]
      if (r == NULL) {
 800da1c:	69bb      	ldr	r3, [r7, #24]
 800da1e:	2b00      	cmp	r3, #0
 800da20:	f000 8098 	beq.w	800db54 <icmp_input+0x1e4>
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: allocating new pbuf failed\n"));
        goto icmperr;
      }
      if (r->len < hlen + sizeof(struct icmp_echo_hdr)) {
 800da24:	69bb      	ldr	r3, [r7, #24]
 800da26:	895b      	ldrh	r3, [r3, #10]
 800da28:	461a      	mov	r2, r3
 800da2a:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800da2c:	3308      	adds	r3, #8
 800da2e:	429a      	cmp	r2, r3
 800da30:	d203      	bcs.n	800da3a <icmp_input+0xca>
        LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("first pbuf cannot hold the ICMP header"));
        pbuf_free(r);
 800da32:	69b8      	ldr	r0, [r7, #24]
 800da34:	f7f9 ff7e 	bl	8007934 <pbuf_free>
        goto icmperr;
 800da38:	e08d      	b.n	800db56 <icmp_input+0x1e6>
      }
      /* copy the ip header */
      MEMCPY(r->payload, iphdr_in, hlen);
 800da3a:	69bb      	ldr	r3, [r7, #24]
 800da3c:	685b      	ldr	r3, [r3, #4]
 800da3e:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 800da40:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800da42:	4618      	mov	r0, r3
 800da44:	f002 fd61 	bl	801050a <memcpy>
      /* switch r->payload back to icmp header (cannot fail) */
      if (pbuf_header(r, (s16_t)-hlen)) {
 800da48:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800da4a:	425b      	negs	r3, r3
 800da4c:	b29b      	uxth	r3, r3
 800da4e:	b21b      	sxth	r3, r3
 800da50:	4619      	mov	r1, r3
 800da52:	69b8      	ldr	r0, [r7, #24]
 800da54:	f7f9 ff4a 	bl	80078ec <pbuf_header>
 800da58:	4603      	mov	r3, r0
 800da5a:	2b00      	cmp	r3, #0
 800da5c:	d009      	beq.n	800da72 <icmp_input+0x102>
        LWIP_ASSERT("icmp_input: moving r->payload to icmp header failed\n", 0);
 800da5e:	4b43      	ldr	r3, [pc, #268]	; (800db6c <icmp_input+0x1fc>)
 800da60:	22af      	movs	r2, #175	; 0xaf
 800da62:	4943      	ldr	r1, [pc, #268]	; (800db70 <icmp_input+0x200>)
 800da64:	4843      	ldr	r0, [pc, #268]	; (800db74 <icmp_input+0x204>)
 800da66:	f002 fd63 	bl	8010530 <iprintf>
        pbuf_free(r);
 800da6a:	69b8      	ldr	r0, [r7, #24]
 800da6c:	f7f9 ff62 	bl	8007934 <pbuf_free>
        goto icmperr;
 800da70:	e071      	b.n	800db56 <icmp_input+0x1e6>
      }
      /* copy the rest of the packet without ip header */
      if (pbuf_copy(r, p) != ERR_OK) {
 800da72:	6879      	ldr	r1, [r7, #4]
 800da74:	69b8      	ldr	r0, [r7, #24]
 800da76:	f7fa f88d 	bl	8007b94 <pbuf_copy>
 800da7a:	4603      	mov	r3, r0
 800da7c:	2b00      	cmp	r3, #0
 800da7e:	d003      	beq.n	800da88 <icmp_input+0x118>
        LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("icmp_input: copying to new pbuf failed"));
        pbuf_free(r);
 800da80:	69b8      	ldr	r0, [r7, #24]
 800da82:	f7f9 ff57 	bl	8007934 <pbuf_free>
        goto icmperr;
 800da86:	e066      	b.n	800db56 <icmp_input+0x1e6>
      }
      /* free the original p */
      pbuf_free(p);
 800da88:	6878      	ldr	r0, [r7, #4]
 800da8a:	f7f9 ff53 	bl	8007934 <pbuf_free>
      /* we now have an identical copy of p that has room for link headers */
      p = r;
 800da8e:	69bb      	ldr	r3, [r7, #24]
 800da90:	607b      	str	r3, [r7, #4]
 800da92:	e015      	b.n	800dac0 <icmp_input+0x150>
    } else {
      /* restore p->payload to point to icmp header (cannot fail) */
      if (pbuf_header(p, -(s16_t)(hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN))) {
 800da94:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800da96:	f1c3 23ff 	rsb	r3, r3, #4278255360	; 0xff00ff00
 800da9a:	f503 037f 	add.w	r3, r3, #16711680	; 0xff0000
 800da9e:	33f2      	adds	r3, #242	; 0xf2
 800daa0:	b29b      	uxth	r3, r3
 800daa2:	b21b      	sxth	r3, r3
 800daa4:	4619      	mov	r1, r3
 800daa6:	6878      	ldr	r0, [r7, #4]
 800daa8:	f7f9 ff20 	bl	80078ec <pbuf_header>
 800daac:	4603      	mov	r3, r0
 800daae:	2b00      	cmp	r3, #0
 800dab0:	d006      	beq.n	800dac0 <icmp_input+0x150>
        LWIP_ASSERT("icmp_input: restoring original p->payload failed\n", 0);
 800dab2:	4b2e      	ldr	r3, [pc, #184]	; (800db6c <icmp_input+0x1fc>)
 800dab4:	22c0      	movs	r2, #192	; 0xc0
 800dab6:	4930      	ldr	r1, [pc, #192]	; (800db78 <icmp_input+0x208>)
 800dab8:	482e      	ldr	r0, [pc, #184]	; (800db74 <icmp_input+0x204>)
 800daba:	f002 fd39 	bl	8010530 <iprintf>
        goto icmperr;
 800dabe:	e04a      	b.n	800db56 <icmp_input+0x1e6>
    }
#endif /* LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN */
    /* At this point, all checks are OK. */
    /* We generate an answer by switching the dest and src ip addresses,
     * setting the icmp type to ECHO_RESPONSE and updating the checksum. */
    iecho = (struct icmp_echo_hdr *)p->payload;
 800dac0:	687b      	ldr	r3, [r7, #4]
 800dac2:	685b      	ldr	r3, [r3, #4]
 800dac4:	617b      	str	r3, [r7, #20]
    if (pbuf_header(p, (s16_t)hlen)) {
 800dac6:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 800daca:	4619      	mov	r1, r3
 800dacc:	6878      	ldr	r0, [r7, #4]
 800dace:	f7f9 ff0d 	bl	80078ec <pbuf_header>
 800dad2:	4603      	mov	r3, r0
 800dad4:	2b00      	cmp	r3, #0
 800dad6:	d12b      	bne.n	800db30 <icmp_input+0x1c0>
      LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("Can't move over header in packet"));
    } else {
      err_t ret;
      struct ip_hdr *iphdr = (struct ip_hdr*)p->payload;
 800dad8:	687b      	ldr	r3, [r7, #4]
 800dada:	685b      	ldr	r3, [r3, #4]
 800dadc:	613b      	str	r3, [r7, #16]
      ip4_addr_copy(iphdr->src, *src);
 800dade:	69fb      	ldr	r3, [r7, #28]
 800dae0:	681a      	ldr	r2, [r3, #0]
 800dae2:	693b      	ldr	r3, [r7, #16]
 800dae4:	60da      	str	r2, [r3, #12]
      ip4_addr_copy(iphdr->dest, *ip4_current_src_addr());
 800dae6:	4b1f      	ldr	r3, [pc, #124]	; (800db64 <icmp_input+0x1f4>)
 800dae8:	691a      	ldr	r2, [r3, #16]
 800daea:	693b      	ldr	r3, [r7, #16]
 800daec:	611a      	str	r2, [r3, #16]
      ICMPH_TYPE_SET(iecho, ICMP_ER);
 800daee:	697b      	ldr	r3, [r7, #20]
 800daf0:	2200      	movs	r2, #0
 800daf2:	701a      	strb	r2, [r3, #0]
      else {
        iecho->chksum = 0;
      }
#endif /* LWIP_CHECKSUM_CTRL_PER_NETIF */
#else /* CHECKSUM_GEN_ICMP */
      iecho->chksum = 0;
 800daf4:	697b      	ldr	r3, [r7, #20]
 800daf6:	2200      	movs	r2, #0
 800daf8:	709a      	strb	r2, [r3, #2]
 800dafa:	2200      	movs	r2, #0
 800dafc:	70da      	strb	r2, [r3, #3]
#endif /* CHECKSUM_GEN_ICMP */

      /* Set the correct TTL and recalculate the header checksum. */
      IPH_TTL_SET(iphdr, ICMP_TTL);
 800dafe:	693b      	ldr	r3, [r7, #16]
 800db00:	22ff      	movs	r2, #255	; 0xff
 800db02:	721a      	strb	r2, [r3, #8]
      IPH_CHKSUM_SET(iphdr, 0);
 800db04:	693b      	ldr	r3, [r7, #16]
 800db06:	2200      	movs	r2, #0
 800db08:	729a      	strb	r2, [r3, #10]
 800db0a:	2200      	movs	r2, #0
 800db0c:	72da      	strb	r2, [r3, #11]
      MIB2_STATS_INC(mib2.icmpoutmsgs);
      /* increase number of echo replies attempted to send */
      MIB2_STATS_INC(mib2.icmpoutechoreps);

      /* send an ICMP packet */
      ret = ip4_output_if(p, src, LWIP_IP_HDRINCL,
 800db0e:	683b      	ldr	r3, [r7, #0]
 800db10:	9302      	str	r3, [sp, #8]
 800db12:	2301      	movs	r3, #1
 800db14:	9301      	str	r3, [sp, #4]
 800db16:	2300      	movs	r3, #0
 800db18:	9300      	str	r3, [sp, #0]
 800db1a:	23ff      	movs	r3, #255	; 0xff
 800db1c:	2200      	movs	r2, #0
 800db1e:	69f9      	ldr	r1, [r7, #28]
 800db20:	6878      	ldr	r0, [r7, #4]
 800db22:	f000 fa5b 	bl	800dfdc <ip4_output_if>
 800db26:	4603      	mov	r3, r0
 800db28:	73fb      	strb	r3, [r7, #15]
                   ICMP_TTL, 0, IP_PROTO_ICMP, inp);
      if (ret != ERR_OK) {
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ip_output_if returned an error: %s\n", lwip_strerr(ret)));
      }
    }
    break;
 800db2a:	e001      	b.n	800db30 <icmp_input+0x1c0>
    break;
 800db2c:	bf00      	nop
 800db2e:	e000      	b.n	800db32 <icmp_input+0x1c2>
    break;
 800db30:	bf00      	nop
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ICMP type %"S16_F" code %"S16_F" not supported.\n",
                (s16_t)type, (s16_t)code));
    ICMP_STATS_INC(icmp.proterr);
    ICMP_STATS_INC(icmp.drop);
  }
  pbuf_free(p);
 800db32:	6878      	ldr	r0, [r7, #4]
 800db34:	f7f9 fefe 	bl	8007934 <pbuf_free>
  return;
 800db38:	e011      	b.n	800db5e <icmp_input+0x1ee>
    goto lenerr;
 800db3a:	bf00      	nop
 800db3c:	e002      	b.n	800db44 <icmp_input+0x1d4>
    goto lenerr;
 800db3e:	bf00      	nop
 800db40:	e000      	b.n	800db44 <icmp_input+0x1d4>
      goto lenerr;
 800db42:	bf00      	nop
lenerr:
  pbuf_free(p);
 800db44:	6878      	ldr	r0, [r7, #4]
 800db46:	f7f9 fef5 	bl	8007934 <pbuf_free>
  ICMP_STATS_INC(icmp.lenerr);
  MIB2_STATS_INC(mib2.icmpinerrors);
  return;
 800db4a:	e008      	b.n	800db5e <icmp_input+0x1ee>
      goto icmperr;
 800db4c:	bf00      	nop
 800db4e:	e002      	b.n	800db56 <icmp_input+0x1e6>
      goto icmperr;
 800db50:	bf00      	nop
 800db52:	e000      	b.n	800db56 <icmp_input+0x1e6>
        goto icmperr;
 800db54:	bf00      	nop
#if LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN || !LWIP_MULTICAST_PING || !LWIP_BROADCAST_PING
icmperr:
  pbuf_free(p);
 800db56:	6878      	ldr	r0, [r7, #4]
 800db58:	f7f9 feec 	bl	8007934 <pbuf_free>
  ICMP_STATS_INC(icmp.err);
  MIB2_STATS_INC(mib2.icmpinerrors);
  return;
 800db5c:	bf00      	nop
#endif /* LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN || !LWIP_MULTICAST_PING || !LWIP_BROADCAST_PING */
}
 800db5e:	3728      	adds	r7, #40	; 0x28
 800db60:	46bd      	mov	sp, r7
 800db62:	bd80      	pop	{r7, pc}
 800db64:	2400419c 	.word	0x2400419c
 800db68:	240041b0 	.word	0x240041b0
 800db6c:	08012c64 	.word	0x08012c64
 800db70:	08012c9c 	.word	0x08012c9c
 800db74:	08012cd4 	.word	0x08012cd4
 800db78:	08012cfc 	.word	0x08012cfc

0800db7c <icmp_dest_unreach>:
 *          p->payload pointing to the IP header
 * @param t type of the 'unreachable' packet
 */
void
icmp_dest_unreach(struct pbuf *p, enum icmp_dur_type t)
{
 800db7c:	b580      	push	{r7, lr}
 800db7e:	b082      	sub	sp, #8
 800db80:	af00      	add	r7, sp, #0
 800db82:	6078      	str	r0, [r7, #4]
 800db84:	460b      	mov	r3, r1
 800db86:	70fb      	strb	r3, [r7, #3]
  MIB2_STATS_INC(mib2.icmpoutdestunreachs);
  icmp_send_response(p, ICMP_DUR, t);
 800db88:	78fb      	ldrb	r3, [r7, #3]
 800db8a:	461a      	mov	r2, r3
 800db8c:	2103      	movs	r1, #3
 800db8e:	6878      	ldr	r0, [r7, #4]
 800db90:	f000 f814 	bl	800dbbc <icmp_send_response>
}
 800db94:	bf00      	nop
 800db96:	3708      	adds	r7, #8
 800db98:	46bd      	mov	sp, r7
 800db9a:	bd80      	pop	{r7, pc}

0800db9c <icmp_time_exceeded>:
 *          p->payload pointing to the IP header
 * @param t type of the 'time exceeded' packet
 */
void
icmp_time_exceeded(struct pbuf *p, enum icmp_te_type t)
{
 800db9c:	b580      	push	{r7, lr}
 800db9e:	b082      	sub	sp, #8
 800dba0:	af00      	add	r7, sp, #0
 800dba2:	6078      	str	r0, [r7, #4]
 800dba4:	460b      	mov	r3, r1
 800dba6:	70fb      	strb	r3, [r7, #3]
  MIB2_STATS_INC(mib2.icmpouttimeexcds);
  icmp_send_response(p, ICMP_TE, t);
 800dba8:	78fb      	ldrb	r3, [r7, #3]
 800dbaa:	461a      	mov	r2, r3
 800dbac:	210b      	movs	r1, #11
 800dbae:	6878      	ldr	r0, [r7, #4]
 800dbb0:	f000 f804 	bl	800dbbc <icmp_send_response>
}
 800dbb4:	bf00      	nop
 800dbb6:	3708      	adds	r7, #8
 800dbb8:	46bd      	mov	sp, r7
 800dbba:	bd80      	pop	{r7, pc}

0800dbbc <icmp_send_response>:
 * @param type Type of the ICMP header
 * @param code Code of the ICMP header
 */
static void
icmp_send_response(struct pbuf *p, u8_t type, u8_t code)
{
 800dbbc:	b580      	push	{r7, lr}
 800dbbe:	b08c      	sub	sp, #48	; 0x30
 800dbc0:	af04      	add	r7, sp, #16
 800dbc2:	6078      	str	r0, [r7, #4]
 800dbc4:	460b      	mov	r3, r1
 800dbc6:	70fb      	strb	r3, [r7, #3]
 800dbc8:	4613      	mov	r3, r2
 800dbca:	70bb      	strb	r3, [r7, #2]

  /* increase number of messages attempted to send */
  MIB2_STATS_INC(mib2.icmpoutmsgs);

  /* ICMP header + IP header + 8 bytes of data */
  q = pbuf_alloc(PBUF_IP, sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE,
 800dbcc:	2200      	movs	r2, #0
 800dbce:	2124      	movs	r1, #36	; 0x24
 800dbd0:	2001      	movs	r0, #1
 800dbd2:	f7f9 fb3d 	bl	8007250 <pbuf_alloc>
 800dbd6:	61f8      	str	r0, [r7, #28]
                 PBUF_RAM);
  if (q == NULL) {
 800dbd8:	69fb      	ldr	r3, [r7, #28]
 800dbda:	2b00      	cmp	r3, #0
 800dbdc:	d04c      	beq.n	800dc78 <icmp_send_response+0xbc>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_time_exceeded: failed to allocate pbuf for ICMP packet.\n"));
    MIB2_STATS_INC(mib2.icmpouterrors);
    return;
  }
  LWIP_ASSERT("check that first pbuf can hold icmp message",
 800dbde:	69fb      	ldr	r3, [r7, #28]
 800dbe0:	895b      	ldrh	r3, [r3, #10]
 800dbe2:	2b23      	cmp	r3, #35	; 0x23
 800dbe4:	d806      	bhi.n	800dbf4 <icmp_send_response+0x38>
 800dbe6:	4b26      	ldr	r3, [pc, #152]	; (800dc80 <icmp_send_response+0xc4>)
 800dbe8:	f44f 72b1 	mov.w	r2, #354	; 0x162
 800dbec:	4925      	ldr	r1, [pc, #148]	; (800dc84 <icmp_send_response+0xc8>)
 800dbee:	4826      	ldr	r0, [pc, #152]	; (800dc88 <icmp_send_response+0xcc>)
 800dbf0:	f002 fc9e 	bl	8010530 <iprintf>
             (q->len >= (sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE)));

  iphdr = (struct ip_hdr *)p->payload;
 800dbf4:	687b      	ldr	r3, [r7, #4]
 800dbf6:	685b      	ldr	r3, [r3, #4]
 800dbf8:	61bb      	str	r3, [r7, #24]
  ip4_addr_debug_print_val(ICMP_DEBUG, iphdr->src);
  LWIP_DEBUGF(ICMP_DEBUG, (" to "));
  ip4_addr_debug_print_val(ICMP_DEBUG, iphdr->dest);
  LWIP_DEBUGF(ICMP_DEBUG, ("\n"));

  icmphdr = (struct icmp_echo_hdr *)q->payload;
 800dbfa:	69fb      	ldr	r3, [r7, #28]
 800dbfc:	685b      	ldr	r3, [r3, #4]
 800dbfe:	617b      	str	r3, [r7, #20]
  icmphdr->type = type;
 800dc00:	697b      	ldr	r3, [r7, #20]
 800dc02:	78fa      	ldrb	r2, [r7, #3]
 800dc04:	701a      	strb	r2, [r3, #0]
  icmphdr->code = code;
 800dc06:	697b      	ldr	r3, [r7, #20]
 800dc08:	78ba      	ldrb	r2, [r7, #2]
 800dc0a:	705a      	strb	r2, [r3, #1]
  icmphdr->id = 0;
 800dc0c:	697b      	ldr	r3, [r7, #20]
 800dc0e:	2200      	movs	r2, #0
 800dc10:	711a      	strb	r2, [r3, #4]
 800dc12:	2200      	movs	r2, #0
 800dc14:	715a      	strb	r2, [r3, #5]
  icmphdr->seqno = 0;
 800dc16:	697b      	ldr	r3, [r7, #20]
 800dc18:	2200      	movs	r2, #0
 800dc1a:	719a      	strb	r2, [r3, #6]
 800dc1c:	2200      	movs	r2, #0
 800dc1e:	71da      	strb	r2, [r3, #7]

  /* copy fields from original packet */
  SMEMCPY((u8_t *)q->payload + sizeof(struct icmp_echo_hdr), (u8_t *)p->payload,
 800dc20:	69fb      	ldr	r3, [r7, #28]
 800dc22:	685b      	ldr	r3, [r3, #4]
 800dc24:	f103 0008 	add.w	r0, r3, #8
 800dc28:	687b      	ldr	r3, [r7, #4]
 800dc2a:	685b      	ldr	r3, [r3, #4]
 800dc2c:	221c      	movs	r2, #28
 800dc2e:	4619      	mov	r1, r3
 800dc30:	f002 fc6b 	bl	801050a <memcpy>
          IP_HLEN + ICMP_DEST_UNREACH_DATASIZE);

  ip4_addr_copy(iphdr_src, iphdr->src);
 800dc34:	69bb      	ldr	r3, [r7, #24]
 800dc36:	68db      	ldr	r3, [r3, #12]
 800dc38:	60fb      	str	r3, [r7, #12]
    ip4_addr_t iphdr_dst;
    ip4_addr_copy(iphdr_dst, iphdr->dest);
    netif = ip4_route_src(&iphdr_src, &iphdr_dst);
  }
#else
  netif = ip4_route(&iphdr_src);
 800dc3a:	f107 030c 	add.w	r3, r7, #12
 800dc3e:	4618      	mov	r0, r3
 800dc40:	f000 f824 	bl	800dc8c <ip4_route>
 800dc44:	6138      	str	r0, [r7, #16]
#endif
  if (netif != NULL) {
 800dc46:	693b      	ldr	r3, [r7, #16]
 800dc48:	2b00      	cmp	r3, #0
 800dc4a:	d011      	beq.n	800dc70 <icmp_send_response+0xb4>
    /* calculate checksum */
    icmphdr->chksum = 0;
 800dc4c:	697b      	ldr	r3, [r7, #20]
 800dc4e:	2200      	movs	r2, #0
 800dc50:	709a      	strb	r2, [r3, #2]
 800dc52:	2200      	movs	r2, #0
 800dc54:	70da      	strb	r2, [r3, #3]
    IF__NETIF_CHECKSUM_ENABLED(netif, NETIF_CHECKSUM_GEN_ICMP) {
      icmphdr->chksum = inet_chksum(icmphdr, q->len);
    }
#endif
    ICMP_STATS_INC(icmp.xmit);
    ip4_output_if(q, NULL, &iphdr_src, ICMP_TTL, 0, IP_PROTO_ICMP, netif);
 800dc56:	f107 020c 	add.w	r2, r7, #12
 800dc5a:	693b      	ldr	r3, [r7, #16]
 800dc5c:	9302      	str	r3, [sp, #8]
 800dc5e:	2301      	movs	r3, #1
 800dc60:	9301      	str	r3, [sp, #4]
 800dc62:	2300      	movs	r3, #0
 800dc64:	9300      	str	r3, [sp, #0]
 800dc66:	23ff      	movs	r3, #255	; 0xff
 800dc68:	2100      	movs	r1, #0
 800dc6a:	69f8      	ldr	r0, [r7, #28]
 800dc6c:	f000 f9b6 	bl	800dfdc <ip4_output_if>
  }
  pbuf_free(q);
 800dc70:	69f8      	ldr	r0, [r7, #28]
 800dc72:	f7f9 fe5f 	bl	8007934 <pbuf_free>
 800dc76:	e000      	b.n	800dc7a <icmp_send_response+0xbe>
    return;
 800dc78:	bf00      	nop
}
 800dc7a:	3720      	adds	r7, #32
 800dc7c:	46bd      	mov	sp, r7
 800dc7e:	bd80      	pop	{r7, pc}
 800dc80:	08012c64 	.word	0x08012c64
 800dc84:	08012d30 	.word	0x08012d30
 800dc88:	08012cd4 	.word	0x08012cd4

0800dc8c <ip4_route>:
 * @param dest the destination IP address for which to find the route
 * @return the netif on which to send to reach dest
 */
struct netif *
ip4_route(const ip4_addr_t *dest)
{
 800dc8c:	b480      	push	{r7}
 800dc8e:	b085      	sub	sp, #20
 800dc90:	af00      	add	r7, sp, #0
 800dc92:	6078      	str	r0, [r7, #4]
    return ip4_default_multicast_netif;
  }
#endif /* LWIP_MULTICAST_TX_OPTIONS */

  /* iterate through netifs */
  for (netif = netif_list; netif != NULL; netif = netif->next) {
 800dc94:	4b30      	ldr	r3, [pc, #192]	; (800dd58 <ip4_route+0xcc>)
 800dc96:	681b      	ldr	r3, [r3, #0]
 800dc98:	60fb      	str	r3, [r7, #12]
 800dc9a:	e036      	b.n	800dd0a <ip4_route+0x7e>
    /* is the netif up, does it have a link and a valid address? */
    if (netif_is_up(netif) && netif_is_link_up(netif) && !ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 800dc9c:	68fb      	ldr	r3, [r7, #12]
 800dc9e:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 800dca2:	f003 0301 	and.w	r3, r3, #1
 800dca6:	b2db      	uxtb	r3, r3
 800dca8:	2b00      	cmp	r3, #0
 800dcaa:	d02b      	beq.n	800dd04 <ip4_route+0x78>
 800dcac:	68fb      	ldr	r3, [r7, #12]
 800dcae:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 800dcb2:	089b      	lsrs	r3, r3, #2
 800dcb4:	f003 0301 	and.w	r3, r3, #1
 800dcb8:	b2db      	uxtb	r3, r3
 800dcba:	2b00      	cmp	r3, #0
 800dcbc:	d022      	beq.n	800dd04 <ip4_route+0x78>
 800dcbe:	68fb      	ldr	r3, [r7, #12]
 800dcc0:	3304      	adds	r3, #4
 800dcc2:	681b      	ldr	r3, [r3, #0]
 800dcc4:	2b00      	cmp	r3, #0
 800dcc6:	d01d      	beq.n	800dd04 <ip4_route+0x78>
      /* network mask matches? */
      if (ip4_addr_netcmp(dest, netif_ip4_addr(netif), netif_ip4_netmask(netif))) {
 800dcc8:	687b      	ldr	r3, [r7, #4]
 800dcca:	681a      	ldr	r2, [r3, #0]
 800dccc:	68fb      	ldr	r3, [r7, #12]
 800dcce:	3304      	adds	r3, #4
 800dcd0:	681b      	ldr	r3, [r3, #0]
 800dcd2:	405a      	eors	r2, r3
 800dcd4:	68fb      	ldr	r3, [r7, #12]
 800dcd6:	3308      	adds	r3, #8
 800dcd8:	681b      	ldr	r3, [r3, #0]
 800dcda:	4013      	ands	r3, r2
 800dcdc:	2b00      	cmp	r3, #0
 800dcde:	d101      	bne.n	800dce4 <ip4_route+0x58>
        /* return netif on which to forward IP packet */
        return netif;
 800dce0:	68fb      	ldr	r3, [r7, #12]
 800dce2:	e033      	b.n	800dd4c <ip4_route+0xc0>
      }
      /* gateway matches on a non broadcast interface? (i.e. peer in a point to point interface) */
      if (((netif->flags & NETIF_FLAG_BROADCAST) == 0) && ip4_addr_cmp(dest, netif_ip4_gw(netif))) {
 800dce4:	68fb      	ldr	r3, [r7, #12]
 800dce6:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 800dcea:	f003 0302 	and.w	r3, r3, #2
 800dcee:	2b00      	cmp	r3, #0
 800dcf0:	d108      	bne.n	800dd04 <ip4_route+0x78>
 800dcf2:	687b      	ldr	r3, [r7, #4]
 800dcf4:	681a      	ldr	r2, [r3, #0]
 800dcf6:	68fb      	ldr	r3, [r7, #12]
 800dcf8:	330c      	adds	r3, #12
 800dcfa:	681b      	ldr	r3, [r3, #0]
 800dcfc:	429a      	cmp	r2, r3
 800dcfe:	d101      	bne.n	800dd04 <ip4_route+0x78>
        /* return netif on which to forward IP packet */
        return netif;
 800dd00:	68fb      	ldr	r3, [r7, #12]
 800dd02:	e023      	b.n	800dd4c <ip4_route+0xc0>
  for (netif = netif_list; netif != NULL; netif = netif->next) {
 800dd04:	68fb      	ldr	r3, [r7, #12]
 800dd06:	681b      	ldr	r3, [r3, #0]
 800dd08:	60fb      	str	r3, [r7, #12]
 800dd0a:	68fb      	ldr	r3, [r7, #12]
 800dd0c:	2b00      	cmp	r3, #0
 800dd0e:	d1c5      	bne.n	800dc9c <ip4_route+0x10>
  if (netif != NULL) {
    return netif;
  }
#endif

  if ((netif_default == NULL) || !netif_is_up(netif_default) || !netif_is_link_up(netif_default) ||
 800dd10:	4b12      	ldr	r3, [pc, #72]	; (800dd5c <ip4_route+0xd0>)
 800dd12:	681b      	ldr	r3, [r3, #0]
 800dd14:	2b00      	cmp	r3, #0
 800dd16:	d015      	beq.n	800dd44 <ip4_route+0xb8>
 800dd18:	4b10      	ldr	r3, [pc, #64]	; (800dd5c <ip4_route+0xd0>)
 800dd1a:	681b      	ldr	r3, [r3, #0]
 800dd1c:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 800dd20:	f003 0301 	and.w	r3, r3, #1
 800dd24:	2b00      	cmp	r3, #0
 800dd26:	d00d      	beq.n	800dd44 <ip4_route+0xb8>
 800dd28:	4b0c      	ldr	r3, [pc, #48]	; (800dd5c <ip4_route+0xd0>)
 800dd2a:	681b      	ldr	r3, [r3, #0]
 800dd2c:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 800dd30:	f003 0304 	and.w	r3, r3, #4
 800dd34:	2b00      	cmp	r3, #0
 800dd36:	d005      	beq.n	800dd44 <ip4_route+0xb8>
      ip4_addr_isany_val(*netif_ip4_addr(netif_default))) {
 800dd38:	4b08      	ldr	r3, [pc, #32]	; (800dd5c <ip4_route+0xd0>)
 800dd3a:	681b      	ldr	r3, [r3, #0]
 800dd3c:	3304      	adds	r3, #4
 800dd3e:	681b      	ldr	r3, [r3, #0]
  if ((netif_default == NULL) || !netif_is_up(netif_default) || !netif_is_link_up(netif_default) ||
 800dd40:	2b00      	cmp	r3, #0
 800dd42:	d101      	bne.n	800dd48 <ip4_route+0xbc>
       If this is not good enough for you, use LWIP_HOOK_IP4_ROUTE() */
    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_route: No route to %"U16_F".%"U16_F".%"U16_F".%"U16_F"\n",
      ip4_addr1_16(dest), ip4_addr2_16(dest), ip4_addr3_16(dest), ip4_addr4_16(dest)));
    IP_STATS_INC(ip.rterr);
    MIB2_STATS_INC(mib2.ipoutnoroutes);
    return NULL;
 800dd44:	2300      	movs	r3, #0
 800dd46:	e001      	b.n	800dd4c <ip4_route+0xc0>
  }

  return netif_default;
 800dd48:	4b04      	ldr	r3, [pc, #16]	; (800dd5c <ip4_route+0xd0>)
 800dd4a:	681b      	ldr	r3, [r3, #0]
}
 800dd4c:	4618      	mov	r0, r3
 800dd4e:	3714      	adds	r7, #20
 800dd50:	46bd      	mov	sp, r7
 800dd52:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dd56:	4770      	bx	lr
 800dd58:	2400acc8 	.word	0x2400acc8
 800dd5c:	2400accc 	.word	0x2400accc

0800dd60 <ip4_input>:
 * @return ERR_OK if the packet was processed (could return ERR_* if it wasn't
 *         processed, but currently always returns ERR_OK)
 */
err_t
ip4_input(struct pbuf *p, struct netif *inp)
{
 800dd60:	b580      	push	{r7, lr}
 800dd62:	b086      	sub	sp, #24
 800dd64:	af00      	add	r7, sp, #0
 800dd66:	6078      	str	r0, [r7, #4]
 800dd68:	6039      	str	r1, [r7, #0]

  IP_STATS_INC(ip.recv);
  MIB2_STATS_INC(mib2.ipinreceives);

  /* identify the IP header */
  iphdr = (struct ip_hdr *)p->payload;
 800dd6a:	687b      	ldr	r3, [r7, #4]
 800dd6c:	685b      	ldr	r3, [r3, #4]
 800dd6e:	617b      	str	r3, [r7, #20]
  if (IPH_V(iphdr) != 4) {
 800dd70:	697b      	ldr	r3, [r7, #20]
 800dd72:	781b      	ldrb	r3, [r3, #0]
 800dd74:	091b      	lsrs	r3, r3, #4
 800dd76:	b2db      	uxtb	r3, r3
 800dd78:	2b04      	cmp	r3, #4
 800dd7a:	d004      	beq.n	800dd86 <ip4_input+0x26>
    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_WARNING, ("IP packet dropped due to bad version number %"U16_F"\n", (u16_t)IPH_V(iphdr)));
    ip4_debug_print(p);
    pbuf_free(p);
 800dd7c:	6878      	ldr	r0, [r7, #4]
 800dd7e:	f7f9 fdd9 	bl	8007934 <pbuf_free>
    IP_STATS_INC(ip.err);
    IP_STATS_INC(ip.drop);
    MIB2_STATS_INC(mib2.ipinhdrerrors);
    return ERR_OK;
 800dd82:	2300      	movs	r3, #0
 800dd84:	e122      	b.n	800dfcc <ip4_input+0x26c>
    return ERR_OK;
  }
#endif

  /* obtain IP header length in number of 32-bit words */
  iphdr_hlen = IPH_HL(iphdr);
 800dd86:	697b      	ldr	r3, [r7, #20]
 800dd88:	781b      	ldrb	r3, [r3, #0]
 800dd8a:	b29b      	uxth	r3, r3
 800dd8c:	f003 030f 	and.w	r3, r3, #15
 800dd90:	817b      	strh	r3, [r7, #10]
  /* calculate IP header length in bytes */
  iphdr_hlen *= 4;
 800dd92:	897b      	ldrh	r3, [r7, #10]
 800dd94:	009b      	lsls	r3, r3, #2
 800dd96:	817b      	strh	r3, [r7, #10]
  /* obtain ip length in bytes */
  iphdr_len = lwip_ntohs(IPH_LEN(iphdr));
 800dd98:	697b      	ldr	r3, [r7, #20]
 800dd9a:	885b      	ldrh	r3, [r3, #2]
 800dd9c:	b29b      	uxth	r3, r3
 800dd9e:	4618      	mov	r0, r3
 800dda0:	f7f8 fb9c 	bl	80064dc <lwip_htons>
 800dda4:	4603      	mov	r3, r0
 800dda6:	813b      	strh	r3, [r7, #8]

  /* Trim pbuf. This is especially required for packets < 60 bytes. */
  if (iphdr_len < p->tot_len) {
 800dda8:	687b      	ldr	r3, [r7, #4]
 800ddaa:	891b      	ldrh	r3, [r3, #8]
 800ddac:	893a      	ldrh	r2, [r7, #8]
 800ddae:	429a      	cmp	r2, r3
 800ddb0:	d204      	bcs.n	800ddbc <ip4_input+0x5c>
    pbuf_realloc(p, iphdr_len);
 800ddb2:	893b      	ldrh	r3, [r7, #8]
 800ddb4:	4619      	mov	r1, r3
 800ddb6:	6878      	ldr	r0, [r7, #4]
 800ddb8:	f7f9 fc48 	bl	800764c <pbuf_realloc>
  }

  /* header length exceeds first pbuf length, or ip length exceeds total pbuf length? */
  if ((iphdr_hlen > p->len) || (iphdr_len > p->tot_len) || (iphdr_hlen < IP_HLEN)) {
 800ddbc:	687b      	ldr	r3, [r7, #4]
 800ddbe:	895b      	ldrh	r3, [r3, #10]
 800ddc0:	897a      	ldrh	r2, [r7, #10]
 800ddc2:	429a      	cmp	r2, r3
 800ddc4:	d807      	bhi.n	800ddd6 <ip4_input+0x76>
 800ddc6:	687b      	ldr	r3, [r7, #4]
 800ddc8:	891b      	ldrh	r3, [r3, #8]
 800ddca:	893a      	ldrh	r2, [r7, #8]
 800ddcc:	429a      	cmp	r2, r3
 800ddce:	d802      	bhi.n	800ddd6 <ip4_input+0x76>
 800ddd0:	897b      	ldrh	r3, [r7, #10]
 800ddd2:	2b13      	cmp	r3, #19
 800ddd4:	d804      	bhi.n	800dde0 <ip4_input+0x80>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
        ("IP (len %"U16_F") is longer than pbuf (len %"U16_F"), IP packet dropped.\n",
        iphdr_len, p->tot_len));
    }
    /* free (drop) packet pbufs */
    pbuf_free(p);
 800ddd6:	6878      	ldr	r0, [r7, #4]
 800ddd8:	f7f9 fdac 	bl	8007934 <pbuf_free>
    IP_STATS_INC(ip.lenerr);
    IP_STATS_INC(ip.drop);
    MIB2_STATS_INC(mib2.ipindiscards);
    return ERR_OK;
 800dddc:	2300      	movs	r3, #0
 800ddde:	e0f5      	b.n	800dfcc <ip4_input+0x26c>
    }
  }
#endif

  /* copy IP addresses to aligned ip_addr_t */
  ip_addr_copy_from_ip4(ip_data.current_iphdr_dest, iphdr->dest);
 800dde0:	697b      	ldr	r3, [r7, #20]
 800dde2:	691b      	ldr	r3, [r3, #16]
 800dde4:	4a7b      	ldr	r2, [pc, #492]	; (800dfd4 <ip4_input+0x274>)
 800dde6:	6153      	str	r3, [r2, #20]
  ip_addr_copy_from_ip4(ip_data.current_iphdr_src, iphdr->src);
 800dde8:	697b      	ldr	r3, [r7, #20]
 800ddea:	68db      	ldr	r3, [r3, #12]
 800ddec:	4a79      	ldr	r2, [pc, #484]	; (800dfd4 <ip4_input+0x274>)
 800ddee:	6113      	str	r3, [r2, #16]

  /* match packet against an interface, i.e. is this packet for us? */
  if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 800ddf0:	4b78      	ldr	r3, [pc, #480]	; (800dfd4 <ip4_input+0x274>)
 800ddf2:	695b      	ldr	r3, [r3, #20]
 800ddf4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800ddf8:	2be0      	cmp	r3, #224	; 0xe0
 800ddfa:	d112      	bne.n	800de22 <ip4_input+0xc2>
      netif = inp;
    } else {
      netif = NULL;
    }
#else /* LWIP_IGMP */
    if ((netif_is_up(inp)) && (!ip4_addr_isany_val(*netif_ip4_addr(inp)))) {
 800ddfc:	683b      	ldr	r3, [r7, #0]
 800ddfe:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 800de02:	f003 0301 	and.w	r3, r3, #1
 800de06:	b2db      	uxtb	r3, r3
 800de08:	2b00      	cmp	r3, #0
 800de0a:	d007      	beq.n	800de1c <ip4_input+0xbc>
 800de0c:	683b      	ldr	r3, [r7, #0]
 800de0e:	3304      	adds	r3, #4
 800de10:	681b      	ldr	r3, [r3, #0]
 800de12:	2b00      	cmp	r3, #0
 800de14:	d002      	beq.n	800de1c <ip4_input+0xbc>
      netif = inp;
 800de16:	683b      	ldr	r3, [r7, #0]
 800de18:	613b      	str	r3, [r7, #16]
 800de1a:	e041      	b.n	800dea0 <ip4_input+0x140>
    } else {
      netif = NULL;
 800de1c:	2300      	movs	r3, #0
 800de1e:	613b      	str	r3, [r7, #16]
 800de20:	e03e      	b.n	800dea0 <ip4_input+0x140>
#endif /* LWIP_IGMP */
  } else {
    /* start trying with inp. if that's not acceptable, start walking the
       list of configured netifs.
       'first' is used as a boolean to mark whether we started walking the list */
    int first = 1;
 800de22:	2301      	movs	r3, #1
 800de24:	60fb      	str	r3, [r7, #12]
    netif = inp;
 800de26:	683b      	ldr	r3, [r7, #0]
 800de28:	613b      	str	r3, [r7, #16]
          ip4_addr_get_u32(&iphdr->dest) & ip4_addr_get_u32(netif_ip4_netmask(netif)),
          ip4_addr_get_u32(netif_ip4_addr(netif)) & ip4_addr_get_u32(netif_ip4_netmask(netif)),
          ip4_addr_get_u32(&iphdr->dest) & ~ip4_addr_get_u32(netif_ip4_netmask(netif))));

      /* interface is up and configured? */
      if ((netif_is_up(netif)) && (!ip4_addr_isany_val(*netif_ip4_addr(netif)))) {
 800de2a:	693b      	ldr	r3, [r7, #16]
 800de2c:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 800de30:	f003 0301 	and.w	r3, r3, #1
 800de34:	b2db      	uxtb	r3, r3
 800de36:	2b00      	cmp	r3, #0
 800de38:	d014      	beq.n	800de64 <ip4_input+0x104>
 800de3a:	693b      	ldr	r3, [r7, #16]
 800de3c:	3304      	adds	r3, #4
 800de3e:	681b      	ldr	r3, [r3, #0]
 800de40:	2b00      	cmp	r3, #0
 800de42:	d00f      	beq.n	800de64 <ip4_input+0x104>
        /* unicast to this interface address? */
        if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 800de44:	4b63      	ldr	r3, [pc, #396]	; (800dfd4 <ip4_input+0x274>)
 800de46:	695a      	ldr	r2, [r3, #20]
 800de48:	693b      	ldr	r3, [r7, #16]
 800de4a:	3304      	adds	r3, #4
 800de4c:	681b      	ldr	r3, [r3, #0]
 800de4e:	429a      	cmp	r2, r3
 800de50:	d026      	beq.n	800dea0 <ip4_input+0x140>
            /* or broadcast on this interface network address? */
            ip4_addr_isbroadcast(ip4_current_dest_addr(), netif)
 800de52:	4b60      	ldr	r3, [pc, #384]	; (800dfd4 <ip4_input+0x274>)
 800de54:	695b      	ldr	r3, [r3, #20]
 800de56:	6939      	ldr	r1, [r7, #16]
 800de58:	4618      	mov	r0, r3
 800de5a:	f000 f991 	bl	800e180 <ip4_addr_isbroadcast_u32>
 800de5e:	4603      	mov	r3, r0
        if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 800de60:	2b00      	cmp	r3, #0
 800de62:	d11d      	bne.n	800dea0 <ip4_input+0x140>
          /* break out of for loop */
          break;
        }
#endif /* LWIP_AUTOIP */
      }
      if (first) {
 800de64:	68fb      	ldr	r3, [r7, #12]
 800de66:	2b00      	cmp	r3, #0
 800de68:	d00d      	beq.n	800de86 <ip4_input+0x126>
#if !LWIP_NETIF_LOOPBACK || LWIP_HAVE_LOOPIF
        /* Packets sent to the loopback address must not be accepted on an
         * interface that does not have the loopback address assigned to it,
         * unless a non-loopback interface is used for loopback traffic. */
        if (ip4_addr_isloopback(ip4_current_dest_addr())) {
 800de6a:	4b5a      	ldr	r3, [pc, #360]	; (800dfd4 <ip4_input+0x274>)
 800de6c:	695b      	ldr	r3, [r3, #20]
 800de6e:	b2db      	uxtb	r3, r3
 800de70:	2b7f      	cmp	r3, #127	; 0x7f
 800de72:	d102      	bne.n	800de7a <ip4_input+0x11a>
          netif = NULL;
 800de74:	2300      	movs	r3, #0
 800de76:	613b      	str	r3, [r7, #16]
          break;
 800de78:	e012      	b.n	800dea0 <ip4_input+0x140>
        }
#endif /* !LWIP_NETIF_LOOPBACK || LWIP_HAVE_LOOPIF */
        first = 0;
 800de7a:	2300      	movs	r3, #0
 800de7c:	60fb      	str	r3, [r7, #12]
        netif = netif_list;
 800de7e:	4b56      	ldr	r3, [pc, #344]	; (800dfd8 <ip4_input+0x278>)
 800de80:	681b      	ldr	r3, [r3, #0]
 800de82:	613b      	str	r3, [r7, #16]
 800de84:	e002      	b.n	800de8c <ip4_input+0x12c>
      } else {
        netif = netif->next;
 800de86:	693b      	ldr	r3, [r7, #16]
 800de88:	681b      	ldr	r3, [r3, #0]
 800de8a:	613b      	str	r3, [r7, #16]
      }
      if (netif == inp) {
 800de8c:	693a      	ldr	r2, [r7, #16]
 800de8e:	683b      	ldr	r3, [r7, #0]
 800de90:	429a      	cmp	r2, r3
 800de92:	d102      	bne.n	800de9a <ip4_input+0x13a>
        netif = netif->next;
 800de94:	693b      	ldr	r3, [r7, #16]
 800de96:	681b      	ldr	r3, [r3, #0]
 800de98:	613b      	str	r3, [r7, #16]
      }
    } while (netif != NULL);
 800de9a:	693b      	ldr	r3, [r7, #16]
 800de9c:	2b00      	cmp	r3, #0
 800de9e:	d1c4      	bne.n	800de2a <ip4_input+0xca>
      && !ip4_addr_isany_val(*ip4_current_src_addr())
#endif /* IP_ACCEPT_LINK_LAYER_ADDRESSING */
     )
#endif /* LWIP_IGMP || IP_ACCEPT_LINK_LAYER_ADDRESSING */
  {
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 800dea0:	4b4c      	ldr	r3, [pc, #304]	; (800dfd4 <ip4_input+0x274>)
 800dea2:	691b      	ldr	r3, [r3, #16]
 800dea4:	6839      	ldr	r1, [r7, #0]
 800dea6:	4618      	mov	r0, r3
 800dea8:	f000 f96a 	bl	800e180 <ip4_addr_isbroadcast_u32>
 800deac:	4603      	mov	r3, r0
 800deae:	2b00      	cmp	r3, #0
 800deb0:	d105      	bne.n	800debe <ip4_input+0x15e>
        (ip4_addr_ismulticast(ip4_current_src_addr()))) {
 800deb2:	4b48      	ldr	r3, [pc, #288]	; (800dfd4 <ip4_input+0x274>)
 800deb4:	691b      	ldr	r3, [r3, #16]
 800deb6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 800deba:	2be0      	cmp	r3, #224	; 0xe0
 800debc:	d104      	bne.n	800dec8 <ip4_input+0x168>
      /* packet source is not valid */
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("ip4_input: packet source is not valid.\n"));
      /* free (drop) packet pbufs */
      pbuf_free(p);
 800debe:	6878      	ldr	r0, [r7, #4]
 800dec0:	f7f9 fd38 	bl	8007934 <pbuf_free>
      IP_STATS_INC(ip.drop);
      MIB2_STATS_INC(mib2.ipinaddrerrors);
      MIB2_STATS_INC(mib2.ipindiscards);
      return ERR_OK;
 800dec4:	2300      	movs	r3, #0
 800dec6:	e081      	b.n	800dfcc <ip4_input+0x26c>
    }
  }

  /* packet not for us? */
  if (netif == NULL) {
 800dec8:	693b      	ldr	r3, [r7, #16]
 800deca:	2b00      	cmp	r3, #0
 800decc:	d104      	bne.n	800ded8 <ip4_input+0x178>
    {
      IP_STATS_INC(ip.drop);
      MIB2_STATS_INC(mib2.ipinaddrerrors);
      MIB2_STATS_INC(mib2.ipindiscards);
    }
    pbuf_free(p);
 800dece:	6878      	ldr	r0, [r7, #4]
 800ded0:	f7f9 fd30 	bl	8007934 <pbuf_free>
    return ERR_OK;
 800ded4:	2300      	movs	r3, #0
 800ded6:	e079      	b.n	800dfcc <ip4_input+0x26c>
  }
  /* packet consists of multiple fragments? */
  if ((IPH_OFFSET(iphdr) & PP_HTONS(IP_OFFMASK | IP_MF)) != 0) {
 800ded8:	697b      	ldr	r3, [r7, #20]
 800deda:	88db      	ldrh	r3, [r3, #6]
 800dedc:	b29b      	uxth	r3, r3
 800dede:	461a      	mov	r2, r3
 800dee0:	f64f 733f 	movw	r3, #65343	; 0xff3f
 800dee4:	4013      	ands	r3, r2
 800dee6:	2b00      	cmp	r3, #0
 800dee8:	d00b      	beq.n	800df02 <ip4_input+0x1a2>
#if IP_REASSEMBLY /* packet fragment reassembly code present? */
    LWIP_DEBUGF(IP_DEBUG, ("IP packet is a fragment (id=0x%04"X16_F" tot_len=%"U16_F" len=%"U16_F" MF=%"U16_F" offset=%"U16_F"), calling ip4_reass()\n",
      lwip_ntohs(IPH_ID(iphdr)), p->tot_len, lwip_ntohs(IPH_LEN(iphdr)), (u16_t)!!(IPH_OFFSET(iphdr) & PP_HTONS(IP_MF)), (u16_t)((lwip_ntohs(IPH_OFFSET(iphdr)) & IP_OFFMASK)*8)));
    /* reassemble the packet*/
    p = ip4_reass(p);
 800deea:	6878      	ldr	r0, [r7, #4]
 800deec:	f000 fc8e 	bl	800e80c <ip4_reass>
 800def0:	6078      	str	r0, [r7, #4]
    /* packet not fully reassembled yet? */
    if (p == NULL) {
 800def2:	687b      	ldr	r3, [r7, #4]
 800def4:	2b00      	cmp	r3, #0
 800def6:	d101      	bne.n	800defc <ip4_input+0x19c>
      return ERR_OK;
 800def8:	2300      	movs	r3, #0
 800defa:	e067      	b.n	800dfcc <ip4_input+0x26c>
    }
    iphdr = (struct ip_hdr *)p->payload;
 800defc:	687b      	ldr	r3, [r7, #4]
 800defe:	685b      	ldr	r3, [r3, #4]
 800df00:	617b      	str	r3, [r7, #20]
  /* send to upper layers */
  LWIP_DEBUGF(IP_DEBUG, ("ip4_input: \n"));
  ip4_debug_print(p);
  LWIP_DEBUGF(IP_DEBUG, ("ip4_input: p->len %"U16_F" p->tot_len %"U16_F"\n", p->len, p->tot_len));

  ip_data.current_netif = netif;
 800df02:	4a34      	ldr	r2, [pc, #208]	; (800dfd4 <ip4_input+0x274>)
 800df04:	693b      	ldr	r3, [r7, #16]
 800df06:	6013      	str	r3, [r2, #0]
  ip_data.current_input_netif = inp;
 800df08:	4a32      	ldr	r2, [pc, #200]	; (800dfd4 <ip4_input+0x274>)
 800df0a:	683b      	ldr	r3, [r7, #0]
 800df0c:	6053      	str	r3, [r2, #4]
  ip_data.current_ip4_header = iphdr;
 800df0e:	4a31      	ldr	r2, [pc, #196]	; (800dfd4 <ip4_input+0x274>)
 800df10:	697b      	ldr	r3, [r7, #20]
 800df12:	6093      	str	r3, [r2, #8]
  ip_data.current_ip_header_tot_len = IPH_HL(iphdr) * 4;
 800df14:	697b      	ldr	r3, [r7, #20]
 800df16:	781b      	ldrb	r3, [r3, #0]
 800df18:	b29b      	uxth	r3, r3
 800df1a:	f003 030f 	and.w	r3, r3, #15
 800df1e:	b29b      	uxth	r3, r3
 800df20:	009b      	lsls	r3, r3, #2
 800df22:	b29a      	uxth	r2, r3
 800df24:	4b2b      	ldr	r3, [pc, #172]	; (800dfd4 <ip4_input+0x274>)
 800df26:	819a      	strh	r2, [r3, #12]
#if LWIP_RAW
  /* raw input did not eat the packet? */
  if (raw_input(p, inp) == 0)
#endif /* LWIP_RAW */
  {
    pbuf_header(p, -(s16_t)iphdr_hlen); /* Move to payload, no check necessary. */
 800df28:	897b      	ldrh	r3, [r7, #10]
 800df2a:	425b      	negs	r3, r3
 800df2c:	b29b      	uxth	r3, r3
 800df2e:	b21b      	sxth	r3, r3
 800df30:	4619      	mov	r1, r3
 800df32:	6878      	ldr	r0, [r7, #4]
 800df34:	f7f9 fcda 	bl	80078ec <pbuf_header>

    switch (IPH_PROTO(iphdr)) {
 800df38:	697b      	ldr	r3, [r7, #20]
 800df3a:	7a5b      	ldrb	r3, [r3, #9]
 800df3c:	2b06      	cmp	r3, #6
 800df3e:	d009      	beq.n	800df54 <ip4_input+0x1f4>
 800df40:	2b11      	cmp	r3, #17
 800df42:	d002      	beq.n	800df4a <ip4_input+0x1ea>
 800df44:	2b01      	cmp	r3, #1
 800df46:	d00a      	beq.n	800df5e <ip4_input+0x1fe>
 800df48:	e00e      	b.n	800df68 <ip4_input+0x208>
    case IP_PROTO_UDP:
#if LWIP_UDPLITE
    case IP_PROTO_UDPLITE:
#endif /* LWIP_UDPLITE */
      MIB2_STATS_INC(mib2.ipindelivers);
      udp_input(p, inp);
 800df4a:	6839      	ldr	r1, [r7, #0]
 800df4c:	6878      	ldr	r0, [r7, #4]
 800df4e:	f7fe fcad 	bl	800c8ac <udp_input>
      break;
 800df52:	e028      	b.n	800dfa6 <ip4_input+0x246>
#endif /* LWIP_UDP */
#if LWIP_TCP
    case IP_PROTO_TCP:
      MIB2_STATS_INC(mib2.ipindelivers);
      tcp_input(p, inp);
 800df54:	6839      	ldr	r1, [r7, #0]
 800df56:	6878      	ldr	r0, [r7, #4]
 800df58:	f7fb f934 	bl	80091c4 <tcp_input>
      break;
 800df5c:	e023      	b.n	800dfa6 <ip4_input+0x246>
#endif /* LWIP_TCP */
#if LWIP_ICMP
    case IP_PROTO_ICMP:
      MIB2_STATS_INC(mib2.ipindelivers);
      icmp_input(p, inp);
 800df5e:	6839      	ldr	r1, [r7, #0]
 800df60:	6878      	ldr	r0, [r7, #4]
 800df62:	f7ff fd05 	bl	800d970 <icmp_input>
      break;
 800df66:	e01e      	b.n	800dfa6 <ip4_input+0x246>
      break;
#endif /* LWIP_IGMP */
    default:
#if LWIP_ICMP
      /* send ICMP destination protocol unreachable unless is was a broadcast */
      if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
 800df68:	4b1a      	ldr	r3, [pc, #104]	; (800dfd4 <ip4_input+0x274>)
 800df6a:	695b      	ldr	r3, [r3, #20]
 800df6c:	6939      	ldr	r1, [r7, #16]
 800df6e:	4618      	mov	r0, r3
 800df70:	f000 f906 	bl	800e180 <ip4_addr_isbroadcast_u32>
 800df74:	4603      	mov	r3, r0
 800df76:	2b00      	cmp	r3, #0
 800df78:	d112      	bne.n	800dfa0 <ip4_input+0x240>
          !ip4_addr_ismulticast(ip4_current_dest_addr())) {
 800df7a:	4b16      	ldr	r3, [pc, #88]	; (800dfd4 <ip4_input+0x274>)
 800df7c:	695b      	ldr	r3, [r3, #20]
 800df7e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
      if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
 800df82:	2be0      	cmp	r3, #224	; 0xe0
 800df84:	d00c      	beq.n	800dfa0 <ip4_input+0x240>
        pbuf_header_force(p, iphdr_hlen); /* Move to ip header, no check necessary. */
 800df86:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 800df8a:	4619      	mov	r1, r3
 800df8c:	6878      	ldr	r0, [r7, #4]
 800df8e:	f7f9 fcbf 	bl	8007910 <pbuf_header_force>
        p->payload = iphdr;
 800df92:	687b      	ldr	r3, [r7, #4]
 800df94:	697a      	ldr	r2, [r7, #20]
 800df96:	605a      	str	r2, [r3, #4]
        icmp_dest_unreach(p, ICMP_DUR_PROTO);
 800df98:	2102      	movs	r1, #2
 800df9a:	6878      	ldr	r0, [r7, #4]
 800df9c:	f7ff fdee 	bl	800db7c <icmp_dest_unreach>
      }
#endif /* LWIP_ICMP */
      pbuf_free(p);
 800dfa0:	6878      	ldr	r0, [r7, #4]
 800dfa2:	f7f9 fcc7 	bl	8007934 <pbuf_free>
      MIB2_STATS_INC(mib2.ipinunknownprotos);
    }
  }

  /* @todo: this is not really necessary... */
  ip_data.current_netif = NULL;
 800dfa6:	4b0b      	ldr	r3, [pc, #44]	; (800dfd4 <ip4_input+0x274>)
 800dfa8:	2200      	movs	r2, #0
 800dfaa:	601a      	str	r2, [r3, #0]
  ip_data.current_input_netif = NULL;
 800dfac:	4b09      	ldr	r3, [pc, #36]	; (800dfd4 <ip4_input+0x274>)
 800dfae:	2200      	movs	r2, #0
 800dfb0:	605a      	str	r2, [r3, #4]
  ip_data.current_ip4_header = NULL;
 800dfb2:	4b08      	ldr	r3, [pc, #32]	; (800dfd4 <ip4_input+0x274>)
 800dfb4:	2200      	movs	r2, #0
 800dfb6:	609a      	str	r2, [r3, #8]
  ip_data.current_ip_header_tot_len = 0;
 800dfb8:	4b06      	ldr	r3, [pc, #24]	; (800dfd4 <ip4_input+0x274>)
 800dfba:	2200      	movs	r2, #0
 800dfbc:	819a      	strh	r2, [r3, #12]
  ip4_addr_set_any(ip4_current_src_addr());
 800dfbe:	4b05      	ldr	r3, [pc, #20]	; (800dfd4 <ip4_input+0x274>)
 800dfc0:	2200      	movs	r2, #0
 800dfc2:	611a      	str	r2, [r3, #16]
  ip4_addr_set_any(ip4_current_dest_addr());
 800dfc4:	4b03      	ldr	r3, [pc, #12]	; (800dfd4 <ip4_input+0x274>)
 800dfc6:	2200      	movs	r2, #0
 800dfc8:	615a      	str	r2, [r3, #20]

  return ERR_OK;
 800dfca:	2300      	movs	r3, #0
}
 800dfcc:	4618      	mov	r0, r3
 800dfce:	3718      	adds	r7, #24
 800dfd0:	46bd      	mov	sp, r7
 800dfd2:	bd80      	pop	{r7, pc}
 800dfd4:	2400419c 	.word	0x2400419c
 800dfd8:	2400acc8 	.word	0x2400acc8

0800dfdc <ip4_output_if>:
 */
err_t
ip4_output_if(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
             u8_t ttl, u8_t tos,
             u8_t proto, struct netif *netif)
{
 800dfdc:	b580      	push	{r7, lr}
 800dfde:	b08a      	sub	sp, #40	; 0x28
 800dfe0:	af04      	add	r7, sp, #16
 800dfe2:	60f8      	str	r0, [r7, #12]
 800dfe4:	60b9      	str	r1, [r7, #8]
 800dfe6:	607a      	str	r2, [r7, #4]
 800dfe8:	70fb      	strb	r3, [r7, #3]
ip4_output_if_opt(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
       u8_t ttl, u8_t tos, u8_t proto, struct netif *netif, void *ip_options,
       u16_t optlen)
{
#endif /* IP_OPTIONS_SEND */
  const ip4_addr_t *src_used = src;
 800dfea:	68bb      	ldr	r3, [r7, #8]
 800dfec:	617b      	str	r3, [r7, #20]
  if (dest != LWIP_IP_HDRINCL) {
 800dfee:	687b      	ldr	r3, [r7, #4]
 800dff0:	2b00      	cmp	r3, #0
 800dff2:	d009      	beq.n	800e008 <ip4_output_if+0x2c>
    if (ip4_addr_isany(src)) {
 800dff4:	68bb      	ldr	r3, [r7, #8]
 800dff6:	2b00      	cmp	r3, #0
 800dff8:	d003      	beq.n	800e002 <ip4_output_if+0x26>
 800dffa:	68bb      	ldr	r3, [r7, #8]
 800dffc:	681b      	ldr	r3, [r3, #0]
 800dffe:	2b00      	cmp	r3, #0
 800e000:	d102      	bne.n	800e008 <ip4_output_if+0x2c>
      src_used = netif_ip4_addr(netif);
 800e002:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e004:	3304      	adds	r3, #4
 800e006:	617b      	str	r3, [r7, #20]

#if IP_OPTIONS_SEND
  return ip4_output_if_opt_src(p, src_used, dest, ttl, tos, proto, netif,
    ip_options, optlen);
#else /* IP_OPTIONS_SEND */
  return ip4_output_if_src(p, src_used, dest, ttl, tos, proto, netif);
 800e008:	78fa      	ldrb	r2, [r7, #3]
 800e00a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e00c:	9302      	str	r3, [sp, #8]
 800e00e:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800e012:	9301      	str	r3, [sp, #4]
 800e014:	f897 3020 	ldrb.w	r3, [r7, #32]
 800e018:	9300      	str	r3, [sp, #0]
 800e01a:	4613      	mov	r3, r2
 800e01c:	687a      	ldr	r2, [r7, #4]
 800e01e:	6979      	ldr	r1, [r7, #20]
 800e020:	68f8      	ldr	r0, [r7, #12]
 800e022:	f000 f805 	bl	800e030 <ip4_output_if_src>
 800e026:	4603      	mov	r3, r0
#endif /* IP_OPTIONS_SEND */
}
 800e028:	4618      	mov	r0, r3
 800e02a:	3718      	adds	r7, #24
 800e02c:	46bd      	mov	sp, r7
 800e02e:	bd80      	pop	{r7, pc}

0800e030 <ip4_output_if_src>:
 */
err_t
ip4_output_if_src(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
             u8_t ttl, u8_t tos,
             u8_t proto, struct netif *netif)
{
 800e030:	b580      	push	{r7, lr}
 800e032:	b088      	sub	sp, #32
 800e034:	af00      	add	r7, sp, #0
 800e036:	60f8      	str	r0, [r7, #12]
 800e038:	60b9      	str	r1, [r7, #8]
 800e03a:	607a      	str	r2, [r7, #4]
 800e03c:	70fb      	strb	r3, [r7, #3]
  ip4_addr_t dest_addr;
#if CHECKSUM_GEN_IP_INLINE
  u32_t chk_sum = 0;
#endif /* CHECKSUM_GEN_IP_INLINE */

  LWIP_IP_CHECK_PBUF_REF_COUNT_FOR_TX(p);
 800e03e:	68fb      	ldr	r3, [r7, #12]
 800e040:	89db      	ldrh	r3, [r3, #14]
 800e042:	2b01      	cmp	r3, #1
 800e044:	d006      	beq.n	800e054 <ip4_output_if_src+0x24>
 800e046:	4b48      	ldr	r3, [pc, #288]	; (800e168 <ip4_output_if_src+0x138>)
 800e048:	f240 3233 	movw	r2, #819	; 0x333
 800e04c:	4947      	ldr	r1, [pc, #284]	; (800e16c <ip4_output_if_src+0x13c>)
 800e04e:	4848      	ldr	r0, [pc, #288]	; (800e170 <ip4_output_if_src+0x140>)
 800e050:	f002 fa6e 	bl	8010530 <iprintf>

  MIB2_STATS_INC(mib2.ipoutrequests);

  /* Should the IP header be generated or is it already included in p? */
  if (dest != LWIP_IP_HDRINCL) {
 800e054:	687b      	ldr	r3, [r7, #4]
 800e056:	2b00      	cmp	r3, #0
 800e058:	d060      	beq.n	800e11c <ip4_output_if_src+0xec>
    u16_t ip_hlen = IP_HLEN;
 800e05a:	2314      	movs	r3, #20
 800e05c:	837b      	strh	r3, [r7, #26]
      }
#endif /* CHECKSUM_GEN_IP_INLINE */
    }
#endif /* IP_OPTIONS_SEND */
    /* generate IP header */
    if (pbuf_header(p, IP_HLEN)) {
 800e05e:	2114      	movs	r1, #20
 800e060:	68f8      	ldr	r0, [r7, #12]
 800e062:	f7f9 fc43 	bl	80078ec <pbuf_header>
 800e066:	4603      	mov	r3, r0
 800e068:	2b00      	cmp	r3, #0
 800e06a:	d002      	beq.n	800e072 <ip4_output_if_src+0x42>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_output: not enough room for IP header in pbuf\n"));

      IP_STATS_INC(ip.err);
      MIB2_STATS_INC(mib2.ipoutdiscards);
      return ERR_BUF;
 800e06c:	f06f 0301 	mvn.w	r3, #1
 800e070:	e075      	b.n	800e15e <ip4_output_if_src+0x12e>
    }

    iphdr = (struct ip_hdr *)p->payload;
 800e072:	68fb      	ldr	r3, [r7, #12]
 800e074:	685b      	ldr	r3, [r3, #4]
 800e076:	61fb      	str	r3, [r7, #28]
    LWIP_ASSERT("check that first pbuf can hold struct ip_hdr",
 800e078:	68fb      	ldr	r3, [r7, #12]
 800e07a:	895b      	ldrh	r3, [r3, #10]
 800e07c:	2b13      	cmp	r3, #19
 800e07e:	d806      	bhi.n	800e08e <ip4_output_if_src+0x5e>
 800e080:	4b39      	ldr	r3, [pc, #228]	; (800e168 <ip4_output_if_src+0x138>)
 800e082:	f240 3261 	movw	r2, #865	; 0x361
 800e086:	493b      	ldr	r1, [pc, #236]	; (800e174 <ip4_output_if_src+0x144>)
 800e088:	4839      	ldr	r0, [pc, #228]	; (800e170 <ip4_output_if_src+0x140>)
 800e08a:	f002 fa51 	bl	8010530 <iprintf>
               (p->len >= sizeof(struct ip_hdr)));

    IPH_TTL_SET(iphdr, ttl);
 800e08e:	69fb      	ldr	r3, [r7, #28]
 800e090:	78fa      	ldrb	r2, [r7, #3]
 800e092:	721a      	strb	r2, [r3, #8]
    IPH_PROTO_SET(iphdr, proto);
 800e094:	69fb      	ldr	r3, [r7, #28]
 800e096:	f897 202c 	ldrb.w	r2, [r7, #44]	; 0x2c
 800e09a:	725a      	strb	r2, [r3, #9]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += PP_NTOHS(proto | (ttl << 8));
#endif /* CHECKSUM_GEN_IP_INLINE */

    /* dest cannot be NULL here */
    ip4_addr_copy(iphdr->dest, *dest);
 800e09c:	687b      	ldr	r3, [r7, #4]
 800e09e:	681a      	ldr	r2, [r3, #0]
 800e0a0:	69fb      	ldr	r3, [r7, #28]
 800e0a2:	611a      	str	r2, [r3, #16]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += ip4_addr_get_u32(&iphdr->dest) & 0xFFFF;
    chk_sum += ip4_addr_get_u32(&iphdr->dest) >> 16;
#endif /* CHECKSUM_GEN_IP_INLINE */

    IPH_VHL_SET(iphdr, 4, ip_hlen / 4);
 800e0a4:	8b7b      	ldrh	r3, [r7, #26]
 800e0a6:	089b      	lsrs	r3, r3, #2
 800e0a8:	b29b      	uxth	r3, r3
 800e0aa:	b2db      	uxtb	r3, r3
 800e0ac:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800e0b0:	b2da      	uxtb	r2, r3
 800e0b2:	69fb      	ldr	r3, [r7, #28]
 800e0b4:	701a      	strb	r2, [r3, #0]
    IPH_TOS_SET(iphdr, tos);
 800e0b6:	69fb      	ldr	r3, [r7, #28]
 800e0b8:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 800e0bc:	705a      	strb	r2, [r3, #1]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += PP_NTOHS(tos | (iphdr->_v_hl << 8));
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_LEN_SET(iphdr, lwip_htons(p->tot_len));
 800e0be:	68fb      	ldr	r3, [r7, #12]
 800e0c0:	891b      	ldrh	r3, [r3, #8]
 800e0c2:	4618      	mov	r0, r3
 800e0c4:	f7f8 fa0a 	bl	80064dc <lwip_htons>
 800e0c8:	4603      	mov	r3, r0
 800e0ca:	461a      	mov	r2, r3
 800e0cc:	69fb      	ldr	r3, [r7, #28]
 800e0ce:	805a      	strh	r2, [r3, #2]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_len;
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_OFFSET_SET(iphdr, 0);
 800e0d0:	69fb      	ldr	r3, [r7, #28]
 800e0d2:	2200      	movs	r2, #0
 800e0d4:	719a      	strb	r2, [r3, #6]
 800e0d6:	2200      	movs	r2, #0
 800e0d8:	71da      	strb	r2, [r3, #7]
    IPH_ID_SET(iphdr, lwip_htons(ip_id));
 800e0da:	4b27      	ldr	r3, [pc, #156]	; (800e178 <ip4_output_if_src+0x148>)
 800e0dc:	881b      	ldrh	r3, [r3, #0]
 800e0de:	4618      	mov	r0, r3
 800e0e0:	f7f8 f9fc 	bl	80064dc <lwip_htons>
 800e0e4:	4603      	mov	r3, r0
 800e0e6:	461a      	mov	r2, r3
 800e0e8:	69fb      	ldr	r3, [r7, #28]
 800e0ea:	809a      	strh	r2, [r3, #4]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_id;
#endif /* CHECKSUM_GEN_IP_INLINE */
    ++ip_id;
 800e0ec:	4b22      	ldr	r3, [pc, #136]	; (800e178 <ip4_output_if_src+0x148>)
 800e0ee:	881b      	ldrh	r3, [r3, #0]
 800e0f0:	3301      	adds	r3, #1
 800e0f2:	b29a      	uxth	r2, r3
 800e0f4:	4b20      	ldr	r3, [pc, #128]	; (800e178 <ip4_output_if_src+0x148>)
 800e0f6:	801a      	strh	r2, [r3, #0]

    if (src == NULL) {
 800e0f8:	68bb      	ldr	r3, [r7, #8]
 800e0fa:	2b00      	cmp	r3, #0
 800e0fc:	d104      	bne.n	800e108 <ip4_output_if_src+0xd8>
      ip4_addr_copy(iphdr->src, *IP4_ADDR_ANY4);
 800e0fe:	4b1f      	ldr	r3, [pc, #124]	; (800e17c <ip4_output_if_src+0x14c>)
 800e100:	681a      	ldr	r2, [r3, #0]
 800e102:	69fb      	ldr	r3, [r7, #28]
 800e104:	60da      	str	r2, [r3, #12]
 800e106:	e003      	b.n	800e110 <ip4_output_if_src+0xe0>
    } else {
      /* src cannot be NULL here */
      ip4_addr_copy(iphdr->src, *src);
 800e108:	68bb      	ldr	r3, [r7, #8]
 800e10a:	681a      	ldr	r2, [r3, #0]
 800e10c:	69fb      	ldr	r3, [r7, #28]
 800e10e:	60da      	str	r2, [r3, #12]
    else {
      IPH_CHKSUM_SET(iphdr, 0);
    }
#endif /* LWIP_CHECKSUM_CTRL_PER_NETIF*/
#else /* CHECKSUM_GEN_IP_INLINE */
    IPH_CHKSUM_SET(iphdr, 0);
 800e110:	69fb      	ldr	r3, [r7, #28]
 800e112:	2200      	movs	r2, #0
 800e114:	729a      	strb	r2, [r3, #10]
 800e116:	2200      	movs	r2, #0
 800e118:	72da      	strb	r2, [r3, #11]
 800e11a:	e008      	b.n	800e12e <ip4_output_if_src+0xfe>
    }
#endif /* CHECKSUM_GEN_IP */
#endif /* CHECKSUM_GEN_IP_INLINE */
  } else {
    /* IP header already included in p */
    iphdr = (struct ip_hdr *)p->payload;
 800e11c:	68fb      	ldr	r3, [r7, #12]
 800e11e:	685b      	ldr	r3, [r3, #4]
 800e120:	61fb      	str	r3, [r7, #28]
    ip4_addr_copy(dest_addr, iphdr->dest);
 800e122:	69fb      	ldr	r3, [r7, #28]
 800e124:	691b      	ldr	r3, [r3, #16]
 800e126:	617b      	str	r3, [r7, #20]
    dest = &dest_addr;
 800e128:	f107 0314 	add.w	r3, r7, #20
 800e12c:	607b      	str	r3, [r7, #4]
  }
#endif /* LWIP_MULTICAST_TX_OPTIONS */
#endif /* ENABLE_LOOPBACK */
#if IP_FRAG
  /* don't fragment if interface has mtu set to 0 [loopif] */
  if (netif->mtu && (p->tot_len > netif->mtu)) {
 800e12e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e130:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800e132:	2b00      	cmp	r3, #0
 800e134:	d00c      	beq.n	800e150 <ip4_output_if_src+0x120>
 800e136:	68fb      	ldr	r3, [r7, #12]
 800e138:	891a      	ldrh	r2, [r3, #8]
 800e13a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e13c:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800e13e:	429a      	cmp	r2, r3
 800e140:	d906      	bls.n	800e150 <ip4_output_if_src+0x120>
    return ip4_frag(p, netif, dest);
 800e142:	687a      	ldr	r2, [r7, #4]
 800e144:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800e146:	68f8      	ldr	r0, [r7, #12]
 800e148:	f000 fd0a 	bl	800eb60 <ip4_frag>
 800e14c:	4603      	mov	r3, r0
 800e14e:	e006      	b.n	800e15e <ip4_output_if_src+0x12e>
  }
#endif /* IP_FRAG */

  LWIP_DEBUGF(IP_DEBUG, ("ip4_output_if: call netif->output()\n"));
  return netif->output(netif, p, dest);
 800e150:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e152:	695b      	ldr	r3, [r3, #20]
 800e154:	687a      	ldr	r2, [r7, #4]
 800e156:	68f9      	ldr	r1, [r7, #12]
 800e158:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800e15a:	4798      	blx	r3
 800e15c:	4603      	mov	r3, r0
}
 800e15e:	4618      	mov	r0, r3
 800e160:	3720      	adds	r7, #32
 800e162:	46bd      	mov	sp, r7
 800e164:	bd80      	pop	{r7, pc}
 800e166:	bf00      	nop
 800e168:	08012d5c 	.word	0x08012d5c
 800e16c:	08012d90 	.word	0x08012d90
 800e170:	08012d9c 	.word	0x08012d9c
 800e174:	08012dc4 	.word	0x08012dc4
 800e178:	24004172 	.word	0x24004172
 800e17c:	080131fc 	.word	0x080131fc

0800e180 <ip4_addr_isbroadcast_u32>:
 * @param netif the network interface against which the address is checked
 * @return returns non-zero if the address is a broadcast address
 */
u8_t
ip4_addr_isbroadcast_u32(u32_t addr, const struct netif *netif)
{
 800e180:	b480      	push	{r7}
 800e182:	b085      	sub	sp, #20
 800e184:	af00      	add	r7, sp, #0
 800e186:	6078      	str	r0, [r7, #4]
 800e188:	6039      	str	r1, [r7, #0]
  ip4_addr_t ipaddr;
  ip4_addr_set_u32(&ipaddr, addr);
 800e18a:	687b      	ldr	r3, [r7, #4]
 800e18c:	60fb      	str	r3, [r7, #12]

  /* all ones (broadcast) or all zeroes (old skool broadcast) */
  if ((~addr == IPADDR_ANY) ||
 800e18e:	687b      	ldr	r3, [r7, #4]
 800e190:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e194:	d002      	beq.n	800e19c <ip4_addr_isbroadcast_u32+0x1c>
 800e196:	687b      	ldr	r3, [r7, #4]
 800e198:	2b00      	cmp	r3, #0
 800e19a:	d101      	bne.n	800e1a0 <ip4_addr_isbroadcast_u32+0x20>
      (addr == IPADDR_ANY)) {
    return 1;
 800e19c:	2301      	movs	r3, #1
 800e19e:	e02a      	b.n	800e1f6 <ip4_addr_isbroadcast_u32+0x76>
  /* no broadcast support on this network interface? */
  } else if ((netif->flags & NETIF_FLAG_BROADCAST) == 0) {
 800e1a0:	683b      	ldr	r3, [r7, #0]
 800e1a2:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 800e1a6:	f003 0302 	and.w	r3, r3, #2
 800e1aa:	2b00      	cmp	r3, #0
 800e1ac:	d101      	bne.n	800e1b2 <ip4_addr_isbroadcast_u32+0x32>
    /* the given address cannot be a broadcast address
     * nor can we check against any broadcast addresses */
    return 0;
 800e1ae:	2300      	movs	r3, #0
 800e1b0:	e021      	b.n	800e1f6 <ip4_addr_isbroadcast_u32+0x76>
  /* address matches network interface address exactly? => no broadcast */
  } else if (addr == ip4_addr_get_u32(netif_ip4_addr(netif))) {
 800e1b2:	683b      	ldr	r3, [r7, #0]
 800e1b4:	3304      	adds	r3, #4
 800e1b6:	681b      	ldr	r3, [r3, #0]
 800e1b8:	687a      	ldr	r2, [r7, #4]
 800e1ba:	429a      	cmp	r2, r3
 800e1bc:	d101      	bne.n	800e1c2 <ip4_addr_isbroadcast_u32+0x42>
    return 0;
 800e1be:	2300      	movs	r3, #0
 800e1c0:	e019      	b.n	800e1f6 <ip4_addr_isbroadcast_u32+0x76>
  /*  on the same (sub) network... */
  } else if (ip4_addr_netcmp(&ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif))
 800e1c2:	68fa      	ldr	r2, [r7, #12]
 800e1c4:	683b      	ldr	r3, [r7, #0]
 800e1c6:	3304      	adds	r3, #4
 800e1c8:	681b      	ldr	r3, [r3, #0]
 800e1ca:	405a      	eors	r2, r3
 800e1cc:	683b      	ldr	r3, [r7, #0]
 800e1ce:	3308      	adds	r3, #8
 800e1d0:	681b      	ldr	r3, [r3, #0]
 800e1d2:	4013      	ands	r3, r2
 800e1d4:	2b00      	cmp	r3, #0
 800e1d6:	d10d      	bne.n	800e1f4 <ip4_addr_isbroadcast_u32+0x74>
         /* ...and host identifier bits are all ones? =>... */
          && ((addr & ~ip4_addr_get_u32(netif_ip4_netmask(netif))) ==
 800e1d8:	683b      	ldr	r3, [r7, #0]
 800e1da:	3308      	adds	r3, #8
 800e1dc:	681b      	ldr	r3, [r3, #0]
 800e1de:	43da      	mvns	r2, r3
 800e1e0:	687b      	ldr	r3, [r7, #4]
 800e1e2:	401a      	ands	r2, r3
           (IPADDR_BROADCAST & ~ip4_addr_get_u32(netif_ip4_netmask(netif))))) {
 800e1e4:	683b      	ldr	r3, [r7, #0]
 800e1e6:	3308      	adds	r3, #8
 800e1e8:	681b      	ldr	r3, [r3, #0]
 800e1ea:	43db      	mvns	r3, r3
          && ((addr & ~ip4_addr_get_u32(netif_ip4_netmask(netif))) ==
 800e1ec:	429a      	cmp	r2, r3
 800e1ee:	d101      	bne.n	800e1f4 <ip4_addr_isbroadcast_u32+0x74>
    /* => network broadcast address */
    return 1;
 800e1f0:	2301      	movs	r3, #1
 800e1f2:	e000      	b.n	800e1f6 <ip4_addr_isbroadcast_u32+0x76>
  } else {
    return 0;
 800e1f4:	2300      	movs	r3, #0
  }
}
 800e1f6:	4618      	mov	r0, r3
 800e1f8:	3714      	adds	r7, #20
 800e1fa:	46bd      	mov	sp, r7
 800e1fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e200:	4770      	bx	lr
	...

0800e204 <ip_reass_tmr>:
 *
 * Should be called every 1000 msec (defined by IP_TMR_INTERVAL).
 */
void
ip_reass_tmr(void)
{
 800e204:	b580      	push	{r7, lr}
 800e206:	b084      	sub	sp, #16
 800e208:	af00      	add	r7, sp, #0
  struct ip_reassdata *r, *prev = NULL;
 800e20a:	2300      	movs	r3, #0
 800e20c:	60bb      	str	r3, [r7, #8]

  r = reassdatagrams;
 800e20e:	4b12      	ldr	r3, [pc, #72]	; (800e258 <ip_reass_tmr+0x54>)
 800e210:	681b      	ldr	r3, [r3, #0]
 800e212:	60fb      	str	r3, [r7, #12]
  while (r != NULL) {
 800e214:	e018      	b.n	800e248 <ip_reass_tmr+0x44>
    /* Decrement the timer. Once it reaches 0,
     * clean up the incomplete fragment assembly */
    if (r->timer > 0) {
 800e216:	68fb      	ldr	r3, [r7, #12]
 800e218:	7fdb      	ldrb	r3, [r3, #31]
 800e21a:	2b00      	cmp	r3, #0
 800e21c:	d00b      	beq.n	800e236 <ip_reass_tmr+0x32>
      r->timer--;
 800e21e:	68fb      	ldr	r3, [r7, #12]
 800e220:	7fdb      	ldrb	r3, [r3, #31]
 800e222:	3b01      	subs	r3, #1
 800e224:	b2da      	uxtb	r2, r3
 800e226:	68fb      	ldr	r3, [r7, #12]
 800e228:	77da      	strb	r2, [r3, #31]
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_tmr: timer dec %"U16_F"\n",(u16_t)r->timer));
      prev = r;
 800e22a:	68fb      	ldr	r3, [r7, #12]
 800e22c:	60bb      	str	r3, [r7, #8]
      r = r->next;
 800e22e:	68fb      	ldr	r3, [r7, #12]
 800e230:	681b      	ldr	r3, [r3, #0]
 800e232:	60fb      	str	r3, [r7, #12]
 800e234:	e008      	b.n	800e248 <ip_reass_tmr+0x44>
    } else {
      /* reassembly timed out */
      struct ip_reassdata *tmp;
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_tmr: timer timed out\n"));
      tmp = r;
 800e236:	68fb      	ldr	r3, [r7, #12]
 800e238:	607b      	str	r3, [r7, #4]
      /* get the next pointer before freeing */
      r = r->next;
 800e23a:	68fb      	ldr	r3, [r7, #12]
 800e23c:	681b      	ldr	r3, [r3, #0]
 800e23e:	60fb      	str	r3, [r7, #12]
      /* free the helper struct and all enqueued pbufs */
      ip_reass_free_complete_datagram(tmp, prev);
 800e240:	68b9      	ldr	r1, [r7, #8]
 800e242:	6878      	ldr	r0, [r7, #4]
 800e244:	f000 f80a 	bl	800e25c <ip_reass_free_complete_datagram>
  while (r != NULL) {
 800e248:	68fb      	ldr	r3, [r7, #12]
 800e24a:	2b00      	cmp	r3, #0
 800e24c:	d1e3      	bne.n	800e216 <ip_reass_tmr+0x12>
     }
   }
}
 800e24e:	bf00      	nop
 800e250:	3710      	adds	r7, #16
 800e252:	46bd      	mov	sp, r7
 800e254:	bd80      	pop	{r7, pc}
 800e256:	bf00      	nop
 800e258:	24004174 	.word	0x24004174

0800e25c <ip_reass_free_complete_datagram>:
 * @param prev the previous datagram in the linked list
 * @return the number of pbufs freed
 */
static int
ip_reass_free_complete_datagram(struct ip_reassdata *ipr, struct ip_reassdata *prev)
{
 800e25c:	b580      	push	{r7, lr}
 800e25e:	b088      	sub	sp, #32
 800e260:	af00      	add	r7, sp, #0
 800e262:	6078      	str	r0, [r7, #4]
 800e264:	6039      	str	r1, [r7, #0]
  u16_t pbufs_freed = 0;
 800e266:	2300      	movs	r3, #0
 800e268:	83fb      	strh	r3, [r7, #30]
  u16_t clen;
  struct pbuf *p;
  struct ip_reass_helper *iprh;

  LWIP_ASSERT("prev != ipr", prev != ipr);
 800e26a:	683a      	ldr	r2, [r7, #0]
 800e26c:	687b      	ldr	r3, [r7, #4]
 800e26e:	429a      	cmp	r2, r3
 800e270:	d105      	bne.n	800e27e <ip_reass_free_complete_datagram+0x22>
 800e272:	4b45      	ldr	r3, [pc, #276]	; (800e388 <ip_reass_free_complete_datagram+0x12c>)
 800e274:	22ab      	movs	r2, #171	; 0xab
 800e276:	4945      	ldr	r1, [pc, #276]	; (800e38c <ip_reass_free_complete_datagram+0x130>)
 800e278:	4845      	ldr	r0, [pc, #276]	; (800e390 <ip_reass_free_complete_datagram+0x134>)
 800e27a:	f002 f959 	bl	8010530 <iprintf>
  if (prev != NULL) {
 800e27e:	683b      	ldr	r3, [r7, #0]
 800e280:	2b00      	cmp	r3, #0
 800e282:	d00a      	beq.n	800e29a <ip_reass_free_complete_datagram+0x3e>
    LWIP_ASSERT("prev->next == ipr", prev->next == ipr);
 800e284:	683b      	ldr	r3, [r7, #0]
 800e286:	681b      	ldr	r3, [r3, #0]
 800e288:	687a      	ldr	r2, [r7, #4]
 800e28a:	429a      	cmp	r2, r3
 800e28c:	d005      	beq.n	800e29a <ip_reass_free_complete_datagram+0x3e>
 800e28e:	4b3e      	ldr	r3, [pc, #248]	; (800e388 <ip_reass_free_complete_datagram+0x12c>)
 800e290:	22ad      	movs	r2, #173	; 0xad
 800e292:	4940      	ldr	r1, [pc, #256]	; (800e394 <ip_reass_free_complete_datagram+0x138>)
 800e294:	483e      	ldr	r0, [pc, #248]	; (800e390 <ip_reass_free_complete_datagram+0x134>)
 800e296:	f002 f94b 	bl	8010530 <iprintf>
  }

  MIB2_STATS_INC(mib2.ipreasmfails);
#if LWIP_ICMP
  iprh = (struct ip_reass_helper *)ipr->p->payload;
 800e29a:	687b      	ldr	r3, [r7, #4]
 800e29c:	685b      	ldr	r3, [r3, #4]
 800e29e:	685b      	ldr	r3, [r3, #4]
 800e2a0:	617b      	str	r3, [r7, #20]
  if (iprh->start == 0) {
 800e2a2:	697b      	ldr	r3, [r7, #20]
 800e2a4:	889b      	ldrh	r3, [r3, #4]
 800e2a6:	b29b      	uxth	r3, r3
 800e2a8:	2b00      	cmp	r3, #0
 800e2aa:	d12a      	bne.n	800e302 <ip_reass_free_complete_datagram+0xa6>
    /* The first fragment was received, send ICMP time exceeded. */
    /* First, de-queue the first pbuf from r->p. */
    p = ipr->p;
 800e2ac:	687b      	ldr	r3, [r7, #4]
 800e2ae:	685b      	ldr	r3, [r3, #4]
 800e2b0:	61bb      	str	r3, [r7, #24]
    ipr->p = iprh->next_pbuf;
 800e2b2:	697b      	ldr	r3, [r7, #20]
 800e2b4:	681a      	ldr	r2, [r3, #0]
 800e2b6:	687b      	ldr	r3, [r7, #4]
 800e2b8:	605a      	str	r2, [r3, #4]
    /* Then, copy the original header into it. */
    SMEMCPY(p->payload, &ipr->iphdr, IP_HLEN);
 800e2ba:	69bb      	ldr	r3, [r7, #24]
 800e2bc:	6858      	ldr	r0, [r3, #4]
 800e2be:	687b      	ldr	r3, [r7, #4]
 800e2c0:	3308      	adds	r3, #8
 800e2c2:	2214      	movs	r2, #20
 800e2c4:	4619      	mov	r1, r3
 800e2c6:	f002 f920 	bl	801050a <memcpy>
    icmp_time_exceeded(p, ICMP_TE_FRAG);
 800e2ca:	2101      	movs	r1, #1
 800e2cc:	69b8      	ldr	r0, [r7, #24]
 800e2ce:	f7ff fc65 	bl	800db9c <icmp_time_exceeded>
    clen = pbuf_clen(p);
 800e2d2:	69b8      	ldr	r0, [r7, #24]
 800e2d4:	f7f9 fbc8 	bl	8007a68 <pbuf_clen>
 800e2d8:	4603      	mov	r3, r0
 800e2da:	827b      	strh	r3, [r7, #18]
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 800e2dc:	8bfa      	ldrh	r2, [r7, #30]
 800e2de:	8a7b      	ldrh	r3, [r7, #18]
 800e2e0:	4413      	add	r3, r2
 800e2e2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800e2e6:	db05      	blt.n	800e2f4 <ip_reass_free_complete_datagram+0x98>
 800e2e8:	4b27      	ldr	r3, [pc, #156]	; (800e388 <ip_reass_free_complete_datagram+0x12c>)
 800e2ea:	22bc      	movs	r2, #188	; 0xbc
 800e2ec:	492a      	ldr	r1, [pc, #168]	; (800e398 <ip_reass_free_complete_datagram+0x13c>)
 800e2ee:	4828      	ldr	r0, [pc, #160]	; (800e390 <ip_reass_free_complete_datagram+0x134>)
 800e2f0:	f002 f91e 	bl	8010530 <iprintf>
    pbufs_freed += clen;
 800e2f4:	8bfa      	ldrh	r2, [r7, #30]
 800e2f6:	8a7b      	ldrh	r3, [r7, #18]
 800e2f8:	4413      	add	r3, r2
 800e2fa:	83fb      	strh	r3, [r7, #30]
    pbuf_free(p);
 800e2fc:	69b8      	ldr	r0, [r7, #24]
 800e2fe:	f7f9 fb19 	bl	8007934 <pbuf_free>
  }
#endif /* LWIP_ICMP */

  /* First, free all received pbufs.  The individual pbufs need to be released
     separately as they have not yet been chained */
  p = ipr->p;
 800e302:	687b      	ldr	r3, [r7, #4]
 800e304:	685b      	ldr	r3, [r3, #4]
 800e306:	61bb      	str	r3, [r7, #24]
  while (p != NULL) {
 800e308:	e01f      	b.n	800e34a <ip_reass_free_complete_datagram+0xee>
    struct pbuf *pcur;
    iprh = (struct ip_reass_helper *)p->payload;
 800e30a:	69bb      	ldr	r3, [r7, #24]
 800e30c:	685b      	ldr	r3, [r3, #4]
 800e30e:	617b      	str	r3, [r7, #20]
    pcur = p;
 800e310:	69bb      	ldr	r3, [r7, #24]
 800e312:	60fb      	str	r3, [r7, #12]
    /* get the next pointer before freeing */
    p = iprh->next_pbuf;
 800e314:	697b      	ldr	r3, [r7, #20]
 800e316:	681b      	ldr	r3, [r3, #0]
 800e318:	61bb      	str	r3, [r7, #24]
    clen = pbuf_clen(pcur);
 800e31a:	68f8      	ldr	r0, [r7, #12]
 800e31c:	f7f9 fba4 	bl	8007a68 <pbuf_clen>
 800e320:	4603      	mov	r3, r0
 800e322:	827b      	strh	r3, [r7, #18]
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 800e324:	8bfa      	ldrh	r2, [r7, #30]
 800e326:	8a7b      	ldrh	r3, [r7, #18]
 800e328:	4413      	add	r3, r2
 800e32a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800e32e:	db05      	blt.n	800e33c <ip_reass_free_complete_datagram+0xe0>
 800e330:	4b15      	ldr	r3, [pc, #84]	; (800e388 <ip_reass_free_complete_datagram+0x12c>)
 800e332:	22cc      	movs	r2, #204	; 0xcc
 800e334:	4918      	ldr	r1, [pc, #96]	; (800e398 <ip_reass_free_complete_datagram+0x13c>)
 800e336:	4816      	ldr	r0, [pc, #88]	; (800e390 <ip_reass_free_complete_datagram+0x134>)
 800e338:	f002 f8fa 	bl	8010530 <iprintf>
    pbufs_freed += clen;
 800e33c:	8bfa      	ldrh	r2, [r7, #30]
 800e33e:	8a7b      	ldrh	r3, [r7, #18]
 800e340:	4413      	add	r3, r2
 800e342:	83fb      	strh	r3, [r7, #30]
    pbuf_free(pcur);
 800e344:	68f8      	ldr	r0, [r7, #12]
 800e346:	f7f9 faf5 	bl	8007934 <pbuf_free>
  while (p != NULL) {
 800e34a:	69bb      	ldr	r3, [r7, #24]
 800e34c:	2b00      	cmp	r3, #0
 800e34e:	d1dc      	bne.n	800e30a <ip_reass_free_complete_datagram+0xae>
  }
  /* Then, unchain the struct ip_reassdata from the list and free it. */
  ip_reass_dequeue_datagram(ipr, prev);
 800e350:	6839      	ldr	r1, [r7, #0]
 800e352:	6878      	ldr	r0, [r7, #4]
 800e354:	f000 f8c2 	bl	800e4dc <ip_reass_dequeue_datagram>
  LWIP_ASSERT("ip_reass_pbufcount >= clen", ip_reass_pbufcount >= pbufs_freed);
 800e358:	4b10      	ldr	r3, [pc, #64]	; (800e39c <ip_reass_free_complete_datagram+0x140>)
 800e35a:	881b      	ldrh	r3, [r3, #0]
 800e35c:	8bfa      	ldrh	r2, [r7, #30]
 800e35e:	429a      	cmp	r2, r3
 800e360:	d905      	bls.n	800e36e <ip_reass_free_complete_datagram+0x112>
 800e362:	4b09      	ldr	r3, [pc, #36]	; (800e388 <ip_reass_free_complete_datagram+0x12c>)
 800e364:	22d2      	movs	r2, #210	; 0xd2
 800e366:	490e      	ldr	r1, [pc, #56]	; (800e3a0 <ip_reass_free_complete_datagram+0x144>)
 800e368:	4809      	ldr	r0, [pc, #36]	; (800e390 <ip_reass_free_complete_datagram+0x134>)
 800e36a:	f002 f8e1 	bl	8010530 <iprintf>
  ip_reass_pbufcount -= pbufs_freed;
 800e36e:	4b0b      	ldr	r3, [pc, #44]	; (800e39c <ip_reass_free_complete_datagram+0x140>)
 800e370:	881a      	ldrh	r2, [r3, #0]
 800e372:	8bfb      	ldrh	r3, [r7, #30]
 800e374:	1ad3      	subs	r3, r2, r3
 800e376:	b29a      	uxth	r2, r3
 800e378:	4b08      	ldr	r3, [pc, #32]	; (800e39c <ip_reass_free_complete_datagram+0x140>)
 800e37a:	801a      	strh	r2, [r3, #0]

  return pbufs_freed;
 800e37c:	8bfb      	ldrh	r3, [r7, #30]
}
 800e37e:	4618      	mov	r0, r3
 800e380:	3720      	adds	r7, #32
 800e382:	46bd      	mov	sp, r7
 800e384:	bd80      	pop	{r7, pc}
 800e386:	bf00      	nop
 800e388:	08012df4 	.word	0x08012df4
 800e38c:	08012e30 	.word	0x08012e30
 800e390:	08012e3c 	.word	0x08012e3c
 800e394:	08012e64 	.word	0x08012e64
 800e398:	08012e78 	.word	0x08012e78
 800e39c:	24004178 	.word	0x24004178
 800e3a0:	08012e98 	.word	0x08012e98

0800e3a4 <ip_reass_remove_oldest_datagram>:
 *        (used for freeing other datagrams if not enough space)
 * @return the number of pbufs freed
 */
static int
ip_reass_remove_oldest_datagram(struct ip_hdr *fraghdr, int pbufs_needed)
{
 800e3a4:	b580      	push	{r7, lr}
 800e3a6:	b08a      	sub	sp, #40	; 0x28
 800e3a8:	af00      	add	r7, sp, #0
 800e3aa:	6078      	str	r0, [r7, #4]
 800e3ac:	6039      	str	r1, [r7, #0]
  /* @todo Can't we simply remove the last datagram in the
   *       linked list behind reassdatagrams?
   */
  struct ip_reassdata *r, *oldest, *prev, *oldest_prev;
  int pbufs_freed = 0, pbufs_freed_current;
 800e3ae:	2300      	movs	r3, #0
 800e3b0:	617b      	str	r3, [r7, #20]
  int other_datagrams;

  /* Free datagrams until being allowed to enqueue 'pbufs_needed' pbufs,
   * but don't free the datagram that 'fraghdr' belongs to! */
  do {
    oldest = NULL;
 800e3b2:	2300      	movs	r3, #0
 800e3b4:	623b      	str	r3, [r7, #32]
    prev = NULL;
 800e3b6:	2300      	movs	r3, #0
 800e3b8:	61fb      	str	r3, [r7, #28]
    oldest_prev = NULL;
 800e3ba:	2300      	movs	r3, #0
 800e3bc:	61bb      	str	r3, [r7, #24]
    other_datagrams = 0;
 800e3be:	2300      	movs	r3, #0
 800e3c0:	613b      	str	r3, [r7, #16]
    r = reassdatagrams;
 800e3c2:	4b28      	ldr	r3, [pc, #160]	; (800e464 <ip_reass_remove_oldest_datagram+0xc0>)
 800e3c4:	681b      	ldr	r3, [r3, #0]
 800e3c6:	627b      	str	r3, [r7, #36]	; 0x24
    while (r != NULL) {
 800e3c8:	e030      	b.n	800e42c <ip_reass_remove_oldest_datagram+0x88>
      if (!IP_ADDRESSES_AND_ID_MATCH(&r->iphdr, fraghdr)) {
 800e3ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e3cc:	695a      	ldr	r2, [r3, #20]
 800e3ce:	687b      	ldr	r3, [r7, #4]
 800e3d0:	68db      	ldr	r3, [r3, #12]
 800e3d2:	429a      	cmp	r2, r3
 800e3d4:	d10c      	bne.n	800e3f0 <ip_reass_remove_oldest_datagram+0x4c>
 800e3d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e3d8:	699a      	ldr	r2, [r3, #24]
 800e3da:	687b      	ldr	r3, [r7, #4]
 800e3dc:	691b      	ldr	r3, [r3, #16]
 800e3de:	429a      	cmp	r2, r3
 800e3e0:	d106      	bne.n	800e3f0 <ip_reass_remove_oldest_datagram+0x4c>
 800e3e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e3e4:	899a      	ldrh	r2, [r3, #12]
 800e3e6:	687b      	ldr	r3, [r7, #4]
 800e3e8:	889b      	ldrh	r3, [r3, #4]
 800e3ea:	b29b      	uxth	r3, r3
 800e3ec:	429a      	cmp	r2, r3
 800e3ee:	d014      	beq.n	800e41a <ip_reass_remove_oldest_datagram+0x76>
        /* Not the same datagram as fraghdr */
        other_datagrams++;
 800e3f0:	693b      	ldr	r3, [r7, #16]
 800e3f2:	3301      	adds	r3, #1
 800e3f4:	613b      	str	r3, [r7, #16]
        if (oldest == NULL) {
 800e3f6:	6a3b      	ldr	r3, [r7, #32]
 800e3f8:	2b00      	cmp	r3, #0
 800e3fa:	d104      	bne.n	800e406 <ip_reass_remove_oldest_datagram+0x62>
          oldest = r;
 800e3fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e3fe:	623b      	str	r3, [r7, #32]
          oldest_prev = prev;
 800e400:	69fb      	ldr	r3, [r7, #28]
 800e402:	61bb      	str	r3, [r7, #24]
 800e404:	e009      	b.n	800e41a <ip_reass_remove_oldest_datagram+0x76>
        } else if (r->timer <= oldest->timer) {
 800e406:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e408:	7fda      	ldrb	r2, [r3, #31]
 800e40a:	6a3b      	ldr	r3, [r7, #32]
 800e40c:	7fdb      	ldrb	r3, [r3, #31]
 800e40e:	429a      	cmp	r2, r3
 800e410:	d803      	bhi.n	800e41a <ip_reass_remove_oldest_datagram+0x76>
          /* older than the previous oldest */
          oldest = r;
 800e412:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e414:	623b      	str	r3, [r7, #32]
          oldest_prev = prev;
 800e416:	69fb      	ldr	r3, [r7, #28]
 800e418:	61bb      	str	r3, [r7, #24]
        }
      }
      if (r->next != NULL) {
 800e41a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e41c:	681b      	ldr	r3, [r3, #0]
 800e41e:	2b00      	cmp	r3, #0
 800e420:	d001      	beq.n	800e426 <ip_reass_remove_oldest_datagram+0x82>
        prev = r;
 800e422:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e424:	61fb      	str	r3, [r7, #28]
      }
      r = r->next;
 800e426:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e428:	681b      	ldr	r3, [r3, #0]
 800e42a:	627b      	str	r3, [r7, #36]	; 0x24
    while (r != NULL) {
 800e42c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e42e:	2b00      	cmp	r3, #0
 800e430:	d1cb      	bne.n	800e3ca <ip_reass_remove_oldest_datagram+0x26>
    }
    if (oldest != NULL) {
 800e432:	6a3b      	ldr	r3, [r7, #32]
 800e434:	2b00      	cmp	r3, #0
 800e436:	d008      	beq.n	800e44a <ip_reass_remove_oldest_datagram+0xa6>
      pbufs_freed_current = ip_reass_free_complete_datagram(oldest, oldest_prev);
 800e438:	69b9      	ldr	r1, [r7, #24]
 800e43a:	6a38      	ldr	r0, [r7, #32]
 800e43c:	f7ff ff0e 	bl	800e25c <ip_reass_free_complete_datagram>
 800e440:	60f8      	str	r0, [r7, #12]
      pbufs_freed += pbufs_freed_current;
 800e442:	697a      	ldr	r2, [r7, #20]
 800e444:	68fb      	ldr	r3, [r7, #12]
 800e446:	4413      	add	r3, r2
 800e448:	617b      	str	r3, [r7, #20]
    }
  } while ((pbufs_freed < pbufs_needed) && (other_datagrams > 1));
 800e44a:	697a      	ldr	r2, [r7, #20]
 800e44c:	683b      	ldr	r3, [r7, #0]
 800e44e:	429a      	cmp	r2, r3
 800e450:	da02      	bge.n	800e458 <ip_reass_remove_oldest_datagram+0xb4>
 800e452:	693b      	ldr	r3, [r7, #16]
 800e454:	2b01      	cmp	r3, #1
 800e456:	dcac      	bgt.n	800e3b2 <ip_reass_remove_oldest_datagram+0xe>
  return pbufs_freed;
 800e458:	697b      	ldr	r3, [r7, #20]
}
 800e45a:	4618      	mov	r0, r3
 800e45c:	3728      	adds	r7, #40	; 0x28
 800e45e:	46bd      	mov	sp, r7
 800e460:	bd80      	pop	{r7, pc}
 800e462:	bf00      	nop
 800e464:	24004174 	.word	0x24004174

0800e468 <ip_reass_enqueue_new_datagram>:
 * @param clen number of pbufs needed to enqueue (used for freeing other datagrams if not enough space)
 * @return A pointer to the queue location into which the fragment was enqueued
 */
static struct ip_reassdata*
ip_reass_enqueue_new_datagram(struct ip_hdr *fraghdr, int clen)
{
 800e468:	b580      	push	{r7, lr}
 800e46a:	b084      	sub	sp, #16
 800e46c:	af00      	add	r7, sp, #0
 800e46e:	6078      	str	r0, [r7, #4]
 800e470:	6039      	str	r1, [r7, #0]
#if ! IP_REASS_FREE_OLDEST
  LWIP_UNUSED_ARG(clen);
#endif

  /* No matching previous fragment found, allocate a new reassdata struct */
  ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 800e472:	2004      	movs	r0, #4
 800e474:	f7f8 fc3e 	bl	8006cf4 <memp_malloc>
 800e478:	60f8      	str	r0, [r7, #12]
  if (ipr == NULL) {
 800e47a:	68fb      	ldr	r3, [r7, #12]
 800e47c:	2b00      	cmp	r3, #0
 800e47e:	d110      	bne.n	800e4a2 <ip_reass_enqueue_new_datagram+0x3a>
#if IP_REASS_FREE_OLDEST
    if (ip_reass_remove_oldest_datagram(fraghdr, clen) >= clen) {
 800e480:	6839      	ldr	r1, [r7, #0]
 800e482:	6878      	ldr	r0, [r7, #4]
 800e484:	f7ff ff8e 	bl	800e3a4 <ip_reass_remove_oldest_datagram>
 800e488:	4602      	mov	r2, r0
 800e48a:	683b      	ldr	r3, [r7, #0]
 800e48c:	4293      	cmp	r3, r2
 800e48e:	dc03      	bgt.n	800e498 <ip_reass_enqueue_new_datagram+0x30>
      ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 800e490:	2004      	movs	r0, #4
 800e492:	f7f8 fc2f 	bl	8006cf4 <memp_malloc>
 800e496:	60f8      	str	r0, [r7, #12]
    }
    if (ipr == NULL)
 800e498:	68fb      	ldr	r3, [r7, #12]
 800e49a:	2b00      	cmp	r3, #0
 800e49c:	d101      	bne.n	800e4a2 <ip_reass_enqueue_new_datagram+0x3a>
#endif /* IP_REASS_FREE_OLDEST */
    {
      IPFRAG_STATS_INC(ip_frag.memerr);
      LWIP_DEBUGF(IP_REASS_DEBUG,("Failed to alloc reassdata struct\n"));
      return NULL;
 800e49e:	2300      	movs	r3, #0
 800e4a0:	e016      	b.n	800e4d0 <ip_reass_enqueue_new_datagram+0x68>
    }
  }
  memset(ipr, 0, sizeof(struct ip_reassdata));
 800e4a2:	2220      	movs	r2, #32
 800e4a4:	2100      	movs	r1, #0
 800e4a6:	68f8      	ldr	r0, [r7, #12]
 800e4a8:	f002 f83a 	bl	8010520 <memset>
  ipr->timer = IP_REASS_MAXAGE;
 800e4ac:	68fb      	ldr	r3, [r7, #12]
 800e4ae:	2203      	movs	r2, #3
 800e4b0:	77da      	strb	r2, [r3, #31]

  /* enqueue the new structure to the front of the list */
  ipr->next = reassdatagrams;
 800e4b2:	4b09      	ldr	r3, [pc, #36]	; (800e4d8 <ip_reass_enqueue_new_datagram+0x70>)
 800e4b4:	681a      	ldr	r2, [r3, #0]
 800e4b6:	68fb      	ldr	r3, [r7, #12]
 800e4b8:	601a      	str	r2, [r3, #0]
  reassdatagrams = ipr;
 800e4ba:	4a07      	ldr	r2, [pc, #28]	; (800e4d8 <ip_reass_enqueue_new_datagram+0x70>)
 800e4bc:	68fb      	ldr	r3, [r7, #12]
 800e4be:	6013      	str	r3, [r2, #0]
  /* copy the ip header for later tests and input */
  /* @todo: no ip options supported? */
  SMEMCPY(&(ipr->iphdr), fraghdr, IP_HLEN);
 800e4c0:	68fb      	ldr	r3, [r7, #12]
 800e4c2:	3308      	adds	r3, #8
 800e4c4:	2214      	movs	r2, #20
 800e4c6:	6879      	ldr	r1, [r7, #4]
 800e4c8:	4618      	mov	r0, r3
 800e4ca:	f002 f81e 	bl	801050a <memcpy>
  return ipr;
 800e4ce:	68fb      	ldr	r3, [r7, #12]
}
 800e4d0:	4618      	mov	r0, r3
 800e4d2:	3710      	adds	r7, #16
 800e4d4:	46bd      	mov	sp, r7
 800e4d6:	bd80      	pop	{r7, pc}
 800e4d8:	24004174 	.word	0x24004174

0800e4dc <ip_reass_dequeue_datagram>:
 * Dequeues a datagram from the datagram queue. Doesn't deallocate the pbufs.
 * @param ipr points to the queue entry to dequeue
 */
static void
ip_reass_dequeue_datagram(struct ip_reassdata *ipr, struct ip_reassdata *prev)
{
 800e4dc:	b580      	push	{r7, lr}
 800e4de:	b082      	sub	sp, #8
 800e4e0:	af00      	add	r7, sp, #0
 800e4e2:	6078      	str	r0, [r7, #4]
 800e4e4:	6039      	str	r1, [r7, #0]
  /* dequeue the reass struct  */
  if (reassdatagrams == ipr) {
 800e4e6:	4b10      	ldr	r3, [pc, #64]	; (800e528 <ip_reass_dequeue_datagram+0x4c>)
 800e4e8:	681b      	ldr	r3, [r3, #0]
 800e4ea:	687a      	ldr	r2, [r7, #4]
 800e4ec:	429a      	cmp	r2, r3
 800e4ee:	d104      	bne.n	800e4fa <ip_reass_dequeue_datagram+0x1e>
    /* it was the first in the list */
    reassdatagrams = ipr->next;
 800e4f0:	687b      	ldr	r3, [r7, #4]
 800e4f2:	681b      	ldr	r3, [r3, #0]
 800e4f4:	4a0c      	ldr	r2, [pc, #48]	; (800e528 <ip_reass_dequeue_datagram+0x4c>)
 800e4f6:	6013      	str	r3, [r2, #0]
 800e4f8:	e00d      	b.n	800e516 <ip_reass_dequeue_datagram+0x3a>
  } else {
    /* it wasn't the first, so it must have a valid 'prev' */
    LWIP_ASSERT("sanity check linked list", prev != NULL);
 800e4fa:	683b      	ldr	r3, [r7, #0]
 800e4fc:	2b00      	cmp	r3, #0
 800e4fe:	d106      	bne.n	800e50e <ip_reass_dequeue_datagram+0x32>
 800e500:	4b0a      	ldr	r3, [pc, #40]	; (800e52c <ip_reass_dequeue_datagram+0x50>)
 800e502:	f240 1245 	movw	r2, #325	; 0x145
 800e506:	490a      	ldr	r1, [pc, #40]	; (800e530 <ip_reass_dequeue_datagram+0x54>)
 800e508:	480a      	ldr	r0, [pc, #40]	; (800e534 <ip_reass_dequeue_datagram+0x58>)
 800e50a:	f002 f811 	bl	8010530 <iprintf>
    prev->next = ipr->next;
 800e50e:	687b      	ldr	r3, [r7, #4]
 800e510:	681a      	ldr	r2, [r3, #0]
 800e512:	683b      	ldr	r3, [r7, #0]
 800e514:	601a      	str	r2, [r3, #0]
  }

  /* now we can free the ip_reassdata struct */
  memp_free(MEMP_REASSDATA, ipr);
 800e516:	6879      	ldr	r1, [r7, #4]
 800e518:	2004      	movs	r0, #4
 800e51a:	f7f8 fc61 	bl	8006de0 <memp_free>
}
 800e51e:	bf00      	nop
 800e520:	3708      	adds	r7, #8
 800e522:	46bd      	mov	sp, r7
 800e524:	bd80      	pop	{r7, pc}
 800e526:	bf00      	nop
 800e528:	24004174 	.word	0x24004174
 800e52c:	08012df4 	.word	0x08012df4
 800e530:	08012eb4 	.word	0x08012eb4
 800e534:	08012e3c 	.word	0x08012e3c

0800e538 <ip_reass_chain_frag_into_datagram_and_validate>:
 * @param is_last is 1 if this pbuf has MF==0 (ipr->flags not updated yet)
 * @return see IP_REASS_VALIDATE_* defines
 */
static int
ip_reass_chain_frag_into_datagram_and_validate(struct ip_reassdata *ipr, struct pbuf *new_p, int is_last)
{
 800e538:	b580      	push	{r7, lr}
 800e53a:	b08c      	sub	sp, #48	; 0x30
 800e53c:	af00      	add	r7, sp, #0
 800e53e:	60f8      	str	r0, [r7, #12]
 800e540:	60b9      	str	r1, [r7, #8]
 800e542:	607a      	str	r2, [r7, #4]
  struct ip_reass_helper *iprh, *iprh_tmp, *iprh_prev=NULL;
 800e544:	2300      	movs	r3, #0
 800e546:	62bb      	str	r3, [r7, #40]	; 0x28
  struct pbuf *q;
  u16_t offset, len;
  struct ip_hdr *fraghdr;
  int valid = 1;
 800e548:	2301      	movs	r3, #1
 800e54a:	623b      	str	r3, [r7, #32]

  /* Extract length and fragment offset from current fragment */
  fraghdr = (struct ip_hdr*)new_p->payload;
 800e54c:	68bb      	ldr	r3, [r7, #8]
 800e54e:	685b      	ldr	r3, [r3, #4]
 800e550:	61fb      	str	r3, [r7, #28]
  len = lwip_ntohs(IPH_LEN(fraghdr)) - IPH_HL(fraghdr) * 4;
 800e552:	69fb      	ldr	r3, [r7, #28]
 800e554:	885b      	ldrh	r3, [r3, #2]
 800e556:	b29b      	uxth	r3, r3
 800e558:	4618      	mov	r0, r3
 800e55a:	f7f7 ffbf 	bl	80064dc <lwip_htons>
 800e55e:	4603      	mov	r3, r0
 800e560:	461a      	mov	r2, r3
 800e562:	69fb      	ldr	r3, [r7, #28]
 800e564:	781b      	ldrb	r3, [r3, #0]
 800e566:	b29b      	uxth	r3, r3
 800e568:	f003 030f 	and.w	r3, r3, #15
 800e56c:	b29b      	uxth	r3, r3
 800e56e:	009b      	lsls	r3, r3, #2
 800e570:	b29b      	uxth	r3, r3
 800e572:	1ad3      	subs	r3, r2, r3
 800e574:	837b      	strh	r3, [r7, #26]
  offset = (lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) * 8;
 800e576:	69fb      	ldr	r3, [r7, #28]
 800e578:	88db      	ldrh	r3, [r3, #6]
 800e57a:	b29b      	uxth	r3, r3
 800e57c:	4618      	mov	r0, r3
 800e57e:	f7f7 ffad 	bl	80064dc <lwip_htons>
 800e582:	4603      	mov	r3, r0
 800e584:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800e588:	b29b      	uxth	r3, r3
 800e58a:	00db      	lsls	r3, r3, #3
 800e58c:	833b      	strh	r3, [r7, #24]
  /* overwrite the fragment's ip header from the pbuf with our helper struct,
   * and setup the embedded helper structure. */
  /* make sure the struct ip_reass_helper fits into the IP header */
  LWIP_ASSERT("sizeof(struct ip_reass_helper) <= IP_HLEN",
              sizeof(struct ip_reass_helper) <= IP_HLEN);
  iprh = (struct ip_reass_helper*)new_p->payload;
 800e58e:	68bb      	ldr	r3, [r7, #8]
 800e590:	685b      	ldr	r3, [r3, #4]
 800e592:	62fb      	str	r3, [r7, #44]	; 0x2c
  iprh->next_pbuf = NULL;
 800e594:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e596:	2200      	movs	r2, #0
 800e598:	701a      	strb	r2, [r3, #0]
 800e59a:	2200      	movs	r2, #0
 800e59c:	705a      	strb	r2, [r3, #1]
 800e59e:	2200      	movs	r2, #0
 800e5a0:	709a      	strb	r2, [r3, #2]
 800e5a2:	2200      	movs	r2, #0
 800e5a4:	70da      	strb	r2, [r3, #3]
  iprh->start = offset;
 800e5a6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e5a8:	8b3a      	ldrh	r2, [r7, #24]
 800e5aa:	809a      	strh	r2, [r3, #4]
  iprh->end = offset + len;
 800e5ac:	8b3a      	ldrh	r2, [r7, #24]
 800e5ae:	8b7b      	ldrh	r3, [r7, #26]
 800e5b0:	4413      	add	r3, r2
 800e5b2:	b29a      	uxth	r2, r3
 800e5b4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e5b6:	80da      	strh	r2, [r3, #6]

  /* Iterate through until we either get to the end of the list (append),
   * or we find one with a larger offset (insert). */
  for (q = ipr->p; q != NULL;) {
 800e5b8:	68fb      	ldr	r3, [r7, #12]
 800e5ba:	685b      	ldr	r3, [r3, #4]
 800e5bc:	627b      	str	r3, [r7, #36]	; 0x24
 800e5be:	e061      	b.n	800e684 <ip_reass_chain_frag_into_datagram_and_validate+0x14c>
    iprh_tmp = (struct ip_reass_helper*)q->payload;
 800e5c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e5c2:	685b      	ldr	r3, [r3, #4]
 800e5c4:	617b      	str	r3, [r7, #20]
    if (iprh->start < iprh_tmp->start) {
 800e5c6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e5c8:	889b      	ldrh	r3, [r3, #4]
 800e5ca:	b29a      	uxth	r2, r3
 800e5cc:	697b      	ldr	r3, [r7, #20]
 800e5ce:	889b      	ldrh	r3, [r3, #4]
 800e5d0:	b29b      	uxth	r3, r3
 800e5d2:	429a      	cmp	r2, r3
 800e5d4:	d232      	bcs.n	800e63c <ip_reass_chain_frag_into_datagram_and_validate+0x104>
      /* the new pbuf should be inserted before this */
      iprh->next_pbuf = q;
 800e5d6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e5d8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800e5da:	601a      	str	r2, [r3, #0]
      if (iprh_prev != NULL) {
 800e5dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e5de:	2b00      	cmp	r3, #0
 800e5e0:	d01f      	beq.n	800e622 <ip_reass_chain_frag_into_datagram_and_validate+0xea>
        /* not the fragment with the lowest offset */
#if IP_REASS_CHECK_OVERLAP
        if ((iprh->start < iprh_prev->end) || (iprh->end > iprh_tmp->start)) {
 800e5e2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e5e4:	889b      	ldrh	r3, [r3, #4]
 800e5e6:	b29a      	uxth	r2, r3
 800e5e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e5ea:	88db      	ldrh	r3, [r3, #6]
 800e5ec:	b29b      	uxth	r3, r3
 800e5ee:	429a      	cmp	r2, r3
 800e5f0:	f0c0 80e3 	bcc.w	800e7ba <ip_reass_chain_frag_into_datagram_and_validate+0x282>
 800e5f4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e5f6:	88db      	ldrh	r3, [r3, #6]
 800e5f8:	b29a      	uxth	r2, r3
 800e5fa:	697b      	ldr	r3, [r7, #20]
 800e5fc:	889b      	ldrh	r3, [r3, #4]
 800e5fe:	b29b      	uxth	r3, r3
 800e600:	429a      	cmp	r2, r3
 800e602:	f200 80da 	bhi.w	800e7ba <ip_reass_chain_frag_into_datagram_and_validate+0x282>
          /* fragment overlaps with previous or following, throw away */
          goto freepbuf;
        }
#endif /* IP_REASS_CHECK_OVERLAP */
        iprh_prev->next_pbuf = new_p;
 800e606:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e608:	68ba      	ldr	r2, [r7, #8]
 800e60a:	601a      	str	r2, [r3, #0]
        if (iprh_prev->end != iprh->start) {
 800e60c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e60e:	88db      	ldrh	r3, [r3, #6]
 800e610:	b29a      	uxth	r2, r3
 800e612:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e614:	889b      	ldrh	r3, [r3, #4]
 800e616:	b29b      	uxth	r3, r3
 800e618:	429a      	cmp	r2, r3
 800e61a:	d037      	beq.n	800e68c <ip_reass_chain_frag_into_datagram_and_validate+0x154>
          /* There is a fragment missing between the current
           * and the previous fragment */
          valid = 0;
 800e61c:	2300      	movs	r3, #0
 800e61e:	623b      	str	r3, [r7, #32]
        }
#endif /* IP_REASS_CHECK_OVERLAP */
        /* fragment with the lowest offset */
        ipr->p = new_p;
      }
      break;
 800e620:	e034      	b.n	800e68c <ip_reass_chain_frag_into_datagram_and_validate+0x154>
        if (iprh->end > iprh_tmp->start) {
 800e622:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e624:	88db      	ldrh	r3, [r3, #6]
 800e626:	b29a      	uxth	r2, r3
 800e628:	697b      	ldr	r3, [r7, #20]
 800e62a:	889b      	ldrh	r3, [r3, #4]
 800e62c:	b29b      	uxth	r3, r3
 800e62e:	429a      	cmp	r2, r3
 800e630:	f200 80c5 	bhi.w	800e7be <ip_reass_chain_frag_into_datagram_and_validate+0x286>
        ipr->p = new_p;
 800e634:	68fb      	ldr	r3, [r7, #12]
 800e636:	68ba      	ldr	r2, [r7, #8]
 800e638:	605a      	str	r2, [r3, #4]
      break;
 800e63a:	e027      	b.n	800e68c <ip_reass_chain_frag_into_datagram_and_validate+0x154>
    } else if (iprh->start == iprh_tmp->start) {
 800e63c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e63e:	889b      	ldrh	r3, [r3, #4]
 800e640:	b29a      	uxth	r2, r3
 800e642:	697b      	ldr	r3, [r7, #20]
 800e644:	889b      	ldrh	r3, [r3, #4]
 800e646:	b29b      	uxth	r3, r3
 800e648:	429a      	cmp	r2, r3
 800e64a:	f000 80ba 	beq.w	800e7c2 <ip_reass_chain_frag_into_datagram_and_validate+0x28a>
      /* received the same datagram twice: no need to keep the datagram */
      goto freepbuf;
#if IP_REASS_CHECK_OVERLAP
    } else if (iprh->start < iprh_tmp->end) {
 800e64e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e650:	889b      	ldrh	r3, [r3, #4]
 800e652:	b29a      	uxth	r2, r3
 800e654:	697b      	ldr	r3, [r7, #20]
 800e656:	88db      	ldrh	r3, [r3, #6]
 800e658:	b29b      	uxth	r3, r3
 800e65a:	429a      	cmp	r2, r3
 800e65c:	f0c0 80b3 	bcc.w	800e7c6 <ip_reass_chain_frag_into_datagram_and_validate+0x28e>
      /* overlap: no need to keep the new datagram */
      goto freepbuf;
#endif /* IP_REASS_CHECK_OVERLAP */
    } else {
      /* Check if the fragments received so far have no holes. */
      if (iprh_prev != NULL) {
 800e660:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e662:	2b00      	cmp	r3, #0
 800e664:	d009      	beq.n	800e67a <ip_reass_chain_frag_into_datagram_and_validate+0x142>
        if (iprh_prev->end != iprh_tmp->start) {
 800e666:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e668:	88db      	ldrh	r3, [r3, #6]
 800e66a:	b29a      	uxth	r2, r3
 800e66c:	697b      	ldr	r3, [r7, #20]
 800e66e:	889b      	ldrh	r3, [r3, #4]
 800e670:	b29b      	uxth	r3, r3
 800e672:	429a      	cmp	r2, r3
 800e674:	d001      	beq.n	800e67a <ip_reass_chain_frag_into_datagram_and_validate+0x142>
          /* There is a fragment missing between the current
           * and the previous fragment */
          valid = 0;
 800e676:	2300      	movs	r3, #0
 800e678:	623b      	str	r3, [r7, #32]
        }
      }
    }
    q = iprh_tmp->next_pbuf;
 800e67a:	697b      	ldr	r3, [r7, #20]
 800e67c:	681b      	ldr	r3, [r3, #0]
 800e67e:	627b      	str	r3, [r7, #36]	; 0x24
    iprh_prev = iprh_tmp;
 800e680:	697b      	ldr	r3, [r7, #20]
 800e682:	62bb      	str	r3, [r7, #40]	; 0x28
  for (q = ipr->p; q != NULL;) {
 800e684:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e686:	2b00      	cmp	r3, #0
 800e688:	d19a      	bne.n	800e5c0 <ip_reass_chain_frag_into_datagram_and_validate+0x88>
 800e68a:	e000      	b.n	800e68e <ip_reass_chain_frag_into_datagram_and_validate+0x156>
      break;
 800e68c:	bf00      	nop
  }

  /* If q is NULL, then we made it to the end of the list. Determine what to do now */
  if (q == NULL) {
 800e68e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e690:	2b00      	cmp	r3, #0
 800e692:	d12d      	bne.n	800e6f0 <ip_reass_chain_frag_into_datagram_and_validate+0x1b8>
    if (iprh_prev != NULL) {
 800e694:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e696:	2b00      	cmp	r3, #0
 800e698:	d01c      	beq.n	800e6d4 <ip_reass_chain_frag_into_datagram_and_validate+0x19c>
      /* this is (for now), the fragment with the highest offset:
       * chain it to the last fragment */
#if IP_REASS_CHECK_OVERLAP
      LWIP_ASSERT("check fragments don't overlap", iprh_prev->end <= iprh->start);
 800e69a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e69c:	88db      	ldrh	r3, [r3, #6]
 800e69e:	b29a      	uxth	r2, r3
 800e6a0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e6a2:	889b      	ldrh	r3, [r3, #4]
 800e6a4:	b29b      	uxth	r3, r3
 800e6a6:	429a      	cmp	r2, r3
 800e6a8:	d906      	bls.n	800e6b8 <ip_reass_chain_frag_into_datagram_and_validate+0x180>
 800e6aa:	4b51      	ldr	r3, [pc, #324]	; (800e7f0 <ip_reass_chain_frag_into_datagram_and_validate+0x2b8>)
 800e6ac:	f240 12ab 	movw	r2, #427	; 0x1ab
 800e6b0:	4950      	ldr	r1, [pc, #320]	; (800e7f4 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 800e6b2:	4851      	ldr	r0, [pc, #324]	; (800e7f8 <ip_reass_chain_frag_into_datagram_and_validate+0x2c0>)
 800e6b4:	f001 ff3c 	bl	8010530 <iprintf>
#endif /* IP_REASS_CHECK_OVERLAP */
      iprh_prev->next_pbuf = new_p;
 800e6b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e6ba:	68ba      	ldr	r2, [r7, #8]
 800e6bc:	601a      	str	r2, [r3, #0]
      if (iprh_prev->end != iprh->start) {
 800e6be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e6c0:	88db      	ldrh	r3, [r3, #6]
 800e6c2:	b29a      	uxth	r2, r3
 800e6c4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e6c6:	889b      	ldrh	r3, [r3, #4]
 800e6c8:	b29b      	uxth	r3, r3
 800e6ca:	429a      	cmp	r2, r3
 800e6cc:	d010      	beq.n	800e6f0 <ip_reass_chain_frag_into_datagram_and_validate+0x1b8>
        valid = 0;
 800e6ce:	2300      	movs	r3, #0
 800e6d0:	623b      	str	r3, [r7, #32]
 800e6d2:	e00d      	b.n	800e6f0 <ip_reass_chain_frag_into_datagram_and_validate+0x1b8>
      }
    } else {
#if IP_REASS_CHECK_OVERLAP
      LWIP_ASSERT("no previous fragment, this must be the first fragment!",
 800e6d4:	68fb      	ldr	r3, [r7, #12]
 800e6d6:	685b      	ldr	r3, [r3, #4]
 800e6d8:	2b00      	cmp	r3, #0
 800e6da:	d006      	beq.n	800e6ea <ip_reass_chain_frag_into_datagram_and_validate+0x1b2>
 800e6dc:	4b44      	ldr	r3, [pc, #272]	; (800e7f0 <ip_reass_chain_frag_into_datagram_and_validate+0x2b8>)
 800e6de:	f44f 72da 	mov.w	r2, #436	; 0x1b4
 800e6e2:	4946      	ldr	r1, [pc, #280]	; (800e7fc <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 800e6e4:	4844      	ldr	r0, [pc, #272]	; (800e7f8 <ip_reass_chain_frag_into_datagram_and_validate+0x2c0>)
 800e6e6:	f001 ff23 	bl	8010530 <iprintf>
        ipr->p == NULL);
#endif /* IP_REASS_CHECK_OVERLAP */
      /* this is the first fragment we ever received for this ip datagram */
      ipr->p = new_p;
 800e6ea:	68fb      	ldr	r3, [r7, #12]
 800e6ec:	68ba      	ldr	r2, [r7, #8]
 800e6ee:	605a      	str	r2, [r3, #4]
    }
  }

  /* At this point, the validation part begins: */
  /* If we already received the last fragment */
  if (is_last || ((ipr->flags & IP_REASS_FLAG_LASTFRAG) != 0)) {
 800e6f0:	687b      	ldr	r3, [r7, #4]
 800e6f2:	2b00      	cmp	r3, #0
 800e6f4:	d105      	bne.n	800e702 <ip_reass_chain_frag_into_datagram_and_validate+0x1ca>
 800e6f6:	68fb      	ldr	r3, [r7, #12]
 800e6f8:	7f9b      	ldrb	r3, [r3, #30]
 800e6fa:	f003 0301 	and.w	r3, r3, #1
 800e6fe:	2b00      	cmp	r3, #0
 800e700:	d059      	beq.n	800e7b6 <ip_reass_chain_frag_into_datagram_and_validate+0x27e>
    /* and had no holes so far */
    if (valid) {
 800e702:	6a3b      	ldr	r3, [r7, #32]
 800e704:	2b00      	cmp	r3, #0
 800e706:	d04f      	beq.n	800e7a8 <ip_reass_chain_frag_into_datagram_and_validate+0x270>
      /* then check if the rest of the fragments is here */
      /* Check if the queue starts with the first datagram */
      if ((ipr->p == NULL) || (((struct ip_reass_helper*)ipr->p->payload)->start != 0)) {
 800e708:	68fb      	ldr	r3, [r7, #12]
 800e70a:	685b      	ldr	r3, [r3, #4]
 800e70c:	2b00      	cmp	r3, #0
 800e70e:	d006      	beq.n	800e71e <ip_reass_chain_frag_into_datagram_and_validate+0x1e6>
 800e710:	68fb      	ldr	r3, [r7, #12]
 800e712:	685b      	ldr	r3, [r3, #4]
 800e714:	685b      	ldr	r3, [r3, #4]
 800e716:	889b      	ldrh	r3, [r3, #4]
 800e718:	b29b      	uxth	r3, r3
 800e71a:	2b00      	cmp	r3, #0
 800e71c:	d002      	beq.n	800e724 <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
        valid = 0;
 800e71e:	2300      	movs	r3, #0
 800e720:	623b      	str	r3, [r7, #32]
 800e722:	e041      	b.n	800e7a8 <ip_reass_chain_frag_into_datagram_and_validate+0x270>
      } else {
        /* and check that there are no holes after this datagram */
        iprh_prev = iprh;
 800e724:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e726:	62bb      	str	r3, [r7, #40]	; 0x28
        q = iprh->next_pbuf;
 800e728:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e72a:	681b      	ldr	r3, [r3, #0]
 800e72c:	627b      	str	r3, [r7, #36]	; 0x24
        while (q != NULL) {
 800e72e:	e012      	b.n	800e756 <ip_reass_chain_frag_into_datagram_and_validate+0x21e>
          iprh = (struct ip_reass_helper*)q->payload;
 800e730:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e732:	685b      	ldr	r3, [r3, #4]
 800e734:	62fb      	str	r3, [r7, #44]	; 0x2c
          if (iprh_prev->end != iprh->start) {
 800e736:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e738:	88db      	ldrh	r3, [r3, #6]
 800e73a:	b29a      	uxth	r2, r3
 800e73c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e73e:	889b      	ldrh	r3, [r3, #4]
 800e740:	b29b      	uxth	r3, r3
 800e742:	429a      	cmp	r2, r3
 800e744:	d002      	beq.n	800e74c <ip_reass_chain_frag_into_datagram_and_validate+0x214>
            valid = 0;
 800e746:	2300      	movs	r3, #0
 800e748:	623b      	str	r3, [r7, #32]
            break;
 800e74a:	e007      	b.n	800e75c <ip_reass_chain_frag_into_datagram_and_validate+0x224>
          }
          iprh_prev = iprh;
 800e74c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e74e:	62bb      	str	r3, [r7, #40]	; 0x28
          q = iprh->next_pbuf;
 800e750:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e752:	681b      	ldr	r3, [r3, #0]
 800e754:	627b      	str	r3, [r7, #36]	; 0x24
        while (q != NULL) {
 800e756:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e758:	2b00      	cmp	r3, #0
 800e75a:	d1e9      	bne.n	800e730 <ip_reass_chain_frag_into_datagram_and_validate+0x1f8>
        }
        /* if still valid, all fragments are received
         * (because to the MF==0 already arrived */
        if (valid) {
 800e75c:	6a3b      	ldr	r3, [r7, #32]
 800e75e:	2b00      	cmp	r3, #0
 800e760:	d022      	beq.n	800e7a8 <ip_reass_chain_frag_into_datagram_and_validate+0x270>
          LWIP_ASSERT("sanity check", ipr->p != NULL);
 800e762:	68fb      	ldr	r3, [r7, #12]
 800e764:	685b      	ldr	r3, [r3, #4]
 800e766:	2b00      	cmp	r3, #0
 800e768:	d106      	bne.n	800e778 <ip_reass_chain_frag_into_datagram_and_validate+0x240>
 800e76a:	4b21      	ldr	r3, [pc, #132]	; (800e7f0 <ip_reass_chain_frag_into_datagram_and_validate+0x2b8>)
 800e76c:	f44f 72ea 	mov.w	r2, #468	; 0x1d4
 800e770:	4923      	ldr	r1, [pc, #140]	; (800e800 <ip_reass_chain_frag_into_datagram_and_validate+0x2c8>)
 800e772:	4821      	ldr	r0, [pc, #132]	; (800e7f8 <ip_reass_chain_frag_into_datagram_and_validate+0x2c0>)
 800e774:	f001 fedc 	bl	8010530 <iprintf>
          LWIP_ASSERT("sanity check",
 800e778:	68fb      	ldr	r3, [r7, #12]
 800e77a:	685b      	ldr	r3, [r3, #4]
 800e77c:	685b      	ldr	r3, [r3, #4]
 800e77e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800e780:	429a      	cmp	r2, r3
 800e782:	d106      	bne.n	800e792 <ip_reass_chain_frag_into_datagram_and_validate+0x25a>
 800e784:	4b1a      	ldr	r3, [pc, #104]	; (800e7f0 <ip_reass_chain_frag_into_datagram_and_validate+0x2b8>)
 800e786:	f44f 72eb 	mov.w	r2, #470	; 0x1d6
 800e78a:	491d      	ldr	r1, [pc, #116]	; (800e800 <ip_reass_chain_frag_into_datagram_and_validate+0x2c8>)
 800e78c:	481a      	ldr	r0, [pc, #104]	; (800e7f8 <ip_reass_chain_frag_into_datagram_and_validate+0x2c0>)
 800e78e:	f001 fecf 	bl	8010530 <iprintf>
            ((struct ip_reass_helper*)ipr->p->payload) != iprh);
          LWIP_ASSERT("validate_datagram:next_pbuf!=NULL",
 800e792:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e794:	681b      	ldr	r3, [r3, #0]
 800e796:	2b00      	cmp	r3, #0
 800e798:	d006      	beq.n	800e7a8 <ip_reass_chain_frag_into_datagram_and_validate+0x270>
 800e79a:	4b15      	ldr	r3, [pc, #84]	; (800e7f0 <ip_reass_chain_frag_into_datagram_and_validate+0x2b8>)
 800e79c:	f44f 72ec 	mov.w	r2, #472	; 0x1d8
 800e7a0:	4918      	ldr	r1, [pc, #96]	; (800e804 <ip_reass_chain_frag_into_datagram_and_validate+0x2cc>)
 800e7a2:	4815      	ldr	r0, [pc, #84]	; (800e7f8 <ip_reass_chain_frag_into_datagram_and_validate+0x2c0>)
 800e7a4:	f001 fec4 	bl	8010530 <iprintf>
      }
    }
    /* If valid is 0 here, there are some fragments missing in the middle
     * (since MF == 0 has already arrived). Such datagrams simply time out if
     * no more fragments are received... */
    return valid ? IP_REASS_VALIDATE_TELEGRAM_FINISHED : IP_REASS_VALIDATE_PBUF_QUEUED;
 800e7a8:	6a3b      	ldr	r3, [r7, #32]
 800e7aa:	2b00      	cmp	r3, #0
 800e7ac:	bf14      	ite	ne
 800e7ae:	2301      	movne	r3, #1
 800e7b0:	2300      	moveq	r3, #0
 800e7b2:	b2db      	uxtb	r3, r3
 800e7b4:	e018      	b.n	800e7e8 <ip_reass_chain_frag_into_datagram_and_validate+0x2b0>
  }
  /* If we come here, not all fragments were received, yet! */
  return IP_REASS_VALIDATE_PBUF_QUEUED; /* not yet valid! */
 800e7b6:	2300      	movs	r3, #0
 800e7b8:	e016      	b.n	800e7e8 <ip_reass_chain_frag_into_datagram_and_validate+0x2b0>
#if IP_REASS_CHECK_OVERLAP
freepbuf:
 800e7ba:	bf00      	nop
 800e7bc:	e004      	b.n	800e7c8 <ip_reass_chain_frag_into_datagram_and_validate+0x290>
          goto freepbuf;
 800e7be:	bf00      	nop
 800e7c0:	e002      	b.n	800e7c8 <ip_reass_chain_frag_into_datagram_and_validate+0x290>
      goto freepbuf;
 800e7c2:	bf00      	nop
 800e7c4:	e000      	b.n	800e7c8 <ip_reass_chain_frag_into_datagram_and_validate+0x290>
      goto freepbuf;
 800e7c6:	bf00      	nop
  ip_reass_pbufcount -= pbuf_clen(new_p);
 800e7c8:	68b8      	ldr	r0, [r7, #8]
 800e7ca:	f7f9 f94d 	bl	8007a68 <pbuf_clen>
 800e7ce:	4603      	mov	r3, r0
 800e7d0:	461a      	mov	r2, r3
 800e7d2:	4b0d      	ldr	r3, [pc, #52]	; (800e808 <ip_reass_chain_frag_into_datagram_and_validate+0x2d0>)
 800e7d4:	881b      	ldrh	r3, [r3, #0]
 800e7d6:	1a9b      	subs	r3, r3, r2
 800e7d8:	b29a      	uxth	r2, r3
 800e7da:	4b0b      	ldr	r3, [pc, #44]	; (800e808 <ip_reass_chain_frag_into_datagram_and_validate+0x2d0>)
 800e7dc:	801a      	strh	r2, [r3, #0]
  pbuf_free(new_p);
 800e7de:	68b8      	ldr	r0, [r7, #8]
 800e7e0:	f7f9 f8a8 	bl	8007934 <pbuf_free>
  return IP_REASS_VALIDATE_PBUF_DROPPED;
 800e7e4:	f04f 33ff 	mov.w	r3, #4294967295
#endif /* IP_REASS_CHECK_OVERLAP */
}
 800e7e8:	4618      	mov	r0, r3
 800e7ea:	3730      	adds	r7, #48	; 0x30
 800e7ec:	46bd      	mov	sp, r7
 800e7ee:	bd80      	pop	{r7, pc}
 800e7f0:	08012df4 	.word	0x08012df4
 800e7f4:	08012ed0 	.word	0x08012ed0
 800e7f8:	08012e3c 	.word	0x08012e3c
 800e7fc:	08012ef0 	.word	0x08012ef0
 800e800:	08012f28 	.word	0x08012f28
 800e804:	08012f38 	.word	0x08012f38
 800e808:	24004178 	.word	0x24004178

0800e80c <ip4_reass>:
 * @param p points to a pbuf chain of the fragment
 * @return NULL if reassembly is incomplete, ? otherwise
 */
struct pbuf *
ip4_reass(struct pbuf *p)
{
 800e80c:	b580      	push	{r7, lr}
 800e80e:	b08e      	sub	sp, #56	; 0x38
 800e810:	af00      	add	r7, sp, #0
 800e812:	6078      	str	r0, [r7, #4]
  int is_last;

  IPFRAG_STATS_INC(ip_frag.recv);
  MIB2_STATS_INC(mib2.ipreasmreqds);

  fraghdr = (struct ip_hdr*)p->payload;
 800e814:	687b      	ldr	r3, [r7, #4]
 800e816:	685b      	ldr	r3, [r3, #4]
 800e818:	62bb      	str	r3, [r7, #40]	; 0x28

  if ((IPH_HL(fraghdr) * 4) != IP_HLEN) {
 800e81a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e81c:	781b      	ldrb	r3, [r3, #0]
 800e81e:	f003 030f 	and.w	r3, r3, #15
 800e822:	009b      	lsls	r3, r3, #2
 800e824:	2b14      	cmp	r3, #20
 800e826:	f040 8131 	bne.w	800ea8c <ip4_reass+0x280>
    LWIP_DEBUGF(IP_REASS_DEBUG,("ip4_reass: IP options currently not supported!\n"));
    IPFRAG_STATS_INC(ip_frag.err);
    goto nullreturn;
  }

  offset = (lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) * 8;
 800e82a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e82c:	88db      	ldrh	r3, [r3, #6]
 800e82e:	b29b      	uxth	r3, r3
 800e830:	4618      	mov	r0, r3
 800e832:	f7f7 fe53 	bl	80064dc <lwip_htons>
 800e836:	4603      	mov	r3, r0
 800e838:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800e83c:	b29b      	uxth	r3, r3
 800e83e:	00db      	lsls	r3, r3, #3
 800e840:	84fb      	strh	r3, [r7, #38]	; 0x26
  len = lwip_ntohs(IPH_LEN(fraghdr)) - IPH_HL(fraghdr) * 4;
 800e842:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e844:	885b      	ldrh	r3, [r3, #2]
 800e846:	b29b      	uxth	r3, r3
 800e848:	4618      	mov	r0, r3
 800e84a:	f7f7 fe47 	bl	80064dc <lwip_htons>
 800e84e:	4603      	mov	r3, r0
 800e850:	461a      	mov	r2, r3
 800e852:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e854:	781b      	ldrb	r3, [r3, #0]
 800e856:	b29b      	uxth	r3, r3
 800e858:	f003 030f 	and.w	r3, r3, #15
 800e85c:	b29b      	uxth	r3, r3
 800e85e:	009b      	lsls	r3, r3, #2
 800e860:	b29b      	uxth	r3, r3
 800e862:	1ad3      	subs	r3, r2, r3
 800e864:	84bb      	strh	r3, [r7, #36]	; 0x24

  /* Check if we are allowed to enqueue more datagrams. */
  clen = pbuf_clen(p);
 800e866:	6878      	ldr	r0, [r7, #4]
 800e868:	f7f9 f8fe 	bl	8007a68 <pbuf_clen>
 800e86c:	4603      	mov	r3, r0
 800e86e:	847b      	strh	r3, [r7, #34]	; 0x22
  if ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS) {
 800e870:	4b8d      	ldr	r3, [pc, #564]	; (800eaa8 <ip4_reass+0x29c>)
 800e872:	881b      	ldrh	r3, [r3, #0]
 800e874:	461a      	mov	r2, r3
 800e876:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800e878:	4413      	add	r3, r2
 800e87a:	2b0a      	cmp	r3, #10
 800e87c:	dd10      	ble.n	800e8a0 <ip4_reass+0x94>
#if IP_REASS_FREE_OLDEST
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 800e87e:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800e880:	4619      	mov	r1, r3
 800e882:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800e884:	f7ff fd8e 	bl	800e3a4 <ip_reass_remove_oldest_datagram>
 800e888:	4603      	mov	r3, r0
 800e88a:	2b00      	cmp	r3, #0
 800e88c:	f000 8100 	beq.w	800ea90 <ip4_reass+0x284>
        ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS))
 800e890:	4b85      	ldr	r3, [pc, #532]	; (800eaa8 <ip4_reass+0x29c>)
 800e892:	881b      	ldrh	r3, [r3, #0]
 800e894:	461a      	mov	r2, r3
 800e896:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800e898:	4413      	add	r3, r2
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 800e89a:	2b0a      	cmp	r3, #10
 800e89c:	f300 80f8 	bgt.w	800ea90 <ip4_reass+0x284>
    }
  }

  /* Look for the datagram the fragment belongs to in the current datagram queue,
   * remembering the previous in the queue for later dequeueing. */
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 800e8a0:	4b82      	ldr	r3, [pc, #520]	; (800eaac <ip4_reass+0x2a0>)
 800e8a2:	681b      	ldr	r3, [r3, #0]
 800e8a4:	633b      	str	r3, [r7, #48]	; 0x30
 800e8a6:	e015      	b.n	800e8d4 <ip4_reass+0xc8>
    /* Check if the incoming fragment matches the one currently present
       in the reassembly buffer. If so, we proceed with copying the
       fragment into the buffer. */
    if (IP_ADDRESSES_AND_ID_MATCH(&ipr->iphdr, fraghdr)) {
 800e8a8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e8aa:	695a      	ldr	r2, [r3, #20]
 800e8ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e8ae:	68db      	ldr	r3, [r3, #12]
 800e8b0:	429a      	cmp	r2, r3
 800e8b2:	d10c      	bne.n	800e8ce <ip4_reass+0xc2>
 800e8b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e8b6:	699a      	ldr	r2, [r3, #24]
 800e8b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e8ba:	691b      	ldr	r3, [r3, #16]
 800e8bc:	429a      	cmp	r2, r3
 800e8be:	d106      	bne.n	800e8ce <ip4_reass+0xc2>
 800e8c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e8c2:	899a      	ldrh	r2, [r3, #12]
 800e8c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e8c6:	889b      	ldrh	r3, [r3, #4]
 800e8c8:	b29b      	uxth	r3, r3
 800e8ca:	429a      	cmp	r2, r3
 800e8cc:	d006      	beq.n	800e8dc <ip4_reass+0xd0>
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 800e8ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e8d0:	681b      	ldr	r3, [r3, #0]
 800e8d2:	633b      	str	r3, [r7, #48]	; 0x30
 800e8d4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e8d6:	2b00      	cmp	r3, #0
 800e8d8:	d1e6      	bne.n	800e8a8 <ip4_reass+0x9c>
 800e8da:	e000      	b.n	800e8de <ip4_reass+0xd2>
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: matching previous fragment ID=%"X16_F"\n",
        lwip_ntohs(IPH_ID(fraghdr))));
      IPFRAG_STATS_INC(ip_frag.cachehit);
      break;
 800e8dc:	bf00      	nop
    }
  }

  if (ipr == NULL) {
 800e8de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e8e0:	2b00      	cmp	r3, #0
 800e8e2:	d109      	bne.n	800e8f8 <ip4_reass+0xec>
  /* Enqueue a new datagram into the datagram queue */
    ipr = ip_reass_enqueue_new_datagram(fraghdr, clen);
 800e8e4:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800e8e6:	4619      	mov	r1, r3
 800e8e8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800e8ea:	f7ff fdbd 	bl	800e468 <ip_reass_enqueue_new_datagram>
 800e8ee:	6338      	str	r0, [r7, #48]	; 0x30
    /* Bail if unable to enqueue */
    if (ipr == NULL) {
 800e8f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e8f2:	2b00      	cmp	r3, #0
 800e8f4:	d11c      	bne.n	800e930 <ip4_reass+0x124>
      goto nullreturn;
 800e8f6:	e0ce      	b.n	800ea96 <ip4_reass+0x28a>
    }
  } else {
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
 800e8f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e8fa:	88db      	ldrh	r3, [r3, #6]
 800e8fc:	b29b      	uxth	r3, r3
 800e8fe:	4618      	mov	r0, r3
 800e900:	f7f7 fdec 	bl	80064dc <lwip_htons>
 800e904:	4603      	mov	r3, r0
 800e906:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800e90a:	2b00      	cmp	r3, #0
 800e90c:	d110      	bne.n	800e930 <ip4_reass+0x124>
      ((lwip_ntohs(IPH_OFFSET(&ipr->iphdr)) & IP_OFFMASK) != 0)) {
 800e90e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e910:	89db      	ldrh	r3, [r3, #14]
 800e912:	4618      	mov	r0, r3
 800e914:	f7f7 fde2 	bl	80064dc <lwip_htons>
 800e918:	4603      	mov	r3, r0
 800e91a:	f3c3 030c 	ubfx	r3, r3, #0, #13
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
 800e91e:	2b00      	cmp	r3, #0
 800e920:	d006      	beq.n	800e930 <ip4_reass+0x124>
      /* ipr->iphdr is not the header from the first fragment, but fraghdr is
       * -> copy fraghdr into ipr->iphdr since we want to have the header
       * of the first fragment (for ICMP time exceeded and later, for copying
       * all options, if supported)*/
      SMEMCPY(&ipr->iphdr, fraghdr, IP_HLEN);
 800e922:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e924:	3308      	adds	r3, #8
 800e926:	2214      	movs	r2, #20
 800e928:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800e92a:	4618      	mov	r0, r3
 800e92c:	f001 fded 	bl	801050a <memcpy>

  /* At this point, we have either created a new entry or pointing
   * to an existing one */

  /* check for 'no more fragments', and update queue entry*/
  is_last = (IPH_OFFSET(fraghdr) & PP_NTOHS(IP_MF)) == 0;
 800e930:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e932:	88db      	ldrh	r3, [r3, #6]
 800e934:	b29b      	uxth	r3, r3
 800e936:	f003 0320 	and.w	r3, r3, #32
 800e93a:	2b00      	cmp	r3, #0
 800e93c:	bf0c      	ite	eq
 800e93e:	2301      	moveq	r3, #1
 800e940:	2300      	movne	r3, #0
 800e942:	b2db      	uxtb	r3, r3
 800e944:	61fb      	str	r3, [r7, #28]
  if (is_last) {
 800e946:	69fb      	ldr	r3, [r7, #28]
 800e948:	2b00      	cmp	r3, #0
 800e94a:	d00e      	beq.n	800e96a <ip4_reass+0x15e>
    u16_t datagram_len = (u16_t)(offset + len);
 800e94c:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 800e94e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800e950:	4413      	add	r3, r2
 800e952:	837b      	strh	r3, [r7, #26]
    if ((datagram_len < offset) || (datagram_len > (0xFFFF - IP_HLEN))) {
 800e954:	8b7a      	ldrh	r2, [r7, #26]
 800e956:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800e958:	429a      	cmp	r2, r3
 800e95a:	f0c0 8099 	bcc.w	800ea90 <ip4_reass+0x284>
 800e95e:	8b7b      	ldrh	r3, [r7, #26]
 800e960:	f64f 72eb 	movw	r2, #65515	; 0xffeb
 800e964:	4293      	cmp	r3, r2
 800e966:	f200 8093 	bhi.w	800ea90 <ip4_reass+0x284>
      goto nullreturn;
    }
  }
  /* find the right place to insert this pbuf */
  /* @todo: trim pbufs if fragments are overlapping */
  valid = ip_reass_chain_frag_into_datagram_and_validate(ipr, p, is_last);
 800e96a:	69fa      	ldr	r2, [r7, #28]
 800e96c:	6879      	ldr	r1, [r7, #4]
 800e96e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800e970:	f7ff fde2 	bl	800e538 <ip_reass_chain_frag_into_datagram_and_validate>
 800e974:	6178      	str	r0, [r7, #20]
  if (valid == IP_REASS_VALIDATE_PBUF_DROPPED) {
 800e976:	697b      	ldr	r3, [r7, #20]
 800e978:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e97c:	f000 808a 	beq.w	800ea94 <ip4_reass+0x288>
  /* if we come here, the pbuf has been enqueued */

  /* Track the current number of pbufs current 'in-flight', in order to limit
     the number of fragments that may be enqueued at any one time
     (overflow checked by testing against IP_REASS_MAX_PBUFS) */
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount + clen);
 800e980:	4b49      	ldr	r3, [pc, #292]	; (800eaa8 <ip4_reass+0x29c>)
 800e982:	881a      	ldrh	r2, [r3, #0]
 800e984:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800e986:	4413      	add	r3, r2
 800e988:	b29a      	uxth	r2, r3
 800e98a:	4b47      	ldr	r3, [pc, #284]	; (800eaa8 <ip4_reass+0x29c>)
 800e98c:	801a      	strh	r2, [r3, #0]
  if (is_last) {
 800e98e:	69fb      	ldr	r3, [r7, #28]
 800e990:	2b00      	cmp	r3, #0
 800e992:	d00d      	beq.n	800e9b0 <ip4_reass+0x1a4>
    u16_t datagram_len = (u16_t)(offset + len);
 800e994:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 800e996:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800e998:	4413      	add	r3, r2
 800e99a:	827b      	strh	r3, [r7, #18]
    ipr->datagram_len = datagram_len;
 800e99c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e99e:	8a7a      	ldrh	r2, [r7, #18]
 800e9a0:	839a      	strh	r2, [r3, #28]
    ipr->flags |= IP_REASS_FLAG_LASTFRAG;
 800e9a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e9a4:	7f9b      	ldrb	r3, [r3, #30]
 800e9a6:	f043 0301 	orr.w	r3, r3, #1
 800e9aa:	b2da      	uxtb	r2, r3
 800e9ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e9ae:	779a      	strb	r2, [r3, #30]
    LWIP_DEBUGF(IP_REASS_DEBUG,
     ("ip4_reass: last fragment seen, total len %"S16_F"\n",
      ipr->datagram_len));
  }

  if (valid == IP_REASS_VALIDATE_TELEGRAM_FINISHED) {
 800e9b0:	697b      	ldr	r3, [r7, #20]
 800e9b2:	2b01      	cmp	r3, #1
 800e9b4:	d168      	bne.n	800ea88 <ip4_reass+0x27c>
    struct ip_reassdata *ipr_prev;
    /* the totally last fragment (flag more fragments = 0) was received at least
     * once AND all fragments are received */
    ipr->datagram_len += IP_HLEN;
 800e9b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e9b8:	8b9b      	ldrh	r3, [r3, #28]
 800e9ba:	3314      	adds	r3, #20
 800e9bc:	b29a      	uxth	r2, r3
 800e9be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e9c0:	839a      	strh	r2, [r3, #28]

    /* save the second pbuf before copying the header over the pointer */
    r = ((struct ip_reass_helper*)ipr->p->payload)->next_pbuf;
 800e9c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e9c4:	685b      	ldr	r3, [r3, #4]
 800e9c6:	685b      	ldr	r3, [r3, #4]
 800e9c8:	681b      	ldr	r3, [r3, #0]
 800e9ca:	637b      	str	r3, [r7, #52]	; 0x34

    /* copy the original ip header back to the first pbuf */
    fraghdr = (struct ip_hdr*)(ipr->p->payload);
 800e9cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e9ce:	685b      	ldr	r3, [r3, #4]
 800e9d0:	685b      	ldr	r3, [r3, #4]
 800e9d2:	62bb      	str	r3, [r7, #40]	; 0x28
    SMEMCPY(fraghdr, &ipr->iphdr, IP_HLEN);
 800e9d4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e9d6:	3308      	adds	r3, #8
 800e9d8:	2214      	movs	r2, #20
 800e9da:	4619      	mov	r1, r3
 800e9dc:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800e9de:	f001 fd94 	bl	801050a <memcpy>
    IPH_LEN_SET(fraghdr, lwip_htons(ipr->datagram_len));
 800e9e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e9e4:	8b9b      	ldrh	r3, [r3, #28]
 800e9e6:	4618      	mov	r0, r3
 800e9e8:	f7f7 fd78 	bl	80064dc <lwip_htons>
 800e9ec:	4603      	mov	r3, r0
 800e9ee:	461a      	mov	r2, r3
 800e9f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e9f2:	805a      	strh	r2, [r3, #2]
    IPH_OFFSET_SET(fraghdr, 0);
 800e9f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e9f6:	2200      	movs	r2, #0
 800e9f8:	719a      	strb	r2, [r3, #6]
 800e9fa:	2200      	movs	r2, #0
 800e9fc:	71da      	strb	r2, [r3, #7]
    IPH_CHKSUM_SET(fraghdr, 0);
 800e9fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ea00:	2200      	movs	r2, #0
 800ea02:	729a      	strb	r2, [r3, #10]
 800ea04:	2200      	movs	r2, #0
 800ea06:	72da      	strb	r2, [r3, #11]
    IF__NETIF_CHECKSUM_ENABLED(ip_current_input_netif(), NETIF_CHECKSUM_GEN_IP) {
      IPH_CHKSUM_SET(fraghdr, inet_chksum(fraghdr, IP_HLEN));
    }
#endif /* CHECKSUM_GEN_IP */

    p = ipr->p;
 800ea08:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ea0a:	685b      	ldr	r3, [r3, #4]
 800ea0c:	607b      	str	r3, [r7, #4]

    /* chain together the pbufs contained within the reass_data list. */
    while (r != NULL) {
 800ea0e:	e00e      	b.n	800ea2e <ip4_reass+0x222>
      iprh = (struct ip_reass_helper*)r->payload;
 800ea10:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ea12:	685b      	ldr	r3, [r3, #4]
 800ea14:	60fb      	str	r3, [r7, #12]

      /* hide the ip header for every succeeding fragment */
      pbuf_header(r, -IP_HLEN);
 800ea16:	f06f 0113 	mvn.w	r1, #19
 800ea1a:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800ea1c:	f7f8 ff66 	bl	80078ec <pbuf_header>
      pbuf_cat(p, r);
 800ea20:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800ea22:	6878      	ldr	r0, [r7, #4]
 800ea24:	f7f9 f860 	bl	8007ae8 <pbuf_cat>
      r = iprh->next_pbuf;
 800ea28:	68fb      	ldr	r3, [r7, #12]
 800ea2a:	681b      	ldr	r3, [r3, #0]
 800ea2c:	637b      	str	r3, [r7, #52]	; 0x34
    while (r != NULL) {
 800ea2e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ea30:	2b00      	cmp	r3, #0
 800ea32:	d1ed      	bne.n	800ea10 <ip4_reass+0x204>
    }

    /* find the previous entry in the linked list */
    if (ipr == reassdatagrams) {
 800ea34:	4b1d      	ldr	r3, [pc, #116]	; (800eaac <ip4_reass+0x2a0>)
 800ea36:	681b      	ldr	r3, [r3, #0]
 800ea38:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800ea3a:	429a      	cmp	r2, r3
 800ea3c:	d102      	bne.n	800ea44 <ip4_reass+0x238>
      ipr_prev = NULL;
 800ea3e:	2300      	movs	r3, #0
 800ea40:	62fb      	str	r3, [r7, #44]	; 0x2c
 800ea42:	e010      	b.n	800ea66 <ip4_reass+0x25a>
    } else {
      for (ipr_prev = reassdatagrams; ipr_prev != NULL; ipr_prev = ipr_prev->next) {
 800ea44:	4b19      	ldr	r3, [pc, #100]	; (800eaac <ip4_reass+0x2a0>)
 800ea46:	681b      	ldr	r3, [r3, #0]
 800ea48:	62fb      	str	r3, [r7, #44]	; 0x2c
 800ea4a:	e007      	b.n	800ea5c <ip4_reass+0x250>
        if (ipr_prev->next == ipr) {
 800ea4c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ea4e:	681b      	ldr	r3, [r3, #0]
 800ea50:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800ea52:	429a      	cmp	r2, r3
 800ea54:	d006      	beq.n	800ea64 <ip4_reass+0x258>
      for (ipr_prev = reassdatagrams; ipr_prev != NULL; ipr_prev = ipr_prev->next) {
 800ea56:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ea58:	681b      	ldr	r3, [r3, #0]
 800ea5a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800ea5c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ea5e:	2b00      	cmp	r3, #0
 800ea60:	d1f4      	bne.n	800ea4c <ip4_reass+0x240>
 800ea62:	e000      	b.n	800ea66 <ip4_reass+0x25a>
          break;
 800ea64:	bf00      	nop
        }
      }
    }

    /* release the sources allocate for the fragment queue entry */
    ip_reass_dequeue_datagram(ipr, ipr_prev);
 800ea66:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800ea68:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800ea6a:	f7ff fd37 	bl	800e4dc <ip_reass_dequeue_datagram>

    /* and adjust the number of pbufs currently queued for reassembly. */
    ip_reass_pbufcount -= pbuf_clen(p);
 800ea6e:	6878      	ldr	r0, [r7, #4]
 800ea70:	f7f8 fffa 	bl	8007a68 <pbuf_clen>
 800ea74:	4603      	mov	r3, r0
 800ea76:	461a      	mov	r2, r3
 800ea78:	4b0b      	ldr	r3, [pc, #44]	; (800eaa8 <ip4_reass+0x29c>)
 800ea7a:	881b      	ldrh	r3, [r3, #0]
 800ea7c:	1a9b      	subs	r3, r3, r2
 800ea7e:	b29a      	uxth	r2, r3
 800ea80:	4b09      	ldr	r3, [pc, #36]	; (800eaa8 <ip4_reass+0x29c>)
 800ea82:	801a      	strh	r2, [r3, #0]

    MIB2_STATS_INC(mib2.ipreasmoks);

    /* Return the pbuf chain */
    return p;
 800ea84:	687b      	ldr	r3, [r7, #4]
 800ea86:	e00a      	b.n	800ea9e <ip4_reass+0x292>
  }
  /* the datagram is not (yet?) reassembled completely */
  LWIP_DEBUGF(IP_REASS_DEBUG,("ip_reass_pbufcount: %d out\n", ip_reass_pbufcount));
  return NULL;
 800ea88:	2300      	movs	r3, #0
 800ea8a:	e008      	b.n	800ea9e <ip4_reass+0x292>
    goto nullreturn;
 800ea8c:	bf00      	nop
 800ea8e:	e002      	b.n	800ea96 <ip4_reass+0x28a>

nullreturn:
 800ea90:	bf00      	nop
 800ea92:	e000      	b.n	800ea96 <ip4_reass+0x28a>
    goto nullreturn;
 800ea94:	bf00      	nop
  LWIP_DEBUGF(IP_REASS_DEBUG,("ip4_reass: nullreturn\n"));
  IPFRAG_STATS_INC(ip_frag.drop);
  pbuf_free(p);
 800ea96:	6878      	ldr	r0, [r7, #4]
 800ea98:	f7f8 ff4c 	bl	8007934 <pbuf_free>
  return NULL;
 800ea9c:	2300      	movs	r3, #0
}
 800ea9e:	4618      	mov	r0, r3
 800eaa0:	3738      	adds	r7, #56	; 0x38
 800eaa2:	46bd      	mov	sp, r7
 800eaa4:	bd80      	pop	{r7, pc}
 800eaa6:	bf00      	nop
 800eaa8:	24004178 	.word	0x24004178
 800eaac:	24004174 	.word	0x24004174

0800eab0 <ip_frag_alloc_pbuf_custom_ref>:
#if IP_FRAG
#if !LWIP_NETIF_TX_SINGLE_PBUF
/** Allocate a new struct pbuf_custom_ref */
static struct pbuf_custom_ref*
ip_frag_alloc_pbuf_custom_ref(void)
{
 800eab0:	b580      	push	{r7, lr}
 800eab2:	af00      	add	r7, sp, #0
  return (struct pbuf_custom_ref*)memp_malloc(MEMP_FRAG_PBUF);
 800eab4:	2005      	movs	r0, #5
 800eab6:	f7f8 f91d 	bl	8006cf4 <memp_malloc>
 800eaba:	4603      	mov	r3, r0
}
 800eabc:	4618      	mov	r0, r3
 800eabe:	bd80      	pop	{r7, pc}

0800eac0 <ip_frag_free_pbuf_custom_ref>:

/** Free a struct pbuf_custom_ref */
static void
ip_frag_free_pbuf_custom_ref(struct pbuf_custom_ref* p)
{
 800eac0:	b580      	push	{r7, lr}
 800eac2:	b082      	sub	sp, #8
 800eac4:	af00      	add	r7, sp, #0
 800eac6:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("p != NULL", p != NULL);
 800eac8:	687b      	ldr	r3, [r7, #4]
 800eaca:	2b00      	cmp	r3, #0
 800eacc:	d106      	bne.n	800eadc <ip_frag_free_pbuf_custom_ref+0x1c>
 800eace:	4b07      	ldr	r3, [pc, #28]	; (800eaec <ip_frag_free_pbuf_custom_ref+0x2c>)
 800ead0:	f240 22ae 	movw	r2, #686	; 0x2ae
 800ead4:	4906      	ldr	r1, [pc, #24]	; (800eaf0 <ip_frag_free_pbuf_custom_ref+0x30>)
 800ead6:	4807      	ldr	r0, [pc, #28]	; (800eaf4 <ip_frag_free_pbuf_custom_ref+0x34>)
 800ead8:	f001 fd2a 	bl	8010530 <iprintf>
  memp_free(MEMP_FRAG_PBUF, p);
 800eadc:	6879      	ldr	r1, [r7, #4]
 800eade:	2005      	movs	r0, #5
 800eae0:	f7f8 f97e 	bl	8006de0 <memp_free>
}
 800eae4:	bf00      	nop
 800eae6:	3708      	adds	r7, #8
 800eae8:	46bd      	mov	sp, r7
 800eaea:	bd80      	pop	{r7, pc}
 800eaec:	08012df4 	.word	0x08012df4
 800eaf0:	08012f5c 	.word	0x08012f5c
 800eaf4:	08012e3c 	.word	0x08012e3c

0800eaf8 <ipfrag_free_pbuf_custom>:

/** Free-callback function to free a 'struct pbuf_custom_ref', called by
 * pbuf_free. */
static void
ipfrag_free_pbuf_custom(struct pbuf *p)
{
 800eaf8:	b580      	push	{r7, lr}
 800eafa:	b084      	sub	sp, #16
 800eafc:	af00      	add	r7, sp, #0
 800eafe:	6078      	str	r0, [r7, #4]
  struct pbuf_custom_ref *pcr = (struct pbuf_custom_ref*)p;
 800eb00:	687b      	ldr	r3, [r7, #4]
 800eb02:	60fb      	str	r3, [r7, #12]
  LWIP_ASSERT("pcr != NULL", pcr != NULL);
 800eb04:	68fb      	ldr	r3, [r7, #12]
 800eb06:	2b00      	cmp	r3, #0
 800eb08:	d106      	bne.n	800eb18 <ipfrag_free_pbuf_custom+0x20>
 800eb0a:	4b11      	ldr	r3, [pc, #68]	; (800eb50 <ipfrag_free_pbuf_custom+0x58>)
 800eb0c:	f44f 722e 	mov.w	r2, #696	; 0x2b8
 800eb10:	4910      	ldr	r1, [pc, #64]	; (800eb54 <ipfrag_free_pbuf_custom+0x5c>)
 800eb12:	4811      	ldr	r0, [pc, #68]	; (800eb58 <ipfrag_free_pbuf_custom+0x60>)
 800eb14:	f001 fd0c 	bl	8010530 <iprintf>
  LWIP_ASSERT("pcr == p", (void*)pcr == (void*)p);
 800eb18:	68fa      	ldr	r2, [r7, #12]
 800eb1a:	687b      	ldr	r3, [r7, #4]
 800eb1c:	429a      	cmp	r2, r3
 800eb1e:	d006      	beq.n	800eb2e <ipfrag_free_pbuf_custom+0x36>
 800eb20:	4b0b      	ldr	r3, [pc, #44]	; (800eb50 <ipfrag_free_pbuf_custom+0x58>)
 800eb22:	f240 22b9 	movw	r2, #697	; 0x2b9
 800eb26:	490d      	ldr	r1, [pc, #52]	; (800eb5c <ipfrag_free_pbuf_custom+0x64>)
 800eb28:	480b      	ldr	r0, [pc, #44]	; (800eb58 <ipfrag_free_pbuf_custom+0x60>)
 800eb2a:	f001 fd01 	bl	8010530 <iprintf>
  if (pcr->original != NULL) {
 800eb2e:	68fb      	ldr	r3, [r7, #12]
 800eb30:	695b      	ldr	r3, [r3, #20]
 800eb32:	2b00      	cmp	r3, #0
 800eb34:	d004      	beq.n	800eb40 <ipfrag_free_pbuf_custom+0x48>
    pbuf_free(pcr->original);
 800eb36:	68fb      	ldr	r3, [r7, #12]
 800eb38:	695b      	ldr	r3, [r3, #20]
 800eb3a:	4618      	mov	r0, r3
 800eb3c:	f7f8 fefa 	bl	8007934 <pbuf_free>
  }
  ip_frag_free_pbuf_custom_ref(pcr);
 800eb40:	68f8      	ldr	r0, [r7, #12]
 800eb42:	f7ff ffbd 	bl	800eac0 <ip_frag_free_pbuf_custom_ref>
}
 800eb46:	bf00      	nop
 800eb48:	3710      	adds	r7, #16
 800eb4a:	46bd      	mov	sp, r7
 800eb4c:	bd80      	pop	{r7, pc}
 800eb4e:	bf00      	nop
 800eb50:	08012df4 	.word	0x08012df4
 800eb54:	08012f68 	.word	0x08012f68
 800eb58:	08012e3c 	.word	0x08012e3c
 800eb5c:	08012f74 	.word	0x08012f74

0800eb60 <ip4_frag>:
 *
 * @return ERR_OK if sent successfully, err_t otherwise
 */
err_t
ip4_frag(struct pbuf *p, struct netif *netif, const ip4_addr_t *dest)
{
 800eb60:	b580      	push	{r7, lr}
 800eb62:	b092      	sub	sp, #72	; 0x48
 800eb64:	af02      	add	r7, sp, #8
 800eb66:	60f8      	str	r0, [r7, #12]
 800eb68:	60b9      	str	r1, [r7, #8]
 800eb6a:	607a      	str	r2, [r7, #4]
  struct pbuf *rambuf;
#if !LWIP_NETIF_TX_SINGLE_PBUF
  struct pbuf *newpbuf;
  u16_t newpbuflen = 0;
 800eb6c:	2300      	movs	r3, #0
 800eb6e:	87fb      	strh	r3, [r7, #62]	; 0x3e
  u16_t left_to_copy;
#endif
  struct ip_hdr *original_iphdr;
  struct ip_hdr *iphdr;
  const u16_t nfb = (netif->mtu - IP_HLEN) / 8;
 800eb70:	68bb      	ldr	r3, [r7, #8]
 800eb72:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800eb74:	3b14      	subs	r3, #20
 800eb76:	2b00      	cmp	r3, #0
 800eb78:	da00      	bge.n	800eb7c <ip4_frag+0x1c>
 800eb7a:	3307      	adds	r3, #7
 800eb7c:	10db      	asrs	r3, r3, #3
 800eb7e:	867b      	strh	r3, [r7, #50]	; 0x32
  u16_t left, fragsize;
  u16_t ofo;
  int last;
  u16_t poff = IP_HLEN;
 800eb80:	2314      	movs	r3, #20
 800eb82:	86fb      	strh	r3, [r7, #54]	; 0x36
  u16_t tmp;

  original_iphdr = (struct ip_hdr *)p->payload;
 800eb84:	68fb      	ldr	r3, [r7, #12]
 800eb86:	685b      	ldr	r3, [r3, #4]
 800eb88:	62fb      	str	r3, [r7, #44]	; 0x2c
  iphdr = original_iphdr;
 800eb8a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800eb8c:	62bb      	str	r3, [r7, #40]	; 0x28
  LWIP_ERROR("ip4_frag() does not support IP options", IPH_HL(iphdr) * 4 == IP_HLEN, return ERR_VAL);
 800eb8e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800eb90:	781b      	ldrb	r3, [r3, #0]
 800eb92:	f003 030f 	and.w	r3, r3, #15
 800eb96:	009b      	lsls	r3, r3, #2
 800eb98:	2b14      	cmp	r3, #20
 800eb9a:	d009      	beq.n	800ebb0 <ip4_frag+0x50>
 800eb9c:	4b79      	ldr	r3, [pc, #484]	; (800ed84 <ip4_frag+0x224>)
 800eb9e:	f240 22e1 	movw	r2, #737	; 0x2e1
 800eba2:	4979      	ldr	r1, [pc, #484]	; (800ed88 <ip4_frag+0x228>)
 800eba4:	4879      	ldr	r0, [pc, #484]	; (800ed8c <ip4_frag+0x22c>)
 800eba6:	f001 fcc3 	bl	8010530 <iprintf>
 800ebaa:	f06f 0305 	mvn.w	r3, #5
 800ebae:	e0e5      	b.n	800ed7c <ip4_frag+0x21c>

  /* Save original offset */
  tmp = lwip_ntohs(IPH_OFFSET(iphdr));
 800ebb0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ebb2:	88db      	ldrh	r3, [r3, #6]
 800ebb4:	b29b      	uxth	r3, r3
 800ebb6:	4618      	mov	r0, r3
 800ebb8:	f7f7 fc90 	bl	80064dc <lwip_htons>
 800ebbc:	4603      	mov	r3, r0
 800ebbe:	86bb      	strh	r3, [r7, #52]	; 0x34
  ofo = tmp & IP_OFFMASK;
 800ebc0:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 800ebc2:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800ebc6:	873b      	strh	r3, [r7, #56]	; 0x38
  LWIP_ERROR("ip_frag(): MF already set", (tmp & IP_MF) == 0, return ERR_VAL);
 800ebc8:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 800ebca:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800ebce:	2b00      	cmp	r3, #0
 800ebd0:	d009      	beq.n	800ebe6 <ip4_frag+0x86>
 800ebd2:	4b6c      	ldr	r3, [pc, #432]	; (800ed84 <ip4_frag+0x224>)
 800ebd4:	f240 22e6 	movw	r2, #742	; 0x2e6
 800ebd8:	496d      	ldr	r1, [pc, #436]	; (800ed90 <ip4_frag+0x230>)
 800ebda:	486c      	ldr	r0, [pc, #432]	; (800ed8c <ip4_frag+0x22c>)
 800ebdc:	f001 fca8 	bl	8010530 <iprintf>
 800ebe0:	f06f 0305 	mvn.w	r3, #5
 800ebe4:	e0ca      	b.n	800ed7c <ip4_frag+0x21c>

  left = p->tot_len - IP_HLEN;
 800ebe6:	68fb      	ldr	r3, [r7, #12]
 800ebe8:	891b      	ldrh	r3, [r3, #8]
 800ebea:	3b14      	subs	r3, #20
 800ebec:	877b      	strh	r3, [r7, #58]	; 0x3a

  while (left) {
 800ebee:	e0bc      	b.n	800ed6a <ip4_frag+0x20a>
    /* Fill this fragment */
    fragsize = LWIP_MIN(left, nfb * 8);
 800ebf0:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 800ebf2:	00da      	lsls	r2, r3, #3
 800ebf4:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 800ebf6:	4293      	cmp	r3, r2
 800ebf8:	bfa8      	it	ge
 800ebfa:	4613      	movge	r3, r2
 800ebfc:	84fb      	strh	r3, [r7, #38]	; 0x26
    /* When not using a static buffer, create a chain of pbufs.
     * The first will be a PBUF_RAM holding the link and IP header.
     * The rest will be PBUF_REFs mirroring the pbuf chain to be fragged,
     * but limited to the size of an mtu.
     */
    rambuf = pbuf_alloc(PBUF_LINK, IP_HLEN, PBUF_RAM);
 800ebfe:	2200      	movs	r2, #0
 800ec00:	2114      	movs	r1, #20
 800ec02:	2002      	movs	r0, #2
 800ec04:	f7f8 fb24 	bl	8007250 <pbuf_alloc>
 800ec08:	6238      	str	r0, [r7, #32]
    if (rambuf == NULL) {
 800ec0a:	6a3b      	ldr	r3, [r7, #32]
 800ec0c:	2b00      	cmp	r3, #0
 800ec0e:	f000 80b2 	beq.w	800ed76 <ip4_frag+0x216>
      goto memerr;
    }
    LWIP_ASSERT("this needs a pbuf in one piece!",
 800ec12:	68fb      	ldr	r3, [r7, #12]
 800ec14:	895b      	ldrh	r3, [r3, #10]
 800ec16:	2b13      	cmp	r3, #19
 800ec18:	d806      	bhi.n	800ec28 <ip4_frag+0xc8>
 800ec1a:	4b5a      	ldr	r3, [pc, #360]	; (800ed84 <ip4_frag+0x224>)
 800ec1c:	f240 3209 	movw	r2, #777	; 0x309
 800ec20:	495c      	ldr	r1, [pc, #368]	; (800ed94 <ip4_frag+0x234>)
 800ec22:	485a      	ldr	r0, [pc, #360]	; (800ed8c <ip4_frag+0x22c>)
 800ec24:	f001 fc84 	bl	8010530 <iprintf>
                (p->len >= (IP_HLEN)));
    SMEMCPY(rambuf->payload, original_iphdr, IP_HLEN);
 800ec28:	6a3b      	ldr	r3, [r7, #32]
 800ec2a:	685b      	ldr	r3, [r3, #4]
 800ec2c:	2214      	movs	r2, #20
 800ec2e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800ec30:	4618      	mov	r0, r3
 800ec32:	f001 fc6a 	bl	801050a <memcpy>
    iphdr = (struct ip_hdr *)rambuf->payload;
 800ec36:	6a3b      	ldr	r3, [r7, #32]
 800ec38:	685b      	ldr	r3, [r3, #4]
 800ec3a:	62bb      	str	r3, [r7, #40]	; 0x28

    left_to_copy = fragsize;
 800ec3c:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800ec3e:	87bb      	strh	r3, [r7, #60]	; 0x3c
    while (left_to_copy) {
 800ec40:	e04f      	b.n	800ece2 <ip4_frag+0x182>
      struct pbuf_custom_ref *pcr;
      u16_t plen = p->len - poff;
 800ec42:	68fb      	ldr	r3, [r7, #12]
 800ec44:	895a      	ldrh	r2, [r3, #10]
 800ec46:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800ec48:	1ad3      	subs	r3, r2, r3
 800ec4a:	837b      	strh	r3, [r7, #26]
      newpbuflen = LWIP_MIN(left_to_copy, plen);
 800ec4c:	8b7a      	ldrh	r2, [r7, #26]
 800ec4e:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 800ec50:	4293      	cmp	r3, r2
 800ec52:	bf28      	it	cs
 800ec54:	4613      	movcs	r3, r2
 800ec56:	87fb      	strh	r3, [r7, #62]	; 0x3e
      /* Is this pbuf already empty? */
      if (!newpbuflen) {
 800ec58:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 800ec5a:	2b00      	cmp	r3, #0
 800ec5c:	d105      	bne.n	800ec6a <ip4_frag+0x10a>
        poff = 0;
 800ec5e:	2300      	movs	r3, #0
 800ec60:	86fb      	strh	r3, [r7, #54]	; 0x36
        p = p->next;
 800ec62:	68fb      	ldr	r3, [r7, #12]
 800ec64:	681b      	ldr	r3, [r3, #0]
 800ec66:	60fb      	str	r3, [r7, #12]
        continue;
 800ec68:	e03b      	b.n	800ece2 <ip4_frag+0x182>
      }
      pcr = ip_frag_alloc_pbuf_custom_ref();
 800ec6a:	f7ff ff21 	bl	800eab0 <ip_frag_alloc_pbuf_custom_ref>
 800ec6e:	6178      	str	r0, [r7, #20]
      if (pcr == NULL) {
 800ec70:	697b      	ldr	r3, [r7, #20]
 800ec72:	2b00      	cmp	r3, #0
 800ec74:	d103      	bne.n	800ec7e <ip4_frag+0x11e>
        pbuf_free(rambuf);
 800ec76:	6a38      	ldr	r0, [r7, #32]
 800ec78:	f7f8 fe5c 	bl	8007934 <pbuf_free>
        goto memerr;
 800ec7c:	e07c      	b.n	800ed78 <ip4_frag+0x218>
      }
      /* Mirror this pbuf, although we might not need all of it. */
      newpbuf = pbuf_alloced_custom(PBUF_RAW, newpbuflen, PBUF_REF, &pcr->pc,
 800ec7e:	6978      	ldr	r0, [r7, #20]
        (u8_t*)p->payload + poff, newpbuflen);
 800ec80:	68fb      	ldr	r3, [r7, #12]
 800ec82:	685a      	ldr	r2, [r3, #4]
      newpbuf = pbuf_alloced_custom(PBUF_RAW, newpbuflen, PBUF_REF, &pcr->pc,
 800ec84:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800ec86:	4413      	add	r3, r2
 800ec88:	8ff9      	ldrh	r1, [r7, #62]	; 0x3e
 800ec8a:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 800ec8c:	9201      	str	r2, [sp, #4]
 800ec8e:	9300      	str	r3, [sp, #0]
 800ec90:	4603      	mov	r3, r0
 800ec92:	2202      	movs	r2, #2
 800ec94:	2004      	movs	r0, #4
 800ec96:	f7f8 fc6f 	bl	8007578 <pbuf_alloced_custom>
 800ec9a:	6138      	str	r0, [r7, #16]
      if (newpbuf == NULL) {
 800ec9c:	693b      	ldr	r3, [r7, #16]
 800ec9e:	2b00      	cmp	r3, #0
 800eca0:	d106      	bne.n	800ecb0 <ip4_frag+0x150>
        ip_frag_free_pbuf_custom_ref(pcr);
 800eca2:	6978      	ldr	r0, [r7, #20]
 800eca4:	f7ff ff0c 	bl	800eac0 <ip_frag_free_pbuf_custom_ref>
        pbuf_free(rambuf);
 800eca8:	6a38      	ldr	r0, [r7, #32]
 800ecaa:	f7f8 fe43 	bl	8007934 <pbuf_free>
        goto memerr;
 800ecae:	e063      	b.n	800ed78 <ip4_frag+0x218>
      }
      pbuf_ref(p);
 800ecb0:	68f8      	ldr	r0, [r7, #12]
 800ecb2:	f7f8 fef1 	bl	8007a98 <pbuf_ref>
      pcr->original = p;
 800ecb6:	697b      	ldr	r3, [r7, #20]
 800ecb8:	68fa      	ldr	r2, [r7, #12]
 800ecba:	615a      	str	r2, [r3, #20]
      pcr->pc.custom_free_function = ipfrag_free_pbuf_custom;
 800ecbc:	697b      	ldr	r3, [r7, #20]
 800ecbe:	4a36      	ldr	r2, [pc, #216]	; (800ed98 <ip4_frag+0x238>)
 800ecc0:	611a      	str	r2, [r3, #16]

      /* Add it to end of rambuf's chain, but using pbuf_cat, not pbuf_chain
       * so that it is removed when pbuf_dechain is later called on rambuf.
       */
      pbuf_cat(rambuf, newpbuf);
 800ecc2:	6939      	ldr	r1, [r7, #16]
 800ecc4:	6a38      	ldr	r0, [r7, #32]
 800ecc6:	f7f8 ff0f 	bl	8007ae8 <pbuf_cat>
      left_to_copy -= newpbuflen;
 800ecca:	8fba      	ldrh	r2, [r7, #60]	; 0x3c
 800eccc:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 800ecce:	1ad3      	subs	r3, r2, r3
 800ecd0:	87bb      	strh	r3, [r7, #60]	; 0x3c
      if (left_to_copy) {
 800ecd2:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 800ecd4:	2b00      	cmp	r3, #0
 800ecd6:	d004      	beq.n	800ece2 <ip4_frag+0x182>
        poff = 0;
 800ecd8:	2300      	movs	r3, #0
 800ecda:	86fb      	strh	r3, [r7, #54]	; 0x36
        p = p->next;
 800ecdc:	68fb      	ldr	r3, [r7, #12]
 800ecde:	681b      	ldr	r3, [r3, #0]
 800ece0:	60fb      	str	r3, [r7, #12]
    while (left_to_copy) {
 800ece2:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 800ece4:	2b00      	cmp	r3, #0
 800ece6:	d1ac      	bne.n	800ec42 <ip4_frag+0xe2>
      }
    }
    poff += newpbuflen;
 800ece8:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 800ecea:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 800ecec:	4413      	add	r3, r2
 800ecee:	86fb      	strh	r3, [r7, #54]	; 0x36
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */

    /* Correct header */
    last = (left <= netif->mtu - IP_HLEN);
 800ecf0:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 800ecf2:	68bb      	ldr	r3, [r7, #8]
 800ecf4:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800ecf6:	3b14      	subs	r3, #20
 800ecf8:	429a      	cmp	r2, r3
 800ecfa:	bfd4      	ite	le
 800ecfc:	2301      	movle	r3, #1
 800ecfe:	2300      	movgt	r3, #0
 800ed00:	b2db      	uxtb	r3, r3
 800ed02:	61fb      	str	r3, [r7, #28]

    /* Set new offset and MF flag */
    tmp = (IP_OFFMASK & (ofo));
 800ed04:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 800ed06:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800ed0a:	86bb      	strh	r3, [r7, #52]	; 0x34
    if (!last) {
 800ed0c:	69fb      	ldr	r3, [r7, #28]
 800ed0e:	2b00      	cmp	r3, #0
 800ed10:	d103      	bne.n	800ed1a <ip4_frag+0x1ba>
      tmp = tmp | IP_MF;
 800ed12:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 800ed14:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800ed18:	86bb      	strh	r3, [r7, #52]	; 0x34
    }
    IPH_OFFSET_SET(iphdr, lwip_htons(tmp));
 800ed1a:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 800ed1c:	4618      	mov	r0, r3
 800ed1e:	f7f7 fbdd 	bl	80064dc <lwip_htons>
 800ed22:	4603      	mov	r3, r0
 800ed24:	461a      	mov	r2, r3
 800ed26:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ed28:	80da      	strh	r2, [r3, #6]
    IPH_LEN_SET(iphdr, lwip_htons(fragsize + IP_HLEN));
 800ed2a:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800ed2c:	3314      	adds	r3, #20
 800ed2e:	b29b      	uxth	r3, r3
 800ed30:	4618      	mov	r0, r3
 800ed32:	f7f7 fbd3 	bl	80064dc <lwip_htons>
 800ed36:	4603      	mov	r3, r0
 800ed38:	461a      	mov	r2, r3
 800ed3a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ed3c:	805a      	strh	r2, [r3, #2]
    IPH_CHKSUM_SET(iphdr, 0);
 800ed3e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ed40:	2200      	movs	r2, #0
 800ed42:	729a      	strb	r2, [r3, #10]
 800ed44:	2200      	movs	r2, #0
 800ed46:	72da      	strb	r2, [r3, #11]
#endif /* CHECKSUM_GEN_IP */

    /* No need for separate header pbuf - we allowed room for it in rambuf
     * when allocated.
     */
    netif->output(netif, rambuf, dest);
 800ed48:	68bb      	ldr	r3, [r7, #8]
 800ed4a:	695b      	ldr	r3, [r3, #20]
 800ed4c:	687a      	ldr	r2, [r7, #4]
 800ed4e:	6a39      	ldr	r1, [r7, #32]
 800ed50:	68b8      	ldr	r0, [r7, #8]
 800ed52:	4798      	blx	r3
     * recreate it next time round the loop. If we're lucky the hardware
     * will have already sent the packet, the free will really free, and
     * there will be zero memory penalty.
     */

    pbuf_free(rambuf);
 800ed54:	6a38      	ldr	r0, [r7, #32]
 800ed56:	f7f8 fded 	bl	8007934 <pbuf_free>
    left -= fragsize;
 800ed5a:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 800ed5c:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800ed5e:	1ad3      	subs	r3, r2, r3
 800ed60:	877b      	strh	r3, [r7, #58]	; 0x3a
    ofo += nfb;
 800ed62:	8f3a      	ldrh	r2, [r7, #56]	; 0x38
 800ed64:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 800ed66:	4413      	add	r3, r2
 800ed68:	873b      	strh	r3, [r7, #56]	; 0x38
  while (left) {
 800ed6a:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 800ed6c:	2b00      	cmp	r3, #0
 800ed6e:	f47f af3f 	bne.w	800ebf0 <ip4_frag+0x90>
  }
  MIB2_STATS_INC(mib2.ipfragoks);
  return ERR_OK;
 800ed72:	2300      	movs	r3, #0
 800ed74:	e002      	b.n	800ed7c <ip4_frag+0x21c>
      goto memerr;
 800ed76:	bf00      	nop
memerr:
  MIB2_STATS_INC(mib2.ipfragfails);
  return ERR_MEM;
 800ed78:	f04f 33ff 	mov.w	r3, #4294967295
}
 800ed7c:	4618      	mov	r0, r3
 800ed7e:	3740      	adds	r7, #64	; 0x40
 800ed80:	46bd      	mov	sp, r7
 800ed82:	bd80      	pop	{r7, pc}
 800ed84:	08012df4 	.word	0x08012df4
 800ed88:	08012f80 	.word	0x08012f80
 800ed8c:	08012e3c 	.word	0x08012e3c
 800ed90:	08012fa8 	.word	0x08012fa8
 800ed94:	08012fc4 	.word	0x08012fc4
 800ed98:	0800eaf9 	.word	0x0800eaf9

0800ed9c <ethernet_input>:
 * @see ETHARP_SUPPORT_VLAN
 * @see LWIP_HOOK_VLAN_CHECK
 */
err_t
ethernet_input(struct pbuf *p, struct netif *netif)
{
 800ed9c:	b580      	push	{r7, lr}
 800ed9e:	b086      	sub	sp, #24
 800eda0:	af00      	add	r7, sp, #0
 800eda2:	6078      	str	r0, [r7, #4]
 800eda4:	6039      	str	r1, [r7, #0]
  struct eth_hdr* ethhdr;
  u16_t type;
#if LWIP_ARP || ETHARP_SUPPORT_VLAN || LWIP_IPV6
  s16_t ip_hdr_offset = SIZEOF_ETH_HDR;
 800eda6:	230e      	movs	r3, #14
 800eda8:	82fb      	strh	r3, [r7, #22]
#endif /* LWIP_ARP || ETHARP_SUPPORT_VLAN */

  if (p->len <= SIZEOF_ETH_HDR) {
 800edaa:	687b      	ldr	r3, [r7, #4]
 800edac:	895b      	ldrh	r3, [r3, #10]
 800edae:	2b0e      	cmp	r3, #14
 800edb0:	d977      	bls.n	800eea2 <ethernet_input+0x106>
    MIB2_STATS_NETIF_INC(netif, ifinerrors);
    goto free_and_return;
  }

  /* points to packet payload, which starts with an Ethernet header */
  ethhdr = (struct eth_hdr *)p->payload;
 800edb2:	687b      	ldr	r3, [r7, #4]
 800edb4:	685b      	ldr	r3, [r3, #4]
 800edb6:	613b      	str	r3, [r7, #16]
     (unsigned)ethhdr->dest.addr[3], (unsigned)ethhdr->dest.addr[4], (unsigned)ethhdr->dest.addr[5],
     (unsigned)ethhdr->src.addr[0],  (unsigned)ethhdr->src.addr[1],  (unsigned)ethhdr->src.addr[2],
     (unsigned)ethhdr->src.addr[3],  (unsigned)ethhdr->src.addr[4],  (unsigned)ethhdr->src.addr[5],
     lwip_htons(ethhdr->type)));

  type = ethhdr->type;
 800edb8:	693b      	ldr	r3, [r7, #16]
 800edba:	7b1a      	ldrb	r2, [r3, #12]
 800edbc:	7b5b      	ldrb	r3, [r3, #13]
 800edbe:	021b      	lsls	r3, r3, #8
 800edc0:	4313      	orrs	r3, r2
 800edc2:	81fb      	strh	r3, [r7, #14]

#if LWIP_ARP_FILTER_NETIF
  netif = LWIP_ARP_FILTER_NETIF_FN(p, netif, lwip_htons(type));
#endif /* LWIP_ARP_FILTER_NETIF*/

  if (ethhdr->dest.addr[0] & 1) {
 800edc4:	693b      	ldr	r3, [r7, #16]
 800edc6:	781b      	ldrb	r3, [r3, #0]
 800edc8:	f003 0301 	and.w	r3, r3, #1
 800edcc:	2b00      	cmp	r3, #0
 800edce:	d023      	beq.n	800ee18 <ethernet_input+0x7c>
    /* this might be a multicast or broadcast packet */
    if (ethhdr->dest.addr[0] == LL_IP4_MULTICAST_ADDR_0) {
 800edd0:	693b      	ldr	r3, [r7, #16]
 800edd2:	781b      	ldrb	r3, [r3, #0]
 800edd4:	2b01      	cmp	r3, #1
 800edd6:	d10f      	bne.n	800edf8 <ethernet_input+0x5c>
#if LWIP_IPV4
      if ((ethhdr->dest.addr[1] == LL_IP4_MULTICAST_ADDR_1) &&
 800edd8:	693b      	ldr	r3, [r7, #16]
 800edda:	785b      	ldrb	r3, [r3, #1]
 800eddc:	2b00      	cmp	r3, #0
 800edde:	d11b      	bne.n	800ee18 <ethernet_input+0x7c>
          (ethhdr->dest.addr[2] == LL_IP4_MULTICAST_ADDR_2)) {
 800ede0:	693b      	ldr	r3, [r7, #16]
 800ede2:	789b      	ldrb	r3, [r3, #2]
      if ((ethhdr->dest.addr[1] == LL_IP4_MULTICAST_ADDR_1) &&
 800ede4:	2b5e      	cmp	r3, #94	; 0x5e
 800ede6:	d117      	bne.n	800ee18 <ethernet_input+0x7c>
        /* mark the pbuf as link-layer multicast */
        p->flags |= PBUF_FLAG_LLMCAST;
 800ede8:	687b      	ldr	r3, [r7, #4]
 800edea:	7b5b      	ldrb	r3, [r3, #13]
 800edec:	f043 0310 	orr.w	r3, r3, #16
 800edf0:	b2da      	uxtb	r2, r3
 800edf2:	687b      	ldr	r3, [r7, #4]
 800edf4:	735a      	strb	r2, [r3, #13]
 800edf6:	e00f      	b.n	800ee18 <ethernet_input+0x7c>
             (ethhdr->dest.addr[1] == LL_IP6_MULTICAST_ADDR_1)) {
        /* mark the pbuf as link-layer multicast */
        p->flags |= PBUF_FLAG_LLMCAST;
    }
#endif /* LWIP_IPV6 */
    else if (eth_addr_cmp(&ethhdr->dest, &ethbroadcast)) {
 800edf8:	693b      	ldr	r3, [r7, #16]
 800edfa:	2206      	movs	r2, #6
 800edfc:	4930      	ldr	r1, [pc, #192]	; (800eec0 <ethernet_input+0x124>)
 800edfe:	4618      	mov	r0, r3
 800ee00:	f001 fb74 	bl	80104ec <memcmp>
 800ee04:	4603      	mov	r3, r0
 800ee06:	2b00      	cmp	r3, #0
 800ee08:	d106      	bne.n	800ee18 <ethernet_input+0x7c>
      /* mark the pbuf as link-layer broadcast */
      p->flags |= PBUF_FLAG_LLBCAST;
 800ee0a:	687b      	ldr	r3, [r7, #4]
 800ee0c:	7b5b      	ldrb	r3, [r3, #13]
 800ee0e:	f043 0308 	orr.w	r3, r3, #8
 800ee12:	b2da      	uxtb	r2, r3
 800ee14:	687b      	ldr	r3, [r7, #4]
 800ee16:	735a      	strb	r2, [r3, #13]
    }
  }

  switch (type) {
 800ee18:	89fb      	ldrh	r3, [r7, #14]
 800ee1a:	2b08      	cmp	r3, #8
 800ee1c:	d003      	beq.n	800ee26 <ethernet_input+0x8a>
 800ee1e:	f5b3 6fc1 	cmp.w	r3, #1544	; 0x608
 800ee22:	d01e      	beq.n	800ee62 <ethernet_input+0xc6>
      }
#endif
      ETHARP_STATS_INC(etharp.proterr);
      ETHARP_STATS_INC(etharp.drop);
      MIB2_STATS_NETIF_INC(netif, ifinunknownprotos);
      goto free_and_return;
 800ee24:	e044      	b.n	800eeb0 <ethernet_input+0x114>
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 800ee26:	683b      	ldr	r3, [r7, #0]
 800ee28:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 800ee2c:	f003 0308 	and.w	r3, r3, #8
 800ee30:	2b00      	cmp	r3, #0
 800ee32:	d038      	beq.n	800eea6 <ethernet_input+0x10a>
      if ((p->len < ip_hdr_offset) || pbuf_header(p, (s16_t)-ip_hdr_offset)) {
 800ee34:	687b      	ldr	r3, [r7, #4]
 800ee36:	895b      	ldrh	r3, [r3, #10]
 800ee38:	461a      	mov	r2, r3
 800ee3a:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 800ee3e:	429a      	cmp	r2, r3
 800ee40:	db33      	blt.n	800eeaa <ethernet_input+0x10e>
 800ee42:	8afb      	ldrh	r3, [r7, #22]
 800ee44:	425b      	negs	r3, r3
 800ee46:	b29b      	uxth	r3, r3
 800ee48:	b21b      	sxth	r3, r3
 800ee4a:	4619      	mov	r1, r3
 800ee4c:	6878      	ldr	r0, [r7, #4]
 800ee4e:	f7f8 fd4d 	bl	80078ec <pbuf_header>
 800ee52:	4603      	mov	r3, r0
 800ee54:	2b00      	cmp	r3, #0
 800ee56:	d128      	bne.n	800eeaa <ethernet_input+0x10e>
        ip4_input(p, netif);
 800ee58:	6839      	ldr	r1, [r7, #0]
 800ee5a:	6878      	ldr	r0, [r7, #4]
 800ee5c:	f7fe ff80 	bl	800dd60 <ip4_input>
      break;
 800ee60:	e01d      	b.n	800ee9e <ethernet_input+0x102>
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 800ee62:	683b      	ldr	r3, [r7, #0]
 800ee64:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 800ee68:	f003 0308 	and.w	r3, r3, #8
 800ee6c:	2b00      	cmp	r3, #0
 800ee6e:	d01e      	beq.n	800eeae <ethernet_input+0x112>
      if ((p->len < ip_hdr_offset) || pbuf_header(p, (s16_t)-ip_hdr_offset)) {
 800ee70:	687b      	ldr	r3, [r7, #4]
 800ee72:	895b      	ldrh	r3, [r3, #10]
 800ee74:	461a      	mov	r2, r3
 800ee76:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 800ee7a:	429a      	cmp	r2, r3
 800ee7c:	db15      	blt.n	800eeaa <ethernet_input+0x10e>
 800ee7e:	8afb      	ldrh	r3, [r7, #22]
 800ee80:	425b      	negs	r3, r3
 800ee82:	b29b      	uxth	r3, r3
 800ee84:	b21b      	sxth	r3, r3
 800ee86:	4619      	mov	r1, r3
 800ee88:	6878      	ldr	r0, [r7, #4]
 800ee8a:	f7f8 fd2f 	bl	80078ec <pbuf_header>
 800ee8e:	4603      	mov	r3, r0
 800ee90:	2b00      	cmp	r3, #0
 800ee92:	d10a      	bne.n	800eeaa <ethernet_input+0x10e>
        etharp_input(p, netif);
 800ee94:	6839      	ldr	r1, [r7, #0]
 800ee96:	6878      	ldr	r0, [r7, #4]
 800ee98:	f7fe f932 	bl	800d100 <etharp_input>
      break;
 800ee9c:	bf00      	nop
  }

  /* This means the pbuf is freed or consumed,
     so the caller doesn't have to free it again */
  return ERR_OK;
 800ee9e:	2300      	movs	r3, #0
 800eea0:	e00a      	b.n	800eeb8 <ethernet_input+0x11c>
    goto free_and_return;
 800eea2:	bf00      	nop
 800eea4:	e004      	b.n	800eeb0 <ethernet_input+0x114>
        goto free_and_return;
 800eea6:	bf00      	nop
 800eea8:	e002      	b.n	800eeb0 <ethernet_input+0x114>

free_and_return:
 800eeaa:	bf00      	nop
 800eeac:	e000      	b.n	800eeb0 <ethernet_input+0x114>
        goto free_and_return;
 800eeae:	bf00      	nop
  pbuf_free(p);
 800eeb0:	6878      	ldr	r0, [r7, #4]
 800eeb2:	f7f8 fd3f 	bl	8007934 <pbuf_free>
  return ERR_OK;
 800eeb6:	2300      	movs	r3, #0
}
 800eeb8:	4618      	mov	r0, r3
 800eeba:	3718      	adds	r7, #24
 800eebc:	46bd      	mov	sp, r7
 800eebe:	bd80      	pop	{r7, pc}
 800eec0:	08013200 	.word	0x08013200

0800eec4 <ethernet_output>:
 */
err_t
ethernet_output(struct netif* netif, struct pbuf* p,
                const struct eth_addr* src, const struct eth_addr* dst,
                u16_t eth_type)
{
 800eec4:	b580      	push	{r7, lr}
 800eec6:	b086      	sub	sp, #24
 800eec8:	af00      	add	r7, sp, #0
 800eeca:	60f8      	str	r0, [r7, #12]
 800eecc:	60b9      	str	r1, [r7, #8]
 800eece:	607a      	str	r2, [r7, #4]
 800eed0:	603b      	str	r3, [r7, #0]
  struct eth_hdr* ethhdr;
  u16_t eth_type_be = lwip_htons(eth_type);
 800eed2:	8c3b      	ldrh	r3, [r7, #32]
 800eed4:	4618      	mov	r0, r3
 800eed6:	f7f7 fb01 	bl	80064dc <lwip_htons>
 800eeda:	4603      	mov	r3, r0
 800eedc:	82fb      	strh	r3, [r7, #22]

    eth_type_be = PP_HTONS(ETHTYPE_VLAN);
  } else
#endif /* ETHARP_SUPPORT_VLAN && defined(LWIP_HOOK_VLAN_SET) */
  {
    if (pbuf_header(p, SIZEOF_ETH_HDR) != 0) {
 800eede:	210e      	movs	r1, #14
 800eee0:	68b8      	ldr	r0, [r7, #8]
 800eee2:	f7f8 fd03 	bl	80078ec <pbuf_header>
 800eee6:	4603      	mov	r3, r0
 800eee8:	2b00      	cmp	r3, #0
 800eeea:	d125      	bne.n	800ef38 <ethernet_output+0x74>
      goto pbuf_header_failed;
    }
  }

  ethhdr = (struct eth_hdr*)p->payload;
 800eeec:	68bb      	ldr	r3, [r7, #8]
 800eeee:	685b      	ldr	r3, [r3, #4]
 800eef0:	613b      	str	r3, [r7, #16]
  ethhdr->type = eth_type_be;
 800eef2:	693b      	ldr	r3, [r7, #16]
 800eef4:	8afa      	ldrh	r2, [r7, #22]
 800eef6:	819a      	strh	r2, [r3, #12]
  ETHADDR32_COPY(&ethhdr->dest, dst);
 800eef8:	693b      	ldr	r3, [r7, #16]
 800eefa:	2206      	movs	r2, #6
 800eefc:	6839      	ldr	r1, [r7, #0]
 800eefe:	4618      	mov	r0, r3
 800ef00:	f001 fb03 	bl	801050a <memcpy>
  ETHADDR16_COPY(&ethhdr->src,  src);
 800ef04:	693b      	ldr	r3, [r7, #16]
 800ef06:	3306      	adds	r3, #6
 800ef08:	2206      	movs	r2, #6
 800ef0a:	6879      	ldr	r1, [r7, #4]
 800ef0c:	4618      	mov	r0, r3
 800ef0e:	f001 fafc 	bl	801050a <memcpy>

  LWIP_ASSERT("netif->hwaddr_len must be 6 for ethernet_output!",
 800ef12:	68fb      	ldr	r3, [r7, #12]
 800ef14:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800ef18:	2b06      	cmp	r3, #6
 800ef1a:	d006      	beq.n	800ef2a <ethernet_output+0x66>
 800ef1c:	4b0a      	ldr	r3, [pc, #40]	; (800ef48 <ethernet_output+0x84>)
 800ef1e:	f44f 7296 	mov.w	r2, #300	; 0x12c
 800ef22:	490a      	ldr	r1, [pc, #40]	; (800ef4c <ethernet_output+0x88>)
 800ef24:	480a      	ldr	r0, [pc, #40]	; (800ef50 <ethernet_output+0x8c>)
 800ef26:	f001 fb03 	bl	8010530 <iprintf>
    (netif->hwaddr_len == ETH_HWADDR_LEN));
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE,
    ("ethernet_output: sending packet %p\n", (void *)p));

  /* send the packet */
  return netif->linkoutput(netif, p);
 800ef2a:	68fb      	ldr	r3, [r7, #12]
 800ef2c:	699b      	ldr	r3, [r3, #24]
 800ef2e:	68b9      	ldr	r1, [r7, #8]
 800ef30:	68f8      	ldr	r0, [r7, #12]
 800ef32:	4798      	blx	r3
 800ef34:	4603      	mov	r3, r0
 800ef36:	e002      	b.n	800ef3e <ethernet_output+0x7a>
      goto pbuf_header_failed;
 800ef38:	bf00      	nop

pbuf_header_failed:
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
    ("ethernet_output: could not allocate room for header.\n"));
  LINK_STATS_INC(link.lenerr);
  return ERR_BUF;
 800ef3a:	f06f 0301 	mvn.w	r3, #1
}
 800ef3e:	4618      	mov	r0, r3
 800ef40:	3718      	adds	r7, #24
 800ef42:	46bd      	mov	sp, r7
 800ef44:	bd80      	pop	{r7, pc}
 800ef46:	bf00      	nop
 800ef48:	08012fe4 	.word	0x08012fe4
 800ef4c:	0801301c 	.word	0x0801301c
 800ef50:	08013050 	.word	0x08013050

0800ef54 <sys_mbox_new>:
#endif

/*-----------------------------------------------------------------------------------*/
//  Creates an empty mailbox.
err_t sys_mbox_new(sys_mbox_t *mbox, int size)
{
 800ef54:	b580      	push	{r7, lr}
 800ef56:	b084      	sub	sp, #16
 800ef58:	af00      	add	r7, sp, #0
 800ef5a:	6078      	str	r0, [r7, #4]
 800ef5c:	6039      	str	r1, [r7, #0]
#if (osCMSIS < 0x20000U)
  osMessageQDef(QUEUE, size, void *);
 800ef5e:	683b      	ldr	r3, [r7, #0]
 800ef60:	60bb      	str	r3, [r7, #8]
 800ef62:	2304      	movs	r3, #4
 800ef64:	60fb      	str	r3, [r7, #12]
  *mbox = osMessageCreate(osMessageQ(QUEUE), NULL);
 800ef66:	f107 0308 	add.w	r3, r7, #8
 800ef6a:	2100      	movs	r1, #0
 800ef6c:	4618      	mov	r0, r3
 800ef6e:	f7f4 fda9 	bl	8003ac4 <osMessageCreate>
 800ef72:	4602      	mov	r2, r0
 800ef74:	687b      	ldr	r3, [r7, #4]
 800ef76:	601a      	str	r2, [r3, #0]
  if(lwip_stats.sys.mbox.max < lwip_stats.sys.mbox.used)
  {
    lwip_stats.sys.mbox.max = lwip_stats.sys.mbox.used;
  }
#endif /* SYS_STATS */
  if(*mbox == NULL)
 800ef78:	687b      	ldr	r3, [r7, #4]
 800ef7a:	681b      	ldr	r3, [r3, #0]
 800ef7c:	2b00      	cmp	r3, #0
 800ef7e:	d102      	bne.n	800ef86 <sys_mbox_new+0x32>
    return ERR_MEM;
 800ef80:	f04f 33ff 	mov.w	r3, #4294967295
 800ef84:	e000      	b.n	800ef88 <sys_mbox_new+0x34>

  return ERR_OK;
 800ef86:	2300      	movs	r3, #0
}
 800ef88:	4618      	mov	r0, r3
 800ef8a:	3710      	adds	r7, #16
 800ef8c:	46bd      	mov	sp, r7
 800ef8e:	bd80      	pop	{r7, pc}

0800ef90 <sys_mbox_post>:
}

/*-----------------------------------------------------------------------------------*/
//   Posts the "msg" to the mailbox.
void sys_mbox_post(sys_mbox_t *mbox, void *data)
{
 800ef90:	b580      	push	{r7, lr}
 800ef92:	b082      	sub	sp, #8
 800ef94:	af00      	add	r7, sp, #0
 800ef96:	6078      	str	r0, [r7, #4]
 800ef98:	6039      	str	r1, [r7, #0]
#if (osCMSIS < 0x20000U)
  while(osMessagePut(*mbox, (uint32_t)data, osWaitForever) != osOK);
 800ef9a:	bf00      	nop
 800ef9c:	687b      	ldr	r3, [r7, #4]
 800ef9e:	681b      	ldr	r3, [r3, #0]
 800efa0:	6839      	ldr	r1, [r7, #0]
 800efa2:	f04f 32ff 	mov.w	r2, #4294967295
 800efa6:	4618      	mov	r0, r3
 800efa8:	f7f4 fd9e 	bl	8003ae8 <osMessagePut>
 800efac:	4603      	mov	r3, r0
 800efae:	2b00      	cmp	r3, #0
 800efb0:	d1f4      	bne.n	800ef9c <sys_mbox_post+0xc>
#else
  while(osMessageQueuePut(*mbox, &data, 0, osWaitForever) != osOK);
#endif
}
 800efb2:	bf00      	nop
 800efb4:	3708      	adds	r7, #8
 800efb6:	46bd      	mov	sp, r7
 800efb8:	bd80      	pop	{r7, pc}

0800efba <sys_mbox_trypost>:


/*-----------------------------------------------------------------------------------*/
//   Try to post the "msg" to the mailbox.
err_t sys_mbox_trypost(sys_mbox_t *mbox, void *msg)
{
 800efba:	b580      	push	{r7, lr}
 800efbc:	b084      	sub	sp, #16
 800efbe:	af00      	add	r7, sp, #0
 800efc0:	6078      	str	r0, [r7, #4]
 800efc2:	6039      	str	r1, [r7, #0]
  err_t result;
#if (osCMSIS < 0x20000U)
  if(osMessagePut(*mbox, (uint32_t)msg, 0) == osOK)
 800efc4:	687b      	ldr	r3, [r7, #4]
 800efc6:	681b      	ldr	r3, [r3, #0]
 800efc8:	6839      	ldr	r1, [r7, #0]
 800efca:	2200      	movs	r2, #0
 800efcc:	4618      	mov	r0, r3
 800efce:	f7f4 fd8b 	bl	8003ae8 <osMessagePut>
 800efd2:	4603      	mov	r3, r0
 800efd4:	2b00      	cmp	r3, #0
 800efd6:	d102      	bne.n	800efde <sys_mbox_trypost+0x24>
#else
  if(osMessageQueuePut(*mbox, &msg, 0, 0) == osOK)
#endif
  {
    result = ERR_OK;
 800efd8:	2300      	movs	r3, #0
 800efda:	73fb      	strb	r3, [r7, #15]
 800efdc:	e001      	b.n	800efe2 <sys_mbox_trypost+0x28>
  }
  else
  {
    // could not post, queue must be full
    result = ERR_MEM;
 800efde:	23ff      	movs	r3, #255	; 0xff
 800efe0:	73fb      	strb	r3, [r7, #15]
#if SYS_STATS
    lwip_stats.sys.mbox.err++;
#endif /* SYS_STATS */
  }

  return result;
 800efe2:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800efe6:	4618      	mov	r0, r3
 800efe8:	3710      	adds	r7, #16
 800efea:	46bd      	mov	sp, r7
 800efec:	bd80      	pop	{r7, pc}

0800efee <sys_arch_mbox_fetch>:

  Note that a function with a similar name, sys_mbox_fetch(), is
  implemented by lwIP.
*/
u32_t sys_arch_mbox_fetch(sys_mbox_t *mbox, void **msg, u32_t timeout)
{
 800efee:	b580      	push	{r7, lr}
 800eff0:	b08c      	sub	sp, #48	; 0x30
 800eff2:	af00      	add	r7, sp, #0
 800eff4:	61f8      	str	r0, [r7, #28]
 800eff6:	61b9      	str	r1, [r7, #24]
 800eff8:	617a      	str	r2, [r7, #20]
#if (osCMSIS < 0x20000U)
  osEvent event;
  uint32_t starttime = osKernelSysTick();
 800effa:	f7f4 fbe6 	bl	80037ca <osKernelSysTick>
 800effe:	62f8      	str	r0, [r7, #44]	; 0x2c
#else
  osStatus_t status;
  uint32_t starttime = osKernelGetTickCount();
#endif
  if(timeout != 0)
 800f000:	697b      	ldr	r3, [r7, #20]
 800f002:	2b00      	cmp	r3, #0
 800f004:	d017      	beq.n	800f036 <sys_arch_mbox_fetch+0x48>
  {
#if (osCMSIS < 0x20000U)
    event = osMessageGet (*mbox, timeout);
 800f006:	69fb      	ldr	r3, [r7, #28]
 800f008:	6819      	ldr	r1, [r3, #0]
 800f00a:	f107 0320 	add.w	r3, r7, #32
 800f00e:	697a      	ldr	r2, [r7, #20]
 800f010:	4618      	mov	r0, r3
 800f012:	f7f4 fda9 	bl	8003b68 <osMessageGet>

    if(event.status == osEventMessage)
 800f016:	6a3b      	ldr	r3, [r7, #32]
 800f018:	2b10      	cmp	r3, #16
 800f01a:	d109      	bne.n	800f030 <sys_arch_mbox_fetch+0x42>
    {
      *msg = (void *)event.value.v;
 800f01c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f01e:	461a      	mov	r2, r3
 800f020:	69bb      	ldr	r3, [r7, #24]
 800f022:	601a      	str	r2, [r3, #0]
      return (osKernelSysTick() - starttime);
 800f024:	f7f4 fbd1 	bl	80037ca <osKernelSysTick>
 800f028:	4602      	mov	r2, r0
 800f02a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f02c:	1ad3      	subs	r3, r2, r3
 800f02e:	e019      	b.n	800f064 <sys_arch_mbox_fetch+0x76>
      return (osKernelGetTickCount() - starttime);
    }
#endif
    else
    {
      return SYS_ARCH_TIMEOUT;
 800f030:	f04f 33ff 	mov.w	r3, #4294967295
 800f034:	e016      	b.n	800f064 <sys_arch_mbox_fetch+0x76>
    }
  }
  else
  {
#if (osCMSIS < 0x20000U)
    event = osMessageGet (*mbox, osWaitForever);
 800f036:	69fb      	ldr	r3, [r7, #28]
 800f038:	6819      	ldr	r1, [r3, #0]
 800f03a:	463b      	mov	r3, r7
 800f03c:	f04f 32ff 	mov.w	r2, #4294967295
 800f040:	4618      	mov	r0, r3
 800f042:	f7f4 fd91 	bl	8003b68 <osMessageGet>
 800f046:	f107 0320 	add.w	r3, r7, #32
 800f04a:	463a      	mov	r2, r7
 800f04c:	ca07      	ldmia	r2, {r0, r1, r2}
 800f04e:	e883 0007 	stmia.w	r3, {r0, r1, r2}
    *msg = (void *)event.value.v;
 800f052:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f054:	461a      	mov	r2, r3
 800f056:	69bb      	ldr	r3, [r7, #24]
 800f058:	601a      	str	r2, [r3, #0]
    return (osKernelSysTick() - starttime);
 800f05a:	f7f4 fbb6 	bl	80037ca <osKernelSysTick>
 800f05e:	4602      	mov	r2, r0
 800f060:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f062:	1ad3      	subs	r3, r2, r3
#else
    osMessageQueueGet(*mbox, msg, 0, osWaitForever );
    return (osKernelGetTickCount() - starttime);
#endif
  }
}
 800f064:	4618      	mov	r0, r3
 800f066:	3730      	adds	r7, #48	; 0x30
 800f068:	46bd      	mov	sp, r7
 800f06a:	bd80      	pop	{r7, pc}

0800f06c <sys_mbox_valid>:
    return SYS_MBOX_EMPTY;
  }
}
/*----------------------------------------------------------------------------------*/
int sys_mbox_valid(sys_mbox_t *mbox)
{
 800f06c:	b480      	push	{r7}
 800f06e:	b083      	sub	sp, #12
 800f070:	af00      	add	r7, sp, #0
 800f072:	6078      	str	r0, [r7, #4]
  if (*mbox == SYS_MBOX_NULL)
 800f074:	687b      	ldr	r3, [r7, #4]
 800f076:	681b      	ldr	r3, [r3, #0]
 800f078:	2b00      	cmp	r3, #0
 800f07a:	d101      	bne.n	800f080 <sys_mbox_valid+0x14>
    return 0;
 800f07c:	2300      	movs	r3, #0
 800f07e:	e000      	b.n	800f082 <sys_mbox_valid+0x16>
  else
    return 1;
 800f080:	2301      	movs	r3, #1
}
 800f082:	4618      	mov	r0, r3
 800f084:	370c      	adds	r7, #12
 800f086:	46bd      	mov	sp, r7
 800f088:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f08c:	4770      	bx	lr

0800f08e <sys_sem_new>:

/*-----------------------------------------------------------------------------------*/
//  Creates a new semaphore. The "count" argument specifies
//  the initial state of the semaphore.
err_t sys_sem_new(sys_sem_t *sem, u8_t count)
{
 800f08e:	b580      	push	{r7, lr}
 800f090:	b084      	sub	sp, #16
 800f092:	af00      	add	r7, sp, #0
 800f094:	6078      	str	r0, [r7, #4]
 800f096:	460b      	mov	r3, r1
 800f098:	70fb      	strb	r3, [r7, #3]
#if (osCMSIS < 0x20000U)
  osSemaphoreDef(SEM);
 800f09a:	2300      	movs	r3, #0
 800f09c:	60fb      	str	r3, [r7, #12]
  *sem = osSemaphoreCreate (osSemaphore(SEM), 1);
 800f09e:	f107 030c 	add.w	r3, r7, #12
 800f0a2:	2101      	movs	r1, #1
 800f0a4:	4618      	mov	r0, r3
 800f0a6:	f7f4 fc6b 	bl	8003980 <osSemaphoreCreate>
 800f0aa:	4602      	mov	r2, r0
 800f0ac:	687b      	ldr	r3, [r7, #4]
 800f0ae:	601a      	str	r2, [r3, #0]
#else
  *sem = osSemaphoreNew(UINT16_MAX, count, NULL);
#endif

  if(*sem == NULL)
 800f0b0:	687b      	ldr	r3, [r7, #4]
 800f0b2:	681b      	ldr	r3, [r3, #0]
 800f0b4:	2b00      	cmp	r3, #0
 800f0b6:	d102      	bne.n	800f0be <sys_sem_new+0x30>
  {
#if SYS_STATS
    ++lwip_stats.sys.sem.err;
#endif /* SYS_STATS */
    return ERR_MEM;
 800f0b8:	f04f 33ff 	mov.w	r3, #4294967295
 800f0bc:	e009      	b.n	800f0d2 <sys_sem_new+0x44>
  }

  if(count == 0)	// Means it can't be taken
 800f0be:	78fb      	ldrb	r3, [r7, #3]
 800f0c0:	2b00      	cmp	r3, #0
 800f0c2:	d105      	bne.n	800f0d0 <sys_sem_new+0x42>
  {
#if (osCMSIS < 0x20000U)
    osSemaphoreWait(*sem, 0);
 800f0c4:	687b      	ldr	r3, [r7, #4]
 800f0c6:	681b      	ldr	r3, [r3, #0]
 800f0c8:	2100      	movs	r1, #0
 800f0ca:	4618      	mov	r0, r3
 800f0cc:	f7f4 fc76 	bl	80039bc <osSemaphoreWait>
  if (lwip_stats.sys.sem.max < lwip_stats.sys.sem.used) {
    lwip_stats.sys.sem.max = lwip_stats.sys.sem.used;
  }
#endif /* SYS_STATS */

  return ERR_OK;
 800f0d0:	2300      	movs	r3, #0
}
 800f0d2:	4618      	mov	r0, r3
 800f0d4:	3710      	adds	r7, #16
 800f0d6:	46bd      	mov	sp, r7
 800f0d8:	bd80      	pop	{r7, pc}

0800f0da <sys_arch_sem_wait>:

  Notice that lwIP implements a function with a similar name,
  sys_sem_wait(), that uses the sys_arch_sem_wait() function.
*/
u32_t sys_arch_sem_wait(sys_sem_t *sem, u32_t timeout)
{
 800f0da:	b580      	push	{r7, lr}
 800f0dc:	b084      	sub	sp, #16
 800f0de:	af00      	add	r7, sp, #0
 800f0e0:	6078      	str	r0, [r7, #4]
 800f0e2:	6039      	str	r1, [r7, #0]
#if (osCMSIS < 0x20000U)
  uint32_t starttime = osKernelSysTick();
 800f0e4:	f7f4 fb71 	bl	80037ca <osKernelSysTick>
 800f0e8:	60f8      	str	r0, [r7, #12]
#else
  uint32_t starttime = osKernelGetTickCount();
#endif
  if(timeout != 0)
 800f0ea:	683b      	ldr	r3, [r7, #0]
 800f0ec:	2b00      	cmp	r3, #0
 800f0ee:	d011      	beq.n	800f114 <sys_arch_sem_wait+0x3a>
  {
#if (osCMSIS < 0x20000U)
    if(osSemaphoreWait (*sem, timeout) == osOK)
 800f0f0:	687b      	ldr	r3, [r7, #4]
 800f0f2:	681b      	ldr	r3, [r3, #0]
 800f0f4:	6839      	ldr	r1, [r7, #0]
 800f0f6:	4618      	mov	r0, r3
 800f0f8:	f7f4 fc60 	bl	80039bc <osSemaphoreWait>
 800f0fc:	4603      	mov	r3, r0
 800f0fe:	2b00      	cmp	r3, #0
 800f100:	d105      	bne.n	800f10e <sys_arch_sem_wait+0x34>
    {
      return (osKernelSysTick() - starttime);
 800f102:	f7f4 fb62 	bl	80037ca <osKernelSysTick>
 800f106:	4602      	mov	r2, r0
 800f108:	68fb      	ldr	r3, [r7, #12]
 800f10a:	1ad3      	subs	r3, r2, r3
 800f10c:	e012      	b.n	800f134 <sys_arch_sem_wait+0x5a>
        return (osKernelGetTickCount() - starttime);
#endif
    }
    else
    {
      return SYS_ARCH_TIMEOUT;
 800f10e:	f04f 33ff 	mov.w	r3, #4294967295
 800f112:	e00f      	b.n	800f134 <sys_arch_sem_wait+0x5a>
    }
  }
  else
  {
#if (osCMSIS < 0x20000U)
    while(osSemaphoreWait (*sem, osWaitForever) != osOK);
 800f114:	bf00      	nop
 800f116:	687b      	ldr	r3, [r7, #4]
 800f118:	681b      	ldr	r3, [r3, #0]
 800f11a:	f04f 31ff 	mov.w	r1, #4294967295
 800f11e:	4618      	mov	r0, r3
 800f120:	f7f4 fc4c 	bl	80039bc <osSemaphoreWait>
 800f124:	4603      	mov	r3, r0
 800f126:	2b00      	cmp	r3, #0
 800f128:	d1f5      	bne.n	800f116 <sys_arch_sem_wait+0x3c>
    return (osKernelSysTick() - starttime);
 800f12a:	f7f4 fb4e 	bl	80037ca <osKernelSysTick>
 800f12e:	4602      	mov	r2, r0
 800f130:	68fb      	ldr	r3, [r7, #12]
 800f132:	1ad3      	subs	r3, r2, r3
#else
    while(osSemaphoreAcquire(*sem, osWaitForever) != osOK);
    return (osKernelGetTickCount() - starttime);
#endif
  }
}
 800f134:	4618      	mov	r0, r3
 800f136:	3710      	adds	r7, #16
 800f138:	46bd      	mov	sp, r7
 800f13a:	bd80      	pop	{r7, pc}

0800f13c <sys_sem_signal>:

/*-----------------------------------------------------------------------------------*/
// Signals a semaphore
void sys_sem_signal(sys_sem_t *sem)
{
 800f13c:	b580      	push	{r7, lr}
 800f13e:	b082      	sub	sp, #8
 800f140:	af00      	add	r7, sp, #0
 800f142:	6078      	str	r0, [r7, #4]
  osSemaphoreRelease(*sem);
 800f144:	687b      	ldr	r3, [r7, #4]
 800f146:	681b      	ldr	r3, [r3, #0]
 800f148:	4618      	mov	r0, r3
 800f14a:	f7f4 fc85 	bl	8003a58 <osSemaphoreRelease>
}
 800f14e:	bf00      	nop
 800f150:	3708      	adds	r7, #8
 800f152:	46bd      	mov	sp, r7
 800f154:	bd80      	pop	{r7, pc}
	...

0800f158 <sys_init>:
#else
osMutexId_t lwip_sys_mutex;
#endif
// Initialize sys arch
void sys_init(void)
{
 800f158:	b580      	push	{r7, lr}
 800f15a:	af00      	add	r7, sp, #0
#if (osCMSIS < 0x20000U)
  lwip_sys_mutex = osMutexCreate(osMutex(lwip_sys_mutex));
 800f15c:	4803      	ldr	r0, [pc, #12]	; (800f16c <sys_init+0x14>)
 800f15e:	f7f4 fb7f 	bl	8003860 <osMutexCreate>
 800f162:	4602      	mov	r2, r0
 800f164:	4b02      	ldr	r3, [pc, #8]	; (800f170 <sys_init+0x18>)
 800f166:	601a      	str	r2, [r3, #0]
#else
  lwip_sys_mutex = osMutexNew(NULL);
#endif
}
 800f168:	bf00      	nop
 800f16a:	bd80      	pop	{r7, pc}
 800f16c:	08013210 	.word	0x08013210
 800f170:	2400acf8 	.word	0x2400acf8

0800f174 <sys_mutex_new>:
                                      /* Mutexes*/
/*-----------------------------------------------------------------------------------*/
/*-----------------------------------------------------------------------------------*/
#if LWIP_COMPAT_MUTEX == 0
/* Create a new mutex*/
err_t sys_mutex_new(sys_mutex_t *mutex) {
 800f174:	b580      	push	{r7, lr}
 800f176:	b084      	sub	sp, #16
 800f178:	af00      	add	r7, sp, #0
 800f17a:	6078      	str	r0, [r7, #4]

#if (osCMSIS < 0x20000U)
  osMutexDef(MUTEX);
 800f17c:	2300      	movs	r3, #0
 800f17e:	60fb      	str	r3, [r7, #12]
  *mutex = osMutexCreate(osMutex(MUTEX));
 800f180:	f107 030c 	add.w	r3, r7, #12
 800f184:	4618      	mov	r0, r3
 800f186:	f7f4 fb6b 	bl	8003860 <osMutexCreate>
 800f18a:	4602      	mov	r2, r0
 800f18c:	687b      	ldr	r3, [r7, #4]
 800f18e:	601a      	str	r2, [r3, #0]
#else
  *mutex = osMutexNew(NULL);
#endif

  if(*mutex == NULL)
 800f190:	687b      	ldr	r3, [r7, #4]
 800f192:	681b      	ldr	r3, [r3, #0]
 800f194:	2b00      	cmp	r3, #0
 800f196:	d102      	bne.n	800f19e <sys_mutex_new+0x2a>
  {
#if SYS_STATS
    ++lwip_stats.sys.mutex.err;
#endif /* SYS_STATS */
    return ERR_MEM;
 800f198:	f04f 33ff 	mov.w	r3, #4294967295
 800f19c:	e000      	b.n	800f1a0 <sys_mutex_new+0x2c>
  ++lwip_stats.sys.mutex.used;
  if (lwip_stats.sys.mutex.max < lwip_stats.sys.mutex.used) {
    lwip_stats.sys.mutex.max = lwip_stats.sys.mutex.used;
  }
#endif /* SYS_STATS */
  return ERR_OK;
 800f19e:	2300      	movs	r3, #0
}
 800f1a0:	4618      	mov	r0, r3
 800f1a2:	3710      	adds	r7, #16
 800f1a4:	46bd      	mov	sp, r7
 800f1a6:	bd80      	pop	{r7, pc}

0800f1a8 <sys_mutex_lock>:
  osMutexDelete(*mutex);
}
/*-----------------------------------------------------------------------------------*/
/* Lock a mutex*/
void sys_mutex_lock(sys_mutex_t *mutex)
{
 800f1a8:	b580      	push	{r7, lr}
 800f1aa:	b082      	sub	sp, #8
 800f1ac:	af00      	add	r7, sp, #0
 800f1ae:	6078      	str	r0, [r7, #4]
#if (osCMSIS < 0x20000U)
  osMutexWait(*mutex, osWaitForever);
 800f1b0:	687b      	ldr	r3, [r7, #4]
 800f1b2:	681b      	ldr	r3, [r3, #0]
 800f1b4:	f04f 31ff 	mov.w	r1, #4294967295
 800f1b8:	4618      	mov	r0, r3
 800f1ba:	f7f4 fb5d 	bl	8003878 <osMutexWait>
#else
  osMutexAcquire(*mutex, osWaitForever);
#endif
}
 800f1be:	bf00      	nop
 800f1c0:	3708      	adds	r7, #8
 800f1c2:	46bd      	mov	sp, r7
 800f1c4:	bd80      	pop	{r7, pc}

0800f1c6 <sys_mutex_unlock>:

/*-----------------------------------------------------------------------------------*/
/* Unlock a mutex*/
void sys_mutex_unlock(sys_mutex_t *mutex)
{
 800f1c6:	b580      	push	{r7, lr}
 800f1c8:	b082      	sub	sp, #8
 800f1ca:	af00      	add	r7, sp, #0
 800f1cc:	6078      	str	r0, [r7, #4]
  osMutexRelease(*mutex);
 800f1ce:	687b      	ldr	r3, [r7, #4]
 800f1d0:	681b      	ldr	r3, [r3, #0]
 800f1d2:	4618      	mov	r0, r3
 800f1d4:	f7f4 fb9e 	bl	8003914 <osMutexRelease>
}
 800f1d8:	bf00      	nop
 800f1da:	3708      	adds	r7, #8
 800f1dc:	46bd      	mov	sp, r7
 800f1de:	bd80      	pop	{r7, pc}

0800f1e0 <sys_thread_new>:
  function "thread()". The "arg" argument will be passed as an argument to the
  thread() function. The id of the new thread is returned. Both the id and
  the priority are system dependent.
*/
sys_thread_t sys_thread_new(const char *name, lwip_thread_fn thread , void *arg, int stacksize, int prio)
{
 800f1e0:	b580      	push	{r7, lr}
 800f1e2:	b08a      	sub	sp, #40	; 0x28
 800f1e4:	af00      	add	r7, sp, #0
 800f1e6:	60f8      	str	r0, [r7, #12]
 800f1e8:	60b9      	str	r1, [r7, #8]
 800f1ea:	607a      	str	r2, [r7, #4]
 800f1ec:	603b      	str	r3, [r7, #0]
#if (osCMSIS < 0x20000U)
  const osThreadDef_t os_thread_def = { (char *)name, (os_pthread)thread, (osPriority)prio, 0, stacksize};
 800f1ee:	68fb      	ldr	r3, [r7, #12]
 800f1f0:	617b      	str	r3, [r7, #20]
 800f1f2:	68bb      	ldr	r3, [r7, #8]
 800f1f4:	61bb      	str	r3, [r7, #24]
 800f1f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f1f8:	b21b      	sxth	r3, r3
 800f1fa:	83bb      	strh	r3, [r7, #28]
 800f1fc:	2300      	movs	r3, #0
 800f1fe:	623b      	str	r3, [r7, #32]
 800f200:	683b      	ldr	r3, [r7, #0]
 800f202:	627b      	str	r3, [r7, #36]	; 0x24
  return osThreadCreate(&os_thread_def, arg);
 800f204:	f107 0314 	add.w	r3, r7, #20
 800f208:	6879      	ldr	r1, [r7, #4]
 800f20a:	4618      	mov	r0, r3
 800f20c:	f7f4 faed 	bl	80037ea <osThreadCreate>
 800f210:	4603      	mov	r3, r0
                        .stack_size = stacksize,
                        .priority = (osPriority_t)prio,
                      };
  return osThreadNew(thread, arg, &attributes);
#endif
}
 800f212:	4618      	mov	r0, r3
 800f214:	3728      	adds	r7, #40	; 0x28
 800f216:	46bd      	mov	sp, r7
 800f218:	bd80      	pop	{r7, pc}
	...

0800f21c <sys_arch_protect>:

  Note: This function is based on FreeRTOS API, because no equivalent CMSIS-RTOS
        API is available
*/
sys_prot_t sys_arch_protect(void)
{
 800f21c:	b580      	push	{r7, lr}
 800f21e:	af00      	add	r7, sp, #0
#if (osCMSIS < 0x20000U)
  osMutexWait(lwip_sys_mutex, osWaitForever);
 800f220:	4b04      	ldr	r3, [pc, #16]	; (800f234 <sys_arch_protect+0x18>)
 800f222:	681b      	ldr	r3, [r3, #0]
 800f224:	f04f 31ff 	mov.w	r1, #4294967295
 800f228:	4618      	mov	r0, r3
 800f22a:	f7f4 fb25 	bl	8003878 <osMutexWait>
#else
  osMutexAcquire(lwip_sys_mutex, osWaitForever);
#endif
  return (sys_prot_t)1;
 800f22e:	2301      	movs	r3, #1
}
 800f230:	4618      	mov	r0, r3
 800f232:	bd80      	pop	{r7, pc}
 800f234:	2400acf8 	.word	0x2400acf8

0800f238 <sys_arch_unprotect>:

  Note: This function is based on FreeRTOS API, because no equivalent CMSIS-RTOS
        API is available
*/
void sys_arch_unprotect(sys_prot_t pval)
{
 800f238:	b580      	push	{r7, lr}
 800f23a:	b082      	sub	sp, #8
 800f23c:	af00      	add	r7, sp, #0
 800f23e:	6078      	str	r0, [r7, #4]
  ( void ) pval;
  osMutexRelease(lwip_sys_mutex);
 800f240:	4b04      	ldr	r3, [pc, #16]	; (800f254 <sys_arch_unprotect+0x1c>)
 800f242:	681b      	ldr	r3, [r3, #0]
 800f244:	4618      	mov	r0, r3
 800f246:	f7f4 fb65 	bl	8003914 <osMutexRelease>
}
 800f24a:	bf00      	nop
 800f24c:	3708      	adds	r7, #8
 800f24e:	46bd      	mov	sp, r7
 800f250:	bd80      	pop	{r7, pc}
 800f252:	bf00      	nop
 800f254:	2400acf8 	.word	0x2400acf8

0800f258 <SCB_CleanInvalidateDCache>:
{
 800f258:	b480      	push	{r7}
 800f25a:	b085      	sub	sp, #20
 800f25c:	af00      	add	r7, sp, #0
    SCB->CSSELR = 0U; /*(0U << 1U) | 0U;*/  /* Level 1 data cache */
 800f25e:	4b19      	ldr	r3, [pc, #100]	; (800f2c4 <SCB_CleanInvalidateDCache+0x6c>)
 800f260:	2200      	movs	r2, #0
 800f262:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  __ASM volatile ("dsb 0xF":::"memory");
 800f266:	f3bf 8f4f 	dsb	sy
    ccsidr = SCB->CCSIDR;
 800f26a:	4b16      	ldr	r3, [pc, #88]	; (800f2c4 <SCB_CleanInvalidateDCache+0x6c>)
 800f26c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800f270:	607b      	str	r3, [r7, #4]
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
 800f272:	687b      	ldr	r3, [r7, #4]
 800f274:	0b5b      	lsrs	r3, r3, #13
 800f276:	f3c3 030e 	ubfx	r3, r3, #0, #15
 800f27a:	60fb      	str	r3, [r7, #12]
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 800f27c:	687b      	ldr	r3, [r7, #4]
 800f27e:	08db      	lsrs	r3, r3, #3
 800f280:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800f284:	60bb      	str	r3, [r7, #8]
        SCB->DCCISW = (((sets << SCB_DCCISW_SET_Pos) & SCB_DCCISW_SET_Msk) |
 800f286:	68fb      	ldr	r3, [r7, #12]
 800f288:	015a      	lsls	r2, r3, #5
 800f28a:	f643 73e0 	movw	r3, #16352	; 0x3fe0
 800f28e:	4013      	ands	r3, r2
                       ((ways << SCB_DCCISW_WAY_Pos) & SCB_DCCISW_WAY_Msk)  );
 800f290:	68ba      	ldr	r2, [r7, #8]
 800f292:	0792      	lsls	r2, r2, #30
        SCB->DCCISW = (((sets << SCB_DCCISW_SET_Pos) & SCB_DCCISW_SET_Msk) |
 800f294:	490b      	ldr	r1, [pc, #44]	; (800f2c4 <SCB_CleanInvalidateDCache+0x6c>)
 800f296:	4313      	orrs	r3, r2
 800f298:	f8c1 3274 	str.w	r3, [r1, #628]	; 0x274
      } while (ways-- != 0U);
 800f29c:	68bb      	ldr	r3, [r7, #8]
 800f29e:	1e5a      	subs	r2, r3, #1
 800f2a0:	60ba      	str	r2, [r7, #8]
 800f2a2:	2b00      	cmp	r3, #0
 800f2a4:	d1ef      	bne.n	800f286 <SCB_CleanInvalidateDCache+0x2e>
    } while(sets-- != 0U);
 800f2a6:	68fb      	ldr	r3, [r7, #12]
 800f2a8:	1e5a      	subs	r2, r3, #1
 800f2aa:	60fa      	str	r2, [r7, #12]
 800f2ac:	2b00      	cmp	r3, #0
 800f2ae:	d1e5      	bne.n	800f27c <SCB_CleanInvalidateDCache+0x24>
 800f2b0:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 800f2b4:	f3bf 8f6f 	isb	sy
}
 800f2b8:	bf00      	nop
 800f2ba:	3714      	adds	r7, #20
 800f2bc:	46bd      	mov	sp, r7
 800f2be:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f2c2:	4770      	bx	lr
 800f2c4:	e000ed00 	.word	0xe000ed00

0800f2c8 <SCB_InvalidateDCache_by_Addr>:
{
 800f2c8:	b480      	push	{r7}
 800f2ca:	b087      	sub	sp, #28
 800f2cc:	af00      	add	r7, sp, #0
 800f2ce:	6078      	str	r0, [r7, #4]
 800f2d0:	6039      	str	r1, [r7, #0]
     int32_t op_size = dsize;
 800f2d2:	683b      	ldr	r3, [r7, #0]
 800f2d4:	617b      	str	r3, [r7, #20]
    uint32_t op_addr = (uint32_t)addr;
 800f2d6:	687b      	ldr	r3, [r7, #4]
 800f2d8:	613b      	str	r3, [r7, #16]
     int32_t linesize = 32;                /* in Cortex-M7 size of cache line is fixed to 8 words (32 bytes) */
 800f2da:	2320      	movs	r3, #32
 800f2dc:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 800f2de:	f3bf 8f4f 	dsb	sy
    while (op_size > 0) {
 800f2e2:	e00b      	b.n	800f2fc <SCB_InvalidateDCache_by_Addr+0x34>
      SCB->DCIMVAC = op_addr;
 800f2e4:	4a0c      	ldr	r2, [pc, #48]	; (800f318 <SCB_InvalidateDCache_by_Addr+0x50>)
 800f2e6:	693b      	ldr	r3, [r7, #16]
 800f2e8:	f8c2 325c 	str.w	r3, [r2, #604]	; 0x25c
      op_addr += (uint32_t)linesize;
 800f2ec:	68fb      	ldr	r3, [r7, #12]
 800f2ee:	693a      	ldr	r2, [r7, #16]
 800f2f0:	4413      	add	r3, r2
 800f2f2:	613b      	str	r3, [r7, #16]
      op_size -=           linesize;
 800f2f4:	697a      	ldr	r2, [r7, #20]
 800f2f6:	68fb      	ldr	r3, [r7, #12]
 800f2f8:	1ad3      	subs	r3, r2, r3
 800f2fa:	617b      	str	r3, [r7, #20]
    while (op_size > 0) {
 800f2fc:	697b      	ldr	r3, [r7, #20]
 800f2fe:	2b00      	cmp	r3, #0
 800f300:	dcf0      	bgt.n	800f2e4 <SCB_InvalidateDCache_by_Addr+0x1c>
 800f302:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 800f306:	f3bf 8f6f 	isb	sy
}
 800f30a:	bf00      	nop
 800f30c:	371c      	adds	r7, #28
 800f30e:	46bd      	mov	sp, r7
 800f310:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f314:	4770      	bx	lr
 800f316:	bf00      	nop
 800f318:	e000ed00 	.word	0xe000ed00

0800f31c <HAL_ETH_MspInit>:
/* Private functions ---------------------------------------------------------*/
void pbuf_free_custom(struct pbuf *p);
void Error_Handler(void);

void HAL_ETH_MspInit(ETH_HandleTypeDef* ethHandle)
{
 800f31c:	b580      	push	{r7, lr}
 800f31e:	b08e      	sub	sp, #56	; 0x38
 800f320:	af00      	add	r7, sp, #0
 800f322:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800f324:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800f328:	2200      	movs	r2, #0
 800f32a:	601a      	str	r2, [r3, #0]
 800f32c:	605a      	str	r2, [r3, #4]
 800f32e:	609a      	str	r2, [r3, #8]
 800f330:	60da      	str	r2, [r3, #12]
 800f332:	611a      	str	r2, [r3, #16]
  if(ethHandle->Instance==ETH)
 800f334:	687b      	ldr	r3, [r7, #4]
 800f336:	681b      	ldr	r3, [r3, #0]
 800f338:	4a65      	ldr	r2, [pc, #404]	; (800f4d0 <HAL_ETH_MspInit+0x1b4>)
 800f33a:	4293      	cmp	r3, r2
 800f33c:	f040 80c3 	bne.w	800f4c6 <HAL_ETH_MspInit+0x1aa>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* Enable Peripheral clock */
    __HAL_RCC_ETH1MAC_CLK_ENABLE();
 800f340:	4b64      	ldr	r3, [pc, #400]	; (800f4d4 <HAL_ETH_MspInit+0x1b8>)
 800f342:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 800f346:	4a63      	ldr	r2, [pc, #396]	; (800f4d4 <HAL_ETH_MspInit+0x1b8>)
 800f348:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800f34c:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 800f350:	4b60      	ldr	r3, [pc, #384]	; (800f4d4 <HAL_ETH_MspInit+0x1b8>)
 800f352:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 800f356:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800f35a:	623b      	str	r3, [r7, #32]
 800f35c:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_ETH1TX_CLK_ENABLE();
 800f35e:	4b5d      	ldr	r3, [pc, #372]	; (800f4d4 <HAL_ETH_MspInit+0x1b8>)
 800f360:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 800f364:	4a5b      	ldr	r2, [pc, #364]	; (800f4d4 <HAL_ETH_MspInit+0x1b8>)
 800f366:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800f36a:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 800f36e:	4b59      	ldr	r3, [pc, #356]	; (800f4d4 <HAL_ETH_MspInit+0x1b8>)
 800f370:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 800f374:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800f378:	61fb      	str	r3, [r7, #28]
 800f37a:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_ETH1RX_CLK_ENABLE();
 800f37c:	4b55      	ldr	r3, [pc, #340]	; (800f4d4 <HAL_ETH_MspInit+0x1b8>)
 800f37e:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 800f382:	4a54      	ldr	r2, [pc, #336]	; (800f4d4 <HAL_ETH_MspInit+0x1b8>)
 800f384:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800f388:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 800f38c:	4b51      	ldr	r3, [pc, #324]	; (800f4d4 <HAL_ETH_MspInit+0x1b8>)
 800f38e:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 800f392:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800f396:	61bb      	str	r3, [r7, #24]
 800f398:	69bb      	ldr	r3, [r7, #24]
  
    __HAL_RCC_GPIOG_CLK_ENABLE();
 800f39a:	4b4e      	ldr	r3, [pc, #312]	; (800f4d4 <HAL_ETH_MspInit+0x1b8>)
 800f39c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800f3a0:	4a4c      	ldr	r2, [pc, #304]	; (800f4d4 <HAL_ETH_MspInit+0x1b8>)
 800f3a2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800f3a6:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800f3aa:	4b4a      	ldr	r3, [pc, #296]	; (800f4d4 <HAL_ETH_MspInit+0x1b8>)
 800f3ac:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800f3b0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800f3b4:	617b      	str	r3, [r7, #20]
 800f3b6:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800f3b8:	4b46      	ldr	r3, [pc, #280]	; (800f4d4 <HAL_ETH_MspInit+0x1b8>)
 800f3ba:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800f3be:	4a45      	ldr	r2, [pc, #276]	; (800f4d4 <HAL_ETH_MspInit+0x1b8>)
 800f3c0:	f043 0304 	orr.w	r3, r3, #4
 800f3c4:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800f3c8:	4b42      	ldr	r3, [pc, #264]	; (800f4d4 <HAL_ETH_MspInit+0x1b8>)
 800f3ca:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800f3ce:	f003 0304 	and.w	r3, r3, #4
 800f3d2:	613b      	str	r3, [r7, #16]
 800f3d4:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800f3d6:	4b3f      	ldr	r3, [pc, #252]	; (800f4d4 <HAL_ETH_MspInit+0x1b8>)
 800f3d8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800f3dc:	4a3d      	ldr	r2, [pc, #244]	; (800f4d4 <HAL_ETH_MspInit+0x1b8>)
 800f3de:	f043 0301 	orr.w	r3, r3, #1
 800f3e2:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800f3e6:	4b3b      	ldr	r3, [pc, #236]	; (800f4d4 <HAL_ETH_MspInit+0x1b8>)
 800f3e8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800f3ec:	f003 0301 	and.w	r3, r3, #1
 800f3f0:	60fb      	str	r3, [r7, #12]
 800f3f2:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800f3f4:	4b37      	ldr	r3, [pc, #220]	; (800f4d4 <HAL_ETH_MspInit+0x1b8>)
 800f3f6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800f3fa:	4a36      	ldr	r2, [pc, #216]	; (800f4d4 <HAL_ETH_MspInit+0x1b8>)
 800f3fc:	f043 0302 	orr.w	r3, r3, #2
 800f400:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800f404:	4b33      	ldr	r3, [pc, #204]	; (800f4d4 <HAL_ETH_MspInit+0x1b8>)
 800f406:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800f40a:	f003 0302 	and.w	r3, r3, #2
 800f40e:	60bb      	str	r3, [r7, #8]
 800f410:	68bb      	ldr	r3, [r7, #8]
    PA2     ------> ETH_MDIO
    PC5     ------> ETH_RXD1
    PA7     ------> ETH_CRS_DV
    PB11     ------> ETH_TX_EN 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14;  //12 for LAN8720    14 for LAN8742
 800f412:	f44f 43c0 	mov.w	r3, #24576	; 0x6000
 800f416:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800f418:	2302      	movs	r3, #2
 800f41a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800f41c:	2300      	movs	r3, #0
 800f41e:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800f420:	2303      	movs	r3, #3
 800f422:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800f424:	230b      	movs	r3, #11
 800f426:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800f428:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800f42c:	4619      	mov	r1, r3
 800f42e:	482a      	ldr	r0, [pc, #168]	; (800f4d8 <HAL_ETH_MspInit+0x1bc>)
 800f430:	f7f3 f892 	bl	8002558 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_1;
 800f434:	2302      	movs	r3, #2
 800f436:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800f438:	2302      	movs	r3, #2
 800f43a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800f43c:	2300      	movs	r3, #0
 800f43e:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800f440:	2303      	movs	r3, #3
 800f442:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800f444:	230b      	movs	r3, #11
 800f446:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800f448:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800f44c:	4619      	mov	r1, r3
 800f44e:	4823      	ldr	r0, [pc, #140]	; (800f4dc <HAL_ETH_MspInit+0x1c0>)
 800f450:	f7f3 f882 	bl	8002558 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_7;
 800f454:	2386      	movs	r3, #134	; 0x86
 800f456:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800f458:	2302      	movs	r3, #2
 800f45a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800f45c:	2300      	movs	r3, #0
 800f45e:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800f460:	2303      	movs	r3, #3
 800f462:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800f464:	230b      	movs	r3, #11
 800f466:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800f468:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800f46c:	4619      	mov	r1, r3
 800f46e:	481c      	ldr	r0, [pc, #112]	; (800f4e0 <HAL_ETH_MspInit+0x1c4>)
 800f470:	f7f3 f872 	bl	8002558 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 800f474:	2330      	movs	r3, #48	; 0x30
 800f476:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800f478:	2302      	movs	r3, #2
 800f47a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800f47c:	2300      	movs	r3, #0
 800f47e:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800f480:	2303      	movs	r3, #3
 800f482:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800f484:	230b      	movs	r3, #11
 800f486:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800f488:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800f48c:	4619      	mov	r1, r3
 800f48e:	4813      	ldr	r0, [pc, #76]	; (800f4dc <HAL_ETH_MspInit+0x1c0>)
 800f490:	f7f3 f862 	bl	8002558 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11;
 800f494:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800f498:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800f49a:	2302      	movs	r3, #2
 800f49c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800f49e:	2300      	movs	r3, #0
 800f4a0:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800f4a2:	2303      	movs	r3, #3
 800f4a4:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800f4a6:	230b      	movs	r3, #11
 800f4a8:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800f4aa:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800f4ae:	4619      	mov	r1, r3
 800f4b0:	480c      	ldr	r0, [pc, #48]	; (800f4e4 <HAL_ETH_MspInit+0x1c8>)
 800f4b2:	f7f3 f851 	bl	8002558 <HAL_GPIO_Init>

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(ETH_IRQn, 7, 0);
 800f4b6:	2200      	movs	r2, #0
 800f4b8:	2107      	movs	r1, #7
 800f4ba:	203d      	movs	r0, #61	; 0x3d
 800f4bc:	f7f1 f99b 	bl	80007f6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ETH_IRQn);
 800f4c0:	203d      	movs	r0, #61	; 0x3d
 800f4c2:	f7f1 f9b2 	bl	800082a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ETH_MspInit 1 */

  /* USER CODE END ETH_MspInit 1 */
  }
}
 800f4c6:	bf00      	nop
 800f4c8:	3738      	adds	r7, #56	; 0x38
 800f4ca:	46bd      	mov	sp, r7
 800f4cc:	bd80      	pop	{r7, pc}
 800f4ce:	bf00      	nop
 800f4d0:	40028000 	.word	0x40028000
 800f4d4:	58024400 	.word	0x58024400
 800f4d8:	58021800 	.word	0x58021800
 800f4dc:	58020800 	.word	0x58020800
 800f4e0:	58020000 	.word	0x58020000
 800f4e4:	58020400 	.word	0x58020400

0800f4e8 <HAL_ETH_RxCpltCallback>:
  * @brief  Ethernet Rx Transfer completed callback
  * @param  heth: ETH handle
  * @retval None
  */
void HAL_ETH_RxCpltCallback(ETH_HandleTypeDef *heth)
{
 800f4e8:	b580      	push	{r7, lr}
 800f4ea:	b082      	sub	sp, #8
 800f4ec:	af00      	add	r7, sp, #0
 800f4ee:	6078      	str	r0, [r7, #4]
  osSemaphoreRelease(RxPktSemaphore);
 800f4f0:	4b04      	ldr	r3, [pc, #16]	; (800f504 <HAL_ETH_RxCpltCallback+0x1c>)
 800f4f2:	681b      	ldr	r3, [r3, #0]
 800f4f4:	4618      	mov	r0, r3
 800f4f6:	f7f4 faaf 	bl	8003a58 <osSemaphoreRelease>
}
 800f4fa:	bf00      	nop
 800f4fc:	3708      	adds	r7, #8
 800f4fe:	46bd      	mov	sp, r7
 800f500:	bd80      	pop	{r7, pc}
 800f502:	bf00      	nop
 800f504:	2400417c 	.word	0x2400417c

0800f508 <low_level_init>:
 *
 * @param netif the already initialized lwip network interface structure
 *        for this ethernetif
 */
static void low_level_init(struct netif *netif)
{
 800f508:	b580      	push	{r7, lr}
 800f50a:	b0a8      	sub	sp, #160	; 0xa0
 800f50c:	af00      	add	r7, sp, #0
 800f50e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_eth_init_status;
  uint32_t idx = 0;
 800f510:	2300      	movs	r3, #0
 800f512:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  ETH_MACConfigTypeDef MACConf;
  int32_t PHYLinkState;
  uint32_t duplex, speed = 0;
 800f516:	2300      	movs	r3, #0
 800f518:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  /* Start ETH HAL Init */

   uint8_t MACAddr[6] ;
  heth.Instance = ETH;
 800f51c:	4ba8      	ldr	r3, [pc, #672]	; (800f7c0 <low_level_init+0x2b8>)
 800f51e:	4aa9      	ldr	r2, [pc, #676]	; (800f7c4 <low_level_init+0x2bc>)
 800f520:	601a      	str	r2, [r3, #0]
  MACAddr[0] = 0x00;
 800f522:	2300      	movs	r3, #0
 800f524:	f887 3020 	strb.w	r3, [r7, #32]
  MACAddr[1] = 0x80;
 800f528:	2380      	movs	r3, #128	; 0x80
 800f52a:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
  MACAddr[2] = 0xE1;
 800f52e:	23e1      	movs	r3, #225	; 0xe1
 800f530:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  MACAddr[3] = 0x20;
 800f534:	2320      	movs	r3, #32
 800f536:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  MACAddr[4] = 0x04;
 800f53a:	2304      	movs	r3, #4
 800f53c:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  MACAddr[5] = 0x13;
 800f540:	2313      	movs	r3, #19
 800f542:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  heth.Init.MACAddr = &MACAddr[0];
 800f546:	4a9e      	ldr	r2, [pc, #632]	; (800f7c0 <low_level_init+0x2b8>)
 800f548:	f107 0320 	add.w	r3, r7, #32
 800f54c:	6053      	str	r3, [r2, #4]
  heth.Init.MediaInterface = HAL_ETH_RMII_MODE;
 800f54e:	4b9c      	ldr	r3, [pc, #624]	; (800f7c0 <low_level_init+0x2b8>)
 800f550:	2201      	movs	r2, #1
 800f552:	721a      	strb	r2, [r3, #8]
  heth.Init.TxDesc = DMATxDscrTab;
 800f554:	4b9a      	ldr	r3, [pc, #616]	; (800f7c0 <low_level_init+0x2b8>)
 800f556:	4a9c      	ldr	r2, [pc, #624]	; (800f7c8 <low_level_init+0x2c0>)
 800f558:	60da      	str	r2, [r3, #12]
  heth.Init.RxDesc = DMARxDscrTab;
 800f55a:	4b99      	ldr	r3, [pc, #612]	; (800f7c0 <low_level_init+0x2b8>)
 800f55c:	4a9b      	ldr	r2, [pc, #620]	; (800f7cc <low_level_init+0x2c4>)
 800f55e:	611a      	str	r2, [r3, #16]
  heth.Init.RxBuffLen = 1536;
 800f560:	4b97      	ldr	r3, [pc, #604]	; (800f7c0 <low_level_init+0x2b8>)
 800f562:	f44f 62c0 	mov.w	r2, #1536	; 0x600
 800f566:	615a      	str	r2, [r3, #20]

  /* USER CODE BEGIN MACADDRESS */
    
  /* USER CODE END MACADDRESS */

  hal_eth_init_status = HAL_ETH_Init(&heth);
 800f568:	4895      	ldr	r0, [pc, #596]	; (800f7c0 <low_level_init+0x2b8>)
 800f56a:	f7f1 f9f1 	bl	8000950 <HAL_ETH_Init>
 800f56e:	4603      	mov	r3, r0
 800f570:	f887 3093 	strb.w	r3, [r7, #147]	; 0x93

  memset(&TxConfig, 0 , sizeof(ETH_TxPacketConfig));
 800f574:	2234      	movs	r2, #52	; 0x34
 800f576:	2100      	movs	r1, #0
 800f578:	4895      	ldr	r0, [pc, #596]	; (800f7d0 <low_level_init+0x2c8>)
 800f57a:	f000 ffd1 	bl	8010520 <memset>
  TxConfig.Attributes = ETH_TX_PACKETS_FEATURES_CSUM | ETH_TX_PACKETS_FEATURES_CRCPAD;
 800f57e:	4b94      	ldr	r3, [pc, #592]	; (800f7d0 <low_level_init+0x2c8>)
 800f580:	2221      	movs	r2, #33	; 0x21
 800f582:	601a      	str	r2, [r3, #0]
  TxConfig.ChecksumCtrl = ETH_CHECKSUM_IPHDR_PAYLOAD_INSERT_PHDR_CALC;
 800f584:	4b92      	ldr	r3, [pc, #584]	; (800f7d0 <low_level_init+0x2c8>)
 800f586:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 800f58a:	615a      	str	r2, [r3, #20]
  TxConfig.CRCPadCtrl = ETH_CRC_PAD_INSERT;
 800f58c:	4b90      	ldr	r3, [pc, #576]	; (800f7d0 <low_level_init+0x2c8>)
 800f58e:	2200      	movs	r2, #0
 800f590:	611a      	str	r2, [r3, #16]

  /* End ETH HAL Init */
  
  /* Initialize the RX POOL */
  LWIP_MEMPOOL_INIT(RX_POOL);
 800f592:	4890      	ldr	r0, [pc, #576]	; (800f7d4 <low_level_init+0x2cc>)
 800f594:	f7f7 fb10 	bl	8006bb8 <memp_init_pool>

#if LWIP_ARP || LWIP_ETHERNET 

  /* set MAC hardware address length */
  netif->hwaddr_len = ETH_HWADDR_LEN;
 800f598:	687b      	ldr	r3, [r7, #4]
 800f59a:	2206      	movs	r2, #6
 800f59c:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
  
  /* set MAC hardware address */
  netif->hwaddr[0] =  heth.Init.MACAddr[0];
 800f5a0:	4b87      	ldr	r3, [pc, #540]	; (800f7c0 <low_level_init+0x2b8>)
 800f5a2:	685b      	ldr	r3, [r3, #4]
 800f5a4:	781a      	ldrb	r2, [r3, #0]
 800f5a6:	687b      	ldr	r3, [r7, #4]
 800f5a8:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
  netif->hwaddr[1] =  heth.Init.MACAddr[1];
 800f5ac:	4b84      	ldr	r3, [pc, #528]	; (800f7c0 <low_level_init+0x2b8>)
 800f5ae:	685b      	ldr	r3, [r3, #4]
 800f5b0:	785a      	ldrb	r2, [r3, #1]
 800f5b2:	687b      	ldr	r3, [r7, #4]
 800f5b4:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
  netif->hwaddr[2] =  heth.Init.MACAddr[2];
 800f5b8:	4b81      	ldr	r3, [pc, #516]	; (800f7c0 <low_level_init+0x2b8>)
 800f5ba:	685b      	ldr	r3, [r3, #4]
 800f5bc:	789a      	ldrb	r2, [r3, #2]
 800f5be:	687b      	ldr	r3, [r7, #4]
 800f5c0:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b
  netif->hwaddr[3] =  heth.Init.MACAddr[3];
 800f5c4:	4b7e      	ldr	r3, [pc, #504]	; (800f7c0 <low_level_init+0x2b8>)
 800f5c6:	685b      	ldr	r3, [r3, #4]
 800f5c8:	78da      	ldrb	r2, [r3, #3]
 800f5ca:	687b      	ldr	r3, [r7, #4]
 800f5cc:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  netif->hwaddr[4] =  heth.Init.MACAddr[4];
 800f5d0:	4b7b      	ldr	r3, [pc, #492]	; (800f7c0 <low_level_init+0x2b8>)
 800f5d2:	685b      	ldr	r3, [r3, #4]
 800f5d4:	791a      	ldrb	r2, [r3, #4]
 800f5d6:	687b      	ldr	r3, [r7, #4]
 800f5d8:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
  netif->hwaddr[5] =  heth.Init.MACAddr[5];
 800f5dc:	4b78      	ldr	r3, [pc, #480]	; (800f7c0 <low_level_init+0x2b8>)
 800f5de:	685b      	ldr	r3, [r3, #4]
 800f5e0:	795a      	ldrb	r2, [r3, #5]
 800f5e2:	687b      	ldr	r3, [r7, #4]
 800f5e4:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e
  
  /* maximum transfer unit */
  netif->mtu = ETH_MAX_PAYLOAD;
 800f5e8:	687b      	ldr	r3, [r7, #4]
 800f5ea:	f240 52dc 	movw	r2, #1500	; 0x5dc
 800f5ee:	84da      	strh	r2, [r3, #38]	; 0x26
  
  /* Accept broadcast address and ARP traffic */
  /* don't set NETIF_FLAG_ETHARP if this device is not an ethernet one */
  #if LWIP_ARP
    netif->flags |= NETIF_FLAG_BROADCAST | NETIF_FLAG_ETHARP;
 800f5f0:	687b      	ldr	r3, [r7, #4]
 800f5f2:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 800f5f6:	f043 030a 	orr.w	r3, r3, #10
 800f5fa:	b2da      	uxtb	r2, r3
 800f5fc:	687b      	ldr	r3, [r7, #4]
 800f5fe:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
  #else 
    netif->flags |= NETIF_FLAG_BROADCAST;
  #endif /* LWIP_ARP */

  for(idx = 0; idx < ETH_RX_DESC_CNT; idx ++)
 800f602:	2300      	movs	r3, #0
 800f604:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800f608:	e012      	b.n	800f630 <low_level_init+0x128>
  {
    HAL_ETH_DescAssignMemory(&heth, idx, Rx_Buff[idx], NULL);
 800f60a:	f8d7 209c 	ldr.w	r2, [r7, #156]	; 0x9c
 800f60e:	4613      	mov	r3, r2
 800f610:	005b      	lsls	r3, r3, #1
 800f612:	4413      	add	r3, r2
 800f614:	025b      	lsls	r3, r3, #9
 800f616:	4a70      	ldr	r2, [pc, #448]	; (800f7d8 <low_level_init+0x2d0>)
 800f618:	441a      	add	r2, r3
 800f61a:	2300      	movs	r3, #0
 800f61c:	f8d7 109c 	ldr.w	r1, [r7, #156]	; 0x9c
 800f620:	4867      	ldr	r0, [pc, #412]	; (800f7c0 <low_level_init+0x2b8>)
 800f622:	f7f1 fa6f 	bl	8000b04 <HAL_ETH_DescAssignMemory>
  for(idx = 0; idx < ETH_RX_DESC_CNT; idx ++)
 800f626:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800f62a:	3301      	adds	r3, #1
 800f62c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800f630:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800f634:	2b03      	cmp	r3, #3
 800f636:	d9e8      	bls.n	800f60a <low_level_init+0x102>
  } 
      
  /* create a binary semaphore used for informing ethernetif of frame reception */
  osSemaphoreDef(SEM);
 800f638:	2300      	movs	r3, #0
 800f63a:	61fb      	str	r3, [r7, #28]
  RxPktSemaphore = osSemaphoreCreate(osSemaphore(SEM) , 1 );
 800f63c:	f107 031c 	add.w	r3, r7, #28
 800f640:	2101      	movs	r1, #1
 800f642:	4618      	mov	r0, r3
 800f644:	f7f4 f99c 	bl	8003980 <osSemaphoreCreate>
 800f648:	4602      	mov	r2, r0
 800f64a:	4b64      	ldr	r3, [pc, #400]	; (800f7dc <low_level_init+0x2d4>)
 800f64c:	601a      	str	r2, [r3, #0]

  /* create the task that handles the ETH_MAC */
  osThreadDef(EthIf, ethernetif_input, 4, netif, INTERFACE_THREAD_STACK_SIZE);
 800f64e:	4b64      	ldr	r3, [pc, #400]	; (800f7e0 <low_level_init+0x2d8>)
 800f650:	60bb      	str	r3, [r7, #8]
 800f652:	4b64      	ldr	r3, [pc, #400]	; (800f7e4 <low_level_init+0x2dc>)
 800f654:	60fb      	str	r3, [r7, #12]
 800f656:	2304      	movs	r3, #4
 800f658:	823b      	strh	r3, [r7, #16]
 800f65a:	687b      	ldr	r3, [r7, #4]
 800f65c:	617b      	str	r3, [r7, #20]
 800f65e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800f662:	61bb      	str	r3, [r7, #24]
  osThreadCreate (osThread(EthIf), netif);
 800f664:	f107 0308 	add.w	r3, r7, #8
 800f668:	6879      	ldr	r1, [r7, #4]
 800f66a:	4618      	mov	r0, r3
 800f66c:	f7f4 f8bd 	bl	80037ea <osThreadCreate>
/* USER CODE BEGIN PHY_PRE_CONFIG */ 
    
/* USER CODE END PHY_PRE_CONFIG */
  /* Set PHY IO functions */
  LAN8742_RegisterBusIO(&LAN8742, &LAN8742_IOCtx);
 800f670:	495d      	ldr	r1, [pc, #372]	; (800f7e8 <low_level_init+0x2e0>)
 800f672:	485e      	ldr	r0, [pc, #376]	; (800f7ec <low_level_init+0x2e4>)
 800f674:	f7f0 fe84 	bl	8000380 <LAN8742_RegisterBusIO>

  /* Initialize the LAN8742 ETH PHY */
  LAN8742_Init(&heth);
 800f678:	4851      	ldr	r0, [pc, #324]	; (800f7c0 <low_level_init+0x2b8>)
 800f67a:	f7f0 feb3 	bl	80003e4 <LAN8742_Init>


    PHYLinkState = LAN8742_GetLinkState(&heth);
 800f67e:	4850      	ldr	r0, [pc, #320]	; (800f7c0 <low_level_init+0x2b8>)
 800f680:	f7f0 fef0 	bl	8000464 <LAN8742_GetLinkState>
 800f684:	f8c7 008c 	str.w	r0, [r7, #140]	; 0x8c
  
    /* Get link state */  
    if(netif_is_link_up(netif) && (PHYLinkState))
 800f688:	687b      	ldr	r3, [r7, #4]
 800f68a:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 800f68e:	089b      	lsrs	r3, r3, #2
 800f690:	f003 0301 	and.w	r3, r3, #1
 800f694:	b2db      	uxtb	r3, r3
 800f696:	2b00      	cmp	r3, #0
 800f698:	d00a      	beq.n	800f6b0 <low_level_init+0x1a8>
 800f69a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800f69e:	2b00      	cmp	r3, #0
 800f6a0:	d006      	beq.n	800f6b0 <low_level_init+0x1a8>
    {
      netif_set_link_down(netif);
 800f6a2:	6878      	ldr	r0, [r7, #4]
 800f6a4:	f7f7 fd53 	bl	800714e <netif_set_link_down>
      netif_set_down(netif);
 800f6a8:	6878      	ldr	r0, [r7, #4]
 800f6aa:	f7f7 fd03 	bl	80070b4 <netif_set_down>
#endif /* LWIP_ARP || LWIP_ETHERNET */

/* USER CODE BEGIN LOW_LEVEL_INIT */ 
    
/* USER CODE END LOW_LEVEL_INIT */
}
 800f6ae:	e083      	b.n	800f7b8 <low_level_init+0x2b0>
    else if(!netif_is_link_up(netif) && (PHYLinkState))
 800f6b0:	687b      	ldr	r3, [r7, #4]
 800f6b2:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 800f6b6:	f003 0304 	and.w	r3, r3, #4
 800f6ba:	2b00      	cmp	r3, #0
 800f6bc:	d17c      	bne.n	800f7b8 <low_level_init+0x2b0>
 800f6be:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800f6c2:	2b00      	cmp	r3, #0
 800f6c4:	d078      	beq.n	800f7b8 <low_level_init+0x2b0>
      switch ((PHYLinkState & (uint16_t)0x001C))
 800f6c6:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800f6ca:	f003 031c 	and.w	r3, r3, #28
 800f6ce:	3b04      	subs	r3, #4
 800f6d0:	2b14      	cmp	r3, #20
 800f6d2:	d84d      	bhi.n	800f770 <low_level_init+0x268>
 800f6d4:	a201      	add	r2, pc, #4	; (adr r2, 800f6dc <low_level_init+0x1d4>)
 800f6d6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f6da:	bf00      	nop
 800f6dc:	0800f763 	.word	0x0800f763
 800f6e0:	0800f771 	.word	0x0800f771
 800f6e4:	0800f771 	.word	0x0800f771
 800f6e8:	0800f771 	.word	0x0800f771
 800f6ec:	0800f743 	.word	0x0800f743
 800f6f0:	0800f771 	.word	0x0800f771
 800f6f4:	0800f771 	.word	0x0800f771
 800f6f8:	0800f771 	.word	0x0800f771
 800f6fc:	0800f771 	.word	0x0800f771
 800f700:	0800f771 	.word	0x0800f771
 800f704:	0800f771 	.word	0x0800f771
 800f708:	0800f771 	.word	0x0800f771
 800f70c:	0800f771 	.word	0x0800f771
 800f710:	0800f771 	.word	0x0800f771
 800f714:	0800f771 	.word	0x0800f771
 800f718:	0800f771 	.word	0x0800f771
 800f71c:	0800f753 	.word	0x0800f753
 800f720:	0800f771 	.word	0x0800f771
 800f724:	0800f771 	.word	0x0800f771
 800f728:	0800f771 	.word	0x0800f771
 800f72c:	0800f731 	.word	0x0800f731
        duplex = ETH_FULLDUPLEX_MODE;
 800f730:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800f734:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
        speed = ETH_SPEED_100M;
 800f738:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800f73c:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
        break;
 800f740:	e01f      	b.n	800f782 <low_level_init+0x27a>
        duplex = ETH_HALFDUPLEX_MODE;
 800f742:	2300      	movs	r3, #0
 800f744:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
        speed = ETH_SPEED_100M;
 800f748:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800f74c:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
        break;
 800f750:	e017      	b.n	800f782 <low_level_init+0x27a>
        duplex = ETH_FULLDUPLEX_MODE;
 800f752:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800f756:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
        speed = ETH_SPEED_10M;
 800f75a:	2300      	movs	r3, #0
 800f75c:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
        break;
 800f760:	e00f      	b.n	800f782 <low_level_init+0x27a>
        duplex = ETH_HALFDUPLEX_MODE;
 800f762:	2300      	movs	r3, #0
 800f764:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
        speed = ETH_SPEED_10M;
 800f768:	2300      	movs	r3, #0
 800f76a:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
        break;
 800f76e:	e008      	b.n	800f782 <low_level_init+0x27a>
        duplex = ETH_FULLDUPLEX_MODE;
 800f770:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800f774:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
        speed = ETH_SPEED_100M;
 800f778:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800f77c:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
        break;      
 800f780:	bf00      	nop
    HAL_ETH_GetMACConfig(&heth, &MACConf); 
 800f782:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800f786:	4619      	mov	r1, r3
 800f788:	480d      	ldr	r0, [pc, #52]	; (800f7c0 <low_level_init+0x2b8>)
 800f78a:	f7f1 ff0f 	bl	80015ac <HAL_ETH_GetMACConfig>
    MACConf.DuplexMode = duplex;
 800f78e:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800f792:	643b      	str	r3, [r7, #64]	; 0x40
    MACConf.Speed = speed;
 800f794:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800f798:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_ETH_SetMACConfig(&heth, &MACConf);
 800f79a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800f79e:	4619      	mov	r1, r3
 800f7a0:	4807      	ldr	r0, [pc, #28]	; (800f7c0 <low_level_init+0x2b8>)
 800f7a2:	f7f2 f8d7 	bl	8001954 <HAL_ETH_SetMACConfig>
    HAL_ETH_Start_IT(&heth);
 800f7a6:	4806      	ldr	r0, [pc, #24]	; (800f7c0 <low_level_init+0x2b8>)
 800f7a8:	f7f1 f9ed 	bl	8000b86 <HAL_ETH_Start_IT>
    netif_set_up(netif);
 800f7ac:	6878      	ldr	r0, [r7, #4]
 800f7ae:	f7f7 fc3d 	bl	800702c <netif_set_up>
    netif_set_link_up(netif);
 800f7b2:	6878      	ldr	r0, [r7, #4]
 800f7b4:	f7f7 fca0 	bl	80070f8 <netif_set_link_up>
}
 800f7b8:	bf00      	nop
 800f7ba:	37a0      	adds	r7, #160	; 0xa0
 800f7bc:	46bd      	mov	sp, r7
 800f7be:	bd80      	pop	{r7, pc}
 800f7c0:	2400aeb0 	.word	0x2400aeb0
 800f7c4:	40028000 	.word	0x40028000
 800f7c8:	30040060 	.word	0x30040060
 800f7cc:	30040000 	.word	0x30040000
 800f7d0:	2400af20 	.word	0x2400af20
 800f7d4:	08013214 	.word	0x08013214
 800f7d8:	30040200 	.word	0x30040200
 800f7dc:	2400417c 	.word	0x2400417c
 800f7e0:	08013078 	.word	0x08013078
 800f7e4:	0800f9a1 	.word	0x0800f9a1
 800f7e8:	24000010 	.word	0x24000010
 800f7ec:	2400ae90 	.word	0x2400ae90

0800f7f0 <low_level_output>:
 *       to become availale since the stack doesn't retry to send a packet
 *       dropped because of memory failure (except for the TCP timers).
 */

static err_t low_level_output(struct netif *netif, struct pbuf *p)
{
 800f7f0:	b580      	push	{r7, lr}
 800f7f2:	b092      	sub	sp, #72	; 0x48
 800f7f4:	af00      	add	r7, sp, #0
 800f7f6:	6078      	str	r0, [r7, #4]
 800f7f8:	6039      	str	r1, [r7, #0]
  uint32_t i=0, framelen = 0;
 800f7fa:	2300      	movs	r3, #0
 800f7fc:	647b      	str	r3, [r7, #68]	; 0x44
 800f7fe:	2300      	movs	r3, #0
 800f800:	643b      	str	r3, [r7, #64]	; 0x40
  struct pbuf *q;
  err_t errval = ERR_OK;
 800f802:	2300      	movs	r3, #0
 800f804:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
  ETH_BufferTypeDef Txbuffer[ETH_TX_DESC_CNT];
  
  static sys_sem_t ousem = NULL;
  if(ousem == NULL)
 800f808:	4b41      	ldr	r3, [pc, #260]	; (800f910 <low_level_output+0x120>)
 800f80a:	681b      	ldr	r3, [r3, #0]
 800f80c:	2b00      	cmp	r3, #0
 800f80e:	d106      	bne.n	800f81e <low_level_output+0x2e>
  {
    sys_sem_new(&ousem,0);
 800f810:	2100      	movs	r1, #0
 800f812:	483f      	ldr	r0, [pc, #252]	; (800f910 <low_level_output+0x120>)
 800f814:	f7ff fc3b 	bl	800f08e <sys_sem_new>
    sys_sem_signal(&ousem);
 800f818:	483d      	ldr	r0, [pc, #244]	; (800f910 <low_level_output+0x120>)
 800f81a:	f7ff fc8f 	bl	800f13c <sys_sem_signal>
  }

  memset(Txbuffer, 0 , ETH_TX_DESC_CNT*sizeof(ETH_BufferTypeDef));
 800f81e:	f107 0308 	add.w	r3, r7, #8
 800f822:	2230      	movs	r2, #48	; 0x30
 800f824:	2100      	movs	r1, #0
 800f826:	4618      	mov	r0, r3
 800f828:	f000 fe7a 	bl	8010520 <memset>
  
  sys_sem_wait(&ousem);
 800f82c:	2100      	movs	r1, #0
 800f82e:	4838      	ldr	r0, [pc, #224]	; (800f910 <low_level_output+0x120>)
 800f830:	f7ff fc53 	bl	800f0da <sys_arch_sem_wait>

  for(q = p; q != NULL; q = q->next)
 800f834:	683b      	ldr	r3, [r7, #0]
 800f836:	63fb      	str	r3, [r7, #60]	; 0x3c
 800f838:	e04f      	b.n	800f8da <low_level_output+0xea>
  {
    if(i >= ETH_TX_DESC_CNT)	
 800f83a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800f83c:	2b03      	cmp	r3, #3
 800f83e:	d902      	bls.n	800f846 <low_level_output+0x56>
      return ERR_IF;
 800f840:	f06f 030b 	mvn.w	r3, #11
 800f844:	e05f      	b.n	800f906 <low_level_output+0x116>
    
    Txbuffer[i].buffer = q->payload;
 800f846:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f848:	6859      	ldr	r1, [r3, #4]
 800f84a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800f84c:	4613      	mov	r3, r2
 800f84e:	005b      	lsls	r3, r3, #1
 800f850:	4413      	add	r3, r2
 800f852:	009b      	lsls	r3, r3, #2
 800f854:	f107 0248 	add.w	r2, r7, #72	; 0x48
 800f858:	4413      	add	r3, r2
 800f85a:	3b40      	subs	r3, #64	; 0x40
 800f85c:	6019      	str	r1, [r3, #0]
    Txbuffer[i].len = q->len;
 800f85e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f860:	895b      	ldrh	r3, [r3, #10]
 800f862:	4619      	mov	r1, r3
 800f864:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800f866:	4613      	mov	r3, r2
 800f868:	005b      	lsls	r3, r3, #1
 800f86a:	4413      	add	r3, r2
 800f86c:	009b      	lsls	r3, r3, #2
 800f86e:	f107 0248 	add.w	r2, r7, #72	; 0x48
 800f872:	4413      	add	r3, r2
 800f874:	3b3c      	subs	r3, #60	; 0x3c
 800f876:	6019      	str	r1, [r3, #0]
    framelen += q->len;
 800f878:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f87a:	895b      	ldrh	r3, [r3, #10]
 800f87c:	461a      	mov	r2, r3
 800f87e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800f880:	4413      	add	r3, r2
 800f882:	643b      	str	r3, [r7, #64]	; 0x40
    
    if(i>0)
 800f884:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800f886:	2b00      	cmp	r3, #0
 800f888:	d012      	beq.n	800f8b0 <low_level_output+0xc0>
    {
      Txbuffer[i-1].next = &Txbuffer[i];
 800f88a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800f88c:	1e5a      	subs	r2, r3, #1
 800f88e:	f107 0008 	add.w	r0, r7, #8
 800f892:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800f894:	460b      	mov	r3, r1
 800f896:	005b      	lsls	r3, r3, #1
 800f898:	440b      	add	r3, r1
 800f89a:	009b      	lsls	r3, r3, #2
 800f89c:	18c1      	adds	r1, r0, r3
 800f89e:	4613      	mov	r3, r2
 800f8a0:	005b      	lsls	r3, r3, #1
 800f8a2:	4413      	add	r3, r2
 800f8a4:	009b      	lsls	r3, r3, #2
 800f8a6:	f107 0248 	add.w	r2, r7, #72	; 0x48
 800f8aa:	4413      	add	r3, r2
 800f8ac:	3b38      	subs	r3, #56	; 0x38
 800f8ae:	6019      	str	r1, [r3, #0]
    }
    
    if(q->next == NULL)
 800f8b0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f8b2:	681b      	ldr	r3, [r3, #0]
 800f8b4:	2b00      	cmp	r3, #0
 800f8b6:	d10a      	bne.n	800f8ce <low_level_output+0xde>
    {
      Txbuffer[i].next = NULL;
 800f8b8:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800f8ba:	4613      	mov	r3, r2
 800f8bc:	005b      	lsls	r3, r3, #1
 800f8be:	4413      	add	r3, r2
 800f8c0:	009b      	lsls	r3, r3, #2
 800f8c2:	f107 0248 	add.w	r2, r7, #72	; 0x48
 800f8c6:	4413      	add	r3, r2
 800f8c8:	3b38      	subs	r3, #56	; 0x38
 800f8ca:	2200      	movs	r2, #0
 800f8cc:	601a      	str	r2, [r3, #0]
    }
    
    i++;
 800f8ce:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800f8d0:	3301      	adds	r3, #1
 800f8d2:	647b      	str	r3, [r7, #68]	; 0x44
  for(q = p; q != NULL; q = q->next)
 800f8d4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f8d6:	681b      	ldr	r3, [r3, #0]
 800f8d8:	63fb      	str	r3, [r7, #60]	; 0x3c
 800f8da:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f8dc:	2b00      	cmp	r3, #0
 800f8de:	d1ac      	bne.n	800f83a <low_level_output+0x4a>
  }

  TxConfig.Length = framelen;
 800f8e0:	4a0c      	ldr	r2, [pc, #48]	; (800f914 <low_level_output+0x124>)
 800f8e2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800f8e4:	6053      	str	r3, [r2, #4]
  TxConfig.TxBuffer = Txbuffer;
 800f8e6:	4a0b      	ldr	r2, [pc, #44]	; (800f914 <low_level_output+0x124>)
 800f8e8:	f107 0308 	add.w	r3, r7, #8
 800f8ec:	6093      	str	r3, [r2, #8]

  SCB_CleanInvalidateDCache();
 800f8ee:	f7ff fcb3 	bl	800f258 <SCB_CleanInvalidateDCache>
  HAL_ETH_Transmit(&heth, &TxConfig, ETH_DMA_TRANSMIT_TIMEOUT);
 800f8f2:	2205      	movs	r2, #5
 800f8f4:	4907      	ldr	r1, [pc, #28]	; (800f914 <low_level_output+0x124>)
 800f8f6:	4808      	ldr	r0, [pc, #32]	; (800f918 <low_level_output+0x128>)
 800f8f8:	f7f1 f9db 	bl	8000cb2 <HAL_ETH_Transmit>
  
  sys_sem_signal(&ousem);
 800f8fc:	4804      	ldr	r0, [pc, #16]	; (800f910 <low_level_output+0x120>)
 800f8fe:	f7ff fc1d 	bl	800f13c <sys_sem_signal>

  return errval;
 800f902:	f997 303b 	ldrsb.w	r3, [r7, #59]	; 0x3b
}
 800f906:	4618      	mov	r0, r3
 800f908:	3748      	adds	r7, #72	; 0x48
 800f90a:	46bd      	mov	sp, r7
 800f90c:	bd80      	pop	{r7, pc}
 800f90e:	bf00      	nop
 800f910:	24004184 	.word	0x24004184
 800f914:	2400af20 	.word	0x2400af20
 800f918:	2400aeb0 	.word	0x2400aeb0

0800f91c <low_level_input>:
 * @param netif the lwip network interface structure for this ethernetif
 * @return a pbuf filled with the received packet (including MAC header)
 *         NULL on memory error
   */
static struct pbuf * low_level_input(struct netif *netif)
{
 800f91c:	b580      	push	{r7, lr}
 800f91e:	b08a      	sub	sp, #40	; 0x28
 800f920:	af02      	add	r7, sp, #8
 800f922:	6078      	str	r0, [r7, #4]
  struct pbuf *p = NULL;
 800f924:	2300      	movs	r3, #0
 800f926:	61fb      	str	r3, [r7, #28]
  ETH_BufferTypeDef RxBuff;
  uint32_t framelength = 0;
 800f928:	2300      	movs	r3, #0
 800f92a:	60bb      	str	r3, [r7, #8]
  struct pbuf_custom* custom_pbuf;
  
  SCB_CleanInvalidateDCache();
 800f92c:	f7ff fc94 	bl	800f258 <SCB_CleanInvalidateDCache>
  if (HAL_ETH_GetRxDataBuffer(&heth, &RxBuff) == HAL_OK) 
 800f930:	f107 030c 	add.w	r3, r7, #12
 800f934:	4619      	mov	r1, r3
 800f936:	4816      	ldr	r0, [pc, #88]	; (800f990 <low_level_input+0x74>)
 800f938:	f7f1 fb25 	bl	8000f86 <HAL_ETH_GetRxDataBuffer>
 800f93c:	4603      	mov	r3, r0
 800f93e:	2b00      	cmp	r3, #0
 800f940:	d121      	bne.n	800f986 <low_level_input+0x6a>
  {
    HAL_ETH_GetRxDataLength(&heth, &framelength);
 800f942:	f107 0308 	add.w	r3, r7, #8
 800f946:	4619      	mov	r1, r3
 800f948:	4811      	ldr	r0, [pc, #68]	; (800f990 <low_level_input+0x74>)
 800f94a:	f7f1 fbba 	bl	80010c2 <HAL_ETH_GetRxDataLength>
    
    /* Build Rx descriptor to be ready for next data reception */
    HAL_ETH_BuildRxDescriptors(&heth);
 800f94e:	4810      	ldr	r0, [pc, #64]	; (800f990 <low_level_input+0x74>)
 800f950:	f7f1 fbea 	bl	8001128 <HAL_ETH_BuildRxDescriptors>

#if !defined(DUAL_CORE) || defined(CORE_CM7)
    /* Invalidate data cache for ETH Rx Buffers */
    SCB_InvalidateDCache_by_Addr((uint32_t *)Rx_Buff, (ETH_RX_DESC_CNT * ETH_RX_BUFFER_SIZE));
 800f954:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 800f958:	480e      	ldr	r0, [pc, #56]	; (800f994 <low_level_input+0x78>)
 800f95a:	f7ff fcb5 	bl	800f2c8 <SCB_InvalidateDCache_by_Addr>
#endif

    custom_pbuf  = (struct pbuf_custom*)LWIP_MEMPOOL_ALLOC(RX_POOL);
 800f95e:	480e      	ldr	r0, [pc, #56]	; (800f998 <low_level_input+0x7c>)
 800f960:	f7f7 f9a6 	bl	8006cb0 <memp_malloc_pool>
 800f964:	61b8      	str	r0, [r7, #24]
    custom_pbuf->custom_free_function = pbuf_free_custom;
 800f966:	69bb      	ldr	r3, [r7, #24]
 800f968:	4a0c      	ldr	r2, [pc, #48]	; (800f99c <low_level_input+0x80>)
 800f96a:	611a      	str	r2, [r3, #16]

    p = pbuf_alloced_custom(PBUF_RAW, framelength, PBUF_REF, custom_pbuf, RxBuff.buffer, ETH_RX_BUFFER_SIZE);
 800f96c:	68bb      	ldr	r3, [r7, #8]
 800f96e:	b299      	uxth	r1, r3
 800f970:	68fb      	ldr	r3, [r7, #12]
 800f972:	f44f 62c0 	mov.w	r2, #1536	; 0x600
 800f976:	9201      	str	r2, [sp, #4]
 800f978:	9300      	str	r3, [sp, #0]
 800f97a:	69bb      	ldr	r3, [r7, #24]
 800f97c:	2202      	movs	r2, #2
 800f97e:	2004      	movs	r0, #4
 800f980:	f7f7 fdfa 	bl	8007578 <pbuf_alloced_custom>
 800f984:	61f8      	str	r0, [r7, #28]
  }
  
  
  return p;
 800f986:	69fb      	ldr	r3, [r7, #28]
}
 800f988:	4618      	mov	r0, r3
 800f98a:	3720      	adds	r7, #32
 800f98c:	46bd      	mov	sp, r7
 800f98e:	bd80      	pop	{r7, pc}
 800f990:	2400aeb0 	.word	0x2400aeb0
 800f994:	30040200 	.word	0x30040200
 800f998:	08013214 	.word	0x08013214
 800f99c:	0800fa5d 	.word	0x0800fa5d

0800f9a0 <ethernetif_input>:
 * the appropriate input function is called.
 *
 * @param netif the lwip network interface structure for this ethernetif
 */
void ethernetif_input(void const * argument)
{
 800f9a0:	b580      	push	{r7, lr}
 800f9a2:	b084      	sub	sp, #16
 800f9a4:	af00      	add	r7, sp, #0
 800f9a6:	6078      	str	r0, [r7, #4]
  struct pbuf *p;
  struct netif *netif = (struct netif *) argument;
 800f9a8:	687b      	ldr	r3, [r7, #4]
 800f9aa:	60fb      	str	r3, [r7, #12]
  
  for( ;; )
  {
    if (osSemaphoreWait(RxPktSemaphore, TIME_WAITING_FOR_INPUT) == osOK)
 800f9ac:	4b12      	ldr	r3, [pc, #72]	; (800f9f8 <ethernetif_input+0x58>)
 800f9ae:	681b      	ldr	r3, [r3, #0]
 800f9b0:	f04f 31ff 	mov.w	r1, #4294967295
 800f9b4:	4618      	mov	r0, r3
 800f9b6:	f7f4 f801 	bl	80039bc <osSemaphoreWait>
 800f9ba:	4603      	mov	r3, r0
 800f9bc:	2b00      	cmp	r3, #0
 800f9be:	d1f5      	bne.n	800f9ac <ethernetif_input+0xc>
    {
      do
      {
        LOCK_TCPIP_CORE();
 800f9c0:	480e      	ldr	r0, [pc, #56]	; (800f9fc <ethernetif_input+0x5c>)
 800f9c2:	f7ff fbf1 	bl	800f1a8 <sys_mutex_lock>
        
        p = low_level_input( netif );
 800f9c6:	68f8      	ldr	r0, [r7, #12]
 800f9c8:	f7ff ffa8 	bl	800f91c <low_level_input>
 800f9cc:	60b8      	str	r0, [r7, #8]


        if (p != NULL)
 800f9ce:	68bb      	ldr	r3, [r7, #8]
 800f9d0:	2b00      	cmp	r3, #0
 800f9d2:	d00a      	beq.n	800f9ea <ethernetif_input+0x4a>
        {
          if (netif->input( p, netif) != ERR_OK )
 800f9d4:	68fb      	ldr	r3, [r7, #12]
 800f9d6:	691b      	ldr	r3, [r3, #16]
 800f9d8:	68f9      	ldr	r1, [r7, #12]
 800f9da:	68b8      	ldr	r0, [r7, #8]
 800f9dc:	4798      	blx	r3
 800f9de:	4603      	mov	r3, r0
 800f9e0:	2b00      	cmp	r3, #0
 800f9e2:	d002      	beq.n	800f9ea <ethernetif_input+0x4a>
          {
            pbuf_free(p);           
 800f9e4:	68b8      	ldr	r0, [r7, #8]
 800f9e6:	f7f7 ffa5 	bl	8007934 <pbuf_free>
          }
        }
        
        UNLOCK_TCPIP_CORE();
 800f9ea:	4804      	ldr	r0, [pc, #16]	; (800f9fc <ethernetif_input+0x5c>)
 800f9ec:	f7ff fbeb 	bl	800f1c6 <sys_mutex_unlock>
        
      } while(p!=NULL);
 800f9f0:	68bb      	ldr	r3, [r7, #8]
 800f9f2:	2b00      	cmp	r3, #0
 800f9f4:	d1e4      	bne.n	800f9c0 <ethernetif_input+0x20>
    if (osSemaphoreWait(RxPktSemaphore, TIME_WAITING_FOR_INPUT) == osOK)
 800f9f6:	e7d9      	b.n	800f9ac <ethernetif_input+0xc>
 800f9f8:	2400417c 	.word	0x2400417c
 800f9fc:	24004198 	.word	0x24004198

0800fa00 <ethernetif_init>:
 * @return ERR_OK if the loopif is initialized
 *         ERR_MEM if private data couldn't be allocated
 *         any other err_t on error
 */
err_t ethernetif_init(struct netif *netif)
{
 800fa00:	b580      	push	{r7, lr}
 800fa02:	b082      	sub	sp, #8
 800fa04:	af00      	add	r7, sp, #0
 800fa06:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("netif != NULL", (netif != NULL));
 800fa08:	687b      	ldr	r3, [r7, #4]
 800fa0a:	2b00      	cmp	r3, #0
 800fa0c:	d106      	bne.n	800fa1c <ethernetif_init+0x1c>
 800fa0e:	4b0e      	ldr	r3, [pc, #56]	; (800fa48 <ethernetif_init+0x48>)
 800fa10:	f44f 7213 	mov.w	r2, #588	; 0x24c
 800fa14:	490d      	ldr	r1, [pc, #52]	; (800fa4c <ethernetif_init+0x4c>)
 800fa16:	480e      	ldr	r0, [pc, #56]	; (800fa50 <ethernetif_init+0x50>)
 800fa18:	f000 fd8a 	bl	8010530 <iprintf>
#if LWIP_NETIF_HOSTNAME
  /* Initialize interface hostname */
  netif->hostname = "lwip";
#endif /* LWIP_NETIF_HOSTNAME */

  netif->name[0] = IFNAME0;
 800fa1c:	687b      	ldr	r3, [r7, #4]
 800fa1e:	2273      	movs	r2, #115	; 0x73
 800fa20:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  netif->name[1] = IFNAME1;
 800fa24:	687b      	ldr	r3, [r7, #4]
 800fa26:	2274      	movs	r2, #116	; 0x74
 800fa28:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
   * is available...) */

#if LWIP_IPV4
#if LWIP_ARP || LWIP_ETHERNET
#if LWIP_ARP
  netif->output = etharp_output;
 800fa2c:	687b      	ldr	r3, [r7, #4]
 800fa2e:	4a09      	ldr	r2, [pc, #36]	; (800fa54 <ethernetif_init+0x54>)
 800fa30:	615a      	str	r2, [r3, #20]
 
#if LWIP_IPV6
  netif->output_ip6 = ethip6_output;
#endif /* LWIP_IPV6 */

  netif->linkoutput = low_level_output;
 800fa32:	687b      	ldr	r3, [r7, #4]
 800fa34:	4a08      	ldr	r2, [pc, #32]	; (800fa58 <ethernetif_init+0x58>)
 800fa36:	619a      	str	r2, [r3, #24]

  /* initialize the hardware */
  low_level_init(netif);
 800fa38:	6878      	ldr	r0, [r7, #4]
 800fa3a:	f7ff fd65 	bl	800f508 <low_level_init>

  return ERR_OK;
 800fa3e:	2300      	movs	r3, #0
}
 800fa40:	4618      	mov	r0, r3
 800fa42:	3708      	adds	r7, #8
 800fa44:	46bd      	mov	sp, r7
 800fa46:	bd80      	pop	{r7, pc}
 800fa48:	08013080 	.word	0x08013080
 800fa4c:	08013094 	.word	0x08013094
 800fa50:	080130a4 	.word	0x080130a4
 800fa54:	0800d349 	.word	0x0800d349
 800fa58:	0800f7f1 	.word	0x0800f7f1

0800fa5c <pbuf_free_custom>:
  * @brief  Custom Rx pbuf free callback
  * @param  pbuf: pbuf to be freed
  * @retval None
  */
void pbuf_free_custom(struct pbuf *p)
{
 800fa5c:	b580      	push	{r7, lr}
 800fa5e:	b084      	sub	sp, #16
 800fa60:	af00      	add	r7, sp, #0
 800fa62:	6078      	str	r0, [r7, #4]
  struct pbuf_custom* custom_pbuf = (struct pbuf_custom*)p;
 800fa64:	687b      	ldr	r3, [r7, #4]
 800fa66:	60fb      	str	r3, [r7, #12]
  
#if !defined(DUAL_CORE) || defined(CORE_CM7)
  /* Invalidate data cache: lwIP and/or application may have written into buffer */
  SCB_InvalidateDCache_by_Addr((uint32_t *)p->payload, p->tot_len);
 800fa68:	687b      	ldr	r3, [r7, #4]
 800fa6a:	685a      	ldr	r2, [r3, #4]
 800fa6c:	687b      	ldr	r3, [r7, #4]
 800fa6e:	891b      	ldrh	r3, [r3, #8]
 800fa70:	4619      	mov	r1, r3
 800fa72:	4610      	mov	r0, r2
 800fa74:	f7ff fc28 	bl	800f2c8 <SCB_InvalidateDCache_by_Addr>
#endif
  
  LWIP_MEMPOOL_FREE(RX_POOL, custom_pbuf);
 800fa78:	68f9      	ldr	r1, [r7, #12]
 800fa7a:	4803      	ldr	r0, [pc, #12]	; (800fa88 <pbuf_free_custom+0x2c>)
 800fa7c:	f7f7 f98c 	bl	8006d98 <memp_free_pool>
}
 800fa80:	bf00      	nop
 800fa82:	3710      	adds	r7, #16
 800fa84:	46bd      	mov	sp, r7
 800fa86:	bd80      	pop	{r7, pc}
 800fa88:	08013214 	.word	0x08013214

0800fa8c <sys_now>:
*         when LWIP_TIMERS == 1 and NO_SYS == 1
* @param  None
* @retval Current Time value
*/
u32_t sys_now(void)
{
 800fa8c:	b580      	push	{r7, lr}
 800fa8e:	af00      	add	r7, sp, #0
  return HAL_GetTick();
 800fa90:	f7f0 fd88 	bl	80005a4 <HAL_GetTick>
 800fa94:	4603      	mov	r3, r0
}
 800fa96:	4618      	mov	r0, r3
 800fa98:	bd80      	pop	{r7, pc}
	...

0800fa9c <ETH_PHY_IO_Init>:
  * @brief  Initializes the MDIO interface GPIO and clocks.
  * @param  None
  * @retval 0 if OK, -1 if ERROR
  */
int32_t ETH_PHY_IO_Init(void)
{  
 800fa9c:	b580      	push	{r7, lr}
 800fa9e:	af00      	add	r7, sp, #0
  /* We assume that MDIO GPIO configuration is already done
     in the ETH_MspInit() else it should be done here 
  */
  
  /* Configure the MDIO Clock */
  HAL_ETH_SetMDIOClockRange(&heth);
 800faa0:	4802      	ldr	r0, [pc, #8]	; (800faac <ETH_PHY_IO_Init+0x10>)
 800faa2:	f7f1 ff71 	bl	8001988 <HAL_ETH_SetMDIOClockRange>
  
  return 0;
 800faa6:	2300      	movs	r3, #0
}
 800faa8:	4618      	mov	r0, r3
 800faaa:	bd80      	pop	{r7, pc}
 800faac:	2400aeb0 	.word	0x2400aeb0

0800fab0 <ETH_PHY_IO_DeInit>:
  * @brief  De-Initializes the MDIO interface .
  * @param  None
  * @retval 0 if OK, -1 if ERROR
  */
int32_t ETH_PHY_IO_DeInit (void)
{
 800fab0:	b480      	push	{r7}
 800fab2:	af00      	add	r7, sp, #0
  return 0;
 800fab4:	2300      	movs	r3, #0
}
 800fab6:	4618      	mov	r0, r3
 800fab8:	46bd      	mov	sp, r7
 800faba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fabe:	4770      	bx	lr

0800fac0 <ETH_PHY_IO_ReadReg>:
  * @param  RegAddr: PHY register address
  * @param  pRegVal: pointer to hold the register value 
  * @retval 0 if OK -1 if Error
  */
int32_t ETH_PHY_IO_ReadReg(uint32_t DevAddr, uint32_t RegAddr, uint32_t *pRegVal)
{
 800fac0:	b580      	push	{r7, lr}
 800fac2:	b084      	sub	sp, #16
 800fac4:	af00      	add	r7, sp, #0
 800fac6:	60f8      	str	r0, [r7, #12]
 800fac8:	60b9      	str	r1, [r7, #8]
 800faca:	607a      	str	r2, [r7, #4]
  if(HAL_ETH_ReadPHYRegister(&heth, DevAddr, RegAddr, pRegVal) != HAL_OK)
 800facc:	687b      	ldr	r3, [r7, #4]
 800face:	68ba      	ldr	r2, [r7, #8]
 800fad0:	68f9      	ldr	r1, [r7, #12]
 800fad2:	4807      	ldr	r0, [pc, #28]	; (800faf0 <ETH_PHY_IO_ReadReg+0x30>)
 800fad4:	f7f1 fcc2 	bl	800145c <HAL_ETH_ReadPHYRegister>
 800fad8:	4603      	mov	r3, r0
 800fada:	2b00      	cmp	r3, #0
 800fadc:	d002      	beq.n	800fae4 <ETH_PHY_IO_ReadReg+0x24>
  {
    return -1;
 800fade:	f04f 33ff 	mov.w	r3, #4294967295
 800fae2:	e000      	b.n	800fae6 <ETH_PHY_IO_ReadReg+0x26>
  }
  
  return 0;
 800fae4:	2300      	movs	r3, #0
}
 800fae6:	4618      	mov	r0, r3
 800fae8:	3710      	adds	r7, #16
 800faea:	46bd      	mov	sp, r7
 800faec:	bd80      	pop	{r7, pc}
 800faee:	bf00      	nop
 800faf0:	2400aeb0 	.word	0x2400aeb0

0800faf4 <ETH_PHY_IO_WriteReg>:
  * @param  RegAddr: PHY register address
  * @param  RegVal: Value to be written 
  * @retval 0 if OK -1 if Error
  */
int32_t ETH_PHY_IO_WriteReg(uint32_t DevAddr, uint32_t RegAddr, uint32_t RegVal)
{
 800faf4:	b580      	push	{r7, lr}
 800faf6:	b084      	sub	sp, #16
 800faf8:	af00      	add	r7, sp, #0
 800fafa:	60f8      	str	r0, [r7, #12]
 800fafc:	60b9      	str	r1, [r7, #8]
 800fafe:	607a      	str	r2, [r7, #4]
  if(HAL_ETH_WritePHYRegister(&heth, DevAddr, RegAddr, RegVal) != HAL_OK)
 800fb00:	687b      	ldr	r3, [r7, #4]
 800fb02:	68ba      	ldr	r2, [r7, #8]
 800fb04:	68f9      	ldr	r1, [r7, #12]
 800fb06:	4807      	ldr	r0, [pc, #28]	; (800fb24 <ETH_PHY_IO_WriteReg+0x30>)
 800fb08:	f7f1 fcfc 	bl	8001504 <HAL_ETH_WritePHYRegister>
 800fb0c:	4603      	mov	r3, r0
 800fb0e:	2b00      	cmp	r3, #0
 800fb10:	d002      	beq.n	800fb18 <ETH_PHY_IO_WriteReg+0x24>
  {
    return -1;
 800fb12:	f04f 33ff 	mov.w	r3, #4294967295
 800fb16:	e000      	b.n	800fb1a <ETH_PHY_IO_WriteReg+0x26>
  }
  
  return 0;
 800fb18:	2300      	movs	r3, #0
}
 800fb1a:	4618      	mov	r0, r3
 800fb1c:	3710      	adds	r7, #16
 800fb1e:	46bd      	mov	sp, r7
 800fb20:	bd80      	pop	{r7, pc}
 800fb22:	bf00      	nop
 800fb24:	2400aeb0 	.word	0x2400aeb0

0800fb28 <ETH_PHY_IO_GetTick>:
/**
  * @brief  Get the time in millisecons used for internal PHY driver process.
  * @retval Time value
  */
int32_t ETH_PHY_IO_GetTick(void)
{
 800fb28:	b580      	push	{r7, lr}
 800fb2a:	af00      	add	r7, sp, #0
  return HAL_GetTick();
 800fb2c:	f7f0 fd3a 	bl	80005a4 <HAL_GetTick>
 800fb30:	4603      	mov	r3, r0
}
 800fb32:	4618      	mov	r0, r3
 800fb34:	bd80      	pop	{r7, pc}
	...

0800fb38 <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 800fb38:	b5b0      	push	{r4, r5, r7, lr}
 800fb3a:	b086      	sub	sp, #24
 800fb3c:	af00      	add	r7, sp, #0
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of defaultTask */
  osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 512);
 800fb3e:	4b09      	ldr	r3, [pc, #36]	; (800fb64 <MX_FREERTOS_Init+0x2c>)
 800fb40:	1d3c      	adds	r4, r7, #4
 800fb42:	461d      	mov	r5, r3
 800fb44:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800fb46:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800fb48:	682b      	ldr	r3, [r5, #0]
 800fb4a:	6023      	str	r3, [r4, #0]
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 800fb4c:	1d3b      	adds	r3, r7, #4
 800fb4e:	2100      	movs	r1, #0
 800fb50:	4618      	mov	r0, r3
 800fb52:	f7f3 fe4a 	bl	80037ea <osThreadCreate>
 800fb56:	4602      	mov	r2, r0
 800fb58:	4b03      	ldr	r3, [pc, #12]	; (800fb68 <MX_FREERTOS_Init+0x30>)
 800fb5a:	601a      	str	r2, [r3, #0]

  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

}
 800fb5c:	bf00      	nop
 800fb5e:	3718      	adds	r7, #24
 800fb60:	46bd      	mov	sp, r7
 800fb62:	bdb0      	pop	{r4, r5, r7, pc}
 800fb64:	080130d8 	.word	0x080130d8
 800fb68:	2400af54 	.word	0x2400af54

0800fb6c <StartDefaultTask>:
  * @param  argument: Not used 
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const * argument)
{
 800fb6c:	b580      	push	{r7, lr}
 800fb6e:	b082      	sub	sp, #8
 800fb70:	af00      	add	r7, sp, #0
 800fb72:	6078      	str	r0, [r7, #4]
    
                 
  /* init code for LWIP */
  MX_LWIP_Init();
 800fb74:	f000 f876 	bl	800fc64 <MX_LWIP_Init>

  /* USER CODE BEGIN StartDefaultTask */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 800fb78:	2001      	movs	r0, #1
 800fb7a:	f7f3 fe5d 	bl	8003838 <osDelay>
 800fb7e:	e7fb      	b.n	800fb78 <StartDefaultTask+0xc>

0800fb80 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 800fb80:	b580      	push	{r7, lr}
 800fb82:	b08a      	sub	sp, #40	; 0x28
 800fb84:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800fb86:	f107 0314 	add.w	r3, r7, #20
 800fb8a:	2200      	movs	r2, #0
 800fb8c:	601a      	str	r2, [r3, #0]
 800fb8e:	605a      	str	r2, [r3, #4]
 800fb90:	609a      	str	r2, [r3, #8]
 800fb92:	60da      	str	r2, [r3, #12]
 800fb94:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOG_CLK_ENABLE();
 800fb96:	4b31      	ldr	r3, [pc, #196]	; (800fc5c <MX_GPIO_Init+0xdc>)
 800fb98:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800fb9c:	4a2f      	ldr	r2, [pc, #188]	; (800fc5c <MX_GPIO_Init+0xdc>)
 800fb9e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800fba2:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800fba6:	4b2d      	ldr	r3, [pc, #180]	; (800fc5c <MX_GPIO_Init+0xdc>)
 800fba8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800fbac:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800fbb0:	613b      	str	r3, [r7, #16]
 800fbb2:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800fbb4:	4b29      	ldr	r3, [pc, #164]	; (800fc5c <MX_GPIO_Init+0xdc>)
 800fbb6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800fbba:	4a28      	ldr	r2, [pc, #160]	; (800fc5c <MX_GPIO_Init+0xdc>)
 800fbbc:	f043 0302 	orr.w	r3, r3, #2
 800fbc0:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800fbc4:	4b25      	ldr	r3, [pc, #148]	; (800fc5c <MX_GPIO_Init+0xdc>)
 800fbc6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800fbca:	f003 0302 	and.w	r3, r3, #2
 800fbce:	60fb      	str	r3, [r7, #12]
 800fbd0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800fbd2:	4b22      	ldr	r3, [pc, #136]	; (800fc5c <MX_GPIO_Init+0xdc>)
 800fbd4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800fbd8:	4a20      	ldr	r2, [pc, #128]	; (800fc5c <MX_GPIO_Init+0xdc>)
 800fbda:	f043 0301 	orr.w	r3, r3, #1
 800fbde:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800fbe2:	4b1e      	ldr	r3, [pc, #120]	; (800fc5c <MX_GPIO_Init+0xdc>)
 800fbe4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800fbe8:	f003 0301 	and.w	r3, r3, #1
 800fbec:	60bb      	str	r3, [r7, #8]
 800fbee:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800fbf0:	4b1a      	ldr	r3, [pc, #104]	; (800fc5c <MX_GPIO_Init+0xdc>)
 800fbf2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800fbf6:	4a19      	ldr	r2, [pc, #100]	; (800fc5c <MX_GPIO_Init+0xdc>)
 800fbf8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800fbfc:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800fc00:	4b16      	ldr	r3, [pc, #88]	; (800fc5c <MX_GPIO_Init+0xdc>)
 800fc02:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800fc06:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800fc0a:	607b      	str	r3, [r7, #4]
 800fc0c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800fc0e:	4b13      	ldr	r3, [pc, #76]	; (800fc5c <MX_GPIO_Init+0xdc>)
 800fc10:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800fc14:	4a11      	ldr	r2, [pc, #68]	; (800fc5c <MX_GPIO_Init+0xdc>)
 800fc16:	f043 0304 	orr.w	r3, r3, #4
 800fc1a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800fc1e:	4b0f      	ldr	r3, [pc, #60]	; (800fc5c <MX_GPIO_Init+0xdc>)
 800fc20:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800fc24:	f003 0304 	and.w	r3, r3, #4
 800fc28:	603b      	str	r3, [r7, #0]
 800fc2a:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LED1_Pin|LED0_Pin, GPIO_PIN_SET);
 800fc2c:	2201      	movs	r2, #1
 800fc2e:	2103      	movs	r1, #3
 800fc30:	480b      	ldr	r0, [pc, #44]	; (800fc60 <MX_GPIO_Init+0xe0>)
 800fc32:	f7f2 fe41 	bl	80028b8 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PBPin PBPin */
  GPIO_InitStruct.Pin = LED1_Pin|LED0_Pin;
 800fc36:	2303      	movs	r3, #3
 800fc38:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800fc3a:	2301      	movs	r3, #1
 800fc3c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800fc3e:	2300      	movs	r3, #0
 800fc40:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800fc42:	2300      	movs	r3, #0
 800fc44:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800fc46:	f107 0314 	add.w	r3, r7, #20
 800fc4a:	4619      	mov	r1, r3
 800fc4c:	4804      	ldr	r0, [pc, #16]	; (800fc60 <MX_GPIO_Init+0xe0>)
 800fc4e:	f7f2 fc83 	bl	8002558 <HAL_GPIO_Init>

}
 800fc52:	bf00      	nop
 800fc54:	3728      	adds	r7, #40	; 0x28
 800fc56:	46bd      	mov	sp, r7
 800fc58:	bd80      	pop	{r7, pc}
 800fc5a:	bf00      	nop
 800fc5c:	58024400 	.word	0x58024400
 800fc60:	58020400 	.word	0x58020400

0800fc64 <MX_LWIP_Init>:

/**
  * LwIP initialization function
  */
void MX_LWIP_Init(void)
{
 800fc64:	b580      	push	{r7, lr}
 800fc66:	b084      	sub	sp, #16
 800fc68:	af04      	add	r7, sp, #16
  /* IP addresses initialization */
  IP_ADDRESS[0] = 192;
 800fc6a:	4b8c      	ldr	r3, [pc, #560]	; (800fe9c <MX_LWIP_Init+0x238>)
 800fc6c:	22c0      	movs	r2, #192	; 0xc0
 800fc6e:	701a      	strb	r2, [r3, #0]
  IP_ADDRESS[1] = 168;
 800fc70:	4b8a      	ldr	r3, [pc, #552]	; (800fe9c <MX_LWIP_Init+0x238>)
 800fc72:	22a8      	movs	r2, #168	; 0xa8
 800fc74:	705a      	strb	r2, [r3, #1]
  IP_ADDRESS[2] = 101;
 800fc76:	4b89      	ldr	r3, [pc, #548]	; (800fe9c <MX_LWIP_Init+0x238>)
 800fc78:	2265      	movs	r2, #101	; 0x65
 800fc7a:	709a      	strb	r2, [r3, #2]
  IP_ADDRESS[3] = 140;
 800fc7c:	4b87      	ldr	r3, [pc, #540]	; (800fe9c <MX_LWIP_Init+0x238>)
 800fc7e:	228c      	movs	r2, #140	; 0x8c
 800fc80:	70da      	strb	r2, [r3, #3]
  NETMASK_ADDRESS[0] = 255;
 800fc82:	4b87      	ldr	r3, [pc, #540]	; (800fea0 <MX_LWIP_Init+0x23c>)
 800fc84:	22ff      	movs	r2, #255	; 0xff
 800fc86:	701a      	strb	r2, [r3, #0]
  NETMASK_ADDRESS[1] = 255;
 800fc88:	4b85      	ldr	r3, [pc, #532]	; (800fea0 <MX_LWIP_Init+0x23c>)
 800fc8a:	22ff      	movs	r2, #255	; 0xff
 800fc8c:	705a      	strb	r2, [r3, #1]
  NETMASK_ADDRESS[2] = 255;
 800fc8e:	4b84      	ldr	r3, [pc, #528]	; (800fea0 <MX_LWIP_Init+0x23c>)
 800fc90:	22ff      	movs	r2, #255	; 0xff
 800fc92:	709a      	strb	r2, [r3, #2]
  NETMASK_ADDRESS[3] = 0;
 800fc94:	4b82      	ldr	r3, [pc, #520]	; (800fea0 <MX_LWIP_Init+0x23c>)
 800fc96:	2200      	movs	r2, #0
 800fc98:	70da      	strb	r2, [r3, #3]
  GATEWAY_ADDRESS[0] = 192;
 800fc9a:	4b82      	ldr	r3, [pc, #520]	; (800fea4 <MX_LWIP_Init+0x240>)
 800fc9c:	22c0      	movs	r2, #192	; 0xc0
 800fc9e:	701a      	strb	r2, [r3, #0]
  GATEWAY_ADDRESS[1] = 168;
 800fca0:	4b80      	ldr	r3, [pc, #512]	; (800fea4 <MX_LWIP_Init+0x240>)
 800fca2:	22a8      	movs	r2, #168	; 0xa8
 800fca4:	705a      	strb	r2, [r3, #1]
  GATEWAY_ADDRESS[2] = 1;
 800fca6:	4b7f      	ldr	r3, [pc, #508]	; (800fea4 <MX_LWIP_Init+0x240>)
 800fca8:	2201      	movs	r2, #1
 800fcaa:	709a      	strb	r2, [r3, #2]
  GATEWAY_ADDRESS[3] = 0;
 800fcac:	4b7d      	ldr	r3, [pc, #500]	; (800fea4 <MX_LWIP_Init+0x240>)
 800fcae:	2200      	movs	r2, #0
 800fcb0:	70da      	strb	r2, [r3, #3]
  
  /* Initilialize the LwIP stack with RTOS */
  tcpip_init( NULL, NULL );
 800fcb2:	2100      	movs	r1, #0
 800fcb4:	2000      	movs	r0, #0
 800fcb6:	f7f6 fbc7 	bl	8006448 <tcpip_init>

  /* IP addresses initialization without DHCP (IPv4) */
  IP4_ADDR(&ipaddr, IP_ADDRESS[0], IP_ADDRESS[1], IP_ADDRESS[2], IP_ADDRESS[3]);
 800fcba:	4b78      	ldr	r3, [pc, #480]	; (800fe9c <MX_LWIP_Init+0x238>)
 800fcbc:	781b      	ldrb	r3, [r3, #0]
 800fcbe:	061a      	lsls	r2, r3, #24
 800fcc0:	4b76      	ldr	r3, [pc, #472]	; (800fe9c <MX_LWIP_Init+0x238>)
 800fcc2:	785b      	ldrb	r3, [r3, #1]
 800fcc4:	041b      	lsls	r3, r3, #16
 800fcc6:	431a      	orrs	r2, r3
 800fcc8:	4b74      	ldr	r3, [pc, #464]	; (800fe9c <MX_LWIP_Init+0x238>)
 800fcca:	789b      	ldrb	r3, [r3, #2]
 800fccc:	021b      	lsls	r3, r3, #8
 800fcce:	4313      	orrs	r3, r2
 800fcd0:	4a72      	ldr	r2, [pc, #456]	; (800fe9c <MX_LWIP_Init+0x238>)
 800fcd2:	78d2      	ldrb	r2, [r2, #3]
 800fcd4:	4313      	orrs	r3, r2
 800fcd6:	061a      	lsls	r2, r3, #24
 800fcd8:	4b70      	ldr	r3, [pc, #448]	; (800fe9c <MX_LWIP_Init+0x238>)
 800fcda:	781b      	ldrb	r3, [r3, #0]
 800fcdc:	0619      	lsls	r1, r3, #24
 800fcde:	4b6f      	ldr	r3, [pc, #444]	; (800fe9c <MX_LWIP_Init+0x238>)
 800fce0:	785b      	ldrb	r3, [r3, #1]
 800fce2:	041b      	lsls	r3, r3, #16
 800fce4:	4319      	orrs	r1, r3
 800fce6:	4b6d      	ldr	r3, [pc, #436]	; (800fe9c <MX_LWIP_Init+0x238>)
 800fce8:	789b      	ldrb	r3, [r3, #2]
 800fcea:	021b      	lsls	r3, r3, #8
 800fcec:	430b      	orrs	r3, r1
 800fcee:	496b      	ldr	r1, [pc, #428]	; (800fe9c <MX_LWIP_Init+0x238>)
 800fcf0:	78c9      	ldrb	r1, [r1, #3]
 800fcf2:	430b      	orrs	r3, r1
 800fcf4:	021b      	lsls	r3, r3, #8
 800fcf6:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800fcfa:	431a      	orrs	r2, r3
 800fcfc:	4b67      	ldr	r3, [pc, #412]	; (800fe9c <MX_LWIP_Init+0x238>)
 800fcfe:	781b      	ldrb	r3, [r3, #0]
 800fd00:	0619      	lsls	r1, r3, #24
 800fd02:	4b66      	ldr	r3, [pc, #408]	; (800fe9c <MX_LWIP_Init+0x238>)
 800fd04:	785b      	ldrb	r3, [r3, #1]
 800fd06:	041b      	lsls	r3, r3, #16
 800fd08:	4319      	orrs	r1, r3
 800fd0a:	4b64      	ldr	r3, [pc, #400]	; (800fe9c <MX_LWIP_Init+0x238>)
 800fd0c:	789b      	ldrb	r3, [r3, #2]
 800fd0e:	021b      	lsls	r3, r3, #8
 800fd10:	430b      	orrs	r3, r1
 800fd12:	4962      	ldr	r1, [pc, #392]	; (800fe9c <MX_LWIP_Init+0x238>)
 800fd14:	78c9      	ldrb	r1, [r1, #3]
 800fd16:	430b      	orrs	r3, r1
 800fd18:	0a1b      	lsrs	r3, r3, #8
 800fd1a:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 800fd1e:	431a      	orrs	r2, r3
 800fd20:	4b5e      	ldr	r3, [pc, #376]	; (800fe9c <MX_LWIP_Init+0x238>)
 800fd22:	781b      	ldrb	r3, [r3, #0]
 800fd24:	0619      	lsls	r1, r3, #24
 800fd26:	4b5d      	ldr	r3, [pc, #372]	; (800fe9c <MX_LWIP_Init+0x238>)
 800fd28:	785b      	ldrb	r3, [r3, #1]
 800fd2a:	041b      	lsls	r3, r3, #16
 800fd2c:	4319      	orrs	r1, r3
 800fd2e:	4b5b      	ldr	r3, [pc, #364]	; (800fe9c <MX_LWIP_Init+0x238>)
 800fd30:	789b      	ldrb	r3, [r3, #2]
 800fd32:	021b      	lsls	r3, r3, #8
 800fd34:	430b      	orrs	r3, r1
 800fd36:	4959      	ldr	r1, [pc, #356]	; (800fe9c <MX_LWIP_Init+0x238>)
 800fd38:	78c9      	ldrb	r1, [r1, #3]
 800fd3a:	430b      	orrs	r3, r1
 800fd3c:	0e1b      	lsrs	r3, r3, #24
 800fd3e:	4313      	orrs	r3, r2
 800fd40:	4a59      	ldr	r2, [pc, #356]	; (800fea8 <MX_LWIP_Init+0x244>)
 800fd42:	6013      	str	r3, [r2, #0]
  IP4_ADDR(&netmask, NETMASK_ADDRESS[0], NETMASK_ADDRESS[1] , NETMASK_ADDRESS[2], NETMASK_ADDRESS[3]);
 800fd44:	4b56      	ldr	r3, [pc, #344]	; (800fea0 <MX_LWIP_Init+0x23c>)
 800fd46:	781b      	ldrb	r3, [r3, #0]
 800fd48:	061a      	lsls	r2, r3, #24
 800fd4a:	4b55      	ldr	r3, [pc, #340]	; (800fea0 <MX_LWIP_Init+0x23c>)
 800fd4c:	785b      	ldrb	r3, [r3, #1]
 800fd4e:	041b      	lsls	r3, r3, #16
 800fd50:	431a      	orrs	r2, r3
 800fd52:	4b53      	ldr	r3, [pc, #332]	; (800fea0 <MX_LWIP_Init+0x23c>)
 800fd54:	789b      	ldrb	r3, [r3, #2]
 800fd56:	021b      	lsls	r3, r3, #8
 800fd58:	4313      	orrs	r3, r2
 800fd5a:	4a51      	ldr	r2, [pc, #324]	; (800fea0 <MX_LWIP_Init+0x23c>)
 800fd5c:	78d2      	ldrb	r2, [r2, #3]
 800fd5e:	4313      	orrs	r3, r2
 800fd60:	061a      	lsls	r2, r3, #24
 800fd62:	4b4f      	ldr	r3, [pc, #316]	; (800fea0 <MX_LWIP_Init+0x23c>)
 800fd64:	781b      	ldrb	r3, [r3, #0]
 800fd66:	0619      	lsls	r1, r3, #24
 800fd68:	4b4d      	ldr	r3, [pc, #308]	; (800fea0 <MX_LWIP_Init+0x23c>)
 800fd6a:	785b      	ldrb	r3, [r3, #1]
 800fd6c:	041b      	lsls	r3, r3, #16
 800fd6e:	4319      	orrs	r1, r3
 800fd70:	4b4b      	ldr	r3, [pc, #300]	; (800fea0 <MX_LWIP_Init+0x23c>)
 800fd72:	789b      	ldrb	r3, [r3, #2]
 800fd74:	021b      	lsls	r3, r3, #8
 800fd76:	430b      	orrs	r3, r1
 800fd78:	4949      	ldr	r1, [pc, #292]	; (800fea0 <MX_LWIP_Init+0x23c>)
 800fd7a:	78c9      	ldrb	r1, [r1, #3]
 800fd7c:	430b      	orrs	r3, r1
 800fd7e:	021b      	lsls	r3, r3, #8
 800fd80:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800fd84:	431a      	orrs	r2, r3
 800fd86:	4b46      	ldr	r3, [pc, #280]	; (800fea0 <MX_LWIP_Init+0x23c>)
 800fd88:	781b      	ldrb	r3, [r3, #0]
 800fd8a:	0619      	lsls	r1, r3, #24
 800fd8c:	4b44      	ldr	r3, [pc, #272]	; (800fea0 <MX_LWIP_Init+0x23c>)
 800fd8e:	785b      	ldrb	r3, [r3, #1]
 800fd90:	041b      	lsls	r3, r3, #16
 800fd92:	4319      	orrs	r1, r3
 800fd94:	4b42      	ldr	r3, [pc, #264]	; (800fea0 <MX_LWIP_Init+0x23c>)
 800fd96:	789b      	ldrb	r3, [r3, #2]
 800fd98:	021b      	lsls	r3, r3, #8
 800fd9a:	430b      	orrs	r3, r1
 800fd9c:	4940      	ldr	r1, [pc, #256]	; (800fea0 <MX_LWIP_Init+0x23c>)
 800fd9e:	78c9      	ldrb	r1, [r1, #3]
 800fda0:	430b      	orrs	r3, r1
 800fda2:	0a1b      	lsrs	r3, r3, #8
 800fda4:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 800fda8:	431a      	orrs	r2, r3
 800fdaa:	4b3d      	ldr	r3, [pc, #244]	; (800fea0 <MX_LWIP_Init+0x23c>)
 800fdac:	781b      	ldrb	r3, [r3, #0]
 800fdae:	0619      	lsls	r1, r3, #24
 800fdb0:	4b3b      	ldr	r3, [pc, #236]	; (800fea0 <MX_LWIP_Init+0x23c>)
 800fdb2:	785b      	ldrb	r3, [r3, #1]
 800fdb4:	041b      	lsls	r3, r3, #16
 800fdb6:	4319      	orrs	r1, r3
 800fdb8:	4b39      	ldr	r3, [pc, #228]	; (800fea0 <MX_LWIP_Init+0x23c>)
 800fdba:	789b      	ldrb	r3, [r3, #2]
 800fdbc:	021b      	lsls	r3, r3, #8
 800fdbe:	430b      	orrs	r3, r1
 800fdc0:	4937      	ldr	r1, [pc, #220]	; (800fea0 <MX_LWIP_Init+0x23c>)
 800fdc2:	78c9      	ldrb	r1, [r1, #3]
 800fdc4:	430b      	orrs	r3, r1
 800fdc6:	0e1b      	lsrs	r3, r3, #24
 800fdc8:	4313      	orrs	r3, r2
 800fdca:	4a38      	ldr	r2, [pc, #224]	; (800feac <MX_LWIP_Init+0x248>)
 800fdcc:	6013      	str	r3, [r2, #0]
  IP4_ADDR(&gw, GATEWAY_ADDRESS[0], GATEWAY_ADDRESS[1], GATEWAY_ADDRESS[2], GATEWAY_ADDRESS[3]);
 800fdce:	4b35      	ldr	r3, [pc, #212]	; (800fea4 <MX_LWIP_Init+0x240>)
 800fdd0:	781b      	ldrb	r3, [r3, #0]
 800fdd2:	061a      	lsls	r2, r3, #24
 800fdd4:	4b33      	ldr	r3, [pc, #204]	; (800fea4 <MX_LWIP_Init+0x240>)
 800fdd6:	785b      	ldrb	r3, [r3, #1]
 800fdd8:	041b      	lsls	r3, r3, #16
 800fdda:	431a      	orrs	r2, r3
 800fddc:	4b31      	ldr	r3, [pc, #196]	; (800fea4 <MX_LWIP_Init+0x240>)
 800fdde:	789b      	ldrb	r3, [r3, #2]
 800fde0:	021b      	lsls	r3, r3, #8
 800fde2:	4313      	orrs	r3, r2
 800fde4:	4a2f      	ldr	r2, [pc, #188]	; (800fea4 <MX_LWIP_Init+0x240>)
 800fde6:	78d2      	ldrb	r2, [r2, #3]
 800fde8:	4313      	orrs	r3, r2
 800fdea:	061a      	lsls	r2, r3, #24
 800fdec:	4b2d      	ldr	r3, [pc, #180]	; (800fea4 <MX_LWIP_Init+0x240>)
 800fdee:	781b      	ldrb	r3, [r3, #0]
 800fdf0:	0619      	lsls	r1, r3, #24
 800fdf2:	4b2c      	ldr	r3, [pc, #176]	; (800fea4 <MX_LWIP_Init+0x240>)
 800fdf4:	785b      	ldrb	r3, [r3, #1]
 800fdf6:	041b      	lsls	r3, r3, #16
 800fdf8:	4319      	orrs	r1, r3
 800fdfa:	4b2a      	ldr	r3, [pc, #168]	; (800fea4 <MX_LWIP_Init+0x240>)
 800fdfc:	789b      	ldrb	r3, [r3, #2]
 800fdfe:	021b      	lsls	r3, r3, #8
 800fe00:	430b      	orrs	r3, r1
 800fe02:	4928      	ldr	r1, [pc, #160]	; (800fea4 <MX_LWIP_Init+0x240>)
 800fe04:	78c9      	ldrb	r1, [r1, #3]
 800fe06:	430b      	orrs	r3, r1
 800fe08:	021b      	lsls	r3, r3, #8
 800fe0a:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800fe0e:	431a      	orrs	r2, r3
 800fe10:	4b24      	ldr	r3, [pc, #144]	; (800fea4 <MX_LWIP_Init+0x240>)
 800fe12:	781b      	ldrb	r3, [r3, #0]
 800fe14:	0619      	lsls	r1, r3, #24
 800fe16:	4b23      	ldr	r3, [pc, #140]	; (800fea4 <MX_LWIP_Init+0x240>)
 800fe18:	785b      	ldrb	r3, [r3, #1]
 800fe1a:	041b      	lsls	r3, r3, #16
 800fe1c:	4319      	orrs	r1, r3
 800fe1e:	4b21      	ldr	r3, [pc, #132]	; (800fea4 <MX_LWIP_Init+0x240>)
 800fe20:	789b      	ldrb	r3, [r3, #2]
 800fe22:	021b      	lsls	r3, r3, #8
 800fe24:	430b      	orrs	r3, r1
 800fe26:	491f      	ldr	r1, [pc, #124]	; (800fea4 <MX_LWIP_Init+0x240>)
 800fe28:	78c9      	ldrb	r1, [r1, #3]
 800fe2a:	430b      	orrs	r3, r1
 800fe2c:	0a1b      	lsrs	r3, r3, #8
 800fe2e:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 800fe32:	431a      	orrs	r2, r3
 800fe34:	4b1b      	ldr	r3, [pc, #108]	; (800fea4 <MX_LWIP_Init+0x240>)
 800fe36:	781b      	ldrb	r3, [r3, #0]
 800fe38:	0619      	lsls	r1, r3, #24
 800fe3a:	4b1a      	ldr	r3, [pc, #104]	; (800fea4 <MX_LWIP_Init+0x240>)
 800fe3c:	785b      	ldrb	r3, [r3, #1]
 800fe3e:	041b      	lsls	r3, r3, #16
 800fe40:	4319      	orrs	r1, r3
 800fe42:	4b18      	ldr	r3, [pc, #96]	; (800fea4 <MX_LWIP_Init+0x240>)
 800fe44:	789b      	ldrb	r3, [r3, #2]
 800fe46:	021b      	lsls	r3, r3, #8
 800fe48:	430b      	orrs	r3, r1
 800fe4a:	4916      	ldr	r1, [pc, #88]	; (800fea4 <MX_LWIP_Init+0x240>)
 800fe4c:	78c9      	ldrb	r1, [r1, #3]
 800fe4e:	430b      	orrs	r3, r1
 800fe50:	0e1b      	lsrs	r3, r3, #24
 800fe52:	4313      	orrs	r3, r2
 800fe54:	4a16      	ldr	r2, [pc, #88]	; (800feb0 <MX_LWIP_Init+0x24c>)
 800fe56:	6013      	str	r3, [r2, #0]

  /* add the network interface (IPv4/IPv6) with RTOS */
  netif_add(&gnetif, &ipaddr, &netmask, &gw, NULL, &ethernetif_init, &tcpip_input);
 800fe58:	4b16      	ldr	r3, [pc, #88]	; (800feb4 <MX_LWIP_Init+0x250>)
 800fe5a:	9302      	str	r3, [sp, #8]
 800fe5c:	4b16      	ldr	r3, [pc, #88]	; (800feb8 <MX_LWIP_Init+0x254>)
 800fe5e:	9301      	str	r3, [sp, #4]
 800fe60:	2300      	movs	r3, #0
 800fe62:	9300      	str	r3, [sp, #0]
 800fe64:	4b12      	ldr	r3, [pc, #72]	; (800feb0 <MX_LWIP_Init+0x24c>)
 800fe66:	4a11      	ldr	r2, [pc, #68]	; (800feac <MX_LWIP_Init+0x248>)
 800fe68:	490f      	ldr	r1, [pc, #60]	; (800fea8 <MX_LWIP_Init+0x244>)
 800fe6a:	4814      	ldr	r0, [pc, #80]	; (800febc <MX_LWIP_Init+0x258>)
 800fe6c:	f7f6 ffea 	bl	8006e44 <netif_add>

  /* Registers the default network interface */
  netif_set_default(&gnetif);
 800fe70:	4812      	ldr	r0, [pc, #72]	; (800febc <MX_LWIP_Init+0x258>)
 800fe72:	f7f7 f8cb 	bl	800700c <netif_set_default>

  if (netif_is_link_up(&gnetif))
 800fe76:	4b11      	ldr	r3, [pc, #68]	; (800febc <MX_LWIP_Init+0x258>)
 800fe78:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 800fe7c:	089b      	lsrs	r3, r3, #2
 800fe7e:	f003 0301 	and.w	r3, r3, #1
 800fe82:	b2db      	uxtb	r3, r3
 800fe84:	2b00      	cmp	r3, #0
 800fe86:	d003      	beq.n	800fe90 <MX_LWIP_Init+0x22c>
  {
    /* When the netif is fully configured this function must be called */
    netif_set_up(&gnetif);
 800fe88:	480c      	ldr	r0, [pc, #48]	; (800febc <MX_LWIP_Init+0x258>)
 800fe8a:	f7f7 f8cf 	bl	800702c <netif_set_up>
//  osThreadCreate (osThread(EthLink), &gnetif);

/* USER CODE BEGIN 3 */

/* USER CODE END 3 */
}
 800fe8e:	e002      	b.n	800fe96 <MX_LWIP_Init+0x232>
    netif_set_down(&gnetif);
 800fe90:	480a      	ldr	r0, [pc, #40]	; (800febc <MX_LWIP_Init+0x258>)
 800fe92:	f7f7 f90f 	bl	80070b4 <netif_set_down>
}
 800fe96:	bf00      	nop
 800fe98:	46bd      	mov	sp, r7
 800fe9a:	bd80      	pop	{r7, pc}
 800fe9c:	2400af98 	.word	0x2400af98
 800fea0:	2400af94 	.word	0x2400af94
 800fea4:	2400af58 	.word	0x2400af58
 800fea8:	2400af90 	.word	0x2400af90
 800feac:	2400af9c 	.word	0x2400af9c
 800feb0:	2400afa0 	.word	0x2400afa0
 800feb4:	08006371 	.word	0x08006371
 800feb8:	0800fa01 	.word	0x0800fa01
 800febc:	2400af5c 	.word	0x2400af5c

0800fec0 <SCB_EnableICache>:
{
 800fec0:	b480      	push	{r7}
 800fec2:	af00      	add	r7, sp, #0
  __ASM volatile ("dsb 0xF":::"memory");
 800fec4:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 800fec8:	f3bf 8f6f 	isb	sy
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 800fecc:	4b0b      	ldr	r3, [pc, #44]	; (800fefc <SCB_EnableICache+0x3c>)
 800fece:	2200      	movs	r2, #0
 800fed0:	f8c3 2250 	str.w	r2, [r3, #592]	; 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 800fed4:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 800fed8:	f3bf 8f6f 	isb	sy
    SCB->CCR |=  (uint32_t)SCB_CCR_IC_Msk;  /* enable I-Cache */
 800fedc:	4b07      	ldr	r3, [pc, #28]	; (800fefc <SCB_EnableICache+0x3c>)
 800fede:	695b      	ldr	r3, [r3, #20]
 800fee0:	4a06      	ldr	r2, [pc, #24]	; (800fefc <SCB_EnableICache+0x3c>)
 800fee2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800fee6:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 800fee8:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 800feec:	f3bf 8f6f 	isb	sy
}
 800fef0:	bf00      	nop
 800fef2:	46bd      	mov	sp, r7
 800fef4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fef8:	4770      	bx	lr
 800fefa:	bf00      	nop
 800fefc:	e000ed00 	.word	0xe000ed00

0800ff00 <SCB_EnableDCache>:
{
 800ff00:	b480      	push	{r7}
 800ff02:	b085      	sub	sp, #20
 800ff04:	af00      	add	r7, sp, #0
    SCB->CSSELR = 0U; /*(0U << 1U) | 0U;*/  /* Level 1 data cache */
 800ff06:	4b1d      	ldr	r3, [pc, #116]	; (800ff7c <SCB_EnableDCache+0x7c>)
 800ff08:	2200      	movs	r2, #0
 800ff0a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  __ASM volatile ("dsb 0xF":::"memory");
 800ff0e:	f3bf 8f4f 	dsb	sy
    ccsidr = SCB->CCSIDR;
 800ff12:	4b1a      	ldr	r3, [pc, #104]	; (800ff7c <SCB_EnableDCache+0x7c>)
 800ff14:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800ff18:	607b      	str	r3, [r7, #4]
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
 800ff1a:	687b      	ldr	r3, [r7, #4]
 800ff1c:	0b5b      	lsrs	r3, r3, #13
 800ff1e:	f3c3 030e 	ubfx	r3, r3, #0, #15
 800ff22:	60fb      	str	r3, [r7, #12]
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 800ff24:	687b      	ldr	r3, [r7, #4]
 800ff26:	08db      	lsrs	r3, r3, #3
 800ff28:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800ff2c:	60bb      	str	r3, [r7, #8]
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 800ff2e:	68fb      	ldr	r3, [r7, #12]
 800ff30:	015a      	lsls	r2, r3, #5
 800ff32:	f643 73e0 	movw	r3, #16352	; 0x3fe0
 800ff36:	4013      	ands	r3, r2
                      ((ways << SCB_DCISW_WAY_Pos) & SCB_DCISW_WAY_Msk)  );
 800ff38:	68ba      	ldr	r2, [r7, #8]
 800ff3a:	0792      	lsls	r2, r2, #30
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 800ff3c:	490f      	ldr	r1, [pc, #60]	; (800ff7c <SCB_EnableDCache+0x7c>)
 800ff3e:	4313      	orrs	r3, r2
 800ff40:	f8c1 3260 	str.w	r3, [r1, #608]	; 0x260
      } while (ways-- != 0U);
 800ff44:	68bb      	ldr	r3, [r7, #8]
 800ff46:	1e5a      	subs	r2, r3, #1
 800ff48:	60ba      	str	r2, [r7, #8]
 800ff4a:	2b00      	cmp	r3, #0
 800ff4c:	d1ef      	bne.n	800ff2e <SCB_EnableDCache+0x2e>
    } while(sets-- != 0U);
 800ff4e:	68fb      	ldr	r3, [r7, #12]
 800ff50:	1e5a      	subs	r2, r3, #1
 800ff52:	60fa      	str	r2, [r7, #12]
 800ff54:	2b00      	cmp	r3, #0
 800ff56:	d1e5      	bne.n	800ff24 <SCB_EnableDCache+0x24>
 800ff58:	f3bf 8f4f 	dsb	sy
    SCB->CCR |=  (uint32_t)SCB_CCR_DC_Msk;  /* enable D-Cache */
 800ff5c:	4b07      	ldr	r3, [pc, #28]	; (800ff7c <SCB_EnableDCache+0x7c>)
 800ff5e:	695b      	ldr	r3, [r3, #20]
 800ff60:	4a06      	ldr	r2, [pc, #24]	; (800ff7c <SCB_EnableDCache+0x7c>)
 800ff62:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800ff66:	6153      	str	r3, [r2, #20]
 800ff68:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 800ff6c:	f3bf 8f6f 	isb	sy
}
 800ff70:	bf00      	nop
 800ff72:	3714      	adds	r7, #20
 800ff74:	46bd      	mov	sp, r7
 800ff76:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ff7a:	4770      	bx	lr
 800ff7c:	e000ed00 	.word	0xe000ed00

0800ff80 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800ff80:	b580      	push	{r7, lr}
 800ff82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */

  /* USER CODE END 1 */
  
  /* MPU Configuration--------------------------------------------------------*/
  MPU_Config();
 800ff84:	f000 f89e 	bl	80100c4 <MPU_Config>

  /* Enable I-Cache---------------------------------------------------------*/
  SCB_EnableICache();
 800ff88:	f7ff ff9a 	bl	800fec0 <SCB_EnableICache>

  /* Enable D-Cache---------------------------------------------------------*/
  SCB_EnableDCache();
 800ff8c:	f7ff ffb8 	bl	800ff00 <SCB_EnableDCache>

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800ff90:	f7f0 fa86 	bl	80004a0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800ff94:	f000 f808 	bl	800ffa8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800ff98:	f7ff fdf2 	bl	800fb80 <MX_GPIO_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Call init function for freertos objects (in freertos.c) */
  MX_FREERTOS_Init(); 
 800ff9c:	f7ff fdcc 	bl	800fb38 <MX_FREERTOS_Init>

  /* Start scheduler */
  osKernelStart();
 800ffa0:	f7f3 fc0c 	bl	80037bc <osKernelStart>
  
  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800ffa4:	e7fe      	b.n	800ffa4 <main+0x24>
	...

0800ffa8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800ffa8:	b580      	push	{r7, lr}
 800ffaa:	b09e      	sub	sp, #120	; 0x78
 800ffac:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800ffae:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800ffb2:	224c      	movs	r2, #76	; 0x4c
 800ffb4:	2100      	movs	r1, #0
 800ffb6:	4618      	mov	r0, r3
 800ffb8:	f000 fab2 	bl	8010520 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800ffbc:	f107 030c 	add.w	r3, r7, #12
 800ffc0:	2220      	movs	r2, #32
 800ffc2:	2100      	movs	r1, #0
 800ffc4:	4618      	mov	r0, r3
 800ffc6:	f000 faab 	bl	8010520 <memset>

  /** Supply configuration update enable 
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 800ffca:	2002      	movs	r0, #2
 800ffcc:	f7f2 fc8e 	bl	80028ec <HAL_PWREx_ConfigSupply>
  /** Configure the main internal regulator output voltage 
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800ffd0:	2300      	movs	r3, #0
 800ffd2:	60bb      	str	r3, [r7, #8]
 800ffd4:	4b38      	ldr	r3, [pc, #224]	; (80100b8 <SystemClock_Config+0x110>)
 800ffd6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ffd8:	4a37      	ldr	r2, [pc, #220]	; (80100b8 <SystemClock_Config+0x110>)
 800ffda:	f023 0301 	bic.w	r3, r3, #1
 800ffde:	62d3      	str	r3, [r2, #44]	; 0x2c
 800ffe0:	4b35      	ldr	r3, [pc, #212]	; (80100b8 <SystemClock_Config+0x110>)
 800ffe2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ffe4:	f003 0301 	and.w	r3, r3, #1
 800ffe8:	60bb      	str	r3, [r7, #8]
 800ffea:	4b34      	ldr	r3, [pc, #208]	; (80100bc <SystemClock_Config+0x114>)
 800ffec:	699b      	ldr	r3, [r3, #24]
 800ffee:	4a33      	ldr	r2, [pc, #204]	; (80100bc <SystemClock_Config+0x114>)
 800fff0:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800fff4:	6193      	str	r3, [r2, #24]
 800fff6:	4b31      	ldr	r3, [pc, #196]	; (80100bc <SystemClock_Config+0x114>)
 800fff8:	699b      	ldr	r3, [r3, #24]
 800fffa:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800fffe:	60bb      	str	r3, [r7, #8]
 8010000:	68bb      	ldr	r3, [r7, #8]



  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8010002:	bf00      	nop
 8010004:	4b2d      	ldr	r3, [pc, #180]	; (80100bc <SystemClock_Config+0x114>)
 8010006:	699b      	ldr	r3, [r3, #24]
 8010008:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 801000c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8010010:	d1f8      	bne.n	8010004 <SystemClock_Config+0x5c>

  /* Enable D2 domain SRAM3 Clock (0x30040000 AXI)*/
  __HAL_RCC_D2SRAM3_CLK_ENABLE();
 8010012:	4b2b      	ldr	r3, [pc, #172]	; (80100c0 <SystemClock_Config+0x118>)
 8010014:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
 8010018:	4a29      	ldr	r2, [pc, #164]	; (80100c0 <SystemClock_Config+0x118>)
 801001a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 801001e:	f8c2 30dc 	str.w	r3, [r2, #220]	; 0xdc
 8010022:	4b27      	ldr	r3, [pc, #156]	; (80100c0 <SystemClock_Config+0x118>)
 8010024:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
 8010028:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 801002c:	607b      	str	r3, [r7, #4]
 801002e:	687b      	ldr	r3, [r7, #4]
/** Initializes the CPU, AHB and APB busses clocks
 *
*/
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8010030:	2301      	movs	r3, #1
 8010032:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8010034:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8010038:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 801003a:	2302      	movs	r3, #2
 801003c:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 801003e:	2302      	movs	r3, #2
 8010040:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLM = 2;
 8010042:	2302      	movs	r3, #2
 8010044:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLN = 64;
 8010046:	2340      	movs	r3, #64	; 0x40
 8010048:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLP = 2;
 801004a:	2302      	movs	r3, #2
 801004c:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLQ = 2;
 801004e:	2302      	movs	r3, #2
 8010050:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLR = 2;
 8010052:	2302      	movs	r3, #2
 8010054:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 8010056:	230c      	movs	r3, #12
 8010058:	66fb      	str	r3, [r7, #108]	; 0x6c
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 801005a:	2300      	movs	r3, #0
 801005c:	673b      	str	r3, [r7, #112]	; 0x70
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 801005e:	2300      	movs	r3, #0
 8010060:	677b      	str	r3, [r7, #116]	; 0x74
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8010062:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8010066:	4618      	mov	r0, r3
 8010068:	f7f2 fc78 	bl	800295c <HAL_RCC_OscConfig>
 801006c:	4603      	mov	r3, r0
 801006e:	2b00      	cmp	r3, #0
 8010070:	d001      	beq.n	8010076 <SystemClock_Config+0xce>
  {
    Error_Handler();
 8010072:	f000 f871 	bl	8010158 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8010076:	233f      	movs	r3, #63	; 0x3f
 8010078:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 801007a:	2303      	movs	r3, #3
 801007c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 801007e:	2300      	movs	r3, #0
 8010080:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 8010082:	2308      	movs	r3, #8
 8010084:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 8010086:	2340      	movs	r3, #64	; 0x40
 8010088:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 801008a:	2340      	movs	r3, #64	; 0x40
 801008c:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 801008e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8010092:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 8010094:	2340      	movs	r3, #64	; 0x40
 8010096:	62bb      	str	r3, [r7, #40]	; 0x28

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8010098:	f107 030c 	add.w	r3, r7, #12
 801009c:	2102      	movs	r1, #2
 801009e:	4618      	mov	r0, r3
 80100a0:	f7f3 f814 	bl	80030cc <HAL_RCC_ClockConfig>
 80100a4:	4603      	mov	r3, r0
 80100a6:	2b00      	cmp	r3, #0
 80100a8:	d001      	beq.n	80100ae <SystemClock_Config+0x106>
  {
    Error_Handler();
 80100aa:	f000 f855 	bl	8010158 <Error_Handler>
  }
}
 80100ae:	bf00      	nop
 80100b0:	3778      	adds	r7, #120	; 0x78
 80100b2:	46bd      	mov	sp, r7
 80100b4:	bd80      	pop	{r7, pc}
 80100b6:	bf00      	nop
 80100b8:	58000400 	.word	0x58000400
 80100bc:	58024800 	.word	0x58024800
 80100c0:	58024400 	.word	0x58024400

080100c4 <MPU_Config>:
/* USER CODE END 4 */

/* MPU Configuration */

void MPU_Config(void)
{
 80100c4:	b580      	push	{r7, lr}
 80100c6:	b084      	sub	sp, #16
 80100c8:	af00      	add	r7, sp, #0
  MPU_Region_InitTypeDef MPU_InitStruct = {0};
 80100ca:	463b      	mov	r3, r7
 80100cc:	2200      	movs	r2, #0
 80100ce:	601a      	str	r2, [r3, #0]
 80100d0:	605a      	str	r2, [r3, #4]
 80100d2:	609a      	str	r2, [r3, #8]
 80100d4:	60da      	str	r2, [r3, #12]

  /* Disables the MPU */
  HAL_MPU_Disable();
 80100d6:	f7f0 fbc3 	bl	8000860 <HAL_MPU_Disable>
  /** Initializes and configures the Region and the memory to be protected 
  */
  MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 80100da:	2301      	movs	r3, #1
 80100dc:	703b      	strb	r3, [r7, #0]
  MPU_InitStruct.Number = MPU_REGION_NUMBER0;
 80100de:	2300      	movs	r3, #0
 80100e0:	707b      	strb	r3, [r7, #1]
  MPU_InitStruct.BaseAddress = 0x30040000;
 80100e2:	4b1b      	ldr	r3, [pc, #108]	; (8010150 <MPU_Config+0x8c>)
 80100e4:	607b      	str	r3, [r7, #4]
  MPU_InitStruct.Size = MPU_REGION_SIZE_256B;
 80100e6:	2307      	movs	r3, #7
 80100e8:	723b      	strb	r3, [r7, #8]
  MPU_InitStruct.SubRegionDisable = 0x0;
 80100ea:	2300      	movs	r3, #0
 80100ec:	727b      	strb	r3, [r7, #9]
  MPU_InitStruct.TypeExtField = MPU_TEX_LEVEL0;
 80100ee:	2300      	movs	r3, #0
 80100f0:	72bb      	strb	r3, [r7, #10]
  MPU_InitStruct.AccessPermission = MPU_REGION_FULL_ACCESS;
 80100f2:	2303      	movs	r3, #3
 80100f4:	72fb      	strb	r3, [r7, #11]
  MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_ENABLE;
 80100f6:	2300      	movs	r3, #0
 80100f8:	733b      	strb	r3, [r7, #12]
  MPU_InitStruct.IsShareable = MPU_ACCESS_NOT_SHAREABLE;
 80100fa:	2300      	movs	r3, #0
 80100fc:	737b      	strb	r3, [r7, #13]
  MPU_InitStruct.IsCacheable = MPU_ACCESS_NOT_CACHEABLE;
 80100fe:	2300      	movs	r3, #0
 8010100:	73bb      	strb	r3, [r7, #14]
  MPU_InitStruct.IsBufferable = MPU_ACCESS_BUFFERABLE;
 8010102:	2301      	movs	r3, #1
 8010104:	73fb      	strb	r3, [r7, #15]

  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 8010106:	463b      	mov	r3, r7
 8010108:	4618      	mov	r0, r3
 801010a:	f7f0 fbdd 	bl	80008c8 <HAL_MPU_ConfigRegion>
  /** Initializes and configures the Region and the memory to be protected 
  */
  MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 801010e:	2301      	movs	r3, #1
 8010110:	703b      	strb	r3, [r7, #0]
  MPU_InitStruct.Number = MPU_REGION_NUMBER1;
 8010112:	2301      	movs	r3, #1
 8010114:	707b      	strb	r3, [r7, #1]
  MPU_InitStruct.BaseAddress = 0x30044000;
 8010116:	4b0f      	ldr	r3, [pc, #60]	; (8010154 <MPU_Config+0x90>)
 8010118:	607b      	str	r3, [r7, #4]
  MPU_InitStruct.Size = MPU_REGION_SIZE_16KB;
 801011a:	230d      	movs	r3, #13
 801011c:	723b      	strb	r3, [r7, #8]
  MPU_InitStruct.SubRegionDisable = 0x0;
 801011e:	2300      	movs	r3, #0
 8010120:	727b      	strb	r3, [r7, #9]
  MPU_InitStruct.TypeExtField = MPU_TEX_LEVEL0;
 8010122:	2300      	movs	r3, #0
 8010124:	72bb      	strb	r3, [r7, #10]
  MPU_InitStruct.AccessPermission = MPU_REGION_FULL_ACCESS;
 8010126:	2303      	movs	r3, #3
 8010128:	72fb      	strb	r3, [r7, #11]
  MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_ENABLE;
 801012a:	2300      	movs	r3, #0
 801012c:	733b      	strb	r3, [r7, #12]
  MPU_InitStruct.IsShareable = MPU_ACCESS_NOT_SHAREABLE;
 801012e:	2300      	movs	r3, #0
 8010130:	737b      	strb	r3, [r7, #13]
  MPU_InitStruct.IsCacheable = MPU_ACCESS_CACHEABLE;
 8010132:	2301      	movs	r3, #1
 8010134:	73bb      	strb	r3, [r7, #14]
  MPU_InitStruct.IsBufferable = MPU_ACCESS_NOT_BUFFERABLE;
 8010136:	2300      	movs	r3, #0
 8010138:	73fb      	strb	r3, [r7, #15]

  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 801013a:	463b      	mov	r3, r7
 801013c:	4618      	mov	r0, r3
 801013e:	f7f0 fbc3 	bl	80008c8 <HAL_MPU_ConfigRegion>
  /* Enables the MPU */
  HAL_MPU_Enable(MPU_PRIVILEGED_DEFAULT);
 8010142:	2004      	movs	r0, #4
 8010144:	f7f0 fba2 	bl	800088c <HAL_MPU_Enable>

}
 8010148:	bf00      	nop
 801014a:	3710      	adds	r7, #16
 801014c:	46bd      	mov	sp, r7
 801014e:	bd80      	pop	{r7, pc}
 8010150:	30040000 	.word	0x30040000
 8010154:	30044000 	.word	0x30044000

08010158 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8010158:	b480      	push	{r7}
 801015a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 801015c:	bf00      	nop
 801015e:	46bd      	mov	sp, r7
 8010160:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010164:	4770      	bx	lr
	...

08010168 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8010168:	b580      	push	{r7, lr}
 801016a:	b082      	sub	sp, #8
 801016c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 801016e:	4b0c      	ldr	r3, [pc, #48]	; (80101a0 <HAL_MspInit+0x38>)
 8010170:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8010174:	4a0a      	ldr	r2, [pc, #40]	; (80101a0 <HAL_MspInit+0x38>)
 8010176:	f043 0302 	orr.w	r3, r3, #2
 801017a:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 801017e:	4b08      	ldr	r3, [pc, #32]	; (80101a0 <HAL_MspInit+0x38>)
 8010180:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8010184:	f003 0302 	and.w	r3, r3, #2
 8010188:	607b      	str	r3, [r7, #4]
 801018a:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 801018c:	2200      	movs	r2, #0
 801018e:	210f      	movs	r1, #15
 8010190:	f06f 0001 	mvn.w	r0, #1
 8010194:	f7f0 fb2f 	bl	80007f6 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8010198:	bf00      	nop
 801019a:	3708      	adds	r7, #8
 801019c:	46bd      	mov	sp, r7
 801019e:	bd80      	pop	{r7, pc}
 80101a0:	58024400 	.word	0x58024400

080101a4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80101a4:	b480      	push	{r7}
 80101a6:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 80101a8:	bf00      	nop
 80101aa:	46bd      	mov	sp, r7
 80101ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80101b0:	4770      	bx	lr

080101b2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80101b2:	b480      	push	{r7}
 80101b4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80101b6:	e7fe      	b.n	80101b6 <HardFault_Handler+0x4>

080101b8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80101b8:	b480      	push	{r7}
 80101ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80101bc:	e7fe      	b.n	80101bc <MemManage_Handler+0x4>

080101be <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80101be:	b480      	push	{r7}
 80101c0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80101c2:	e7fe      	b.n	80101c2 <BusFault_Handler+0x4>

080101c4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80101c4:	b480      	push	{r7}
 80101c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80101c8:	e7fe      	b.n	80101c8 <UsageFault_Handler+0x4>

080101ca <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80101ca:	b480      	push	{r7}
 80101cc:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80101ce:	bf00      	nop
 80101d0:	46bd      	mov	sp, r7
 80101d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80101d6:	4770      	bx	lr

080101d8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80101d8:	b580      	push	{r7, lr}
 80101da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80101dc:	f7f0 f9ce 	bl	800057c <HAL_IncTick>
#if (INCLUDE_xTaskGetSchedulerState == 1 )
  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
 80101e0:	f7f5 f9c4 	bl	800556c <xTaskGetSchedulerState>
 80101e4:	4603      	mov	r3, r0
 80101e6:	2b01      	cmp	r3, #1
 80101e8:	d001      	beq.n	80101ee <SysTick_Handler+0x16>
  {
#endif /* INCLUDE_xTaskGetSchedulerState */
  xPortSysTickHandler();
 80101ea:	f7f5 fdb5 	bl	8005d58 <xPortSysTickHandler>
  }
#endif /* INCLUDE_xTaskGetSchedulerState */
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80101ee:	bf00      	nop
 80101f0:	bd80      	pop	{r7, pc}
	...

080101f4 <ETH_IRQHandler>:

/**
  * @brief This function handles Ethernet global interrupt.
  */
void ETH_IRQHandler(void)
{
 80101f4:	b580      	push	{r7, lr}
 80101f6:	b084      	sub	sp, #16
 80101f8:	af00      	add	r7, sp, #0
	__asm volatile
 80101fa:	f3ef 8211 	mrs	r2, BASEPRI
 80101fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010202:	f383 8811 	msr	BASEPRI, r3
 8010206:	f3bf 8f6f 	isb	sy
 801020a:	f3bf 8f4f 	dsb	sy
 801020e:	607a      	str	r2, [r7, #4]
 8010210:	603b      	str	r3, [r7, #0]
	return ulOriginalBASEPRI;
 8010212:	687b      	ldr	r3, [r7, #4]
  /* USER CODE BEGIN ETH_IRQn 0 */
  uint32_t ulReturn;
  ulReturn = taskENTER_CRITICAL_FROM_ISR();
 8010214:	60fb      	str	r3, [r7, #12]
  /* USER CODE END ETH_IRQn 0 */
  HAL_ETH_IRQHandler(&heth);
 8010216:	4806      	ldr	r0, [pc, #24]	; (8010230 <ETH_IRQHandler+0x3c>)
 8010218:	f7f0 fffa 	bl	8001210 <HAL_ETH_IRQHandler>
 801021c:	68fb      	ldr	r3, [r7, #12]
 801021e:	60bb      	str	r3, [r7, #8]
	__asm volatile
 8010220:	68bb      	ldr	r3, [r7, #8]
 8010222:	f383 8811 	msr	BASEPRI, r3
  /* USER CODE BEGIN ETH_IRQn 1 */
  taskEXIT_CRITICAL_FROM_ISR( ulReturn );
  /* USER CODE END ETH_IRQn 1 */
}
 8010226:	bf00      	nop
 8010228:	3710      	adds	r7, #16
 801022a:	46bd      	mov	sp, r7
 801022c:	bd80      	pop	{r7, pc}
 801022e:	bf00      	nop
 8010230:	2400aeb0 	.word	0x2400aeb0

08010234 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8010234:	b580      	push	{r7, lr}
 8010236:	b086      	sub	sp, #24
 8010238:	af00      	add	r7, sp, #0
 801023a:	60f8      	str	r0, [r7, #12]
 801023c:	60b9      	str	r1, [r7, #8]
 801023e:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8010240:	2300      	movs	r3, #0
 8010242:	617b      	str	r3, [r7, #20]
 8010244:	e00a      	b.n	801025c <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8010246:	f3af 8000 	nop.w
 801024a:	4601      	mov	r1, r0
 801024c:	68bb      	ldr	r3, [r7, #8]
 801024e:	1c5a      	adds	r2, r3, #1
 8010250:	60ba      	str	r2, [r7, #8]
 8010252:	b2ca      	uxtb	r2, r1
 8010254:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8010256:	697b      	ldr	r3, [r7, #20]
 8010258:	3301      	adds	r3, #1
 801025a:	617b      	str	r3, [r7, #20]
 801025c:	697a      	ldr	r2, [r7, #20]
 801025e:	687b      	ldr	r3, [r7, #4]
 8010260:	429a      	cmp	r2, r3
 8010262:	dbf0      	blt.n	8010246 <_read+0x12>
	}

return len;
 8010264:	687b      	ldr	r3, [r7, #4]
}
 8010266:	4618      	mov	r0, r3
 8010268:	3718      	adds	r7, #24
 801026a:	46bd      	mov	sp, r7
 801026c:	bd80      	pop	{r7, pc}

0801026e <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 801026e:	b580      	push	{r7, lr}
 8010270:	b086      	sub	sp, #24
 8010272:	af00      	add	r7, sp, #0
 8010274:	60f8      	str	r0, [r7, #12]
 8010276:	60b9      	str	r1, [r7, #8]
 8010278:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 801027a:	2300      	movs	r3, #0
 801027c:	617b      	str	r3, [r7, #20]
 801027e:	e009      	b.n	8010294 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8010280:	68bb      	ldr	r3, [r7, #8]
 8010282:	1c5a      	adds	r2, r3, #1
 8010284:	60ba      	str	r2, [r7, #8]
 8010286:	781b      	ldrb	r3, [r3, #0]
 8010288:	4618      	mov	r0, r3
 801028a:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 801028e:	697b      	ldr	r3, [r7, #20]
 8010290:	3301      	adds	r3, #1
 8010292:	617b      	str	r3, [r7, #20]
 8010294:	697a      	ldr	r2, [r7, #20]
 8010296:	687b      	ldr	r3, [r7, #4]
 8010298:	429a      	cmp	r2, r3
 801029a:	dbf1      	blt.n	8010280 <_write+0x12>
	}
	return len;
 801029c:	687b      	ldr	r3, [r7, #4]
}
 801029e:	4618      	mov	r0, r3
 80102a0:	3718      	adds	r7, #24
 80102a2:	46bd      	mov	sp, r7
 80102a4:	bd80      	pop	{r7, pc}

080102a6 <_close>:

int _close(int file)
{
 80102a6:	b480      	push	{r7}
 80102a8:	b083      	sub	sp, #12
 80102aa:	af00      	add	r7, sp, #0
 80102ac:	6078      	str	r0, [r7, #4]
	return -1;
 80102ae:	f04f 33ff 	mov.w	r3, #4294967295
}
 80102b2:	4618      	mov	r0, r3
 80102b4:	370c      	adds	r7, #12
 80102b6:	46bd      	mov	sp, r7
 80102b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80102bc:	4770      	bx	lr

080102be <_fstat>:


int _fstat(int file, struct stat *st)
{
 80102be:	b480      	push	{r7}
 80102c0:	b083      	sub	sp, #12
 80102c2:	af00      	add	r7, sp, #0
 80102c4:	6078      	str	r0, [r7, #4]
 80102c6:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 80102c8:	683b      	ldr	r3, [r7, #0]
 80102ca:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80102ce:	605a      	str	r2, [r3, #4]
	return 0;
 80102d0:	2300      	movs	r3, #0
}
 80102d2:	4618      	mov	r0, r3
 80102d4:	370c      	adds	r7, #12
 80102d6:	46bd      	mov	sp, r7
 80102d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80102dc:	4770      	bx	lr

080102de <_isatty>:

int _isatty(int file)
{
 80102de:	b480      	push	{r7}
 80102e0:	b083      	sub	sp, #12
 80102e2:	af00      	add	r7, sp, #0
 80102e4:	6078      	str	r0, [r7, #4]
	return 1;
 80102e6:	2301      	movs	r3, #1
}
 80102e8:	4618      	mov	r0, r3
 80102ea:	370c      	adds	r7, #12
 80102ec:	46bd      	mov	sp, r7
 80102ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80102f2:	4770      	bx	lr

080102f4 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80102f4:	b480      	push	{r7}
 80102f6:	b085      	sub	sp, #20
 80102f8:	af00      	add	r7, sp, #0
 80102fa:	60f8      	str	r0, [r7, #12]
 80102fc:	60b9      	str	r1, [r7, #8]
 80102fe:	607a      	str	r2, [r7, #4]
	return 0;
 8010300:	2300      	movs	r3, #0
}
 8010302:	4618      	mov	r0, r3
 8010304:	3714      	adds	r7, #20
 8010306:	46bd      	mov	sp, r7
 8010308:	f85d 7b04 	ldr.w	r7, [sp], #4
 801030c:	4770      	bx	lr
	...

08010310 <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 8010310:	b480      	push	{r7}
 8010312:	b085      	sub	sp, #20
 8010314:	af00      	add	r7, sp, #0
 8010316:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 8010318:	4b11      	ldr	r3, [pc, #68]	; (8010360 <_sbrk+0x50>)
 801031a:	681b      	ldr	r3, [r3, #0]
 801031c:	2b00      	cmp	r3, #0
 801031e:	d102      	bne.n	8010326 <_sbrk+0x16>
		heap_end = &end;
 8010320:	4b0f      	ldr	r3, [pc, #60]	; (8010360 <_sbrk+0x50>)
 8010322:	4a10      	ldr	r2, [pc, #64]	; (8010364 <_sbrk+0x54>)
 8010324:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 8010326:	4b0e      	ldr	r3, [pc, #56]	; (8010360 <_sbrk+0x50>)
 8010328:	681b      	ldr	r3, [r3, #0]
 801032a:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 801032c:	4b0c      	ldr	r3, [pc, #48]	; (8010360 <_sbrk+0x50>)
 801032e:	681a      	ldr	r2, [r3, #0]
 8010330:	687b      	ldr	r3, [r7, #4]
 8010332:	4413      	add	r3, r2
 8010334:	466a      	mov	r2, sp
 8010336:	4293      	cmp	r3, r2
 8010338:	d905      	bls.n	8010346 <_sbrk+0x36>
	{
		errno = ENOMEM;
 801033a:	4b0b      	ldr	r3, [pc, #44]	; (8010368 <_sbrk+0x58>)
 801033c:	220c      	movs	r2, #12
 801033e:	601a      	str	r2, [r3, #0]
		return (caddr_t) -1;
 8010340:	f04f 33ff 	mov.w	r3, #4294967295
 8010344:	e006      	b.n	8010354 <_sbrk+0x44>
	}

	heap_end += incr;
 8010346:	4b06      	ldr	r3, [pc, #24]	; (8010360 <_sbrk+0x50>)
 8010348:	681a      	ldr	r2, [r3, #0]
 801034a:	687b      	ldr	r3, [r7, #4]
 801034c:	4413      	add	r3, r2
 801034e:	4a04      	ldr	r2, [pc, #16]	; (8010360 <_sbrk+0x50>)
 8010350:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 8010352:	68fb      	ldr	r3, [r7, #12]
}
 8010354:	4618      	mov	r0, r3
 8010356:	3714      	adds	r7, #20
 8010358:	46bd      	mov	sp, r7
 801035a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801035e:	4770      	bx	lr
 8010360:	24004188 	.word	0x24004188
 8010364:	2400afa8 	.word	0x2400afa8
 8010368:	2400acf4 	.word	0x2400acf4

0801036c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 801036c:	b480      	push	{r7}
 801036e:	b083      	sub	sp, #12
 8010370:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8010372:	4b31      	ldr	r3, [pc, #196]	; (8010438 <SystemInit+0xcc>)
 8010374:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8010378:	4a2f      	ldr	r2, [pc, #188]	; (8010438 <SystemInit+0xcc>)
 801037a:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 801037e:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8010382:	4b2e      	ldr	r3, [pc, #184]	; (801043c <SystemInit+0xd0>)
 8010384:	681b      	ldr	r3, [r3, #0]
 8010386:	4a2d      	ldr	r2, [pc, #180]	; (801043c <SystemInit+0xd0>)
 8010388:	f043 0301 	orr.w	r3, r3, #1
 801038c:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 801038e:	4b2b      	ldr	r3, [pc, #172]	; (801043c <SystemInit+0xd0>)
 8010390:	2200      	movs	r2, #0
 8010392:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, CSSON , CSION,RC48ON, CSIKERON PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8010394:	4b29      	ldr	r3, [pc, #164]	; (801043c <SystemInit+0xd0>)
 8010396:	681a      	ldr	r2, [r3, #0]
 8010398:	4928      	ldr	r1, [pc, #160]	; (801043c <SystemInit+0xd0>)
 801039a:	4b29      	ldr	r3, [pc, #164]	; (8010440 <SystemInit+0xd4>)
 801039c:	4013      	ands	r3, r2
 801039e:	600b      	str	r3, [r1, #0]

  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 80103a0:	4b26      	ldr	r3, [pc, #152]	; (801043c <SystemInit+0xd0>)
 80103a2:	2200      	movs	r2, #0
 80103a4:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 80103a6:	4b25      	ldr	r3, [pc, #148]	; (801043c <SystemInit+0xd0>)
 80103a8:	2200      	movs	r2, #0
 80103aa:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 80103ac:	4b23      	ldr	r3, [pc, #140]	; (801043c <SystemInit+0xd0>)
 80103ae:	2200      	movs	r2, #0
 80103b0:	621a      	str	r2, [r3, #32]

  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x00000000;
 80103b2:	4b22      	ldr	r3, [pc, #136]	; (801043c <SystemInit+0xd0>)
 80103b4:	2200      	movs	r2, #0
 80103b6:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x00000000;
 80103b8:	4b20      	ldr	r3, [pc, #128]	; (801043c <SystemInit+0xd0>)
 80103ba:	2200      	movs	r2, #0
 80103bc:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x00000000;
 80103be:	4b1f      	ldr	r3, [pc, #124]	; (801043c <SystemInit+0xd0>)
 80103c0:	2200      	movs	r2, #0
 80103c2:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 80103c4:	4b1d      	ldr	r3, [pc, #116]	; (801043c <SystemInit+0xd0>)
 80103c6:	2200      	movs	r2, #0
 80103c8:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x00000000;
 80103ca:	4b1c      	ldr	r3, [pc, #112]	; (801043c <SystemInit+0xd0>)
 80103cc:	2200      	movs	r2, #0
 80103ce:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 80103d0:	4b1a      	ldr	r3, [pc, #104]	; (801043c <SystemInit+0xd0>)
 80103d2:	2200      	movs	r2, #0
 80103d4:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x00000000;
 80103d6:	4b19      	ldr	r3, [pc, #100]	; (801043c <SystemInit+0xd0>)
 80103d8:	2200      	movs	r2, #0
 80103da:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 80103dc:	4b17      	ldr	r3, [pc, #92]	; (801043c <SystemInit+0xd0>)
 80103de:	2200      	movs	r2, #0
 80103e0:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 80103e2:	4b16      	ldr	r3, [pc, #88]	; (801043c <SystemInit+0xd0>)
 80103e4:	681b      	ldr	r3, [r3, #0]
 80103e6:	4a15      	ldr	r2, [pc, #84]	; (801043c <SystemInit+0xd0>)
 80103e8:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80103ec:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 80103ee:	4b13      	ldr	r3, [pc, #76]	; (801043c <SystemInit+0xd0>)
 80103f0:	2200      	movs	r2, #0
 80103f2:	661a      	str	r2, [r3, #96]	; 0x60

#if defined (DATA_IN_D2_SRAM)
  /* in case of initialized data in D2 SRAM (AHB SRAM) , enable the D2 SRAM clock ((AHB SRAM clock) */
#if defined(RCC_AHB2ENR_D2SRAM1EN)
  RCC->AHB2ENR |= (RCC_AHB2ENR_D2SRAM1EN | RCC_AHB2ENR_D2SRAM2EN | RCC_AHB2ENR_D2SRAM3EN);
 80103f4:	4b11      	ldr	r3, [pc, #68]	; (801043c <SystemInit+0xd0>)
 80103f6:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
 80103fa:	4a10      	ldr	r2, [pc, #64]	; (801043c <SystemInit+0xd0>)
 80103fc:	f043 4360 	orr.w	r3, r3, #3758096384	; 0xe0000000
 8010400:	f8c2 30dc 	str.w	r3, [r2, #220]	; 0xdc
#else
  RCC->AHB2ENR |= (RCC_AHB2ENR_AHBSRAM1EN | RCC_AHB2ENR_AHBSRAM2EN);
#endif /* RCC_AHB2ENR_D2SRAM1EN */

  tmpreg = RCC->AHB2ENR;
 8010404:	4b0d      	ldr	r3, [pc, #52]	; (801043c <SystemInit+0xd0>)
 8010406:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
 801040a:	607b      	str	r3, [r7, #4]
  (void) tmpreg;
 801040c:	687b      	ldr	r3, [r7, #4]
  SCB->VTOR = FLASH_BANK2_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
#endif /* VECT_TAB_SRAM */

#else
  /* dual core CM7 or single core line */
  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 801040e:	4b0d      	ldr	r3, [pc, #52]	; (8010444 <SystemInit+0xd8>)
 8010410:	681a      	ldr	r2, [r3, #0]
 8010412:	4b0d      	ldr	r3, [pc, #52]	; (8010448 <SystemInit+0xdc>)
 8010414:	4013      	ands	r3, r2
 8010416:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 801041a:	d202      	bcs.n	8010422 <SystemInit+0xb6>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 801041c:	4b0b      	ldr	r3, [pc, #44]	; (801044c <SystemInit+0xe0>)
 801041e:	2201      	movs	r2, #1
 8010420:	601a      	str	r2, [r3, #0]

  /* Configure the Vector Table location add offset address for cortex-M7 ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = D1_AXISRAM_BASE  | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM */
#else
  SCB->VTOR = FLASH_BANK1_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8010422:	4b05      	ldr	r3, [pc, #20]	; (8010438 <SystemInit+0xcc>)
 8010424:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8010428:	609a      	str	r2, [r3, #8]
#endif

#endif /*DUAL_CORE && CORE_CM4*/

}
 801042a:	bf00      	nop
 801042c:	370c      	adds	r7, #12
 801042e:	46bd      	mov	sp, r7
 8010430:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010434:	4770      	bx	lr
 8010436:	bf00      	nop
 8010438:	e000ed00 	.word	0xe000ed00
 801043c:	58024400 	.word	0x58024400
 8010440:	eaf6ed7f 	.word	0xeaf6ed7f
 8010444:	5c001000 	.word	0x5c001000
 8010448:	ffff0000 	.word	0xffff0000
 801044c:	51008108 	.word	0x51008108

08010450 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8010450:	f8df d034 	ldr.w	sp, [pc, #52]	; 8010488 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8010454:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8010456:	e003      	b.n	8010460 <LoopCopyDataInit>

08010458 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8010458:	4b0c      	ldr	r3, [pc, #48]	; (801048c <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 801045a:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 801045c:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 801045e:	3104      	adds	r1, #4

08010460 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8010460:	480b      	ldr	r0, [pc, #44]	; (8010490 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8010462:	4b0c      	ldr	r3, [pc, #48]	; (8010494 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8010464:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8010466:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8010468:	d3f6      	bcc.n	8010458 <CopyDataInit>
  ldr  r2, =_sbss
 801046a:	4a0b      	ldr	r2, [pc, #44]	; (8010498 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 801046c:	e002      	b.n	8010474 <LoopFillZerobss>

0801046e <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 801046e:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8010470:	f842 3b04 	str.w	r3, [r2], #4

08010474 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8010474:	4b09      	ldr	r3, [pc, #36]	; (801049c <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8010476:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8010478:	d3f9      	bcc.n	801046e <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 801047a:	f7ff ff77 	bl	801036c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 801047e:	f000 f811 	bl	80104a4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8010482:	f7ff fd7d 	bl	800ff80 <main>
  bx  lr    
 8010486:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8010488:	24080000 	.word	0x24080000
  ldr  r3, =_sidata
 801048c:	080132d0 	.word	0x080132d0
  ldr  r0, =_sdata
 8010490:	24000000 	.word	0x24000000
  ldr  r3, =_edata
 8010494:	24000090 	.word	0x24000090
  ldr  r2, =_sbss
 8010498:	24000090 	.word	0x24000090
  ldr  r3, = _ebss
 801049c:	2400afa4 	.word	0x2400afa4

080104a0 <ADC3_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80104a0:	e7fe      	b.n	80104a0 <ADC3_IRQHandler>
	...

080104a4 <__libc_init_array>:
 80104a4:	b570      	push	{r4, r5, r6, lr}
 80104a6:	4e0d      	ldr	r6, [pc, #52]	; (80104dc <__libc_init_array+0x38>)
 80104a8:	4c0d      	ldr	r4, [pc, #52]	; (80104e0 <__libc_init_array+0x3c>)
 80104aa:	1ba4      	subs	r4, r4, r6
 80104ac:	10a4      	asrs	r4, r4, #2
 80104ae:	2500      	movs	r5, #0
 80104b0:	42a5      	cmp	r5, r4
 80104b2:	d109      	bne.n	80104c8 <__libc_init_array+0x24>
 80104b4:	4e0b      	ldr	r6, [pc, #44]	; (80104e4 <__libc_init_array+0x40>)
 80104b6:	4c0c      	ldr	r4, [pc, #48]	; (80104e8 <__libc_init_array+0x44>)
 80104b8:	f000 ff1e 	bl	80112f8 <_init>
 80104bc:	1ba4      	subs	r4, r4, r6
 80104be:	10a4      	asrs	r4, r4, #2
 80104c0:	2500      	movs	r5, #0
 80104c2:	42a5      	cmp	r5, r4
 80104c4:	d105      	bne.n	80104d2 <__libc_init_array+0x2e>
 80104c6:	bd70      	pop	{r4, r5, r6, pc}
 80104c8:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80104cc:	4798      	blx	r3
 80104ce:	3501      	adds	r5, #1
 80104d0:	e7ee      	b.n	80104b0 <__libc_init_array+0xc>
 80104d2:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80104d6:	4798      	blx	r3
 80104d8:	3501      	adds	r5, #1
 80104da:	e7f2      	b.n	80104c2 <__libc_init_array+0x1e>
 80104dc:	080132c8 	.word	0x080132c8
 80104e0:	080132c8 	.word	0x080132c8
 80104e4:	080132c8 	.word	0x080132c8
 80104e8:	080132cc 	.word	0x080132cc

080104ec <memcmp>:
 80104ec:	b530      	push	{r4, r5, lr}
 80104ee:	2400      	movs	r4, #0
 80104f0:	42a2      	cmp	r2, r4
 80104f2:	d101      	bne.n	80104f8 <memcmp+0xc>
 80104f4:	2000      	movs	r0, #0
 80104f6:	e007      	b.n	8010508 <memcmp+0x1c>
 80104f8:	5d03      	ldrb	r3, [r0, r4]
 80104fa:	3401      	adds	r4, #1
 80104fc:	190d      	adds	r5, r1, r4
 80104fe:	f815 5c01 	ldrb.w	r5, [r5, #-1]
 8010502:	42ab      	cmp	r3, r5
 8010504:	d0f4      	beq.n	80104f0 <memcmp+0x4>
 8010506:	1b58      	subs	r0, r3, r5
 8010508:	bd30      	pop	{r4, r5, pc}

0801050a <memcpy>:
 801050a:	b510      	push	{r4, lr}
 801050c:	1e43      	subs	r3, r0, #1
 801050e:	440a      	add	r2, r1
 8010510:	4291      	cmp	r1, r2
 8010512:	d100      	bne.n	8010516 <memcpy+0xc>
 8010514:	bd10      	pop	{r4, pc}
 8010516:	f811 4b01 	ldrb.w	r4, [r1], #1
 801051a:	f803 4f01 	strb.w	r4, [r3, #1]!
 801051e:	e7f7      	b.n	8010510 <memcpy+0x6>

08010520 <memset>:
 8010520:	4402      	add	r2, r0
 8010522:	4603      	mov	r3, r0
 8010524:	4293      	cmp	r3, r2
 8010526:	d100      	bne.n	801052a <memset+0xa>
 8010528:	4770      	bx	lr
 801052a:	f803 1b01 	strb.w	r1, [r3], #1
 801052e:	e7f9      	b.n	8010524 <memset+0x4>

08010530 <iprintf>:
 8010530:	b40f      	push	{r0, r1, r2, r3}
 8010532:	4b0a      	ldr	r3, [pc, #40]	; (801055c <iprintf+0x2c>)
 8010534:	b513      	push	{r0, r1, r4, lr}
 8010536:	681c      	ldr	r4, [r3, #0]
 8010538:	b124      	cbz	r4, 8010544 <iprintf+0x14>
 801053a:	69a3      	ldr	r3, [r4, #24]
 801053c:	b913      	cbnz	r3, 8010544 <iprintf+0x14>
 801053e:	4620      	mov	r0, r4
 8010540:	f000 f84e 	bl	80105e0 <__sinit>
 8010544:	ab05      	add	r3, sp, #20
 8010546:	9a04      	ldr	r2, [sp, #16]
 8010548:	68a1      	ldr	r1, [r4, #8]
 801054a:	9301      	str	r3, [sp, #4]
 801054c:	4620      	mov	r0, r4
 801054e:	f000 f955 	bl	80107fc <_vfiprintf_r>
 8010552:	b002      	add	sp, #8
 8010554:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8010558:	b004      	add	sp, #16
 801055a:	4770      	bx	lr
 801055c:	2400002c 	.word	0x2400002c

08010560 <std>:
 8010560:	2300      	movs	r3, #0
 8010562:	b510      	push	{r4, lr}
 8010564:	4604      	mov	r4, r0
 8010566:	e9c0 3300 	strd	r3, r3, [r0]
 801056a:	6083      	str	r3, [r0, #8]
 801056c:	8181      	strh	r1, [r0, #12]
 801056e:	6643      	str	r3, [r0, #100]	; 0x64
 8010570:	81c2      	strh	r2, [r0, #14]
 8010572:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8010576:	6183      	str	r3, [r0, #24]
 8010578:	4619      	mov	r1, r3
 801057a:	2208      	movs	r2, #8
 801057c:	305c      	adds	r0, #92	; 0x5c
 801057e:	f7ff ffcf 	bl	8010520 <memset>
 8010582:	4b05      	ldr	r3, [pc, #20]	; (8010598 <std+0x38>)
 8010584:	6263      	str	r3, [r4, #36]	; 0x24
 8010586:	4b05      	ldr	r3, [pc, #20]	; (801059c <std+0x3c>)
 8010588:	62a3      	str	r3, [r4, #40]	; 0x28
 801058a:	4b05      	ldr	r3, [pc, #20]	; (80105a0 <std+0x40>)
 801058c:	62e3      	str	r3, [r4, #44]	; 0x2c
 801058e:	4b05      	ldr	r3, [pc, #20]	; (80105a4 <std+0x44>)
 8010590:	6224      	str	r4, [r4, #32]
 8010592:	6323      	str	r3, [r4, #48]	; 0x30
 8010594:	bd10      	pop	{r4, pc}
 8010596:	bf00      	nop
 8010598:	08010d59 	.word	0x08010d59
 801059c:	08010d7b 	.word	0x08010d7b
 80105a0:	08010db3 	.word	0x08010db3
 80105a4:	08010dd7 	.word	0x08010dd7

080105a8 <_cleanup_r>:
 80105a8:	4901      	ldr	r1, [pc, #4]	; (80105b0 <_cleanup_r+0x8>)
 80105aa:	f000 b885 	b.w	80106b8 <_fwalk_reent>
 80105ae:	bf00      	nop
 80105b0:	080110b1 	.word	0x080110b1

080105b4 <__sfmoreglue>:
 80105b4:	b570      	push	{r4, r5, r6, lr}
 80105b6:	1e4a      	subs	r2, r1, #1
 80105b8:	2568      	movs	r5, #104	; 0x68
 80105ba:	4355      	muls	r5, r2
 80105bc:	460e      	mov	r6, r1
 80105be:	f105 0174 	add.w	r1, r5, #116	; 0x74
 80105c2:	f000 f897 	bl	80106f4 <_malloc_r>
 80105c6:	4604      	mov	r4, r0
 80105c8:	b140      	cbz	r0, 80105dc <__sfmoreglue+0x28>
 80105ca:	2100      	movs	r1, #0
 80105cc:	e9c0 1600 	strd	r1, r6, [r0]
 80105d0:	300c      	adds	r0, #12
 80105d2:	60a0      	str	r0, [r4, #8]
 80105d4:	f105 0268 	add.w	r2, r5, #104	; 0x68
 80105d8:	f7ff ffa2 	bl	8010520 <memset>
 80105dc:	4620      	mov	r0, r4
 80105de:	bd70      	pop	{r4, r5, r6, pc}

080105e0 <__sinit>:
 80105e0:	6983      	ldr	r3, [r0, #24]
 80105e2:	b510      	push	{r4, lr}
 80105e4:	4604      	mov	r4, r0
 80105e6:	bb33      	cbnz	r3, 8010636 <__sinit+0x56>
 80105e8:	e9c0 3312 	strd	r3, r3, [r0, #72]	; 0x48
 80105ec:	6503      	str	r3, [r0, #80]	; 0x50
 80105ee:	4b12      	ldr	r3, [pc, #72]	; (8010638 <__sinit+0x58>)
 80105f0:	4a12      	ldr	r2, [pc, #72]	; (801063c <__sinit+0x5c>)
 80105f2:	681b      	ldr	r3, [r3, #0]
 80105f4:	6282      	str	r2, [r0, #40]	; 0x28
 80105f6:	4298      	cmp	r0, r3
 80105f8:	bf04      	itt	eq
 80105fa:	2301      	moveq	r3, #1
 80105fc:	6183      	streq	r3, [r0, #24]
 80105fe:	f000 f81f 	bl	8010640 <__sfp>
 8010602:	6060      	str	r0, [r4, #4]
 8010604:	4620      	mov	r0, r4
 8010606:	f000 f81b 	bl	8010640 <__sfp>
 801060a:	60a0      	str	r0, [r4, #8]
 801060c:	4620      	mov	r0, r4
 801060e:	f000 f817 	bl	8010640 <__sfp>
 8010612:	2200      	movs	r2, #0
 8010614:	60e0      	str	r0, [r4, #12]
 8010616:	2104      	movs	r1, #4
 8010618:	6860      	ldr	r0, [r4, #4]
 801061a:	f7ff ffa1 	bl	8010560 <std>
 801061e:	2201      	movs	r2, #1
 8010620:	2109      	movs	r1, #9
 8010622:	68a0      	ldr	r0, [r4, #8]
 8010624:	f7ff ff9c 	bl	8010560 <std>
 8010628:	2202      	movs	r2, #2
 801062a:	2112      	movs	r1, #18
 801062c:	68e0      	ldr	r0, [r4, #12]
 801062e:	f7ff ff97 	bl	8010560 <std>
 8010632:	2301      	movs	r3, #1
 8010634:	61a3      	str	r3, [r4, #24]
 8010636:	bd10      	pop	{r4, pc}
 8010638:	08013230 	.word	0x08013230
 801063c:	080105a9 	.word	0x080105a9

08010640 <__sfp>:
 8010640:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010642:	4b1b      	ldr	r3, [pc, #108]	; (80106b0 <__sfp+0x70>)
 8010644:	681e      	ldr	r6, [r3, #0]
 8010646:	69b3      	ldr	r3, [r6, #24]
 8010648:	4607      	mov	r7, r0
 801064a:	b913      	cbnz	r3, 8010652 <__sfp+0x12>
 801064c:	4630      	mov	r0, r6
 801064e:	f7ff ffc7 	bl	80105e0 <__sinit>
 8010652:	3648      	adds	r6, #72	; 0x48
 8010654:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8010658:	3b01      	subs	r3, #1
 801065a:	d503      	bpl.n	8010664 <__sfp+0x24>
 801065c:	6833      	ldr	r3, [r6, #0]
 801065e:	b133      	cbz	r3, 801066e <__sfp+0x2e>
 8010660:	6836      	ldr	r6, [r6, #0]
 8010662:	e7f7      	b.n	8010654 <__sfp+0x14>
 8010664:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8010668:	b16d      	cbz	r5, 8010686 <__sfp+0x46>
 801066a:	3468      	adds	r4, #104	; 0x68
 801066c:	e7f4      	b.n	8010658 <__sfp+0x18>
 801066e:	2104      	movs	r1, #4
 8010670:	4638      	mov	r0, r7
 8010672:	f7ff ff9f 	bl	80105b4 <__sfmoreglue>
 8010676:	6030      	str	r0, [r6, #0]
 8010678:	2800      	cmp	r0, #0
 801067a:	d1f1      	bne.n	8010660 <__sfp+0x20>
 801067c:	230c      	movs	r3, #12
 801067e:	603b      	str	r3, [r7, #0]
 8010680:	4604      	mov	r4, r0
 8010682:	4620      	mov	r0, r4
 8010684:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8010686:	4b0b      	ldr	r3, [pc, #44]	; (80106b4 <__sfp+0x74>)
 8010688:	6665      	str	r5, [r4, #100]	; 0x64
 801068a:	e9c4 5500 	strd	r5, r5, [r4]
 801068e:	60a5      	str	r5, [r4, #8]
 8010690:	e9c4 3503 	strd	r3, r5, [r4, #12]
 8010694:	e9c4 5505 	strd	r5, r5, [r4, #20]
 8010698:	2208      	movs	r2, #8
 801069a:	4629      	mov	r1, r5
 801069c:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 80106a0:	f7ff ff3e 	bl	8010520 <memset>
 80106a4:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 80106a8:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 80106ac:	e7e9      	b.n	8010682 <__sfp+0x42>
 80106ae:	bf00      	nop
 80106b0:	08013230 	.word	0x08013230
 80106b4:	ffff0001 	.word	0xffff0001

080106b8 <_fwalk_reent>:
 80106b8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80106bc:	4680      	mov	r8, r0
 80106be:	4689      	mov	r9, r1
 80106c0:	f100 0448 	add.w	r4, r0, #72	; 0x48
 80106c4:	2600      	movs	r6, #0
 80106c6:	b914      	cbnz	r4, 80106ce <_fwalk_reent+0x16>
 80106c8:	4630      	mov	r0, r6
 80106ca:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80106ce:	e9d4 7501 	ldrd	r7, r5, [r4, #4]
 80106d2:	3f01      	subs	r7, #1
 80106d4:	d501      	bpl.n	80106da <_fwalk_reent+0x22>
 80106d6:	6824      	ldr	r4, [r4, #0]
 80106d8:	e7f5      	b.n	80106c6 <_fwalk_reent+0xe>
 80106da:	89ab      	ldrh	r3, [r5, #12]
 80106dc:	2b01      	cmp	r3, #1
 80106de:	d907      	bls.n	80106f0 <_fwalk_reent+0x38>
 80106e0:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80106e4:	3301      	adds	r3, #1
 80106e6:	d003      	beq.n	80106f0 <_fwalk_reent+0x38>
 80106e8:	4629      	mov	r1, r5
 80106ea:	4640      	mov	r0, r8
 80106ec:	47c8      	blx	r9
 80106ee:	4306      	orrs	r6, r0
 80106f0:	3568      	adds	r5, #104	; 0x68
 80106f2:	e7ee      	b.n	80106d2 <_fwalk_reent+0x1a>

080106f4 <_malloc_r>:
 80106f4:	b570      	push	{r4, r5, r6, lr}
 80106f6:	1ccd      	adds	r5, r1, #3
 80106f8:	f025 0503 	bic.w	r5, r5, #3
 80106fc:	3508      	adds	r5, #8
 80106fe:	2d0c      	cmp	r5, #12
 8010700:	bf38      	it	cc
 8010702:	250c      	movcc	r5, #12
 8010704:	2d00      	cmp	r5, #0
 8010706:	4606      	mov	r6, r0
 8010708:	db01      	blt.n	801070e <_malloc_r+0x1a>
 801070a:	42a9      	cmp	r1, r5
 801070c:	d903      	bls.n	8010716 <_malloc_r+0x22>
 801070e:	230c      	movs	r3, #12
 8010710:	6033      	str	r3, [r6, #0]
 8010712:	2000      	movs	r0, #0
 8010714:	bd70      	pop	{r4, r5, r6, pc}
 8010716:	f000 fd6b 	bl	80111f0 <__malloc_lock>
 801071a:	4a21      	ldr	r2, [pc, #132]	; (80107a0 <_malloc_r+0xac>)
 801071c:	6814      	ldr	r4, [r2, #0]
 801071e:	4621      	mov	r1, r4
 8010720:	b991      	cbnz	r1, 8010748 <_malloc_r+0x54>
 8010722:	4c20      	ldr	r4, [pc, #128]	; (80107a4 <_malloc_r+0xb0>)
 8010724:	6823      	ldr	r3, [r4, #0]
 8010726:	b91b      	cbnz	r3, 8010730 <_malloc_r+0x3c>
 8010728:	4630      	mov	r0, r6
 801072a:	f000 fb05 	bl	8010d38 <_sbrk_r>
 801072e:	6020      	str	r0, [r4, #0]
 8010730:	4629      	mov	r1, r5
 8010732:	4630      	mov	r0, r6
 8010734:	f000 fb00 	bl	8010d38 <_sbrk_r>
 8010738:	1c43      	adds	r3, r0, #1
 801073a:	d124      	bne.n	8010786 <_malloc_r+0x92>
 801073c:	230c      	movs	r3, #12
 801073e:	6033      	str	r3, [r6, #0]
 8010740:	4630      	mov	r0, r6
 8010742:	f000 fd56 	bl	80111f2 <__malloc_unlock>
 8010746:	e7e4      	b.n	8010712 <_malloc_r+0x1e>
 8010748:	680b      	ldr	r3, [r1, #0]
 801074a:	1b5b      	subs	r3, r3, r5
 801074c:	d418      	bmi.n	8010780 <_malloc_r+0x8c>
 801074e:	2b0b      	cmp	r3, #11
 8010750:	d90f      	bls.n	8010772 <_malloc_r+0x7e>
 8010752:	600b      	str	r3, [r1, #0]
 8010754:	50cd      	str	r5, [r1, r3]
 8010756:	18cc      	adds	r4, r1, r3
 8010758:	4630      	mov	r0, r6
 801075a:	f000 fd4a 	bl	80111f2 <__malloc_unlock>
 801075e:	f104 000b 	add.w	r0, r4, #11
 8010762:	1d23      	adds	r3, r4, #4
 8010764:	f020 0007 	bic.w	r0, r0, #7
 8010768:	1ac3      	subs	r3, r0, r3
 801076a:	d0d3      	beq.n	8010714 <_malloc_r+0x20>
 801076c:	425a      	negs	r2, r3
 801076e:	50e2      	str	r2, [r4, r3]
 8010770:	e7d0      	b.n	8010714 <_malloc_r+0x20>
 8010772:	428c      	cmp	r4, r1
 8010774:	684b      	ldr	r3, [r1, #4]
 8010776:	bf16      	itet	ne
 8010778:	6063      	strne	r3, [r4, #4]
 801077a:	6013      	streq	r3, [r2, #0]
 801077c:	460c      	movne	r4, r1
 801077e:	e7eb      	b.n	8010758 <_malloc_r+0x64>
 8010780:	460c      	mov	r4, r1
 8010782:	6849      	ldr	r1, [r1, #4]
 8010784:	e7cc      	b.n	8010720 <_malloc_r+0x2c>
 8010786:	1cc4      	adds	r4, r0, #3
 8010788:	f024 0403 	bic.w	r4, r4, #3
 801078c:	42a0      	cmp	r0, r4
 801078e:	d005      	beq.n	801079c <_malloc_r+0xa8>
 8010790:	1a21      	subs	r1, r4, r0
 8010792:	4630      	mov	r0, r6
 8010794:	f000 fad0 	bl	8010d38 <_sbrk_r>
 8010798:	3001      	adds	r0, #1
 801079a:	d0cf      	beq.n	801073c <_malloc_r+0x48>
 801079c:	6025      	str	r5, [r4, #0]
 801079e:	e7db      	b.n	8010758 <_malloc_r+0x64>
 80107a0:	2400418c 	.word	0x2400418c
 80107a4:	24004190 	.word	0x24004190

080107a8 <__sfputc_r>:
 80107a8:	6893      	ldr	r3, [r2, #8]
 80107aa:	3b01      	subs	r3, #1
 80107ac:	2b00      	cmp	r3, #0
 80107ae:	b410      	push	{r4}
 80107b0:	6093      	str	r3, [r2, #8]
 80107b2:	da08      	bge.n	80107c6 <__sfputc_r+0x1e>
 80107b4:	6994      	ldr	r4, [r2, #24]
 80107b6:	42a3      	cmp	r3, r4
 80107b8:	db01      	blt.n	80107be <__sfputc_r+0x16>
 80107ba:	290a      	cmp	r1, #10
 80107bc:	d103      	bne.n	80107c6 <__sfputc_r+0x1e>
 80107be:	f85d 4b04 	ldr.w	r4, [sp], #4
 80107c2:	f000 bb0d 	b.w	8010de0 <__swbuf_r>
 80107c6:	6813      	ldr	r3, [r2, #0]
 80107c8:	1c58      	adds	r0, r3, #1
 80107ca:	6010      	str	r0, [r2, #0]
 80107cc:	7019      	strb	r1, [r3, #0]
 80107ce:	4608      	mov	r0, r1
 80107d0:	f85d 4b04 	ldr.w	r4, [sp], #4
 80107d4:	4770      	bx	lr

080107d6 <__sfputs_r>:
 80107d6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80107d8:	4606      	mov	r6, r0
 80107da:	460f      	mov	r7, r1
 80107dc:	4614      	mov	r4, r2
 80107de:	18d5      	adds	r5, r2, r3
 80107e0:	42ac      	cmp	r4, r5
 80107e2:	d101      	bne.n	80107e8 <__sfputs_r+0x12>
 80107e4:	2000      	movs	r0, #0
 80107e6:	e007      	b.n	80107f8 <__sfputs_r+0x22>
 80107e8:	463a      	mov	r2, r7
 80107ea:	f814 1b01 	ldrb.w	r1, [r4], #1
 80107ee:	4630      	mov	r0, r6
 80107f0:	f7ff ffda 	bl	80107a8 <__sfputc_r>
 80107f4:	1c43      	adds	r3, r0, #1
 80107f6:	d1f3      	bne.n	80107e0 <__sfputs_r+0xa>
 80107f8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080107fc <_vfiprintf_r>:
 80107fc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010800:	460c      	mov	r4, r1
 8010802:	b09d      	sub	sp, #116	; 0x74
 8010804:	4617      	mov	r7, r2
 8010806:	461d      	mov	r5, r3
 8010808:	4606      	mov	r6, r0
 801080a:	b118      	cbz	r0, 8010814 <_vfiprintf_r+0x18>
 801080c:	6983      	ldr	r3, [r0, #24]
 801080e:	b90b      	cbnz	r3, 8010814 <_vfiprintf_r+0x18>
 8010810:	f7ff fee6 	bl	80105e0 <__sinit>
 8010814:	4b7c      	ldr	r3, [pc, #496]	; (8010a08 <_vfiprintf_r+0x20c>)
 8010816:	429c      	cmp	r4, r3
 8010818:	d158      	bne.n	80108cc <_vfiprintf_r+0xd0>
 801081a:	6874      	ldr	r4, [r6, #4]
 801081c:	89a3      	ldrh	r3, [r4, #12]
 801081e:	0718      	lsls	r0, r3, #28
 8010820:	d55e      	bpl.n	80108e0 <_vfiprintf_r+0xe4>
 8010822:	6923      	ldr	r3, [r4, #16]
 8010824:	2b00      	cmp	r3, #0
 8010826:	d05b      	beq.n	80108e0 <_vfiprintf_r+0xe4>
 8010828:	2300      	movs	r3, #0
 801082a:	9309      	str	r3, [sp, #36]	; 0x24
 801082c:	2320      	movs	r3, #32
 801082e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8010832:	2330      	movs	r3, #48	; 0x30
 8010834:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8010838:	9503      	str	r5, [sp, #12]
 801083a:	f04f 0b01 	mov.w	fp, #1
 801083e:	46b8      	mov	r8, r7
 8010840:	4645      	mov	r5, r8
 8010842:	f815 3b01 	ldrb.w	r3, [r5], #1
 8010846:	b10b      	cbz	r3, 801084c <_vfiprintf_r+0x50>
 8010848:	2b25      	cmp	r3, #37	; 0x25
 801084a:	d154      	bne.n	80108f6 <_vfiprintf_r+0xfa>
 801084c:	ebb8 0a07 	subs.w	sl, r8, r7
 8010850:	d00b      	beq.n	801086a <_vfiprintf_r+0x6e>
 8010852:	4653      	mov	r3, sl
 8010854:	463a      	mov	r2, r7
 8010856:	4621      	mov	r1, r4
 8010858:	4630      	mov	r0, r6
 801085a:	f7ff ffbc 	bl	80107d6 <__sfputs_r>
 801085e:	3001      	adds	r0, #1
 8010860:	f000 80c2 	beq.w	80109e8 <_vfiprintf_r+0x1ec>
 8010864:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8010866:	4453      	add	r3, sl
 8010868:	9309      	str	r3, [sp, #36]	; 0x24
 801086a:	f898 3000 	ldrb.w	r3, [r8]
 801086e:	2b00      	cmp	r3, #0
 8010870:	f000 80ba 	beq.w	80109e8 <_vfiprintf_r+0x1ec>
 8010874:	2300      	movs	r3, #0
 8010876:	f04f 32ff 	mov.w	r2, #4294967295
 801087a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 801087e:	9304      	str	r3, [sp, #16]
 8010880:	9307      	str	r3, [sp, #28]
 8010882:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8010886:	931a      	str	r3, [sp, #104]	; 0x68
 8010888:	46a8      	mov	r8, r5
 801088a:	2205      	movs	r2, #5
 801088c:	f818 1b01 	ldrb.w	r1, [r8], #1
 8010890:	485e      	ldr	r0, [pc, #376]	; (8010a0c <_vfiprintf_r+0x210>)
 8010892:	f7ef fd25 	bl	80002e0 <memchr>
 8010896:	9b04      	ldr	r3, [sp, #16]
 8010898:	bb78      	cbnz	r0, 80108fa <_vfiprintf_r+0xfe>
 801089a:	06d9      	lsls	r1, r3, #27
 801089c:	bf44      	itt	mi
 801089e:	2220      	movmi	r2, #32
 80108a0:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 80108a4:	071a      	lsls	r2, r3, #28
 80108a6:	bf44      	itt	mi
 80108a8:	222b      	movmi	r2, #43	; 0x2b
 80108aa:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 80108ae:	782a      	ldrb	r2, [r5, #0]
 80108b0:	2a2a      	cmp	r2, #42	; 0x2a
 80108b2:	d02a      	beq.n	801090a <_vfiprintf_r+0x10e>
 80108b4:	9a07      	ldr	r2, [sp, #28]
 80108b6:	46a8      	mov	r8, r5
 80108b8:	2000      	movs	r0, #0
 80108ba:	250a      	movs	r5, #10
 80108bc:	4641      	mov	r1, r8
 80108be:	f811 3b01 	ldrb.w	r3, [r1], #1
 80108c2:	3b30      	subs	r3, #48	; 0x30
 80108c4:	2b09      	cmp	r3, #9
 80108c6:	d969      	bls.n	801099c <_vfiprintf_r+0x1a0>
 80108c8:	b360      	cbz	r0, 8010924 <_vfiprintf_r+0x128>
 80108ca:	e024      	b.n	8010916 <_vfiprintf_r+0x11a>
 80108cc:	4b50      	ldr	r3, [pc, #320]	; (8010a10 <_vfiprintf_r+0x214>)
 80108ce:	429c      	cmp	r4, r3
 80108d0:	d101      	bne.n	80108d6 <_vfiprintf_r+0xda>
 80108d2:	68b4      	ldr	r4, [r6, #8]
 80108d4:	e7a2      	b.n	801081c <_vfiprintf_r+0x20>
 80108d6:	4b4f      	ldr	r3, [pc, #316]	; (8010a14 <_vfiprintf_r+0x218>)
 80108d8:	429c      	cmp	r4, r3
 80108da:	bf08      	it	eq
 80108dc:	68f4      	ldreq	r4, [r6, #12]
 80108de:	e79d      	b.n	801081c <_vfiprintf_r+0x20>
 80108e0:	4621      	mov	r1, r4
 80108e2:	4630      	mov	r0, r6
 80108e4:	f000 fae0 	bl	8010ea8 <__swsetup_r>
 80108e8:	2800      	cmp	r0, #0
 80108ea:	d09d      	beq.n	8010828 <_vfiprintf_r+0x2c>
 80108ec:	f04f 30ff 	mov.w	r0, #4294967295
 80108f0:	b01d      	add	sp, #116	; 0x74
 80108f2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80108f6:	46a8      	mov	r8, r5
 80108f8:	e7a2      	b.n	8010840 <_vfiprintf_r+0x44>
 80108fa:	4a44      	ldr	r2, [pc, #272]	; (8010a0c <_vfiprintf_r+0x210>)
 80108fc:	1a80      	subs	r0, r0, r2
 80108fe:	fa0b f000 	lsl.w	r0, fp, r0
 8010902:	4318      	orrs	r0, r3
 8010904:	9004      	str	r0, [sp, #16]
 8010906:	4645      	mov	r5, r8
 8010908:	e7be      	b.n	8010888 <_vfiprintf_r+0x8c>
 801090a:	9a03      	ldr	r2, [sp, #12]
 801090c:	1d11      	adds	r1, r2, #4
 801090e:	6812      	ldr	r2, [r2, #0]
 8010910:	9103      	str	r1, [sp, #12]
 8010912:	2a00      	cmp	r2, #0
 8010914:	db01      	blt.n	801091a <_vfiprintf_r+0x11e>
 8010916:	9207      	str	r2, [sp, #28]
 8010918:	e004      	b.n	8010924 <_vfiprintf_r+0x128>
 801091a:	4252      	negs	r2, r2
 801091c:	f043 0302 	orr.w	r3, r3, #2
 8010920:	9207      	str	r2, [sp, #28]
 8010922:	9304      	str	r3, [sp, #16]
 8010924:	f898 3000 	ldrb.w	r3, [r8]
 8010928:	2b2e      	cmp	r3, #46	; 0x2e
 801092a:	d10e      	bne.n	801094a <_vfiprintf_r+0x14e>
 801092c:	f898 3001 	ldrb.w	r3, [r8, #1]
 8010930:	2b2a      	cmp	r3, #42	; 0x2a
 8010932:	d138      	bne.n	80109a6 <_vfiprintf_r+0x1aa>
 8010934:	9b03      	ldr	r3, [sp, #12]
 8010936:	1d1a      	adds	r2, r3, #4
 8010938:	681b      	ldr	r3, [r3, #0]
 801093a:	9203      	str	r2, [sp, #12]
 801093c:	2b00      	cmp	r3, #0
 801093e:	bfb8      	it	lt
 8010940:	f04f 33ff 	movlt.w	r3, #4294967295
 8010944:	f108 0802 	add.w	r8, r8, #2
 8010948:	9305      	str	r3, [sp, #20]
 801094a:	4d33      	ldr	r5, [pc, #204]	; (8010a18 <_vfiprintf_r+0x21c>)
 801094c:	f898 1000 	ldrb.w	r1, [r8]
 8010950:	2203      	movs	r2, #3
 8010952:	4628      	mov	r0, r5
 8010954:	f7ef fcc4 	bl	80002e0 <memchr>
 8010958:	b140      	cbz	r0, 801096c <_vfiprintf_r+0x170>
 801095a:	2340      	movs	r3, #64	; 0x40
 801095c:	1b40      	subs	r0, r0, r5
 801095e:	fa03 f000 	lsl.w	r0, r3, r0
 8010962:	9b04      	ldr	r3, [sp, #16]
 8010964:	4303      	orrs	r3, r0
 8010966:	f108 0801 	add.w	r8, r8, #1
 801096a:	9304      	str	r3, [sp, #16]
 801096c:	f898 1000 	ldrb.w	r1, [r8]
 8010970:	482a      	ldr	r0, [pc, #168]	; (8010a1c <_vfiprintf_r+0x220>)
 8010972:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8010976:	2206      	movs	r2, #6
 8010978:	f108 0701 	add.w	r7, r8, #1
 801097c:	f7ef fcb0 	bl	80002e0 <memchr>
 8010980:	2800      	cmp	r0, #0
 8010982:	d037      	beq.n	80109f4 <_vfiprintf_r+0x1f8>
 8010984:	4b26      	ldr	r3, [pc, #152]	; (8010a20 <_vfiprintf_r+0x224>)
 8010986:	bb1b      	cbnz	r3, 80109d0 <_vfiprintf_r+0x1d4>
 8010988:	9b03      	ldr	r3, [sp, #12]
 801098a:	3307      	adds	r3, #7
 801098c:	f023 0307 	bic.w	r3, r3, #7
 8010990:	3308      	adds	r3, #8
 8010992:	9303      	str	r3, [sp, #12]
 8010994:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8010996:	444b      	add	r3, r9
 8010998:	9309      	str	r3, [sp, #36]	; 0x24
 801099a:	e750      	b.n	801083e <_vfiprintf_r+0x42>
 801099c:	fb05 3202 	mla	r2, r5, r2, r3
 80109a0:	2001      	movs	r0, #1
 80109a2:	4688      	mov	r8, r1
 80109a4:	e78a      	b.n	80108bc <_vfiprintf_r+0xc0>
 80109a6:	2300      	movs	r3, #0
 80109a8:	f108 0801 	add.w	r8, r8, #1
 80109ac:	9305      	str	r3, [sp, #20]
 80109ae:	4619      	mov	r1, r3
 80109b0:	250a      	movs	r5, #10
 80109b2:	4640      	mov	r0, r8
 80109b4:	f810 2b01 	ldrb.w	r2, [r0], #1
 80109b8:	3a30      	subs	r2, #48	; 0x30
 80109ba:	2a09      	cmp	r2, #9
 80109bc:	d903      	bls.n	80109c6 <_vfiprintf_r+0x1ca>
 80109be:	2b00      	cmp	r3, #0
 80109c0:	d0c3      	beq.n	801094a <_vfiprintf_r+0x14e>
 80109c2:	9105      	str	r1, [sp, #20]
 80109c4:	e7c1      	b.n	801094a <_vfiprintf_r+0x14e>
 80109c6:	fb05 2101 	mla	r1, r5, r1, r2
 80109ca:	2301      	movs	r3, #1
 80109cc:	4680      	mov	r8, r0
 80109ce:	e7f0      	b.n	80109b2 <_vfiprintf_r+0x1b6>
 80109d0:	ab03      	add	r3, sp, #12
 80109d2:	9300      	str	r3, [sp, #0]
 80109d4:	4622      	mov	r2, r4
 80109d6:	4b13      	ldr	r3, [pc, #76]	; (8010a24 <_vfiprintf_r+0x228>)
 80109d8:	a904      	add	r1, sp, #16
 80109da:	4630      	mov	r0, r6
 80109dc:	f3af 8000 	nop.w
 80109e0:	f1b0 3fff 	cmp.w	r0, #4294967295
 80109e4:	4681      	mov	r9, r0
 80109e6:	d1d5      	bne.n	8010994 <_vfiprintf_r+0x198>
 80109e8:	89a3      	ldrh	r3, [r4, #12]
 80109ea:	065b      	lsls	r3, r3, #25
 80109ec:	f53f af7e 	bmi.w	80108ec <_vfiprintf_r+0xf0>
 80109f0:	9809      	ldr	r0, [sp, #36]	; 0x24
 80109f2:	e77d      	b.n	80108f0 <_vfiprintf_r+0xf4>
 80109f4:	ab03      	add	r3, sp, #12
 80109f6:	9300      	str	r3, [sp, #0]
 80109f8:	4622      	mov	r2, r4
 80109fa:	4b0a      	ldr	r3, [pc, #40]	; (8010a24 <_vfiprintf_r+0x228>)
 80109fc:	a904      	add	r1, sp, #16
 80109fe:	4630      	mov	r0, r6
 8010a00:	f000 f888 	bl	8010b14 <_printf_i>
 8010a04:	e7ec      	b.n	80109e0 <_vfiprintf_r+0x1e4>
 8010a06:	bf00      	nop
 8010a08:	08013254 	.word	0x08013254
 8010a0c:	08013294 	.word	0x08013294
 8010a10:	08013274 	.word	0x08013274
 8010a14:	08013234 	.word	0x08013234
 8010a18:	0801329a 	.word	0x0801329a
 8010a1c:	0801329e 	.word	0x0801329e
 8010a20:	00000000 	.word	0x00000000
 8010a24:	080107d7 	.word	0x080107d7

08010a28 <_printf_common>:
 8010a28:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8010a2c:	4691      	mov	r9, r2
 8010a2e:	461f      	mov	r7, r3
 8010a30:	688a      	ldr	r2, [r1, #8]
 8010a32:	690b      	ldr	r3, [r1, #16]
 8010a34:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8010a38:	4293      	cmp	r3, r2
 8010a3a:	bfb8      	it	lt
 8010a3c:	4613      	movlt	r3, r2
 8010a3e:	f8c9 3000 	str.w	r3, [r9]
 8010a42:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8010a46:	4606      	mov	r6, r0
 8010a48:	460c      	mov	r4, r1
 8010a4a:	b112      	cbz	r2, 8010a52 <_printf_common+0x2a>
 8010a4c:	3301      	adds	r3, #1
 8010a4e:	f8c9 3000 	str.w	r3, [r9]
 8010a52:	6823      	ldr	r3, [r4, #0]
 8010a54:	0699      	lsls	r1, r3, #26
 8010a56:	bf42      	ittt	mi
 8010a58:	f8d9 3000 	ldrmi.w	r3, [r9]
 8010a5c:	3302      	addmi	r3, #2
 8010a5e:	f8c9 3000 	strmi.w	r3, [r9]
 8010a62:	6825      	ldr	r5, [r4, #0]
 8010a64:	f015 0506 	ands.w	r5, r5, #6
 8010a68:	d107      	bne.n	8010a7a <_printf_common+0x52>
 8010a6a:	f104 0a19 	add.w	sl, r4, #25
 8010a6e:	68e3      	ldr	r3, [r4, #12]
 8010a70:	f8d9 2000 	ldr.w	r2, [r9]
 8010a74:	1a9b      	subs	r3, r3, r2
 8010a76:	42ab      	cmp	r3, r5
 8010a78:	dc28      	bgt.n	8010acc <_printf_common+0xa4>
 8010a7a:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8010a7e:	6822      	ldr	r2, [r4, #0]
 8010a80:	3300      	adds	r3, #0
 8010a82:	bf18      	it	ne
 8010a84:	2301      	movne	r3, #1
 8010a86:	0692      	lsls	r2, r2, #26
 8010a88:	d42d      	bmi.n	8010ae6 <_printf_common+0xbe>
 8010a8a:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8010a8e:	4639      	mov	r1, r7
 8010a90:	4630      	mov	r0, r6
 8010a92:	47c0      	blx	r8
 8010a94:	3001      	adds	r0, #1
 8010a96:	d020      	beq.n	8010ada <_printf_common+0xb2>
 8010a98:	6823      	ldr	r3, [r4, #0]
 8010a9a:	68e5      	ldr	r5, [r4, #12]
 8010a9c:	f8d9 2000 	ldr.w	r2, [r9]
 8010aa0:	f003 0306 	and.w	r3, r3, #6
 8010aa4:	2b04      	cmp	r3, #4
 8010aa6:	bf08      	it	eq
 8010aa8:	1aad      	subeq	r5, r5, r2
 8010aaa:	68a3      	ldr	r3, [r4, #8]
 8010aac:	6922      	ldr	r2, [r4, #16]
 8010aae:	bf0c      	ite	eq
 8010ab0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8010ab4:	2500      	movne	r5, #0
 8010ab6:	4293      	cmp	r3, r2
 8010ab8:	bfc4      	itt	gt
 8010aba:	1a9b      	subgt	r3, r3, r2
 8010abc:	18ed      	addgt	r5, r5, r3
 8010abe:	f04f 0900 	mov.w	r9, #0
 8010ac2:	341a      	adds	r4, #26
 8010ac4:	454d      	cmp	r5, r9
 8010ac6:	d11a      	bne.n	8010afe <_printf_common+0xd6>
 8010ac8:	2000      	movs	r0, #0
 8010aca:	e008      	b.n	8010ade <_printf_common+0xb6>
 8010acc:	2301      	movs	r3, #1
 8010ace:	4652      	mov	r2, sl
 8010ad0:	4639      	mov	r1, r7
 8010ad2:	4630      	mov	r0, r6
 8010ad4:	47c0      	blx	r8
 8010ad6:	3001      	adds	r0, #1
 8010ad8:	d103      	bne.n	8010ae2 <_printf_common+0xba>
 8010ada:	f04f 30ff 	mov.w	r0, #4294967295
 8010ade:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8010ae2:	3501      	adds	r5, #1
 8010ae4:	e7c3      	b.n	8010a6e <_printf_common+0x46>
 8010ae6:	18e1      	adds	r1, r4, r3
 8010ae8:	1c5a      	adds	r2, r3, #1
 8010aea:	2030      	movs	r0, #48	; 0x30
 8010aec:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8010af0:	4422      	add	r2, r4
 8010af2:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8010af6:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8010afa:	3302      	adds	r3, #2
 8010afc:	e7c5      	b.n	8010a8a <_printf_common+0x62>
 8010afe:	2301      	movs	r3, #1
 8010b00:	4622      	mov	r2, r4
 8010b02:	4639      	mov	r1, r7
 8010b04:	4630      	mov	r0, r6
 8010b06:	47c0      	blx	r8
 8010b08:	3001      	adds	r0, #1
 8010b0a:	d0e6      	beq.n	8010ada <_printf_common+0xb2>
 8010b0c:	f109 0901 	add.w	r9, r9, #1
 8010b10:	e7d8      	b.n	8010ac4 <_printf_common+0x9c>
	...

08010b14 <_printf_i>:
 8010b14:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8010b18:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 8010b1c:	460c      	mov	r4, r1
 8010b1e:	7e09      	ldrb	r1, [r1, #24]
 8010b20:	b085      	sub	sp, #20
 8010b22:	296e      	cmp	r1, #110	; 0x6e
 8010b24:	4617      	mov	r7, r2
 8010b26:	4606      	mov	r6, r0
 8010b28:	4698      	mov	r8, r3
 8010b2a:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8010b2c:	f000 80b3 	beq.w	8010c96 <_printf_i+0x182>
 8010b30:	d822      	bhi.n	8010b78 <_printf_i+0x64>
 8010b32:	2963      	cmp	r1, #99	; 0x63
 8010b34:	d036      	beq.n	8010ba4 <_printf_i+0x90>
 8010b36:	d80a      	bhi.n	8010b4e <_printf_i+0x3a>
 8010b38:	2900      	cmp	r1, #0
 8010b3a:	f000 80b9 	beq.w	8010cb0 <_printf_i+0x19c>
 8010b3e:	2958      	cmp	r1, #88	; 0x58
 8010b40:	f000 8083 	beq.w	8010c4a <_printf_i+0x136>
 8010b44:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8010b48:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 8010b4c:	e032      	b.n	8010bb4 <_printf_i+0xa0>
 8010b4e:	2964      	cmp	r1, #100	; 0x64
 8010b50:	d001      	beq.n	8010b56 <_printf_i+0x42>
 8010b52:	2969      	cmp	r1, #105	; 0x69
 8010b54:	d1f6      	bne.n	8010b44 <_printf_i+0x30>
 8010b56:	6820      	ldr	r0, [r4, #0]
 8010b58:	6813      	ldr	r3, [r2, #0]
 8010b5a:	0605      	lsls	r5, r0, #24
 8010b5c:	f103 0104 	add.w	r1, r3, #4
 8010b60:	d52a      	bpl.n	8010bb8 <_printf_i+0xa4>
 8010b62:	681b      	ldr	r3, [r3, #0]
 8010b64:	6011      	str	r1, [r2, #0]
 8010b66:	2b00      	cmp	r3, #0
 8010b68:	da03      	bge.n	8010b72 <_printf_i+0x5e>
 8010b6a:	222d      	movs	r2, #45	; 0x2d
 8010b6c:	425b      	negs	r3, r3
 8010b6e:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 8010b72:	486f      	ldr	r0, [pc, #444]	; (8010d30 <_printf_i+0x21c>)
 8010b74:	220a      	movs	r2, #10
 8010b76:	e039      	b.n	8010bec <_printf_i+0xd8>
 8010b78:	2973      	cmp	r1, #115	; 0x73
 8010b7a:	f000 809d 	beq.w	8010cb8 <_printf_i+0x1a4>
 8010b7e:	d808      	bhi.n	8010b92 <_printf_i+0x7e>
 8010b80:	296f      	cmp	r1, #111	; 0x6f
 8010b82:	d020      	beq.n	8010bc6 <_printf_i+0xb2>
 8010b84:	2970      	cmp	r1, #112	; 0x70
 8010b86:	d1dd      	bne.n	8010b44 <_printf_i+0x30>
 8010b88:	6823      	ldr	r3, [r4, #0]
 8010b8a:	f043 0320 	orr.w	r3, r3, #32
 8010b8e:	6023      	str	r3, [r4, #0]
 8010b90:	e003      	b.n	8010b9a <_printf_i+0x86>
 8010b92:	2975      	cmp	r1, #117	; 0x75
 8010b94:	d017      	beq.n	8010bc6 <_printf_i+0xb2>
 8010b96:	2978      	cmp	r1, #120	; 0x78
 8010b98:	d1d4      	bne.n	8010b44 <_printf_i+0x30>
 8010b9a:	2378      	movs	r3, #120	; 0x78
 8010b9c:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8010ba0:	4864      	ldr	r0, [pc, #400]	; (8010d34 <_printf_i+0x220>)
 8010ba2:	e055      	b.n	8010c50 <_printf_i+0x13c>
 8010ba4:	6813      	ldr	r3, [r2, #0]
 8010ba6:	1d19      	adds	r1, r3, #4
 8010ba8:	681b      	ldr	r3, [r3, #0]
 8010baa:	6011      	str	r1, [r2, #0]
 8010bac:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8010bb0:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8010bb4:	2301      	movs	r3, #1
 8010bb6:	e08c      	b.n	8010cd2 <_printf_i+0x1be>
 8010bb8:	681b      	ldr	r3, [r3, #0]
 8010bba:	6011      	str	r1, [r2, #0]
 8010bbc:	f010 0f40 	tst.w	r0, #64	; 0x40
 8010bc0:	bf18      	it	ne
 8010bc2:	b21b      	sxthne	r3, r3
 8010bc4:	e7cf      	b.n	8010b66 <_printf_i+0x52>
 8010bc6:	6813      	ldr	r3, [r2, #0]
 8010bc8:	6825      	ldr	r5, [r4, #0]
 8010bca:	1d18      	adds	r0, r3, #4
 8010bcc:	6010      	str	r0, [r2, #0]
 8010bce:	0628      	lsls	r0, r5, #24
 8010bd0:	d501      	bpl.n	8010bd6 <_printf_i+0xc2>
 8010bd2:	681b      	ldr	r3, [r3, #0]
 8010bd4:	e002      	b.n	8010bdc <_printf_i+0xc8>
 8010bd6:	0668      	lsls	r0, r5, #25
 8010bd8:	d5fb      	bpl.n	8010bd2 <_printf_i+0xbe>
 8010bda:	881b      	ldrh	r3, [r3, #0]
 8010bdc:	4854      	ldr	r0, [pc, #336]	; (8010d30 <_printf_i+0x21c>)
 8010bde:	296f      	cmp	r1, #111	; 0x6f
 8010be0:	bf14      	ite	ne
 8010be2:	220a      	movne	r2, #10
 8010be4:	2208      	moveq	r2, #8
 8010be6:	2100      	movs	r1, #0
 8010be8:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8010bec:	6865      	ldr	r5, [r4, #4]
 8010bee:	60a5      	str	r5, [r4, #8]
 8010bf0:	2d00      	cmp	r5, #0
 8010bf2:	f2c0 8095 	blt.w	8010d20 <_printf_i+0x20c>
 8010bf6:	6821      	ldr	r1, [r4, #0]
 8010bf8:	f021 0104 	bic.w	r1, r1, #4
 8010bfc:	6021      	str	r1, [r4, #0]
 8010bfe:	2b00      	cmp	r3, #0
 8010c00:	d13d      	bne.n	8010c7e <_printf_i+0x16a>
 8010c02:	2d00      	cmp	r5, #0
 8010c04:	f040 808e 	bne.w	8010d24 <_printf_i+0x210>
 8010c08:	4665      	mov	r5, ip
 8010c0a:	2a08      	cmp	r2, #8
 8010c0c:	d10b      	bne.n	8010c26 <_printf_i+0x112>
 8010c0e:	6823      	ldr	r3, [r4, #0]
 8010c10:	07db      	lsls	r3, r3, #31
 8010c12:	d508      	bpl.n	8010c26 <_printf_i+0x112>
 8010c14:	6923      	ldr	r3, [r4, #16]
 8010c16:	6862      	ldr	r2, [r4, #4]
 8010c18:	429a      	cmp	r2, r3
 8010c1a:	bfde      	ittt	le
 8010c1c:	2330      	movle	r3, #48	; 0x30
 8010c1e:	f805 3c01 	strble.w	r3, [r5, #-1]
 8010c22:	f105 35ff 	addle.w	r5, r5, #4294967295
 8010c26:	ebac 0305 	sub.w	r3, ip, r5
 8010c2a:	6123      	str	r3, [r4, #16]
 8010c2c:	f8cd 8000 	str.w	r8, [sp]
 8010c30:	463b      	mov	r3, r7
 8010c32:	aa03      	add	r2, sp, #12
 8010c34:	4621      	mov	r1, r4
 8010c36:	4630      	mov	r0, r6
 8010c38:	f7ff fef6 	bl	8010a28 <_printf_common>
 8010c3c:	3001      	adds	r0, #1
 8010c3e:	d14d      	bne.n	8010cdc <_printf_i+0x1c8>
 8010c40:	f04f 30ff 	mov.w	r0, #4294967295
 8010c44:	b005      	add	sp, #20
 8010c46:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8010c4a:	4839      	ldr	r0, [pc, #228]	; (8010d30 <_printf_i+0x21c>)
 8010c4c:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 8010c50:	6813      	ldr	r3, [r2, #0]
 8010c52:	6821      	ldr	r1, [r4, #0]
 8010c54:	1d1d      	adds	r5, r3, #4
 8010c56:	681b      	ldr	r3, [r3, #0]
 8010c58:	6015      	str	r5, [r2, #0]
 8010c5a:	060a      	lsls	r2, r1, #24
 8010c5c:	d50b      	bpl.n	8010c76 <_printf_i+0x162>
 8010c5e:	07ca      	lsls	r2, r1, #31
 8010c60:	bf44      	itt	mi
 8010c62:	f041 0120 	orrmi.w	r1, r1, #32
 8010c66:	6021      	strmi	r1, [r4, #0]
 8010c68:	b91b      	cbnz	r3, 8010c72 <_printf_i+0x15e>
 8010c6a:	6822      	ldr	r2, [r4, #0]
 8010c6c:	f022 0220 	bic.w	r2, r2, #32
 8010c70:	6022      	str	r2, [r4, #0]
 8010c72:	2210      	movs	r2, #16
 8010c74:	e7b7      	b.n	8010be6 <_printf_i+0xd2>
 8010c76:	064d      	lsls	r5, r1, #25
 8010c78:	bf48      	it	mi
 8010c7a:	b29b      	uxthmi	r3, r3
 8010c7c:	e7ef      	b.n	8010c5e <_printf_i+0x14a>
 8010c7e:	4665      	mov	r5, ip
 8010c80:	fbb3 f1f2 	udiv	r1, r3, r2
 8010c84:	fb02 3311 	mls	r3, r2, r1, r3
 8010c88:	5cc3      	ldrb	r3, [r0, r3]
 8010c8a:	f805 3d01 	strb.w	r3, [r5, #-1]!
 8010c8e:	460b      	mov	r3, r1
 8010c90:	2900      	cmp	r1, #0
 8010c92:	d1f5      	bne.n	8010c80 <_printf_i+0x16c>
 8010c94:	e7b9      	b.n	8010c0a <_printf_i+0xf6>
 8010c96:	6813      	ldr	r3, [r2, #0]
 8010c98:	6825      	ldr	r5, [r4, #0]
 8010c9a:	6961      	ldr	r1, [r4, #20]
 8010c9c:	1d18      	adds	r0, r3, #4
 8010c9e:	6010      	str	r0, [r2, #0]
 8010ca0:	0628      	lsls	r0, r5, #24
 8010ca2:	681b      	ldr	r3, [r3, #0]
 8010ca4:	d501      	bpl.n	8010caa <_printf_i+0x196>
 8010ca6:	6019      	str	r1, [r3, #0]
 8010ca8:	e002      	b.n	8010cb0 <_printf_i+0x19c>
 8010caa:	066a      	lsls	r2, r5, #25
 8010cac:	d5fb      	bpl.n	8010ca6 <_printf_i+0x192>
 8010cae:	8019      	strh	r1, [r3, #0]
 8010cb0:	2300      	movs	r3, #0
 8010cb2:	6123      	str	r3, [r4, #16]
 8010cb4:	4665      	mov	r5, ip
 8010cb6:	e7b9      	b.n	8010c2c <_printf_i+0x118>
 8010cb8:	6813      	ldr	r3, [r2, #0]
 8010cba:	1d19      	adds	r1, r3, #4
 8010cbc:	6011      	str	r1, [r2, #0]
 8010cbe:	681d      	ldr	r5, [r3, #0]
 8010cc0:	6862      	ldr	r2, [r4, #4]
 8010cc2:	2100      	movs	r1, #0
 8010cc4:	4628      	mov	r0, r5
 8010cc6:	f7ef fb0b 	bl	80002e0 <memchr>
 8010cca:	b108      	cbz	r0, 8010cd0 <_printf_i+0x1bc>
 8010ccc:	1b40      	subs	r0, r0, r5
 8010cce:	6060      	str	r0, [r4, #4]
 8010cd0:	6863      	ldr	r3, [r4, #4]
 8010cd2:	6123      	str	r3, [r4, #16]
 8010cd4:	2300      	movs	r3, #0
 8010cd6:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8010cda:	e7a7      	b.n	8010c2c <_printf_i+0x118>
 8010cdc:	6923      	ldr	r3, [r4, #16]
 8010cde:	462a      	mov	r2, r5
 8010ce0:	4639      	mov	r1, r7
 8010ce2:	4630      	mov	r0, r6
 8010ce4:	47c0      	blx	r8
 8010ce6:	3001      	adds	r0, #1
 8010ce8:	d0aa      	beq.n	8010c40 <_printf_i+0x12c>
 8010cea:	6823      	ldr	r3, [r4, #0]
 8010cec:	079b      	lsls	r3, r3, #30
 8010cee:	d413      	bmi.n	8010d18 <_printf_i+0x204>
 8010cf0:	68e0      	ldr	r0, [r4, #12]
 8010cf2:	9b03      	ldr	r3, [sp, #12]
 8010cf4:	4298      	cmp	r0, r3
 8010cf6:	bfb8      	it	lt
 8010cf8:	4618      	movlt	r0, r3
 8010cfa:	e7a3      	b.n	8010c44 <_printf_i+0x130>
 8010cfc:	2301      	movs	r3, #1
 8010cfe:	464a      	mov	r2, r9
 8010d00:	4639      	mov	r1, r7
 8010d02:	4630      	mov	r0, r6
 8010d04:	47c0      	blx	r8
 8010d06:	3001      	adds	r0, #1
 8010d08:	d09a      	beq.n	8010c40 <_printf_i+0x12c>
 8010d0a:	3501      	adds	r5, #1
 8010d0c:	68e3      	ldr	r3, [r4, #12]
 8010d0e:	9a03      	ldr	r2, [sp, #12]
 8010d10:	1a9b      	subs	r3, r3, r2
 8010d12:	42ab      	cmp	r3, r5
 8010d14:	dcf2      	bgt.n	8010cfc <_printf_i+0x1e8>
 8010d16:	e7eb      	b.n	8010cf0 <_printf_i+0x1dc>
 8010d18:	2500      	movs	r5, #0
 8010d1a:	f104 0919 	add.w	r9, r4, #25
 8010d1e:	e7f5      	b.n	8010d0c <_printf_i+0x1f8>
 8010d20:	2b00      	cmp	r3, #0
 8010d22:	d1ac      	bne.n	8010c7e <_printf_i+0x16a>
 8010d24:	7803      	ldrb	r3, [r0, #0]
 8010d26:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8010d2a:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8010d2e:	e76c      	b.n	8010c0a <_printf_i+0xf6>
 8010d30:	080132a5 	.word	0x080132a5
 8010d34:	080132b6 	.word	0x080132b6

08010d38 <_sbrk_r>:
 8010d38:	b538      	push	{r3, r4, r5, lr}
 8010d3a:	4c06      	ldr	r4, [pc, #24]	; (8010d54 <_sbrk_r+0x1c>)
 8010d3c:	2300      	movs	r3, #0
 8010d3e:	4605      	mov	r5, r0
 8010d40:	4608      	mov	r0, r1
 8010d42:	6023      	str	r3, [r4, #0]
 8010d44:	f7ff fae4 	bl	8010310 <_sbrk>
 8010d48:	1c43      	adds	r3, r0, #1
 8010d4a:	d102      	bne.n	8010d52 <_sbrk_r+0x1a>
 8010d4c:	6823      	ldr	r3, [r4, #0]
 8010d4e:	b103      	cbz	r3, 8010d52 <_sbrk_r+0x1a>
 8010d50:	602b      	str	r3, [r5, #0]
 8010d52:	bd38      	pop	{r3, r4, r5, pc}
 8010d54:	2400acf4 	.word	0x2400acf4

08010d58 <__sread>:
 8010d58:	b510      	push	{r4, lr}
 8010d5a:	460c      	mov	r4, r1
 8010d5c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8010d60:	f000 fa96 	bl	8011290 <_read_r>
 8010d64:	2800      	cmp	r0, #0
 8010d66:	bfab      	itete	ge
 8010d68:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8010d6a:	89a3      	ldrhlt	r3, [r4, #12]
 8010d6c:	181b      	addge	r3, r3, r0
 8010d6e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8010d72:	bfac      	ite	ge
 8010d74:	6563      	strge	r3, [r4, #84]	; 0x54
 8010d76:	81a3      	strhlt	r3, [r4, #12]
 8010d78:	bd10      	pop	{r4, pc}

08010d7a <__swrite>:
 8010d7a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010d7e:	461f      	mov	r7, r3
 8010d80:	898b      	ldrh	r3, [r1, #12]
 8010d82:	05db      	lsls	r3, r3, #23
 8010d84:	4605      	mov	r5, r0
 8010d86:	460c      	mov	r4, r1
 8010d88:	4616      	mov	r6, r2
 8010d8a:	d505      	bpl.n	8010d98 <__swrite+0x1e>
 8010d8c:	2302      	movs	r3, #2
 8010d8e:	2200      	movs	r2, #0
 8010d90:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8010d94:	f000 f9b6 	bl	8011104 <_lseek_r>
 8010d98:	89a3      	ldrh	r3, [r4, #12]
 8010d9a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8010d9e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8010da2:	81a3      	strh	r3, [r4, #12]
 8010da4:	4632      	mov	r2, r6
 8010da6:	463b      	mov	r3, r7
 8010da8:	4628      	mov	r0, r5
 8010daa:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8010dae:	f000 b869 	b.w	8010e84 <_write_r>

08010db2 <__sseek>:
 8010db2:	b510      	push	{r4, lr}
 8010db4:	460c      	mov	r4, r1
 8010db6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8010dba:	f000 f9a3 	bl	8011104 <_lseek_r>
 8010dbe:	1c43      	adds	r3, r0, #1
 8010dc0:	89a3      	ldrh	r3, [r4, #12]
 8010dc2:	bf15      	itete	ne
 8010dc4:	6560      	strne	r0, [r4, #84]	; 0x54
 8010dc6:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8010dca:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8010dce:	81a3      	strheq	r3, [r4, #12]
 8010dd0:	bf18      	it	ne
 8010dd2:	81a3      	strhne	r3, [r4, #12]
 8010dd4:	bd10      	pop	{r4, pc}

08010dd6 <__sclose>:
 8010dd6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8010dda:	f000 b8d3 	b.w	8010f84 <_close_r>
	...

08010de0 <__swbuf_r>:
 8010de0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010de2:	460e      	mov	r6, r1
 8010de4:	4614      	mov	r4, r2
 8010de6:	4605      	mov	r5, r0
 8010de8:	b118      	cbz	r0, 8010df2 <__swbuf_r+0x12>
 8010dea:	6983      	ldr	r3, [r0, #24]
 8010dec:	b90b      	cbnz	r3, 8010df2 <__swbuf_r+0x12>
 8010dee:	f7ff fbf7 	bl	80105e0 <__sinit>
 8010df2:	4b21      	ldr	r3, [pc, #132]	; (8010e78 <__swbuf_r+0x98>)
 8010df4:	429c      	cmp	r4, r3
 8010df6:	d12a      	bne.n	8010e4e <__swbuf_r+0x6e>
 8010df8:	686c      	ldr	r4, [r5, #4]
 8010dfa:	69a3      	ldr	r3, [r4, #24]
 8010dfc:	60a3      	str	r3, [r4, #8]
 8010dfe:	89a3      	ldrh	r3, [r4, #12]
 8010e00:	071a      	lsls	r2, r3, #28
 8010e02:	d52e      	bpl.n	8010e62 <__swbuf_r+0x82>
 8010e04:	6923      	ldr	r3, [r4, #16]
 8010e06:	b363      	cbz	r3, 8010e62 <__swbuf_r+0x82>
 8010e08:	6923      	ldr	r3, [r4, #16]
 8010e0a:	6820      	ldr	r0, [r4, #0]
 8010e0c:	1ac0      	subs	r0, r0, r3
 8010e0e:	6963      	ldr	r3, [r4, #20]
 8010e10:	b2f6      	uxtb	r6, r6
 8010e12:	4283      	cmp	r3, r0
 8010e14:	4637      	mov	r7, r6
 8010e16:	dc04      	bgt.n	8010e22 <__swbuf_r+0x42>
 8010e18:	4621      	mov	r1, r4
 8010e1a:	4628      	mov	r0, r5
 8010e1c:	f000 f948 	bl	80110b0 <_fflush_r>
 8010e20:	bb28      	cbnz	r0, 8010e6e <__swbuf_r+0x8e>
 8010e22:	68a3      	ldr	r3, [r4, #8]
 8010e24:	3b01      	subs	r3, #1
 8010e26:	60a3      	str	r3, [r4, #8]
 8010e28:	6823      	ldr	r3, [r4, #0]
 8010e2a:	1c5a      	adds	r2, r3, #1
 8010e2c:	6022      	str	r2, [r4, #0]
 8010e2e:	701e      	strb	r6, [r3, #0]
 8010e30:	6963      	ldr	r3, [r4, #20]
 8010e32:	3001      	adds	r0, #1
 8010e34:	4283      	cmp	r3, r0
 8010e36:	d004      	beq.n	8010e42 <__swbuf_r+0x62>
 8010e38:	89a3      	ldrh	r3, [r4, #12]
 8010e3a:	07db      	lsls	r3, r3, #31
 8010e3c:	d519      	bpl.n	8010e72 <__swbuf_r+0x92>
 8010e3e:	2e0a      	cmp	r6, #10
 8010e40:	d117      	bne.n	8010e72 <__swbuf_r+0x92>
 8010e42:	4621      	mov	r1, r4
 8010e44:	4628      	mov	r0, r5
 8010e46:	f000 f933 	bl	80110b0 <_fflush_r>
 8010e4a:	b190      	cbz	r0, 8010e72 <__swbuf_r+0x92>
 8010e4c:	e00f      	b.n	8010e6e <__swbuf_r+0x8e>
 8010e4e:	4b0b      	ldr	r3, [pc, #44]	; (8010e7c <__swbuf_r+0x9c>)
 8010e50:	429c      	cmp	r4, r3
 8010e52:	d101      	bne.n	8010e58 <__swbuf_r+0x78>
 8010e54:	68ac      	ldr	r4, [r5, #8]
 8010e56:	e7d0      	b.n	8010dfa <__swbuf_r+0x1a>
 8010e58:	4b09      	ldr	r3, [pc, #36]	; (8010e80 <__swbuf_r+0xa0>)
 8010e5a:	429c      	cmp	r4, r3
 8010e5c:	bf08      	it	eq
 8010e5e:	68ec      	ldreq	r4, [r5, #12]
 8010e60:	e7cb      	b.n	8010dfa <__swbuf_r+0x1a>
 8010e62:	4621      	mov	r1, r4
 8010e64:	4628      	mov	r0, r5
 8010e66:	f000 f81f 	bl	8010ea8 <__swsetup_r>
 8010e6a:	2800      	cmp	r0, #0
 8010e6c:	d0cc      	beq.n	8010e08 <__swbuf_r+0x28>
 8010e6e:	f04f 37ff 	mov.w	r7, #4294967295
 8010e72:	4638      	mov	r0, r7
 8010e74:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8010e76:	bf00      	nop
 8010e78:	08013254 	.word	0x08013254
 8010e7c:	08013274 	.word	0x08013274
 8010e80:	08013234 	.word	0x08013234

08010e84 <_write_r>:
 8010e84:	b538      	push	{r3, r4, r5, lr}
 8010e86:	4c07      	ldr	r4, [pc, #28]	; (8010ea4 <_write_r+0x20>)
 8010e88:	4605      	mov	r5, r0
 8010e8a:	4608      	mov	r0, r1
 8010e8c:	4611      	mov	r1, r2
 8010e8e:	2200      	movs	r2, #0
 8010e90:	6022      	str	r2, [r4, #0]
 8010e92:	461a      	mov	r2, r3
 8010e94:	f7ff f9eb 	bl	801026e <_write>
 8010e98:	1c43      	adds	r3, r0, #1
 8010e9a:	d102      	bne.n	8010ea2 <_write_r+0x1e>
 8010e9c:	6823      	ldr	r3, [r4, #0]
 8010e9e:	b103      	cbz	r3, 8010ea2 <_write_r+0x1e>
 8010ea0:	602b      	str	r3, [r5, #0]
 8010ea2:	bd38      	pop	{r3, r4, r5, pc}
 8010ea4:	2400acf4 	.word	0x2400acf4

08010ea8 <__swsetup_r>:
 8010ea8:	4b32      	ldr	r3, [pc, #200]	; (8010f74 <__swsetup_r+0xcc>)
 8010eaa:	b570      	push	{r4, r5, r6, lr}
 8010eac:	681d      	ldr	r5, [r3, #0]
 8010eae:	4606      	mov	r6, r0
 8010eb0:	460c      	mov	r4, r1
 8010eb2:	b125      	cbz	r5, 8010ebe <__swsetup_r+0x16>
 8010eb4:	69ab      	ldr	r3, [r5, #24]
 8010eb6:	b913      	cbnz	r3, 8010ebe <__swsetup_r+0x16>
 8010eb8:	4628      	mov	r0, r5
 8010eba:	f7ff fb91 	bl	80105e0 <__sinit>
 8010ebe:	4b2e      	ldr	r3, [pc, #184]	; (8010f78 <__swsetup_r+0xd0>)
 8010ec0:	429c      	cmp	r4, r3
 8010ec2:	d10f      	bne.n	8010ee4 <__swsetup_r+0x3c>
 8010ec4:	686c      	ldr	r4, [r5, #4]
 8010ec6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8010eca:	b29a      	uxth	r2, r3
 8010ecc:	0715      	lsls	r5, r2, #28
 8010ece:	d42c      	bmi.n	8010f2a <__swsetup_r+0x82>
 8010ed0:	06d0      	lsls	r0, r2, #27
 8010ed2:	d411      	bmi.n	8010ef8 <__swsetup_r+0x50>
 8010ed4:	2209      	movs	r2, #9
 8010ed6:	6032      	str	r2, [r6, #0]
 8010ed8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8010edc:	81a3      	strh	r3, [r4, #12]
 8010ede:	f04f 30ff 	mov.w	r0, #4294967295
 8010ee2:	e03e      	b.n	8010f62 <__swsetup_r+0xba>
 8010ee4:	4b25      	ldr	r3, [pc, #148]	; (8010f7c <__swsetup_r+0xd4>)
 8010ee6:	429c      	cmp	r4, r3
 8010ee8:	d101      	bne.n	8010eee <__swsetup_r+0x46>
 8010eea:	68ac      	ldr	r4, [r5, #8]
 8010eec:	e7eb      	b.n	8010ec6 <__swsetup_r+0x1e>
 8010eee:	4b24      	ldr	r3, [pc, #144]	; (8010f80 <__swsetup_r+0xd8>)
 8010ef0:	429c      	cmp	r4, r3
 8010ef2:	bf08      	it	eq
 8010ef4:	68ec      	ldreq	r4, [r5, #12]
 8010ef6:	e7e6      	b.n	8010ec6 <__swsetup_r+0x1e>
 8010ef8:	0751      	lsls	r1, r2, #29
 8010efa:	d512      	bpl.n	8010f22 <__swsetup_r+0x7a>
 8010efc:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8010efe:	b141      	cbz	r1, 8010f12 <__swsetup_r+0x6a>
 8010f00:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8010f04:	4299      	cmp	r1, r3
 8010f06:	d002      	beq.n	8010f0e <__swsetup_r+0x66>
 8010f08:	4630      	mov	r0, r6
 8010f0a:	f000 f973 	bl	80111f4 <_free_r>
 8010f0e:	2300      	movs	r3, #0
 8010f10:	6363      	str	r3, [r4, #52]	; 0x34
 8010f12:	89a3      	ldrh	r3, [r4, #12]
 8010f14:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8010f18:	81a3      	strh	r3, [r4, #12]
 8010f1a:	2300      	movs	r3, #0
 8010f1c:	6063      	str	r3, [r4, #4]
 8010f1e:	6923      	ldr	r3, [r4, #16]
 8010f20:	6023      	str	r3, [r4, #0]
 8010f22:	89a3      	ldrh	r3, [r4, #12]
 8010f24:	f043 0308 	orr.w	r3, r3, #8
 8010f28:	81a3      	strh	r3, [r4, #12]
 8010f2a:	6923      	ldr	r3, [r4, #16]
 8010f2c:	b94b      	cbnz	r3, 8010f42 <__swsetup_r+0x9a>
 8010f2e:	89a3      	ldrh	r3, [r4, #12]
 8010f30:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8010f34:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8010f38:	d003      	beq.n	8010f42 <__swsetup_r+0x9a>
 8010f3a:	4621      	mov	r1, r4
 8010f3c:	4630      	mov	r0, r6
 8010f3e:	f000 f917 	bl	8011170 <__smakebuf_r>
 8010f42:	89a2      	ldrh	r2, [r4, #12]
 8010f44:	f012 0301 	ands.w	r3, r2, #1
 8010f48:	d00c      	beq.n	8010f64 <__swsetup_r+0xbc>
 8010f4a:	2300      	movs	r3, #0
 8010f4c:	60a3      	str	r3, [r4, #8]
 8010f4e:	6963      	ldr	r3, [r4, #20]
 8010f50:	425b      	negs	r3, r3
 8010f52:	61a3      	str	r3, [r4, #24]
 8010f54:	6923      	ldr	r3, [r4, #16]
 8010f56:	b953      	cbnz	r3, 8010f6e <__swsetup_r+0xc6>
 8010f58:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8010f5c:	f013 0080 	ands.w	r0, r3, #128	; 0x80
 8010f60:	d1ba      	bne.n	8010ed8 <__swsetup_r+0x30>
 8010f62:	bd70      	pop	{r4, r5, r6, pc}
 8010f64:	0792      	lsls	r2, r2, #30
 8010f66:	bf58      	it	pl
 8010f68:	6963      	ldrpl	r3, [r4, #20]
 8010f6a:	60a3      	str	r3, [r4, #8]
 8010f6c:	e7f2      	b.n	8010f54 <__swsetup_r+0xac>
 8010f6e:	2000      	movs	r0, #0
 8010f70:	e7f7      	b.n	8010f62 <__swsetup_r+0xba>
 8010f72:	bf00      	nop
 8010f74:	2400002c 	.word	0x2400002c
 8010f78:	08013254 	.word	0x08013254
 8010f7c:	08013274 	.word	0x08013274
 8010f80:	08013234 	.word	0x08013234

08010f84 <_close_r>:
 8010f84:	b538      	push	{r3, r4, r5, lr}
 8010f86:	4c06      	ldr	r4, [pc, #24]	; (8010fa0 <_close_r+0x1c>)
 8010f88:	2300      	movs	r3, #0
 8010f8a:	4605      	mov	r5, r0
 8010f8c:	4608      	mov	r0, r1
 8010f8e:	6023      	str	r3, [r4, #0]
 8010f90:	f7ff f989 	bl	80102a6 <_close>
 8010f94:	1c43      	adds	r3, r0, #1
 8010f96:	d102      	bne.n	8010f9e <_close_r+0x1a>
 8010f98:	6823      	ldr	r3, [r4, #0]
 8010f9a:	b103      	cbz	r3, 8010f9e <_close_r+0x1a>
 8010f9c:	602b      	str	r3, [r5, #0]
 8010f9e:	bd38      	pop	{r3, r4, r5, pc}
 8010fa0:	2400acf4 	.word	0x2400acf4

08010fa4 <__sflush_r>:
 8010fa4:	898a      	ldrh	r2, [r1, #12]
 8010fa6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010faa:	4605      	mov	r5, r0
 8010fac:	0710      	lsls	r0, r2, #28
 8010fae:	460c      	mov	r4, r1
 8010fb0:	d458      	bmi.n	8011064 <__sflush_r+0xc0>
 8010fb2:	684b      	ldr	r3, [r1, #4]
 8010fb4:	2b00      	cmp	r3, #0
 8010fb6:	dc05      	bgt.n	8010fc4 <__sflush_r+0x20>
 8010fb8:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8010fba:	2b00      	cmp	r3, #0
 8010fbc:	dc02      	bgt.n	8010fc4 <__sflush_r+0x20>
 8010fbe:	2000      	movs	r0, #0
 8010fc0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010fc4:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8010fc6:	2e00      	cmp	r6, #0
 8010fc8:	d0f9      	beq.n	8010fbe <__sflush_r+0x1a>
 8010fca:	2300      	movs	r3, #0
 8010fcc:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8010fd0:	682f      	ldr	r7, [r5, #0]
 8010fd2:	6a21      	ldr	r1, [r4, #32]
 8010fd4:	602b      	str	r3, [r5, #0]
 8010fd6:	d032      	beq.n	801103e <__sflush_r+0x9a>
 8010fd8:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8010fda:	89a3      	ldrh	r3, [r4, #12]
 8010fdc:	075a      	lsls	r2, r3, #29
 8010fde:	d505      	bpl.n	8010fec <__sflush_r+0x48>
 8010fe0:	6863      	ldr	r3, [r4, #4]
 8010fe2:	1ac0      	subs	r0, r0, r3
 8010fe4:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8010fe6:	b10b      	cbz	r3, 8010fec <__sflush_r+0x48>
 8010fe8:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8010fea:	1ac0      	subs	r0, r0, r3
 8010fec:	2300      	movs	r3, #0
 8010fee:	4602      	mov	r2, r0
 8010ff0:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8010ff2:	6a21      	ldr	r1, [r4, #32]
 8010ff4:	4628      	mov	r0, r5
 8010ff6:	47b0      	blx	r6
 8010ff8:	1c43      	adds	r3, r0, #1
 8010ffa:	89a3      	ldrh	r3, [r4, #12]
 8010ffc:	d106      	bne.n	801100c <__sflush_r+0x68>
 8010ffe:	6829      	ldr	r1, [r5, #0]
 8011000:	291d      	cmp	r1, #29
 8011002:	d848      	bhi.n	8011096 <__sflush_r+0xf2>
 8011004:	4a29      	ldr	r2, [pc, #164]	; (80110ac <__sflush_r+0x108>)
 8011006:	40ca      	lsrs	r2, r1
 8011008:	07d6      	lsls	r6, r2, #31
 801100a:	d544      	bpl.n	8011096 <__sflush_r+0xf2>
 801100c:	2200      	movs	r2, #0
 801100e:	6062      	str	r2, [r4, #4]
 8011010:	04d9      	lsls	r1, r3, #19
 8011012:	6922      	ldr	r2, [r4, #16]
 8011014:	6022      	str	r2, [r4, #0]
 8011016:	d504      	bpl.n	8011022 <__sflush_r+0x7e>
 8011018:	1c42      	adds	r2, r0, #1
 801101a:	d101      	bne.n	8011020 <__sflush_r+0x7c>
 801101c:	682b      	ldr	r3, [r5, #0]
 801101e:	b903      	cbnz	r3, 8011022 <__sflush_r+0x7e>
 8011020:	6560      	str	r0, [r4, #84]	; 0x54
 8011022:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8011024:	602f      	str	r7, [r5, #0]
 8011026:	2900      	cmp	r1, #0
 8011028:	d0c9      	beq.n	8010fbe <__sflush_r+0x1a>
 801102a:	f104 0344 	add.w	r3, r4, #68	; 0x44
 801102e:	4299      	cmp	r1, r3
 8011030:	d002      	beq.n	8011038 <__sflush_r+0x94>
 8011032:	4628      	mov	r0, r5
 8011034:	f000 f8de 	bl	80111f4 <_free_r>
 8011038:	2000      	movs	r0, #0
 801103a:	6360      	str	r0, [r4, #52]	; 0x34
 801103c:	e7c0      	b.n	8010fc0 <__sflush_r+0x1c>
 801103e:	2301      	movs	r3, #1
 8011040:	4628      	mov	r0, r5
 8011042:	47b0      	blx	r6
 8011044:	1c41      	adds	r1, r0, #1
 8011046:	d1c8      	bne.n	8010fda <__sflush_r+0x36>
 8011048:	682b      	ldr	r3, [r5, #0]
 801104a:	2b00      	cmp	r3, #0
 801104c:	d0c5      	beq.n	8010fda <__sflush_r+0x36>
 801104e:	2b1d      	cmp	r3, #29
 8011050:	d001      	beq.n	8011056 <__sflush_r+0xb2>
 8011052:	2b16      	cmp	r3, #22
 8011054:	d101      	bne.n	801105a <__sflush_r+0xb6>
 8011056:	602f      	str	r7, [r5, #0]
 8011058:	e7b1      	b.n	8010fbe <__sflush_r+0x1a>
 801105a:	89a3      	ldrh	r3, [r4, #12]
 801105c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8011060:	81a3      	strh	r3, [r4, #12]
 8011062:	e7ad      	b.n	8010fc0 <__sflush_r+0x1c>
 8011064:	690f      	ldr	r7, [r1, #16]
 8011066:	2f00      	cmp	r7, #0
 8011068:	d0a9      	beq.n	8010fbe <__sflush_r+0x1a>
 801106a:	0793      	lsls	r3, r2, #30
 801106c:	680e      	ldr	r6, [r1, #0]
 801106e:	bf08      	it	eq
 8011070:	694b      	ldreq	r3, [r1, #20]
 8011072:	600f      	str	r7, [r1, #0]
 8011074:	bf18      	it	ne
 8011076:	2300      	movne	r3, #0
 8011078:	eba6 0807 	sub.w	r8, r6, r7
 801107c:	608b      	str	r3, [r1, #8]
 801107e:	f1b8 0f00 	cmp.w	r8, #0
 8011082:	dd9c      	ble.n	8010fbe <__sflush_r+0x1a>
 8011084:	4643      	mov	r3, r8
 8011086:	463a      	mov	r2, r7
 8011088:	6a21      	ldr	r1, [r4, #32]
 801108a:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 801108c:	4628      	mov	r0, r5
 801108e:	47b0      	blx	r6
 8011090:	2800      	cmp	r0, #0
 8011092:	dc06      	bgt.n	80110a2 <__sflush_r+0xfe>
 8011094:	89a3      	ldrh	r3, [r4, #12]
 8011096:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801109a:	81a3      	strh	r3, [r4, #12]
 801109c:	f04f 30ff 	mov.w	r0, #4294967295
 80110a0:	e78e      	b.n	8010fc0 <__sflush_r+0x1c>
 80110a2:	4407      	add	r7, r0
 80110a4:	eba8 0800 	sub.w	r8, r8, r0
 80110a8:	e7e9      	b.n	801107e <__sflush_r+0xda>
 80110aa:	bf00      	nop
 80110ac:	20400001 	.word	0x20400001

080110b0 <_fflush_r>:
 80110b0:	b538      	push	{r3, r4, r5, lr}
 80110b2:	690b      	ldr	r3, [r1, #16]
 80110b4:	4605      	mov	r5, r0
 80110b6:	460c      	mov	r4, r1
 80110b8:	b1db      	cbz	r3, 80110f2 <_fflush_r+0x42>
 80110ba:	b118      	cbz	r0, 80110c4 <_fflush_r+0x14>
 80110bc:	6983      	ldr	r3, [r0, #24]
 80110be:	b90b      	cbnz	r3, 80110c4 <_fflush_r+0x14>
 80110c0:	f7ff fa8e 	bl	80105e0 <__sinit>
 80110c4:	4b0c      	ldr	r3, [pc, #48]	; (80110f8 <_fflush_r+0x48>)
 80110c6:	429c      	cmp	r4, r3
 80110c8:	d109      	bne.n	80110de <_fflush_r+0x2e>
 80110ca:	686c      	ldr	r4, [r5, #4]
 80110cc:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80110d0:	b17b      	cbz	r3, 80110f2 <_fflush_r+0x42>
 80110d2:	4621      	mov	r1, r4
 80110d4:	4628      	mov	r0, r5
 80110d6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80110da:	f7ff bf63 	b.w	8010fa4 <__sflush_r>
 80110de:	4b07      	ldr	r3, [pc, #28]	; (80110fc <_fflush_r+0x4c>)
 80110e0:	429c      	cmp	r4, r3
 80110e2:	d101      	bne.n	80110e8 <_fflush_r+0x38>
 80110e4:	68ac      	ldr	r4, [r5, #8]
 80110e6:	e7f1      	b.n	80110cc <_fflush_r+0x1c>
 80110e8:	4b05      	ldr	r3, [pc, #20]	; (8011100 <_fflush_r+0x50>)
 80110ea:	429c      	cmp	r4, r3
 80110ec:	bf08      	it	eq
 80110ee:	68ec      	ldreq	r4, [r5, #12]
 80110f0:	e7ec      	b.n	80110cc <_fflush_r+0x1c>
 80110f2:	2000      	movs	r0, #0
 80110f4:	bd38      	pop	{r3, r4, r5, pc}
 80110f6:	bf00      	nop
 80110f8:	08013254 	.word	0x08013254
 80110fc:	08013274 	.word	0x08013274
 8011100:	08013234 	.word	0x08013234

08011104 <_lseek_r>:
 8011104:	b538      	push	{r3, r4, r5, lr}
 8011106:	4c07      	ldr	r4, [pc, #28]	; (8011124 <_lseek_r+0x20>)
 8011108:	4605      	mov	r5, r0
 801110a:	4608      	mov	r0, r1
 801110c:	4611      	mov	r1, r2
 801110e:	2200      	movs	r2, #0
 8011110:	6022      	str	r2, [r4, #0]
 8011112:	461a      	mov	r2, r3
 8011114:	f7ff f8ee 	bl	80102f4 <_lseek>
 8011118:	1c43      	adds	r3, r0, #1
 801111a:	d102      	bne.n	8011122 <_lseek_r+0x1e>
 801111c:	6823      	ldr	r3, [r4, #0]
 801111e:	b103      	cbz	r3, 8011122 <_lseek_r+0x1e>
 8011120:	602b      	str	r3, [r5, #0]
 8011122:	bd38      	pop	{r3, r4, r5, pc}
 8011124:	2400acf4 	.word	0x2400acf4

08011128 <__swhatbuf_r>:
 8011128:	b570      	push	{r4, r5, r6, lr}
 801112a:	460e      	mov	r6, r1
 801112c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8011130:	2900      	cmp	r1, #0
 8011132:	b096      	sub	sp, #88	; 0x58
 8011134:	4614      	mov	r4, r2
 8011136:	461d      	mov	r5, r3
 8011138:	da07      	bge.n	801114a <__swhatbuf_r+0x22>
 801113a:	2300      	movs	r3, #0
 801113c:	602b      	str	r3, [r5, #0]
 801113e:	89b3      	ldrh	r3, [r6, #12]
 8011140:	061a      	lsls	r2, r3, #24
 8011142:	d410      	bmi.n	8011166 <__swhatbuf_r+0x3e>
 8011144:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8011148:	e00e      	b.n	8011168 <__swhatbuf_r+0x40>
 801114a:	466a      	mov	r2, sp
 801114c:	f000 f8b2 	bl	80112b4 <_fstat_r>
 8011150:	2800      	cmp	r0, #0
 8011152:	dbf2      	blt.n	801113a <__swhatbuf_r+0x12>
 8011154:	9a01      	ldr	r2, [sp, #4]
 8011156:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 801115a:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 801115e:	425a      	negs	r2, r3
 8011160:	415a      	adcs	r2, r3
 8011162:	602a      	str	r2, [r5, #0]
 8011164:	e7ee      	b.n	8011144 <__swhatbuf_r+0x1c>
 8011166:	2340      	movs	r3, #64	; 0x40
 8011168:	2000      	movs	r0, #0
 801116a:	6023      	str	r3, [r4, #0]
 801116c:	b016      	add	sp, #88	; 0x58
 801116e:	bd70      	pop	{r4, r5, r6, pc}

08011170 <__smakebuf_r>:
 8011170:	898b      	ldrh	r3, [r1, #12]
 8011172:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8011174:	079d      	lsls	r5, r3, #30
 8011176:	4606      	mov	r6, r0
 8011178:	460c      	mov	r4, r1
 801117a:	d507      	bpl.n	801118c <__smakebuf_r+0x1c>
 801117c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8011180:	6023      	str	r3, [r4, #0]
 8011182:	6123      	str	r3, [r4, #16]
 8011184:	2301      	movs	r3, #1
 8011186:	6163      	str	r3, [r4, #20]
 8011188:	b002      	add	sp, #8
 801118a:	bd70      	pop	{r4, r5, r6, pc}
 801118c:	ab01      	add	r3, sp, #4
 801118e:	466a      	mov	r2, sp
 8011190:	f7ff ffca 	bl	8011128 <__swhatbuf_r>
 8011194:	9900      	ldr	r1, [sp, #0]
 8011196:	4605      	mov	r5, r0
 8011198:	4630      	mov	r0, r6
 801119a:	f7ff faab 	bl	80106f4 <_malloc_r>
 801119e:	b948      	cbnz	r0, 80111b4 <__smakebuf_r+0x44>
 80111a0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80111a4:	059a      	lsls	r2, r3, #22
 80111a6:	d4ef      	bmi.n	8011188 <__smakebuf_r+0x18>
 80111a8:	f023 0303 	bic.w	r3, r3, #3
 80111ac:	f043 0302 	orr.w	r3, r3, #2
 80111b0:	81a3      	strh	r3, [r4, #12]
 80111b2:	e7e3      	b.n	801117c <__smakebuf_r+0xc>
 80111b4:	4b0d      	ldr	r3, [pc, #52]	; (80111ec <__smakebuf_r+0x7c>)
 80111b6:	62b3      	str	r3, [r6, #40]	; 0x28
 80111b8:	89a3      	ldrh	r3, [r4, #12]
 80111ba:	6020      	str	r0, [r4, #0]
 80111bc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80111c0:	81a3      	strh	r3, [r4, #12]
 80111c2:	9b00      	ldr	r3, [sp, #0]
 80111c4:	6163      	str	r3, [r4, #20]
 80111c6:	9b01      	ldr	r3, [sp, #4]
 80111c8:	6120      	str	r0, [r4, #16]
 80111ca:	b15b      	cbz	r3, 80111e4 <__smakebuf_r+0x74>
 80111cc:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80111d0:	4630      	mov	r0, r6
 80111d2:	f000 f881 	bl	80112d8 <_isatty_r>
 80111d6:	b128      	cbz	r0, 80111e4 <__smakebuf_r+0x74>
 80111d8:	89a3      	ldrh	r3, [r4, #12]
 80111da:	f023 0303 	bic.w	r3, r3, #3
 80111de:	f043 0301 	orr.w	r3, r3, #1
 80111e2:	81a3      	strh	r3, [r4, #12]
 80111e4:	89a3      	ldrh	r3, [r4, #12]
 80111e6:	431d      	orrs	r5, r3
 80111e8:	81a5      	strh	r5, [r4, #12]
 80111ea:	e7cd      	b.n	8011188 <__smakebuf_r+0x18>
 80111ec:	080105a9 	.word	0x080105a9

080111f0 <__malloc_lock>:
 80111f0:	4770      	bx	lr

080111f2 <__malloc_unlock>:
 80111f2:	4770      	bx	lr

080111f4 <_free_r>:
 80111f4:	b538      	push	{r3, r4, r5, lr}
 80111f6:	4605      	mov	r5, r0
 80111f8:	2900      	cmp	r1, #0
 80111fa:	d045      	beq.n	8011288 <_free_r+0x94>
 80111fc:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8011200:	1f0c      	subs	r4, r1, #4
 8011202:	2b00      	cmp	r3, #0
 8011204:	bfb8      	it	lt
 8011206:	18e4      	addlt	r4, r4, r3
 8011208:	f7ff fff2 	bl	80111f0 <__malloc_lock>
 801120c:	4a1f      	ldr	r2, [pc, #124]	; (801128c <_free_r+0x98>)
 801120e:	6813      	ldr	r3, [r2, #0]
 8011210:	4610      	mov	r0, r2
 8011212:	b933      	cbnz	r3, 8011222 <_free_r+0x2e>
 8011214:	6063      	str	r3, [r4, #4]
 8011216:	6014      	str	r4, [r2, #0]
 8011218:	4628      	mov	r0, r5
 801121a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801121e:	f7ff bfe8 	b.w	80111f2 <__malloc_unlock>
 8011222:	42a3      	cmp	r3, r4
 8011224:	d90c      	bls.n	8011240 <_free_r+0x4c>
 8011226:	6821      	ldr	r1, [r4, #0]
 8011228:	1862      	adds	r2, r4, r1
 801122a:	4293      	cmp	r3, r2
 801122c:	bf04      	itt	eq
 801122e:	681a      	ldreq	r2, [r3, #0]
 8011230:	685b      	ldreq	r3, [r3, #4]
 8011232:	6063      	str	r3, [r4, #4]
 8011234:	bf04      	itt	eq
 8011236:	1852      	addeq	r2, r2, r1
 8011238:	6022      	streq	r2, [r4, #0]
 801123a:	6004      	str	r4, [r0, #0]
 801123c:	e7ec      	b.n	8011218 <_free_r+0x24>
 801123e:	4613      	mov	r3, r2
 8011240:	685a      	ldr	r2, [r3, #4]
 8011242:	b10a      	cbz	r2, 8011248 <_free_r+0x54>
 8011244:	42a2      	cmp	r2, r4
 8011246:	d9fa      	bls.n	801123e <_free_r+0x4a>
 8011248:	6819      	ldr	r1, [r3, #0]
 801124a:	1858      	adds	r0, r3, r1
 801124c:	42a0      	cmp	r0, r4
 801124e:	d10b      	bne.n	8011268 <_free_r+0x74>
 8011250:	6820      	ldr	r0, [r4, #0]
 8011252:	4401      	add	r1, r0
 8011254:	1858      	adds	r0, r3, r1
 8011256:	4282      	cmp	r2, r0
 8011258:	6019      	str	r1, [r3, #0]
 801125a:	d1dd      	bne.n	8011218 <_free_r+0x24>
 801125c:	6810      	ldr	r0, [r2, #0]
 801125e:	6852      	ldr	r2, [r2, #4]
 8011260:	605a      	str	r2, [r3, #4]
 8011262:	4401      	add	r1, r0
 8011264:	6019      	str	r1, [r3, #0]
 8011266:	e7d7      	b.n	8011218 <_free_r+0x24>
 8011268:	d902      	bls.n	8011270 <_free_r+0x7c>
 801126a:	230c      	movs	r3, #12
 801126c:	602b      	str	r3, [r5, #0]
 801126e:	e7d3      	b.n	8011218 <_free_r+0x24>
 8011270:	6820      	ldr	r0, [r4, #0]
 8011272:	1821      	adds	r1, r4, r0
 8011274:	428a      	cmp	r2, r1
 8011276:	bf04      	itt	eq
 8011278:	6811      	ldreq	r1, [r2, #0]
 801127a:	6852      	ldreq	r2, [r2, #4]
 801127c:	6062      	str	r2, [r4, #4]
 801127e:	bf04      	itt	eq
 8011280:	1809      	addeq	r1, r1, r0
 8011282:	6021      	streq	r1, [r4, #0]
 8011284:	605c      	str	r4, [r3, #4]
 8011286:	e7c7      	b.n	8011218 <_free_r+0x24>
 8011288:	bd38      	pop	{r3, r4, r5, pc}
 801128a:	bf00      	nop
 801128c:	2400418c 	.word	0x2400418c

08011290 <_read_r>:
 8011290:	b538      	push	{r3, r4, r5, lr}
 8011292:	4c07      	ldr	r4, [pc, #28]	; (80112b0 <_read_r+0x20>)
 8011294:	4605      	mov	r5, r0
 8011296:	4608      	mov	r0, r1
 8011298:	4611      	mov	r1, r2
 801129a:	2200      	movs	r2, #0
 801129c:	6022      	str	r2, [r4, #0]
 801129e:	461a      	mov	r2, r3
 80112a0:	f7fe ffc8 	bl	8010234 <_read>
 80112a4:	1c43      	adds	r3, r0, #1
 80112a6:	d102      	bne.n	80112ae <_read_r+0x1e>
 80112a8:	6823      	ldr	r3, [r4, #0]
 80112aa:	b103      	cbz	r3, 80112ae <_read_r+0x1e>
 80112ac:	602b      	str	r3, [r5, #0]
 80112ae:	bd38      	pop	{r3, r4, r5, pc}
 80112b0:	2400acf4 	.word	0x2400acf4

080112b4 <_fstat_r>:
 80112b4:	b538      	push	{r3, r4, r5, lr}
 80112b6:	4c07      	ldr	r4, [pc, #28]	; (80112d4 <_fstat_r+0x20>)
 80112b8:	2300      	movs	r3, #0
 80112ba:	4605      	mov	r5, r0
 80112bc:	4608      	mov	r0, r1
 80112be:	4611      	mov	r1, r2
 80112c0:	6023      	str	r3, [r4, #0]
 80112c2:	f7fe fffc 	bl	80102be <_fstat>
 80112c6:	1c43      	adds	r3, r0, #1
 80112c8:	d102      	bne.n	80112d0 <_fstat_r+0x1c>
 80112ca:	6823      	ldr	r3, [r4, #0]
 80112cc:	b103      	cbz	r3, 80112d0 <_fstat_r+0x1c>
 80112ce:	602b      	str	r3, [r5, #0]
 80112d0:	bd38      	pop	{r3, r4, r5, pc}
 80112d2:	bf00      	nop
 80112d4:	2400acf4 	.word	0x2400acf4

080112d8 <_isatty_r>:
 80112d8:	b538      	push	{r3, r4, r5, lr}
 80112da:	4c06      	ldr	r4, [pc, #24]	; (80112f4 <_isatty_r+0x1c>)
 80112dc:	2300      	movs	r3, #0
 80112de:	4605      	mov	r5, r0
 80112e0:	4608      	mov	r0, r1
 80112e2:	6023      	str	r3, [r4, #0]
 80112e4:	f7fe fffb 	bl	80102de <_isatty>
 80112e8:	1c43      	adds	r3, r0, #1
 80112ea:	d102      	bne.n	80112f2 <_isatty_r+0x1a>
 80112ec:	6823      	ldr	r3, [r4, #0]
 80112ee:	b103      	cbz	r3, 80112f2 <_isatty_r+0x1a>
 80112f0:	602b      	str	r3, [r5, #0]
 80112f2:	bd38      	pop	{r3, r4, r5, pc}
 80112f4:	2400acf4 	.word	0x2400acf4

080112f8 <_init>:
 80112f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80112fa:	bf00      	nop
 80112fc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80112fe:	bc08      	pop	{r3}
 8011300:	469e      	mov	lr, r3
 8011302:	4770      	bx	lr

08011304 <_fini>:
 8011304:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8011306:	bf00      	nop
 8011308:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801130a:	bc08      	pop	{r3}
 801130c:	469e      	mov	lr, r3
 801130e:	4770      	bx	lr
