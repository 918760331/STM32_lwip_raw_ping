
lwip_raw_ping.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00019314  080002a0  080002a0  000102a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00002ee8  080195b8  080195b8  000295b8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0801c4a0  0801c4a0  00030204  2**0
                  CONTENTS
  4 .ARM          00000008  0801c4a0  0801c4a0  0002c4a0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0801c4a8  0801c4a8  00030204  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0801c4a8  0801c4a8  0002c4a8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0801c4ac  0801c4ac  0002c4ac  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000204  24000000  0801c4b0  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000f3b8  24000204  0801c6b4  00030204  2**2
                  ALLOC
 10 ._user_heap_stack 0000c004  2400f5bc  0801c6b4  0003f5bc  2**0
                  ALLOC
 11 .lwip_sec     00041a00  30000000  30000000  00040000  2**2
                  ALLOC
 12 .ARM.attributes 0000002e  00000000  00000000  00030204  2**0
                  CONTENTS, READONLY
 13 .debug_info   0004cad9  00000000  00000000  00030232  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_abbrev 00008585  00000000  00000000  0007cd0b  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_aranges 00001d78  00000000  00000000  00085290  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_ranges 00001b58  00000000  00000000  00087008  2**3
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_macro  000472be  00000000  00000000  00088b60  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_line   0002c563  00000000  00000000  000cfe1e  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .debug_str    0016e571  00000000  00000000  000fc381  2**0
                  CONTENTS, READONLY, DEBUGGING
 20 .comment      0000007b  00000000  00000000  0026a8f2  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00007f38  00000000  00000000  0026a970  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080002a0 <__do_global_dtors_aux>:
 80002a0:	b510      	push	{r4, lr}
 80002a2:	4c05      	ldr	r4, [pc, #20]	; (80002b8 <__do_global_dtors_aux+0x18>)
 80002a4:	7823      	ldrb	r3, [r4, #0]
 80002a6:	b933      	cbnz	r3, 80002b6 <__do_global_dtors_aux+0x16>
 80002a8:	4b04      	ldr	r3, [pc, #16]	; (80002bc <__do_global_dtors_aux+0x1c>)
 80002aa:	b113      	cbz	r3, 80002b2 <__do_global_dtors_aux+0x12>
 80002ac:	4804      	ldr	r0, [pc, #16]	; (80002c0 <__do_global_dtors_aux+0x20>)
 80002ae:	f3af 8000 	nop.w
 80002b2:	2301      	movs	r3, #1
 80002b4:	7023      	strb	r3, [r4, #0]
 80002b6:	bd10      	pop	{r4, pc}
 80002b8:	24000204 	.word	0x24000204
 80002bc:	00000000 	.word	0x00000000
 80002c0:	0801959c 	.word	0x0801959c

080002c4 <frame_dummy>:
 80002c4:	b508      	push	{r3, lr}
 80002c6:	4b03      	ldr	r3, [pc, #12]	; (80002d4 <frame_dummy+0x10>)
 80002c8:	b11b      	cbz	r3, 80002d2 <frame_dummy+0xe>
 80002ca:	4903      	ldr	r1, [pc, #12]	; (80002d8 <frame_dummy+0x14>)
 80002cc:	4803      	ldr	r0, [pc, #12]	; (80002dc <frame_dummy+0x18>)
 80002ce:	f3af 8000 	nop.w
 80002d2:	bd08      	pop	{r3, pc}
 80002d4:	00000000 	.word	0x00000000
 80002d8:	24000208 	.word	0x24000208
 80002dc:	0801959c 	.word	0x0801959c

080002e0 <strlen>:
 80002e0:	4603      	mov	r3, r0
 80002e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002e6:	2a00      	cmp	r2, #0
 80002e8:	d1fb      	bne.n	80002e2 <strlen+0x2>
 80002ea:	1a18      	subs	r0, r3, r0
 80002ec:	3801      	subs	r0, #1
 80002ee:	4770      	bx	lr

080002f0 <memchr>:
 80002f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80002f4:	2a10      	cmp	r2, #16
 80002f6:	db2b      	blt.n	8000350 <memchr+0x60>
 80002f8:	f010 0f07 	tst.w	r0, #7
 80002fc:	d008      	beq.n	8000310 <memchr+0x20>
 80002fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000302:	3a01      	subs	r2, #1
 8000304:	428b      	cmp	r3, r1
 8000306:	d02d      	beq.n	8000364 <memchr+0x74>
 8000308:	f010 0f07 	tst.w	r0, #7
 800030c:	b342      	cbz	r2, 8000360 <memchr+0x70>
 800030e:	d1f6      	bne.n	80002fe <memchr+0xe>
 8000310:	b4f0      	push	{r4, r5, r6, r7}
 8000312:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000316:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800031a:	f022 0407 	bic.w	r4, r2, #7
 800031e:	f07f 0700 	mvns.w	r7, #0
 8000322:	2300      	movs	r3, #0
 8000324:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000328:	3c08      	subs	r4, #8
 800032a:	ea85 0501 	eor.w	r5, r5, r1
 800032e:	ea86 0601 	eor.w	r6, r6, r1
 8000332:	fa85 f547 	uadd8	r5, r5, r7
 8000336:	faa3 f587 	sel	r5, r3, r7
 800033a:	fa86 f647 	uadd8	r6, r6, r7
 800033e:	faa5 f687 	sel	r6, r5, r7
 8000342:	b98e      	cbnz	r6, 8000368 <memchr+0x78>
 8000344:	d1ee      	bne.n	8000324 <memchr+0x34>
 8000346:	bcf0      	pop	{r4, r5, r6, r7}
 8000348:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800034c:	f002 0207 	and.w	r2, r2, #7
 8000350:	b132      	cbz	r2, 8000360 <memchr+0x70>
 8000352:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000356:	3a01      	subs	r2, #1
 8000358:	ea83 0301 	eor.w	r3, r3, r1
 800035c:	b113      	cbz	r3, 8000364 <memchr+0x74>
 800035e:	d1f8      	bne.n	8000352 <memchr+0x62>
 8000360:	2000      	movs	r0, #0
 8000362:	4770      	bx	lr
 8000364:	3801      	subs	r0, #1
 8000366:	4770      	bx	lr
 8000368:	2d00      	cmp	r5, #0
 800036a:	bf06      	itte	eq
 800036c:	4635      	moveq	r5, r6
 800036e:	3803      	subeq	r0, #3
 8000370:	3807      	subne	r0, #7
 8000372:	f015 0f01 	tst.w	r5, #1
 8000376:	d107      	bne.n	8000388 <memchr+0x98>
 8000378:	3001      	adds	r0, #1
 800037a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800037e:	bf02      	ittt	eq
 8000380:	3001      	addeq	r0, #1
 8000382:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000386:	3001      	addeq	r0, #1
 8000388:	bcf0      	pop	{r4, r5, r6, r7}
 800038a:	3801      	subs	r0, #1
 800038c:	4770      	bx	lr
 800038e:	bf00      	nop

08000390 <__aeabi_frsub>:
 8000390:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000394:	e002      	b.n	800039c <__addsf3>
 8000396:	bf00      	nop

08000398 <__aeabi_fsub>:
 8000398:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

0800039c <__addsf3>:
 800039c:	0042      	lsls	r2, r0, #1
 800039e:	bf1f      	itttt	ne
 80003a0:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 80003a4:	ea92 0f03 	teqne	r2, r3
 80003a8:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 80003ac:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 80003b0:	d06a      	beq.n	8000488 <__addsf3+0xec>
 80003b2:	ea4f 6212 	mov.w	r2, r2, lsr #24
 80003b6:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 80003ba:	bfc1      	itttt	gt
 80003bc:	18d2      	addgt	r2, r2, r3
 80003be:	4041      	eorgt	r1, r0
 80003c0:	4048      	eorgt	r0, r1
 80003c2:	4041      	eorgt	r1, r0
 80003c4:	bfb8      	it	lt
 80003c6:	425b      	neglt	r3, r3
 80003c8:	2b19      	cmp	r3, #25
 80003ca:	bf88      	it	hi
 80003cc:	4770      	bxhi	lr
 80003ce:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 80003d2:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80003d6:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 80003da:	bf18      	it	ne
 80003dc:	4240      	negne	r0, r0
 80003de:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80003e2:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 80003e6:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 80003ea:	bf18      	it	ne
 80003ec:	4249      	negne	r1, r1
 80003ee:	ea92 0f03 	teq	r2, r3
 80003f2:	d03f      	beq.n	8000474 <__addsf3+0xd8>
 80003f4:	f1a2 0201 	sub.w	r2, r2, #1
 80003f8:	fa41 fc03 	asr.w	ip, r1, r3
 80003fc:	eb10 000c 	adds.w	r0, r0, ip
 8000400:	f1c3 0320 	rsb	r3, r3, #32
 8000404:	fa01 f103 	lsl.w	r1, r1, r3
 8000408:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 800040c:	d502      	bpl.n	8000414 <__addsf3+0x78>
 800040e:	4249      	negs	r1, r1
 8000410:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000414:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000418:	d313      	bcc.n	8000442 <__addsf3+0xa6>
 800041a:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 800041e:	d306      	bcc.n	800042e <__addsf3+0x92>
 8000420:	0840      	lsrs	r0, r0, #1
 8000422:	ea4f 0131 	mov.w	r1, r1, rrx
 8000426:	f102 0201 	add.w	r2, r2, #1
 800042a:	2afe      	cmp	r2, #254	; 0xfe
 800042c:	d251      	bcs.n	80004d2 <__addsf3+0x136>
 800042e:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000432:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000436:	bf08      	it	eq
 8000438:	f020 0001 	biceq.w	r0, r0, #1
 800043c:	ea40 0003 	orr.w	r0, r0, r3
 8000440:	4770      	bx	lr
 8000442:	0049      	lsls	r1, r1, #1
 8000444:	eb40 0000 	adc.w	r0, r0, r0
 8000448:	f410 0f00 	tst.w	r0, #8388608	; 0x800000
 800044c:	f1a2 0201 	sub.w	r2, r2, #1
 8000450:	d1ed      	bne.n	800042e <__addsf3+0x92>
 8000452:	fab0 fc80 	clz	ip, r0
 8000456:	f1ac 0c08 	sub.w	ip, ip, #8
 800045a:	ebb2 020c 	subs.w	r2, r2, ip
 800045e:	fa00 f00c 	lsl.w	r0, r0, ip
 8000462:	bfaa      	itet	ge
 8000464:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000468:	4252      	neglt	r2, r2
 800046a:	4318      	orrge	r0, r3
 800046c:	bfbc      	itt	lt
 800046e:	40d0      	lsrlt	r0, r2
 8000470:	4318      	orrlt	r0, r3
 8000472:	4770      	bx	lr
 8000474:	f092 0f00 	teq	r2, #0
 8000478:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 800047c:	bf06      	itte	eq
 800047e:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000482:	3201      	addeq	r2, #1
 8000484:	3b01      	subne	r3, #1
 8000486:	e7b5      	b.n	80003f4 <__addsf3+0x58>
 8000488:	ea4f 0341 	mov.w	r3, r1, lsl #1
 800048c:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000490:	bf18      	it	ne
 8000492:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000496:	d021      	beq.n	80004dc <__addsf3+0x140>
 8000498:	ea92 0f03 	teq	r2, r3
 800049c:	d004      	beq.n	80004a8 <__addsf3+0x10c>
 800049e:	f092 0f00 	teq	r2, #0
 80004a2:	bf08      	it	eq
 80004a4:	4608      	moveq	r0, r1
 80004a6:	4770      	bx	lr
 80004a8:	ea90 0f01 	teq	r0, r1
 80004ac:	bf1c      	itt	ne
 80004ae:	2000      	movne	r0, #0
 80004b0:	4770      	bxne	lr
 80004b2:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 80004b6:	d104      	bne.n	80004c2 <__addsf3+0x126>
 80004b8:	0040      	lsls	r0, r0, #1
 80004ba:	bf28      	it	cs
 80004bc:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 80004c0:	4770      	bx	lr
 80004c2:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 80004c6:	bf3c      	itt	cc
 80004c8:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 80004cc:	4770      	bxcc	lr
 80004ce:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 80004d2:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 80004d6:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80004da:	4770      	bx	lr
 80004dc:	ea7f 6222 	mvns.w	r2, r2, asr #24
 80004e0:	bf16      	itet	ne
 80004e2:	4608      	movne	r0, r1
 80004e4:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 80004e8:	4601      	movne	r1, r0
 80004ea:	0242      	lsls	r2, r0, #9
 80004ec:	bf06      	itte	eq
 80004ee:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 80004f2:	ea90 0f01 	teqeq	r0, r1
 80004f6:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 80004fa:	4770      	bx	lr

080004fc <__aeabi_ui2f>:
 80004fc:	f04f 0300 	mov.w	r3, #0
 8000500:	e004      	b.n	800050c <__aeabi_i2f+0x8>
 8000502:	bf00      	nop

08000504 <__aeabi_i2f>:
 8000504:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000508:	bf48      	it	mi
 800050a:	4240      	negmi	r0, r0
 800050c:	ea5f 0c00 	movs.w	ip, r0
 8000510:	bf08      	it	eq
 8000512:	4770      	bxeq	lr
 8000514:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000518:	4601      	mov	r1, r0
 800051a:	f04f 0000 	mov.w	r0, #0
 800051e:	e01c      	b.n	800055a <__aeabi_l2f+0x2a>

08000520 <__aeabi_ul2f>:
 8000520:	ea50 0201 	orrs.w	r2, r0, r1
 8000524:	bf08      	it	eq
 8000526:	4770      	bxeq	lr
 8000528:	f04f 0300 	mov.w	r3, #0
 800052c:	e00a      	b.n	8000544 <__aeabi_l2f+0x14>
 800052e:	bf00      	nop

08000530 <__aeabi_l2f>:
 8000530:	ea50 0201 	orrs.w	r2, r0, r1
 8000534:	bf08      	it	eq
 8000536:	4770      	bxeq	lr
 8000538:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 800053c:	d502      	bpl.n	8000544 <__aeabi_l2f+0x14>
 800053e:	4240      	negs	r0, r0
 8000540:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000544:	ea5f 0c01 	movs.w	ip, r1
 8000548:	bf02      	ittt	eq
 800054a:	4684      	moveq	ip, r0
 800054c:	4601      	moveq	r1, r0
 800054e:	2000      	moveq	r0, #0
 8000550:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000554:	bf08      	it	eq
 8000556:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 800055a:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 800055e:	fabc f28c 	clz	r2, ip
 8000562:	3a08      	subs	r2, #8
 8000564:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000568:	db10      	blt.n	800058c <__aeabi_l2f+0x5c>
 800056a:	fa01 fc02 	lsl.w	ip, r1, r2
 800056e:	4463      	add	r3, ip
 8000570:	fa00 fc02 	lsl.w	ip, r0, r2
 8000574:	f1c2 0220 	rsb	r2, r2, #32
 8000578:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800057c:	fa20 f202 	lsr.w	r2, r0, r2
 8000580:	eb43 0002 	adc.w	r0, r3, r2
 8000584:	bf08      	it	eq
 8000586:	f020 0001 	biceq.w	r0, r0, #1
 800058a:	4770      	bx	lr
 800058c:	f102 0220 	add.w	r2, r2, #32
 8000590:	fa01 fc02 	lsl.w	ip, r1, r2
 8000594:	f1c2 0220 	rsb	r2, r2, #32
 8000598:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 800059c:	fa21 f202 	lsr.w	r2, r1, r2
 80005a0:	eb43 0002 	adc.w	r0, r3, r2
 80005a4:	bf08      	it	eq
 80005a6:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 80005aa:	4770      	bx	lr

080005ac <__aeabi_uldivmod>:
 80005ac:	b953      	cbnz	r3, 80005c4 <__aeabi_uldivmod+0x18>
 80005ae:	b94a      	cbnz	r2, 80005c4 <__aeabi_uldivmod+0x18>
 80005b0:	2900      	cmp	r1, #0
 80005b2:	bf08      	it	eq
 80005b4:	2800      	cmpeq	r0, #0
 80005b6:	bf1c      	itt	ne
 80005b8:	f04f 31ff 	movne.w	r1, #4294967295
 80005bc:	f04f 30ff 	movne.w	r0, #4294967295
 80005c0:	f000 b972 	b.w	80008a8 <__aeabi_idiv0>
 80005c4:	f1ad 0c08 	sub.w	ip, sp, #8
 80005c8:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80005cc:	f000 f806 	bl	80005dc <__udivmoddi4>
 80005d0:	f8dd e004 	ldr.w	lr, [sp, #4]
 80005d4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80005d8:	b004      	add	sp, #16
 80005da:	4770      	bx	lr

080005dc <__udivmoddi4>:
 80005dc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80005e0:	9e08      	ldr	r6, [sp, #32]
 80005e2:	4604      	mov	r4, r0
 80005e4:	4688      	mov	r8, r1
 80005e6:	2b00      	cmp	r3, #0
 80005e8:	d14b      	bne.n	8000682 <__udivmoddi4+0xa6>
 80005ea:	428a      	cmp	r2, r1
 80005ec:	4615      	mov	r5, r2
 80005ee:	d967      	bls.n	80006c0 <__udivmoddi4+0xe4>
 80005f0:	fab2 f282 	clz	r2, r2
 80005f4:	b14a      	cbz	r2, 800060a <__udivmoddi4+0x2e>
 80005f6:	f1c2 0720 	rsb	r7, r2, #32
 80005fa:	fa01 f302 	lsl.w	r3, r1, r2
 80005fe:	fa20 f707 	lsr.w	r7, r0, r7
 8000602:	4095      	lsls	r5, r2
 8000604:	ea47 0803 	orr.w	r8, r7, r3
 8000608:	4094      	lsls	r4, r2
 800060a:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800060e:	0c23      	lsrs	r3, r4, #16
 8000610:	fbb8 f7fe 	udiv	r7, r8, lr
 8000614:	fa1f fc85 	uxth.w	ip, r5
 8000618:	fb0e 8817 	mls	r8, lr, r7, r8
 800061c:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000620:	fb07 f10c 	mul.w	r1, r7, ip
 8000624:	4299      	cmp	r1, r3
 8000626:	d909      	bls.n	800063c <__udivmoddi4+0x60>
 8000628:	18eb      	adds	r3, r5, r3
 800062a:	f107 30ff 	add.w	r0, r7, #4294967295
 800062e:	f080 811b 	bcs.w	8000868 <__udivmoddi4+0x28c>
 8000632:	4299      	cmp	r1, r3
 8000634:	f240 8118 	bls.w	8000868 <__udivmoddi4+0x28c>
 8000638:	3f02      	subs	r7, #2
 800063a:	442b      	add	r3, r5
 800063c:	1a5b      	subs	r3, r3, r1
 800063e:	b2a4      	uxth	r4, r4
 8000640:	fbb3 f0fe 	udiv	r0, r3, lr
 8000644:	fb0e 3310 	mls	r3, lr, r0, r3
 8000648:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800064c:	fb00 fc0c 	mul.w	ip, r0, ip
 8000650:	45a4      	cmp	ip, r4
 8000652:	d909      	bls.n	8000668 <__udivmoddi4+0x8c>
 8000654:	192c      	adds	r4, r5, r4
 8000656:	f100 33ff 	add.w	r3, r0, #4294967295
 800065a:	f080 8107 	bcs.w	800086c <__udivmoddi4+0x290>
 800065e:	45a4      	cmp	ip, r4
 8000660:	f240 8104 	bls.w	800086c <__udivmoddi4+0x290>
 8000664:	3802      	subs	r0, #2
 8000666:	442c      	add	r4, r5
 8000668:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 800066c:	eba4 040c 	sub.w	r4, r4, ip
 8000670:	2700      	movs	r7, #0
 8000672:	b11e      	cbz	r6, 800067c <__udivmoddi4+0xa0>
 8000674:	40d4      	lsrs	r4, r2
 8000676:	2300      	movs	r3, #0
 8000678:	e9c6 4300 	strd	r4, r3, [r6]
 800067c:	4639      	mov	r1, r7
 800067e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000682:	428b      	cmp	r3, r1
 8000684:	d909      	bls.n	800069a <__udivmoddi4+0xbe>
 8000686:	2e00      	cmp	r6, #0
 8000688:	f000 80eb 	beq.w	8000862 <__udivmoddi4+0x286>
 800068c:	2700      	movs	r7, #0
 800068e:	e9c6 0100 	strd	r0, r1, [r6]
 8000692:	4638      	mov	r0, r7
 8000694:	4639      	mov	r1, r7
 8000696:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800069a:	fab3 f783 	clz	r7, r3
 800069e:	2f00      	cmp	r7, #0
 80006a0:	d147      	bne.n	8000732 <__udivmoddi4+0x156>
 80006a2:	428b      	cmp	r3, r1
 80006a4:	d302      	bcc.n	80006ac <__udivmoddi4+0xd0>
 80006a6:	4282      	cmp	r2, r0
 80006a8:	f200 80fa 	bhi.w	80008a0 <__udivmoddi4+0x2c4>
 80006ac:	1a84      	subs	r4, r0, r2
 80006ae:	eb61 0303 	sbc.w	r3, r1, r3
 80006b2:	2001      	movs	r0, #1
 80006b4:	4698      	mov	r8, r3
 80006b6:	2e00      	cmp	r6, #0
 80006b8:	d0e0      	beq.n	800067c <__udivmoddi4+0xa0>
 80006ba:	e9c6 4800 	strd	r4, r8, [r6]
 80006be:	e7dd      	b.n	800067c <__udivmoddi4+0xa0>
 80006c0:	b902      	cbnz	r2, 80006c4 <__udivmoddi4+0xe8>
 80006c2:	deff      	udf	#255	; 0xff
 80006c4:	fab2 f282 	clz	r2, r2
 80006c8:	2a00      	cmp	r2, #0
 80006ca:	f040 808f 	bne.w	80007ec <__udivmoddi4+0x210>
 80006ce:	1b49      	subs	r1, r1, r5
 80006d0:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80006d4:	fa1f f885 	uxth.w	r8, r5
 80006d8:	2701      	movs	r7, #1
 80006da:	fbb1 fcfe 	udiv	ip, r1, lr
 80006de:	0c23      	lsrs	r3, r4, #16
 80006e0:	fb0e 111c 	mls	r1, lr, ip, r1
 80006e4:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80006e8:	fb08 f10c 	mul.w	r1, r8, ip
 80006ec:	4299      	cmp	r1, r3
 80006ee:	d907      	bls.n	8000700 <__udivmoddi4+0x124>
 80006f0:	18eb      	adds	r3, r5, r3
 80006f2:	f10c 30ff 	add.w	r0, ip, #4294967295
 80006f6:	d202      	bcs.n	80006fe <__udivmoddi4+0x122>
 80006f8:	4299      	cmp	r1, r3
 80006fa:	f200 80cd 	bhi.w	8000898 <__udivmoddi4+0x2bc>
 80006fe:	4684      	mov	ip, r0
 8000700:	1a59      	subs	r1, r3, r1
 8000702:	b2a3      	uxth	r3, r4
 8000704:	fbb1 f0fe 	udiv	r0, r1, lr
 8000708:	fb0e 1410 	mls	r4, lr, r0, r1
 800070c:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000710:	fb08 f800 	mul.w	r8, r8, r0
 8000714:	45a0      	cmp	r8, r4
 8000716:	d907      	bls.n	8000728 <__udivmoddi4+0x14c>
 8000718:	192c      	adds	r4, r5, r4
 800071a:	f100 33ff 	add.w	r3, r0, #4294967295
 800071e:	d202      	bcs.n	8000726 <__udivmoddi4+0x14a>
 8000720:	45a0      	cmp	r8, r4
 8000722:	f200 80b6 	bhi.w	8000892 <__udivmoddi4+0x2b6>
 8000726:	4618      	mov	r0, r3
 8000728:	eba4 0408 	sub.w	r4, r4, r8
 800072c:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000730:	e79f      	b.n	8000672 <__udivmoddi4+0x96>
 8000732:	f1c7 0c20 	rsb	ip, r7, #32
 8000736:	40bb      	lsls	r3, r7
 8000738:	fa22 fe0c 	lsr.w	lr, r2, ip
 800073c:	ea4e 0e03 	orr.w	lr, lr, r3
 8000740:	fa01 f407 	lsl.w	r4, r1, r7
 8000744:	fa20 f50c 	lsr.w	r5, r0, ip
 8000748:	fa21 f30c 	lsr.w	r3, r1, ip
 800074c:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000750:	4325      	orrs	r5, r4
 8000752:	fbb3 f9f8 	udiv	r9, r3, r8
 8000756:	0c2c      	lsrs	r4, r5, #16
 8000758:	fb08 3319 	mls	r3, r8, r9, r3
 800075c:	fa1f fa8e 	uxth.w	sl, lr
 8000760:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000764:	fb09 f40a 	mul.w	r4, r9, sl
 8000768:	429c      	cmp	r4, r3
 800076a:	fa02 f207 	lsl.w	r2, r2, r7
 800076e:	fa00 f107 	lsl.w	r1, r0, r7
 8000772:	d90b      	bls.n	800078c <__udivmoddi4+0x1b0>
 8000774:	eb1e 0303 	adds.w	r3, lr, r3
 8000778:	f109 30ff 	add.w	r0, r9, #4294967295
 800077c:	f080 8087 	bcs.w	800088e <__udivmoddi4+0x2b2>
 8000780:	429c      	cmp	r4, r3
 8000782:	f240 8084 	bls.w	800088e <__udivmoddi4+0x2b2>
 8000786:	f1a9 0902 	sub.w	r9, r9, #2
 800078a:	4473      	add	r3, lr
 800078c:	1b1b      	subs	r3, r3, r4
 800078e:	b2ad      	uxth	r5, r5
 8000790:	fbb3 f0f8 	udiv	r0, r3, r8
 8000794:	fb08 3310 	mls	r3, r8, r0, r3
 8000798:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 800079c:	fb00 fa0a 	mul.w	sl, r0, sl
 80007a0:	45a2      	cmp	sl, r4
 80007a2:	d908      	bls.n	80007b6 <__udivmoddi4+0x1da>
 80007a4:	eb1e 0404 	adds.w	r4, lr, r4
 80007a8:	f100 33ff 	add.w	r3, r0, #4294967295
 80007ac:	d26b      	bcs.n	8000886 <__udivmoddi4+0x2aa>
 80007ae:	45a2      	cmp	sl, r4
 80007b0:	d969      	bls.n	8000886 <__udivmoddi4+0x2aa>
 80007b2:	3802      	subs	r0, #2
 80007b4:	4474      	add	r4, lr
 80007b6:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80007ba:	fba0 8902 	umull	r8, r9, r0, r2
 80007be:	eba4 040a 	sub.w	r4, r4, sl
 80007c2:	454c      	cmp	r4, r9
 80007c4:	46c2      	mov	sl, r8
 80007c6:	464b      	mov	r3, r9
 80007c8:	d354      	bcc.n	8000874 <__udivmoddi4+0x298>
 80007ca:	d051      	beq.n	8000870 <__udivmoddi4+0x294>
 80007cc:	2e00      	cmp	r6, #0
 80007ce:	d069      	beq.n	80008a4 <__udivmoddi4+0x2c8>
 80007d0:	ebb1 050a 	subs.w	r5, r1, sl
 80007d4:	eb64 0403 	sbc.w	r4, r4, r3
 80007d8:	fa04 fc0c 	lsl.w	ip, r4, ip
 80007dc:	40fd      	lsrs	r5, r7
 80007de:	40fc      	lsrs	r4, r7
 80007e0:	ea4c 0505 	orr.w	r5, ip, r5
 80007e4:	e9c6 5400 	strd	r5, r4, [r6]
 80007e8:	2700      	movs	r7, #0
 80007ea:	e747      	b.n	800067c <__udivmoddi4+0xa0>
 80007ec:	f1c2 0320 	rsb	r3, r2, #32
 80007f0:	fa20 f703 	lsr.w	r7, r0, r3
 80007f4:	4095      	lsls	r5, r2
 80007f6:	fa01 f002 	lsl.w	r0, r1, r2
 80007fa:	fa21 f303 	lsr.w	r3, r1, r3
 80007fe:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000802:	4338      	orrs	r0, r7
 8000804:	0c01      	lsrs	r1, r0, #16
 8000806:	fbb3 f7fe 	udiv	r7, r3, lr
 800080a:	fa1f f885 	uxth.w	r8, r5
 800080e:	fb0e 3317 	mls	r3, lr, r7, r3
 8000812:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000816:	fb07 f308 	mul.w	r3, r7, r8
 800081a:	428b      	cmp	r3, r1
 800081c:	fa04 f402 	lsl.w	r4, r4, r2
 8000820:	d907      	bls.n	8000832 <__udivmoddi4+0x256>
 8000822:	1869      	adds	r1, r5, r1
 8000824:	f107 3cff 	add.w	ip, r7, #4294967295
 8000828:	d22f      	bcs.n	800088a <__udivmoddi4+0x2ae>
 800082a:	428b      	cmp	r3, r1
 800082c:	d92d      	bls.n	800088a <__udivmoddi4+0x2ae>
 800082e:	3f02      	subs	r7, #2
 8000830:	4429      	add	r1, r5
 8000832:	1acb      	subs	r3, r1, r3
 8000834:	b281      	uxth	r1, r0
 8000836:	fbb3 f0fe 	udiv	r0, r3, lr
 800083a:	fb0e 3310 	mls	r3, lr, r0, r3
 800083e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000842:	fb00 f308 	mul.w	r3, r0, r8
 8000846:	428b      	cmp	r3, r1
 8000848:	d907      	bls.n	800085a <__udivmoddi4+0x27e>
 800084a:	1869      	adds	r1, r5, r1
 800084c:	f100 3cff 	add.w	ip, r0, #4294967295
 8000850:	d217      	bcs.n	8000882 <__udivmoddi4+0x2a6>
 8000852:	428b      	cmp	r3, r1
 8000854:	d915      	bls.n	8000882 <__udivmoddi4+0x2a6>
 8000856:	3802      	subs	r0, #2
 8000858:	4429      	add	r1, r5
 800085a:	1ac9      	subs	r1, r1, r3
 800085c:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000860:	e73b      	b.n	80006da <__udivmoddi4+0xfe>
 8000862:	4637      	mov	r7, r6
 8000864:	4630      	mov	r0, r6
 8000866:	e709      	b.n	800067c <__udivmoddi4+0xa0>
 8000868:	4607      	mov	r7, r0
 800086a:	e6e7      	b.n	800063c <__udivmoddi4+0x60>
 800086c:	4618      	mov	r0, r3
 800086e:	e6fb      	b.n	8000668 <__udivmoddi4+0x8c>
 8000870:	4541      	cmp	r1, r8
 8000872:	d2ab      	bcs.n	80007cc <__udivmoddi4+0x1f0>
 8000874:	ebb8 0a02 	subs.w	sl, r8, r2
 8000878:	eb69 020e 	sbc.w	r2, r9, lr
 800087c:	3801      	subs	r0, #1
 800087e:	4613      	mov	r3, r2
 8000880:	e7a4      	b.n	80007cc <__udivmoddi4+0x1f0>
 8000882:	4660      	mov	r0, ip
 8000884:	e7e9      	b.n	800085a <__udivmoddi4+0x27e>
 8000886:	4618      	mov	r0, r3
 8000888:	e795      	b.n	80007b6 <__udivmoddi4+0x1da>
 800088a:	4667      	mov	r7, ip
 800088c:	e7d1      	b.n	8000832 <__udivmoddi4+0x256>
 800088e:	4681      	mov	r9, r0
 8000890:	e77c      	b.n	800078c <__udivmoddi4+0x1b0>
 8000892:	3802      	subs	r0, #2
 8000894:	442c      	add	r4, r5
 8000896:	e747      	b.n	8000728 <__udivmoddi4+0x14c>
 8000898:	f1ac 0c02 	sub.w	ip, ip, #2
 800089c:	442b      	add	r3, r5
 800089e:	e72f      	b.n	8000700 <__udivmoddi4+0x124>
 80008a0:	4638      	mov	r0, r7
 80008a2:	e708      	b.n	80006b6 <__udivmoddi4+0xda>
 80008a4:	4637      	mov	r7, r6
 80008a6:	e6e9      	b.n	800067c <__udivmoddi4+0xa0>

080008a8 <__aeabi_idiv0>:
 80008a8:	4770      	bx	lr
 80008aa:	bf00      	nop

080008ac <LAN8742_RegisterBusIO>:
  * @param  ioctx: holds device IO functions.  
  * @retval LAN8742_STATUS_OK  if OK
  *         LAN8742_STATUS_ERROR if missing mandatory function
  */
int32_t  LAN8742_RegisterBusIO(lan8742_Object_t *pObj, lan8742_IOCtx_t *ioctx)
{
 80008ac:	b480      	push	{r7}
 80008ae:	b083      	sub	sp, #12
 80008b0:	af00      	add	r7, sp, #0
 80008b2:	6078      	str	r0, [r7, #4]
 80008b4:	6039      	str	r1, [r7, #0]
  if(!pObj || !ioctx->ReadReg || !ioctx->WriteReg || !ioctx->GetTick)
 80008b6:	687b      	ldr	r3, [r7, #4]
 80008b8:	2b00      	cmp	r3, #0
 80008ba:	d00b      	beq.n	80008d4 <LAN8742_RegisterBusIO+0x28>
 80008bc:	683b      	ldr	r3, [r7, #0]
 80008be:	68db      	ldr	r3, [r3, #12]
 80008c0:	2b00      	cmp	r3, #0
 80008c2:	d007      	beq.n	80008d4 <LAN8742_RegisterBusIO+0x28>
 80008c4:	683b      	ldr	r3, [r7, #0]
 80008c6:	689b      	ldr	r3, [r3, #8]
 80008c8:	2b00      	cmp	r3, #0
 80008ca:	d003      	beq.n	80008d4 <LAN8742_RegisterBusIO+0x28>
 80008cc:	683b      	ldr	r3, [r7, #0]
 80008ce:	691b      	ldr	r3, [r3, #16]
 80008d0:	2b00      	cmp	r3, #0
 80008d2:	d102      	bne.n	80008da <LAN8742_RegisterBusIO+0x2e>
  {
    return LAN8742_STATUS_ERROR;
 80008d4:	f04f 33ff 	mov.w	r3, #4294967295
 80008d8:	e014      	b.n	8000904 <LAN8742_RegisterBusIO+0x58>
  }
  
  pObj->IO.Init = ioctx->Init;
 80008da:	683b      	ldr	r3, [r7, #0]
 80008dc:	681a      	ldr	r2, [r3, #0]
 80008de:	687b      	ldr	r3, [r7, #4]
 80008e0:	609a      	str	r2, [r3, #8]
  pObj->IO.DeInit = ioctx->DeInit;
 80008e2:	683b      	ldr	r3, [r7, #0]
 80008e4:	685a      	ldr	r2, [r3, #4]
 80008e6:	687b      	ldr	r3, [r7, #4]
 80008e8:	60da      	str	r2, [r3, #12]
  pObj->IO.ReadReg = ioctx->ReadReg;
 80008ea:	683b      	ldr	r3, [r7, #0]
 80008ec:	68da      	ldr	r2, [r3, #12]
 80008ee:	687b      	ldr	r3, [r7, #4]
 80008f0:	615a      	str	r2, [r3, #20]
  pObj->IO.WriteReg = ioctx->WriteReg;
 80008f2:	683b      	ldr	r3, [r7, #0]
 80008f4:	689a      	ldr	r2, [r3, #8]
 80008f6:	687b      	ldr	r3, [r7, #4]
 80008f8:	611a      	str	r2, [r3, #16]
  pObj->IO.GetTick = ioctx->GetTick;
 80008fa:	683b      	ldr	r3, [r7, #0]
 80008fc:	691a      	ldr	r2, [r3, #16]
 80008fe:	687b      	ldr	r3, [r7, #4]
 8000900:	619a      	str	r2, [r3, #24]
  
  return LAN8742_STATUS_OK;
 8000902:	2300      	movs	r3, #0
}
 8000904:	4618      	mov	r0, r3
 8000906:	370c      	adds	r7, #12
 8000908:	46bd      	mov	sp, r7
 800090a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800090e:	4770      	bx	lr

08000910 <LAN8742_Init>:
  *         LAN8742_STATUS_READ_ERROR if connot read register
  *         LAN8742_STATUS_WRITE_ERROR if connot write to register
  *         LAN8742_STATUS_RESET_TIMEOUT if cannot perform a software reset
  */
int32_t LAN8742_Init(ETH_HandleTypeDef *heth)
{
 8000910:	b580      	push	{r7, lr}
 8000912:	b084      	sub	sp, #16
 8000914:	af00      	add	r7, sp, #0
 8000916:	6078      	str	r0, [r7, #4]
    uint32_t phyreg = 0;
 8000918:	2300      	movs	r3, #0
 800091a:	60bb      	str	r3, [r7, #8]
    uint32_t TIME_Out = 0;
 800091c:	2300      	movs	r3, #0
 800091e:	60fb      	str	r3, [r7, #12]
    //software reset LAN8742A
    if(HAL_ETH_WritePHYRegister(heth, 0x00, LAN8742_BCR, LAN8742_BCR_SOFT_RESET) != HAL_OK)
 8000920:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000924:	2200      	movs	r2, #0
 8000926:	2100      	movs	r1, #0
 8000928:	6878      	ldr	r0, [r7, #4]
 800092a:	f001 f881 	bl	8001a30 <HAL_ETH_WritePHYRegister>
 800092e:	4603      	mov	r3, r0
 8000930:	2b00      	cmp	r3, #0
 8000932:	d001      	beq.n	8000938 <LAN8742_Init+0x28>
    {
        return HAL_ERROR;
 8000934:	2301      	movs	r3, #1
 8000936:	e027      	b.n	8000988 <LAN8742_Init+0x78>
    }
    //LAN8742A reset delay
    HAL_Delay(0x00000F);
 8000938:	200f      	movs	r0, #15
 800093a:	f000 f8d5 	bl	8000ae8 <HAL_Delay>

    if((HAL_ETH_WritePHYRegister(heth, 0x00, LAN8742_BCR, LAN8742_BCR_AUTONEGO_EN)) != HAL_OK)
 800093e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000942:	2200      	movs	r2, #0
 8000944:	2100      	movs	r1, #0
 8000946:	6878      	ldr	r0, [r7, #4]
 8000948:	f001 f872 	bl	8001a30 <HAL_ETH_WritePHYRegister>
 800094c:	4603      	mov	r3, r0
 800094e:	2b00      	cmp	r3, #0
 8000950:	d001      	beq.n	8000956 <LAN8742_Init+0x46>
    {
      return HAL_ERROR;
 8000952:	2301      	movs	r3, #1
 8000954:	e018      	b.n	8000988 <LAN8742_Init+0x78>
    }
    //LAN8742A write delay
    HAL_Delay(0xF);
 8000956:	200f      	movs	r0, #15
 8000958:	f000 f8c6 	bl	8000ae8 <HAL_Delay>
    do
    {
      HAL_ETH_ReadPHYRegister(heth, 0x00, LAN8742_BSR, &phyreg);
 800095c:	f107 0308 	add.w	r3, r7, #8
 8000960:	2201      	movs	r2, #1
 8000962:	2100      	movs	r1, #0
 8000964:	6878      	ldr	r0, [r7, #4]
 8000966:	f001 f80f 	bl	8001988 <HAL_ETH_ReadPHYRegister>
      TIME_Out++;
 800096a:	68fb      	ldr	r3, [r7, #12]
 800096c:	3301      	adds	r3, #1
 800096e:	60fb      	str	r3, [r7, #12]
      if(TIME_Out > 0x0000FFFF)
 8000970:	68fb      	ldr	r3, [r7, #12]
 8000972:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000976:	d301      	bcc.n	800097c <LAN8742_Init+0x6c>
        return HAL_TIMEOUT;
 8000978:	2303      	movs	r3, #3
 800097a:	e005      	b.n	8000988 <LAN8742_Init+0x78>
    } while (((phyreg & LAN8742_BSR_AUTONEGO_CPLT) != LAN8742_BSR_AUTONEGO_CPLT));
 800097c:	68bb      	ldr	r3, [r7, #8]
 800097e:	f003 0320 	and.w	r3, r3, #32
 8000982:	2b00      	cmp	r3, #0
 8000984:	d0ea      	beq.n	800095c <LAN8742_Init+0x4c>

    return HAL_OK;
 8000986:	2300      	movs	r3, #0
}
 8000988:	4618      	mov	r0, r3
 800098a:	3710      	adds	r7, #16
 800098c:	46bd      	mov	sp, r7
 800098e:	bd80      	pop	{r7, pc}

08000990 <LAN8742_GetLinkState>:
  *         LAN8742_STATUS_10MBITS_HALFDUPLEX  if 10Mb/s HD       
  *         LAN8742_STATUS_READ_ERROR if connot read register
  *         LAN8742_STATUS_WRITE_ERROR if connot write to register
  */
int32_t LAN8742_GetLinkState(ETH_HandleTypeDef *heth)
{
 8000990:	b580      	push	{r7, lr}
 8000992:	b084      	sub	sp, #16
 8000994:	af00      	add	r7, sp, #0
 8000996:	6078      	str	r0, [r7, #4]
	uint32_t phyreg = 0;
 8000998:	2300      	movs	r3, #0
 800099a:	60fb      	str	r3, [r7, #12]

	HAL_ETH_ReadPHYRegister(heth, 0x00, LAN8742_BSR, &phyreg);
 800099c:	f107 030c 	add.w	r3, r7, #12
 80009a0:	2201      	movs	r2, #1
 80009a2:	2100      	movs	r1, #0
 80009a4:	6878      	ldr	r0, [r7, #4]
 80009a6:	f000 ffef 	bl	8001988 <HAL_ETH_ReadPHYRegister>

	if(HAL_ETH_ReadPHYRegister(heth, 0x00, LAN8742_PHYSCSR, &phyreg) == HAL_OK)
 80009aa:	f107 030c 	add.w	r3, r7, #12
 80009ae:	221f      	movs	r2, #31
 80009b0:	2100      	movs	r1, #0
 80009b2:	6878      	ldr	r0, [r7, #4]
 80009b4:	f000 ffe8 	bl	8001988 <HAL_ETH_ReadPHYRegister>
 80009b8:	4603      	mov	r3, r0
 80009ba:	2b00      	cmp	r3, #0
 80009bc:	d101      	bne.n	80009c2 <LAN8742_GetLinkState+0x32>
		return phyreg;
 80009be:	68fb      	ldr	r3, [r7, #12]
 80009c0:	e000      	b.n	80009c4 <LAN8742_GetLinkState+0x34>
	return 0;
 80009c2:	2300      	movs	r3, #0
}
 80009c4:	4618      	mov	r0, r3
 80009c6:	3710      	adds	r7, #16
 80009c8:	46bd      	mov	sp, r7
 80009ca:	bd80      	pop	{r7, pc}

080009cc <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80009cc:	b580      	push	{r7, lr}
 80009ce:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80009d0:	2003      	movs	r0, #3
 80009d2:	f000 f99b 	bl	8000d0c <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 80009d6:	f002 ffb3 	bl	8003940 <HAL_RCC_GetSysClockFreq>
 80009da:	4601      	mov	r1, r0
 80009dc:	4b13      	ldr	r3, [pc, #76]	; (8000a2c <HAL_Init+0x60>)
 80009de:	699b      	ldr	r3, [r3, #24]
 80009e0:	0a1b      	lsrs	r3, r3, #8
 80009e2:	f003 030f 	and.w	r3, r3, #15
 80009e6:	4a12      	ldr	r2, [pc, #72]	; (8000a30 <HAL_Init+0x64>)
 80009e8:	5cd3      	ldrb	r3, [r2, r3]
 80009ea:	f003 031f 	and.w	r3, r3, #31
 80009ee:	fa21 f303 	lsr.w	r3, r1, r3
 80009f2:	4a10      	ldr	r2, [pc, #64]	; (8000a34 <HAL_Init+0x68>)
 80009f4:	6013      	str	r3, [r2, #0]

  /* Update the SystemD2Clock global variable */
  SystemD2Clock = (SystemCoreClock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80009f6:	4b0f      	ldr	r3, [pc, #60]	; (8000a34 <HAL_Init+0x68>)
 80009f8:	681a      	ldr	r2, [r3, #0]
 80009fa:	4b0c      	ldr	r3, [pc, #48]	; (8000a2c <HAL_Init+0x60>)
 80009fc:	699b      	ldr	r3, [r3, #24]
 80009fe:	f003 030f 	and.w	r3, r3, #15
 8000a02:	490b      	ldr	r1, [pc, #44]	; (8000a30 <HAL_Init+0x64>)
 8000a04:	5ccb      	ldrb	r3, [r1, r3]
 8000a06:	f003 031f 	and.w	r3, r3, #31
 8000a0a:	fa22 f303 	lsr.w	r3, r2, r3
 8000a0e:	4a0a      	ldr	r2, [pc, #40]	; (8000a38 <HAL_Init+0x6c>)
 8000a10:	6013      	str	r3, [r2, #0]

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000a12:	200f      	movs	r0, #15
 8000a14:	f000 f812 	bl	8000a3c <HAL_InitTick>
 8000a18:	4603      	mov	r3, r0
 8000a1a:	2b00      	cmp	r3, #0
 8000a1c:	d001      	beq.n	8000a22 <HAL_Init+0x56>
  {
    return HAL_ERROR;
 8000a1e:	2301      	movs	r3, #1
 8000a20:	e002      	b.n	8000a28 <HAL_Init+0x5c>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8000a22:	f013 fbff 	bl	8014224 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000a26:	2300      	movs	r3, #0
}
 8000a28:	4618      	mov	r0, r3
 8000a2a:	bd80      	pop	{r7, pc}
 8000a2c:	58024400 	.word	0x58024400
 8000a30:	0801c184 	.word	0x0801c184
 8000a34:	2400002c 	.word	0x2400002c
 8000a38:	24000030 	.word	0x24000030

08000a3c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000a3c:	b580      	push	{r7, lr}
 8000a3e:	b082      	sub	sp, #8
 8000a40:	af00      	add	r7, sp, #0
 8000a42:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8000a44:	4b15      	ldr	r3, [pc, #84]	; (8000a9c <HAL_InitTick+0x60>)
 8000a46:	781b      	ldrb	r3, [r3, #0]
 8000a48:	2b00      	cmp	r3, #0
 8000a4a:	d101      	bne.n	8000a50 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8000a4c:	2301      	movs	r3, #1
 8000a4e:	e021      	b.n	8000a94 <HAL_InitTick+0x58>
      return HAL_ERROR;
    }
  }
#else
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8000a50:	4b13      	ldr	r3, [pc, #76]	; (8000aa0 <HAL_InitTick+0x64>)
 8000a52:	681a      	ldr	r2, [r3, #0]
 8000a54:	4b11      	ldr	r3, [pc, #68]	; (8000a9c <HAL_InitTick+0x60>)
 8000a56:	781b      	ldrb	r3, [r3, #0]
 8000a58:	4619      	mov	r1, r3
 8000a5a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000a5e:	fbb3 f3f1 	udiv	r3, r3, r1
 8000a62:	fbb2 f3f3 	udiv	r3, r2, r3
 8000a66:	4618      	mov	r0, r3
 8000a68:	f000 f983 	bl	8000d72 <HAL_SYSTICK_Config>
 8000a6c:	4603      	mov	r3, r0
 8000a6e:	2b00      	cmp	r3, #0
 8000a70:	d001      	beq.n	8000a76 <HAL_InitTick+0x3a>
  {
    return HAL_ERROR;
 8000a72:	2301      	movs	r3, #1
 8000a74:	e00e      	b.n	8000a94 <HAL_InitTick+0x58>
  }
#endif

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000a76:	687b      	ldr	r3, [r7, #4]
 8000a78:	2b0f      	cmp	r3, #15
 8000a7a:	d80a      	bhi.n	8000a92 <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000a7c:	2200      	movs	r2, #0
 8000a7e:	6879      	ldr	r1, [r7, #4]
 8000a80:	f04f 30ff 	mov.w	r0, #4294967295
 8000a84:	f000 f94d 	bl	8000d22 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000a88:	4a06      	ldr	r2, [pc, #24]	; (8000aa4 <HAL_InitTick+0x68>)
 8000a8a:	687b      	ldr	r3, [r7, #4]
 8000a8c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000a8e:	2300      	movs	r3, #0
 8000a90:	e000      	b.n	8000a94 <HAL_InitTick+0x58>
    return HAL_ERROR;
 8000a92:	2301      	movs	r3, #1
}
 8000a94:	4618      	mov	r0, r3
 8000a96:	3708      	adds	r7, #8
 8000a98:	46bd      	mov	sp, r7
 8000a9a:	bd80      	pop	{r7, pc}
 8000a9c:	24000004 	.word	0x24000004
 8000aa0:	2400002c 	.word	0x2400002c
 8000aa4:	24000000 	.word	0x24000000

08000aa8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000aa8:	b480      	push	{r7}
 8000aaa:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000aac:	4b06      	ldr	r3, [pc, #24]	; (8000ac8 <HAL_IncTick+0x20>)
 8000aae:	781b      	ldrb	r3, [r3, #0]
 8000ab0:	461a      	mov	r2, r3
 8000ab2:	4b06      	ldr	r3, [pc, #24]	; (8000acc <HAL_IncTick+0x24>)
 8000ab4:	681b      	ldr	r3, [r3, #0]
 8000ab6:	4413      	add	r3, r2
 8000ab8:	4a04      	ldr	r2, [pc, #16]	; (8000acc <HAL_IncTick+0x24>)
 8000aba:	6013      	str	r3, [r2, #0]
}
 8000abc:	bf00      	nop
 8000abe:	46bd      	mov	sp, r7
 8000ac0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ac4:	4770      	bx	lr
 8000ac6:	bf00      	nop
 8000ac8:	24000004 	.word	0x24000004
 8000acc:	24008760 	.word	0x24008760

08000ad0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000ad0:	b480      	push	{r7}
 8000ad2:	af00      	add	r7, sp, #0
  return uwTick;
 8000ad4:	4b03      	ldr	r3, [pc, #12]	; (8000ae4 <HAL_GetTick+0x14>)
 8000ad6:	681b      	ldr	r3, [r3, #0]
}
 8000ad8:	4618      	mov	r0, r3
 8000ada:	46bd      	mov	sp, r7
 8000adc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ae0:	4770      	bx	lr
 8000ae2:	bf00      	nop
 8000ae4:	24008760 	.word	0x24008760

08000ae8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000ae8:	b580      	push	{r7, lr}
 8000aea:	b084      	sub	sp, #16
 8000aec:	af00      	add	r7, sp, #0
 8000aee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000af0:	f7ff ffee 	bl	8000ad0 <HAL_GetTick>
 8000af4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000af6:	687b      	ldr	r3, [r7, #4]
 8000af8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000afa:	68fb      	ldr	r3, [r7, #12]
 8000afc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000b00:	d005      	beq.n	8000b0e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000b02:	4b09      	ldr	r3, [pc, #36]	; (8000b28 <HAL_Delay+0x40>)
 8000b04:	781b      	ldrb	r3, [r3, #0]
 8000b06:	461a      	mov	r2, r3
 8000b08:	68fb      	ldr	r3, [r7, #12]
 8000b0a:	4413      	add	r3, r2
 8000b0c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000b0e:	bf00      	nop
 8000b10:	f7ff ffde 	bl	8000ad0 <HAL_GetTick>
 8000b14:	4602      	mov	r2, r0
 8000b16:	68bb      	ldr	r3, [r7, #8]
 8000b18:	1ad3      	subs	r3, r2, r3
 8000b1a:	68fa      	ldr	r2, [r7, #12]
 8000b1c:	429a      	cmp	r2, r3
 8000b1e:	d8f7      	bhi.n	8000b10 <HAL_Delay+0x28>
  {
  }
}
 8000b20:	bf00      	nop
 8000b22:	3710      	adds	r7, #16
 8000b24:	46bd      	mov	sp, r7
 8000b26:	bd80      	pop	{r7, pc}
 8000b28:	24000004 	.word	0x24000004

08000b2c <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 8000b2c:	b480      	push	{r7}
 8000b2e:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 8000b30:	4b03      	ldr	r3, [pc, #12]	; (8000b40 <HAL_GetREVID+0x14>)
 8000b32:	681b      	ldr	r3, [r3, #0]
 8000b34:	0c1b      	lsrs	r3, r3, #16
}
 8000b36:	4618      	mov	r0, r3
 8000b38:	46bd      	mov	sp, r7
 8000b3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b3e:	4770      	bx	lr
 8000b40:	5c001000 	.word	0x5c001000

08000b44 <HAL_SYSCFG_ETHInterfaceSelect>:
  *   @arg SYSCFG_ETH_MII : Select the Media Independent Interface
  *   @arg SYSCFG_ETH_RMII: Select the Reduced Media Independent Interface
  * @retval None
  */
void HAL_SYSCFG_ETHInterfaceSelect(uint32_t SYSCFG_ETHInterface)
{
 8000b44:	b480      	push	{r7}
 8000b46:	b083      	sub	sp, #12
 8000b48:	af00      	add	r7, sp, #0
 8000b4a:	6078      	str	r0, [r7, #4]
  /* Check the parameter */
  assert_param(IS_SYSCFG_ETHERNET_CONFIG(SYSCFG_ETHInterface));

  MODIFY_REG(SYSCFG->PMCR, SYSCFG_PMCR_EPIS_SEL, (uint32_t)(SYSCFG_ETHInterface));
 8000b4c:	4b06      	ldr	r3, [pc, #24]	; (8000b68 <HAL_SYSCFG_ETHInterfaceSelect+0x24>)
 8000b4e:	685b      	ldr	r3, [r3, #4]
 8000b50:	f423 0260 	bic.w	r2, r3, #14680064	; 0xe00000
 8000b54:	4904      	ldr	r1, [pc, #16]	; (8000b68 <HAL_SYSCFG_ETHInterfaceSelect+0x24>)
 8000b56:	687b      	ldr	r3, [r7, #4]
 8000b58:	4313      	orrs	r3, r2
 8000b5a:	604b      	str	r3, [r1, #4]
}
 8000b5c:	bf00      	nop
 8000b5e:	370c      	adds	r7, #12
 8000b60:	46bd      	mov	sp, r7
 8000b62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b66:	4770      	bx	lr
 8000b68:	58000400 	.word	0x58000400

08000b6c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000b6c:	b480      	push	{r7}
 8000b6e:	b085      	sub	sp, #20
 8000b70:	af00      	add	r7, sp, #0
 8000b72:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000b74:	687b      	ldr	r3, [r7, #4]
 8000b76:	f003 0307 	and.w	r3, r3, #7
 8000b7a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000b7c:	4b0b      	ldr	r3, [pc, #44]	; (8000bac <__NVIC_SetPriorityGrouping+0x40>)
 8000b7e:	68db      	ldr	r3, [r3, #12]
 8000b80:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000b82:	68ba      	ldr	r2, [r7, #8]
 8000b84:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000b88:	4013      	ands	r3, r2
 8000b8a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000b8c:	68fb      	ldr	r3, [r7, #12]
 8000b8e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000b90:	68bb      	ldr	r3, [r7, #8]
 8000b92:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8000b94:	4b06      	ldr	r3, [pc, #24]	; (8000bb0 <__NVIC_SetPriorityGrouping+0x44>)
 8000b96:	4313      	orrs	r3, r2
 8000b98:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000b9a:	4a04      	ldr	r2, [pc, #16]	; (8000bac <__NVIC_SetPriorityGrouping+0x40>)
 8000b9c:	68bb      	ldr	r3, [r7, #8]
 8000b9e:	60d3      	str	r3, [r2, #12]
}
 8000ba0:	bf00      	nop
 8000ba2:	3714      	adds	r7, #20
 8000ba4:	46bd      	mov	sp, r7
 8000ba6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000baa:	4770      	bx	lr
 8000bac:	e000ed00 	.word	0xe000ed00
 8000bb0:	05fa0000 	.word	0x05fa0000

08000bb4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000bb4:	b480      	push	{r7}
 8000bb6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000bb8:	4b04      	ldr	r3, [pc, #16]	; (8000bcc <__NVIC_GetPriorityGrouping+0x18>)
 8000bba:	68db      	ldr	r3, [r3, #12]
 8000bbc:	0a1b      	lsrs	r3, r3, #8
 8000bbe:	f003 0307 	and.w	r3, r3, #7
}
 8000bc2:	4618      	mov	r0, r3
 8000bc4:	46bd      	mov	sp, r7
 8000bc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bca:	4770      	bx	lr
 8000bcc:	e000ed00 	.word	0xe000ed00

08000bd0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000bd0:	b480      	push	{r7}
 8000bd2:	b083      	sub	sp, #12
 8000bd4:	af00      	add	r7, sp, #0
 8000bd6:	4603      	mov	r3, r0
 8000bd8:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8000bda:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000bde:	2b00      	cmp	r3, #0
 8000be0:	db0b      	blt.n	8000bfa <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000be2:	88fb      	ldrh	r3, [r7, #6]
 8000be4:	f003 021f 	and.w	r2, r3, #31
 8000be8:	4907      	ldr	r1, [pc, #28]	; (8000c08 <__NVIC_EnableIRQ+0x38>)
 8000bea:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000bee:	095b      	lsrs	r3, r3, #5
 8000bf0:	2001      	movs	r0, #1
 8000bf2:	fa00 f202 	lsl.w	r2, r0, r2
 8000bf6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000bfa:	bf00      	nop
 8000bfc:	370c      	adds	r7, #12
 8000bfe:	46bd      	mov	sp, r7
 8000c00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c04:	4770      	bx	lr
 8000c06:	bf00      	nop
 8000c08:	e000e100 	.word	0xe000e100

08000c0c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000c0c:	b480      	push	{r7}
 8000c0e:	b083      	sub	sp, #12
 8000c10:	af00      	add	r7, sp, #0
 8000c12:	4603      	mov	r3, r0
 8000c14:	6039      	str	r1, [r7, #0]
 8000c16:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8000c18:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000c1c:	2b00      	cmp	r3, #0
 8000c1e:	db0a      	blt.n	8000c36 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000c20:	683b      	ldr	r3, [r7, #0]
 8000c22:	b2da      	uxtb	r2, r3
 8000c24:	490c      	ldr	r1, [pc, #48]	; (8000c58 <__NVIC_SetPriority+0x4c>)
 8000c26:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000c2a:	0112      	lsls	r2, r2, #4
 8000c2c:	b2d2      	uxtb	r2, r2
 8000c2e:	440b      	add	r3, r1
 8000c30:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000c34:	e00a      	b.n	8000c4c <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000c36:	683b      	ldr	r3, [r7, #0]
 8000c38:	b2da      	uxtb	r2, r3
 8000c3a:	4908      	ldr	r1, [pc, #32]	; (8000c5c <__NVIC_SetPriority+0x50>)
 8000c3c:	88fb      	ldrh	r3, [r7, #6]
 8000c3e:	f003 030f 	and.w	r3, r3, #15
 8000c42:	3b04      	subs	r3, #4
 8000c44:	0112      	lsls	r2, r2, #4
 8000c46:	b2d2      	uxtb	r2, r2
 8000c48:	440b      	add	r3, r1
 8000c4a:	761a      	strb	r2, [r3, #24]
}
 8000c4c:	bf00      	nop
 8000c4e:	370c      	adds	r7, #12
 8000c50:	46bd      	mov	sp, r7
 8000c52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c56:	4770      	bx	lr
 8000c58:	e000e100 	.word	0xe000e100
 8000c5c:	e000ed00 	.word	0xe000ed00

08000c60 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000c60:	b480      	push	{r7}
 8000c62:	b089      	sub	sp, #36	; 0x24
 8000c64:	af00      	add	r7, sp, #0
 8000c66:	60f8      	str	r0, [r7, #12]
 8000c68:	60b9      	str	r1, [r7, #8]
 8000c6a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000c6c:	68fb      	ldr	r3, [r7, #12]
 8000c6e:	f003 0307 	and.w	r3, r3, #7
 8000c72:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000c74:	69fb      	ldr	r3, [r7, #28]
 8000c76:	f1c3 0307 	rsb	r3, r3, #7
 8000c7a:	2b04      	cmp	r3, #4
 8000c7c:	bf28      	it	cs
 8000c7e:	2304      	movcs	r3, #4
 8000c80:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000c82:	69fb      	ldr	r3, [r7, #28]
 8000c84:	3304      	adds	r3, #4
 8000c86:	2b06      	cmp	r3, #6
 8000c88:	d902      	bls.n	8000c90 <NVIC_EncodePriority+0x30>
 8000c8a:	69fb      	ldr	r3, [r7, #28]
 8000c8c:	3b03      	subs	r3, #3
 8000c8e:	e000      	b.n	8000c92 <NVIC_EncodePriority+0x32>
 8000c90:	2300      	movs	r3, #0
 8000c92:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000c94:	f04f 32ff 	mov.w	r2, #4294967295
 8000c98:	69bb      	ldr	r3, [r7, #24]
 8000c9a:	fa02 f303 	lsl.w	r3, r2, r3
 8000c9e:	43da      	mvns	r2, r3
 8000ca0:	68bb      	ldr	r3, [r7, #8]
 8000ca2:	401a      	ands	r2, r3
 8000ca4:	697b      	ldr	r3, [r7, #20]
 8000ca6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000ca8:	f04f 31ff 	mov.w	r1, #4294967295
 8000cac:	697b      	ldr	r3, [r7, #20]
 8000cae:	fa01 f303 	lsl.w	r3, r1, r3
 8000cb2:	43d9      	mvns	r1, r3
 8000cb4:	687b      	ldr	r3, [r7, #4]
 8000cb6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000cb8:	4313      	orrs	r3, r2
         );
}
 8000cba:	4618      	mov	r0, r3
 8000cbc:	3724      	adds	r7, #36	; 0x24
 8000cbe:	46bd      	mov	sp, r7
 8000cc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cc4:	4770      	bx	lr
	...

08000cc8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000cc8:	b580      	push	{r7, lr}
 8000cca:	b082      	sub	sp, #8
 8000ccc:	af00      	add	r7, sp, #0
 8000cce:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000cd0:	687b      	ldr	r3, [r7, #4]
 8000cd2:	3b01      	subs	r3, #1
 8000cd4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000cd8:	d301      	bcc.n	8000cde <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000cda:	2301      	movs	r3, #1
 8000cdc:	e00f      	b.n	8000cfe <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000cde:	4a0a      	ldr	r2, [pc, #40]	; (8000d08 <SysTick_Config+0x40>)
 8000ce0:	687b      	ldr	r3, [r7, #4]
 8000ce2:	3b01      	subs	r3, #1
 8000ce4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000ce6:	210f      	movs	r1, #15
 8000ce8:	f04f 30ff 	mov.w	r0, #4294967295
 8000cec:	f7ff ff8e 	bl	8000c0c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000cf0:	4b05      	ldr	r3, [pc, #20]	; (8000d08 <SysTick_Config+0x40>)
 8000cf2:	2200      	movs	r2, #0
 8000cf4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000cf6:	4b04      	ldr	r3, [pc, #16]	; (8000d08 <SysTick_Config+0x40>)
 8000cf8:	2207      	movs	r2, #7
 8000cfa:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000cfc:	2300      	movs	r3, #0
}
 8000cfe:	4618      	mov	r0, r3
 8000d00:	3708      	adds	r7, #8
 8000d02:	46bd      	mov	sp, r7
 8000d04:	bd80      	pop	{r7, pc}
 8000d06:	bf00      	nop
 8000d08:	e000e010 	.word	0xe000e010

08000d0c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000d0c:	b580      	push	{r7, lr}
 8000d0e:	b082      	sub	sp, #8
 8000d10:	af00      	add	r7, sp, #0
 8000d12:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000d14:	6878      	ldr	r0, [r7, #4]
 8000d16:	f7ff ff29 	bl	8000b6c <__NVIC_SetPriorityGrouping>
}
 8000d1a:	bf00      	nop
 8000d1c:	3708      	adds	r7, #8
 8000d1e:	46bd      	mov	sp, r7
 8000d20:	bd80      	pop	{r7, pc}

08000d22 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000d22:	b580      	push	{r7, lr}
 8000d24:	b086      	sub	sp, #24
 8000d26:	af00      	add	r7, sp, #0
 8000d28:	4603      	mov	r3, r0
 8000d2a:	60b9      	str	r1, [r7, #8]
 8000d2c:	607a      	str	r2, [r7, #4]
 8000d2e:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8000d30:	f7ff ff40 	bl	8000bb4 <__NVIC_GetPriorityGrouping>
 8000d34:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000d36:	687a      	ldr	r2, [r7, #4]
 8000d38:	68b9      	ldr	r1, [r7, #8]
 8000d3a:	6978      	ldr	r0, [r7, #20]
 8000d3c:	f7ff ff90 	bl	8000c60 <NVIC_EncodePriority>
 8000d40:	4602      	mov	r2, r0
 8000d42:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8000d46:	4611      	mov	r1, r2
 8000d48:	4618      	mov	r0, r3
 8000d4a:	f7ff ff5f 	bl	8000c0c <__NVIC_SetPriority>
}
 8000d4e:	bf00      	nop
 8000d50:	3718      	adds	r7, #24
 8000d52:	46bd      	mov	sp, r7
 8000d54:	bd80      	pop	{r7, pc}

08000d56 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000d56:	b580      	push	{r7, lr}
 8000d58:	b082      	sub	sp, #8
 8000d5a:	af00      	add	r7, sp, #0
 8000d5c:	4603      	mov	r3, r0
 8000d5e:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000d60:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000d64:	4618      	mov	r0, r3
 8000d66:	f7ff ff33 	bl	8000bd0 <__NVIC_EnableIRQ>
}
 8000d6a:	bf00      	nop
 8000d6c:	3708      	adds	r7, #8
 8000d6e:	46bd      	mov	sp, r7
 8000d70:	bd80      	pop	{r7, pc}

08000d72 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000d72:	b580      	push	{r7, lr}
 8000d74:	b082      	sub	sp, #8
 8000d76:	af00      	add	r7, sp, #0
 8000d78:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000d7a:	6878      	ldr	r0, [r7, #4]
 8000d7c:	f7ff ffa4 	bl	8000cc8 <SysTick_Config>
 8000d80:	4603      	mov	r3, r0
}
 8000d82:	4618      	mov	r0, r3
 8000d84:	3708      	adds	r7, #8
 8000d86:	46bd      	mov	sp, r7
 8000d88:	bd80      	pop	{r7, pc}
	...

08000d8c <HAL_MPU_Disable>:
/**
  * @brief  Disables the MPU
  * @retval None
  */
void HAL_MPU_Disable(void)
{
 8000d8c:	b480      	push	{r7}
 8000d8e:	af00      	add	r7, sp, #0
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
 8000d90:	f3bf 8f5f 	dmb	sy
  /* Make sure outstanding transfers are done */
  __DMB();

  /* Disable fault exceptions */
  SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTENA_Msk;
 8000d94:	4b06      	ldr	r3, [pc, #24]	; (8000db0 <HAL_MPU_Disable+0x24>)
 8000d96:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000d98:	4a05      	ldr	r2, [pc, #20]	; (8000db0 <HAL_MPU_Disable+0x24>)
 8000d9a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000d9e:	6253      	str	r3, [r2, #36]	; 0x24

  /* Disable the MPU and clear the control register*/
  MPU->CTRL = 0;
 8000da0:	4b04      	ldr	r3, [pc, #16]	; (8000db4 <HAL_MPU_Disable+0x28>)
 8000da2:	2200      	movs	r2, #0
 8000da4:	605a      	str	r2, [r3, #4]
}
 8000da6:	bf00      	nop
 8000da8:	46bd      	mov	sp, r7
 8000daa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dae:	4770      	bx	lr
 8000db0:	e000ed00 	.word	0xe000ed00
 8000db4:	e000ed90 	.word	0xe000ed90

08000db8 <HAL_MPU_Enable>:
  *            @arg MPU_PRIVILEGED_DEFAULT
  *            @arg MPU_HFNMI_PRIVDEF
  * @retval None
  */
void HAL_MPU_Enable(uint32_t MPU_Control)
{
 8000db8:	b480      	push	{r7}
 8000dba:	b083      	sub	sp, #12
 8000dbc:	af00      	add	r7, sp, #0
 8000dbe:	6078      	str	r0, [r7, #4]
  /* Enable the MPU */
  MPU->CTRL = MPU_Control | MPU_CTRL_ENABLE_Msk;
 8000dc0:	4a0a      	ldr	r2, [pc, #40]	; (8000dec <HAL_MPU_Enable+0x34>)
 8000dc2:	687b      	ldr	r3, [r7, #4]
 8000dc4:	f043 0301 	orr.w	r3, r3, #1
 8000dc8:	6053      	str	r3, [r2, #4]

  /* Enable fault exceptions */
  SCB->SHCSR |= SCB_SHCSR_MEMFAULTENA_Msk;
 8000dca:	4b09      	ldr	r3, [pc, #36]	; (8000df0 <HAL_MPU_Enable+0x38>)
 8000dcc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000dce:	4a08      	ldr	r2, [pc, #32]	; (8000df0 <HAL_MPU_Enable+0x38>)
 8000dd0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000dd4:	6253      	str	r3, [r2, #36]	; 0x24
  __ASM volatile ("dsb 0xF":::"memory");
 8000dd6:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8000dda:	f3bf 8f6f 	isb	sy

  /* Ensure MPU setting take effects */
  __DSB();
  __ISB();
}
 8000dde:	bf00      	nop
 8000de0:	370c      	adds	r7, #12
 8000de2:	46bd      	mov	sp, r7
 8000de4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000de8:	4770      	bx	lr
 8000dea:	bf00      	nop
 8000dec:	e000ed90 	.word	0xe000ed90
 8000df0:	e000ed00 	.word	0xe000ed00

08000df4 <HAL_MPU_ConfigRegion>:
  * @param  MPU_Init Pointer to a MPU_Region_InitTypeDef structure that contains
  *                  the initialization and configuration information.
  * @retval None
  */
void HAL_MPU_ConfigRegion(MPU_Region_InitTypeDef *MPU_Init)
{
 8000df4:	b480      	push	{r7}
 8000df6:	b083      	sub	sp, #12
 8000df8:	af00      	add	r7, sp, #0
 8000dfa:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_MPU_REGION_NUMBER(MPU_Init->Number));
  assert_param(IS_MPU_REGION_ENABLE(MPU_Init->Enable));

  /* Set the Region number */
  MPU->RNR = MPU_Init->Number;
 8000dfc:	687b      	ldr	r3, [r7, #4]
 8000dfe:	785a      	ldrb	r2, [r3, #1]
 8000e00:	4b1d      	ldr	r3, [pc, #116]	; (8000e78 <HAL_MPU_ConfigRegion+0x84>)
 8000e02:	609a      	str	r2, [r3, #8]

  if ((MPU_Init->Enable) != 0UL)
 8000e04:	687b      	ldr	r3, [r7, #4]
 8000e06:	781b      	ldrb	r3, [r3, #0]
 8000e08:	2b00      	cmp	r3, #0
 8000e0a:	d029      	beq.n	8000e60 <HAL_MPU_ConfigRegion+0x6c>
    assert_param(IS_MPU_ACCESS_CACHEABLE(MPU_Init->IsCacheable));
    assert_param(IS_MPU_ACCESS_BUFFERABLE(MPU_Init->IsBufferable));
    assert_param(IS_MPU_SUB_REGION_DISABLE(MPU_Init->SubRegionDisable));
    assert_param(IS_MPU_REGION_SIZE(MPU_Init->Size));

    MPU->RBAR = MPU_Init->BaseAddress;
 8000e0c:	4a1a      	ldr	r2, [pc, #104]	; (8000e78 <HAL_MPU_ConfigRegion+0x84>)
 8000e0e:	687b      	ldr	r3, [r7, #4]
 8000e10:	685b      	ldr	r3, [r3, #4]
 8000e12:	60d3      	str	r3, [r2, #12]
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8000e14:	687b      	ldr	r3, [r7, #4]
 8000e16:	7b1b      	ldrb	r3, [r3, #12]
 8000e18:	071a      	lsls	r2, r3, #28
                ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 8000e1a:	687b      	ldr	r3, [r7, #4]
 8000e1c:	7adb      	ldrb	r3, [r3, #11]
 8000e1e:	061b      	lsls	r3, r3, #24
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8000e20:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 8000e22:	687b      	ldr	r3, [r7, #4]
 8000e24:	7a9b      	ldrb	r3, [r3, #10]
 8000e26:	04db      	lsls	r3, r3, #19
                ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 8000e28:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 8000e2a:	687b      	ldr	r3, [r7, #4]
 8000e2c:	7b5b      	ldrb	r3, [r3, #13]
 8000e2e:	049b      	lsls	r3, r3, #18
                ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 8000e30:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 8000e32:	687b      	ldr	r3, [r7, #4]
 8000e34:	7b9b      	ldrb	r3, [r3, #14]
 8000e36:	045b      	lsls	r3, r3, #17
                ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 8000e38:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 8000e3a:	687b      	ldr	r3, [r7, #4]
 8000e3c:	7bdb      	ldrb	r3, [r3, #15]
 8000e3e:	041b      	lsls	r3, r3, #16
                ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 8000e40:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 8000e42:	687b      	ldr	r3, [r7, #4]
 8000e44:	7a5b      	ldrb	r3, [r3, #9]
 8000e46:	021b      	lsls	r3, r3, #8
                ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 8000e48:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8000e4a:	687b      	ldr	r3, [r7, #4]
 8000e4c:	7a1b      	ldrb	r3, [r3, #8]
 8000e4e:	005b      	lsls	r3, r3, #1
                ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 8000e50:	4313      	orrs	r3, r2
                ((uint32_t)MPU_Init->Enable                  << MPU_RASR_ENABLE_Pos);
 8000e52:	687a      	ldr	r2, [r7, #4]
 8000e54:	7812      	ldrb	r2, [r2, #0]
 8000e56:	4611      	mov	r1, r2
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8000e58:	4a07      	ldr	r2, [pc, #28]	; (8000e78 <HAL_MPU_ConfigRegion+0x84>)
                ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8000e5a:	430b      	orrs	r3, r1
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8000e5c:	6113      	str	r3, [r2, #16]
  else
  {
    MPU->RBAR = 0x00;
    MPU->RASR = 0x00;
  }
}
 8000e5e:	e005      	b.n	8000e6c <HAL_MPU_ConfigRegion+0x78>
    MPU->RBAR = 0x00;
 8000e60:	4b05      	ldr	r3, [pc, #20]	; (8000e78 <HAL_MPU_ConfigRegion+0x84>)
 8000e62:	2200      	movs	r2, #0
 8000e64:	60da      	str	r2, [r3, #12]
    MPU->RASR = 0x00;
 8000e66:	4b04      	ldr	r3, [pc, #16]	; (8000e78 <HAL_MPU_ConfigRegion+0x84>)
 8000e68:	2200      	movs	r2, #0
 8000e6a:	611a      	str	r2, [r3, #16]
}
 8000e6c:	bf00      	nop
 8000e6e:	370c      	adds	r7, #12
 8000e70:	46bd      	mov	sp, r7
 8000e72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e76:	4770      	bx	lr
 8000e78:	e000ed90 	.word	0xe000ed90

08000e7c <HAL_ETH_Init>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 8000e7c:	b580      	push	{r7, lr}
 8000e7e:	b084      	sub	sp, #16
 8000e80:	af00      	add	r7, sp, #0
 8000e82:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if(heth == NULL)
 8000e84:	687b      	ldr	r3, [r7, #4]
 8000e86:	2b00      	cmp	r3, #0
 8000e88:	d101      	bne.n	8000e8e <HAL_ETH_Init+0x12>
  {
    return HAL_ERROR;
 8000e8a:	2301      	movs	r3, #1
 8000e8c:	e0c6      	b.n	800101c <HAL_ETH_Init+0x1a0>
  }

#else

  /* Check the ETH peripheral state */
  if(heth->gState == HAL_ETH_STATE_RESET)
 8000e8e:	687b      	ldr	r3, [r7, #4]
 8000e90:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8000e92:	2b00      	cmp	r3, #0
 8000e94:	d102      	bne.n	8000e9c <HAL_ETH_Init+0x20>
  {
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 8000e96:	6878      	ldr	r0, [r7, #4]
 8000e98:	f012 f97e 	bl	8013198 <HAL_ETH_MspInit>
  }
#endif /* (USE_HAL_ETH_REGISTER_CALLBACKS) */

  heth->gState = HAL_ETH_STATE_BUSY;
 8000e9c:	687b      	ldr	r3, [r7, #4]
 8000e9e:	2223      	movs	r2, #35	; 0x23
 8000ea0:	655a      	str	r2, [r3, #84]	; 0x54

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000ea2:	4b60      	ldr	r3, [pc, #384]	; (8001024 <HAL_ETH_Init+0x1a8>)
 8000ea4:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8000ea8:	4a5e      	ldr	r2, [pc, #376]	; (8001024 <HAL_ETH_Init+0x1a8>)
 8000eaa:	f043 0302 	orr.w	r3, r3, #2
 8000eae:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8000eb2:	4b5c      	ldr	r3, [pc, #368]	; (8001024 <HAL_ETH_Init+0x1a8>)
 8000eb4:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8000eb8:	f003 0302 	and.w	r3, r3, #2
 8000ebc:	60bb      	str	r3, [r7, #8]
 8000ebe:	68bb      	ldr	r3, [r7, #8]

  if(heth->Init.MediaInterface == HAL_ETH_MII_MODE)
 8000ec0:	687b      	ldr	r3, [r7, #4]
 8000ec2:	7a1b      	ldrb	r3, [r3, #8]
 8000ec4:	2b00      	cmp	r3, #0
 8000ec6:	d103      	bne.n	8000ed0 <HAL_ETH_Init+0x54>
  {
    HAL_SYSCFG_ETHInterfaceSelect(SYSCFG_ETH_MII);
 8000ec8:	2000      	movs	r0, #0
 8000eca:	f7ff fe3b 	bl	8000b44 <HAL_SYSCFG_ETHInterfaceSelect>
 8000ece:	e003      	b.n	8000ed8 <HAL_ETH_Init+0x5c>
  }
  else
  {
    HAL_SYSCFG_ETHInterfaceSelect(SYSCFG_ETH_RMII);
 8000ed0:	f44f 0000 	mov.w	r0, #8388608	; 0x800000
 8000ed4:	f7ff fe36 	bl	8000b44 <HAL_SYSCFG_ETHInterfaceSelect>
  }

  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  SET_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR);
 8000ed8:	687b      	ldr	r3, [r7, #4]
 8000eda:	681b      	ldr	r3, [r3, #0]
 8000edc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8000ee0:	681a      	ldr	r2, [r3, #0]
 8000ee2:	687b      	ldr	r3, [r7, #4]
 8000ee4:	681b      	ldr	r3, [r3, #0]
 8000ee6:	f042 0201 	orr.w	r2, r2, #1
 8000eea:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8000eee:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8000ef0:	f7ff fdee 	bl	8000ad0 <HAL_GetTick>
 8000ef4:	60f8      	str	r0, [r7, #12]

  /* Wait for software reset */
  while (READ_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR) > 0U)
 8000ef6:	e00f      	b.n	8000f18 <HAL_ETH_Init+0x9c>
  {
    if(((HAL_GetTick() - tickstart ) > ETH_SWRESET_TIMEOUT))
 8000ef8:	f7ff fdea 	bl	8000ad0 <HAL_GetTick>
 8000efc:	4602      	mov	r2, r0
 8000efe:	68fb      	ldr	r3, [r7, #12]
 8000f00:	1ad3      	subs	r3, r2, r3
 8000f02:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8000f06:	d907      	bls.n	8000f18 <HAL_ETH_Init+0x9c>
    {
      /* Set Error Code */
      heth->ErrorCode = HAL_ETH_ERROR_TIMEOUT;
 8000f08:	687b      	ldr	r3, [r7, #4]
 8000f0a:	2204      	movs	r2, #4
 8000f0c:	65da      	str	r2, [r3, #92]	; 0x5c
      /* Set State as Error */
      heth->gState = HAL_ETH_STATE_ERROR;
 8000f0e:	687b      	ldr	r3, [r7, #4]
 8000f10:	22e0      	movs	r2, #224	; 0xe0
 8000f12:	655a      	str	r2, [r3, #84]	; 0x54
      /* Return Error */
      return HAL_ERROR;
 8000f14:	2301      	movs	r3, #1
 8000f16:	e081      	b.n	800101c <HAL_ETH_Init+0x1a0>
  while (READ_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR) > 0U)
 8000f18:	687b      	ldr	r3, [r7, #4]
 8000f1a:	681b      	ldr	r3, [r3, #0]
 8000f1c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8000f20:	681b      	ldr	r3, [r3, #0]
 8000f22:	f003 0301 	and.w	r3, r3, #1
 8000f26:	2b00      	cmp	r3, #0
 8000f28:	d1e6      	bne.n	8000ef8 <HAL_ETH_Init+0x7c>
    }
  }

  /*------------------ MDIO CSR Clock Range Configuration --------------------*/
  ETH_MAC_MDIO_ClkConfig(heth);
 8000f2a:	6878      	ldr	r0, [r7, #4]
 8000f2c:	f001 fa5a 	bl	80023e4 <ETH_MAC_MDIO_ClkConfig>

  /*------------------ MAC LPI 1US Tic Counter Configuration --------------------*/
  WRITE_REG(heth->Instance->MAC1USTCR, (((uint32_t)HAL_RCC_GetHCLKFreq() / ETH_MAC_US_TICK) - 1U));
 8000f30:	f002 fe78 	bl	8003c24 <HAL_RCC_GetHCLKFreq>
 8000f34:	4602      	mov	r2, r0
 8000f36:	4b3c      	ldr	r3, [pc, #240]	; (8001028 <HAL_ETH_Init+0x1ac>)
 8000f38:	fba3 2302 	umull	r2, r3, r3, r2
 8000f3c:	0c9a      	lsrs	r2, r3, #18
 8000f3e:	687b      	ldr	r3, [r7, #4]
 8000f40:	681b      	ldr	r3, [r3, #0]
 8000f42:	3a01      	subs	r2, #1
 8000f44:	f8c3 20dc 	str.w	r2, [r3, #220]	; 0xdc

  /*------------------ MAC, MTL and DMA default Configuration ----------------*/
  ETH_MACDMAConfig(heth);
 8000f48:	6878      	ldr	r0, [r7, #4]
 8000f4a:	f001 f9ad 	bl	80022a8 <ETH_MACDMAConfig>

  /* SET DSL to 64 bit */
  MODIFY_REG(heth->Instance->DMACCR, ETH_DMACCR_DSL, ETH_DMACCR_DSL_64BIT);
 8000f4e:	687b      	ldr	r3, [r7, #4]
 8000f50:	681b      	ldr	r3, [r3, #0]
 8000f52:	f503 5388 	add.w	r3, r3, #4352	; 0x1100
 8000f56:	681b      	ldr	r3, [r3, #0]
 8000f58:	f423 12e0 	bic.w	r2, r3, #1835008	; 0x1c0000
 8000f5c:	687b      	ldr	r3, [r7, #4]
 8000f5e:	681b      	ldr	r3, [r3, #0]
 8000f60:	f442 2200 	orr.w	r2, r2, #524288	; 0x80000
 8000f64:	f503 5388 	add.w	r3, r3, #4352	; 0x1100
 8000f68:	601a      	str	r2, [r3, #0]

  /* Set Receive Buffers Length (must be a multiple of 4) */
  if ((heth->Init.RxBuffLen % 0x4U) != 0x0U)
 8000f6a:	687b      	ldr	r3, [r7, #4]
 8000f6c:	695b      	ldr	r3, [r3, #20]
 8000f6e:	f003 0303 	and.w	r3, r3, #3
 8000f72:	2b00      	cmp	r3, #0
 8000f74:	d007      	beq.n	8000f86 <HAL_ETH_Init+0x10a>
  {
    /* Set Error Code */
    heth->ErrorCode = HAL_ETH_ERROR_PARAM;
 8000f76:	687b      	ldr	r3, [r7, #4]
 8000f78:	2201      	movs	r2, #1
 8000f7a:	65da      	str	r2, [r3, #92]	; 0x5c
    /* Set State as Error */
    heth->gState = HAL_ETH_STATE_ERROR;
 8000f7c:	687b      	ldr	r3, [r7, #4]
 8000f7e:	22e0      	movs	r2, #224	; 0xe0
 8000f80:	655a      	str	r2, [r3, #84]	; 0x54
    /* Return Error */
    return HAL_ERROR;
 8000f82:	2301      	movs	r3, #1
 8000f84:	e04a      	b.n	800101c <HAL_ETH_Init+0x1a0>
  }
  else
  {
    MODIFY_REG(heth->Instance->DMACRCR, ETH_DMACRCR_RBSZ, ((heth->Init.RxBuffLen) << 1));
 8000f86:	687b      	ldr	r3, [r7, #4]
 8000f88:	681a      	ldr	r2, [r3, #0]
 8000f8a:	f241 1308 	movw	r3, #4360	; 0x1108
 8000f8e:	4413      	add	r3, r2
 8000f90:	681a      	ldr	r2, [r3, #0]
 8000f92:	4b26      	ldr	r3, [pc, #152]	; (800102c <HAL_ETH_Init+0x1b0>)
 8000f94:	4013      	ands	r3, r2
 8000f96:	687a      	ldr	r2, [r7, #4]
 8000f98:	6952      	ldr	r2, [r2, #20]
 8000f9a:	0052      	lsls	r2, r2, #1
 8000f9c:	6879      	ldr	r1, [r7, #4]
 8000f9e:	6809      	ldr	r1, [r1, #0]
 8000fa0:	431a      	orrs	r2, r3
 8000fa2:	f241 1308 	movw	r3, #4360	; 0x1108
 8000fa6:	440b      	add	r3, r1
 8000fa8:	601a      	str	r2, [r3, #0]
  }

  /*------------------ DMA Tx Descriptors Configuration ----------------------*/
  ETH_DMATxDescListInit(heth);
 8000faa:	6878      	ldr	r0, [r7, #4]
 8000fac:	f001 fa72 	bl	8002494 <ETH_DMATxDescListInit>

  /*------------------ DMA Rx Descriptors Configuration ----------------------*/
  ETH_DMARxDescListInit(heth);
 8000fb0:	6878      	ldr	r0, [r7, #4]
 8000fb2:	f001 fab6 	bl	8002522 <ETH_DMARxDescListInit>

  /*--------------------- ETHERNET MAC Address Configuration ------------------*/
  /* Set MAC addr bits 32 to 47 */
  heth->Instance->MACA0HR = (((uint32_t)(heth->Init.MACAddr[5]) << 8) | (uint32_t)heth->Init.MACAddr[4]);
 8000fb6:	687b      	ldr	r3, [r7, #4]
 8000fb8:	685b      	ldr	r3, [r3, #4]
 8000fba:	3305      	adds	r3, #5
 8000fbc:	781b      	ldrb	r3, [r3, #0]
 8000fbe:	021a      	lsls	r2, r3, #8
 8000fc0:	687b      	ldr	r3, [r7, #4]
 8000fc2:	685b      	ldr	r3, [r3, #4]
 8000fc4:	3304      	adds	r3, #4
 8000fc6:	781b      	ldrb	r3, [r3, #0]
 8000fc8:	4619      	mov	r1, r3
 8000fca:	687b      	ldr	r3, [r7, #4]
 8000fcc:	681b      	ldr	r3, [r3, #0]
 8000fce:	430a      	orrs	r2, r1
 8000fd0:	f8c3 2300 	str.w	r2, [r3, #768]	; 0x300
  /* Set MAC addr bits 0 to 31 */
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 8000fd4:	687b      	ldr	r3, [r7, #4]
 8000fd6:	685b      	ldr	r3, [r3, #4]
 8000fd8:	3303      	adds	r3, #3
 8000fda:	781b      	ldrb	r3, [r3, #0]
 8000fdc:	061a      	lsls	r2, r3, #24
 8000fde:	687b      	ldr	r3, [r7, #4]
 8000fe0:	685b      	ldr	r3, [r3, #4]
 8000fe2:	3302      	adds	r3, #2
 8000fe4:	781b      	ldrb	r3, [r3, #0]
 8000fe6:	041b      	lsls	r3, r3, #16
 8000fe8:	431a      	orrs	r2, r3
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 8000fea:	687b      	ldr	r3, [r7, #4]
 8000fec:	685b      	ldr	r3, [r3, #4]
 8000fee:	3301      	adds	r3, #1
 8000ff0:	781b      	ldrb	r3, [r3, #0]
 8000ff2:	021b      	lsls	r3, r3, #8
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 8000ff4:	431a      	orrs	r2, r3
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 8000ff6:	687b      	ldr	r3, [r7, #4]
 8000ff8:	685b      	ldr	r3, [r3, #4]
 8000ffa:	781b      	ldrb	r3, [r3, #0]
 8000ffc:	4619      	mov	r1, r3
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 8000ffe:	687b      	ldr	r3, [r7, #4]
 8001000:	681b      	ldr	r3, [r3, #0]
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 8001002:	430a      	orrs	r2, r1
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 8001004:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304

  heth->ErrorCode = HAL_ETH_ERROR_NONE;
 8001008:	687b      	ldr	r3, [r7, #4]
 800100a:	2200      	movs	r2, #0
 800100c:	65da      	str	r2, [r3, #92]	; 0x5c
  heth->gState = HAL_ETH_STATE_READY;
 800100e:	687b      	ldr	r3, [r7, #4]
 8001010:	2210      	movs	r2, #16
 8001012:	655a      	str	r2, [r3, #84]	; 0x54
  heth->RxState = HAL_ETH_STATE_READY;
 8001014:	687b      	ldr	r3, [r7, #4]
 8001016:	2210      	movs	r2, #16
 8001018:	659a      	str	r2, [r3, #88]	; 0x58

  return HAL_OK;
 800101a:	2300      	movs	r3, #0
}
 800101c:	4618      	mov	r0, r3
 800101e:	3710      	adds	r7, #16
 8001020:	46bd      	mov	sp, r7
 8001022:	bd80      	pop	{r7, pc}
 8001024:	58024400 	.word	0x58024400
 8001028:	431bde83 	.word	0x431bde83
 800102c:	ffff8001 	.word	0xffff8001

08001030 <HAL_ETH_DescAssignMemory>:
  * @param  pBuffer1: address of buffer 1
  * @param  pBuffer2: address of buffer 2 if available
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_DescAssignMemory(ETH_HandleTypeDef *heth, uint32_t Index, uint8_t *pBuffer1, uint8_t *pBuffer2)
{
 8001030:	b480      	push	{r7}
 8001032:	b087      	sub	sp, #28
 8001034:	af00      	add	r7, sp, #0
 8001036:	60f8      	str	r0, [r7, #12]
 8001038:	60b9      	str	r1, [r7, #8]
 800103a:	607a      	str	r2, [r7, #4]
 800103c:	603b      	str	r3, [r7, #0]
  ETH_DMADescTypeDef *dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[Index];
 800103e:	68fa      	ldr	r2, [r7, #12]
 8001040:	68bb      	ldr	r3, [r7, #8]
 8001042:	330a      	adds	r3, #10
 8001044:	009b      	lsls	r3, r3, #2
 8001046:	4413      	add	r3, r2
 8001048:	685b      	ldr	r3, [r3, #4]
 800104a:	617b      	str	r3, [r7, #20]

  if((pBuffer1 == NULL) || (Index >= (uint32_t)ETH_RX_DESC_CNT))
 800104c:	687b      	ldr	r3, [r7, #4]
 800104e:	2b00      	cmp	r3, #0
 8001050:	d002      	beq.n	8001058 <HAL_ETH_DescAssignMemory+0x28>
 8001052:	68bb      	ldr	r3, [r7, #8]
 8001054:	2b03      	cmp	r3, #3
 8001056:	d904      	bls.n	8001062 <HAL_ETH_DescAssignMemory+0x32>
  {
    /* Set Error Code */
    heth->ErrorCode = HAL_ETH_ERROR_PARAM;
 8001058:	68fb      	ldr	r3, [r7, #12]
 800105a:	2201      	movs	r2, #1
 800105c:	65da      	str	r2, [r3, #92]	; 0x5c
    /* Return Error */
    return HAL_ERROR;
 800105e:	2301      	movs	r3, #1
 8001060:	e021      	b.n	80010a6 <HAL_ETH_DescAssignMemory+0x76>
  }

  /* write buffer address to RDES0 */
  WRITE_REG(dmarxdesc->DESC0, (uint32_t)pBuffer1);
 8001062:	687a      	ldr	r2, [r7, #4]
 8001064:	697b      	ldr	r3, [r7, #20]
 8001066:	601a      	str	r2, [r3, #0]
  /* store buffer address */
  WRITE_REG(dmarxdesc->BackupAddr0, (uint32_t)pBuffer1);
 8001068:	687a      	ldr	r2, [r7, #4]
 800106a:	697b      	ldr	r3, [r7, #20]
 800106c:	611a      	str	r2, [r3, #16]
  /* set buffer address valid bit to RDES3 */
  SET_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCRF_BUF1V);
 800106e:	697b      	ldr	r3, [r7, #20]
 8001070:	68db      	ldr	r3, [r3, #12]
 8001072:	f043 7280 	orr.w	r2, r3, #16777216	; 0x1000000
 8001076:	697b      	ldr	r3, [r7, #20]
 8001078:	60da      	str	r2, [r3, #12]

  if(pBuffer2 != NULL)
 800107a:	683b      	ldr	r3, [r7, #0]
 800107c:	2b00      	cmp	r3, #0
 800107e:	d00b      	beq.n	8001098 <HAL_ETH_DescAssignMemory+0x68>
  {
    /* write buffer 2 address to RDES1 */
    WRITE_REG(dmarxdesc->DESC2, (uint32_t)pBuffer2);
 8001080:	683a      	ldr	r2, [r7, #0]
 8001082:	697b      	ldr	r3, [r7, #20]
 8001084:	609a      	str	r2, [r3, #8]
     /* store buffer 2 address */
    WRITE_REG(dmarxdesc->BackupAddr1, (uint32_t)pBuffer2);
 8001086:	683a      	ldr	r2, [r7, #0]
 8001088:	697b      	ldr	r3, [r7, #20]
 800108a:	615a      	str	r2, [r3, #20]
    /* set buffer 2 address valid bit to RDES3 */
    SET_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCRF_BUF2V);
 800108c:	697b      	ldr	r3, [r7, #20]
 800108e:	68db      	ldr	r3, [r3, #12]
 8001090:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 8001094:	697b      	ldr	r3, [r7, #20]
 8001096:	60da      	str	r2, [r3, #12]
  }
  /* set OWN bit to RDES3 */
  SET_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCRF_OWN);
 8001098:	697b      	ldr	r3, [r7, #20]
 800109a:	68db      	ldr	r3, [r3, #12]
 800109c:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 80010a0:	697b      	ldr	r3, [r7, #20]
 80010a2:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 80010a4:	2300      	movs	r3, #0
}
 80010a6:	4618      	mov	r0, r3
 80010a8:	371c      	adds	r7, #28
 80010aa:	46bd      	mov	sp, r7
 80010ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010b0:	4770      	bx	lr

080010b2 <HAL_ETH_Start_IT>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Start_IT(ETH_HandleTypeDef *heth)
{
 80010b2:	b480      	push	{r7}
 80010b4:	b087      	sub	sp, #28
 80010b6:	af00      	add	r7, sp, #0
 80010b8:	6078      	str	r0, [r7, #4]
  uint32_t descindex = 0, counter;
 80010ba:	2300      	movs	r3, #0
 80010bc:	617b      	str	r3, [r7, #20]
  ETH_DMADescTypeDef *dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descindex];
 80010be:	687a      	ldr	r2, [r7, #4]
 80010c0:	697b      	ldr	r3, [r7, #20]
 80010c2:	330a      	adds	r3, #10
 80010c4:	009b      	lsls	r3, r3, #2
 80010c6:	4413      	add	r3, r2
 80010c8:	685b      	ldr	r3, [r3, #4]
 80010ca:	60fb      	str	r3, [r7, #12]

  if(heth->gState == HAL_ETH_STATE_READY)
 80010cc:	687b      	ldr	r3, [r7, #4]
 80010ce:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80010d0:	2b10      	cmp	r3, #16
 80010d2:	d17d      	bne.n	80011d0 <HAL_ETH_Start_IT+0x11e>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 80010d4:	687b      	ldr	r3, [r7, #4]
 80010d6:	2223      	movs	r2, #35	; 0x23
 80010d8:	655a      	str	r2, [r3, #84]	; 0x54

    /* Set IOC bit to all Rx descriptors */
    for(counter= 0; counter < (uint32_t)ETH_RX_DESC_CNT; counter++)
 80010da:	2300      	movs	r3, #0
 80010dc:	613b      	str	r3, [r7, #16]
 80010de:	e018      	b.n	8001112 <HAL_ETH_Start_IT+0x60>
    {
      SET_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCRF_IOC);
 80010e0:	68fb      	ldr	r3, [r7, #12]
 80010e2:	68db      	ldr	r3, [r3, #12]
 80010e4:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 80010e8:	68fb      	ldr	r3, [r7, #12]
 80010ea:	60da      	str	r2, [r3, #12]
      INCR_RX_DESC_INDEX(descindex, 1U);
 80010ec:	697b      	ldr	r3, [r7, #20]
 80010ee:	3301      	adds	r3, #1
 80010f0:	617b      	str	r3, [r7, #20]
 80010f2:	697b      	ldr	r3, [r7, #20]
 80010f4:	2b03      	cmp	r3, #3
 80010f6:	d902      	bls.n	80010fe <HAL_ETH_Start_IT+0x4c>
 80010f8:	697b      	ldr	r3, [r7, #20]
 80010fa:	3b04      	subs	r3, #4
 80010fc:	617b      	str	r3, [r7, #20]
      dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descindex];
 80010fe:	687a      	ldr	r2, [r7, #4]
 8001100:	697b      	ldr	r3, [r7, #20]
 8001102:	330a      	adds	r3, #10
 8001104:	009b      	lsls	r3, r3, #2
 8001106:	4413      	add	r3, r2
 8001108:	685b      	ldr	r3, [r3, #4]
 800110a:	60fb      	str	r3, [r7, #12]
    for(counter= 0; counter < (uint32_t)ETH_RX_DESC_CNT; counter++)
 800110c:	693b      	ldr	r3, [r7, #16]
 800110e:	3301      	adds	r3, #1
 8001110:	613b      	str	r3, [r7, #16]
 8001112:	693b      	ldr	r3, [r7, #16]
 8001114:	2b03      	cmp	r3, #3
 8001116:	d9e3      	bls.n	80010e0 <HAL_ETH_Start_IT+0x2e>
    }

    /* save IT mode to ETH Handle */
    heth->RxDescList.ItMode = 1U;
 8001118:	687b      	ldr	r3, [r7, #4]
 800111a:	2201      	movs	r2, #1
 800111c:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Enable the MAC transmission */
    SET_BIT(heth->Instance->MACCR, ETH_MACCR_TE);
 800111e:	687b      	ldr	r3, [r7, #4]
 8001120:	681b      	ldr	r3, [r3, #0]
 8001122:	681a      	ldr	r2, [r3, #0]
 8001124:	687b      	ldr	r3, [r7, #4]
 8001126:	681b      	ldr	r3, [r3, #0]
 8001128:	f042 0202 	orr.w	r2, r2, #2
 800112c:	601a      	str	r2, [r3, #0]

    /* Enable the MAC reception */
    SET_BIT(heth->Instance->MACCR, ETH_MACCR_RE);
 800112e:	687b      	ldr	r3, [r7, #4]
 8001130:	681b      	ldr	r3, [r3, #0]
 8001132:	681a      	ldr	r2, [r3, #0]
 8001134:	687b      	ldr	r3, [r7, #4]
 8001136:	681b      	ldr	r3, [r3, #0]
 8001138:	f042 0201 	orr.w	r2, r2, #1
 800113c:	601a      	str	r2, [r3, #0]

    /* Set the Flush Transmit FIFO bit */
    SET_BIT(heth->Instance->MTLTQOMR, ETH_MTLTQOMR_FTQ);
 800113e:	687b      	ldr	r3, [r7, #4]
 8001140:	681b      	ldr	r3, [r3, #0]
 8001142:	f8d3 2d00 	ldr.w	r2, [r3, #3328]	; 0xd00
 8001146:	687b      	ldr	r3, [r7, #4]
 8001148:	681b      	ldr	r3, [r3, #0]
 800114a:	f042 0201 	orr.w	r2, r2, #1
 800114e:	f8c3 2d00 	str.w	r2, [r3, #3328]	; 0xd00

    /* Enable the DMA transmission */
    SET_BIT(heth->Instance->DMACTCR, ETH_DMACTCR_ST);
 8001152:	687b      	ldr	r3, [r7, #4]
 8001154:	681a      	ldr	r2, [r3, #0]
 8001156:	f241 1304 	movw	r3, #4356	; 0x1104
 800115a:	4413      	add	r3, r2
 800115c:	681b      	ldr	r3, [r3, #0]
 800115e:	687a      	ldr	r2, [r7, #4]
 8001160:	6811      	ldr	r1, [r2, #0]
 8001162:	f043 0201 	orr.w	r2, r3, #1
 8001166:	f241 1304 	movw	r3, #4356	; 0x1104
 800116a:	440b      	add	r3, r1
 800116c:	601a      	str	r2, [r3, #0]

    /* Enable the DMA reception */
    SET_BIT(heth->Instance->DMACRCR, ETH_DMACRCR_SR);
 800116e:	687b      	ldr	r3, [r7, #4]
 8001170:	681a      	ldr	r2, [r3, #0]
 8001172:	f241 1308 	movw	r3, #4360	; 0x1108
 8001176:	4413      	add	r3, r2
 8001178:	681b      	ldr	r3, [r3, #0]
 800117a:	687a      	ldr	r2, [r7, #4]
 800117c:	6811      	ldr	r1, [r2, #0]
 800117e:	f043 0201 	orr.w	r2, r3, #1
 8001182:	f241 1308 	movw	r3, #4360	; 0x1108
 8001186:	440b      	add	r3, r1
 8001188:	601a      	str	r2, [r3, #0]

    /* Clear Tx and Rx process stopped flags */
    heth->Instance->DMACSR |= (ETH_DMACSR_TPS | ETH_DMACSR_RPS);
 800118a:	687b      	ldr	r3, [r7, #4]
 800118c:	681b      	ldr	r3, [r3, #0]
 800118e:	f503 538b 	add.w	r3, r3, #4448	; 0x1160
 8001192:	681a      	ldr	r2, [r3, #0]
 8001194:	687b      	ldr	r3, [r7, #4]
 8001196:	681b      	ldr	r3, [r3, #0]
 8001198:	f442 7281 	orr.w	r2, r2, #258	; 0x102
 800119c:	f503 538b 	add.w	r3, r3, #4448	; 0x1160
 80011a0:	601a      	str	r2, [r3, #0]

    heth->gState = HAL_ETH_STATE_READY;
 80011a2:	687b      	ldr	r3, [r7, #4]
 80011a4:	2210      	movs	r2, #16
 80011a6:	655a      	str	r2, [r3, #84]	; 0x54
    heth->RxState = HAL_ETH_STATE_BUSY_RX;
 80011a8:	687b      	ldr	r3, [r7, #4]
 80011aa:	2222      	movs	r2, #34	; 0x22
 80011ac:	659a      	str	r2, [r3, #88]	; 0x58
    /* Enable ETH DMA interrupts:
    - Tx complete interrupt
    - Rx complete interrupt
    - Fatal bus interrupt
    */
    __HAL_ETH_DMA_ENABLE_IT(heth, (ETH_DMACIER_NIE | ETH_DMACIER_RIE | ETH_DMACIER_TIE  |
 80011ae:	687b      	ldr	r3, [r7, #4]
 80011b0:	681a      	ldr	r2, [r3, #0]
 80011b2:	f241 1334 	movw	r3, #4404	; 0x1134
 80011b6:	4413      	add	r3, r2
 80011b8:	681b      	ldr	r3, [r3, #0]
 80011ba:	687a      	ldr	r2, [r7, #4]
 80011bc:	6811      	ldr	r1, [r2, #0]
 80011be:	f24d 0241 	movw	r2, #53313	; 0xd041
 80011c2:	431a      	orrs	r2, r3
 80011c4:	f241 1334 	movw	r3, #4404	; 0x1134
 80011c8:	440b      	add	r3, r1
 80011ca:	601a      	str	r2, [r3, #0]
                                   ETH_DMACIER_FBEE | ETH_DMACIER_AIE));

    return HAL_OK;
 80011cc:	2300      	movs	r3, #0
 80011ce:	e000      	b.n	80011d2 <HAL_ETH_Start_IT+0x120>
  }
  else
  {
    return HAL_ERROR;
 80011d0:	2301      	movs	r3, #1
  }
}
 80011d2:	4618      	mov	r0, r3
 80011d4:	371c      	adds	r7, #28
 80011d6:	46bd      	mov	sp, r7
 80011d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011dc:	4770      	bx	lr

080011de <HAL_ETH_Transmit>:
  * @param  pTxConfig: Hold the configuration of packet to be transmitted
  * @param  Timeout: timeout value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Transmit(ETH_HandleTypeDef *heth, ETH_TxPacketConfig *pTxConfig, uint32_t Timeout)
{
 80011de:	b580      	push	{r7, lr}
 80011e0:	b086      	sub	sp, #24
 80011e2:	af00      	add	r7, sp, #0
 80011e4:	60f8      	str	r0, [r7, #12]
 80011e6:	60b9      	str	r1, [r7, #8]
 80011e8:	607a      	str	r2, [r7, #4]
  uint32_t tickstart;
  const ETH_DMADescTypeDef *dmatxdesc;

  if(pTxConfig == NULL)
 80011ea:	68bb      	ldr	r3, [r7, #8]
 80011ec:	2b00      	cmp	r3, #0
 80011ee:	d107      	bne.n	8001200 <HAL_ETH_Transmit+0x22>
  {
    heth->ErrorCode |= HAL_ETH_ERROR_PARAM;
 80011f0:	68fb      	ldr	r3, [r7, #12]
 80011f2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80011f4:	f043 0201 	orr.w	r2, r3, #1
 80011f8:	68fb      	ldr	r3, [r7, #12]
 80011fa:	65da      	str	r2, [r3, #92]	; 0x5c
    return HAL_ERROR;
 80011fc:	2301      	movs	r3, #1
 80011fe:	e076      	b.n	80012ee <HAL_ETH_Transmit+0x110>
  }

  if(heth->gState == HAL_ETH_STATE_READY)
 8001200:	68fb      	ldr	r3, [r7, #12]
 8001202:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001204:	2b10      	cmp	r3, #16
 8001206:	d171      	bne.n	80012ec <HAL_ETH_Transmit+0x10e>
  {
    /* Config DMA Tx descriptor by Tx Packet info */
    if (ETH_Prepare_Tx_Descriptors(heth, pTxConfig, 0) != HAL_ETH_ERROR_NONE)
 8001208:	2200      	movs	r2, #0
 800120a:	68b9      	ldr	r1, [r7, #8]
 800120c:	68f8      	ldr	r0, [r7, #12]
 800120e:	f001 f9e5 	bl	80025dc <ETH_Prepare_Tx_Descriptors>
 8001212:	4603      	mov	r3, r0
 8001214:	2b00      	cmp	r3, #0
 8001216:	d007      	beq.n	8001228 <HAL_ETH_Transmit+0x4a>
    {
      /* Set the ETH error code */
      heth->ErrorCode |= HAL_ETH_ERROR_BUSY;
 8001218:	68fb      	ldr	r3, [r7, #12]
 800121a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800121c:	f043 0202 	orr.w	r2, r3, #2
 8001220:	68fb      	ldr	r3, [r7, #12]
 8001222:	65da      	str	r2, [r3, #92]	; 0x5c
      return HAL_ERROR;
 8001224:	2301      	movs	r3, #1
 8001226:	e062      	b.n	80012ee <HAL_ETH_Transmit+0x110>
    }

    dmatxdesc = (ETH_DMADescTypeDef *)(&heth->TxDescList)->TxDesc[heth->TxDescList.CurTxDesc];
 8001228:	68fb      	ldr	r3, [r7, #12]
 800122a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800122c:	68fb      	ldr	r3, [r7, #12]
 800122e:	3206      	adds	r2, #6
 8001230:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001234:	617b      	str	r3, [r7, #20]

    /* Incr current tx desc index */
    INCR_TX_DESC_INDEX(heth->TxDescList.CurTxDesc, 1U);
 8001236:	68fb      	ldr	r3, [r7, #12]
 8001238:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800123a:	1c5a      	adds	r2, r3, #1
 800123c:	68fb      	ldr	r3, [r7, #12]
 800123e:	629a      	str	r2, [r3, #40]	; 0x28
 8001240:	68fb      	ldr	r3, [r7, #12]
 8001242:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001244:	2b03      	cmp	r3, #3
 8001246:	d904      	bls.n	8001252 <HAL_ETH_Transmit+0x74>
 8001248:	68fb      	ldr	r3, [r7, #12]
 800124a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800124c:	1f1a      	subs	r2, r3, #4
 800124e:	68fb      	ldr	r3, [r7, #12]
 8001250:	629a      	str	r2, [r3, #40]	; 0x28

    /* Start transmission */
    /* issue a poll command to Tx DMA by writing address of next immediate free descriptor */
    WRITE_REG(heth->Instance->DMACTDTPR, (uint32_t)(heth->TxDescList.TxDesc[heth->TxDescList.CurTxDesc]));
 8001252:	68fb      	ldr	r3, [r7, #12]
 8001254:	6a99      	ldr	r1, [r3, #40]	; 0x28
 8001256:	68fb      	ldr	r3, [r7, #12]
 8001258:	681b      	ldr	r3, [r3, #0]
 800125a:	68fa      	ldr	r2, [r7, #12]
 800125c:	3106      	adds	r1, #6
 800125e:	f852 2021 	ldr.w	r2, [r2, r1, lsl #2]
 8001262:	f503 5389 	add.w	r3, r3, #4384	; 0x1120
 8001266:	601a      	str	r2, [r3, #0]

    tickstart = HAL_GetTick();
 8001268:	f7ff fc32 	bl	8000ad0 <HAL_GetTick>
 800126c:	6138      	str	r0, [r7, #16]

    /* Wait for data to be transmitted or timeout occured */
    while((dmatxdesc->DESC3 & ETH_DMATXNDESCWBF_OWN) != (uint32_t)RESET)
 800126e:	e034      	b.n	80012da <HAL_ETH_Transmit+0xfc>
    {
      if((heth->Instance->DMACSR & ETH_DMACSR_FBE) != (uint32_t)RESET)
 8001270:	68fb      	ldr	r3, [r7, #12]
 8001272:	681b      	ldr	r3, [r3, #0]
 8001274:	f503 538b 	add.w	r3, r3, #4448	; 0x1160
 8001278:	681b      	ldr	r3, [r3, #0]
 800127a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800127e:	2b00      	cmp	r3, #0
 8001280:	d011      	beq.n	80012a6 <HAL_ETH_Transmit+0xc8>
      {
        heth->ErrorCode |= HAL_ETH_ERROR_DMA;
 8001282:	68fb      	ldr	r3, [r7, #12]
 8001284:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001286:	f043 0208 	orr.w	r2, r3, #8
 800128a:	68fb      	ldr	r3, [r7, #12]
 800128c:	65da      	str	r2, [r3, #92]	; 0x5c
        heth->DMAErrorCode = heth->Instance->DMACSR;
 800128e:	68fb      	ldr	r3, [r7, #12]
 8001290:	681b      	ldr	r3, [r3, #0]
 8001292:	f503 538b 	add.w	r3, r3, #4448	; 0x1160
 8001296:	681a      	ldr	r2, [r3, #0]
 8001298:	68fb      	ldr	r3, [r7, #12]
 800129a:	661a      	str	r2, [r3, #96]	; 0x60
        /* Set ETH HAL State to Ready */
        heth->gState = HAL_ETH_STATE_ERROR;
 800129c:	68fb      	ldr	r3, [r7, #12]
 800129e:	22e0      	movs	r2, #224	; 0xe0
 80012a0:	655a      	str	r2, [r3, #84]	; 0x54
        /* Return function status */
        return HAL_ERROR;
 80012a2:	2301      	movs	r3, #1
 80012a4:	e023      	b.n	80012ee <HAL_ETH_Transmit+0x110>
      }

      /* Check for the Timeout */
      if(Timeout != HAL_MAX_DELAY)
 80012a6:	687b      	ldr	r3, [r7, #4]
 80012a8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80012ac:	d015      	beq.n	80012da <HAL_ETH_Transmit+0xfc>
      {
        if(((HAL_GetTick() - tickstart ) > Timeout) || (Timeout == 0U))
 80012ae:	f7ff fc0f 	bl	8000ad0 <HAL_GetTick>
 80012b2:	4602      	mov	r2, r0
 80012b4:	693b      	ldr	r3, [r7, #16]
 80012b6:	1ad3      	subs	r3, r2, r3
 80012b8:	687a      	ldr	r2, [r7, #4]
 80012ba:	429a      	cmp	r2, r3
 80012bc:	d302      	bcc.n	80012c4 <HAL_ETH_Transmit+0xe6>
 80012be:	687b      	ldr	r3, [r7, #4]
 80012c0:	2b00      	cmp	r3, #0
 80012c2:	d10a      	bne.n	80012da <HAL_ETH_Transmit+0xfc>
        {
          heth->ErrorCode |= HAL_ETH_ERROR_TIMEOUT;
 80012c4:	68fb      	ldr	r3, [r7, #12]
 80012c6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80012c8:	f043 0204 	orr.w	r2, r3, #4
 80012cc:	68fb      	ldr	r3, [r7, #12]
 80012ce:	65da      	str	r2, [r3, #92]	; 0x5c
          heth->gState = HAL_ETH_STATE_READY;
 80012d0:	68fb      	ldr	r3, [r7, #12]
 80012d2:	2210      	movs	r2, #16
 80012d4:	655a      	str	r2, [r3, #84]	; 0x54
          return HAL_ERROR;
 80012d6:	2301      	movs	r3, #1
 80012d8:	e009      	b.n	80012ee <HAL_ETH_Transmit+0x110>
    while((dmatxdesc->DESC3 & ETH_DMATXNDESCWBF_OWN) != (uint32_t)RESET)
 80012da:	697b      	ldr	r3, [r7, #20]
 80012dc:	68db      	ldr	r3, [r3, #12]
 80012de:	2b00      	cmp	r3, #0
 80012e0:	dbc6      	blt.n	8001270 <HAL_ETH_Transmit+0x92>
        }
      }
    }

    /* Set ETH HAL State to Ready */
    heth->gState = HAL_ETH_STATE_READY;
 80012e2:	68fb      	ldr	r3, [r7, #12]
 80012e4:	2210      	movs	r2, #16
 80012e6:	655a      	str	r2, [r3, #84]	; 0x54

    /* Return function status */
    return HAL_OK;
 80012e8:	2300      	movs	r3, #0
 80012ea:	e000      	b.n	80012ee <HAL_ETH_Transmit+0x110>
  }
  else
  {
    return HAL_ERROR;
 80012ec:	2301      	movs	r3, #1
  }
}
 80012ee:	4618      	mov	r0, r3
 80012f0:	3718      	adds	r7, #24
 80012f2:	46bd      	mov	sp, r7
 80012f4:	bd80      	pop	{r7, pc}

080012f6 <HAL_ETH_IsRxDataAvailable>:
  *         the configuration information for ETHERNET module
  * @retval  1: A Packet is received
  *          0: no Packet received
  */
uint8_t HAL_ETH_IsRxDataAvailable(ETH_HandleTypeDef *heth)
{
 80012f6:	b480      	push	{r7}
 80012f8:	b089      	sub	sp, #36	; 0x24
 80012fa:	af00      	add	r7, sp, #0
 80012fc:	6078      	str	r0, [r7, #4]
  ETH_RxDescListTypeDef *dmarxdesclist = &heth->RxDescList;
 80012fe:	687b      	ldr	r3, [r7, #4]
 8001300:	332c      	adds	r3, #44	; 0x2c
 8001302:	60bb      	str	r3, [r7, #8]
  uint32_t descidx = dmarxdesclist->CurRxDesc;
 8001304:	68bb      	ldr	r3, [r7, #8]
 8001306:	691b      	ldr	r3, [r3, #16]
 8001308:	61fb      	str	r3, [r7, #28]
  ETH_DMADescTypeDef *dmarxdesc = (ETH_DMADescTypeDef *)dmarxdesclist->RxDesc[descidx];
 800130a:	68bb      	ldr	r3, [r7, #8]
 800130c:	69fa      	ldr	r2, [r7, #28]
 800130e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001312:	61bb      	str	r3, [r7, #24]
  uint32_t descscancnt = 0;
 8001314:	2300      	movs	r3, #0
 8001316:	617b      	str	r3, [r7, #20]
  uint32_t appdesccnt = 0, firstappdescidx = 0;
 8001318:	2300      	movs	r3, #0
 800131a:	613b      	str	r3, [r7, #16]
 800131c:	2300      	movs	r3, #0
 800131e:	60fb      	str	r3, [r7, #12]

  if(dmarxdesclist->AppDescNbr != 0U)
 8001320:	68bb      	ldr	r3, [r7, #8]
 8001322:	699b      	ldr	r3, [r3, #24]
 8001324:	2b00      	cmp	r3, #0
 8001326:	d06b      	beq.n	8001400 <HAL_ETH_IsRxDataAvailable+0x10a>
  {
    /* data already received by not yet processed*/
    return 0;
 8001328:	2300      	movs	r3, #0
 800132a:	e0bc      	b.n	80014a6 <HAL_ETH_IsRxDataAvailable+0x1b0>
  }

  /* Check if descriptor is not owned by DMA */
  while((READ_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCWBF_OWN) == (uint32_t)RESET) && (descscancnt < (uint32_t)ETH_RX_DESC_CNT))
  {
    descscancnt++;
 800132c:	697b      	ldr	r3, [r7, #20]
 800132e:	3301      	adds	r3, #1
 8001330:	617b      	str	r3, [r7, #20]

    /* Check if last descriptor */
    if(READ_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCWBF_LD) != (uint32_t)RESET)
 8001332:	69bb      	ldr	r3, [r7, #24]
 8001334:	68db      	ldr	r3, [r3, #12]
 8001336:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800133a:	2b00      	cmp	r3, #0
 800133c:	d036      	beq.n	80013ac <HAL_ETH_IsRxDataAvailable+0xb6>
    {
      /* Increment the number of descriptors to be passed to the application */
      appdesccnt += 1U;
 800133e:	693b      	ldr	r3, [r7, #16]
 8001340:	3301      	adds	r3, #1
 8001342:	613b      	str	r3, [r7, #16]

      if(appdesccnt == 1U)
 8001344:	693b      	ldr	r3, [r7, #16]
 8001346:	2b01      	cmp	r3, #1
 8001348:	d101      	bne.n	800134e <HAL_ETH_IsRxDataAvailable+0x58>
      {
        WRITE_REG(firstappdescidx, descidx);
 800134a:	69fb      	ldr	r3, [r7, #28]
 800134c:	60fb      	str	r3, [r7, #12]
      }

      /* Increment current rx descriptor index */
      INCR_RX_DESC_INDEX(descidx, 1U);
 800134e:	69fb      	ldr	r3, [r7, #28]
 8001350:	3301      	adds	r3, #1
 8001352:	61fb      	str	r3, [r7, #28]
 8001354:	69fb      	ldr	r3, [r7, #28]
 8001356:	2b03      	cmp	r3, #3
 8001358:	d902      	bls.n	8001360 <HAL_ETH_IsRxDataAvailable+0x6a>
 800135a:	69fb      	ldr	r3, [r7, #28]
 800135c:	3b04      	subs	r3, #4
 800135e:	61fb      	str	r3, [r7, #28]

      /* Check for Context descriptor */
      /* Get current descriptor address */
      dmarxdesc = (ETH_DMADescTypeDef *)dmarxdesclist->RxDesc[descidx];
 8001360:	68bb      	ldr	r3, [r7, #8]
 8001362:	69fa      	ldr	r2, [r7, #28]
 8001364:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001368:	61bb      	str	r3, [r7, #24]

      if(READ_BIT(dmarxdesc->DESC3,  ETH_DMARXNDESCWBF_OWN)  == (uint32_t)RESET)
 800136a:	69bb      	ldr	r3, [r7, #24]
 800136c:	68db      	ldr	r3, [r3, #12]
 800136e:	2b00      	cmp	r3, #0
 8001370:	db11      	blt.n	8001396 <HAL_ETH_IsRxDataAvailable+0xa0>
      {
        if(READ_BIT(dmarxdesc->DESC3,  ETH_DMARXNDESCWBF_CTXT)  != (uint32_t)RESET)
 8001372:	69bb      	ldr	r3, [r7, #24]
 8001374:	68db      	ldr	r3, [r3, #12]
 8001376:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800137a:	2b00      	cmp	r3, #0
 800137c:	d00b      	beq.n	8001396 <HAL_ETH_IsRxDataAvailable+0xa0>
        {
          /* Increment the number of descriptors to be passed to the application */
          dmarxdesclist->AppContextDesc = 1;
 800137e:	68bb      	ldr	r3, [r7, #8]
 8001380:	2201      	movs	r2, #1
 8001382:	61da      	str	r2, [r3, #28]
          /* Increment current rx descriptor index */
          INCR_RX_DESC_INDEX(descidx, 1U);
 8001384:	69fb      	ldr	r3, [r7, #28]
 8001386:	3301      	adds	r3, #1
 8001388:	61fb      	str	r3, [r7, #28]
 800138a:	69fb      	ldr	r3, [r7, #28]
 800138c:	2b03      	cmp	r3, #3
 800138e:	d902      	bls.n	8001396 <HAL_ETH_IsRxDataAvailable+0xa0>
 8001390:	69fb      	ldr	r3, [r7, #28]
 8001392:	3b04      	subs	r3, #4
 8001394:	61fb      	str	r3, [r7, #28]
        }
      }
      /* Fill information to Rx descriptors list */
      dmarxdesclist->CurRxDesc = descidx;
 8001396:	68bb      	ldr	r3, [r7, #8]
 8001398:	69fa      	ldr	r2, [r7, #28]
 800139a:	611a      	str	r2, [r3, #16]
      dmarxdesclist->FirstAppDesc = firstappdescidx;
 800139c:	68bb      	ldr	r3, [r7, #8]
 800139e:	68fa      	ldr	r2, [r7, #12]
 80013a0:	615a      	str	r2, [r3, #20]
      dmarxdesclist->AppDescNbr = appdesccnt;
 80013a2:	68bb      	ldr	r3, [r7, #8]
 80013a4:	693a      	ldr	r2, [r7, #16]
 80013a6:	619a      	str	r2, [r3, #24]

      /* Return function status */
      return 1;
 80013a8:	2301      	movs	r3, #1
 80013aa:	e07c      	b.n	80014a6 <HAL_ETH_IsRxDataAvailable+0x1b0>
    }
    /* Check if first descriptor */
    else if(READ_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCWBF_FD) != (uint32_t)RESET)
 80013ac:	69bb      	ldr	r3, [r7, #24]
 80013ae:	68db      	ldr	r3, [r3, #12]
 80013b0:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80013b4:	2b00      	cmp	r3, #0
 80013b6:	d012      	beq.n	80013de <HAL_ETH_IsRxDataAvailable+0xe8>
    {
      WRITE_REG(firstappdescidx, descidx);
 80013b8:	69fb      	ldr	r3, [r7, #28]
 80013ba:	60fb      	str	r3, [r7, #12]
      /* Increment the number of descriptors to be passed to the application */
      appdesccnt = 1U;
 80013bc:	2301      	movs	r3, #1
 80013be:	613b      	str	r3, [r7, #16]

      /* Increment current rx descriptor index */
      INCR_RX_DESC_INDEX(descidx, 1U);
 80013c0:	69fb      	ldr	r3, [r7, #28]
 80013c2:	3301      	adds	r3, #1
 80013c4:	61fb      	str	r3, [r7, #28]
 80013c6:	69fb      	ldr	r3, [r7, #28]
 80013c8:	2b03      	cmp	r3, #3
 80013ca:	d902      	bls.n	80013d2 <HAL_ETH_IsRxDataAvailable+0xdc>
 80013cc:	69fb      	ldr	r3, [r7, #28]
 80013ce:	3b04      	subs	r3, #4
 80013d0:	61fb      	str	r3, [r7, #28]
      /* Get current descriptor address */
      dmarxdesc = (ETH_DMADescTypeDef *)dmarxdesclist->RxDesc[descidx];
 80013d2:	68bb      	ldr	r3, [r7, #8]
 80013d4:	69fa      	ldr	r2, [r7, #28]
 80013d6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80013da:	61bb      	str	r3, [r7, #24]
 80013dc:	e010      	b.n	8001400 <HAL_ETH_IsRxDataAvailable+0x10a>
    }
    /* It should be an intermediate descriptor */
    else
    {
      /* Increment the number of descriptors to be passed to the application */
      appdesccnt += 1U;
 80013de:	693b      	ldr	r3, [r7, #16]
 80013e0:	3301      	adds	r3, #1
 80013e2:	613b      	str	r3, [r7, #16]

      /* Increment current rx descriptor index */
      INCR_RX_DESC_INDEX(descidx, 1U);
 80013e4:	69fb      	ldr	r3, [r7, #28]
 80013e6:	3301      	adds	r3, #1
 80013e8:	61fb      	str	r3, [r7, #28]
 80013ea:	69fb      	ldr	r3, [r7, #28]
 80013ec:	2b03      	cmp	r3, #3
 80013ee:	d902      	bls.n	80013f6 <HAL_ETH_IsRxDataAvailable+0x100>
 80013f0:	69fb      	ldr	r3, [r7, #28]
 80013f2:	3b04      	subs	r3, #4
 80013f4:	61fb      	str	r3, [r7, #28]
      /* Get current descriptor address */
      dmarxdesc = (ETH_DMADescTypeDef *)dmarxdesclist->RxDesc[descidx];
 80013f6:	68bb      	ldr	r3, [r7, #8]
 80013f8:	69fa      	ldr	r2, [r7, #28]
 80013fa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80013fe:	61bb      	str	r3, [r7, #24]
  while((READ_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCWBF_OWN) == (uint32_t)RESET) && (descscancnt < (uint32_t)ETH_RX_DESC_CNT))
 8001400:	69bb      	ldr	r3, [r7, #24]
 8001402:	68db      	ldr	r3, [r3, #12]
 8001404:	2b00      	cmp	r3, #0
 8001406:	db02      	blt.n	800140e <HAL_ETH_IsRxDataAvailable+0x118>
 8001408:	697b      	ldr	r3, [r7, #20]
 800140a:	2b03      	cmp	r3, #3
 800140c:	d98e      	bls.n	800132c <HAL_ETH_IsRxDataAvailable+0x36>
    }
  }

  /* Build Descriptors if an incomplete Packet is received */
  if(appdesccnt > 0U)
 800140e:	693b      	ldr	r3, [r7, #16]
 8001410:	2b00      	cmp	r3, #0
 8001412:	d044      	beq.n	800149e <HAL_ETH_IsRxDataAvailable+0x1a8>
  {
    descidx = firstappdescidx;
 8001414:	68fb      	ldr	r3, [r7, #12]
 8001416:	61fb      	str	r3, [r7, #28]
    dmarxdesc = (ETH_DMADescTypeDef *)dmarxdesclist->RxDesc[descidx];
 8001418:	68bb      	ldr	r3, [r7, #8]
 800141a:	69fa      	ldr	r2, [r7, #28]
 800141c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001420:	61bb      	str	r3, [r7, #24]

    for(descscancnt = 0; descscancnt < appdesccnt; descscancnt++)
 8001422:	2300      	movs	r3, #0
 8001424:	617b      	str	r3, [r7, #20]
 8001426:	e036      	b.n	8001496 <HAL_ETH_IsRxDataAvailable+0x1a0>
    {
      WRITE_REG(dmarxdesc->DESC0, dmarxdesc->BackupAddr0);
 8001428:	69bb      	ldr	r3, [r7, #24]
 800142a:	691a      	ldr	r2, [r3, #16]
 800142c:	69bb      	ldr	r3, [r7, #24]
 800142e:	601a      	str	r2, [r3, #0]
      WRITE_REG(dmarxdesc->DESC3, ETH_DMARXNDESCRF_BUF1V);
 8001430:	69bb      	ldr	r3, [r7, #24]
 8001432:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8001436:	60da      	str	r2, [r3, #12]

      if (READ_REG(dmarxdesc->BackupAddr1) != ((uint32_t)RESET))
 8001438:	69bb      	ldr	r3, [r7, #24]
 800143a:	695b      	ldr	r3, [r3, #20]
 800143c:	2b00      	cmp	r3, #0
 800143e:	d009      	beq.n	8001454 <HAL_ETH_IsRxDataAvailable+0x15e>
      {
        WRITE_REG(dmarxdesc->DESC2, dmarxdesc->BackupAddr1);
 8001440:	69bb      	ldr	r3, [r7, #24]
 8001442:	695a      	ldr	r2, [r3, #20]
 8001444:	69bb      	ldr	r3, [r7, #24]
 8001446:	609a      	str	r2, [r3, #8]
        SET_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCRF_BUF2V);
 8001448:	69bb      	ldr	r3, [r7, #24]
 800144a:	68db      	ldr	r3, [r3, #12]
 800144c:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 8001450:	69bb      	ldr	r3, [r7, #24]
 8001452:	60da      	str	r2, [r3, #12]
      }

      SET_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCRF_OWN);
 8001454:	69bb      	ldr	r3, [r7, #24]
 8001456:	68db      	ldr	r3, [r3, #12]
 8001458:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 800145c:	69bb      	ldr	r3, [r7, #24]
 800145e:	60da      	str	r2, [r3, #12]

      if(dmarxdesclist->ItMode != ((uint32_t)RESET))
 8001460:	68bb      	ldr	r3, [r7, #8]
 8001462:	6a1b      	ldr	r3, [r3, #32]
 8001464:	2b00      	cmp	r3, #0
 8001466:	d005      	beq.n	8001474 <HAL_ETH_IsRxDataAvailable+0x17e>
      {
        SET_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCRF_IOC);
 8001468:	69bb      	ldr	r3, [r7, #24]
 800146a:	68db      	ldr	r3, [r3, #12]
 800146c:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8001470:	69bb      	ldr	r3, [r7, #24]
 8001472:	60da      	str	r2, [r3, #12]
      }

      /* Increment rx descriptor index */
      INCR_RX_DESC_INDEX(descidx, 1U);
 8001474:	69fb      	ldr	r3, [r7, #28]
 8001476:	3301      	adds	r3, #1
 8001478:	61fb      	str	r3, [r7, #28]
 800147a:	69fb      	ldr	r3, [r7, #28]
 800147c:	2b03      	cmp	r3, #3
 800147e:	d902      	bls.n	8001486 <HAL_ETH_IsRxDataAvailable+0x190>
 8001480:	69fb      	ldr	r3, [r7, #28]
 8001482:	3b04      	subs	r3, #4
 8001484:	61fb      	str	r3, [r7, #28]
      /* Get descriptor address */
      dmarxdesc = (ETH_DMADescTypeDef *)dmarxdesclist->RxDesc[descidx];
 8001486:	68bb      	ldr	r3, [r7, #8]
 8001488:	69fa      	ldr	r2, [r7, #28]
 800148a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800148e:	61bb      	str	r3, [r7, #24]
    for(descscancnt = 0; descscancnt < appdesccnt; descscancnt++)
 8001490:	697b      	ldr	r3, [r7, #20]
 8001492:	3301      	adds	r3, #1
 8001494:	617b      	str	r3, [r7, #20]
 8001496:	697a      	ldr	r2, [r7, #20]
 8001498:	693b      	ldr	r3, [r7, #16]
 800149a:	429a      	cmp	r2, r3
 800149c:	d3c4      	bcc.n	8001428 <HAL_ETH_IsRxDataAvailable+0x132>
    }
  }

  /* Fill information to Rx descriptors list: No received Packet */
  dmarxdesclist->AppDescNbr = 0U;
 800149e:	68bb      	ldr	r3, [r7, #8]
 80014a0:	2200      	movs	r2, #0
 80014a2:	619a      	str	r2, [r3, #24]

  return 0;
 80014a4:	2300      	movs	r3, #0
}
 80014a6:	4618      	mov	r0, r3
 80014a8:	3724      	adds	r7, #36	; 0x24
 80014aa:	46bd      	mov	sp, r7
 80014ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014b0:	4770      	bx	lr

080014b2 <HAL_ETH_GetRxDataBuffer>:
  *         the configuration information for ETHERNET module
  * @param  RxBuffer: Pointer to a ETH_BufferTypeDef structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_GetRxDataBuffer(ETH_HandleTypeDef *heth, ETH_BufferTypeDef *RxBuffer)
{
 80014b2:	b580      	push	{r7, lr}
 80014b4:	b08a      	sub	sp, #40	; 0x28
 80014b6:	af00      	add	r7, sp, #0
 80014b8:	6078      	str	r0, [r7, #4]
 80014ba:	6039      	str	r1, [r7, #0]
  ETH_RxDescListTypeDef *dmarxdesclist = &heth->RxDescList;
 80014bc:	687b      	ldr	r3, [r7, #4]
 80014be:	332c      	adds	r3, #44	; 0x2c
 80014c0:	613b      	str	r3, [r7, #16]
  uint32_t descidx = dmarxdesclist->FirstAppDesc;
 80014c2:	693b      	ldr	r3, [r7, #16]
 80014c4:	695b      	ldr	r3, [r3, #20]
 80014c6:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t index, accumulatedlen = 0, lastdesclen;
 80014c8:	2300      	movs	r3, #0
 80014ca:	61fb      	str	r3, [r7, #28]
  __IO const ETH_DMADescTypeDef *dmarxdesc = (ETH_DMADescTypeDef *)dmarxdesclist->RxDesc[descidx];
 80014cc:	693b      	ldr	r3, [r7, #16]
 80014ce:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80014d0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80014d4:	61bb      	str	r3, [r7, #24]
  ETH_BufferTypeDef *rxbuff = RxBuffer;
 80014d6:	683b      	ldr	r3, [r7, #0]
 80014d8:	617b      	str	r3, [r7, #20]

  if(rxbuff == NULL)
 80014da:	697b      	ldr	r3, [r7, #20]
 80014dc:	2b00      	cmp	r3, #0
 80014de:	d104      	bne.n	80014ea <HAL_ETH_GetRxDataBuffer+0x38>
  {
    heth->ErrorCode = HAL_ETH_ERROR_PARAM;
 80014e0:	687b      	ldr	r3, [r7, #4]
 80014e2:	2201      	movs	r2, #1
 80014e4:	65da      	str	r2, [r3, #92]	; 0x5c
    return HAL_ERROR;
 80014e6:	2301      	movs	r3, #1
 80014e8:	e07d      	b.n	80015e6 <HAL_ETH_GetRxDataBuffer+0x134>
  }

  if(dmarxdesclist->AppDescNbr == 0U)
 80014ea:	693b      	ldr	r3, [r7, #16]
 80014ec:	699b      	ldr	r3, [r3, #24]
 80014ee:	2b00      	cmp	r3, #0
 80014f0:	d10f      	bne.n	8001512 <HAL_ETH_GetRxDataBuffer+0x60>
  {
    if(HAL_ETH_IsRxDataAvailable(heth) == 0U)
 80014f2:	6878      	ldr	r0, [r7, #4]
 80014f4:	f7ff feff 	bl	80012f6 <HAL_ETH_IsRxDataAvailable>
 80014f8:	4603      	mov	r3, r0
 80014fa:	2b00      	cmp	r3, #0
 80014fc:	d101      	bne.n	8001502 <HAL_ETH_GetRxDataBuffer+0x50>
    {
      /* No data to be transferred to the application */
      return HAL_ERROR;
 80014fe:	2301      	movs	r3, #1
 8001500:	e071      	b.n	80015e6 <HAL_ETH_GetRxDataBuffer+0x134>
    }
    else
    {
      descidx = dmarxdesclist->FirstAppDesc;
 8001502:	693b      	ldr	r3, [r7, #16]
 8001504:	695b      	ldr	r3, [r3, #20]
 8001506:	627b      	str	r3, [r7, #36]	; 0x24
      dmarxdesc = (ETH_DMADescTypeDef *)dmarxdesclist->RxDesc[descidx];
 8001508:	693b      	ldr	r3, [r7, #16]
 800150a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800150c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001510:	61bb      	str	r3, [r7, #24]
    }
  }

  /* Get intermediate descriptors buffers: in case of the Packet is splitted into multi descriptors */
  for(index = 0; index < (dmarxdesclist->AppDescNbr - 1U); index++)
 8001512:	2300      	movs	r3, #0
 8001514:	623b      	str	r3, [r7, #32]
 8001516:	e031      	b.n	800157c <HAL_ETH_GetRxDataBuffer+0xca>
  {
    /* Get Address and length of the first buffer address */
    rxbuff->buffer = (uint8_t *) dmarxdesc->BackupAddr0;
 8001518:	69bb      	ldr	r3, [r7, #24]
 800151a:	691b      	ldr	r3, [r3, #16]
 800151c:	461a      	mov	r2, r3
 800151e:	697b      	ldr	r3, [r7, #20]
 8001520:	601a      	str	r2, [r3, #0]
    rxbuff->len =  heth->Init.RxBuffLen;
 8001522:	687b      	ldr	r3, [r7, #4]
 8001524:	695a      	ldr	r2, [r3, #20]
 8001526:	697b      	ldr	r3, [r7, #20]
 8001528:	605a      	str	r2, [r3, #4]

    /* Check if the second buffer address of this descriptor is valid */
    if(dmarxdesc->BackupAddr1 != 0U)
 800152a:	69bb      	ldr	r3, [r7, #24]
 800152c:	695b      	ldr	r3, [r3, #20]
 800152e:	2b00      	cmp	r3, #0
 8001530:	d00b      	beq.n	800154a <HAL_ETH_GetRxDataBuffer+0x98>
    {
      /* Point to next buffer */
      rxbuff = (struct __ETH_BufferTypeDef *)rxbuff->next;
 8001532:	697b      	ldr	r3, [r7, #20]
 8001534:	689b      	ldr	r3, [r3, #8]
 8001536:	617b      	str	r3, [r7, #20]
      /* Get Address and length of the second buffer address */
      rxbuff->buffer = (uint8_t *) dmarxdesc->BackupAddr1;
 8001538:	69bb      	ldr	r3, [r7, #24]
 800153a:	695b      	ldr	r3, [r3, #20]
 800153c:	461a      	mov	r2, r3
 800153e:	697b      	ldr	r3, [r7, #20]
 8001540:	601a      	str	r2, [r3, #0]
      rxbuff->len =  heth->Init.RxBuffLen;
 8001542:	687b      	ldr	r3, [r7, #4]
 8001544:	695a      	ldr	r2, [r3, #20]
 8001546:	697b      	ldr	r3, [r7, #20]
 8001548:	605a      	str	r2, [r3, #4]
    {
      /* Nothing to do here */
    }

    /* get total length until this descriptor */
    accumulatedlen = READ_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCWBF_PL);
 800154a:	69bb      	ldr	r3, [r7, #24]
 800154c:	68db      	ldr	r3, [r3, #12]
 800154e:	f3c3 030e 	ubfx	r3, r3, #0, #15
 8001552:	61fb      	str	r3, [r7, #28]

    /* Increment to next descriptor */
    INCR_RX_DESC_INDEX(descidx, 1U);
 8001554:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001556:	3301      	adds	r3, #1
 8001558:	627b      	str	r3, [r7, #36]	; 0x24
 800155a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800155c:	2b03      	cmp	r3, #3
 800155e:	d902      	bls.n	8001566 <HAL_ETH_GetRxDataBuffer+0xb4>
 8001560:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001562:	3b04      	subs	r3, #4
 8001564:	627b      	str	r3, [r7, #36]	; 0x24
    dmarxdesc = (ETH_DMADescTypeDef *)dmarxdesclist->RxDesc[descidx];
 8001566:	693b      	ldr	r3, [r7, #16]
 8001568:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800156a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800156e:	61bb      	str	r3, [r7, #24]

    /* Point to next buffer */
    rxbuff = (struct __ETH_BufferTypeDef *)rxbuff->next;
 8001570:	697b      	ldr	r3, [r7, #20]
 8001572:	689b      	ldr	r3, [r3, #8]
 8001574:	617b      	str	r3, [r7, #20]
  for(index = 0; index < (dmarxdesclist->AppDescNbr - 1U); index++)
 8001576:	6a3b      	ldr	r3, [r7, #32]
 8001578:	3301      	adds	r3, #1
 800157a:	623b      	str	r3, [r7, #32]
 800157c:	693b      	ldr	r3, [r7, #16]
 800157e:	699b      	ldr	r3, [r3, #24]
 8001580:	3b01      	subs	r3, #1
 8001582:	6a3a      	ldr	r2, [r7, #32]
 8001584:	429a      	cmp	r2, r3
 8001586:	d3c7      	bcc.n	8001518 <HAL_ETH_GetRxDataBuffer+0x66>
  }

  /* last descriptor data length */
  lastdesclen = READ_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCWBF_PL) - accumulatedlen;
 8001588:	69bb      	ldr	r3, [r7, #24]
 800158a:	68db      	ldr	r3, [r3, #12]
 800158c:	f3c3 020e 	ubfx	r2, r3, #0, #15
 8001590:	69fb      	ldr	r3, [r7, #28]
 8001592:	1ad3      	subs	r3, r2, r3
 8001594:	60fb      	str	r3, [r7, #12]

  /* Get Address of the first buffer address */
  rxbuff->buffer = (uint8_t *) dmarxdesc->BackupAddr0;
 8001596:	69bb      	ldr	r3, [r7, #24]
 8001598:	691b      	ldr	r3, [r3, #16]
 800159a:	461a      	mov	r2, r3
 800159c:	697b      	ldr	r3, [r7, #20]
 800159e:	601a      	str	r2, [r3, #0]

  /* data is in only one buffer */
  if(lastdesclen <= heth->Init.RxBuffLen)
 80015a0:	687b      	ldr	r3, [r7, #4]
 80015a2:	695b      	ldr	r3, [r3, #20]
 80015a4:	68fa      	ldr	r2, [r7, #12]
 80015a6:	429a      	cmp	r2, r3
 80015a8:	d803      	bhi.n	80015b2 <HAL_ETH_GetRxDataBuffer+0x100>
  {
    rxbuff->len = lastdesclen;
 80015aa:	697b      	ldr	r3, [r7, #20]
 80015ac:	68fa      	ldr	r2, [r7, #12]
 80015ae:	605a      	str	r2, [r3, #4]
 80015b0:	e018      	b.n	80015e4 <HAL_ETH_GetRxDataBuffer+0x132>
  }
  /* data is in two buffers */
  else if(dmarxdesc->BackupAddr1 != 0U)
 80015b2:	69bb      	ldr	r3, [r7, #24]
 80015b4:	695b      	ldr	r3, [r3, #20]
 80015b6:	2b00      	cmp	r3, #0
 80015b8:	d012      	beq.n	80015e0 <HAL_ETH_GetRxDataBuffer+0x12e>
  {
    /* Get the Length of the first buffer address */
    rxbuff->len = heth->Init.RxBuffLen;
 80015ba:	687b      	ldr	r3, [r7, #4]
 80015bc:	695a      	ldr	r2, [r3, #20]
 80015be:	697b      	ldr	r3, [r7, #20]
 80015c0:	605a      	str	r2, [r3, #4]
    /* Point to next buffer */
    rxbuff = (struct __ETH_BufferTypeDef *)rxbuff->next;
 80015c2:	697b      	ldr	r3, [r7, #20]
 80015c4:	689b      	ldr	r3, [r3, #8]
 80015c6:	617b      	str	r3, [r7, #20]
    /* Get the Address the Length of the second buffer address */
    rxbuff->buffer = (uint8_t *) dmarxdesc->BackupAddr1;
 80015c8:	69bb      	ldr	r3, [r7, #24]
 80015ca:	695b      	ldr	r3, [r3, #20]
 80015cc:	461a      	mov	r2, r3
 80015ce:	697b      	ldr	r3, [r7, #20]
 80015d0:	601a      	str	r2, [r3, #0]
    rxbuff->len =  lastdesclen - (heth->Init.RxBuffLen);
 80015d2:	687b      	ldr	r3, [r7, #4]
 80015d4:	695b      	ldr	r3, [r3, #20]
 80015d6:	68fa      	ldr	r2, [r7, #12]
 80015d8:	1ad2      	subs	r2, r2, r3
 80015da:	697b      	ldr	r3, [r7, #20]
 80015dc:	605a      	str	r2, [r3, #4]
 80015de:	e001      	b.n	80015e4 <HAL_ETH_GetRxDataBuffer+0x132>
  }
  else /* Buffer 2 not valid*/
  {
    return HAL_ERROR;
 80015e0:	2301      	movs	r3, #1
 80015e2:	e000      	b.n	80015e6 <HAL_ETH_GetRxDataBuffer+0x134>
  }

  return HAL_OK;
 80015e4:	2300      	movs	r3, #0
}
 80015e6:	4618      	mov	r0, r3
 80015e8:	3728      	adds	r7, #40	; 0x28
 80015ea:	46bd      	mov	sp, r7
 80015ec:	bd80      	pop	{r7, pc}

080015ee <HAL_ETH_GetRxDataLength>:
  *         the configuration information for ETHERNET module
  * @param  Length: parameter to hold Rx packet length
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_ETH_GetRxDataLength(ETH_HandleTypeDef *heth, uint32_t *Length)
{
 80015ee:	b580      	push	{r7, lr}
 80015f0:	b086      	sub	sp, #24
 80015f2:	af00      	add	r7, sp, #0
 80015f4:	6078      	str	r0, [r7, #4]
 80015f6:	6039      	str	r1, [r7, #0]
  ETH_RxDescListTypeDef *dmarxdesclist = &heth->RxDescList;
 80015f8:	687b      	ldr	r3, [r7, #4]
 80015fa:	332c      	adds	r3, #44	; 0x2c
 80015fc:	613b      	str	r3, [r7, #16]
  uint32_t descidx = dmarxdesclist->FirstAppDesc;
 80015fe:	693b      	ldr	r3, [r7, #16]
 8001600:	695b      	ldr	r3, [r3, #20]
 8001602:	617b      	str	r3, [r7, #20]
  __IO const ETH_DMADescTypeDef *dmarxdesc;

  if(dmarxdesclist->AppDescNbr == 0U)
 8001604:	693b      	ldr	r3, [r7, #16]
 8001606:	699b      	ldr	r3, [r3, #24]
 8001608:	2b00      	cmp	r3, #0
 800160a:	d107      	bne.n	800161c <HAL_ETH_GetRxDataLength+0x2e>
  {
    if(HAL_ETH_IsRxDataAvailable(heth) == 0U)
 800160c:	6878      	ldr	r0, [r7, #4]
 800160e:	f7ff fe72 	bl	80012f6 <HAL_ETH_IsRxDataAvailable>
 8001612:	4603      	mov	r3, r0
 8001614:	2b00      	cmp	r3, #0
 8001616:	d101      	bne.n	800161c <HAL_ETH_GetRxDataLength+0x2e>
    {
      /* No data to be transferred to the application */
      return HAL_ERROR;
 8001618:	2301      	movs	r3, #1
 800161a:	e017      	b.n	800164c <HAL_ETH_GetRxDataLength+0x5e>
    }
  }

  /* Get index of last descriptor */
  INCR_RX_DESC_INDEX(descidx, (dmarxdesclist->AppDescNbr - 1U));
 800161c:	693b      	ldr	r3, [r7, #16]
 800161e:	699a      	ldr	r2, [r3, #24]
 8001620:	697b      	ldr	r3, [r7, #20]
 8001622:	4413      	add	r3, r2
 8001624:	3b01      	subs	r3, #1
 8001626:	617b      	str	r3, [r7, #20]
 8001628:	697b      	ldr	r3, [r7, #20]
 800162a:	2b03      	cmp	r3, #3
 800162c:	d902      	bls.n	8001634 <HAL_ETH_GetRxDataLength+0x46>
 800162e:	697b      	ldr	r3, [r7, #20]
 8001630:	3b04      	subs	r3, #4
 8001632:	617b      	str	r3, [r7, #20]
  /* Point to last descriptor */
  dmarxdesc = (ETH_DMADescTypeDef *)dmarxdesclist->RxDesc[descidx];
 8001634:	693b      	ldr	r3, [r7, #16]
 8001636:	697a      	ldr	r2, [r7, #20]
 8001638:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800163c:	60fb      	str	r3, [r7, #12]

  *Length = READ_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCWBF_PL);
 800163e:	68fb      	ldr	r3, [r7, #12]
 8001640:	68db      	ldr	r3, [r3, #12]
 8001642:	f3c3 020e 	ubfx	r2, r3, #0, #15
 8001646:	683b      	ldr	r3, [r7, #0]
 8001648:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 800164a:	2300      	movs	r3, #0
}
 800164c:	4618      	mov	r0, r3
 800164e:	3718      	adds	r7, #24
 8001650:	46bd      	mov	sp, r7
 8001652:	bd80      	pop	{r7, pc}

08001654 <HAL_ETH_BuildRxDescriptors>:
* @param  heth: pointer to a ETH_HandleTypeDef structure that contains
*         the configuration information for ETHERNET module
* @retval HAL status.
*/
HAL_StatusTypeDef HAL_ETH_BuildRxDescriptors(ETH_HandleTypeDef *heth)
{
 8001654:	b480      	push	{r7}
 8001656:	b089      	sub	sp, #36	; 0x24
 8001658:	af00      	add	r7, sp, #0
 800165a:	6078      	str	r0, [r7, #4]
  ETH_RxDescListTypeDef *dmarxdesclist = &heth->RxDescList;
 800165c:	687b      	ldr	r3, [r7, #4]
 800165e:	332c      	adds	r3, #44	; 0x2c
 8001660:	60fb      	str	r3, [r7, #12]
  uint32_t descindex = dmarxdesclist->FirstAppDesc;
 8001662:	68fb      	ldr	r3, [r7, #12]
 8001664:	695b      	ldr	r3, [r3, #20]
 8001666:	61fb      	str	r3, [r7, #28]
  __IO ETH_DMADescTypeDef *dmarxdesc = (ETH_DMADescTypeDef *)dmarxdesclist->RxDesc[descindex];
 8001668:	68fb      	ldr	r3, [r7, #12]
 800166a:	69fa      	ldr	r2, [r7, #28]
 800166c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001670:	61bb      	str	r3, [r7, #24]
  uint32_t totalappdescnbr = dmarxdesclist->AppDescNbr;
 8001672:	68fb      	ldr	r3, [r7, #12]
 8001674:	699b      	ldr	r3, [r3, #24]
 8001676:	617b      	str	r3, [r7, #20]
  uint32_t descscan;

  if(dmarxdesclist->AppDescNbr == 0U)
 8001678:	68fb      	ldr	r3, [r7, #12]
 800167a:	699b      	ldr	r3, [r3, #24]
 800167c:	2b00      	cmp	r3, #0
 800167e:	d101      	bne.n	8001684 <HAL_ETH_BuildRxDescriptors+0x30>
  {
    /* No Rx descriptors to build */
    return HAL_ERROR;
 8001680:	2301      	movs	r3, #1
 8001682:	e055      	b.n	8001730 <HAL_ETH_BuildRxDescriptors+0xdc>
  }

  if(dmarxdesclist->AppContextDesc != 0U)
 8001684:	68fb      	ldr	r3, [r7, #12]
 8001686:	69db      	ldr	r3, [r3, #28]
 8001688:	2b00      	cmp	r3, #0
 800168a:	d002      	beq.n	8001692 <HAL_ETH_BuildRxDescriptors+0x3e>
  {
    /* A context descriptor is available */
    totalappdescnbr += 1U;
 800168c:	697b      	ldr	r3, [r7, #20]
 800168e:	3301      	adds	r3, #1
 8001690:	617b      	str	r3, [r7, #20]
  }

  for(descscan =0; descscan < totalappdescnbr; descscan++)
 8001692:	2300      	movs	r3, #0
 8001694:	613b      	str	r3, [r7, #16]
 8001696:	e03c      	b.n	8001712 <HAL_ETH_BuildRxDescriptors+0xbe>
  {
    WRITE_REG(dmarxdesc->DESC0, dmarxdesc->BackupAddr0);
 8001698:	69bb      	ldr	r3, [r7, #24]
 800169a:	691a      	ldr	r2, [r3, #16]
 800169c:	69bb      	ldr	r3, [r7, #24]
 800169e:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmarxdesc->DESC3, ETH_DMARXNDESCRF_BUF1V);
 80016a0:	69bb      	ldr	r3, [r7, #24]
 80016a2:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80016a6:	60da      	str	r2, [r3, #12]

    if (READ_REG(dmarxdesc->BackupAddr1) != 0U)
 80016a8:	69bb      	ldr	r3, [r7, #24]
 80016aa:	695b      	ldr	r3, [r3, #20]
 80016ac:	2b00      	cmp	r3, #0
 80016ae:	d009      	beq.n	80016c4 <HAL_ETH_BuildRxDescriptors+0x70>
    {
      WRITE_REG(dmarxdesc->DESC2, dmarxdesc->BackupAddr1);
 80016b0:	69bb      	ldr	r3, [r7, #24]
 80016b2:	695a      	ldr	r2, [r3, #20]
 80016b4:	69bb      	ldr	r3, [r7, #24]
 80016b6:	609a      	str	r2, [r3, #8]
      SET_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCRF_BUF2V);
 80016b8:	69bb      	ldr	r3, [r7, #24]
 80016ba:	68db      	ldr	r3, [r3, #12]
 80016bc:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 80016c0:	69bb      	ldr	r3, [r7, #24]
 80016c2:	60da      	str	r2, [r3, #12]
    }

    SET_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCRF_OWN);
 80016c4:	69bb      	ldr	r3, [r7, #24]
 80016c6:	68db      	ldr	r3, [r3, #12]
 80016c8:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 80016cc:	69bb      	ldr	r3, [r7, #24]
 80016ce:	60da      	str	r2, [r3, #12]

    if(dmarxdesclist->ItMode != 0U)
 80016d0:	68fb      	ldr	r3, [r7, #12]
 80016d2:	6a1b      	ldr	r3, [r3, #32]
 80016d4:	2b00      	cmp	r3, #0
 80016d6:	d005      	beq.n	80016e4 <HAL_ETH_BuildRxDescriptors+0x90>
    {
      SET_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCRF_IOC);
 80016d8:	69bb      	ldr	r3, [r7, #24]
 80016da:	68db      	ldr	r3, [r3, #12]
 80016dc:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 80016e0:	69bb      	ldr	r3, [r7, #24]
 80016e2:	60da      	str	r2, [r3, #12]
    }

    if(descscan < (dmarxdesclist->AppDescNbr - 1U))
 80016e4:	68fb      	ldr	r3, [r7, #12]
 80016e6:	699b      	ldr	r3, [r3, #24]
 80016e8:	3b01      	subs	r3, #1
 80016ea:	693a      	ldr	r2, [r7, #16]
 80016ec:	429a      	cmp	r2, r3
 80016ee:	d20d      	bcs.n	800170c <HAL_ETH_BuildRxDescriptors+0xb8>
    {
      /* Increment rx descriptor index */
      INCR_RX_DESC_INDEX(descindex, 1U);
 80016f0:	69fb      	ldr	r3, [r7, #28]
 80016f2:	3301      	adds	r3, #1
 80016f4:	61fb      	str	r3, [r7, #28]
 80016f6:	69fb      	ldr	r3, [r7, #28]
 80016f8:	2b03      	cmp	r3, #3
 80016fa:	d902      	bls.n	8001702 <HAL_ETH_BuildRxDescriptors+0xae>
 80016fc:	69fb      	ldr	r3, [r7, #28]
 80016fe:	3b04      	subs	r3, #4
 8001700:	61fb      	str	r3, [r7, #28]
      /* Get descriptor address */
      dmarxdesc = (ETH_DMADescTypeDef *)dmarxdesclist->RxDesc[descindex];
 8001702:	68fb      	ldr	r3, [r7, #12]
 8001704:	69fa      	ldr	r2, [r7, #28]
 8001706:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800170a:	61bb      	str	r3, [r7, #24]
  for(descscan =0; descscan < totalappdescnbr; descscan++)
 800170c:	693b      	ldr	r3, [r7, #16]
 800170e:	3301      	adds	r3, #1
 8001710:	613b      	str	r3, [r7, #16]
 8001712:	693a      	ldr	r2, [r7, #16]
 8001714:	697b      	ldr	r3, [r7, #20]
 8001716:	429a      	cmp	r2, r3
 8001718:	d3be      	bcc.n	8001698 <HAL_ETH_BuildRxDescriptors+0x44>
    }
  }

  /* Set the Tail pointer address to the last rx descriptor hold by the app */
  WRITE_REG(heth->Instance->DMACRDTPR, (uint32_t)dmarxdesc);
 800171a:	687b      	ldr	r3, [r7, #4]
 800171c:	6819      	ldr	r1, [r3, #0]
 800171e:	69ba      	ldr	r2, [r7, #24]
 8001720:	f241 1328 	movw	r3, #4392	; 0x1128
 8001724:	440b      	add	r3, r1
 8001726:	601a      	str	r2, [r3, #0]

  /* reset the Application desc number */
  WRITE_REG(dmarxdesclist->AppDescNbr, 0);
 8001728:	68fb      	ldr	r3, [r7, #12]
 800172a:	2200      	movs	r2, #0
 800172c:	619a      	str	r2, [r3, #24]

  return HAL_OK;
 800172e:	2300      	movs	r3, #0
}
 8001730:	4618      	mov	r0, r3
 8001732:	3724      	adds	r7, #36	; 0x24
 8001734:	46bd      	mov	sp, r7
 8001736:	f85d 7b04 	ldr.w	r7, [sp], #4
 800173a:	4770      	bx	lr

0800173c <HAL_ETH_IRQHandler>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
void HAL_ETH_IRQHandler(ETH_HandleTypeDef *heth)
{
 800173c:	b580      	push	{r7, lr}
 800173e:	b082      	sub	sp, #8
 8001740:	af00      	add	r7, sp, #0
 8001742:	6078      	str	r0, [r7, #4]
  /* Packet received */
  if (__HAL_ETH_DMA_GET_IT(heth, ETH_DMACSR_RI))
 8001744:	687b      	ldr	r3, [r7, #4]
 8001746:	681b      	ldr	r3, [r3, #0]
 8001748:	f503 538b 	add.w	r3, r3, #4448	; 0x1160
 800174c:	681b      	ldr	r3, [r3, #0]
 800174e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001752:	2b40      	cmp	r3, #64	; 0x40
 8001754:	d113      	bne.n	800177e <HAL_ETH_IRQHandler+0x42>
  {
    if(__HAL_ETH_DMA_GET_IT_SOURCE(heth, ETH_DMACIER_RIE))
 8001756:	687b      	ldr	r3, [r7, #4]
 8001758:	681a      	ldr	r2, [r3, #0]
 800175a:	f241 1334 	movw	r3, #4404	; 0x1134
 800175e:	4413      	add	r3, r2
 8001760:	681b      	ldr	r3, [r3, #0]
 8001762:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001766:	2b40      	cmp	r3, #64	; 0x40
 8001768:	d109      	bne.n	800177e <HAL_ETH_IRQHandler+0x42>
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
      /*Call registered Receive complete callback*/
      heth->RxCpltCallback(heth);
#else
      /* Receive complete callback */
      HAL_ETH_RxCpltCallback(heth);
 800176a:	6878      	ldr	r0, [r7, #4]
 800176c:	f011 fdfa 	bl	8013364 <HAL_ETH_RxCpltCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */

      /* Clear the Eth DMA Rx IT pending bits */
      __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMACSR_RI | ETH_DMACSR_NIS);
 8001770:	687b      	ldr	r3, [r7, #4]
 8001772:	681b      	ldr	r3, [r3, #0]
 8001774:	f503 538b 	add.w	r3, r3, #4448	; 0x1160
 8001778:	f248 0240 	movw	r2, #32832	; 0x8040
 800177c:	601a      	str	r2, [r3, #0]
    }
  }

  /* Packet transmitted */
  if (__HAL_ETH_DMA_GET_IT(heth, ETH_DMACSR_TI))
 800177e:	687b      	ldr	r3, [r7, #4]
 8001780:	681b      	ldr	r3, [r3, #0]
 8001782:	f503 538b 	add.w	r3, r3, #4448	; 0x1160
 8001786:	681b      	ldr	r3, [r3, #0]
 8001788:	f003 0301 	and.w	r3, r3, #1
 800178c:	2b01      	cmp	r3, #1
 800178e:	d113      	bne.n	80017b8 <HAL_ETH_IRQHandler+0x7c>
  {
    if(__HAL_ETH_DMA_GET_IT_SOURCE(heth, ETH_DMACIER_TIE))
 8001790:	687b      	ldr	r3, [r7, #4]
 8001792:	681a      	ldr	r2, [r3, #0]
 8001794:	f241 1334 	movw	r3, #4404	; 0x1134
 8001798:	4413      	add	r3, r2
 800179a:	681b      	ldr	r3, [r3, #0]
 800179c:	f003 0301 	and.w	r3, r3, #1
 80017a0:	2b01      	cmp	r3, #1
 80017a2:	d109      	bne.n	80017b8 <HAL_ETH_IRQHandler+0x7c>
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
        /*Call registered Transmit complete callback*/
        heth->TxCpltCallback(heth);
#else
      /* Transfer complete callback */
      HAL_ETH_TxCpltCallback(heth);
 80017a4:	6878      	ldr	r0, [r7, #4]
 80017a6:	f000 f8b3 	bl	8001910 <HAL_ETH_TxCpltCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */

      /* Clear the Eth DMA Tx IT pending bits */
      __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMACSR_TI | ETH_DMACSR_NIS);
 80017aa:	687b      	ldr	r3, [r7, #4]
 80017ac:	681b      	ldr	r3, [r3, #0]
 80017ae:	f503 538b 	add.w	r3, r3, #4448	; 0x1160
 80017b2:	f248 0201 	movw	r2, #32769	; 0x8001
 80017b6:	601a      	str	r2, [r3, #0]
    }
  }


  /* ETH DMA Error */
  if(__HAL_ETH_DMA_GET_IT(heth, ETH_DMACSR_AIS))
 80017b8:	687b      	ldr	r3, [r7, #4]
 80017ba:	681b      	ldr	r3, [r3, #0]
 80017bc:	f503 538b 	add.w	r3, r3, #4448	; 0x1160
 80017c0:	681b      	ldr	r3, [r3, #0]
 80017c2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80017c6:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80017ca:	d149      	bne.n	8001860 <HAL_ETH_IRQHandler+0x124>
  {
    if(__HAL_ETH_DMA_GET_IT_SOURCE(heth, ETH_DMACIER_AIE))
 80017cc:	687b      	ldr	r3, [r7, #4]
 80017ce:	681a      	ldr	r2, [r3, #0]
 80017d0:	f241 1334 	movw	r3, #4404	; 0x1134
 80017d4:	4413      	add	r3, r2
 80017d6:	681b      	ldr	r3, [r3, #0]
 80017d8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80017dc:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80017e0:	d13e      	bne.n	8001860 <HAL_ETH_IRQHandler+0x124>
    {
      heth->ErrorCode |= HAL_ETH_ERROR_DMA;
 80017e2:	687b      	ldr	r3, [r7, #4]
 80017e4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80017e6:	f043 0208 	orr.w	r2, r3, #8
 80017ea:	687b      	ldr	r3, [r7, #4]
 80017ec:	65da      	str	r2, [r3, #92]	; 0x5c

      /* if fatal bus error occured */
      if (__HAL_ETH_DMA_GET_IT(heth, ETH_DMACSR_FBE))
 80017ee:	687b      	ldr	r3, [r7, #4]
 80017f0:	681b      	ldr	r3, [r3, #0]
 80017f2:	f503 538b 	add.w	r3, r3, #4448	; 0x1160
 80017f6:	681b      	ldr	r3, [r3, #0]
 80017f8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80017fc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001800:	d11b      	bne.n	800183a <HAL_ETH_IRQHandler+0xfe>
      {
        /* Get DMA error code  */
        heth->DMAErrorCode = READ_BIT(heth->Instance->DMACSR, (ETH_DMACSR_FBE | ETH_DMACSR_TPS | ETH_DMACSR_RPS));
 8001802:	687b      	ldr	r3, [r7, #4]
 8001804:	681b      	ldr	r3, [r3, #0]
 8001806:	f503 538b 	add.w	r3, r3, #4448	; 0x1160
 800180a:	681a      	ldr	r2, [r3, #0]
 800180c:	f241 1302 	movw	r3, #4354	; 0x1102
 8001810:	4013      	ands	r3, r2
 8001812:	687a      	ldr	r2, [r7, #4]
 8001814:	6613      	str	r3, [r2, #96]	; 0x60

        /* Disable all interrupts */
        __HAL_ETH_DMA_DISABLE_IT(heth, ETH_DMACIER_NIE | ETH_DMACIER_AIE);
 8001816:	687b      	ldr	r3, [r7, #4]
 8001818:	681a      	ldr	r2, [r3, #0]
 800181a:	f241 1334 	movw	r3, #4404	; 0x1134
 800181e:	4413      	add	r3, r2
 8001820:	681b      	ldr	r3, [r3, #0]
 8001822:	687a      	ldr	r2, [r7, #4]
 8001824:	6811      	ldr	r1, [r2, #0]
 8001826:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 800182a:	f241 1334 	movw	r3, #4404	; 0x1134
 800182e:	440b      	add	r3, r1
 8001830:	601a      	str	r2, [r3, #0]

        /* Set HAL state to ERROR */
        heth->gState = HAL_ETH_STATE_ERROR;
 8001832:	687b      	ldr	r3, [r7, #4]
 8001834:	22e0      	movs	r2, #224	; 0xe0
 8001836:	655a      	str	r2, [r3, #84]	; 0x54
 8001838:	e00f      	b.n	800185a <HAL_ETH_IRQHandler+0x11e>
      }
      else
      {
        /* Get DMA error status  */
       heth->DMAErrorCode = READ_BIT(heth->Instance->DMACSR, (ETH_DMACSR_CDE | ETH_DMACSR_ETI | ETH_DMACSR_RWT |
 800183a:	687b      	ldr	r3, [r7, #4]
 800183c:	681b      	ldr	r3, [r3, #0]
 800183e:	f503 538b 	add.w	r3, r3, #4448	; 0x1160
 8001842:	681b      	ldr	r3, [r3, #0]
 8001844:	f403 42cd 	and.w	r2, r3, #26240	; 0x6680
 8001848:	687b      	ldr	r3, [r7, #4]
 800184a:	661a      	str	r2, [r3, #96]	; 0x60
                                                       ETH_DMACSR_RBU | ETH_DMACSR_AIS));

        /* Clear the interrupt summary flag */
        __HAL_ETH_DMA_CLEAR_IT(heth, (ETH_DMACSR_CDE | ETH_DMACSR_ETI | ETH_DMACSR_RWT |
 800184c:	687b      	ldr	r3, [r7, #4]
 800184e:	681b      	ldr	r3, [r3, #0]
 8001850:	f503 538b 	add.w	r3, r3, #4448	; 0x1160
 8001854:	f44f 42cd 	mov.w	r2, #26240	; 0x6680
 8001858:	601a      	str	r2, [r3, #0]
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
      /* Call registered DMA Error callback*/
      heth->DMAErrorCallback(heth);
#else
      /* Ethernet DMA Error callback */
      HAL_ETH_DMAErrorCallback(heth);
 800185a:	6878      	ldr	r0, [r7, #4]
 800185c:	f000 f862 	bl	8001924 <HAL_ETH_DMAErrorCallback>

    }
  }

  /* ETH MAC Error IT */
  if(__HAL_ETH_MAC_GET_IT(heth, (ETH_MACIER_RXSTSIE | ETH_MACIER_TXSTSIE)))
 8001860:	687b      	ldr	r3, [r7, #4]
 8001862:	681b      	ldr	r3, [r3, #0]
 8001864:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8001868:	f403 43c0 	and.w	r3, r3, #24576	; 0x6000
 800186c:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8001870:	d10e      	bne.n	8001890 <HAL_ETH_IRQHandler+0x154>
  {
    /* Get MAC Rx Tx status and clear Status register pending bit */
    heth->MACErrorCode = READ_REG(heth->Instance->MACRXTXSR);
 8001872:	687b      	ldr	r3, [r7, #4]
 8001874:	681b      	ldr	r3, [r3, #0]
 8001876:	f8d3 20b8 	ldr.w	r2, [r3, #184]	; 0xb8
 800187a:	687b      	ldr	r3, [r7, #4]
 800187c:	665a      	str	r2, [r3, #100]	; 0x64

    heth->gState = HAL_ETH_STATE_ERROR;
 800187e:	687b      	ldr	r3, [r7, #4]
 8001880:	22e0      	movs	r2, #224	; 0xe0
 8001882:	655a      	str	r2, [r3, #84]	; 0x54
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    /* Call registered MAC Error callback*/
    heth->DMAErrorCallback(heth);
#else
    /* Ethernet MAC Error callback */
    HAL_ETH_MACErrorCallback(heth);
 8001884:	6878      	ldr	r0, [r7, #4]
 8001886:	f000 f857 	bl	8001938 <HAL_ETH_MACErrorCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */

    heth->MACErrorCode = (uint32_t)(0x0U);
 800188a:	687b      	ldr	r3, [r7, #4]
 800188c:	2200      	movs	r2, #0
 800188e:	665a      	str	r2, [r3, #100]	; 0x64
  }

  /* ETH PMT IT */
  if(__HAL_ETH_MAC_GET_IT(heth, ETH_MAC_PMT_IT))
 8001890:	687b      	ldr	r3, [r7, #4]
 8001892:	681b      	ldr	r3, [r3, #0]
 8001894:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8001898:	f003 0310 	and.w	r3, r3, #16
 800189c:	2b10      	cmp	r3, #16
 800189e:	d10d      	bne.n	80018bc <HAL_ETH_IRQHandler+0x180>
  {
    /* Get MAC Wake-up source and clear the status register pending bit */
    heth->MACWakeUpEvent = READ_BIT(heth->Instance->MACPCSR, (ETH_MACPCSR_RWKPRCVD | ETH_MACPCSR_MGKPRCVD));
 80018a0:	687b      	ldr	r3, [r7, #4]
 80018a2:	681b      	ldr	r3, [r3, #0]
 80018a4:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 80018a8:	f003 0260 	and.w	r2, r3, #96	; 0x60
 80018ac:	687b      	ldr	r3, [r7, #4]
 80018ae:	669a      	str	r2, [r3, #104]	; 0x68
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    /* Call registered PMT callback*/
    heth->PMTCallback(heth);
#else
    /* Ethernet PMT callback */
    HAL_ETH_PMTCallback(heth);
 80018b0:	6878      	ldr	r0, [r7, #4]
 80018b2:	f000 f84b 	bl	800194c <HAL_ETH_PMTCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */

    heth->MACWakeUpEvent = (uint32_t)(0x0U);
 80018b6:	687b      	ldr	r3, [r7, #4]
 80018b8:	2200      	movs	r2, #0
 80018ba:	669a      	str	r2, [r3, #104]	; 0x68
  }

  /* ETH EEE IT */
  if(__HAL_ETH_MAC_GET_IT(heth, ETH_MAC_LPI_IT))
 80018bc:	687b      	ldr	r3, [r7, #4]
 80018be:	681b      	ldr	r3, [r3, #0]
 80018c0:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80018c4:	f003 0320 	and.w	r3, r3, #32
 80018c8:	2b20      	cmp	r3, #32
 80018ca:	d10d      	bne.n	80018e8 <HAL_ETH_IRQHandler+0x1ac>
  {
    /* Get MAC LPI interrupt source and clear the status register pending bit */
    heth->MACLPIEvent = READ_BIT(heth->Instance->MACPCSR, 0x0000000FU);
 80018cc:	687b      	ldr	r3, [r7, #4]
 80018ce:	681b      	ldr	r3, [r3, #0]
 80018d0:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 80018d4:	f003 020f 	and.w	r2, r3, #15
 80018d8:	687b      	ldr	r3, [r7, #4]
 80018da:	66da      	str	r2, [r3, #108]	; 0x6c
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    /* Call registered EEE callback*/
    heth->EEECallback(heth);
#else
    /* Ethernet EEE callback */
    HAL_ETH_EEECallback(heth);
 80018dc:	6878      	ldr	r0, [r7, #4]
 80018de:	f000 f83f 	bl	8001960 <HAL_ETH_EEECallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */

    heth->MACLPIEvent = (uint32_t)(0x0U);
 80018e2:	687b      	ldr	r3, [r7, #4]
 80018e4:	2200      	movs	r2, #0
 80018e6:	66da      	str	r2, [r3, #108]	; 0x6c
#endif
    }
  }
#else
  /* check ETH WAKEUP exti flag */
  if(__HAL_ETH_WAKEUP_EXTI_GET_FLAG(ETH_WAKEUP_EXTI_LINE) != (uint32_t)RESET)
 80018e8:	4b08      	ldr	r3, [pc, #32]	; (800190c <HAL_ETH_IRQHandler+0x1d0>)
 80018ea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80018ec:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80018f0:	2b00      	cmp	r3, #0
 80018f2:	d006      	beq.n	8001902 <HAL_ETH_IRQHandler+0x1c6>
  {
    /* Clear ETH WAKEUP Exti pending bit */
    __HAL_ETH_WAKEUP_EXTI_CLEAR_FLAG(ETH_WAKEUP_EXTI_LINE);
 80018f4:	4b05      	ldr	r3, [pc, #20]	; (800190c <HAL_ETH_IRQHandler+0x1d0>)
 80018f6:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 80018fa:	629a      	str	r2, [r3, #40]	; 0x28
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
      /* Call registered WakeUp callback*/
      heth->WakeUpCallback(heth);
#else
      /* ETH WAKEUP callback */
      HAL_ETH_WakeUpCallback(heth);
 80018fc:	6878      	ldr	r0, [r7, #4]
 80018fe:	f000 f839 	bl	8001974 <HAL_ETH_WakeUpCallback>
#endif
  }
#endif
}
 8001902:	bf00      	nop
 8001904:	3708      	adds	r7, #8
 8001906:	46bd      	mov	sp, r7
 8001908:	bd80      	pop	{r7, pc}
 800190a:	bf00      	nop
 800190c:	58000080 	.word	0x58000080

08001910 <HAL_ETH_TxCpltCallback>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_TxCpltCallback(ETH_HandleTypeDef *heth)
{
 8001910:	b480      	push	{r7}
 8001912:	b083      	sub	sp, #12
 8001914:	af00      	add	r7, sp, #0
 8001916:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);
  /* NOTE : This function Should not be modified, when the callback is needed,
  the HAL_ETH_TxCpltCallback could be implemented in the user file
  */
}
 8001918:	bf00      	nop
 800191a:	370c      	adds	r7, #12
 800191c:	46bd      	mov	sp, r7
 800191e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001922:	4770      	bx	lr

08001924 <HAL_ETH_DMAErrorCallback>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_DMAErrorCallback(ETH_HandleTypeDef *heth)
{
 8001924:	b480      	push	{r7}
 8001926:	b083      	sub	sp, #12
 8001928:	af00      	add	r7, sp, #0
 800192a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);
  /* NOTE : This function Should not be modified, when the callback is needed,
  the HAL_ETH_DMAErrorCallback could be implemented in the user file
  */
}
 800192c:	bf00      	nop
 800192e:	370c      	adds	r7, #12
 8001930:	46bd      	mov	sp, r7
 8001932:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001936:	4770      	bx	lr

08001938 <HAL_ETH_MACErrorCallback>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_MACErrorCallback(ETH_HandleTypeDef *heth)
{
 8001938:	b480      	push	{r7}
 800193a:	b083      	sub	sp, #12
 800193c:	af00      	add	r7, sp, #0
 800193e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);
  /* NOTE : This function Should not be modified, when the callback is needed,
  the HAL_ETH_MACErrorCallback could be implemented in the user file
  */
}
 8001940:	bf00      	nop
 8001942:	370c      	adds	r7, #12
 8001944:	46bd      	mov	sp, r7
 8001946:	f85d 7b04 	ldr.w	r7, [sp], #4
 800194a:	4770      	bx	lr

0800194c <HAL_ETH_PMTCallback>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_PMTCallback(ETH_HandleTypeDef *heth)
{
 800194c:	b480      	push	{r7}
 800194e:	b083      	sub	sp, #12
 8001950:	af00      	add	r7, sp, #0
 8001952:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);
  /* NOTE : This function Should not be modified, when the callback is needed,
  the HAL_ETH_PMTCallback could be implemented in the user file
  */
}
 8001954:	bf00      	nop
 8001956:	370c      	adds	r7, #12
 8001958:	46bd      	mov	sp, r7
 800195a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800195e:	4770      	bx	lr

08001960 <HAL_ETH_EEECallback>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_EEECallback(ETH_HandleTypeDef *heth)
{
 8001960:	b480      	push	{r7}
 8001962:	b083      	sub	sp, #12
 8001964:	af00      	add	r7, sp, #0
 8001966:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);
  /* NOTE : This function Should not be modified, when the callback is needed,
  the HAL_ETH_EEECallback could be implemented in the user file
  */
}
 8001968:	bf00      	nop
 800196a:	370c      	adds	r7, #12
 800196c:	46bd      	mov	sp, r7
 800196e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001972:	4770      	bx	lr

08001974 <HAL_ETH_WakeUpCallback>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_WakeUpCallback(ETH_HandleTypeDef *heth)
{
 8001974:	b480      	push	{r7}
 8001976:	b083      	sub	sp, #12
 8001978:	af00      	add	r7, sp, #0
 800197a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ETH_WakeUpCallback could be implemented in the user file
   */
}
 800197c:	bf00      	nop
 800197e:	370c      	adds	r7, #12
 8001980:	46bd      	mov	sp, r7
 8001982:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001986:	4770      	bx	lr

08001988 <HAL_ETH_ReadPHYRegister>:
  * @param  PHYReg: PHY register address, must be a value from 0 to 31
  * @param pRegValue: parameter to hold read value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_ReadPHYRegister(ETH_HandleTypeDef *heth, uint32_t PHYAddr, uint32_t PHYReg, uint32_t *pRegValue)
{
 8001988:	b580      	push	{r7, lr}
 800198a:	b086      	sub	sp, #24
 800198c:	af00      	add	r7, sp, #0
 800198e:	60f8      	str	r0, [r7, #12]
 8001990:	60b9      	str	r1, [r7, #8]
 8001992:	607a      	str	r2, [r7, #4]
 8001994:	603b      	str	r3, [r7, #0]
  uint32_t tmpreg, tickstart;

  /* Check for the Busy flag */
  if(READ_BIT(heth->Instance->MACMDIOAR, ETH_MACMDIOAR_MB) != 0U)
 8001996:	68fb      	ldr	r3, [r7, #12]
 8001998:	681b      	ldr	r3, [r3, #0]
 800199a:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800199e:	f003 0301 	and.w	r3, r3, #1
 80019a2:	2b00      	cmp	r3, #0
 80019a4:	d001      	beq.n	80019aa <HAL_ETH_ReadPHYRegister+0x22>
  {
    return HAL_ERROR;
 80019a6:	2301      	movs	r3, #1
 80019a8:	e03e      	b.n	8001a28 <HAL_ETH_ReadPHYRegister+0xa0>
  }

  /* Get the  MACMDIOAR value */
  WRITE_REG(tmpreg, heth->Instance->MACMDIOAR);
 80019aa:	68fb      	ldr	r3, [r7, #12]
 80019ac:	681b      	ldr	r3, [r3, #0]
 80019ae:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80019b2:	617b      	str	r3, [r7, #20]
     - Set the PHY device address
     - Set the PHY register address
     - Set the read mode
     - Set the MII Busy bit */

  MODIFY_REG(tmpreg, ETH_MACMDIOAR_PA, (PHYAddr <<21));
 80019b4:	697b      	ldr	r3, [r7, #20]
 80019b6:	f023 7278 	bic.w	r2, r3, #65011712	; 0x3e00000
 80019ba:	68bb      	ldr	r3, [r7, #8]
 80019bc:	055b      	lsls	r3, r3, #21
 80019be:	4313      	orrs	r3, r2
 80019c0:	617b      	str	r3, [r7, #20]
  MODIFY_REG(tmpreg, ETH_MACMDIOAR_RDA, (PHYReg << 16));
 80019c2:	697b      	ldr	r3, [r7, #20]
 80019c4:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 80019c8:	687b      	ldr	r3, [r7, #4]
 80019ca:	041b      	lsls	r3, r3, #16
 80019cc:	4313      	orrs	r3, r2
 80019ce:	617b      	str	r3, [r7, #20]
  MODIFY_REG(tmpreg, ETH_MACMDIOAR_MOC, ETH_MACMDIOAR_MOC_RD);
 80019d0:	697b      	ldr	r3, [r7, #20]
 80019d2:	f043 030c 	orr.w	r3, r3, #12
 80019d6:	617b      	str	r3, [r7, #20]
  SET_BIT(tmpreg, ETH_MACMDIOAR_MB);
 80019d8:	697b      	ldr	r3, [r7, #20]
 80019da:	f043 0301 	orr.w	r3, r3, #1
 80019de:	617b      	str	r3, [r7, #20]

  /* Write the result value into the MDII Address register */
  WRITE_REG(heth->Instance->MACMDIOAR, tmpreg);
 80019e0:	68fb      	ldr	r3, [r7, #12]
 80019e2:	681b      	ldr	r3, [r3, #0]
 80019e4:	697a      	ldr	r2, [r7, #20]
 80019e6:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

  tickstart = HAL_GetTick();
 80019ea:	f7ff f871 	bl	8000ad0 <HAL_GetTick>
 80019ee:	6138      	str	r0, [r7, #16]

  /* Wait for the Busy flag */
  while(READ_BIT(heth->Instance->MACMDIOAR, ETH_MACMDIOAR_MB) > 0U)
 80019f0:	e009      	b.n	8001a06 <HAL_ETH_ReadPHYRegister+0x7e>
  {
    if(((HAL_GetTick() - tickstart ) > ETH_MDIO_BUS_TIMEOUT))
 80019f2:	f7ff f86d 	bl	8000ad0 <HAL_GetTick>
 80019f6:	4602      	mov	r2, r0
 80019f8:	693b      	ldr	r3, [r7, #16]
 80019fa:	1ad3      	subs	r3, r2, r3
 80019fc:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001a00:	d901      	bls.n	8001a06 <HAL_ETH_ReadPHYRegister+0x7e>
    {
      return HAL_ERROR;
 8001a02:	2301      	movs	r3, #1
 8001a04:	e010      	b.n	8001a28 <HAL_ETH_ReadPHYRegister+0xa0>
  while(READ_BIT(heth->Instance->MACMDIOAR, ETH_MACMDIOAR_MB) > 0U)
 8001a06:	68fb      	ldr	r3, [r7, #12]
 8001a08:	681b      	ldr	r3, [r3, #0]
 8001a0a:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8001a0e:	f003 0301 	and.w	r3, r3, #1
 8001a12:	2b00      	cmp	r3, #0
 8001a14:	d1ed      	bne.n	80019f2 <HAL_ETH_ReadPHYRegister+0x6a>
    }
  }

  /* Get MACMIIDR value */
  WRITE_REG(*pRegValue, (uint16_t)heth->Instance->MACMDIODR);
 8001a16:	68fb      	ldr	r3, [r7, #12]
 8001a18:	681b      	ldr	r3, [r3, #0]
 8001a1a:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 8001a1e:	b29b      	uxth	r3, r3
 8001a20:	461a      	mov	r2, r3
 8001a22:	683b      	ldr	r3, [r7, #0]
 8001a24:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 8001a26:	2300      	movs	r3, #0
}
 8001a28:	4618      	mov	r0, r3
 8001a2a:	3718      	adds	r7, #24
 8001a2c:	46bd      	mov	sp, r7
 8001a2e:	bd80      	pop	{r7, pc}

08001a30 <HAL_ETH_WritePHYRegister>:
  * @param  PHYReg: PHY register address, must be a value from 0 to 31
  * @param  RegValue: the value to write
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_WritePHYRegister(ETH_HandleTypeDef *heth, uint32_t PHYAddr, uint32_t PHYReg, uint32_t RegValue)
{
 8001a30:	b580      	push	{r7, lr}
 8001a32:	b086      	sub	sp, #24
 8001a34:	af00      	add	r7, sp, #0
 8001a36:	60f8      	str	r0, [r7, #12]
 8001a38:	60b9      	str	r1, [r7, #8]
 8001a3a:	607a      	str	r2, [r7, #4]
 8001a3c:	603b      	str	r3, [r7, #0]
  uint32_t tmpreg, tickstart;

  /* Check for the Busy flag */
  if(READ_BIT(heth->Instance->MACMDIOAR, ETH_MACMDIOAR_MB) != 0U)
 8001a3e:	68fb      	ldr	r3, [r7, #12]
 8001a40:	681b      	ldr	r3, [r3, #0]
 8001a42:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8001a46:	f003 0301 	and.w	r3, r3, #1
 8001a4a:	2b00      	cmp	r3, #0
 8001a4c:	d001      	beq.n	8001a52 <HAL_ETH_WritePHYRegister+0x22>
  {
    return HAL_ERROR;
 8001a4e:	2301      	movs	r3, #1
 8001a50:	e03c      	b.n	8001acc <HAL_ETH_WritePHYRegister+0x9c>
  }

  /* Get the  MACMDIOAR value */
  WRITE_REG(tmpreg, heth->Instance->MACMDIOAR);
 8001a52:	68fb      	ldr	r3, [r7, #12]
 8001a54:	681b      	ldr	r3, [r3, #0]
 8001a56:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8001a5a:	617b      	str	r3, [r7, #20]
     - Set the PHY device address
     - Set the PHY register address
     - Set the write mode
     - Set the MII Busy bit */

  MODIFY_REG(tmpreg, ETH_MACMDIOAR_PA, (PHYAddr <<21));
 8001a5c:	697b      	ldr	r3, [r7, #20]
 8001a5e:	f023 7278 	bic.w	r2, r3, #65011712	; 0x3e00000
 8001a62:	68bb      	ldr	r3, [r7, #8]
 8001a64:	055b      	lsls	r3, r3, #21
 8001a66:	4313      	orrs	r3, r2
 8001a68:	617b      	str	r3, [r7, #20]
  MODIFY_REG(tmpreg, ETH_MACMDIOAR_RDA, (PHYReg << 16));
 8001a6a:	697b      	ldr	r3, [r7, #20]
 8001a6c:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8001a70:	687b      	ldr	r3, [r7, #4]
 8001a72:	041b      	lsls	r3, r3, #16
 8001a74:	4313      	orrs	r3, r2
 8001a76:	617b      	str	r3, [r7, #20]
  MODIFY_REG(tmpreg, ETH_MACMDIOAR_MOC, ETH_MACMDIOAR_MOC_WR);
 8001a78:	697b      	ldr	r3, [r7, #20]
 8001a7a:	f023 030c 	bic.w	r3, r3, #12
 8001a7e:	f043 0304 	orr.w	r3, r3, #4
 8001a82:	617b      	str	r3, [r7, #20]
  SET_BIT(tmpreg, ETH_MACMDIOAR_MB);
 8001a84:	697b      	ldr	r3, [r7, #20]
 8001a86:	f043 0301 	orr.w	r3, r3, #1
 8001a8a:	617b      	str	r3, [r7, #20]


  /* Give the value to the MII data register */
  WRITE_REG(ETH->MACMDIODR, (uint16_t)RegValue);
 8001a8c:	683b      	ldr	r3, [r7, #0]
 8001a8e:	b29a      	uxth	r2, r3
 8001a90:	4b10      	ldr	r3, [pc, #64]	; (8001ad4 <HAL_ETH_WritePHYRegister+0xa4>)
 8001a92:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  /* Write the result value into the MII Address register */
  WRITE_REG(ETH->MACMDIOAR, tmpreg);
 8001a96:	4a0f      	ldr	r2, [pc, #60]	; (8001ad4 <HAL_ETH_WritePHYRegister+0xa4>)
 8001a98:	697b      	ldr	r3, [r7, #20]
 8001a9a:	f8c2 3200 	str.w	r3, [r2, #512]	; 0x200

  tickstart = HAL_GetTick();
 8001a9e:	f7ff f817 	bl	8000ad0 <HAL_GetTick>
 8001aa2:	6138      	str	r0, [r7, #16]

  /* Wait for the Busy flag */
  while(READ_BIT(heth->Instance->MACMDIOAR, ETH_MACMDIOAR_MB) > 0U)
 8001aa4:	e009      	b.n	8001aba <HAL_ETH_WritePHYRegister+0x8a>
  {
    if(((HAL_GetTick() - tickstart ) > ETH_MDIO_BUS_TIMEOUT))
 8001aa6:	f7ff f813 	bl	8000ad0 <HAL_GetTick>
 8001aaa:	4602      	mov	r2, r0
 8001aac:	693b      	ldr	r3, [r7, #16]
 8001aae:	1ad3      	subs	r3, r2, r3
 8001ab0:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001ab4:	d901      	bls.n	8001aba <HAL_ETH_WritePHYRegister+0x8a>
    {
      return HAL_ERROR;
 8001ab6:	2301      	movs	r3, #1
 8001ab8:	e008      	b.n	8001acc <HAL_ETH_WritePHYRegister+0x9c>
  while(READ_BIT(heth->Instance->MACMDIOAR, ETH_MACMDIOAR_MB) > 0U)
 8001aba:	68fb      	ldr	r3, [r7, #12]
 8001abc:	681b      	ldr	r3, [r3, #0]
 8001abe:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8001ac2:	f003 0301 	and.w	r3, r3, #1
 8001ac6:	2b00      	cmp	r3, #0
 8001ac8:	d1ed      	bne.n	8001aa6 <HAL_ETH_WritePHYRegister+0x76>
    }
  }

  return HAL_OK;
 8001aca:	2300      	movs	r3, #0
}
 8001acc:	4618      	mov	r0, r3
 8001ace:	3718      	adds	r7, #24
 8001ad0:	46bd      	mov	sp, r7
 8001ad2:	bd80      	pop	{r7, pc}
 8001ad4:	40028000 	.word	0x40028000

08001ad8 <HAL_ETH_GetMACConfig>:
  * @param  macconf: pointer to a ETH_MACConfigTypeDef structure that will hold
  *         the configuration of the MAC.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_ETH_GetMACConfig(ETH_HandleTypeDef *heth, ETH_MACConfigTypeDef *macconf)
{
 8001ad8:	b480      	push	{r7}
 8001ada:	b083      	sub	sp, #12
 8001adc:	af00      	add	r7, sp, #0
 8001ade:	6078      	str	r0, [r7, #4]
 8001ae0:	6039      	str	r1, [r7, #0]
  if (macconf == NULL)
 8001ae2:	683b      	ldr	r3, [r7, #0]
 8001ae4:	2b00      	cmp	r3, #0
 8001ae6:	d101      	bne.n	8001aec <HAL_ETH_GetMACConfig+0x14>
  {
    return HAL_ERROR;
 8001ae8:	2301      	movs	r3, #1
 8001aea:	e1c3      	b.n	8001e74 <HAL_ETH_GetMACConfig+0x39c>
  }

  /* Get MAC parameters */
  macconf->PreambleLength = READ_BIT(heth->Instance->MACCR, ETH_MACCR_PRELEN);
 8001aec:	687b      	ldr	r3, [r7, #4]
 8001aee:	681b      	ldr	r3, [r3, #0]
 8001af0:	681b      	ldr	r3, [r3, #0]
 8001af2:	f003 020c 	and.w	r2, r3, #12
 8001af6:	683b      	ldr	r3, [r7, #0]
 8001af8:	62da      	str	r2, [r3, #44]	; 0x2c
  macconf->DeferralCheck = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_DC)>> 4) > 0U) ? ENABLE : DISABLE;
 8001afa:	687b      	ldr	r3, [r7, #4]
 8001afc:	681b      	ldr	r3, [r3, #0]
 8001afe:	681b      	ldr	r3, [r3, #0]
 8001b00:	f003 0310 	and.w	r3, r3, #16
 8001b04:	2b00      	cmp	r3, #0
 8001b06:	bf14      	ite	ne
 8001b08:	2301      	movne	r3, #1
 8001b0a:	2300      	moveq	r3, #0
 8001b0c:	b2db      	uxtb	r3, r3
 8001b0e:	461a      	mov	r2, r3
 8001b10:	683b      	ldr	r3, [r7, #0]
 8001b12:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
  macconf->BackOffLimit = READ_BIT(heth->Instance->MACCR, ETH_MACCR_BL);
 8001b16:	687b      	ldr	r3, [r7, #4]
 8001b18:	681b      	ldr	r3, [r3, #0]
 8001b1a:	681b      	ldr	r3, [r3, #0]
 8001b1c:	f003 0260 	and.w	r2, r3, #96	; 0x60
 8001b20:	683b      	ldr	r3, [r7, #0]
 8001b22:	625a      	str	r2, [r3, #36]	; 0x24
  macconf->RetryTransmission = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_DR) >> 8) == 0U) ? ENABLE : DISABLE;
 8001b24:	687b      	ldr	r3, [r7, #4]
 8001b26:	681b      	ldr	r3, [r3, #0]
 8001b28:	681b      	ldr	r3, [r3, #0]
 8001b2a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001b2e:	2b00      	cmp	r3, #0
 8001b30:	bf0c      	ite	eq
 8001b32:	2301      	moveq	r3, #1
 8001b34:	2300      	movne	r3, #0
 8001b36:	b2db      	uxtb	r3, r3
 8001b38:	461a      	mov	r2, r3
 8001b3a:	683b      	ldr	r3, [r7, #0]
 8001b3c:	f883 2020 	strb.w	r2, [r3, #32]
  macconf->CarrierSenseDuringTransmit = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_DCRS) >> 9) > 0U) ? ENABLE : DISABLE;
 8001b40:	687b      	ldr	r3, [r7, #4]
 8001b42:	681b      	ldr	r3, [r3, #0]
 8001b44:	681b      	ldr	r3, [r3, #0]
 8001b46:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001b4a:	2b00      	cmp	r3, #0
 8001b4c:	bf14      	ite	ne
 8001b4e:	2301      	movne	r3, #1
 8001b50:	2300      	moveq	r3, #0
 8001b52:	b2db      	uxtb	r3, r3
 8001b54:	461a      	mov	r2, r3
 8001b56:	683b      	ldr	r3, [r7, #0]
 8001b58:	77da      	strb	r2, [r3, #31]
  macconf->ReceiveOwn = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_DO) >> 10) == 0U) ? ENABLE : DISABLE;
 8001b5a:	687b      	ldr	r3, [r7, #4]
 8001b5c:	681b      	ldr	r3, [r3, #0]
 8001b5e:	681b      	ldr	r3, [r3, #0]
 8001b60:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001b64:	2b00      	cmp	r3, #0
 8001b66:	bf0c      	ite	eq
 8001b68:	2301      	moveq	r3, #1
 8001b6a:	2300      	movne	r3, #0
 8001b6c:	b2db      	uxtb	r3, r3
 8001b6e:	461a      	mov	r2, r3
 8001b70:	683b      	ldr	r3, [r7, #0]
 8001b72:	779a      	strb	r2, [r3, #30]
  macconf->CarrierSenseBeforeTransmit = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_ECRSFD) >> 11) > 0U) ? ENABLE : DISABLE;
 8001b74:	687b      	ldr	r3, [r7, #4]
 8001b76:	681b      	ldr	r3, [r3, #0]
 8001b78:	681b      	ldr	r3, [r3, #0]
 8001b7a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001b7e:	2b00      	cmp	r3, #0
 8001b80:	bf14      	ite	ne
 8001b82:	2301      	movne	r3, #1
 8001b84:	2300      	moveq	r3, #0
 8001b86:	b2db      	uxtb	r3, r3
 8001b88:	461a      	mov	r2, r3
 8001b8a:	683b      	ldr	r3, [r7, #0]
 8001b8c:	775a      	strb	r2, [r3, #29]
  macconf->LoopbackMode = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_LM) >> 12) > 0U) ? ENABLE : DISABLE;
 8001b8e:	687b      	ldr	r3, [r7, #4]
 8001b90:	681b      	ldr	r3, [r3, #0]
 8001b92:	681b      	ldr	r3, [r3, #0]
 8001b94:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001b98:	2b00      	cmp	r3, #0
 8001b9a:	bf14      	ite	ne
 8001b9c:	2301      	movne	r3, #1
 8001b9e:	2300      	moveq	r3, #0
 8001ba0:	b2db      	uxtb	r3, r3
 8001ba2:	461a      	mov	r2, r3
 8001ba4:	683b      	ldr	r3, [r7, #0]
 8001ba6:	771a      	strb	r2, [r3, #28]
  macconf->DuplexMode = READ_BIT(heth->Instance->MACCR, ETH_MACCR_DM);
 8001ba8:	687b      	ldr	r3, [r7, #4]
 8001baa:	681b      	ldr	r3, [r3, #0]
 8001bac:	681b      	ldr	r3, [r3, #0]
 8001bae:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8001bb2:	683b      	ldr	r3, [r7, #0]
 8001bb4:	619a      	str	r2, [r3, #24]
  macconf->Speed = READ_BIT(heth->Instance->MACCR, ETH_MACCR_FES);
 8001bb6:	687b      	ldr	r3, [r7, #4]
 8001bb8:	681b      	ldr	r3, [r3, #0]
 8001bba:	681b      	ldr	r3, [r3, #0]
 8001bbc:	f403 4280 	and.w	r2, r3, #16384	; 0x4000
 8001bc0:	683b      	ldr	r3, [r7, #0]
 8001bc2:	615a      	str	r2, [r3, #20]
  macconf->JumboPacket = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_JE) >> 16) > 0U) ? ENABLE : DISABLE;
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	681b      	ldr	r3, [r3, #0]
 8001bc8:	681b      	ldr	r3, [r3, #0]
 8001bca:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001bce:	2b00      	cmp	r3, #0
 8001bd0:	bf14      	ite	ne
 8001bd2:	2301      	movne	r3, #1
 8001bd4:	2300      	moveq	r3, #0
 8001bd6:	b2db      	uxtb	r3, r3
 8001bd8:	461a      	mov	r2, r3
 8001bda:	683b      	ldr	r3, [r7, #0]
 8001bdc:	749a      	strb	r2, [r3, #18]
  macconf->Jabber = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_JD) >>17) == 0U) ? ENABLE : DISABLE;
 8001bde:	687b      	ldr	r3, [r7, #4]
 8001be0:	681b      	ldr	r3, [r3, #0]
 8001be2:	681b      	ldr	r3, [r3, #0]
 8001be4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001be8:	2b00      	cmp	r3, #0
 8001bea:	bf0c      	ite	eq
 8001bec:	2301      	moveq	r3, #1
 8001bee:	2300      	movne	r3, #0
 8001bf0:	b2db      	uxtb	r3, r3
 8001bf2:	461a      	mov	r2, r3
 8001bf4:	683b      	ldr	r3, [r7, #0]
 8001bf6:	745a      	strb	r2, [r3, #17]
  macconf->Watchdog = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_WD) >>19) == 0U) ? ENABLE : DISABLE;
 8001bf8:	687b      	ldr	r3, [r7, #4]
 8001bfa:	681b      	ldr	r3, [r3, #0]
 8001bfc:	681b      	ldr	r3, [r3, #0]
 8001bfe:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001c02:	2b00      	cmp	r3, #0
 8001c04:	bf0c      	ite	eq
 8001c06:	2301      	moveq	r3, #1
 8001c08:	2300      	movne	r3, #0
 8001c0a:	b2db      	uxtb	r3, r3
 8001c0c:	461a      	mov	r2, r3
 8001c0e:	683b      	ldr	r3, [r7, #0]
 8001c10:	741a      	strb	r2, [r3, #16]
  macconf->AutomaticPadCRCStrip = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_ACS) >> 20) > 0U) ? ENABLE : DISABLE;
 8001c12:	687b      	ldr	r3, [r7, #4]
 8001c14:	681b      	ldr	r3, [r3, #0]
 8001c16:	681b      	ldr	r3, [r3, #0]
 8001c18:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001c1c:	2b00      	cmp	r3, #0
 8001c1e:	bf14      	ite	ne
 8001c20:	2301      	movne	r3, #1
 8001c22:	2300      	moveq	r3, #0
 8001c24:	b2db      	uxtb	r3, r3
 8001c26:	461a      	mov	r2, r3
 8001c28:	683b      	ldr	r3, [r7, #0]
 8001c2a:	73da      	strb	r2, [r3, #15]
  macconf->CRCStripTypePacket = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_CST) >> 21) > 0U) ? ENABLE : DISABLE;
 8001c2c:	687b      	ldr	r3, [r7, #4]
 8001c2e:	681b      	ldr	r3, [r3, #0]
 8001c30:	681b      	ldr	r3, [r3, #0]
 8001c32:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001c36:	2b00      	cmp	r3, #0
 8001c38:	bf14      	ite	ne
 8001c3a:	2301      	movne	r3, #1
 8001c3c:	2300      	moveq	r3, #0
 8001c3e:	b2db      	uxtb	r3, r3
 8001c40:	461a      	mov	r2, r3
 8001c42:	683b      	ldr	r3, [r7, #0]
 8001c44:	739a      	strb	r2, [r3, #14]
  macconf->Support2KPacket = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_S2KP) >> 22) > 0U) ? ENABLE : DISABLE;
 8001c46:	687b      	ldr	r3, [r7, #4]
 8001c48:	681b      	ldr	r3, [r3, #0]
 8001c4a:	681b      	ldr	r3, [r3, #0]
 8001c4c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001c50:	2b00      	cmp	r3, #0
 8001c52:	bf14      	ite	ne
 8001c54:	2301      	movne	r3, #1
 8001c56:	2300      	moveq	r3, #0
 8001c58:	b2db      	uxtb	r3, r3
 8001c5a:	461a      	mov	r2, r3
 8001c5c:	683b      	ldr	r3, [r7, #0]
 8001c5e:	735a      	strb	r2, [r3, #13]
  macconf->GiantPacketSizeLimitControl = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_GPSLCE) >> 23) > 0U) ? ENABLE : DISABLE;
 8001c60:	687b      	ldr	r3, [r7, #4]
 8001c62:	681b      	ldr	r3, [r3, #0]
 8001c64:	681b      	ldr	r3, [r3, #0]
 8001c66:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8001c6a:	2b00      	cmp	r3, #0
 8001c6c:	bf14      	ite	ne
 8001c6e:	2301      	movne	r3, #1
 8001c70:	2300      	moveq	r3, #0
 8001c72:	b2db      	uxtb	r3, r3
 8001c74:	461a      	mov	r2, r3
 8001c76:	683b      	ldr	r3, [r7, #0]
 8001c78:	731a      	strb	r2, [r3, #12]
  macconf->InterPacketGapVal = READ_BIT(heth->Instance->MACCR, ETH_MACCR_IPG);
 8001c7a:	687b      	ldr	r3, [r7, #4]
 8001c7c:	681b      	ldr	r3, [r3, #0]
 8001c7e:	681b      	ldr	r3, [r3, #0]
 8001c80:	f003 62e0 	and.w	r2, r3, #117440512	; 0x7000000
 8001c84:	683b      	ldr	r3, [r7, #0]
 8001c86:	609a      	str	r2, [r3, #8]
  macconf->ChecksumOffload = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_IPC) >> 27) > 0U) ? ENABLE : DISABLE;
 8001c88:	687b      	ldr	r3, [r7, #4]
 8001c8a:	681b      	ldr	r3, [r3, #0]
 8001c8c:	681b      	ldr	r3, [r3, #0]
 8001c8e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8001c92:	2b00      	cmp	r3, #0
 8001c94:	bf14      	ite	ne
 8001c96:	2301      	movne	r3, #1
 8001c98:	2300      	moveq	r3, #0
 8001c9a:	b2db      	uxtb	r3, r3
 8001c9c:	461a      	mov	r2, r3
 8001c9e:	683b      	ldr	r3, [r7, #0]
 8001ca0:	711a      	strb	r2, [r3, #4]
  macconf->SourceAddrControl = READ_BIT(heth->Instance->MACCR, ETH_MACCR_SARC);
 8001ca2:	687b      	ldr	r3, [r7, #4]
 8001ca4:	681b      	ldr	r3, [r3, #0]
 8001ca6:	681b      	ldr	r3, [r3, #0]
 8001ca8:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 8001cac:	683b      	ldr	r3, [r7, #0]
 8001cae:	601a      	str	r2, [r3, #0]

  macconf->GiantPacketSizeLimit = READ_BIT(heth->Instance->MACECR, ETH_MACECR_GPSL);
 8001cb0:	687b      	ldr	r3, [r7, #4]
 8001cb2:	681b      	ldr	r3, [r3, #0]
 8001cb4:	685b      	ldr	r3, [r3, #4]
 8001cb6:	f3c3 020d 	ubfx	r2, r3, #0, #14
 8001cba:	683b      	ldr	r3, [r7, #0]
 8001cbc:	635a      	str	r2, [r3, #52]	; 0x34
  macconf->CRCCheckingRxPackets = ((READ_BIT(heth->Instance->MACECR, ETH_MACECR_DCRCC) >> 16) == 0U) ? ENABLE : DISABLE;
 8001cbe:	687b      	ldr	r3, [r7, #4]
 8001cc0:	681b      	ldr	r3, [r3, #0]
 8001cc2:	685b      	ldr	r3, [r3, #4]
 8001cc4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001cc8:	2b00      	cmp	r3, #0
 8001cca:	bf0c      	ite	eq
 8001ccc:	2301      	moveq	r3, #1
 8001cce:	2300      	movne	r3, #0
 8001cd0:	b2db      	uxtb	r3, r3
 8001cd2:	461a      	mov	r2, r3
 8001cd4:	683b      	ldr	r3, [r7, #0]
 8001cd6:	f883 2032 	strb.w	r2, [r3, #50]	; 0x32
  macconf->SlowProtocolDetect = ((READ_BIT(heth->Instance->MACECR, ETH_MACECR_SPEN) >> 17) > 0U) ? ENABLE : DISABLE;
 8001cda:	687b      	ldr	r3, [r7, #4]
 8001cdc:	681b      	ldr	r3, [r3, #0]
 8001cde:	685b      	ldr	r3, [r3, #4]
 8001ce0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001ce4:	2b00      	cmp	r3, #0
 8001ce6:	bf14      	ite	ne
 8001ce8:	2301      	movne	r3, #1
 8001cea:	2300      	moveq	r3, #0
 8001cec:	b2db      	uxtb	r3, r3
 8001cee:	461a      	mov	r2, r3
 8001cf0:	683b      	ldr	r3, [r7, #0]
 8001cf2:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
  macconf->UnicastSlowProtocolPacketDetect = ((READ_BIT(heth->Instance->MACECR, ETH_MACECR_USP) >> 18) > 0U) ? ENABLE : DISABLE;
 8001cf6:	687b      	ldr	r3, [r7, #4]
 8001cf8:	681b      	ldr	r3, [r3, #0]
 8001cfa:	685b      	ldr	r3, [r3, #4]
 8001cfc:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001d00:	2b00      	cmp	r3, #0
 8001d02:	bf14      	ite	ne
 8001d04:	2301      	movne	r3, #1
 8001d06:	2300      	moveq	r3, #0
 8001d08:	b2db      	uxtb	r3, r3
 8001d0a:	461a      	mov	r2, r3
 8001d0c:	683b      	ldr	r3, [r7, #0]
 8001d0e:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  macconf->ExtendedInterPacketGap = ((READ_BIT(heth->Instance->MACECR, ETH_MACECR_EIPGEN) >> 24) > 0U) ? ENABLE : DISABLE;
 8001d12:	687b      	ldr	r3, [r7, #4]
 8001d14:	681b      	ldr	r3, [r3, #0]
 8001d16:	685b      	ldr	r3, [r3, #4]
 8001d18:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001d1c:	2b00      	cmp	r3, #0
 8001d1e:	bf14      	ite	ne
 8001d20:	2301      	movne	r3, #1
 8001d22:	2300      	moveq	r3, #0
 8001d24:	b2db      	uxtb	r3, r3
 8001d26:	461a      	mov	r2, r3
 8001d28:	683b      	ldr	r3, [r7, #0]
 8001d2a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  macconf->ExtendedInterPacketGapVal = READ_BIT(heth->Instance->MACECR, ETH_MACECR_EIPG) >> 25;
 8001d2e:	687b      	ldr	r3, [r7, #4]
 8001d30:	681b      	ldr	r3, [r3, #0]
 8001d32:	685b      	ldr	r3, [r3, #4]
 8001d34:	0e5b      	lsrs	r3, r3, #25
 8001d36:	f003 021f 	and.w	r2, r3, #31
 8001d3a:	683b      	ldr	r3, [r7, #0]
 8001d3c:	63da      	str	r2, [r3, #60]	; 0x3c


  macconf->ProgrammableWatchdog = ((READ_BIT(heth->Instance->MACWTR, ETH_MACWTR_PWE) >> 8) > 0U) ? ENABLE : DISABLE;
 8001d3e:	687b      	ldr	r3, [r7, #4]
 8001d40:	681b      	ldr	r3, [r3, #0]
 8001d42:	68db      	ldr	r3, [r3, #12]
 8001d44:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001d48:	2b00      	cmp	r3, #0
 8001d4a:	bf14      	ite	ne
 8001d4c:	2301      	movne	r3, #1
 8001d4e:	2300      	moveq	r3, #0
 8001d50:	b2db      	uxtb	r3, r3
 8001d52:	461a      	mov	r2, r3
 8001d54:	683b      	ldr	r3, [r7, #0]
 8001d56:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  macconf->WatchdogTimeout = READ_BIT(heth->Instance->MACWTR, ETH_MACWTR_WTO);
 8001d5a:	687b      	ldr	r3, [r7, #4]
 8001d5c:	681b      	ldr	r3, [r3, #0]
 8001d5e:	68db      	ldr	r3, [r3, #12]
 8001d60:	f003 020f 	and.w	r2, r3, #15
 8001d64:	683b      	ldr	r3, [r7, #0]
 8001d66:	645a      	str	r2, [r3, #68]	; 0x44

  macconf->TransmitFlowControl = ((READ_BIT(heth->Instance->MACTFCR, ETH_MACTFCR_TFE) >> 1) > 0U) ? ENABLE : DISABLE;
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	681b      	ldr	r3, [r3, #0]
 8001d6c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001d6e:	f003 0302 	and.w	r3, r3, #2
 8001d72:	2b00      	cmp	r3, #0
 8001d74:	bf14      	ite	ne
 8001d76:	2301      	movne	r3, #1
 8001d78:	2300      	moveq	r3, #0
 8001d7a:	b2db      	uxtb	r3, r3
 8001d7c:	461a      	mov	r2, r3
 8001d7e:	683b      	ldr	r3, [r7, #0]
 8001d80:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
  macconf->ZeroQuantaPause = ((READ_BIT(heth->Instance->MACTFCR, ETH_MACTFCR_DZPQ) >> 7) == 0U) ? ENABLE : DISABLE;
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	681b      	ldr	r3, [r3, #0]
 8001d88:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001d8a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001d8e:	2b00      	cmp	r3, #0
 8001d90:	bf0c      	ite	eq
 8001d92:	2301      	moveq	r3, #1
 8001d94:	2300      	movne	r3, #0
 8001d96:	b2db      	uxtb	r3, r3
 8001d98:	461a      	mov	r2, r3
 8001d9a:	683b      	ldr	r3, [r7, #0]
 8001d9c:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
  macconf->PauseLowThreshold = READ_BIT(heth->Instance->MACTFCR, ETH_MACTFCR_PLT);
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	681b      	ldr	r3, [r3, #0]
 8001da4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001da6:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8001daa:	683b      	ldr	r3, [r7, #0]
 8001dac:	651a      	str	r2, [r3, #80]	; 0x50
  macconf->PauseTime = (READ_BIT(heth->Instance->MACTFCR, ETH_MACTFCR_PT) >> 16);
 8001dae:	687b      	ldr	r3, [r7, #4]
 8001db0:	681b      	ldr	r3, [r3, #0]
 8001db2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001db4:	0c1b      	lsrs	r3, r3, #16
 8001db6:	b29a      	uxth	r2, r3
 8001db8:	683b      	ldr	r3, [r7, #0]
 8001dba:	649a      	str	r2, [r3, #72]	; 0x48


  macconf->ReceiveFlowControl = (READ_BIT(heth->Instance->MACRFCR, ETH_MACRFCR_RFE) > 0U) ? ENABLE : DISABLE;
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	681b      	ldr	r3, [r3, #0]
 8001dc0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001dc4:	f003 0301 	and.w	r3, r3, #1
 8001dc8:	2b00      	cmp	r3, #0
 8001dca:	bf14      	ite	ne
 8001dcc:	2301      	movne	r3, #1
 8001dce:	2300      	moveq	r3, #0
 8001dd0:	b2db      	uxtb	r3, r3
 8001dd2:	461a      	mov	r2, r3
 8001dd4:	683b      	ldr	r3, [r7, #0]
 8001dd6:	f883 2056 	strb.w	r2, [r3, #86]	; 0x56
  macconf->UnicastPausePacketDetect = ((READ_BIT(heth->Instance->MACRFCR, ETH_MACRFCR_UP) >> 1) > 0U) ? ENABLE : DISABLE;
 8001dda:	687b      	ldr	r3, [r7, #4]
 8001ddc:	681b      	ldr	r3, [r3, #0]
 8001dde:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001de2:	f003 0302 	and.w	r3, r3, #2
 8001de6:	2b00      	cmp	r3, #0
 8001de8:	bf14      	ite	ne
 8001dea:	2301      	movne	r3, #1
 8001dec:	2300      	moveq	r3, #0
 8001dee:	b2db      	uxtb	r3, r3
 8001df0:	461a      	mov	r2, r3
 8001df2:	683b      	ldr	r3, [r7, #0]
 8001df4:	f883 2055 	strb.w	r2, [r3, #85]	; 0x55

  macconf->TransmitQueueMode = READ_BIT(heth->Instance->MTLTQOMR, (ETH_MTLTQOMR_TTC | ETH_MTLTQOMR_TSF));
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	681b      	ldr	r3, [r3, #0]
 8001dfc:	f8d3 3d00 	ldr.w	r3, [r3, #3328]	; 0xd00
 8001e00:	f003 0272 	and.w	r2, r3, #114	; 0x72
 8001e04:	683b      	ldr	r3, [r7, #0]
 8001e06:	659a      	str	r2, [r3, #88]	; 0x58

  macconf->ReceiveQueueMode = READ_BIT(heth->Instance->MTLRQOMR, (ETH_MTLRQOMR_RTC | ETH_MTLRQOMR_RSF));
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	681b      	ldr	r3, [r3, #0]
 8001e0c:	f8d3 3d30 	ldr.w	r3, [r3, #3376]	; 0xd30
 8001e10:	f003 0223 	and.w	r2, r3, #35	; 0x23
 8001e14:	683b      	ldr	r3, [r7, #0]
 8001e16:	65da      	str	r2, [r3, #92]	; 0x5c
  macconf->ForwardRxUndersizedGoodPacket = ((READ_BIT(heth->Instance->MTLRQOMR, ETH_MTLRQOMR_FUP) >> 3) > 0U) ? ENABLE : DISABLE;
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	681b      	ldr	r3, [r3, #0]
 8001e1c:	f8d3 3d30 	ldr.w	r3, [r3, #3376]	; 0xd30
 8001e20:	f003 0308 	and.w	r3, r3, #8
 8001e24:	2b00      	cmp	r3, #0
 8001e26:	bf14      	ite	ne
 8001e28:	2301      	movne	r3, #1
 8001e2a:	2300      	moveq	r3, #0
 8001e2c:	b2db      	uxtb	r3, r3
 8001e2e:	461a      	mov	r2, r3
 8001e30:	683b      	ldr	r3, [r7, #0]
 8001e32:	f883 2062 	strb.w	r2, [r3, #98]	; 0x62
  macconf->ForwardRxErrorPacket = ((READ_BIT(heth->Instance->MTLRQOMR, ETH_MTLRQOMR_FEP) >> 4) > 0U) ? ENABLE : DISABLE;
 8001e36:	687b      	ldr	r3, [r7, #4]
 8001e38:	681b      	ldr	r3, [r3, #0]
 8001e3a:	f8d3 3d30 	ldr.w	r3, [r3, #3376]	; 0xd30
 8001e3e:	f003 0310 	and.w	r3, r3, #16
 8001e42:	2b00      	cmp	r3, #0
 8001e44:	bf14      	ite	ne
 8001e46:	2301      	movne	r3, #1
 8001e48:	2300      	moveq	r3, #0
 8001e4a:	b2db      	uxtb	r3, r3
 8001e4c:	461a      	mov	r2, r3
 8001e4e:	683b      	ldr	r3, [r7, #0]
 8001e50:	f883 2061 	strb.w	r2, [r3, #97]	; 0x61
  macconf->DropTCPIPChecksumErrorPacket = ((READ_BIT(heth->Instance->MTLRQOMR, ETH_MTLRQOMR_DISTCPEF) >> 6) == 0U) ? ENABLE : DISABLE;
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	681b      	ldr	r3, [r3, #0]
 8001e58:	f8d3 3d30 	ldr.w	r3, [r3, #3376]	; 0xd30
 8001e5c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001e60:	2b00      	cmp	r3, #0
 8001e62:	bf0c      	ite	eq
 8001e64:	2301      	moveq	r3, #1
 8001e66:	2300      	movne	r3, #0
 8001e68:	b2db      	uxtb	r3, r3
 8001e6a:	461a      	mov	r2, r3
 8001e6c:	683b      	ldr	r3, [r7, #0]
 8001e6e:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60

  return HAL_OK;
 8001e72:	2300      	movs	r3, #0
}
 8001e74:	4618      	mov	r0, r3
 8001e76:	370c      	adds	r7, #12
 8001e78:	46bd      	mov	sp, r7
 8001e7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e7e:	4770      	bx	lr

08001e80 <HAL_ETH_SetMACConfig>:
  * @param  macconf: pointer to a ETH_MACConfigTypeDef structure that contains
  *         the configuration of the MAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_SetMACConfig(ETH_HandleTypeDef *heth,  ETH_MACConfigTypeDef *macconf)
{
 8001e80:	b580      	push	{r7, lr}
 8001e82:	b082      	sub	sp, #8
 8001e84:	af00      	add	r7, sp, #0
 8001e86:	6078      	str	r0, [r7, #4]
 8001e88:	6039      	str	r1, [r7, #0]
  if(macconf == NULL)
 8001e8a:	683b      	ldr	r3, [r7, #0]
 8001e8c:	2b00      	cmp	r3, #0
 8001e8e:	d101      	bne.n	8001e94 <HAL_ETH_SetMACConfig+0x14>
  {
    return HAL_ERROR;
 8001e90:	2301      	movs	r3, #1
 8001e92:	e00a      	b.n	8001eaa <HAL_ETH_SetMACConfig+0x2a>
  }

  if(heth->RxState == HAL_ETH_STATE_READY)
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001e98:	2b10      	cmp	r3, #16
 8001e9a:	d105      	bne.n	8001ea8 <HAL_ETH_SetMACConfig+0x28>
  {
    ETH_SetMACConfig(heth, macconf);
 8001e9c:	6839      	ldr	r1, [r7, #0]
 8001e9e:	6878      	ldr	r0, [r7, #4]
 8001ea0:	f000 f860 	bl	8001f64 <ETH_SetMACConfig>

    return HAL_OK;
 8001ea4:	2300      	movs	r3, #0
 8001ea6:	e000      	b.n	8001eaa <HAL_ETH_SetMACConfig+0x2a>
  }
  else
  {
    return HAL_ERROR;
 8001ea8:	2301      	movs	r3, #1
  }
}
 8001eaa:	4618      	mov	r0, r3
 8001eac:	3708      	adds	r7, #8
 8001eae:	46bd      	mov	sp, r7
 8001eb0:	bd80      	pop	{r7, pc}
	...

08001eb4 <HAL_ETH_SetMDIOClockRange>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
void HAL_ETH_SetMDIOClockRange(ETH_HandleTypeDef *heth)
{
 8001eb4:	b580      	push	{r7, lr}
 8001eb6:	b084      	sub	sp, #16
 8001eb8:	af00      	add	r7, sp, #0
 8001eba:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg, hclk;

  /* Get the ETHERNET MACMDIOAR value */
  tmpreg = (heth->Instance)->MACMDIOAR;
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	681b      	ldr	r3, [r3, #0]
 8001ec0:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8001ec4:	60fb      	str	r3, [r7, #12]

	/* Clear CSR Clock Range bits */
  tmpreg &= ~ETH_MACMDIOAR_CR;
 8001ec6:	68fb      	ldr	r3, [r7, #12]
 8001ec8:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8001ecc:	60fb      	str	r3, [r7, #12]

	/* Get hclk frequency value */
  hclk = HAL_RCC_GetHCLKFreq();
 8001ece:	f001 fea9 	bl	8003c24 <HAL_RCC_GetHCLKFreq>
 8001ed2:	60b8      	str	r0, [r7, #8]

	/* Set CR bits depending on hclk value */
  if((hclk >= 20000000U)&&(hclk < 35000000U))
 8001ed4:	68bb      	ldr	r3, [r7, #8]
 8001ed6:	4a1e      	ldr	r2, [pc, #120]	; (8001f50 <HAL_ETH_SetMDIOClockRange+0x9c>)
 8001ed8:	4293      	cmp	r3, r2
 8001eda:	d908      	bls.n	8001eee <HAL_ETH_SetMDIOClockRange+0x3a>
 8001edc:	68bb      	ldr	r3, [r7, #8]
 8001ede:	4a1d      	ldr	r2, [pc, #116]	; (8001f54 <HAL_ETH_SetMDIOClockRange+0xa0>)
 8001ee0:	4293      	cmp	r3, r2
 8001ee2:	d804      	bhi.n	8001eee <HAL_ETH_SetMDIOClockRange+0x3a>
  {
    /* CSR Clock Range between 20-35 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV16;
 8001ee4:	68fb      	ldr	r3, [r7, #12]
 8001ee6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001eea:	60fb      	str	r3, [r7, #12]
 8001eec:	e027      	b.n	8001f3e <HAL_ETH_SetMDIOClockRange+0x8a>
  }
  else if((hclk >= 35000000U)&&(hclk < 60000000U))
 8001eee:	68bb      	ldr	r3, [r7, #8]
 8001ef0:	4a18      	ldr	r2, [pc, #96]	; (8001f54 <HAL_ETH_SetMDIOClockRange+0xa0>)
 8001ef2:	4293      	cmp	r3, r2
 8001ef4:	d908      	bls.n	8001f08 <HAL_ETH_SetMDIOClockRange+0x54>
 8001ef6:	68bb      	ldr	r3, [r7, #8]
 8001ef8:	4a17      	ldr	r2, [pc, #92]	; (8001f58 <HAL_ETH_SetMDIOClockRange+0xa4>)
 8001efa:	4293      	cmp	r3, r2
 8001efc:	d804      	bhi.n	8001f08 <HAL_ETH_SetMDIOClockRange+0x54>
  {
    /* CSR Clock Range between 35-60 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV26;
 8001efe:	68fb      	ldr	r3, [r7, #12]
 8001f00:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 8001f04:	60fb      	str	r3, [r7, #12]
 8001f06:	e01a      	b.n	8001f3e <HAL_ETH_SetMDIOClockRange+0x8a>
  }
  else if((hclk >= 60000000U)&&(hclk < 100000000U))
 8001f08:	68bb      	ldr	r3, [r7, #8]
 8001f0a:	4a13      	ldr	r2, [pc, #76]	; (8001f58 <HAL_ETH_SetMDIOClockRange+0xa4>)
 8001f0c:	4293      	cmp	r3, r2
 8001f0e:	d903      	bls.n	8001f18 <HAL_ETH_SetMDIOClockRange+0x64>
 8001f10:	68bb      	ldr	r3, [r7, #8]
 8001f12:	4a12      	ldr	r2, [pc, #72]	; (8001f5c <HAL_ETH_SetMDIOClockRange+0xa8>)
 8001f14:	4293      	cmp	r3, r2
 8001f16:	d911      	bls.n	8001f3c <HAL_ETH_SetMDIOClockRange+0x88>
  {
    /* CSR Clock Range between 60-100 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV42;
  }
  else if((hclk >= 100000000U)&&(hclk < 150000000U))
 8001f18:	68bb      	ldr	r3, [r7, #8]
 8001f1a:	4a10      	ldr	r2, [pc, #64]	; (8001f5c <HAL_ETH_SetMDIOClockRange+0xa8>)
 8001f1c:	4293      	cmp	r3, r2
 8001f1e:	d908      	bls.n	8001f32 <HAL_ETH_SetMDIOClockRange+0x7e>
 8001f20:	68bb      	ldr	r3, [r7, #8]
 8001f22:	4a0f      	ldr	r2, [pc, #60]	; (8001f60 <HAL_ETH_SetMDIOClockRange+0xac>)
 8001f24:	4293      	cmp	r3, r2
 8001f26:	d804      	bhi.n	8001f32 <HAL_ETH_SetMDIOClockRange+0x7e>
  {
    /* CSR Clock Range between 100-150 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV62;
 8001f28:	68fb      	ldr	r3, [r7, #12]
 8001f2a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001f2e:	60fb      	str	r3, [r7, #12]
 8001f30:	e005      	b.n	8001f3e <HAL_ETH_SetMDIOClockRange+0x8a>
  }
  else /* (hclk >= 150000000)&&(hclk <= 200000000) */
  {
    /* CSR Clock Range between 150-200 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV102;
 8001f32:	68fb      	ldr	r3, [r7, #12]
 8001f34:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001f38:	60fb      	str	r3, [r7, #12]
 8001f3a:	e000      	b.n	8001f3e <HAL_ETH_SetMDIOClockRange+0x8a>
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV42;
 8001f3c:	bf00      	nop
  }

  /* Configure the CSR Clock Range */
  (heth->Instance)->MACMDIOAR = (uint32_t)tmpreg;
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	681b      	ldr	r3, [r3, #0]
 8001f42:	68fa      	ldr	r2, [r7, #12]
 8001f44:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
}
 8001f48:	bf00      	nop
 8001f4a:	3710      	adds	r7, #16
 8001f4c:	46bd      	mov	sp, r7
 8001f4e:	bd80      	pop	{r7, pc}
 8001f50:	01312cff 	.word	0x01312cff
 8001f54:	02160ebf 	.word	0x02160ebf
 8001f58:	039386ff 	.word	0x039386ff
 8001f5c:	05f5e0ff 	.word	0x05f5e0ff
 8001f60:	08f0d17f 	.word	0x08f0d17f

08001f64 <ETH_SetMACConfig>:
/**
  * @}
  */

static void ETH_SetMACConfig(ETH_HandleTypeDef *heth,  ETH_MACConfigTypeDef *macconf)
{
 8001f64:	b480      	push	{r7}
 8001f66:	b085      	sub	sp, #20
 8001f68:	af00      	add	r7, sp, #0
 8001f6a:	6078      	str	r0, [r7, #4]
 8001f6c:	6039      	str	r1, [r7, #0]
  uint32_t macregval;

  /*------------------------ MACCR Configuration --------------------*/
  macregval =(macconf->InterPacketGapVal |
 8001f6e:	683b      	ldr	r3, [r7, #0]
 8001f70:	689a      	ldr	r2, [r3, #8]
              macconf->SourceAddrControl |
 8001f72:	683b      	ldr	r3, [r7, #0]
 8001f74:	681b      	ldr	r3, [r3, #0]
  macregval =(macconf->InterPacketGapVal |
 8001f76:	431a      	orrs	r2, r3
                ((uint32_t)macconf->ChecksumOffload<< 27) |
 8001f78:	683b      	ldr	r3, [r7, #0]
 8001f7a:	791b      	ldrb	r3, [r3, #4]
 8001f7c:	06db      	lsls	r3, r3, #27
              macconf->SourceAddrControl |
 8001f7e:	431a      	orrs	r2, r3
                  ((uint32_t)macconf->GiantPacketSizeLimitControl << 23) |
 8001f80:	683b      	ldr	r3, [r7, #0]
 8001f82:	7b1b      	ldrb	r3, [r3, #12]
 8001f84:	05db      	lsls	r3, r3, #23
                ((uint32_t)macconf->ChecksumOffload<< 27) |
 8001f86:	431a      	orrs	r2, r3
                    ((uint32_t)macconf->Support2KPacket  << 22) |
 8001f88:	683b      	ldr	r3, [r7, #0]
 8001f8a:	7b5b      	ldrb	r3, [r3, #13]
 8001f8c:	059b      	lsls	r3, r3, #22
                  ((uint32_t)macconf->GiantPacketSizeLimitControl << 23) |
 8001f8e:	431a      	orrs	r2, r3
                      ((uint32_t)macconf->CRCStripTypePacket << 21) |
 8001f90:	683b      	ldr	r3, [r7, #0]
 8001f92:	7b9b      	ldrb	r3, [r3, #14]
 8001f94:	055b      	lsls	r3, r3, #21
                    ((uint32_t)macconf->Support2KPacket  << 22) |
 8001f96:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 20) |
 8001f98:	683b      	ldr	r3, [r7, #0]
 8001f9a:	7bdb      	ldrb	r3, [r3, #15]
 8001f9c:	051b      	lsls	r3, r3, #20
                      ((uint32_t)macconf->CRCStripTypePacket << 21) |
 8001f9e:	4313      	orrs	r3, r2
                          ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 19) |
 8001fa0:	683a      	ldr	r2, [r7, #0]
 8001fa2:	7c12      	ldrb	r2, [r2, #16]
 8001fa4:	2a00      	cmp	r2, #0
 8001fa6:	d102      	bne.n	8001fae <ETH_SetMACConfig+0x4a>
 8001fa8:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8001fac:	e000      	b.n	8001fb0 <ETH_SetMACConfig+0x4c>
 8001fae:	2200      	movs	r2, #0
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 20) |
 8001fb0:	4313      	orrs	r3, r2
                            ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 17) |
 8001fb2:	683a      	ldr	r2, [r7, #0]
 8001fb4:	7c52      	ldrb	r2, [r2, #17]
 8001fb6:	2a00      	cmp	r2, #0
 8001fb8:	d102      	bne.n	8001fc0 <ETH_SetMACConfig+0x5c>
 8001fba:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8001fbe:	e000      	b.n	8001fc2 <ETH_SetMACConfig+0x5e>
 8001fc0:	2200      	movs	r2, #0
                          ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 19) |
 8001fc2:	431a      	orrs	r2, r3
                              ((uint32_t)macconf->JumboPacket << 16) |
 8001fc4:	683b      	ldr	r3, [r7, #0]
 8001fc6:	7c9b      	ldrb	r3, [r3, #18]
 8001fc8:	041b      	lsls	r3, r3, #16
                            ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 17) |
 8001fca:	431a      	orrs	r2, r3
                                macconf->Speed |
 8001fcc:	683b      	ldr	r3, [r7, #0]
 8001fce:	695b      	ldr	r3, [r3, #20]
                              ((uint32_t)macconf->JumboPacket << 16) |
 8001fd0:	431a      	orrs	r2, r3
                                  macconf->DuplexMode |
 8001fd2:	683b      	ldr	r3, [r7, #0]
 8001fd4:	699b      	ldr	r3, [r3, #24]
                                macconf->Speed |
 8001fd6:	431a      	orrs	r2, r3
                                    ((uint32_t)macconf->LoopbackMode << 12) |
 8001fd8:	683b      	ldr	r3, [r7, #0]
 8001fda:	7f1b      	ldrb	r3, [r3, #28]
 8001fdc:	031b      	lsls	r3, r3, #12
                                  macconf->DuplexMode |
 8001fde:	431a      	orrs	r2, r3
                                      ((uint32_t)macconf->CarrierSenseBeforeTransmit << 11)|
 8001fe0:	683b      	ldr	r3, [r7, #0]
 8001fe2:	7f5b      	ldrb	r3, [r3, #29]
 8001fe4:	02db      	lsls	r3, r3, #11
                                    ((uint32_t)macconf->LoopbackMode << 12) |
 8001fe6:	4313      	orrs	r3, r2
                                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 10)|
 8001fe8:	683a      	ldr	r2, [r7, #0]
 8001fea:	7f92      	ldrb	r2, [r2, #30]
 8001fec:	2a00      	cmp	r2, #0
 8001fee:	d102      	bne.n	8001ff6 <ETH_SetMACConfig+0x92>
 8001ff0:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001ff4:	e000      	b.n	8001ff8 <ETH_SetMACConfig+0x94>
 8001ff6:	2200      	movs	r2, #0
                                      ((uint32_t)macconf->CarrierSenseBeforeTransmit << 11)|
 8001ff8:	431a      	orrs	r2, r3
                                          ((uint32_t)macconf->CarrierSenseDuringTransmit << 9)|
 8001ffa:	683b      	ldr	r3, [r7, #0]
 8001ffc:	7fdb      	ldrb	r3, [r3, #31]
 8001ffe:	025b      	lsls	r3, r3, #9
                                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 10)|
 8002000:	4313      	orrs	r3, r2
                                            ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 8)|
 8002002:	683a      	ldr	r2, [r7, #0]
 8002004:	f892 2020 	ldrb.w	r2, [r2, #32]
 8002008:	2a00      	cmp	r2, #0
 800200a:	d102      	bne.n	8002012 <ETH_SetMACConfig+0xae>
 800200c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002010:	e000      	b.n	8002014 <ETH_SetMACConfig+0xb0>
 8002012:	2200      	movs	r2, #0
                                          ((uint32_t)macconf->CarrierSenseDuringTransmit << 9)|
 8002014:	431a      	orrs	r2, r3
                                              macconf->BackOffLimit |
 8002016:	683b      	ldr	r3, [r7, #0]
 8002018:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                                            ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 8)|
 800201a:	431a      	orrs	r2, r3
                                                ((uint32_t)macconf->DeferralCheck << 4)|
 800201c:	683b      	ldr	r3, [r7, #0]
 800201e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8002022:	011b      	lsls	r3, r3, #4
                                              macconf->BackOffLimit |
 8002024:	431a      	orrs	r2, r3
                                                  macconf->PreambleLength);
 8002026:	683b      	ldr	r3, [r7, #0]
 8002028:	6adb      	ldr	r3, [r3, #44]	; 0x2c
  macregval =(macconf->InterPacketGapVal |
 800202a:	4313      	orrs	r3, r2
 800202c:	60fb      	str	r3, [r7, #12]

  /* Write to MACCR */
  MODIFY_REG(heth->Instance->MACCR, ETH_MACCR_MASK, macregval);
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	681b      	ldr	r3, [r3, #0]
 8002032:	681a      	ldr	r2, [r3, #0]
 8002034:	4b56      	ldr	r3, [pc, #344]	; (8002190 <ETH_SetMACConfig+0x22c>)
 8002036:	4013      	ands	r3, r2
 8002038:	687a      	ldr	r2, [r7, #4]
 800203a:	6812      	ldr	r2, [r2, #0]
 800203c:	68f9      	ldr	r1, [r7, #12]
 800203e:	430b      	orrs	r3, r1
 8002040:	6013      	str	r3, [r2, #0]

  /*------------------------ MACECR Configuration --------------------*/
  macregval = ((macconf->ExtendedInterPacketGapVal << 25)|
 8002042:	683b      	ldr	r3, [r7, #0]
 8002044:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002046:	065a      	lsls	r2, r3, #25
               ((uint32_t)macconf->ExtendedInterPacketGap << 24)|
 8002048:	683b      	ldr	r3, [r7, #0]
 800204a:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800204e:	061b      	lsls	r3, r3, #24
  macregval = ((macconf->ExtendedInterPacketGapVal << 25)|
 8002050:	431a      	orrs	r2, r3
                 ((uint32_t)macconf->UnicastSlowProtocolPacketDetect << 18)|
 8002052:	683b      	ldr	r3, [r7, #0]
 8002054:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8002058:	049b      	lsls	r3, r3, #18
               ((uint32_t)macconf->ExtendedInterPacketGap << 24)|
 800205a:	431a      	orrs	r2, r3
                   ((uint32_t)macconf->SlowProtocolDetect << 17)|
 800205c:	683b      	ldr	r3, [r7, #0]
 800205e:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8002062:	045b      	lsls	r3, r3, #17
                 ((uint32_t)macconf->UnicastSlowProtocolPacketDetect << 18)|
 8002064:	4313      	orrs	r3, r2
                     ((uint32_t)((macconf->CRCCheckingRxPackets == DISABLE) ? 1U : 0U)<< 16) |
 8002066:	683a      	ldr	r2, [r7, #0]
 8002068:	f892 2032 	ldrb.w	r2, [r2, #50]	; 0x32
 800206c:	2a00      	cmp	r2, #0
 800206e:	d102      	bne.n	8002076 <ETH_SetMACConfig+0x112>
 8002070:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8002074:	e000      	b.n	8002078 <ETH_SetMACConfig+0x114>
 8002076:	2200      	movs	r2, #0
                   ((uint32_t)macconf->SlowProtocolDetect << 17)|
 8002078:	431a      	orrs	r2, r3
                       macconf->GiantPacketSizeLimit);
 800207a:	683b      	ldr	r3, [r7, #0]
 800207c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
  macregval = ((macconf->ExtendedInterPacketGapVal << 25)|
 800207e:	4313      	orrs	r3, r2
 8002080:	60fb      	str	r3, [r7, #12]

  /* Write to MACECR */
  MODIFY_REG(heth->Instance->MACECR, ETH_MACECR_MASK, macregval);
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	681b      	ldr	r3, [r3, #0]
 8002086:	685a      	ldr	r2, [r3, #4]
 8002088:	4b42      	ldr	r3, [pc, #264]	; (8002194 <ETH_SetMACConfig+0x230>)
 800208a:	4013      	ands	r3, r2
 800208c:	687a      	ldr	r2, [r7, #4]
 800208e:	6812      	ldr	r2, [r2, #0]
 8002090:	68f9      	ldr	r1, [r7, #12]
 8002092:	430b      	orrs	r3, r1
 8002094:	6053      	str	r3, [r2, #4]

  /*------------------------ MACWTR Configuration --------------------*/
  macregval = (((uint32_t)macconf->ProgrammableWatchdog << 8) |
 8002096:	683b      	ldr	r3, [r7, #0]
 8002098:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800209c:	021a      	lsls	r2, r3, #8
               macconf->WatchdogTimeout);
 800209e:	683b      	ldr	r3, [r7, #0]
 80020a0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
  macregval = (((uint32_t)macconf->ProgrammableWatchdog << 8) |
 80020a2:	4313      	orrs	r3, r2
 80020a4:	60fb      	str	r3, [r7, #12]

  /* Write to MACWTR */
  MODIFY_REG(heth->Instance->MACWTR, ETH_MACWTR_MASK, macregval);
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	681b      	ldr	r3, [r3, #0]
 80020aa:	68da      	ldr	r2, [r3, #12]
 80020ac:	4b3a      	ldr	r3, [pc, #232]	; (8002198 <ETH_SetMACConfig+0x234>)
 80020ae:	4013      	ands	r3, r2
 80020b0:	687a      	ldr	r2, [r7, #4]
 80020b2:	6812      	ldr	r2, [r2, #0]
 80020b4:	68f9      	ldr	r1, [r7, #12]
 80020b6:	430b      	orrs	r3, r1
 80020b8:	60d3      	str	r3, [r2, #12]

  /*------------------------ MACTFCR Configuration --------------------*/
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 80020ba:	683b      	ldr	r3, [r7, #0]
 80020bc:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 80020c0:	005a      	lsls	r2, r3, #1
               macconf->PauseLowThreshold |
 80020c2:	683b      	ldr	r3, [r7, #0]
 80020c4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 80020c6:	4313      	orrs	r3, r2
                 ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U)<< 7) |
 80020c8:	683a      	ldr	r2, [r7, #0]
 80020ca:	f892 204c 	ldrb.w	r2, [r2, #76]	; 0x4c
 80020ce:	2a00      	cmp	r2, #0
 80020d0:	d101      	bne.n	80020d6 <ETH_SetMACConfig+0x172>
 80020d2:	2280      	movs	r2, #128	; 0x80
 80020d4:	e000      	b.n	80020d8 <ETH_SetMACConfig+0x174>
 80020d6:	2200      	movs	r2, #0
               macconf->PauseLowThreshold |
 80020d8:	431a      	orrs	r2, r3
                   (macconf->PauseTime << 16));
 80020da:	683b      	ldr	r3, [r7, #0]
 80020dc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80020de:	041b      	lsls	r3, r3, #16
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 80020e0:	4313      	orrs	r3, r2
 80020e2:	60fb      	str	r3, [r7, #12]

  /* Write to MACTFCR */
  MODIFY_REG(heth->Instance->MACTFCR, ETH_MACTFCR_MASK, macregval);
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	681b      	ldr	r3, [r3, #0]
 80020e8:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80020ea:	f64f 730d 	movw	r3, #65293	; 0xff0d
 80020ee:	4013      	ands	r3, r2
 80020f0:	687a      	ldr	r2, [r7, #4]
 80020f2:	6812      	ldr	r2, [r2, #0]
 80020f4:	68f9      	ldr	r1, [r7, #12]
 80020f6:	430b      	orrs	r3, r1
 80020f8:	6713      	str	r3, [r2, #112]	; 0x70

  /*------------------------ MACRFCR Configuration --------------------*/
  macregval = ((uint32_t)macconf->ReceiveFlowControl |
 80020fa:	683b      	ldr	r3, [r7, #0]
 80020fc:	f893 3056 	ldrb.w	r3, [r3, #86]	; 0x56
 8002100:	461a      	mov	r2, r3
               ((uint32_t)macconf->UnicastPausePacketDetect << 1));
 8002102:	683b      	ldr	r3, [r7, #0]
 8002104:	f893 3055 	ldrb.w	r3, [r3, #85]	; 0x55
 8002108:	005b      	lsls	r3, r3, #1
  macregval = ((uint32_t)macconf->ReceiveFlowControl |
 800210a:	4313      	orrs	r3, r2
 800210c:	60fb      	str	r3, [r7, #12]

  /* Write to MACRFCR */
  MODIFY_REG(heth->Instance->MACRFCR, ETH_MACRFCR_MASK, macregval);
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	681b      	ldr	r3, [r3, #0]
 8002112:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002116:	f023 0103 	bic.w	r1, r3, #3
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	681b      	ldr	r3, [r3, #0]
 800211e:	68fa      	ldr	r2, [r7, #12]
 8002120:	430a      	orrs	r2, r1
 8002122:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /*------------------------ MTLTQOMR Configuration --------------------*/
  /* Write to MTLTQOMR */
  MODIFY_REG(heth->Instance->MTLTQOMR, ETH_MTLTQOMR_MASK, macconf->TransmitQueueMode);
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	681b      	ldr	r3, [r3, #0]
 800212a:	f8d3 3d00 	ldr.w	r3, [r3, #3328]	; 0xd00
 800212e:	f023 0172 	bic.w	r1, r3, #114	; 0x72
 8002132:	683b      	ldr	r3, [r7, #0]
 8002134:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	681b      	ldr	r3, [r3, #0]
 800213a:	430a      	orrs	r2, r1
 800213c:	f8c3 2d00 	str.w	r2, [r3, #3328]	; 0xd00

  /*------------------------ MTLRQOMR Configuration --------------------*/
  macregval = (macconf->ReceiveQueueMode |
 8002140:	683b      	ldr	r3, [r7, #0]
 8002142:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
               ((uint32_t)((macconf->DropTCPIPChecksumErrorPacket == DISABLE) ? 1U : 0U) << 6) |
 8002144:	683a      	ldr	r2, [r7, #0]
 8002146:	f892 2060 	ldrb.w	r2, [r2, #96]	; 0x60
 800214a:	2a00      	cmp	r2, #0
 800214c:	d101      	bne.n	8002152 <ETH_SetMACConfig+0x1ee>
 800214e:	2240      	movs	r2, #64	; 0x40
 8002150:	e000      	b.n	8002154 <ETH_SetMACConfig+0x1f0>
 8002152:	2200      	movs	r2, #0
  macregval = (macconf->ReceiveQueueMode |
 8002154:	431a      	orrs	r2, r3
                 ((uint32_t)macconf->ForwardRxErrorPacket << 4) |
 8002156:	683b      	ldr	r3, [r7, #0]
 8002158:	f893 3061 	ldrb.w	r3, [r3, #97]	; 0x61
 800215c:	011b      	lsls	r3, r3, #4
               ((uint32_t)((macconf->DropTCPIPChecksumErrorPacket == DISABLE) ? 1U : 0U) << 6) |
 800215e:	431a      	orrs	r2, r3
                   ((uint32_t)macconf->ForwardRxUndersizedGoodPacket << 3));
 8002160:	683b      	ldr	r3, [r7, #0]
 8002162:	f893 3062 	ldrb.w	r3, [r3, #98]	; 0x62
 8002166:	00db      	lsls	r3, r3, #3
  macregval = (macconf->ReceiveQueueMode |
 8002168:	4313      	orrs	r3, r2
 800216a:	60fb      	str	r3, [r7, #12]

  /* Write to MTLRQOMR */
  MODIFY_REG(heth->Instance->MTLRQOMR, ETH_MTLRQOMR_MASK, macregval);
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	681b      	ldr	r3, [r3, #0]
 8002170:	f8d3 3d30 	ldr.w	r3, [r3, #3376]	; 0xd30
 8002174:	f023 017b 	bic.w	r1, r3, #123	; 0x7b
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	681b      	ldr	r3, [r3, #0]
 800217c:	68fa      	ldr	r2, [r7, #12]
 800217e:	430a      	orrs	r2, r1
 8002180:	f8c3 2d30 	str.w	r2, [r3, #3376]	; 0xd30
}
 8002184:	bf00      	nop
 8002186:	3714      	adds	r7, #20
 8002188:	46bd      	mov	sp, r7
 800218a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800218e:	4770      	bx	lr
 8002190:	00048083 	.word	0x00048083
 8002194:	c0f88000 	.word	0xc0f88000
 8002198:	fffffef0 	.word	0xfffffef0

0800219c <ETH_SetDMAConfig>:

static void ETH_SetDMAConfig(ETH_HandleTypeDef *heth,  ETH_DMAConfigTypeDef *dmaconf)
{
 800219c:	b480      	push	{r7}
 800219e:	b085      	sub	sp, #20
 80021a0:	af00      	add	r7, sp, #0
 80021a2:	6078      	str	r0, [r7, #4]
 80021a4:	6039      	str	r1, [r7, #0]
  uint32_t dmaregval;

  /*------------------------ DMAMR Configuration --------------------*/
  MODIFY_REG(heth->Instance->DMAMR, ETH_DMAMR_MASK, dmaconf->DMAArbitration);
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	681b      	ldr	r3, [r3, #0]
 80021aa:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80021ae:	681a      	ldr	r2, [r3, #0]
 80021b0:	4b38      	ldr	r3, [pc, #224]	; (8002294 <ETH_SetDMAConfig+0xf8>)
 80021b2:	4013      	ands	r3, r2
 80021b4:	683a      	ldr	r2, [r7, #0]
 80021b6:	6812      	ldr	r2, [r2, #0]
 80021b8:	6879      	ldr	r1, [r7, #4]
 80021ba:	6809      	ldr	r1, [r1, #0]
 80021bc:	431a      	orrs	r2, r3
 80021be:	f501 5380 	add.w	r3, r1, #4096	; 0x1000
 80021c2:	601a      	str	r2, [r3, #0]

  /*------------------------ DMASBMR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 80021c4:	683b      	ldr	r3, [r7, #0]
 80021c6:	791b      	ldrb	r3, [r3, #4]
 80021c8:	031a      	lsls	r2, r3, #12
               dmaconf->BurstMode |
 80021ca:	683b      	ldr	r3, [r7, #0]
 80021cc:	689b      	ldr	r3, [r3, #8]
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 80021ce:	431a      	orrs	r2, r3
                 ((uint32_t)dmaconf->RebuildINCRxBurst << 15));
 80021d0:	683b      	ldr	r3, [r7, #0]
 80021d2:	7b1b      	ldrb	r3, [r3, #12]
 80021d4:	03db      	lsls	r3, r3, #15
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 80021d6:	4313      	orrs	r3, r2
 80021d8:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(heth->Instance->DMASBMR, ETH_DMASBMR_MASK, dmaregval);
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	681a      	ldr	r2, [r3, #0]
 80021de:	f241 0304 	movw	r3, #4100	; 0x1004
 80021e2:	4413      	add	r3, r2
 80021e4:	681a      	ldr	r2, [r3, #0]
 80021e6:	4b2c      	ldr	r3, [pc, #176]	; (8002298 <ETH_SetDMAConfig+0xfc>)
 80021e8:	4013      	ands	r3, r2
 80021ea:	687a      	ldr	r2, [r7, #4]
 80021ec:	6811      	ldr	r1, [r2, #0]
 80021ee:	68fa      	ldr	r2, [r7, #12]
 80021f0:	431a      	orrs	r2, r3
 80021f2:	f241 0304 	movw	r3, #4100	; 0x1004
 80021f6:	440b      	add	r3, r1
 80021f8:	601a      	str	r2, [r3, #0]

  /*------------------------ DMACCR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->PBLx8Mode << 16) |
 80021fa:	683b      	ldr	r3, [r7, #0]
 80021fc:	7b5b      	ldrb	r3, [r3, #13]
 80021fe:	041a      	lsls	r2, r3, #16
               dmaconf->MaximumSegmentSize);
 8002200:	683b      	ldr	r3, [r7, #0]
 8002202:	6a1b      	ldr	r3, [r3, #32]
  dmaregval = (((uint32_t)dmaconf->PBLx8Mode << 16) |
 8002204:	4313      	orrs	r3, r2
 8002206:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(heth->Instance->DMACCR, ETH_DMACCR_MASK, dmaregval);
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	681b      	ldr	r3, [r3, #0]
 800220c:	f503 5388 	add.w	r3, r3, #4352	; 0x1100
 8002210:	681a      	ldr	r2, [r3, #0]
 8002212:	4b22      	ldr	r3, [pc, #136]	; (800229c <ETH_SetDMAConfig+0x100>)
 8002214:	4013      	ands	r3, r2
 8002216:	687a      	ldr	r2, [r7, #4]
 8002218:	6811      	ldr	r1, [r2, #0]
 800221a:	68fa      	ldr	r2, [r7, #12]
 800221c:	431a      	orrs	r2, r3
 800221e:	f501 5388 	add.w	r3, r1, #4352	; 0x1100
 8002222:	601a      	str	r2, [r3, #0]

  /*------------------------ DMACTCR Configuration --------------------*/
  dmaregval = (dmaconf->TxDMABurstLength |
 8002224:	683b      	ldr	r3, [r7, #0]
 8002226:	691a      	ldr	r2, [r3, #16]
               ((uint32_t)dmaconf->SecondPacketOperate << 4)|
 8002228:	683b      	ldr	r3, [r7, #0]
 800222a:	7d1b      	ldrb	r3, [r3, #20]
 800222c:	011b      	lsls	r3, r3, #4
  dmaregval = (dmaconf->TxDMABurstLength |
 800222e:	431a      	orrs	r2, r3
                 ((uint32_t)dmaconf->TCPSegmentation << 12));
 8002230:	683b      	ldr	r3, [r7, #0]
 8002232:	7f5b      	ldrb	r3, [r3, #29]
 8002234:	031b      	lsls	r3, r3, #12
  dmaregval = (dmaconf->TxDMABurstLength |
 8002236:	4313      	orrs	r3, r2
 8002238:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(heth->Instance->DMACTCR, ETH_DMACTCR_MASK, dmaregval);
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	681a      	ldr	r2, [r3, #0]
 800223e:	f241 1304 	movw	r3, #4356	; 0x1104
 8002242:	4413      	add	r3, r2
 8002244:	681a      	ldr	r2, [r3, #0]
 8002246:	4b16      	ldr	r3, [pc, #88]	; (80022a0 <ETH_SetDMAConfig+0x104>)
 8002248:	4013      	ands	r3, r2
 800224a:	687a      	ldr	r2, [r7, #4]
 800224c:	6811      	ldr	r1, [r2, #0]
 800224e:	68fa      	ldr	r2, [r7, #12]
 8002250:	431a      	orrs	r2, r3
 8002252:	f241 1304 	movw	r3, #4356	; 0x1104
 8002256:	440b      	add	r3, r1
 8002258:	601a      	str	r2, [r3, #0]

  /*------------------------ DMACRCR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->FlushRxPacket  << 31) |
 800225a:	683b      	ldr	r3, [r7, #0]
 800225c:	7f1b      	ldrb	r3, [r3, #28]
 800225e:	07da      	lsls	r2, r3, #31
               dmaconf->RxDMABurstLength);
 8002260:	683b      	ldr	r3, [r7, #0]
 8002262:	699b      	ldr	r3, [r3, #24]
  dmaregval = (((uint32_t)dmaconf->FlushRxPacket  << 31) |
 8002264:	4313      	orrs	r3, r2
 8002266:	60fb      	str	r3, [r7, #12]

  /* Write to DMACRCR */
  MODIFY_REG(heth->Instance->DMACRCR, ETH_DMACRCR_MASK, dmaregval);
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	681a      	ldr	r2, [r3, #0]
 800226c:	f241 1308 	movw	r3, #4360	; 0x1108
 8002270:	4413      	add	r3, r2
 8002272:	681a      	ldr	r2, [r3, #0]
 8002274:	4b0b      	ldr	r3, [pc, #44]	; (80022a4 <ETH_SetDMAConfig+0x108>)
 8002276:	4013      	ands	r3, r2
 8002278:	687a      	ldr	r2, [r7, #4]
 800227a:	6811      	ldr	r1, [r2, #0]
 800227c:	68fa      	ldr	r2, [r7, #12]
 800227e:	431a      	orrs	r2, r3
 8002280:	f241 1308 	movw	r3, #4360	; 0x1108
 8002284:	440b      	add	r3, r1
 8002286:	601a      	str	r2, [r3, #0]
}
 8002288:	bf00      	nop
 800228a:	3714      	adds	r7, #20
 800228c:	46bd      	mov	sp, r7
 800228e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002292:	4770      	bx	lr
 8002294:	ffff87fd 	.word	0xffff87fd
 8002298:	ffff2ffe 	.word	0xffff2ffe
 800229c:	fffec000 	.word	0xfffec000
 80022a0:	ffc0efef 	.word	0xffc0efef
 80022a4:	7fc0ffff 	.word	0x7fc0ffff

080022a8 <ETH_MACDMAConfig>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth)
{
 80022a8:	b580      	push	{r7, lr}
 80022aa:	b0a4      	sub	sp, #144	; 0x90
 80022ac:	af00      	add	r7, sp, #0
 80022ae:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef macDefaultConf;
  ETH_DMAConfigTypeDef dmaDefaultConf;

  /*--------------- ETHERNET MAC registers default Configuration --------------*/
  macDefaultConf.AutomaticPadCRCStrip = ENABLE;
 80022b0:	2301      	movs	r3, #1
 80022b2:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
  macDefaultConf.BackOffLimit = ETH_BACKOFFLIMIT_10;
 80022b6:	2300      	movs	r3, #0
 80022b8:	653b      	str	r3, [r7, #80]	; 0x50
  macDefaultConf.CarrierSenseBeforeTransmit = DISABLE;
 80022ba:	2300      	movs	r3, #0
 80022bc:	f887 3049 	strb.w	r3, [r7, #73]	; 0x49
  macDefaultConf.CarrierSenseDuringTransmit = DISABLE;
 80022c0:	2300      	movs	r3, #0
 80022c2:	f887 304b 	strb.w	r3, [r7, #75]	; 0x4b
  macDefaultConf.ChecksumOffload = ENABLE;
 80022c6:	2301      	movs	r3, #1
 80022c8:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
  macDefaultConf.CRCCheckingRxPackets = ENABLE;
 80022cc:	2301      	movs	r3, #1
 80022ce:	f887 305e 	strb.w	r3, [r7, #94]	; 0x5e
  macDefaultConf.CRCStripTypePacket = ENABLE;
 80022d2:	2301      	movs	r3, #1
 80022d4:	f887 303a 	strb.w	r3, [r7, #58]	; 0x3a
  macDefaultConf.DeferralCheck = DISABLE;
 80022d8:	2300      	movs	r3, #0
 80022da:	f887 3054 	strb.w	r3, [r7, #84]	; 0x54
  macDefaultConf.DropTCPIPChecksumErrorPacket = ENABLE;
 80022de:	2301      	movs	r3, #1
 80022e0:	f887 308c 	strb.w	r3, [r7, #140]	; 0x8c
  macDefaultConf.DuplexMode = ETH_FULLDUPLEX_MODE;
 80022e4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80022e8:	647b      	str	r3, [r7, #68]	; 0x44
  macDefaultConf.ExtendedInterPacketGap = DISABLE;
 80022ea:	2300      	movs	r3, #0
 80022ec:	f887 3064 	strb.w	r3, [r7, #100]	; 0x64
  macDefaultConf.ExtendedInterPacketGapVal = 0x0;
 80022f0:	2300      	movs	r3, #0
 80022f2:	66bb      	str	r3, [r7, #104]	; 0x68
  macDefaultConf.ForwardRxErrorPacket = DISABLE;
 80022f4:	2300      	movs	r3, #0
 80022f6:	f887 308d 	strb.w	r3, [r7, #141]	; 0x8d
  macDefaultConf.ForwardRxUndersizedGoodPacket = DISABLE;
 80022fa:	2300      	movs	r3, #0
 80022fc:	f887 308e 	strb.w	r3, [r7, #142]	; 0x8e
  macDefaultConf.GiantPacketSizeLimit = 0x618;
 8002300:	f44f 63c3 	mov.w	r3, #1560	; 0x618
 8002304:	663b      	str	r3, [r7, #96]	; 0x60
  macDefaultConf.GiantPacketSizeLimitControl = DISABLE;
 8002306:	2300      	movs	r3, #0
 8002308:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
  macDefaultConf.InterPacketGapVal = ETH_INTERPACKETGAP_96BIT;
 800230c:	2300      	movs	r3, #0
 800230e:	637b      	str	r3, [r7, #52]	; 0x34
  macDefaultConf.Jabber = ENABLE;
 8002310:	2301      	movs	r3, #1
 8002312:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d
  macDefaultConf.JumboPacket = DISABLE;
 8002316:	2300      	movs	r3, #0
 8002318:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
  macDefaultConf.LoopbackMode = DISABLE;
 800231c:	2300      	movs	r3, #0
 800231e:	f887 3048 	strb.w	r3, [r7, #72]	; 0x48
  macDefaultConf.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS_4;
 8002322:	2300      	movs	r3, #0
 8002324:	67fb      	str	r3, [r7, #124]	; 0x7c
  macDefaultConf.PauseTime = 0x0;
 8002326:	2300      	movs	r3, #0
 8002328:	677b      	str	r3, [r7, #116]	; 0x74
  macDefaultConf.PreambleLength = ETH_PREAMBLELENGTH_7;
 800232a:	2300      	movs	r3, #0
 800232c:	65bb      	str	r3, [r7, #88]	; 0x58
  macDefaultConf.ProgrammableWatchdog = DISABLE;
 800232e:	2300      	movs	r3, #0
 8002330:	f887 306c 	strb.w	r3, [r7, #108]	; 0x6c
  macDefaultConf.ReceiveFlowControl = DISABLE;
 8002334:	2300      	movs	r3, #0
 8002336:	f887 3082 	strb.w	r3, [r7, #130]	; 0x82
  macDefaultConf.ReceiveOwn = ENABLE;
 800233a:	2301      	movs	r3, #1
 800233c:	f887 304a 	strb.w	r3, [r7, #74]	; 0x4a
  macDefaultConf.ReceiveQueueMode = ETH_RECEIVESTOREFORWARD;
 8002340:	2320      	movs	r3, #32
 8002342:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  macDefaultConf.RetryTransmission = ENABLE;
 8002346:	2301      	movs	r3, #1
 8002348:	f887 304c 	strb.w	r3, [r7, #76]	; 0x4c
  macDefaultConf.SlowProtocolDetect = DISABLE;
 800234c:	2300      	movs	r3, #0
 800234e:	f887 305d 	strb.w	r3, [r7, #93]	; 0x5d
  macDefaultConf.SourceAddrControl = ETH_SOURCEADDRESS_REPLACE_ADDR0;
 8002352:	f04f 5340 	mov.w	r3, #805306368	; 0x30000000
 8002356:	62fb      	str	r3, [r7, #44]	; 0x2c
  macDefaultConf.Speed = ETH_SPEED_100M;
 8002358:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800235c:	643b      	str	r3, [r7, #64]	; 0x40
  macDefaultConf.Support2KPacket = DISABLE;
 800235e:	2300      	movs	r3, #0
 8002360:	f887 3039 	strb.w	r3, [r7, #57]	; 0x39
  macDefaultConf.TransmitQueueMode = ETH_TRANSMITSTOREFORWARD;
 8002364:	2302      	movs	r3, #2
 8002366:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  macDefaultConf.TransmitFlowControl = DISABLE;
 800236a:	2300      	movs	r3, #0
 800236c:	f887 3080 	strb.w	r3, [r7, #128]	; 0x80
  macDefaultConf.UnicastPausePacketDetect = DISABLE;
 8002370:	2300      	movs	r3, #0
 8002372:	f887 3081 	strb.w	r3, [r7, #129]	; 0x81
  macDefaultConf.UnicastSlowProtocolPacketDetect = DISABLE;
 8002376:	2300      	movs	r3, #0
 8002378:	f887 305c 	strb.w	r3, [r7, #92]	; 0x5c
  macDefaultConf.Watchdog = ENABLE;
 800237c:	2301      	movs	r3, #1
 800237e:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c
  macDefaultConf.WatchdogTimeout =  ETH_MACWTR_WTO_2KB;
 8002382:	2300      	movs	r3, #0
 8002384:	673b      	str	r3, [r7, #112]	; 0x70
  macDefaultConf.ZeroQuantaPause = ENABLE;
 8002386:	2301      	movs	r3, #1
 8002388:	f887 3078 	strb.w	r3, [r7, #120]	; 0x78

  /* MAC default configuration */
  ETH_SetMACConfig(heth, &macDefaultConf);
 800238c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002390:	4619      	mov	r1, r3
 8002392:	6878      	ldr	r0, [r7, #4]
 8002394:	f7ff fde6 	bl	8001f64 <ETH_SetMACConfig>

  /*--------------- ETHERNET DMA registers default Configuration --------------*/
  dmaDefaultConf.AddressAlignedBeats = ENABLE;
 8002398:	2301      	movs	r3, #1
 800239a:	733b      	strb	r3, [r7, #12]
  dmaDefaultConf.BurstMode = ETH_BURSTLENGTH_FIXED;
 800239c:	2301      	movs	r3, #1
 800239e:	613b      	str	r3, [r7, #16]
  dmaDefaultConf.DMAArbitration = ETH_DMAARBITRATION_RX1_TX1;
 80023a0:	2300      	movs	r3, #0
 80023a2:	60bb      	str	r3, [r7, #8]
  dmaDefaultConf.FlushRxPacket = DISABLE;
 80023a4:	2300      	movs	r3, #0
 80023a6:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  dmaDefaultConf.PBLx8Mode = DISABLE;
 80023aa:	2300      	movs	r3, #0
 80023ac:	757b      	strb	r3, [r7, #21]
  dmaDefaultConf.RebuildINCRxBurst = DISABLE;
 80023ae:	2300      	movs	r3, #0
 80023b0:	753b      	strb	r3, [r7, #20]
  dmaDefaultConf.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 80023b2:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 80023b6:	623b      	str	r3, [r7, #32]
  dmaDefaultConf.SecondPacketOperate = DISABLE;
 80023b8:	2300      	movs	r3, #0
 80023ba:	773b      	strb	r3, [r7, #28]
  dmaDefaultConf.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 80023bc:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 80023c0:	61bb      	str	r3, [r7, #24]
  dmaDefaultConf.TCPSegmentation = DISABLE;
 80023c2:	2300      	movs	r3, #0
 80023c4:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  dmaDefaultConf.MaximumSegmentSize = 536;
 80023c8:	f44f 7306 	mov.w	r3, #536	; 0x218
 80023cc:	62bb      	str	r3, [r7, #40]	; 0x28

  /* DMA default configuration */
  ETH_SetDMAConfig(heth, &dmaDefaultConf);
 80023ce:	f107 0308 	add.w	r3, r7, #8
 80023d2:	4619      	mov	r1, r3
 80023d4:	6878      	ldr	r0, [r7, #4]
 80023d6:	f7ff fee1 	bl	800219c <ETH_SetDMAConfig>
}
 80023da:	bf00      	nop
 80023dc:	3790      	adds	r7, #144	; 0x90
 80023de:	46bd      	mov	sp, r7
 80023e0:	bd80      	pop	{r7, pc}
	...

080023e4 <ETH_MAC_MDIO_ClkConfig>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_MAC_MDIO_ClkConfig(ETH_HandleTypeDef *heth)
{
 80023e4:	b580      	push	{r7, lr}
 80023e6:	b084      	sub	sp, #16
 80023e8:	af00      	add	r7, sp, #0
 80023ea:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg, hclk;

  /* Get the ETHERNET MACMDIOAR value */
  tmpreg = (heth->Instance)->MACMDIOAR;
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	681b      	ldr	r3, [r3, #0]
 80023f0:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80023f4:	60fb      	str	r3, [r7, #12]

  /* Clear CSR Clock Range bits */
  tmpreg &= ~ETH_MACMDIOAR_CR;
 80023f6:	68fb      	ldr	r3, [r7, #12]
 80023f8:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 80023fc:	60fb      	str	r3, [r7, #12]

  /* Get hclk frequency value */
  hclk = HAL_RCC_GetHCLKFreq();
 80023fe:	f001 fc11 	bl	8003c24 <HAL_RCC_GetHCLKFreq>
 8002402:	60b8      	str	r0, [r7, #8]

  /* Set CR bits depending on hclk value */
  if((hclk >= 20000000U)&&(hclk < 35000000U))
 8002404:	68bb      	ldr	r3, [r7, #8]
 8002406:	4a1e      	ldr	r2, [pc, #120]	; (8002480 <ETH_MAC_MDIO_ClkConfig+0x9c>)
 8002408:	4293      	cmp	r3, r2
 800240a:	d908      	bls.n	800241e <ETH_MAC_MDIO_ClkConfig+0x3a>
 800240c:	68bb      	ldr	r3, [r7, #8]
 800240e:	4a1d      	ldr	r2, [pc, #116]	; (8002484 <ETH_MAC_MDIO_ClkConfig+0xa0>)
 8002410:	4293      	cmp	r3, r2
 8002412:	d804      	bhi.n	800241e <ETH_MAC_MDIO_ClkConfig+0x3a>
  {
    /* CSR Clock Range between 20-35 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV16;
 8002414:	68fb      	ldr	r3, [r7, #12]
 8002416:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800241a:	60fb      	str	r3, [r7, #12]
 800241c:	e027      	b.n	800246e <ETH_MAC_MDIO_ClkConfig+0x8a>
  }
  else if((hclk >= 35000000U)&&(hclk < 60000000U))
 800241e:	68bb      	ldr	r3, [r7, #8]
 8002420:	4a18      	ldr	r2, [pc, #96]	; (8002484 <ETH_MAC_MDIO_ClkConfig+0xa0>)
 8002422:	4293      	cmp	r3, r2
 8002424:	d908      	bls.n	8002438 <ETH_MAC_MDIO_ClkConfig+0x54>
 8002426:	68bb      	ldr	r3, [r7, #8]
 8002428:	4a17      	ldr	r2, [pc, #92]	; (8002488 <ETH_MAC_MDIO_ClkConfig+0xa4>)
 800242a:	4293      	cmp	r3, r2
 800242c:	d804      	bhi.n	8002438 <ETH_MAC_MDIO_ClkConfig+0x54>
  {
    /* CSR Clock Range between 35-60 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV26;
 800242e:	68fb      	ldr	r3, [r7, #12]
 8002430:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 8002434:	60fb      	str	r3, [r7, #12]
 8002436:	e01a      	b.n	800246e <ETH_MAC_MDIO_ClkConfig+0x8a>
  }
  else if((hclk >= 60000000U)&&(hclk < 100000000U))
 8002438:	68bb      	ldr	r3, [r7, #8]
 800243a:	4a13      	ldr	r2, [pc, #76]	; (8002488 <ETH_MAC_MDIO_ClkConfig+0xa4>)
 800243c:	4293      	cmp	r3, r2
 800243e:	d903      	bls.n	8002448 <ETH_MAC_MDIO_ClkConfig+0x64>
 8002440:	68bb      	ldr	r3, [r7, #8]
 8002442:	4a12      	ldr	r2, [pc, #72]	; (800248c <ETH_MAC_MDIO_ClkConfig+0xa8>)
 8002444:	4293      	cmp	r3, r2
 8002446:	d911      	bls.n	800246c <ETH_MAC_MDIO_ClkConfig+0x88>
  {
    /* CSR Clock Range between 60-100 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV42;
  }
  else if((hclk >= 100000000U)&&(hclk < 150000000U))
 8002448:	68bb      	ldr	r3, [r7, #8]
 800244a:	4a10      	ldr	r2, [pc, #64]	; (800248c <ETH_MAC_MDIO_ClkConfig+0xa8>)
 800244c:	4293      	cmp	r3, r2
 800244e:	d908      	bls.n	8002462 <ETH_MAC_MDIO_ClkConfig+0x7e>
 8002450:	68bb      	ldr	r3, [r7, #8]
 8002452:	4a0f      	ldr	r2, [pc, #60]	; (8002490 <ETH_MAC_MDIO_ClkConfig+0xac>)
 8002454:	4293      	cmp	r3, r2
 8002456:	d804      	bhi.n	8002462 <ETH_MAC_MDIO_ClkConfig+0x7e>
  {
    /* CSR Clock Range between 100-150 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV62;
 8002458:	68fb      	ldr	r3, [r7, #12]
 800245a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800245e:	60fb      	str	r3, [r7, #12]
 8002460:	e005      	b.n	800246e <ETH_MAC_MDIO_ClkConfig+0x8a>
  }
  else /* (hclk >= 150000000)&&(hclk <= 200000000) */
  {
    /* CSR Clock Range between 150-200 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV102;
 8002462:	68fb      	ldr	r3, [r7, #12]
 8002464:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002468:	60fb      	str	r3, [r7, #12]
 800246a:	e000      	b.n	800246e <ETH_MAC_MDIO_ClkConfig+0x8a>
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV42;
 800246c:	bf00      	nop
  }

  /* Configure the CSR Clock Range */
  (heth->Instance)->MACMDIOAR = (uint32_t)tmpreg;
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	681b      	ldr	r3, [r3, #0]
 8002472:	68fa      	ldr	r2, [r7, #12]
 8002474:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
}
 8002478:	bf00      	nop
 800247a:	3710      	adds	r7, #16
 800247c:	46bd      	mov	sp, r7
 800247e:	bd80      	pop	{r7, pc}
 8002480:	01312cff 	.word	0x01312cff
 8002484:	02160ebf 	.word	0x02160ebf
 8002488:	039386ff 	.word	0x039386ff
 800248c:	05f5e0ff 	.word	0x05f5e0ff
 8002490:	08f0d17f 	.word	0x08f0d17f

08002494 <ETH_DMATxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMATxDescListInit(ETH_HandleTypeDef *heth)
{
 8002494:	b480      	push	{r7}
 8002496:	b085      	sub	sp, #20
 8002498:	af00      	add	r7, sp, #0
 800249a:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmatxdesc;
  uint32_t i;

  /* Fill each DMATxDesc descriptor with the right values */
  for(i=0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 800249c:	2300      	movs	r3, #0
 800249e:	60fb      	str	r3, [r7, #12]
 80024a0:	e01d      	b.n	80024de <ETH_DMATxDescListInit+0x4a>
  {
    dmatxdesc = heth->Init.TxDesc + i;
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	68d9      	ldr	r1, [r3, #12]
 80024a6:	68fa      	ldr	r2, [r7, #12]
 80024a8:	4613      	mov	r3, r2
 80024aa:	005b      	lsls	r3, r3, #1
 80024ac:	4413      	add	r3, r2
 80024ae:	00db      	lsls	r3, r3, #3
 80024b0:	440b      	add	r3, r1
 80024b2:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmatxdesc->DESC0, 0x0);
 80024b4:	68bb      	ldr	r3, [r7, #8]
 80024b6:	2200      	movs	r2, #0
 80024b8:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmatxdesc->DESC1, 0x0);
 80024ba:	68bb      	ldr	r3, [r7, #8]
 80024bc:	2200      	movs	r2, #0
 80024be:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmatxdesc->DESC2, 0x0);
 80024c0:	68bb      	ldr	r3, [r7, #8]
 80024c2:	2200      	movs	r2, #0
 80024c4:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmatxdesc->DESC3, 0x0);
 80024c6:	68bb      	ldr	r3, [r7, #8]
 80024c8:	2200      	movs	r2, #0
 80024ca:	60da      	str	r2, [r3, #12]

    WRITE_REG(heth->TxDescList.TxDesc[i], (uint32_t)dmatxdesc);
 80024cc:	68b9      	ldr	r1, [r7, #8]
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	68fa      	ldr	r2, [r7, #12]
 80024d2:	3206      	adds	r2, #6
 80024d4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  for(i=0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 80024d8:	68fb      	ldr	r3, [r7, #12]
 80024da:	3301      	adds	r3, #1
 80024dc:	60fb      	str	r3, [r7, #12]
 80024de:	68fb      	ldr	r3, [r7, #12]
 80024e0:	2b03      	cmp	r3, #3
 80024e2:	d9de      	bls.n	80024a2 <ETH_DMATxDescListInit+0xe>
  }

  heth->TxDescList.CurTxDesc = 0;
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	2200      	movs	r2, #0
 80024e8:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set Transmit Descriptor Ring Length */
  WRITE_REG(heth->Instance->DMACTDRLR, (ETH_TX_DESC_CNT -1));
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	681a      	ldr	r2, [r3, #0]
 80024ee:	f241 132c 	movw	r3, #4396	; 0x112c
 80024f2:	4413      	add	r3, r2
 80024f4:	2203      	movs	r2, #3
 80024f6:	601a      	str	r2, [r3, #0]

  /* Set Transmit Descriptor List Address */
  WRITE_REG(heth->Instance->DMACTDLAR, (uint32_t) heth->Init.TxDesc);
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	68d9      	ldr	r1, [r3, #12]
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	681a      	ldr	r2, [r3, #0]
 8002500:	f241 1314 	movw	r3, #4372	; 0x1114
 8002504:	4413      	add	r3, r2
 8002506:	6019      	str	r1, [r3, #0]

  /* Set Transmit Descriptor Tail pointer */
  WRITE_REG(heth->Instance->DMACTDTPR, (uint32_t) heth->Init.TxDesc);
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	68da      	ldr	r2, [r3, #12]
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	681b      	ldr	r3, [r3, #0]
 8002510:	f503 5389 	add.w	r3, r3, #4384	; 0x1120
 8002514:	601a      	str	r2, [r3, #0]
}
 8002516:	bf00      	nop
 8002518:	3714      	adds	r7, #20
 800251a:	46bd      	mov	sp, r7
 800251c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002520:	4770      	bx	lr

08002522 <ETH_DMARxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMARxDescListInit(ETH_HandleTypeDef *heth)
{
 8002522:	b480      	push	{r7}
 8002524:	b085      	sub	sp, #20
 8002526:	af00      	add	r7, sp, #0
 8002528:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t i;

  for(i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 800252a:	2300      	movs	r3, #0
 800252c:	60fb      	str	r3, [r7, #12]
 800252e:	e024      	b.n	800257a <ETH_DMARxDescListInit+0x58>
  {
    dmarxdesc =  heth->Init.RxDesc + i;
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	6919      	ldr	r1, [r3, #16]
 8002534:	68fa      	ldr	r2, [r7, #12]
 8002536:	4613      	mov	r3, r2
 8002538:	005b      	lsls	r3, r3, #1
 800253a:	4413      	add	r3, r2
 800253c:	00db      	lsls	r3, r3, #3
 800253e:	440b      	add	r3, r1
 8002540:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmarxdesc->DESC0, 0x0);
 8002542:	68bb      	ldr	r3, [r7, #8]
 8002544:	2200      	movs	r2, #0
 8002546:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmarxdesc->DESC1, 0x0);
 8002548:	68bb      	ldr	r3, [r7, #8]
 800254a:	2200      	movs	r2, #0
 800254c:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmarxdesc->DESC2, 0x0);
 800254e:	68bb      	ldr	r3, [r7, #8]
 8002550:	2200      	movs	r2, #0
 8002552:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmarxdesc->DESC3, 0x0);
 8002554:	68bb      	ldr	r3, [r7, #8]
 8002556:	2200      	movs	r2, #0
 8002558:	60da      	str	r2, [r3, #12]
    WRITE_REG(dmarxdesc->BackupAddr0, 0x0);
 800255a:	68bb      	ldr	r3, [r7, #8]
 800255c:	2200      	movs	r2, #0
 800255e:	611a      	str	r2, [r3, #16]
    WRITE_REG(dmarxdesc->BackupAddr1, 0x0);
 8002560:	68bb      	ldr	r3, [r7, #8]
 8002562:	2200      	movs	r2, #0
 8002564:	615a      	str	r2, [r3, #20]

    /* Set Rx descritors adresses */
    WRITE_REG(heth->RxDescList.RxDesc[i], (uint32_t)dmarxdesc);
 8002566:	68ba      	ldr	r2, [r7, #8]
 8002568:	6879      	ldr	r1, [r7, #4]
 800256a:	68fb      	ldr	r3, [r7, #12]
 800256c:	330a      	adds	r3, #10
 800256e:	009b      	lsls	r3, r3, #2
 8002570:	440b      	add	r3, r1
 8002572:	605a      	str	r2, [r3, #4]
  for(i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8002574:	68fb      	ldr	r3, [r7, #12]
 8002576:	3301      	adds	r3, #1
 8002578:	60fb      	str	r3, [r7, #12]
 800257a:	68fb      	ldr	r3, [r7, #12]
 800257c:	2b03      	cmp	r3, #3
 800257e:	d9d7      	bls.n	8002530 <ETH_DMARxDescListInit+0xe>
  }

  WRITE_REG(heth->RxDescList.CurRxDesc, 0);
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	2200      	movs	r2, #0
 8002584:	63da      	str	r2, [r3, #60]	; 0x3c
  WRITE_REG(heth->RxDescList.FirstAppDesc, 0);
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	2200      	movs	r2, #0
 800258a:	641a      	str	r2, [r3, #64]	; 0x40
  WRITE_REG(heth->RxDescList.AppDescNbr, 0);
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	2200      	movs	r2, #0
 8002590:	645a      	str	r2, [r3, #68]	; 0x44
  WRITE_REG(heth->RxDescList.ItMode, 0);
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	2200      	movs	r2, #0
 8002596:	64da      	str	r2, [r3, #76]	; 0x4c
  WRITE_REG(heth->RxDescList.AppContextDesc, 0);
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	2200      	movs	r2, #0
 800259c:	649a      	str	r2, [r3, #72]	; 0x48

  /* Set Receive Descriptor Ring Length */
  WRITE_REG(heth->Instance->DMACRDRLR, ((uint32_t)(ETH_RX_DESC_CNT - 1)));
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	681a      	ldr	r2, [r3, #0]
 80025a2:	f241 1330 	movw	r3, #4400	; 0x1130
 80025a6:	4413      	add	r3, r2
 80025a8:	2203      	movs	r2, #3
 80025aa:	601a      	str	r2, [r3, #0]

  /* Set Receive Descriptor List Address */
  WRITE_REG(heth->Instance->DMACRDLAR, (uint32_t) heth->Init.RxDesc);
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	6919      	ldr	r1, [r3, #16]
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	681a      	ldr	r2, [r3, #0]
 80025b4:	f241 131c 	movw	r3, #4380	; 0x111c
 80025b8:	4413      	add	r3, r2
 80025ba:	6019      	str	r1, [r3, #0]

  /* Set Receive Descriptor Tail pointer Address */
  WRITE_REG(heth->Instance->DMACRDTPR, ((uint32_t)(heth->Init.RxDesc + (((uint32_t)(ETH_RX_DESC_CNT - 1))*sizeof(ETH_DMADescTypeDef)))));
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	691b      	ldr	r3, [r3, #16]
 80025c0:	f503 61d8 	add.w	r1, r3, #1728	; 0x6c0
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	681a      	ldr	r2, [r3, #0]
 80025c8:	f241 1328 	movw	r3, #4392	; 0x1128
 80025cc:	4413      	add	r3, r2
 80025ce:	6019      	str	r1, [r3, #0]
}
 80025d0:	bf00      	nop
 80025d2:	3714      	adds	r7, #20
 80025d4:	46bd      	mov	sp, r7
 80025d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025da:	4770      	bx	lr

080025dc <ETH_Prepare_Tx_Descriptors>:
  * @param  pTxConfig: Tx packet configuration
  * @param  ItMode: Enable or disable Tx EOT interrept
  * @retval Status
  */
static uint32_t ETH_Prepare_Tx_Descriptors(ETH_HandleTypeDef *heth, ETH_TxPacketConfig *pTxConfig, uint32_t ItMode)
{
 80025dc:	b480      	push	{r7}
 80025de:	b08d      	sub	sp, #52	; 0x34
 80025e0:	af00      	add	r7, sp, #0
 80025e2:	60f8      	str	r0, [r7, #12]
 80025e4:	60b9      	str	r1, [r7, #8]
 80025e6:	607a      	str	r2, [r7, #4]
  ETH_TxDescListTypeDef *dmatxdesclist = &heth->TxDescList;
 80025e8:	68fb      	ldr	r3, [r7, #12]
 80025ea:	3318      	adds	r3, #24
 80025ec:	61bb      	str	r3, [r7, #24]
  uint32_t descidx = dmatxdesclist->CurTxDesc;
 80025ee:	69bb      	ldr	r3, [r7, #24]
 80025f0:	691b      	ldr	r3, [r3, #16]
 80025f2:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t firstdescidx = dmatxdesclist->CurTxDesc;
 80025f4:	69bb      	ldr	r3, [r7, #24]
 80025f6:	691b      	ldr	r3, [r3, #16]
 80025f8:	617b      	str	r3, [r7, #20]
  uint32_t descnbr = 0, idx;
 80025fa:	2300      	movs	r3, #0
 80025fc:	62bb      	str	r3, [r7, #40]	; 0x28
  ETH_DMADescTypeDef *dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 80025fe:	69bb      	ldr	r3, [r7, #24]
 8002600:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002602:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002606:	623b      	str	r3, [r7, #32]

  ETH_BufferTypeDef  *txbuffer = pTxConfig->TxBuffer;
 8002608:	68bb      	ldr	r3, [r7, #8]
 800260a:	689b      	ldr	r3, [r3, #8]
 800260c:	61fb      	str	r3, [r7, #28]

  /* Current Tx Descriptor Owned by DMA: cannot be used by the application  */
  if(READ_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCWBF_OWN) == ETH_DMATXNDESCWBF_OWN)
 800260e:	6a3b      	ldr	r3, [r7, #32]
 8002610:	68db      	ldr	r3, [r3, #12]
 8002612:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8002616:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800261a:	d101      	bne.n	8002620 <ETH_Prepare_Tx_Descriptors+0x44>
  {
    return HAL_ETH_ERROR_BUSY;
 800261c:	2302      	movs	r3, #2
 800261e:	e223      	b.n	8002a68 <ETH_Prepare_Tx_Descriptors+0x48c>

  /***************************************************************************/
  /*****************    Context descriptor configuration (Optional) **********/
  /***************************************************************************/
  /* If VLAN tag is enabled for this packet */
  if(READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_VLANTAG) != 0U)
 8002620:	68bb      	ldr	r3, [r7, #8]
 8002622:	681b      	ldr	r3, [r3, #0]
 8002624:	f003 0304 	and.w	r3, r3, #4
 8002628:	2b00      	cmp	r3, #0
 800262a:	d044      	beq.n	80026b6 <ETH_Prepare_Tx_Descriptors+0xda>
  {
    /* Set vlan tag value */
    MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXCDESC_VT, pTxConfig->VlanTag);
 800262c:	6a3b      	ldr	r3, [r7, #32]
 800262e:	68da      	ldr	r2, [r3, #12]
 8002630:	4b72      	ldr	r3, [pc, #456]	; (80027fc <ETH_Prepare_Tx_Descriptors+0x220>)
 8002632:	4013      	ands	r3, r2
 8002634:	68ba      	ldr	r2, [r7, #8]
 8002636:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8002638:	431a      	orrs	r2, r3
 800263a:	6a3b      	ldr	r3, [r7, #32]
 800263c:	60da      	str	r2, [r3, #12]
    /* Set vlan tag valid bit */
    SET_BIT(dmatxdesc->DESC3, ETH_DMATXCDESC_VLTV);
 800263e:	6a3b      	ldr	r3, [r7, #32]
 8002640:	68db      	ldr	r3, [r3, #12]
 8002642:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8002646:	6a3b      	ldr	r3, [r7, #32]
 8002648:	60da      	str	r2, [r3, #12]
    /* Set the descriptor as the vlan input source */
    SET_BIT(heth->Instance->MACVIR, ETH_MACVIR_VLTI);
 800264a:	68fb      	ldr	r3, [r7, #12]
 800264c:	681b      	ldr	r3, [r3, #0]
 800264e:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8002650:	68fb      	ldr	r3, [r7, #12]
 8002652:	681b      	ldr	r3, [r3, #0]
 8002654:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8002658:	661a      	str	r2, [r3, #96]	; 0x60

    /* if inner VLAN is enabled */
    if(READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_INNERVLANTAG) != 0U)
 800265a:	68bb      	ldr	r3, [r7, #8]
 800265c:	681b      	ldr	r3, [r3, #0]
 800265e:	f003 0308 	and.w	r3, r3, #8
 8002662:	2b00      	cmp	r3, #0
 8002664:	d027      	beq.n	80026b6 <ETH_Prepare_Tx_Descriptors+0xda>
    {
      /* Set inner vlan tag value */
      MODIFY_REG(dmatxdesc->DESC2, ETH_DMATXCDESC_IVT, (pTxConfig->InnerVlanTag << 16));
 8002666:	6a3b      	ldr	r3, [r7, #32]
 8002668:	689b      	ldr	r3, [r3, #8]
 800266a:	b29a      	uxth	r2, r3
 800266c:	68bb      	ldr	r3, [r7, #8]
 800266e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002670:	041b      	lsls	r3, r3, #16
 8002672:	431a      	orrs	r2, r3
 8002674:	6a3b      	ldr	r3, [r7, #32]
 8002676:	609a      	str	r2, [r3, #8]
      /* Set inner vlan tag valid bit */
      SET_BIT(dmatxdesc->DESC3, ETH_DMATXCDESC_IVLTV);
 8002678:	6a3b      	ldr	r3, [r7, #32]
 800267a:	68db      	ldr	r3, [r3, #12]
 800267c:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8002680:	6a3b      	ldr	r3, [r7, #32]
 8002682:	60da      	str	r2, [r3, #12]

      /* Set Vlan Tag control */
      MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXCDESC_IVTIR, pTxConfig->InnerVlanCtrl);
 8002684:	6a3b      	ldr	r3, [r7, #32]
 8002686:	68db      	ldr	r3, [r3, #12]
 8002688:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 800268c:	68bb      	ldr	r3, [r7, #8]
 800268e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002690:	431a      	orrs	r2, r3
 8002692:	6a3b      	ldr	r3, [r7, #32]
 8002694:	60da      	str	r2, [r3, #12]

      /* Set the descriptor as the inner vlan input source */
      SET_BIT(heth->Instance->MACIVIR, ETH_MACIVIR_VLTI);
 8002696:	68fb      	ldr	r3, [r7, #12]
 8002698:	681b      	ldr	r3, [r3, #0]
 800269a:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 800269c:	68fb      	ldr	r3, [r7, #12]
 800269e:	681b      	ldr	r3, [r3, #0]
 80026a0:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 80026a4:	665a      	str	r2, [r3, #100]	; 0x64
      /* Enable double VLAN processing */
      SET_BIT(heth->Instance->MACVTR, ETH_MACVTR_EDVLP);
 80026a6:	68fb      	ldr	r3, [r7, #12]
 80026a8:	681b      	ldr	r3, [r3, #0]
 80026aa:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80026ac:	68fb      	ldr	r3, [r7, #12]
 80026ae:	681b      	ldr	r3, [r3, #0]
 80026b0:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 80026b4:	651a      	str	r2, [r3, #80]	; 0x50
    }
  }

  /* if tcp segementation is enabled for this packet */
  if(READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_TSO) != 0U)
 80026b6:	68bb      	ldr	r3, [r7, #8]
 80026b8:	681b      	ldr	r3, [r3, #0]
 80026ba:	f003 0310 	and.w	r3, r3, #16
 80026be:	2b00      	cmp	r3, #0
 80026c0:	d00e      	beq.n	80026e0 <ETH_Prepare_Tx_Descriptors+0x104>
  {
    /* Set MSS value */
    MODIFY_REG(dmatxdesc->DESC2, ETH_DMATXCDESC_MSS, pTxConfig->MaxSegmentSize);
 80026c2:	6a3b      	ldr	r3, [r7, #32]
 80026c4:	689a      	ldr	r2, [r3, #8]
 80026c6:	4b4e      	ldr	r3, [pc, #312]	; (8002800 <ETH_Prepare_Tx_Descriptors+0x224>)
 80026c8:	4013      	ands	r3, r2
 80026ca:	68ba      	ldr	r2, [r7, #8]
 80026cc:	6992      	ldr	r2, [r2, #24]
 80026ce:	431a      	orrs	r2, r3
 80026d0:	6a3b      	ldr	r3, [r7, #32]
 80026d2:	609a      	str	r2, [r3, #8]
    /* Set MSS valid bit */
    SET_BIT(dmatxdesc->DESC3, ETH_DMATXCDESC_TCMSSV);
 80026d4:	6a3b      	ldr	r3, [r7, #32]
 80026d6:	68db      	ldr	r3, [r3, #12]
 80026d8:	f043 6280 	orr.w	r2, r3, #67108864	; 0x4000000
 80026dc:	6a3b      	ldr	r3, [r7, #32]
 80026de:	60da      	str	r2, [r3, #12]
  }

  if((READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_VLANTAG) != 0U)|| (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_TSO) != 0U))
 80026e0:	68bb      	ldr	r3, [r7, #8]
 80026e2:	681b      	ldr	r3, [r3, #0]
 80026e4:	f003 0304 	and.w	r3, r3, #4
 80026e8:	2b00      	cmp	r3, #0
 80026ea:	d105      	bne.n	80026f8 <ETH_Prepare_Tx_Descriptors+0x11c>
 80026ec:	68bb      	ldr	r3, [r7, #8]
 80026ee:	681b      	ldr	r3, [r3, #0]
 80026f0:	f003 0310 	and.w	r3, r3, #16
 80026f4:	2b00      	cmp	r3, #0
 80026f6:	d030      	beq.n	800275a <ETH_Prepare_Tx_Descriptors+0x17e>
  {
    /* Set as context descriptor */
    SET_BIT(dmatxdesc->DESC3, ETH_DMATXCDESC_CTXT);
 80026f8:	6a3b      	ldr	r3, [r7, #32]
 80026fa:	68db      	ldr	r3, [r3, #12]
 80026fc:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8002700:	6a3b      	ldr	r3, [r7, #32]
 8002702:	60da      	str	r2, [r3, #12]
    /* Set own bit */
    SET_BIT(dmatxdesc->DESC3, ETH_DMATXCDESC_OWN);
 8002704:	6a3b      	ldr	r3, [r7, #32]
 8002706:	68db      	ldr	r3, [r3, #12]
 8002708:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 800270c:	6a3b      	ldr	r3, [r7, #32]
 800270e:	60da      	str	r2, [r3, #12]
    /* Increment current tx descriptor index */
    INCR_TX_DESC_INDEX(descidx, 1U);
 8002710:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002712:	3301      	adds	r3, #1
 8002714:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002716:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002718:	2b03      	cmp	r3, #3
 800271a:	d902      	bls.n	8002722 <ETH_Prepare_Tx_Descriptors+0x146>
 800271c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800271e:	3b04      	subs	r3, #4
 8002720:	62fb      	str	r3, [r7, #44]	; 0x2c
    /* Get current descriptor address */
    dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 8002722:	69bb      	ldr	r3, [r7, #24]
 8002724:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002726:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800272a:	623b      	str	r3, [r7, #32]

    descnbr += 1U;
 800272c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800272e:	3301      	adds	r3, #1
 8002730:	62bb      	str	r3, [r7, #40]	; 0x28

    /* Current Tx Descriptor Owned by DMA: cannot be used by the application  */
    if(READ_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCWBF_OWN) == ETH_DMATXNDESCWBF_OWN)
 8002732:	6a3b      	ldr	r3, [r7, #32]
 8002734:	68db      	ldr	r3, [r3, #12]
 8002736:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800273a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800273e:	d10c      	bne.n	800275a <ETH_Prepare_Tx_Descriptors+0x17e>
    {
      dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[firstdescidx];
 8002740:	69bb      	ldr	r3, [r7, #24]
 8002742:	697a      	ldr	r2, [r7, #20]
 8002744:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002748:	623b      	str	r3, [r7, #32]
      /* Clear own bit */
      CLEAR_BIT(dmatxdesc->DESC3, ETH_DMATXCDESC_OWN);
 800274a:	6a3b      	ldr	r3, [r7, #32]
 800274c:	68db      	ldr	r3, [r3, #12]
 800274e:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8002752:	6a3b      	ldr	r3, [r7, #32]
 8002754:	60da      	str	r2, [r3, #12]

      return HAL_ETH_ERROR_BUSY;
 8002756:	2302      	movs	r3, #2
 8002758:	e186      	b.n	8002a68 <ETH_Prepare_Tx_Descriptors+0x48c>

  /***************************************************************************/
  /*****************    Normal descriptors configuration     *****************/
  /***************************************************************************/

  descnbr += 1U;
 800275a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800275c:	3301      	adds	r3, #1
 800275e:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Set header or buffer 1 address */
  WRITE_REG(dmatxdesc->DESC0, (uint32_t)txbuffer->buffer);
 8002760:	69fb      	ldr	r3, [r7, #28]
 8002762:	681b      	ldr	r3, [r3, #0]
 8002764:	461a      	mov	r2, r3
 8002766:	6a3b      	ldr	r3, [r7, #32]
 8002768:	601a      	str	r2, [r3, #0]
  /* Set header or buffer 1 Length */
  MODIFY_REG(dmatxdesc->DESC2, ETH_DMATXNDESCRF_B1L, txbuffer->len);
 800276a:	6a3b      	ldr	r3, [r7, #32]
 800276c:	689a      	ldr	r2, [r3, #8]
 800276e:	4b24      	ldr	r3, [pc, #144]	; (8002800 <ETH_Prepare_Tx_Descriptors+0x224>)
 8002770:	4013      	ands	r3, r2
 8002772:	69fa      	ldr	r2, [r7, #28]
 8002774:	6852      	ldr	r2, [r2, #4]
 8002776:	431a      	orrs	r2, r3
 8002778:	6a3b      	ldr	r3, [r7, #32]
 800277a:	609a      	str	r2, [r3, #8]

  if(txbuffer->next != NULL)
 800277c:	69fb      	ldr	r3, [r7, #28]
 800277e:	689b      	ldr	r3, [r3, #8]
 8002780:	2b00      	cmp	r3, #0
 8002782:	d012      	beq.n	80027aa <ETH_Prepare_Tx_Descriptors+0x1ce>
  {
    txbuffer = txbuffer->next;
 8002784:	69fb      	ldr	r3, [r7, #28]
 8002786:	689b      	ldr	r3, [r3, #8]
 8002788:	61fb      	str	r3, [r7, #28]
    /* Set buffer 2 address */
    WRITE_REG(dmatxdesc->DESC1, (uint32_t)txbuffer->buffer);
 800278a:	69fb      	ldr	r3, [r7, #28]
 800278c:	681b      	ldr	r3, [r3, #0]
 800278e:	461a      	mov	r2, r3
 8002790:	6a3b      	ldr	r3, [r7, #32]
 8002792:	605a      	str	r2, [r3, #4]
    /* Set buffer 2 Length */
    MODIFY_REG(dmatxdesc->DESC2, ETH_DMATXNDESCRF_B2L, (txbuffer->len << 16));
 8002794:	6a3b      	ldr	r3, [r7, #32]
 8002796:	689a      	ldr	r2, [r3, #8]
 8002798:	4b1a      	ldr	r3, [pc, #104]	; (8002804 <ETH_Prepare_Tx_Descriptors+0x228>)
 800279a:	4013      	ands	r3, r2
 800279c:	69fa      	ldr	r2, [r7, #28]
 800279e:	6852      	ldr	r2, [r2, #4]
 80027a0:	0412      	lsls	r2, r2, #16
 80027a2:	431a      	orrs	r2, r3
 80027a4:	6a3b      	ldr	r3, [r7, #32]
 80027a6:	609a      	str	r2, [r3, #8]
 80027a8:	e008      	b.n	80027bc <ETH_Prepare_Tx_Descriptors+0x1e0>
  }
  else
  {
    WRITE_REG(dmatxdesc->DESC1, 0x0);
 80027aa:	6a3b      	ldr	r3, [r7, #32]
 80027ac:	2200      	movs	r2, #0
 80027ae:	605a      	str	r2, [r3, #4]
    /* Set buffer 2 Length */
    MODIFY_REG(dmatxdesc->DESC2, ETH_DMATXNDESCRF_B2L, 0x0U);
 80027b0:	6a3b      	ldr	r3, [r7, #32]
 80027b2:	689a      	ldr	r2, [r3, #8]
 80027b4:	4b13      	ldr	r3, [pc, #76]	; (8002804 <ETH_Prepare_Tx_Descriptors+0x228>)
 80027b6:	4013      	ands	r3, r2
 80027b8:	6a3a      	ldr	r2, [r7, #32]
 80027ba:	6093      	str	r3, [r2, #8]
  }

  if(READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_TSO) != 0U)
 80027bc:	68bb      	ldr	r3, [r7, #8]
 80027be:	681b      	ldr	r3, [r3, #0]
 80027c0:	f003 0310 	and.w	r3, r3, #16
 80027c4:	2b00      	cmp	r3, #0
 80027c6:	d021      	beq.n	800280c <ETH_Prepare_Tx_Descriptors+0x230>
  {
    /* Set TCP Header length */
    MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_THL, (pTxConfig->TCPHeaderLen << 19));
 80027c8:	6a3b      	ldr	r3, [r7, #32]
 80027ca:	68db      	ldr	r3, [r3, #12]
 80027cc:	f423 02f0 	bic.w	r2, r3, #7864320	; 0x780000
 80027d0:	68bb      	ldr	r3, [r7, #8]
 80027d2:	6a1b      	ldr	r3, [r3, #32]
 80027d4:	04db      	lsls	r3, r3, #19
 80027d6:	431a      	orrs	r2, r3
 80027d8:	6a3b      	ldr	r3, [r7, #32]
 80027da:	60da      	str	r2, [r3, #12]
    /* Set TCP payload length */
    MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_TPL, pTxConfig->PayloadLen);
 80027dc:	6a3b      	ldr	r3, [r7, #32]
 80027de:	68da      	ldr	r2, [r3, #12]
 80027e0:	4b09      	ldr	r3, [pc, #36]	; (8002808 <ETH_Prepare_Tx_Descriptors+0x22c>)
 80027e2:	4013      	ands	r3, r2
 80027e4:	68ba      	ldr	r2, [r7, #8]
 80027e6:	69d2      	ldr	r2, [r2, #28]
 80027e8:	431a      	orrs	r2, r3
 80027ea:	6a3b      	ldr	r3, [r7, #32]
 80027ec:	60da      	str	r2, [r3, #12]
    /* Set TCP Segmentation Enabled bit */
    SET_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_TSE);
 80027ee:	6a3b      	ldr	r3, [r7, #32]
 80027f0:	68db      	ldr	r3, [r3, #12]
 80027f2:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 80027f6:	6a3b      	ldr	r3, [r7, #32]
 80027f8:	60da      	str	r2, [r3, #12]
 80027fa:	e02e      	b.n	800285a <ETH_Prepare_Tx_Descriptors+0x27e>
 80027fc:	ffff0000 	.word	0xffff0000
 8002800:	ffffc000 	.word	0xffffc000
 8002804:	c000ffff 	.word	0xc000ffff
 8002808:	fffc0000 	.word	0xfffc0000
  }
  else
  {
    MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_FL, pTxConfig->Length);
 800280c:	6a3b      	ldr	r3, [r7, #32]
 800280e:	68da      	ldr	r2, [r3, #12]
 8002810:	4b98      	ldr	r3, [pc, #608]	; (8002a74 <ETH_Prepare_Tx_Descriptors+0x498>)
 8002812:	4013      	ands	r3, r2
 8002814:	68ba      	ldr	r2, [r7, #8]
 8002816:	6852      	ldr	r2, [r2, #4]
 8002818:	431a      	orrs	r2, r3
 800281a:	6a3b      	ldr	r3, [r7, #32]
 800281c:	60da      	str	r2, [r3, #12]

    if(READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_CSUM) != 0U)
 800281e:	68bb      	ldr	r3, [r7, #8]
 8002820:	681b      	ldr	r3, [r3, #0]
 8002822:	f003 0301 	and.w	r3, r3, #1
 8002826:	2b00      	cmp	r3, #0
 8002828:	d008      	beq.n	800283c <ETH_Prepare_Tx_Descriptors+0x260>
    {
      MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_CIC, pTxConfig->ChecksumCtrl);
 800282a:	6a3b      	ldr	r3, [r7, #32]
 800282c:	68db      	ldr	r3, [r3, #12]
 800282e:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002832:	68bb      	ldr	r3, [r7, #8]
 8002834:	695b      	ldr	r3, [r3, #20]
 8002836:	431a      	orrs	r2, r3
 8002838:	6a3b      	ldr	r3, [r7, #32]
 800283a:	60da      	str	r2, [r3, #12]
    }

    if(READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_CRCPAD) != 0U)
 800283c:	68bb      	ldr	r3, [r7, #8]
 800283e:	681b      	ldr	r3, [r3, #0]
 8002840:	f003 0320 	and.w	r3, r3, #32
 8002844:	2b00      	cmp	r3, #0
 8002846:	d008      	beq.n	800285a <ETH_Prepare_Tx_Descriptors+0x27e>
    {
      MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_CPC, pTxConfig->CRCPadCtrl);
 8002848:	6a3b      	ldr	r3, [r7, #32]
 800284a:	68db      	ldr	r3, [r3, #12]
 800284c:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002850:	68bb      	ldr	r3, [r7, #8]
 8002852:	691b      	ldr	r3, [r3, #16]
 8002854:	431a      	orrs	r2, r3
 8002856:	6a3b      	ldr	r3, [r7, #32]
 8002858:	60da      	str	r2, [r3, #12]
    }
  }

  if(READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_VLANTAG) != 0U)
 800285a:	68bb      	ldr	r3, [r7, #8]
 800285c:	681b      	ldr	r3, [r3, #0]
 800285e:	f003 0304 	and.w	r3, r3, #4
 8002862:	2b00      	cmp	r3, #0
 8002864:	d008      	beq.n	8002878 <ETH_Prepare_Tx_Descriptors+0x29c>
  {
    /* Set Vlan Tag control */
    MODIFY_REG(dmatxdesc->DESC2, ETH_DMATXNDESCRF_VTIR, pTxConfig->VlanCtrl);
 8002866:	6a3b      	ldr	r3, [r7, #32]
 8002868:	689b      	ldr	r3, [r3, #8]
 800286a:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 800286e:	68bb      	ldr	r3, [r7, #8]
 8002870:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002872:	431a      	orrs	r2, r3
 8002874:	6a3b      	ldr	r3, [r7, #32]
 8002876:	609a      	str	r2, [r3, #8]
  }

  /* Mark it as First Descriptor */
  SET_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_FD);
 8002878:	6a3b      	ldr	r3, [r7, #32]
 800287a:	68db      	ldr	r3, [r3, #12]
 800287c:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8002880:	6a3b      	ldr	r3, [r7, #32]
 8002882:	60da      	str	r2, [r3, #12]
  /* Mark it as NORMAL descriptor */
  CLEAR_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_CTXT);
 8002884:	6a3b      	ldr	r3, [r7, #32]
 8002886:	68db      	ldr	r3, [r3, #12]
 8002888:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 800288c:	6a3b      	ldr	r3, [r7, #32]
 800288e:	60da      	str	r2, [r3, #12]
  /* set OWN bit of FIRST descriptor */
  SET_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_OWN);
 8002890:	6a3b      	ldr	r3, [r7, #32]
 8002892:	68db      	ldr	r3, [r3, #12]
 8002894:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8002898:	6a3b      	ldr	r3, [r7, #32]
 800289a:	60da      	str	r2, [r3, #12]

  /* If source address insertion/replacement is enabled for this packet */
  if(READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_SAIC) != 0U)
 800289c:	68bb      	ldr	r3, [r7, #8]
 800289e:	681b      	ldr	r3, [r3, #0]
 80028a0:	f003 0302 	and.w	r3, r3, #2
 80028a4:	2b00      	cmp	r3, #0
 80028a6:	f000 80c0 	beq.w	8002a2a <ETH_Prepare_Tx_Descriptors+0x44e>
  {
    MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_SAIC, pTxConfig->SrcAddrCtrl);
 80028aa:	6a3b      	ldr	r3, [r7, #32]
 80028ac:	68db      	ldr	r3, [r3, #12]
 80028ae:	f023 7260 	bic.w	r2, r3, #58720256	; 0x3800000
 80028b2:	68bb      	ldr	r3, [r7, #8]
 80028b4:	68db      	ldr	r3, [r3, #12]
 80028b6:	431a      	orrs	r2, r3
 80028b8:	6a3b      	ldr	r3, [r7, #32]
 80028ba:	60da      	str	r2, [r3, #12]
  }

  /* only if the packet is splitted into more than one descriptors > 1 */
  while (txbuffer->next != NULL)
 80028bc:	e0b5      	b.n	8002a2a <ETH_Prepare_Tx_Descriptors+0x44e>
  {
    /* Clear the LD bit of previous descriptor */
    CLEAR_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_LD);
 80028be:	6a3b      	ldr	r3, [r7, #32]
 80028c0:	68db      	ldr	r3, [r3, #12]
 80028c2:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 80028c6:	6a3b      	ldr	r3, [r7, #32]
 80028c8:	60da      	str	r2, [r3, #12]
    /* Increment current tx descriptor index */
    INCR_TX_DESC_INDEX(descidx, 1U);
 80028ca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80028cc:	3301      	adds	r3, #1
 80028ce:	62fb      	str	r3, [r7, #44]	; 0x2c
 80028d0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80028d2:	2b03      	cmp	r3, #3
 80028d4:	d902      	bls.n	80028dc <ETH_Prepare_Tx_Descriptors+0x300>
 80028d6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80028d8:	3b04      	subs	r3, #4
 80028da:	62fb      	str	r3, [r7, #44]	; 0x2c
    /* Get current descriptor address */
    dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 80028dc:	69bb      	ldr	r3, [r7, #24]
 80028de:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80028e0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80028e4:	623b      	str	r3, [r7, #32]

    /* Clear the FD bit of new Descriptor */
    CLEAR_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_FD);
 80028e6:	6a3b      	ldr	r3, [r7, #32]
 80028e8:	68db      	ldr	r3, [r3, #12]
 80028ea:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 80028ee:	6a3b      	ldr	r3, [r7, #32]
 80028f0:	60da      	str	r2, [r3, #12]

    /* Current Tx Descriptor Owned by DMA: cannot be used by the application  */
    if(READ_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_OWN) == ETH_DMATXNDESCRF_OWN)
 80028f2:	6a3b      	ldr	r3, [r7, #32]
 80028f4:	68db      	ldr	r3, [r3, #12]
 80028f6:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80028fa:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80028fe:	d126      	bne.n	800294e <ETH_Prepare_Tx_Descriptors+0x372>
    {
      descidx = firstdescidx;
 8002900:	697b      	ldr	r3, [r7, #20]
 8002902:	62fb      	str	r3, [r7, #44]	; 0x2c
      dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 8002904:	69bb      	ldr	r3, [r7, #24]
 8002906:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002908:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800290c:	623b      	str	r3, [r7, #32]

      /* clear previous desc own bit */
      for(idx = 0; idx < descnbr; idx ++)
 800290e:	2300      	movs	r3, #0
 8002910:	627b      	str	r3, [r7, #36]	; 0x24
 8002912:	e016      	b.n	8002942 <ETH_Prepare_Tx_Descriptors+0x366>
      {
        CLEAR_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_OWN);
 8002914:	6a3b      	ldr	r3, [r7, #32]
 8002916:	68db      	ldr	r3, [r3, #12]
 8002918:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 800291c:	6a3b      	ldr	r3, [r7, #32]
 800291e:	60da      	str	r2, [r3, #12]

        /* Increment current tx descriptor index */
        INCR_TX_DESC_INDEX(descidx, 1U);
 8002920:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002922:	3301      	adds	r3, #1
 8002924:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002926:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002928:	2b03      	cmp	r3, #3
 800292a:	d902      	bls.n	8002932 <ETH_Prepare_Tx_Descriptors+0x356>
 800292c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800292e:	3b04      	subs	r3, #4
 8002930:	62fb      	str	r3, [r7, #44]	; 0x2c
        /* Get current descriptor address */
        dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 8002932:	69bb      	ldr	r3, [r7, #24]
 8002934:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002936:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800293a:	623b      	str	r3, [r7, #32]
      for(idx = 0; idx < descnbr; idx ++)
 800293c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800293e:	3301      	adds	r3, #1
 8002940:	627b      	str	r3, [r7, #36]	; 0x24
 8002942:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002944:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002946:	429a      	cmp	r2, r3
 8002948:	d3e4      	bcc.n	8002914 <ETH_Prepare_Tx_Descriptors+0x338>
      }

      return HAL_ETH_ERROR_BUSY;
 800294a:	2302      	movs	r3, #2
 800294c:	e08c      	b.n	8002a68 <ETH_Prepare_Tx_Descriptors+0x48c>
    }

    descnbr += 1U;
 800294e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002950:	3301      	adds	r3, #1
 8002952:	62bb      	str	r3, [r7, #40]	; 0x28

    /* Get the next Tx buffer in the list */
    txbuffer = (struct __ETH_BufferTypeDef *)txbuffer->next;
 8002954:	69fb      	ldr	r3, [r7, #28]
 8002956:	689b      	ldr	r3, [r3, #8]
 8002958:	61fb      	str	r3, [r7, #28]

    /* Set header or buffer 1 address */
    WRITE_REG(dmatxdesc->DESC0, (uint32_t)txbuffer->buffer);
 800295a:	69fb      	ldr	r3, [r7, #28]
 800295c:	681b      	ldr	r3, [r3, #0]
 800295e:	461a      	mov	r2, r3
 8002960:	6a3b      	ldr	r3, [r7, #32]
 8002962:	601a      	str	r2, [r3, #0]
    /* Set header or buffer 1 Length */
    MODIFY_REG(dmatxdesc->DESC2, ETH_DMATXNDESCRF_B1L, txbuffer->len);
 8002964:	6a3b      	ldr	r3, [r7, #32]
 8002966:	689a      	ldr	r2, [r3, #8]
 8002968:	4b43      	ldr	r3, [pc, #268]	; (8002a78 <ETH_Prepare_Tx_Descriptors+0x49c>)
 800296a:	4013      	ands	r3, r2
 800296c:	69fa      	ldr	r2, [r7, #28]
 800296e:	6852      	ldr	r2, [r2, #4]
 8002970:	431a      	orrs	r2, r3
 8002972:	6a3b      	ldr	r3, [r7, #32]
 8002974:	609a      	str	r2, [r3, #8]

    if (txbuffer->next != NULL)
 8002976:	69fb      	ldr	r3, [r7, #28]
 8002978:	689b      	ldr	r3, [r3, #8]
 800297a:	2b00      	cmp	r3, #0
 800297c:	d012      	beq.n	80029a4 <ETH_Prepare_Tx_Descriptors+0x3c8>
    {
      /* Get the next Tx buffer in the list */
      txbuffer = (struct __ETH_BufferTypeDef *)txbuffer->next;
 800297e:	69fb      	ldr	r3, [r7, #28]
 8002980:	689b      	ldr	r3, [r3, #8]
 8002982:	61fb      	str	r3, [r7, #28]
      /* Set buffer 2 address */
      WRITE_REG(dmatxdesc->DESC1, (uint32_t)txbuffer->buffer);
 8002984:	69fb      	ldr	r3, [r7, #28]
 8002986:	681b      	ldr	r3, [r3, #0]
 8002988:	461a      	mov	r2, r3
 800298a:	6a3b      	ldr	r3, [r7, #32]
 800298c:	605a      	str	r2, [r3, #4]
      /* Set buffer 2 Length */
      MODIFY_REG(dmatxdesc->DESC2, ETH_DMATXNDESCRF_B2L, (txbuffer->len << 16));
 800298e:	6a3b      	ldr	r3, [r7, #32]
 8002990:	689a      	ldr	r2, [r3, #8]
 8002992:	4b3a      	ldr	r3, [pc, #232]	; (8002a7c <ETH_Prepare_Tx_Descriptors+0x4a0>)
 8002994:	4013      	ands	r3, r2
 8002996:	69fa      	ldr	r2, [r7, #28]
 8002998:	6852      	ldr	r2, [r2, #4]
 800299a:	0412      	lsls	r2, r2, #16
 800299c:	431a      	orrs	r2, r3
 800299e:	6a3b      	ldr	r3, [r7, #32]
 80029a0:	609a      	str	r2, [r3, #8]
 80029a2:	e008      	b.n	80029b6 <ETH_Prepare_Tx_Descriptors+0x3da>
    }
    else
    {
      WRITE_REG(dmatxdesc->DESC1, 0x0);
 80029a4:	6a3b      	ldr	r3, [r7, #32]
 80029a6:	2200      	movs	r2, #0
 80029a8:	605a      	str	r2, [r3, #4]
      /* Set buffer 2 Length */
      MODIFY_REG(dmatxdesc->DESC2, ETH_DMATXNDESCRF_B2L, 0x0U);
 80029aa:	6a3b      	ldr	r3, [r7, #32]
 80029ac:	689a      	ldr	r2, [r3, #8]
 80029ae:	4b33      	ldr	r3, [pc, #204]	; (8002a7c <ETH_Prepare_Tx_Descriptors+0x4a0>)
 80029b0:	4013      	ands	r3, r2
 80029b2:	6a3a      	ldr	r2, [r7, #32]
 80029b4:	6093      	str	r3, [r2, #8]
    }

    if(READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_TSO) != 0U)
 80029b6:	68bb      	ldr	r3, [r7, #8]
 80029b8:	681b      	ldr	r3, [r3, #0]
 80029ba:	f003 0310 	and.w	r3, r3, #16
 80029be:	2b00      	cmp	r3, #0
 80029c0:	d00f      	beq.n	80029e2 <ETH_Prepare_Tx_Descriptors+0x406>
    {
      /* Set TCP payload length */
      MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_TPL, pTxConfig->PayloadLen);
 80029c2:	6a3b      	ldr	r3, [r7, #32]
 80029c4:	68da      	ldr	r2, [r3, #12]
 80029c6:	4b2e      	ldr	r3, [pc, #184]	; (8002a80 <ETH_Prepare_Tx_Descriptors+0x4a4>)
 80029c8:	4013      	ands	r3, r2
 80029ca:	68ba      	ldr	r2, [r7, #8]
 80029cc:	69d2      	ldr	r2, [r2, #28]
 80029ce:	431a      	orrs	r2, r3
 80029d0:	6a3b      	ldr	r3, [r7, #32]
 80029d2:	60da      	str	r2, [r3, #12]
      /* Set TCP Segmentation Enabled bit */
      SET_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_TSE);
 80029d4:	6a3b      	ldr	r3, [r7, #32]
 80029d6:	68db      	ldr	r3, [r3, #12]
 80029d8:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 80029dc:	6a3b      	ldr	r3, [r7, #32]
 80029de:	60da      	str	r2, [r3, #12]
 80029e0:	e017      	b.n	8002a12 <ETH_Prepare_Tx_Descriptors+0x436>
    }
    else
    {
      /* Set the packet length */
      MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_FL, pTxConfig->Length);
 80029e2:	6a3b      	ldr	r3, [r7, #32]
 80029e4:	68da      	ldr	r2, [r3, #12]
 80029e6:	4b23      	ldr	r3, [pc, #140]	; (8002a74 <ETH_Prepare_Tx_Descriptors+0x498>)
 80029e8:	4013      	ands	r3, r2
 80029ea:	68ba      	ldr	r2, [r7, #8]
 80029ec:	6852      	ldr	r2, [r2, #4]
 80029ee:	431a      	orrs	r2, r3
 80029f0:	6a3b      	ldr	r3, [r7, #32]
 80029f2:	60da      	str	r2, [r3, #12]

      if(READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_CSUM) != 0U)
 80029f4:	68bb      	ldr	r3, [r7, #8]
 80029f6:	681b      	ldr	r3, [r3, #0]
 80029f8:	f003 0301 	and.w	r3, r3, #1
 80029fc:	2b00      	cmp	r3, #0
 80029fe:	d008      	beq.n	8002a12 <ETH_Prepare_Tx_Descriptors+0x436>
      {
        /* Checksum Insertion Control */
        MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_CIC, pTxConfig->ChecksumCtrl);
 8002a00:	6a3b      	ldr	r3, [r7, #32]
 8002a02:	68db      	ldr	r3, [r3, #12]
 8002a04:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002a08:	68bb      	ldr	r3, [r7, #8]
 8002a0a:	695b      	ldr	r3, [r3, #20]
 8002a0c:	431a      	orrs	r2, r3
 8002a0e:	6a3b      	ldr	r3, [r7, #32]
 8002a10:	60da      	str	r2, [r3, #12]
      }
    }

    /* Set Own bit */
    SET_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_OWN);
 8002a12:	6a3b      	ldr	r3, [r7, #32]
 8002a14:	68db      	ldr	r3, [r3, #12]
 8002a16:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8002a1a:	6a3b      	ldr	r3, [r7, #32]
 8002a1c:	60da      	str	r2, [r3, #12]
    /* Mark it as NORMAL descriptor */
    CLEAR_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_CTXT);
 8002a1e:	6a3b      	ldr	r3, [r7, #32]
 8002a20:	68db      	ldr	r3, [r3, #12]
 8002a22:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 8002a26:	6a3b      	ldr	r3, [r7, #32]
 8002a28:	60da      	str	r2, [r3, #12]
  while (txbuffer->next != NULL)
 8002a2a:	69fb      	ldr	r3, [r7, #28]
 8002a2c:	689b      	ldr	r3, [r3, #8]
 8002a2e:	2b00      	cmp	r3, #0
 8002a30:	f47f af45 	bne.w	80028be <ETH_Prepare_Tx_Descriptors+0x2e2>
  }

  if(ItMode != ((uint32_t)RESET))
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	2b00      	cmp	r3, #0
 8002a38:	d006      	beq.n	8002a48 <ETH_Prepare_Tx_Descriptors+0x46c>
  {
    /* Set Interrupt on completition bit */
    SET_BIT(dmatxdesc->DESC2, ETH_DMATXNDESCRF_IOC);
 8002a3a:	6a3b      	ldr	r3, [r7, #32]
 8002a3c:	689b      	ldr	r3, [r3, #8]
 8002a3e:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8002a42:	6a3b      	ldr	r3, [r7, #32]
 8002a44:	609a      	str	r2, [r3, #8]
 8002a46:	e005      	b.n	8002a54 <ETH_Prepare_Tx_Descriptors+0x478>
  }
  else
  {
    /* Clear Interrupt on completition bit */
    CLEAR_BIT(dmatxdesc->DESC2, ETH_DMATXNDESCRF_IOC);
 8002a48:	6a3b      	ldr	r3, [r7, #32]
 8002a4a:	689b      	ldr	r3, [r3, #8]
 8002a4c:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8002a50:	6a3b      	ldr	r3, [r7, #32]
 8002a52:	609a      	str	r2, [r3, #8]
  }

  /* Mark it as LAST descriptor */
  SET_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_LD);
 8002a54:	6a3b      	ldr	r3, [r7, #32]
 8002a56:	68db      	ldr	r3, [r3, #12]
 8002a58:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8002a5c:	6a3b      	ldr	r3, [r7, #32]
 8002a5e:	60da      	str	r2, [r3, #12]

  dmatxdesclist->CurTxDesc = descidx;
 8002a60:	69bb      	ldr	r3, [r7, #24]
 8002a62:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002a64:	611a      	str	r2, [r3, #16]

  /* Return function status */
  return HAL_ETH_ERROR_NONE;
 8002a66:	2300      	movs	r3, #0
}
 8002a68:	4618      	mov	r0, r3
 8002a6a:	3734      	adds	r7, #52	; 0x34
 8002a6c:	46bd      	mov	sp, r7
 8002a6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a72:	4770      	bx	lr
 8002a74:	ffff8000 	.word	0xffff8000
 8002a78:	ffffc000 	.word	0xffffc000
 8002a7c:	c000ffff 	.word	0xc000ffff
 8002a80:	fffc0000 	.word	0xfffc0000

08002a84 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002a84:	b480      	push	{r7}
 8002a86:	b089      	sub	sp, #36	; 0x24
 8002a88:	af00      	add	r7, sp, #0
 8002a8a:	6078      	str	r0, [r7, #4]
 8002a8c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8002a8e:	2300      	movs	r3, #0
 8002a90:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8002a92:	4b89      	ldr	r3, [pc, #548]	; (8002cb8 <HAL_GPIO_Init+0x234>)
 8002a94:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8002a96:	e194      	b.n	8002dc2 <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8002a98:	683b      	ldr	r3, [r7, #0]
 8002a9a:	681a      	ldr	r2, [r3, #0]
 8002a9c:	2101      	movs	r1, #1
 8002a9e:	69fb      	ldr	r3, [r7, #28]
 8002aa0:	fa01 f303 	lsl.w	r3, r1, r3
 8002aa4:	4013      	ands	r3, r2
 8002aa6:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8002aa8:	693b      	ldr	r3, [r7, #16]
 8002aaa:	2b00      	cmp	r3, #0
 8002aac:	f000 8186 	beq.w	8002dbc <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002ab0:	683b      	ldr	r3, [r7, #0]
 8002ab2:	685b      	ldr	r3, [r3, #4]
 8002ab4:	2b02      	cmp	r3, #2
 8002ab6:	d003      	beq.n	8002ac0 <HAL_GPIO_Init+0x3c>
 8002ab8:	683b      	ldr	r3, [r7, #0]
 8002aba:	685b      	ldr	r3, [r3, #4]
 8002abc:	2b12      	cmp	r3, #18
 8002abe:	d123      	bne.n	8002b08 <HAL_GPIO_Init+0x84>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002ac0:	69fb      	ldr	r3, [r7, #28]
 8002ac2:	08da      	lsrs	r2, r3, #3
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	3208      	adds	r2, #8
 8002ac8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002acc:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8002ace:	69fb      	ldr	r3, [r7, #28]
 8002ad0:	f003 0307 	and.w	r3, r3, #7
 8002ad4:	009b      	lsls	r3, r3, #2
 8002ad6:	220f      	movs	r2, #15
 8002ad8:	fa02 f303 	lsl.w	r3, r2, r3
 8002adc:	43db      	mvns	r3, r3
 8002ade:	69ba      	ldr	r2, [r7, #24]
 8002ae0:	4013      	ands	r3, r2
 8002ae2:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8002ae4:	683b      	ldr	r3, [r7, #0]
 8002ae6:	691a      	ldr	r2, [r3, #16]
 8002ae8:	69fb      	ldr	r3, [r7, #28]
 8002aea:	f003 0307 	and.w	r3, r3, #7
 8002aee:	009b      	lsls	r3, r3, #2
 8002af0:	fa02 f303 	lsl.w	r3, r2, r3
 8002af4:	69ba      	ldr	r2, [r7, #24]
 8002af6:	4313      	orrs	r3, r2
 8002af8:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002afa:	69fb      	ldr	r3, [r7, #28]
 8002afc:	08da      	lsrs	r2, r3, #3
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	3208      	adds	r2, #8
 8002b02:	69b9      	ldr	r1, [r7, #24]
 8002b04:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	681b      	ldr	r3, [r3, #0]
 8002b0c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8002b0e:	69fb      	ldr	r3, [r7, #28]
 8002b10:	005b      	lsls	r3, r3, #1
 8002b12:	2203      	movs	r2, #3
 8002b14:	fa02 f303 	lsl.w	r3, r2, r3
 8002b18:	43db      	mvns	r3, r3
 8002b1a:	69ba      	ldr	r2, [r7, #24]
 8002b1c:	4013      	ands	r3, r2
 8002b1e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002b20:	683b      	ldr	r3, [r7, #0]
 8002b22:	685b      	ldr	r3, [r3, #4]
 8002b24:	f003 0203 	and.w	r2, r3, #3
 8002b28:	69fb      	ldr	r3, [r7, #28]
 8002b2a:	005b      	lsls	r3, r3, #1
 8002b2c:	fa02 f303 	lsl.w	r3, r2, r3
 8002b30:	69ba      	ldr	r2, [r7, #24]
 8002b32:	4313      	orrs	r3, r2
 8002b34:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	69ba      	ldr	r2, [r7, #24]
 8002b3a:	601a      	str	r2, [r3, #0]

      /* In case of Output or Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002b3c:	683b      	ldr	r3, [r7, #0]
 8002b3e:	685b      	ldr	r3, [r3, #4]
 8002b40:	2b01      	cmp	r3, #1
 8002b42:	d00b      	beq.n	8002b5c <HAL_GPIO_Init+0xd8>
 8002b44:	683b      	ldr	r3, [r7, #0]
 8002b46:	685b      	ldr	r3, [r3, #4]
 8002b48:	2b02      	cmp	r3, #2
 8002b4a:	d007      	beq.n	8002b5c <HAL_GPIO_Init+0xd8>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002b4c:	683b      	ldr	r3, [r7, #0]
 8002b4e:	685b      	ldr	r3, [r3, #4]
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002b50:	2b11      	cmp	r3, #17
 8002b52:	d003      	beq.n	8002b5c <HAL_GPIO_Init+0xd8>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002b54:	683b      	ldr	r3, [r7, #0]
 8002b56:	685b      	ldr	r3, [r3, #4]
 8002b58:	2b12      	cmp	r3, #18
 8002b5a:	d130      	bne.n	8002bbe <HAL_GPIO_Init+0x13a>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	689b      	ldr	r3, [r3, #8]
 8002b60:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8002b62:	69fb      	ldr	r3, [r7, #28]
 8002b64:	005b      	lsls	r3, r3, #1
 8002b66:	2203      	movs	r2, #3
 8002b68:	fa02 f303 	lsl.w	r3, r2, r3
 8002b6c:	43db      	mvns	r3, r3
 8002b6e:	69ba      	ldr	r2, [r7, #24]
 8002b70:	4013      	ands	r3, r2
 8002b72:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002b74:	683b      	ldr	r3, [r7, #0]
 8002b76:	68da      	ldr	r2, [r3, #12]
 8002b78:	69fb      	ldr	r3, [r7, #28]
 8002b7a:	005b      	lsls	r3, r3, #1
 8002b7c:	fa02 f303 	lsl.w	r3, r2, r3
 8002b80:	69ba      	ldr	r2, [r7, #24]
 8002b82:	4313      	orrs	r3, r2
 8002b84:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	69ba      	ldr	r2, [r7, #24]
 8002b8a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	685b      	ldr	r3, [r3, #4]
 8002b90:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8002b92:	2201      	movs	r2, #1
 8002b94:	69fb      	ldr	r3, [r7, #28]
 8002b96:	fa02 f303 	lsl.w	r3, r2, r3
 8002b9a:	43db      	mvns	r3, r3
 8002b9c:	69ba      	ldr	r2, [r7, #24]
 8002b9e:	4013      	ands	r3, r2
 8002ba0:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8002ba2:	683b      	ldr	r3, [r7, #0]
 8002ba4:	685b      	ldr	r3, [r3, #4]
 8002ba6:	091b      	lsrs	r3, r3, #4
 8002ba8:	f003 0201 	and.w	r2, r3, #1
 8002bac:	69fb      	ldr	r3, [r7, #28]
 8002bae:	fa02 f303 	lsl.w	r3, r2, r3
 8002bb2:	69ba      	ldr	r2, [r7, #24]
 8002bb4:	4313      	orrs	r3, r2
 8002bb6:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	69ba      	ldr	r2, [r7, #24]
 8002bbc:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	68db      	ldr	r3, [r3, #12]
 8002bc2:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8002bc4:	69fb      	ldr	r3, [r7, #28]
 8002bc6:	005b      	lsls	r3, r3, #1
 8002bc8:	2203      	movs	r2, #3
 8002bca:	fa02 f303 	lsl.w	r3, r2, r3
 8002bce:	43db      	mvns	r3, r3
 8002bd0:	69ba      	ldr	r2, [r7, #24]
 8002bd2:	4013      	ands	r3, r2
 8002bd4:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002bd6:	683b      	ldr	r3, [r7, #0]
 8002bd8:	689a      	ldr	r2, [r3, #8]
 8002bda:	69fb      	ldr	r3, [r7, #28]
 8002bdc:	005b      	lsls	r3, r3, #1
 8002bde:	fa02 f303 	lsl.w	r3, r2, r3
 8002be2:	69ba      	ldr	r2, [r7, #24]
 8002be4:	4313      	orrs	r3, r2
 8002be6:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	69ba      	ldr	r2, [r7, #24]
 8002bec:	60da      	str	r2, [r3, #12]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002bee:	683b      	ldr	r3, [r7, #0]
 8002bf0:	685b      	ldr	r3, [r3, #4]
 8002bf2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002bf6:	2b00      	cmp	r3, #0
 8002bf8:	f000 80e0 	beq.w	8002dbc <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002bfc:	4b2f      	ldr	r3, [pc, #188]	; (8002cbc <HAL_GPIO_Init+0x238>)
 8002bfe:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8002c02:	4a2e      	ldr	r2, [pc, #184]	; (8002cbc <HAL_GPIO_Init+0x238>)
 8002c04:	f043 0302 	orr.w	r3, r3, #2
 8002c08:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8002c0c:	4b2b      	ldr	r3, [pc, #172]	; (8002cbc <HAL_GPIO_Init+0x238>)
 8002c0e:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8002c12:	f003 0302 	and.w	r3, r3, #2
 8002c16:	60fb      	str	r3, [r7, #12]
 8002c18:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002c1a:	4a29      	ldr	r2, [pc, #164]	; (8002cc0 <HAL_GPIO_Init+0x23c>)
 8002c1c:	69fb      	ldr	r3, [r7, #28]
 8002c1e:	089b      	lsrs	r3, r3, #2
 8002c20:	3302      	adds	r3, #2
 8002c22:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002c26:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8002c28:	69fb      	ldr	r3, [r7, #28]
 8002c2a:	f003 0303 	and.w	r3, r3, #3
 8002c2e:	009b      	lsls	r3, r3, #2
 8002c30:	220f      	movs	r2, #15
 8002c32:	fa02 f303 	lsl.w	r3, r2, r3
 8002c36:	43db      	mvns	r3, r3
 8002c38:	69ba      	ldr	r2, [r7, #24]
 8002c3a:	4013      	ands	r3, r2
 8002c3c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	4a20      	ldr	r2, [pc, #128]	; (8002cc4 <HAL_GPIO_Init+0x240>)
 8002c42:	4293      	cmp	r3, r2
 8002c44:	d052      	beq.n	8002cec <HAL_GPIO_Init+0x268>
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	4a1f      	ldr	r2, [pc, #124]	; (8002cc8 <HAL_GPIO_Init+0x244>)
 8002c4a:	4293      	cmp	r3, r2
 8002c4c:	d031      	beq.n	8002cb2 <HAL_GPIO_Init+0x22e>
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	4a1e      	ldr	r2, [pc, #120]	; (8002ccc <HAL_GPIO_Init+0x248>)
 8002c52:	4293      	cmp	r3, r2
 8002c54:	d02b      	beq.n	8002cae <HAL_GPIO_Init+0x22a>
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	4a1d      	ldr	r2, [pc, #116]	; (8002cd0 <HAL_GPIO_Init+0x24c>)
 8002c5a:	4293      	cmp	r3, r2
 8002c5c:	d025      	beq.n	8002caa <HAL_GPIO_Init+0x226>
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	4a1c      	ldr	r2, [pc, #112]	; (8002cd4 <HAL_GPIO_Init+0x250>)
 8002c62:	4293      	cmp	r3, r2
 8002c64:	d01f      	beq.n	8002ca6 <HAL_GPIO_Init+0x222>
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	4a1b      	ldr	r2, [pc, #108]	; (8002cd8 <HAL_GPIO_Init+0x254>)
 8002c6a:	4293      	cmp	r3, r2
 8002c6c:	d019      	beq.n	8002ca2 <HAL_GPIO_Init+0x21e>
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	4a1a      	ldr	r2, [pc, #104]	; (8002cdc <HAL_GPIO_Init+0x258>)
 8002c72:	4293      	cmp	r3, r2
 8002c74:	d013      	beq.n	8002c9e <HAL_GPIO_Init+0x21a>
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	4a19      	ldr	r2, [pc, #100]	; (8002ce0 <HAL_GPIO_Init+0x25c>)
 8002c7a:	4293      	cmp	r3, r2
 8002c7c:	d00d      	beq.n	8002c9a <HAL_GPIO_Init+0x216>
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	4a18      	ldr	r2, [pc, #96]	; (8002ce4 <HAL_GPIO_Init+0x260>)
 8002c82:	4293      	cmp	r3, r2
 8002c84:	d007      	beq.n	8002c96 <HAL_GPIO_Init+0x212>
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	4a17      	ldr	r2, [pc, #92]	; (8002ce8 <HAL_GPIO_Init+0x264>)
 8002c8a:	4293      	cmp	r3, r2
 8002c8c:	d101      	bne.n	8002c92 <HAL_GPIO_Init+0x20e>
 8002c8e:	2309      	movs	r3, #9
 8002c90:	e02d      	b.n	8002cee <HAL_GPIO_Init+0x26a>
 8002c92:	230a      	movs	r3, #10
 8002c94:	e02b      	b.n	8002cee <HAL_GPIO_Init+0x26a>
 8002c96:	2308      	movs	r3, #8
 8002c98:	e029      	b.n	8002cee <HAL_GPIO_Init+0x26a>
 8002c9a:	2307      	movs	r3, #7
 8002c9c:	e027      	b.n	8002cee <HAL_GPIO_Init+0x26a>
 8002c9e:	2306      	movs	r3, #6
 8002ca0:	e025      	b.n	8002cee <HAL_GPIO_Init+0x26a>
 8002ca2:	2305      	movs	r3, #5
 8002ca4:	e023      	b.n	8002cee <HAL_GPIO_Init+0x26a>
 8002ca6:	2304      	movs	r3, #4
 8002ca8:	e021      	b.n	8002cee <HAL_GPIO_Init+0x26a>
 8002caa:	2303      	movs	r3, #3
 8002cac:	e01f      	b.n	8002cee <HAL_GPIO_Init+0x26a>
 8002cae:	2302      	movs	r3, #2
 8002cb0:	e01d      	b.n	8002cee <HAL_GPIO_Init+0x26a>
 8002cb2:	2301      	movs	r3, #1
 8002cb4:	e01b      	b.n	8002cee <HAL_GPIO_Init+0x26a>
 8002cb6:	bf00      	nop
 8002cb8:	58000080 	.word	0x58000080
 8002cbc:	58024400 	.word	0x58024400
 8002cc0:	58000400 	.word	0x58000400
 8002cc4:	58020000 	.word	0x58020000
 8002cc8:	58020400 	.word	0x58020400
 8002ccc:	58020800 	.word	0x58020800
 8002cd0:	58020c00 	.word	0x58020c00
 8002cd4:	58021000 	.word	0x58021000
 8002cd8:	58021400 	.word	0x58021400
 8002cdc:	58021800 	.word	0x58021800
 8002ce0:	58021c00 	.word	0x58021c00
 8002ce4:	58022000 	.word	0x58022000
 8002ce8:	58022400 	.word	0x58022400
 8002cec:	2300      	movs	r3, #0
 8002cee:	69fa      	ldr	r2, [r7, #28]
 8002cf0:	f002 0203 	and.w	r2, r2, #3
 8002cf4:	0092      	lsls	r2, r2, #2
 8002cf6:	4093      	lsls	r3, r2
 8002cf8:	69ba      	ldr	r2, [r7, #24]
 8002cfa:	4313      	orrs	r3, r2
 8002cfc:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002cfe:	4938      	ldr	r1, [pc, #224]	; (8002de0 <HAL_GPIO_Init+0x35c>)
 8002d00:	69fb      	ldr	r3, [r7, #28]
 8002d02:	089b      	lsrs	r3, r3, #2
 8002d04:	3302      	adds	r3, #2
 8002d06:	69ba      	ldr	r2, [r7, #24]
 8002d08:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8002d0c:	697b      	ldr	r3, [r7, #20]
 8002d0e:	681b      	ldr	r3, [r3, #0]
 8002d10:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8002d12:	693b      	ldr	r3, [r7, #16]
 8002d14:	43db      	mvns	r3, r3
 8002d16:	69ba      	ldr	r2, [r7, #24]
 8002d18:	4013      	ands	r3, r2
 8002d1a:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002d1c:	683b      	ldr	r3, [r7, #0]
 8002d1e:	685b      	ldr	r3, [r3, #4]
 8002d20:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002d24:	2b00      	cmp	r3, #0
 8002d26:	d003      	beq.n	8002d30 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8002d28:	69ba      	ldr	r2, [r7, #24]
 8002d2a:	693b      	ldr	r3, [r7, #16]
 8002d2c:	4313      	orrs	r3, r2
 8002d2e:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8002d30:	697b      	ldr	r3, [r7, #20]
 8002d32:	69ba      	ldr	r2, [r7, #24]
 8002d34:	601a      	str	r2, [r3, #0]

        temp = EXTI_CurrentCPU->EMR1;
 8002d36:	697b      	ldr	r3, [r7, #20]
 8002d38:	685b      	ldr	r3, [r3, #4]
 8002d3a:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8002d3c:	693b      	ldr	r3, [r7, #16]
 8002d3e:	43db      	mvns	r3, r3
 8002d40:	69ba      	ldr	r2, [r7, #24]
 8002d42:	4013      	ands	r3, r2
 8002d44:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002d46:	683b      	ldr	r3, [r7, #0]
 8002d48:	685b      	ldr	r3, [r3, #4]
 8002d4a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002d4e:	2b00      	cmp	r3, #0
 8002d50:	d003      	beq.n	8002d5a <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8002d52:	69ba      	ldr	r2, [r7, #24]
 8002d54:	693b      	ldr	r3, [r7, #16]
 8002d56:	4313      	orrs	r3, r2
 8002d58:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8002d5a:	697b      	ldr	r3, [r7, #20]
 8002d5c:	69ba      	ldr	r2, [r7, #24]
 8002d5e:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8002d60:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002d64:	681b      	ldr	r3, [r3, #0]
 8002d66:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8002d68:	693b      	ldr	r3, [r7, #16]
 8002d6a:	43db      	mvns	r3, r3
 8002d6c:	69ba      	ldr	r2, [r7, #24]
 8002d6e:	4013      	ands	r3, r2
 8002d70:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002d72:	683b      	ldr	r3, [r7, #0]
 8002d74:	685b      	ldr	r3, [r3, #4]
 8002d76:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002d7a:	2b00      	cmp	r3, #0
 8002d7c:	d003      	beq.n	8002d86 <HAL_GPIO_Init+0x302>
        {
          temp |= iocurrent;
 8002d7e:	69ba      	ldr	r2, [r7, #24]
 8002d80:	693b      	ldr	r3, [r7, #16]
 8002d82:	4313      	orrs	r3, r2
 8002d84:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8002d86:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002d8a:	69bb      	ldr	r3, [r7, #24]
 8002d8c:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8002d8e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002d92:	685b      	ldr	r3, [r3, #4]
 8002d94:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8002d96:	693b      	ldr	r3, [r7, #16]
 8002d98:	43db      	mvns	r3, r3
 8002d9a:	69ba      	ldr	r2, [r7, #24]
 8002d9c:	4013      	ands	r3, r2
 8002d9e:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002da0:	683b      	ldr	r3, [r7, #0]
 8002da2:	685b      	ldr	r3, [r3, #4]
 8002da4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002da8:	2b00      	cmp	r3, #0
 8002daa:	d003      	beq.n	8002db4 <HAL_GPIO_Init+0x330>
        {
          temp |= iocurrent;
 8002dac:	69ba      	ldr	r2, [r7, #24]
 8002dae:	693b      	ldr	r3, [r7, #16]
 8002db0:	4313      	orrs	r3, r2
 8002db2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8002db4:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002db8:	69bb      	ldr	r3, [r7, #24]
 8002dba:	6053      	str	r3, [r2, #4]
      }
    }

    position++;
 8002dbc:	69fb      	ldr	r3, [r7, #28]
 8002dbe:	3301      	adds	r3, #1
 8002dc0:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8002dc2:	683b      	ldr	r3, [r7, #0]
 8002dc4:	681a      	ldr	r2, [r3, #0]
 8002dc6:	69fb      	ldr	r3, [r7, #28]
 8002dc8:	fa22 f303 	lsr.w	r3, r2, r3
 8002dcc:	2b00      	cmp	r3, #0
 8002dce:	f47f ae63 	bne.w	8002a98 <HAL_GPIO_Init+0x14>
  }
}
 8002dd2:	bf00      	nop
 8002dd4:	3724      	adds	r7, #36	; 0x24
 8002dd6:	46bd      	mov	sp, r7
 8002dd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ddc:	4770      	bx	lr
 8002dde:	bf00      	nop
 8002de0:	58000400 	.word	0x58000400

08002de4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002de4:	b480      	push	{r7}
 8002de6:	b083      	sub	sp, #12
 8002de8:	af00      	add	r7, sp, #0
 8002dea:	6078      	str	r0, [r7, #4]
 8002dec:	460b      	mov	r3, r1
 8002dee:	807b      	strh	r3, [r7, #2]
 8002df0:	4613      	mov	r3, r2
 8002df2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002df4:	787b      	ldrb	r3, [r7, #1]
 8002df6:	2b00      	cmp	r3, #0
 8002df8:	d003      	beq.n	8002e02 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002dfa:	887a      	ldrh	r2, [r7, #2]
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8002e00:	e003      	b.n	8002e0a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8002e02:	887b      	ldrh	r3, [r7, #2]
 8002e04:	041a      	lsls	r2, r3, #16
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	619a      	str	r2, [r3, #24]
}
 8002e0a:	bf00      	nop
 8002e0c:	370c      	adds	r7, #12
 8002e0e:	46bd      	mov	sp, r7
 8002e10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e14:	4770      	bx	lr
	...

08002e18 <HAL_PWREx_ConfigSupply>:
  *            @arg PWR_EXTERNAL_SOURCE_SUPPLY          The LDO regulator is Bypassed.
  *                                                     The Vcore Power Domains are supplied from external source.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply(uint32_t SupplySource)
{
 8002e18:	b580      	push	{r7, lr}
 8002e1a:	b084      	sub	sp, #16
 8002e1c:	af00      	add	r7, sp, #0
 8002e1e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_PWR_SUPPLY(SupplySource));

  if(!__HAL_PWR_GET_FLAG(PWR_FLAG_SCUEN))
 8002e20:	4b18      	ldr	r3, [pc, #96]	; (8002e84 <HAL_PWREx_ConfigSupply+0x6c>)
 8002e22:	68db      	ldr	r3, [r3, #12]
 8002e24:	f003 0304 	and.w	r3, r3, #4
 8002e28:	2b04      	cmp	r3, #4
 8002e2a:	d008      	beq.n	8002e3e <HAL_PWREx_ConfigSupply+0x26>
  {
    if((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8002e2c:	4b15      	ldr	r3, [pc, #84]	; (8002e84 <HAL_PWREx_ConfigSupply+0x6c>)
 8002e2e:	68db      	ldr	r3, [r3, #12]
 8002e30:	f003 0307 	and.w	r3, r3, #7
 8002e34:	687a      	ldr	r2, [r7, #4]
 8002e36:	429a      	cmp	r2, r3
 8002e38:	d001      	beq.n	8002e3e <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new regulator config */
      return HAL_ERROR;
 8002e3a:	2301      	movs	r3, #1
 8002e3c:	e01d      	b.n	8002e7a <HAL_PWREx_ConfigSupply+0x62>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG(PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8002e3e:	4b11      	ldr	r3, [pc, #68]	; (8002e84 <HAL_PWREx_ConfigSupply+0x6c>)
 8002e40:	68db      	ldr	r3, [r3, #12]
 8002e42:	f023 0207 	bic.w	r2, r3, #7
 8002e46:	490f      	ldr	r1, [pc, #60]	; (8002e84 <HAL_PWREx_ConfigSupply+0x6c>)
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	4313      	orrs	r3, r2
 8002e4c:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002e4e:	f7fd fe3f 	bl	8000ad0 <HAL_GetTick>
 8002e52:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ACTVOSRDY))
 8002e54:	e009      	b.n	8002e6a <HAL_PWREx_ConfigSupply+0x52>
  {
    if((HAL_GetTick() - tickstart ) > PWR_FLAG_SETTING_DELAY_US)
 8002e56:	f7fd fe3b 	bl	8000ad0 <HAL_GetTick>
 8002e5a:	4602      	mov	r2, r0
 8002e5c:	68fb      	ldr	r3, [r7, #12]
 8002e5e:	1ad3      	subs	r3, r2, r3
 8002e60:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002e64:	d901      	bls.n	8002e6a <HAL_PWREx_ConfigSupply+0x52>
    {
      return HAL_TIMEOUT;
 8002e66:	2303      	movs	r3, #3
 8002e68:	e007      	b.n	8002e7a <HAL_PWREx_ConfigSupply+0x62>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ACTVOSRDY))
 8002e6a:	4b06      	ldr	r3, [pc, #24]	; (8002e84 <HAL_PWREx_ConfigSupply+0x6c>)
 8002e6c:	685b      	ldr	r3, [r3, #4]
 8002e6e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002e72:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002e76:	d1ee      	bne.n	8002e56 <HAL_PWREx_ConfigSupply+0x3e>
    }
  }

  return HAL_OK;
 8002e78:	2300      	movs	r3, #0
}
 8002e7a:	4618      	mov	r0, r3
 8002e7c:	3710      	adds	r7, #16
 8002e7e:	46bd      	mov	sp, r7
 8002e80:	bd80      	pop	{r7, pc}
 8002e82:	bf00      	nop
 8002e84:	58024800 	.word	0x58024800

08002e88 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002e88:	b580      	push	{r7, lr}
 8002e8a:	b08a      	sub	sp, #40	; 0x28
 8002e8c:	af00      	add	r7, sp, #0
 8002e8e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

    /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	2b00      	cmp	r3, #0
 8002e94:	d101      	bne.n	8002e9a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002e96:	2301      	movs	r3, #1
 8002e98:	e3a4      	b.n	80035e4 <HAL_RCC_OscConfig+0x75c>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	681b      	ldr	r3, [r3, #0]
 8002e9e:	f003 0301 	and.w	r3, r3, #1
 8002ea2:	2b00      	cmp	r3, #0
 8002ea4:	f000 8087 	beq.w	8002fb6 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002ea8:	4b9a      	ldr	r3, [pc, #616]	; (8003114 <HAL_RCC_OscConfig+0x28c>)
 8002eaa:	691b      	ldr	r3, [r3, #16]
 8002eac:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8002eb0:	627b      	str	r3, [r7, #36]	; 0x24
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8002eb2:	4b98      	ldr	r3, [pc, #608]	; (8003114 <HAL_RCC_OscConfig+0x28c>)
 8002eb4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002eb6:	623b      	str	r3, [r7, #32]
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8002eb8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002eba:	2b10      	cmp	r3, #16
 8002ebc:	d007      	beq.n	8002ece <HAL_RCC_OscConfig+0x46>
 8002ebe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ec0:	2b18      	cmp	r3, #24
 8002ec2:	d110      	bne.n	8002ee6 <HAL_RCC_OscConfig+0x5e>
 8002ec4:	6a3b      	ldr	r3, [r7, #32]
 8002ec6:	f003 0303 	and.w	r3, r3, #3
 8002eca:	2b02      	cmp	r3, #2
 8002ecc:	d10b      	bne.n	8002ee6 <HAL_RCC_OscConfig+0x5e>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002ece:	4b91      	ldr	r3, [pc, #580]	; (8003114 <HAL_RCC_OscConfig+0x28c>)
 8002ed0:	681b      	ldr	r3, [r3, #0]
 8002ed2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002ed6:	2b00      	cmp	r3, #0
 8002ed8:	d06c      	beq.n	8002fb4 <HAL_RCC_OscConfig+0x12c>
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	685b      	ldr	r3, [r3, #4]
 8002ede:	2b00      	cmp	r3, #0
 8002ee0:	d168      	bne.n	8002fb4 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8002ee2:	2301      	movs	r3, #1
 8002ee4:	e37e      	b.n	80035e4 <HAL_RCC_OscConfig+0x75c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	685b      	ldr	r3, [r3, #4]
 8002eea:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002eee:	d106      	bne.n	8002efe <HAL_RCC_OscConfig+0x76>
 8002ef0:	4b88      	ldr	r3, [pc, #544]	; (8003114 <HAL_RCC_OscConfig+0x28c>)
 8002ef2:	681b      	ldr	r3, [r3, #0]
 8002ef4:	4a87      	ldr	r2, [pc, #540]	; (8003114 <HAL_RCC_OscConfig+0x28c>)
 8002ef6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002efa:	6013      	str	r3, [r2, #0]
 8002efc:	e02e      	b.n	8002f5c <HAL_RCC_OscConfig+0xd4>
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	685b      	ldr	r3, [r3, #4]
 8002f02:	2b00      	cmp	r3, #0
 8002f04:	d10c      	bne.n	8002f20 <HAL_RCC_OscConfig+0x98>
 8002f06:	4b83      	ldr	r3, [pc, #524]	; (8003114 <HAL_RCC_OscConfig+0x28c>)
 8002f08:	681b      	ldr	r3, [r3, #0]
 8002f0a:	4a82      	ldr	r2, [pc, #520]	; (8003114 <HAL_RCC_OscConfig+0x28c>)
 8002f0c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002f10:	6013      	str	r3, [r2, #0]
 8002f12:	4b80      	ldr	r3, [pc, #512]	; (8003114 <HAL_RCC_OscConfig+0x28c>)
 8002f14:	681b      	ldr	r3, [r3, #0]
 8002f16:	4a7f      	ldr	r2, [pc, #508]	; (8003114 <HAL_RCC_OscConfig+0x28c>)
 8002f18:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002f1c:	6013      	str	r3, [r2, #0]
 8002f1e:	e01d      	b.n	8002f5c <HAL_RCC_OscConfig+0xd4>
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	685b      	ldr	r3, [r3, #4]
 8002f24:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002f28:	d10c      	bne.n	8002f44 <HAL_RCC_OscConfig+0xbc>
 8002f2a:	4b7a      	ldr	r3, [pc, #488]	; (8003114 <HAL_RCC_OscConfig+0x28c>)
 8002f2c:	681b      	ldr	r3, [r3, #0]
 8002f2e:	4a79      	ldr	r2, [pc, #484]	; (8003114 <HAL_RCC_OscConfig+0x28c>)
 8002f30:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002f34:	6013      	str	r3, [r2, #0]
 8002f36:	4b77      	ldr	r3, [pc, #476]	; (8003114 <HAL_RCC_OscConfig+0x28c>)
 8002f38:	681b      	ldr	r3, [r3, #0]
 8002f3a:	4a76      	ldr	r2, [pc, #472]	; (8003114 <HAL_RCC_OscConfig+0x28c>)
 8002f3c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002f40:	6013      	str	r3, [r2, #0]
 8002f42:	e00b      	b.n	8002f5c <HAL_RCC_OscConfig+0xd4>
 8002f44:	4b73      	ldr	r3, [pc, #460]	; (8003114 <HAL_RCC_OscConfig+0x28c>)
 8002f46:	681b      	ldr	r3, [r3, #0]
 8002f48:	4a72      	ldr	r2, [pc, #456]	; (8003114 <HAL_RCC_OscConfig+0x28c>)
 8002f4a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002f4e:	6013      	str	r3, [r2, #0]
 8002f50:	4b70      	ldr	r3, [pc, #448]	; (8003114 <HAL_RCC_OscConfig+0x28c>)
 8002f52:	681b      	ldr	r3, [r3, #0]
 8002f54:	4a6f      	ldr	r2, [pc, #444]	; (8003114 <HAL_RCC_OscConfig+0x28c>)
 8002f56:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002f5a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	685b      	ldr	r3, [r3, #4]
 8002f60:	2b00      	cmp	r3, #0
 8002f62:	d013      	beq.n	8002f8c <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002f64:	f7fd fdb4 	bl	8000ad0 <HAL_GetTick>
 8002f68:	61f8      	str	r0, [r7, #28]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8002f6a:	e008      	b.n	8002f7e <HAL_RCC_OscConfig+0xf6>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002f6c:	f7fd fdb0 	bl	8000ad0 <HAL_GetTick>
 8002f70:	4602      	mov	r2, r0
 8002f72:	69fb      	ldr	r3, [r7, #28]
 8002f74:	1ad3      	subs	r3, r2, r3
 8002f76:	2b64      	cmp	r3, #100	; 0x64
 8002f78:	d901      	bls.n	8002f7e <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8002f7a:	2303      	movs	r3, #3
 8002f7c:	e332      	b.n	80035e4 <HAL_RCC_OscConfig+0x75c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8002f7e:	4b65      	ldr	r3, [pc, #404]	; (8003114 <HAL_RCC_OscConfig+0x28c>)
 8002f80:	681b      	ldr	r3, [r3, #0]
 8002f82:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002f86:	2b00      	cmp	r3, #0
 8002f88:	d0f0      	beq.n	8002f6c <HAL_RCC_OscConfig+0xe4>
 8002f8a:	e014      	b.n	8002fb6 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002f8c:	f7fd fda0 	bl	8000ad0 <HAL_GetTick>
 8002f90:	61f8      	str	r0, [r7, #28]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8002f92:	e008      	b.n	8002fa6 <HAL_RCC_OscConfig+0x11e>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002f94:	f7fd fd9c 	bl	8000ad0 <HAL_GetTick>
 8002f98:	4602      	mov	r2, r0
 8002f9a:	69fb      	ldr	r3, [r7, #28]
 8002f9c:	1ad3      	subs	r3, r2, r3
 8002f9e:	2b64      	cmp	r3, #100	; 0x64
 8002fa0:	d901      	bls.n	8002fa6 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8002fa2:	2303      	movs	r3, #3
 8002fa4:	e31e      	b.n	80035e4 <HAL_RCC_OscConfig+0x75c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8002fa6:	4b5b      	ldr	r3, [pc, #364]	; (8003114 <HAL_RCC_OscConfig+0x28c>)
 8002fa8:	681b      	ldr	r3, [r3, #0]
 8002faa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002fae:	2b00      	cmp	r3, #0
 8002fb0:	d1f0      	bne.n	8002f94 <HAL_RCC_OscConfig+0x10c>
 8002fb2:	e000      	b.n	8002fb6 <HAL_RCC_OscConfig+0x12e>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002fb4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	681b      	ldr	r3, [r3, #0]
 8002fba:	f003 0302 	and.w	r3, r3, #2
 8002fbe:	2b00      	cmp	r3, #0
 8002fc0:	f000 80b0 	beq.w	8003124 <HAL_RCC_OscConfig+0x29c>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002fc4:	4b53      	ldr	r3, [pc, #332]	; (8003114 <HAL_RCC_OscConfig+0x28c>)
 8002fc6:	691b      	ldr	r3, [r3, #16]
 8002fc8:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8002fcc:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8002fce:	4b51      	ldr	r3, [pc, #324]	; (8003114 <HAL_RCC_OscConfig+0x28c>)
 8002fd0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002fd2:	617b      	str	r3, [r7, #20]
    if((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8002fd4:	69bb      	ldr	r3, [r7, #24]
 8002fd6:	2b00      	cmp	r3, #0
 8002fd8:	d007      	beq.n	8002fea <HAL_RCC_OscConfig+0x162>
 8002fda:	69bb      	ldr	r3, [r7, #24]
 8002fdc:	2b18      	cmp	r3, #24
 8002fde:	d149      	bne.n	8003074 <HAL_RCC_OscConfig+0x1ec>
 8002fe0:	697b      	ldr	r3, [r7, #20]
 8002fe2:	f003 0303 	and.w	r3, r3, #3
 8002fe6:	2b00      	cmp	r3, #0
 8002fe8:	d144      	bne.n	8003074 <HAL_RCC_OscConfig+0x1ec>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002fea:	4b4a      	ldr	r3, [pc, #296]	; (8003114 <HAL_RCC_OscConfig+0x28c>)
 8002fec:	681b      	ldr	r3, [r3, #0]
 8002fee:	f003 0304 	and.w	r3, r3, #4
 8002ff2:	2b00      	cmp	r3, #0
 8002ff4:	d005      	beq.n	8003002 <HAL_RCC_OscConfig+0x17a>
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	68db      	ldr	r3, [r3, #12]
 8002ffa:	2b00      	cmp	r3, #0
 8002ffc:	d101      	bne.n	8003002 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8002ffe:	2301      	movs	r3, #1
 8003000:	e2f0      	b.n	80035e4 <HAL_RCC_OscConfig+0x75c>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
      /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8003002:	4b44      	ldr	r3, [pc, #272]	; (8003114 <HAL_RCC_OscConfig+0x28c>)
 8003004:	681b      	ldr	r3, [r3, #0]
 8003006:	f023 0219 	bic.w	r2, r3, #25
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	68db      	ldr	r3, [r3, #12]
 800300e:	4941      	ldr	r1, [pc, #260]	; (8003114 <HAL_RCC_OscConfig+0x28c>)
 8003010:	4313      	orrs	r3, r2
 8003012:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003014:	f7fd fd5c 	bl	8000ad0 <HAL_GetTick>
 8003018:	61f8      	str	r0, [r7, #28]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800301a:	e008      	b.n	800302e <HAL_RCC_OscConfig+0x1a6>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800301c:	f7fd fd58 	bl	8000ad0 <HAL_GetTick>
 8003020:	4602      	mov	r2, r0
 8003022:	69fb      	ldr	r3, [r7, #28]
 8003024:	1ad3      	subs	r3, r2, r3
 8003026:	2b02      	cmp	r3, #2
 8003028:	d901      	bls.n	800302e <HAL_RCC_OscConfig+0x1a6>
          {
            return HAL_TIMEOUT;
 800302a:	2303      	movs	r3, #3
 800302c:	e2da      	b.n	80035e4 <HAL_RCC_OscConfig+0x75c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800302e:	4b39      	ldr	r3, [pc, #228]	; (8003114 <HAL_RCC_OscConfig+0x28c>)
 8003030:	681b      	ldr	r3, [r3, #0]
 8003032:	f003 0304 	and.w	r3, r3, #4
 8003036:	2b00      	cmp	r3, #0
 8003038:	d0f0      	beq.n	800301c <HAL_RCC_OscConfig+0x194>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800303a:	f7fd fd77 	bl	8000b2c <HAL_GetREVID>
 800303e:	4602      	mov	r2, r0
 8003040:	f241 0303 	movw	r3, #4099	; 0x1003
 8003044:	429a      	cmp	r2, r3
 8003046:	d80a      	bhi.n	800305e <HAL_RCC_OscConfig+0x1d6>
 8003048:	4b32      	ldr	r3, [pc, #200]	; (8003114 <HAL_RCC_OscConfig+0x28c>)
 800304a:	685b      	ldr	r3, [r3, #4]
 800304c:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	691b      	ldr	r3, [r3, #16]
 8003054:	031b      	lsls	r3, r3, #12
 8003056:	492f      	ldr	r1, [pc, #188]	; (8003114 <HAL_RCC_OscConfig+0x28c>)
 8003058:	4313      	orrs	r3, r2
 800305a:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800305c:	e062      	b.n	8003124 <HAL_RCC_OscConfig+0x29c>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800305e:	4b2d      	ldr	r3, [pc, #180]	; (8003114 <HAL_RCC_OscConfig+0x28c>)
 8003060:	685b      	ldr	r3, [r3, #4]
 8003062:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	691b      	ldr	r3, [r3, #16]
 800306a:	061b      	lsls	r3, r3, #24
 800306c:	4929      	ldr	r1, [pc, #164]	; (8003114 <HAL_RCC_OscConfig+0x28c>)
 800306e:	4313      	orrs	r3, r2
 8003070:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003072:	e057      	b.n	8003124 <HAL_RCC_OscConfig+0x29c>
    }

    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	68db      	ldr	r3, [r3, #12]
 8003078:	2b00      	cmp	r3, #0
 800307a:	d038      	beq.n	80030ee <HAL_RCC_OscConfig+0x266>
      {
     /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 800307c:	4b25      	ldr	r3, [pc, #148]	; (8003114 <HAL_RCC_OscConfig+0x28c>)
 800307e:	681b      	ldr	r3, [r3, #0]
 8003080:	f023 0219 	bic.w	r2, r3, #25
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	68db      	ldr	r3, [r3, #12]
 8003088:	4922      	ldr	r1, [pc, #136]	; (8003114 <HAL_RCC_OscConfig+0x28c>)
 800308a:	4313      	orrs	r3, r2
 800308c:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800308e:	f7fd fd1f 	bl	8000ad0 <HAL_GetTick>
 8003092:	61f8      	str	r0, [r7, #28]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8003094:	e008      	b.n	80030a8 <HAL_RCC_OscConfig+0x220>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003096:	f7fd fd1b 	bl	8000ad0 <HAL_GetTick>
 800309a:	4602      	mov	r2, r0
 800309c:	69fb      	ldr	r3, [r7, #28]
 800309e:	1ad3      	subs	r3, r2, r3
 80030a0:	2b02      	cmp	r3, #2
 80030a2:	d901      	bls.n	80030a8 <HAL_RCC_OscConfig+0x220>
          {
            return HAL_TIMEOUT;
 80030a4:	2303      	movs	r3, #3
 80030a6:	e29d      	b.n	80035e4 <HAL_RCC_OscConfig+0x75c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80030a8:	4b1a      	ldr	r3, [pc, #104]	; (8003114 <HAL_RCC_OscConfig+0x28c>)
 80030aa:	681b      	ldr	r3, [r3, #0]
 80030ac:	f003 0304 	and.w	r3, r3, #4
 80030b0:	2b00      	cmp	r3, #0
 80030b2:	d0f0      	beq.n	8003096 <HAL_RCC_OscConfig+0x20e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80030b4:	f7fd fd3a 	bl	8000b2c <HAL_GetREVID>
 80030b8:	4602      	mov	r2, r0
 80030ba:	f241 0303 	movw	r3, #4099	; 0x1003
 80030be:	429a      	cmp	r2, r3
 80030c0:	d80a      	bhi.n	80030d8 <HAL_RCC_OscConfig+0x250>
 80030c2:	4b14      	ldr	r3, [pc, #80]	; (8003114 <HAL_RCC_OscConfig+0x28c>)
 80030c4:	685b      	ldr	r3, [r3, #4]
 80030c6:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	691b      	ldr	r3, [r3, #16]
 80030ce:	031b      	lsls	r3, r3, #12
 80030d0:	4910      	ldr	r1, [pc, #64]	; (8003114 <HAL_RCC_OscConfig+0x28c>)
 80030d2:	4313      	orrs	r3, r2
 80030d4:	604b      	str	r3, [r1, #4]
 80030d6:	e025      	b.n	8003124 <HAL_RCC_OscConfig+0x29c>
 80030d8:	4b0e      	ldr	r3, [pc, #56]	; (8003114 <HAL_RCC_OscConfig+0x28c>)
 80030da:	685b      	ldr	r3, [r3, #4]
 80030dc:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	691b      	ldr	r3, [r3, #16]
 80030e4:	061b      	lsls	r3, r3, #24
 80030e6:	490b      	ldr	r1, [pc, #44]	; (8003114 <HAL_RCC_OscConfig+0x28c>)
 80030e8:	4313      	orrs	r3, r2
 80030ea:	604b      	str	r3, [r1, #4]
 80030ec:	e01a      	b.n	8003124 <HAL_RCC_OscConfig+0x29c>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80030ee:	4b09      	ldr	r3, [pc, #36]	; (8003114 <HAL_RCC_OscConfig+0x28c>)
 80030f0:	681b      	ldr	r3, [r3, #0]
 80030f2:	4a08      	ldr	r2, [pc, #32]	; (8003114 <HAL_RCC_OscConfig+0x28c>)
 80030f4:	f023 0301 	bic.w	r3, r3, #1
 80030f8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80030fa:	f7fd fce9 	bl	8000ad0 <HAL_GetTick>
 80030fe:	61f8      	str	r0, [r7, #28]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8003100:	e00a      	b.n	8003118 <HAL_RCC_OscConfig+0x290>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003102:	f7fd fce5 	bl	8000ad0 <HAL_GetTick>
 8003106:	4602      	mov	r2, r0
 8003108:	69fb      	ldr	r3, [r7, #28]
 800310a:	1ad3      	subs	r3, r2, r3
 800310c:	2b02      	cmp	r3, #2
 800310e:	d903      	bls.n	8003118 <HAL_RCC_OscConfig+0x290>
          {
            return HAL_TIMEOUT;
 8003110:	2303      	movs	r3, #3
 8003112:	e267      	b.n	80035e4 <HAL_RCC_OscConfig+0x75c>
 8003114:	58024400 	.word	0x58024400
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8003118:	4ba0      	ldr	r3, [pc, #640]	; (800339c <HAL_RCC_OscConfig+0x514>)
 800311a:	681b      	ldr	r3, [r3, #0]
 800311c:	f003 0304 	and.w	r3, r3, #4
 8003120:	2b00      	cmp	r3, #0
 8003122:	d1ee      	bne.n	8003102 <HAL_RCC_OscConfig+0x27a>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	681b      	ldr	r3, [r3, #0]
 8003128:	f003 0310 	and.w	r3, r3, #16
 800312c:	2b00      	cmp	r3, #0
 800312e:	f000 808f 	beq.w	8003250 <HAL_RCC_OscConfig+0x3c8>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003132:	4b9a      	ldr	r3, [pc, #616]	; (800339c <HAL_RCC_OscConfig+0x514>)
 8003134:	691b      	ldr	r3, [r3, #16]
 8003136:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800313a:	613b      	str	r3, [r7, #16]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800313c:	4b97      	ldr	r3, [pc, #604]	; (800339c <HAL_RCC_OscConfig+0x514>)
 800313e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003140:	60fb      	str	r3, [r7, #12]
    if((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8003142:	693b      	ldr	r3, [r7, #16]
 8003144:	2b08      	cmp	r3, #8
 8003146:	d007      	beq.n	8003158 <HAL_RCC_OscConfig+0x2d0>
 8003148:	693b      	ldr	r3, [r7, #16]
 800314a:	2b18      	cmp	r3, #24
 800314c:	d12d      	bne.n	80031aa <HAL_RCC_OscConfig+0x322>
 800314e:	68fb      	ldr	r3, [r7, #12]
 8003150:	f003 0303 	and.w	r3, r3, #3
 8003154:	2b01      	cmp	r3, #1
 8003156:	d128      	bne.n	80031aa <HAL_RCC_OscConfig+0x322>
    {
      /* When CSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8003158:	4b90      	ldr	r3, [pc, #576]	; (800339c <HAL_RCC_OscConfig+0x514>)
 800315a:	681b      	ldr	r3, [r3, #0]
 800315c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003160:	2b00      	cmp	r3, #0
 8003162:	d005      	beq.n	8003170 <HAL_RCC_OscConfig+0x2e8>
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	69db      	ldr	r3, [r3, #28]
 8003168:	2b80      	cmp	r3, #128	; 0x80
 800316a:	d001      	beq.n	8003170 <HAL_RCC_OscConfig+0x2e8>
      {
        return HAL_ERROR;
 800316c:	2301      	movs	r3, #1
 800316e:	e239      	b.n	80035e4 <HAL_RCC_OscConfig+0x75c>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8003170:	f7fd fcdc 	bl	8000b2c <HAL_GetREVID>
 8003174:	4602      	mov	r2, r0
 8003176:	f241 0303 	movw	r3, #4099	; 0x1003
 800317a:	429a      	cmp	r2, r3
 800317c:	d80a      	bhi.n	8003194 <HAL_RCC_OscConfig+0x30c>
 800317e:	4b87      	ldr	r3, [pc, #540]	; (800339c <HAL_RCC_OscConfig+0x514>)
 8003180:	685b      	ldr	r3, [r3, #4]
 8003182:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	6a1b      	ldr	r3, [r3, #32]
 800318a:	069b      	lsls	r3, r3, #26
 800318c:	4983      	ldr	r1, [pc, #524]	; (800339c <HAL_RCC_OscConfig+0x514>)
 800318e:	4313      	orrs	r3, r2
 8003190:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8003192:	e05d      	b.n	8003250 <HAL_RCC_OscConfig+0x3c8>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8003194:	4b81      	ldr	r3, [pc, #516]	; (800339c <HAL_RCC_OscConfig+0x514>)
 8003196:	68db      	ldr	r3, [r3, #12]
 8003198:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	6a1b      	ldr	r3, [r3, #32]
 80031a0:	061b      	lsls	r3, r3, #24
 80031a2:	497e      	ldr	r1, [pc, #504]	; (800339c <HAL_RCC_OscConfig+0x514>)
 80031a4:	4313      	orrs	r3, r2
 80031a6:	60cb      	str	r3, [r1, #12]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80031a8:	e052      	b.n	8003250 <HAL_RCC_OscConfig+0x3c8>
      }
    }
    else
    {
      /* Check the CSI State */
      if((RCC_OscInitStruct->CSIState)!= RCC_CSI_OFF)
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	69db      	ldr	r3, [r3, #28]
 80031ae:	2b00      	cmp	r3, #0
 80031b0:	d035      	beq.n	800321e <HAL_RCC_OscConfig+0x396>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 80031b2:	4b7a      	ldr	r3, [pc, #488]	; (800339c <HAL_RCC_OscConfig+0x514>)
 80031b4:	681b      	ldr	r3, [r3, #0]
 80031b6:	4a79      	ldr	r2, [pc, #484]	; (800339c <HAL_RCC_OscConfig+0x514>)
 80031b8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80031bc:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80031be:	f7fd fc87 	bl	8000ad0 <HAL_GetTick>
 80031c2:	61f8      	str	r0, [r7, #28]

        /* Wait till CSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80031c4:	e008      	b.n	80031d8 <HAL_RCC_OscConfig+0x350>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 80031c6:	f7fd fc83 	bl	8000ad0 <HAL_GetTick>
 80031ca:	4602      	mov	r2, r0
 80031cc:	69fb      	ldr	r3, [r7, #28]
 80031ce:	1ad3      	subs	r3, r2, r3
 80031d0:	2b02      	cmp	r3, #2
 80031d2:	d901      	bls.n	80031d8 <HAL_RCC_OscConfig+0x350>
          {
            return HAL_TIMEOUT;
 80031d4:	2303      	movs	r3, #3
 80031d6:	e205      	b.n	80035e4 <HAL_RCC_OscConfig+0x75c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80031d8:	4b70      	ldr	r3, [pc, #448]	; (800339c <HAL_RCC_OscConfig+0x514>)
 80031da:	681b      	ldr	r3, [r3, #0]
 80031dc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80031e0:	2b00      	cmp	r3, #0
 80031e2:	d0f0      	beq.n	80031c6 <HAL_RCC_OscConfig+0x33e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80031e4:	f7fd fca2 	bl	8000b2c <HAL_GetREVID>
 80031e8:	4602      	mov	r2, r0
 80031ea:	f241 0303 	movw	r3, #4099	; 0x1003
 80031ee:	429a      	cmp	r2, r3
 80031f0:	d80a      	bhi.n	8003208 <HAL_RCC_OscConfig+0x380>
 80031f2:	4b6a      	ldr	r3, [pc, #424]	; (800339c <HAL_RCC_OscConfig+0x514>)
 80031f4:	685b      	ldr	r3, [r3, #4]
 80031f6:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	6a1b      	ldr	r3, [r3, #32]
 80031fe:	069b      	lsls	r3, r3, #26
 8003200:	4966      	ldr	r1, [pc, #408]	; (800339c <HAL_RCC_OscConfig+0x514>)
 8003202:	4313      	orrs	r3, r2
 8003204:	604b      	str	r3, [r1, #4]
 8003206:	e023      	b.n	8003250 <HAL_RCC_OscConfig+0x3c8>
 8003208:	4b64      	ldr	r3, [pc, #400]	; (800339c <HAL_RCC_OscConfig+0x514>)
 800320a:	68db      	ldr	r3, [r3, #12]
 800320c:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	6a1b      	ldr	r3, [r3, #32]
 8003214:	061b      	lsls	r3, r3, #24
 8003216:	4961      	ldr	r1, [pc, #388]	; (800339c <HAL_RCC_OscConfig+0x514>)
 8003218:	4313      	orrs	r3, r2
 800321a:	60cb      	str	r3, [r1, #12]
 800321c:	e018      	b.n	8003250 <HAL_RCC_OscConfig+0x3c8>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 800321e:	4b5f      	ldr	r3, [pc, #380]	; (800339c <HAL_RCC_OscConfig+0x514>)
 8003220:	681b      	ldr	r3, [r3, #0]
 8003222:	4a5e      	ldr	r2, [pc, #376]	; (800339c <HAL_RCC_OscConfig+0x514>)
 8003224:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003228:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800322a:	f7fd fc51 	bl	8000ad0 <HAL_GetTick>
 800322e:	61f8      	str	r0, [r7, #28]

        /* Wait till CSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8003230:	e008      	b.n	8003244 <HAL_RCC_OscConfig+0x3bc>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 8003232:	f7fd fc4d 	bl	8000ad0 <HAL_GetTick>
 8003236:	4602      	mov	r2, r0
 8003238:	69fb      	ldr	r3, [r7, #28]
 800323a:	1ad3      	subs	r3, r2, r3
 800323c:	2b02      	cmp	r3, #2
 800323e:	d901      	bls.n	8003244 <HAL_RCC_OscConfig+0x3bc>
          {
            return HAL_TIMEOUT;
 8003240:	2303      	movs	r3, #3
 8003242:	e1cf      	b.n	80035e4 <HAL_RCC_OscConfig+0x75c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8003244:	4b55      	ldr	r3, [pc, #340]	; (800339c <HAL_RCC_OscConfig+0x514>)
 8003246:	681b      	ldr	r3, [r3, #0]
 8003248:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800324c:	2b00      	cmp	r3, #0
 800324e:	d1f0      	bne.n	8003232 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	681b      	ldr	r3, [r3, #0]
 8003254:	f003 0308 	and.w	r3, r3, #8
 8003258:	2b00      	cmp	r3, #0
 800325a:	d036      	beq.n	80032ca <HAL_RCC_OscConfig+0x442>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	695b      	ldr	r3, [r3, #20]
 8003260:	2b00      	cmp	r3, #0
 8003262:	d019      	beq.n	8003298 <HAL_RCC_OscConfig+0x410>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003264:	4b4d      	ldr	r3, [pc, #308]	; (800339c <HAL_RCC_OscConfig+0x514>)
 8003266:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003268:	4a4c      	ldr	r2, [pc, #304]	; (800339c <HAL_RCC_OscConfig+0x514>)
 800326a:	f043 0301 	orr.w	r3, r3, #1
 800326e:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003270:	f7fd fc2e 	bl	8000ad0 <HAL_GetTick>
 8003274:	61f8      	str	r0, [r7, #28]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8003276:	e008      	b.n	800328a <HAL_RCC_OscConfig+0x402>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003278:	f7fd fc2a 	bl	8000ad0 <HAL_GetTick>
 800327c:	4602      	mov	r2, r0
 800327e:	69fb      	ldr	r3, [r7, #28]
 8003280:	1ad3      	subs	r3, r2, r3
 8003282:	2b02      	cmp	r3, #2
 8003284:	d901      	bls.n	800328a <HAL_RCC_OscConfig+0x402>
        {
          return HAL_TIMEOUT;
 8003286:	2303      	movs	r3, #3
 8003288:	e1ac      	b.n	80035e4 <HAL_RCC_OscConfig+0x75c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800328a:	4b44      	ldr	r3, [pc, #272]	; (800339c <HAL_RCC_OscConfig+0x514>)
 800328c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800328e:	f003 0302 	and.w	r3, r3, #2
 8003292:	2b00      	cmp	r3, #0
 8003294:	d0f0      	beq.n	8003278 <HAL_RCC_OscConfig+0x3f0>
 8003296:	e018      	b.n	80032ca <HAL_RCC_OscConfig+0x442>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003298:	4b40      	ldr	r3, [pc, #256]	; (800339c <HAL_RCC_OscConfig+0x514>)
 800329a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800329c:	4a3f      	ldr	r2, [pc, #252]	; (800339c <HAL_RCC_OscConfig+0x514>)
 800329e:	f023 0301 	bic.w	r3, r3, #1
 80032a2:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80032a4:	f7fd fc14 	bl	8000ad0 <HAL_GetTick>
 80032a8:	61f8      	str	r0, [r7, #28]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80032aa:	e008      	b.n	80032be <HAL_RCC_OscConfig+0x436>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80032ac:	f7fd fc10 	bl	8000ad0 <HAL_GetTick>
 80032b0:	4602      	mov	r2, r0
 80032b2:	69fb      	ldr	r3, [r7, #28]
 80032b4:	1ad3      	subs	r3, r2, r3
 80032b6:	2b02      	cmp	r3, #2
 80032b8:	d901      	bls.n	80032be <HAL_RCC_OscConfig+0x436>
        {
          return HAL_TIMEOUT;
 80032ba:	2303      	movs	r3, #3
 80032bc:	e192      	b.n	80035e4 <HAL_RCC_OscConfig+0x75c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80032be:	4b37      	ldr	r3, [pc, #220]	; (800339c <HAL_RCC_OscConfig+0x514>)
 80032c0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80032c2:	f003 0302 	and.w	r3, r3, #2
 80032c6:	2b00      	cmp	r3, #0
 80032c8:	d1f0      	bne.n	80032ac <HAL_RCC_OscConfig+0x424>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	681b      	ldr	r3, [r3, #0]
 80032ce:	f003 0320 	and.w	r3, r3, #32
 80032d2:	2b00      	cmp	r3, #0
 80032d4:	d036      	beq.n	8003344 <HAL_RCC_OscConfig+0x4bc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if((RCC_OscInitStruct->HSI48State)!= RCC_HSI48_OFF)
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	699b      	ldr	r3, [r3, #24]
 80032da:	2b00      	cmp	r3, #0
 80032dc:	d019      	beq.n	8003312 <HAL_RCC_OscConfig+0x48a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80032de:	4b2f      	ldr	r3, [pc, #188]	; (800339c <HAL_RCC_OscConfig+0x514>)
 80032e0:	681b      	ldr	r3, [r3, #0]
 80032e2:	4a2e      	ldr	r2, [pc, #184]	; (800339c <HAL_RCC_OscConfig+0x514>)
 80032e4:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80032e8:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 80032ea:	f7fd fbf1 	bl	8000ad0 <HAL_GetTick>
 80032ee:	61f8      	str	r0, [r7, #28]

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 80032f0:	e008      	b.n	8003304 <HAL_RCC_OscConfig+0x47c>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 80032f2:	f7fd fbed 	bl	8000ad0 <HAL_GetTick>
 80032f6:	4602      	mov	r2, r0
 80032f8:	69fb      	ldr	r3, [r7, #28]
 80032fa:	1ad3      	subs	r3, r2, r3
 80032fc:	2b02      	cmp	r3, #2
 80032fe:	d901      	bls.n	8003304 <HAL_RCC_OscConfig+0x47c>
        {
          return HAL_TIMEOUT;
 8003300:	2303      	movs	r3, #3
 8003302:	e16f      	b.n	80035e4 <HAL_RCC_OscConfig+0x75c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8003304:	4b25      	ldr	r3, [pc, #148]	; (800339c <HAL_RCC_OscConfig+0x514>)
 8003306:	681b      	ldr	r3, [r3, #0]
 8003308:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800330c:	2b00      	cmp	r3, #0
 800330e:	d0f0      	beq.n	80032f2 <HAL_RCC_OscConfig+0x46a>
 8003310:	e018      	b.n	8003344 <HAL_RCC_OscConfig+0x4bc>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8003312:	4b22      	ldr	r3, [pc, #136]	; (800339c <HAL_RCC_OscConfig+0x514>)
 8003314:	681b      	ldr	r3, [r3, #0]
 8003316:	4a21      	ldr	r2, [pc, #132]	; (800339c <HAL_RCC_OscConfig+0x514>)
 8003318:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800331c:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 800331e:	f7fd fbd7 	bl	8000ad0 <HAL_GetTick>
 8003322:	61f8      	str	r0, [r7, #28]

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8003324:	e008      	b.n	8003338 <HAL_RCC_OscConfig+0x4b0>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 8003326:	f7fd fbd3 	bl	8000ad0 <HAL_GetTick>
 800332a:	4602      	mov	r2, r0
 800332c:	69fb      	ldr	r3, [r7, #28]
 800332e:	1ad3      	subs	r3, r2, r3
 8003330:	2b02      	cmp	r3, #2
 8003332:	d901      	bls.n	8003338 <HAL_RCC_OscConfig+0x4b0>
        {
          return HAL_TIMEOUT;
 8003334:	2303      	movs	r3, #3
 8003336:	e155      	b.n	80035e4 <HAL_RCC_OscConfig+0x75c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8003338:	4b18      	ldr	r3, [pc, #96]	; (800339c <HAL_RCC_OscConfig+0x514>)
 800333a:	681b      	ldr	r3, [r3, #0]
 800333c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003340:	2b00      	cmp	r3, #0
 8003342:	d1f0      	bne.n	8003326 <HAL_RCC_OscConfig+0x49e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	681b      	ldr	r3, [r3, #0]
 8003348:	f003 0304 	and.w	r3, r3, #4
 800334c:	2b00      	cmp	r3, #0
 800334e:	f000 8086 	beq.w	800345e <HAL_RCC_OscConfig+0x5d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8003352:	4b13      	ldr	r3, [pc, #76]	; (80033a0 <HAL_RCC_OscConfig+0x518>)
 8003354:	681b      	ldr	r3, [r3, #0]
 8003356:	4a12      	ldr	r2, [pc, #72]	; (80033a0 <HAL_RCC_OscConfig+0x518>)
 8003358:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800335c:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800335e:	f7fd fbb7 	bl	8000ad0 <HAL_GetTick>
 8003362:	61f8      	str	r0, [r7, #28]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003364:	e008      	b.n	8003378 <HAL_RCC_OscConfig+0x4f0>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8003366:	f7fd fbb3 	bl	8000ad0 <HAL_GetTick>
 800336a:	4602      	mov	r2, r0
 800336c:	69fb      	ldr	r3, [r7, #28]
 800336e:	1ad3      	subs	r3, r2, r3
 8003370:	2b64      	cmp	r3, #100	; 0x64
 8003372:	d901      	bls.n	8003378 <HAL_RCC_OscConfig+0x4f0>
      {
        return HAL_TIMEOUT;
 8003374:	2303      	movs	r3, #3
 8003376:	e135      	b.n	80035e4 <HAL_RCC_OscConfig+0x75c>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003378:	4b09      	ldr	r3, [pc, #36]	; (80033a0 <HAL_RCC_OscConfig+0x518>)
 800337a:	681b      	ldr	r3, [r3, #0]
 800337c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003380:	2b00      	cmp	r3, #0
 8003382:	d0f0      	beq.n	8003366 <HAL_RCC_OscConfig+0x4de>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	689b      	ldr	r3, [r3, #8]
 8003388:	2b01      	cmp	r3, #1
 800338a:	d10b      	bne.n	80033a4 <HAL_RCC_OscConfig+0x51c>
 800338c:	4b03      	ldr	r3, [pc, #12]	; (800339c <HAL_RCC_OscConfig+0x514>)
 800338e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003390:	4a02      	ldr	r2, [pc, #8]	; (800339c <HAL_RCC_OscConfig+0x514>)
 8003392:	f043 0301 	orr.w	r3, r3, #1
 8003396:	6713      	str	r3, [r2, #112]	; 0x70
 8003398:	e032      	b.n	8003400 <HAL_RCC_OscConfig+0x578>
 800339a:	bf00      	nop
 800339c:	58024400 	.word	0x58024400
 80033a0:	58024800 	.word	0x58024800
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	689b      	ldr	r3, [r3, #8]
 80033a8:	2b00      	cmp	r3, #0
 80033aa:	d10c      	bne.n	80033c6 <HAL_RCC_OscConfig+0x53e>
 80033ac:	4b8f      	ldr	r3, [pc, #572]	; (80035ec <HAL_RCC_OscConfig+0x764>)
 80033ae:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80033b0:	4a8e      	ldr	r2, [pc, #568]	; (80035ec <HAL_RCC_OscConfig+0x764>)
 80033b2:	f023 0301 	bic.w	r3, r3, #1
 80033b6:	6713      	str	r3, [r2, #112]	; 0x70
 80033b8:	4b8c      	ldr	r3, [pc, #560]	; (80035ec <HAL_RCC_OscConfig+0x764>)
 80033ba:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80033bc:	4a8b      	ldr	r2, [pc, #556]	; (80035ec <HAL_RCC_OscConfig+0x764>)
 80033be:	f023 0304 	bic.w	r3, r3, #4
 80033c2:	6713      	str	r3, [r2, #112]	; 0x70
 80033c4:	e01c      	b.n	8003400 <HAL_RCC_OscConfig+0x578>
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	689b      	ldr	r3, [r3, #8]
 80033ca:	2b05      	cmp	r3, #5
 80033cc:	d10c      	bne.n	80033e8 <HAL_RCC_OscConfig+0x560>
 80033ce:	4b87      	ldr	r3, [pc, #540]	; (80035ec <HAL_RCC_OscConfig+0x764>)
 80033d0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80033d2:	4a86      	ldr	r2, [pc, #536]	; (80035ec <HAL_RCC_OscConfig+0x764>)
 80033d4:	f043 0304 	orr.w	r3, r3, #4
 80033d8:	6713      	str	r3, [r2, #112]	; 0x70
 80033da:	4b84      	ldr	r3, [pc, #528]	; (80035ec <HAL_RCC_OscConfig+0x764>)
 80033dc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80033de:	4a83      	ldr	r2, [pc, #524]	; (80035ec <HAL_RCC_OscConfig+0x764>)
 80033e0:	f043 0301 	orr.w	r3, r3, #1
 80033e4:	6713      	str	r3, [r2, #112]	; 0x70
 80033e6:	e00b      	b.n	8003400 <HAL_RCC_OscConfig+0x578>
 80033e8:	4b80      	ldr	r3, [pc, #512]	; (80035ec <HAL_RCC_OscConfig+0x764>)
 80033ea:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80033ec:	4a7f      	ldr	r2, [pc, #508]	; (80035ec <HAL_RCC_OscConfig+0x764>)
 80033ee:	f023 0301 	bic.w	r3, r3, #1
 80033f2:	6713      	str	r3, [r2, #112]	; 0x70
 80033f4:	4b7d      	ldr	r3, [pc, #500]	; (80035ec <HAL_RCC_OscConfig+0x764>)
 80033f6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80033f8:	4a7c      	ldr	r2, [pc, #496]	; (80035ec <HAL_RCC_OscConfig+0x764>)
 80033fa:	f023 0304 	bic.w	r3, r3, #4
 80033fe:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	689b      	ldr	r3, [r3, #8]
 8003404:	2b00      	cmp	r3, #0
 8003406:	d015      	beq.n	8003434 <HAL_RCC_OscConfig+0x5ac>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003408:	f7fd fb62 	bl	8000ad0 <HAL_GetTick>
 800340c:	61f8      	str	r0, [r7, #28]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800340e:	e00a      	b.n	8003426 <HAL_RCC_OscConfig+0x59e>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003410:	f7fd fb5e 	bl	8000ad0 <HAL_GetTick>
 8003414:	4602      	mov	r2, r0
 8003416:	69fb      	ldr	r3, [r7, #28]
 8003418:	1ad3      	subs	r3, r2, r3
 800341a:	f241 3288 	movw	r2, #5000	; 0x1388
 800341e:	4293      	cmp	r3, r2
 8003420:	d901      	bls.n	8003426 <HAL_RCC_OscConfig+0x59e>
        {
          return HAL_TIMEOUT;
 8003422:	2303      	movs	r3, #3
 8003424:	e0de      	b.n	80035e4 <HAL_RCC_OscConfig+0x75c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8003426:	4b71      	ldr	r3, [pc, #452]	; (80035ec <HAL_RCC_OscConfig+0x764>)
 8003428:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800342a:	f003 0302 	and.w	r3, r3, #2
 800342e:	2b00      	cmp	r3, #0
 8003430:	d0ee      	beq.n	8003410 <HAL_RCC_OscConfig+0x588>
 8003432:	e014      	b.n	800345e <HAL_RCC_OscConfig+0x5d6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003434:	f7fd fb4c 	bl	8000ad0 <HAL_GetTick>
 8003438:	61f8      	str	r0, [r7, #28]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800343a:	e00a      	b.n	8003452 <HAL_RCC_OscConfig+0x5ca>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800343c:	f7fd fb48 	bl	8000ad0 <HAL_GetTick>
 8003440:	4602      	mov	r2, r0
 8003442:	69fb      	ldr	r3, [r7, #28]
 8003444:	1ad3      	subs	r3, r2, r3
 8003446:	f241 3288 	movw	r2, #5000	; 0x1388
 800344a:	4293      	cmp	r3, r2
 800344c:	d901      	bls.n	8003452 <HAL_RCC_OscConfig+0x5ca>
        {
          return HAL_TIMEOUT;
 800344e:	2303      	movs	r3, #3
 8003450:	e0c8      	b.n	80035e4 <HAL_RCC_OscConfig+0x75c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8003452:	4b66      	ldr	r3, [pc, #408]	; (80035ec <HAL_RCC_OscConfig+0x764>)
 8003454:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003456:	f003 0302 	and.w	r3, r3, #2
 800345a:	2b00      	cmp	r3, #0
 800345c:	d1ee      	bne.n	800343c <HAL_RCC_OscConfig+0x5b4>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003462:	2b00      	cmp	r3, #0
 8003464:	f000 80bd 	beq.w	80035e2 <HAL_RCC_OscConfig+0x75a>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8003468:	4b60      	ldr	r3, [pc, #384]	; (80035ec <HAL_RCC_OscConfig+0x764>)
 800346a:	691b      	ldr	r3, [r3, #16]
 800346c:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8003470:	2b18      	cmp	r3, #24
 8003472:	f000 80b4 	beq.w	80035de <HAL_RCC_OscConfig+0x756>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800347a:	2b02      	cmp	r3, #2
 800347c:	f040 8095 	bne.w	80035aa <HAL_RCC_OscConfig+0x722>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003480:	4b5a      	ldr	r3, [pc, #360]	; (80035ec <HAL_RCC_OscConfig+0x764>)
 8003482:	681b      	ldr	r3, [r3, #0]
 8003484:	4a59      	ldr	r2, [pc, #356]	; (80035ec <HAL_RCC_OscConfig+0x764>)
 8003486:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800348a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800348c:	f7fd fb20 	bl	8000ad0 <HAL_GetTick>
 8003490:	61f8      	str	r0, [r7, #28]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8003492:	e008      	b.n	80034a6 <HAL_RCC_OscConfig+0x61e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003494:	f7fd fb1c 	bl	8000ad0 <HAL_GetTick>
 8003498:	4602      	mov	r2, r0
 800349a:	69fb      	ldr	r3, [r7, #28]
 800349c:	1ad3      	subs	r3, r2, r3
 800349e:	2b02      	cmp	r3, #2
 80034a0:	d901      	bls.n	80034a6 <HAL_RCC_OscConfig+0x61e>
          {
            return HAL_TIMEOUT;
 80034a2:	2303      	movs	r3, #3
 80034a4:	e09e      	b.n	80035e4 <HAL_RCC_OscConfig+0x75c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80034a6:	4b51      	ldr	r3, [pc, #324]	; (80035ec <HAL_RCC_OscConfig+0x764>)
 80034a8:	681b      	ldr	r3, [r3, #0]
 80034aa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80034ae:	2b00      	cmp	r3, #0
 80034b0:	d1f0      	bne.n	8003494 <HAL_RCC_OscConfig+0x60c>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80034b2:	4b4e      	ldr	r3, [pc, #312]	; (80035ec <HAL_RCC_OscConfig+0x764>)
 80034b4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80034b6:	4b4e      	ldr	r3, [pc, #312]	; (80035f0 <HAL_RCC_OscConfig+0x768>)
 80034b8:	4013      	ands	r3, r2
 80034ba:	687a      	ldr	r2, [r7, #4]
 80034bc:	6a91      	ldr	r1, [r2, #40]	; 0x28
 80034be:	687a      	ldr	r2, [r7, #4]
 80034c0:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 80034c2:	0112      	lsls	r2, r2, #4
 80034c4:	430a      	orrs	r2, r1
 80034c6:	4949      	ldr	r1, [pc, #292]	; (80035ec <HAL_RCC_OscConfig+0x764>)
 80034c8:	4313      	orrs	r3, r2
 80034ca:	628b      	str	r3, [r1, #40]	; 0x28
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80034d0:	3b01      	subs	r3, #1
 80034d2:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80034da:	3b01      	subs	r3, #1
 80034dc:	025b      	lsls	r3, r3, #9
 80034de:	b29b      	uxth	r3, r3
 80034e0:	431a      	orrs	r2, r3
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80034e6:	3b01      	subs	r3, #1
 80034e8:	041b      	lsls	r3, r3, #16
 80034ea:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 80034ee:	431a      	orrs	r2, r3
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80034f4:	3b01      	subs	r3, #1
 80034f6:	061b      	lsls	r3, r3, #24
 80034f8:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 80034fc:	493b      	ldr	r1, [pc, #236]	; (80035ec <HAL_RCC_OscConfig+0x764>)
 80034fe:	4313      	orrs	r3, r2
 8003500:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

         /* Disable PLLFRACN . */
         __HAL_RCC_PLLFRACN_DISABLE();
 8003502:	4b3a      	ldr	r3, [pc, #232]	; (80035ec <HAL_RCC_OscConfig+0x764>)
 8003504:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003506:	4a39      	ldr	r2, [pc, #228]	; (80035ec <HAL_RCC_OscConfig+0x764>)
 8003508:	f023 0301 	bic.w	r3, r3, #1
 800350c:	62d3      	str	r3, [r2, #44]	; 0x2c

         /* Configure PLL  PLL1FRACN */
         __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 800350e:	4b37      	ldr	r3, [pc, #220]	; (80035ec <HAL_RCC_OscConfig+0x764>)
 8003510:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003512:	4b38      	ldr	r3, [pc, #224]	; (80035f4 <HAL_RCC_OscConfig+0x76c>)
 8003514:	4013      	ands	r3, r2
 8003516:	687a      	ldr	r2, [r7, #4]
 8003518:	6c92      	ldr	r2, [r2, #72]	; 0x48
 800351a:	00d2      	lsls	r2, r2, #3
 800351c:	4933      	ldr	r1, [pc, #204]	; (80035ec <HAL_RCC_OscConfig+0x764>)
 800351e:	4313      	orrs	r3, r2
 8003520:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8003522:	4b32      	ldr	r3, [pc, #200]	; (80035ec <HAL_RCC_OscConfig+0x764>)
 8003524:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003526:	f023 020c 	bic.w	r2, r3, #12
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800352e:	492f      	ldr	r1, [pc, #188]	; (80035ec <HAL_RCC_OscConfig+0x764>)
 8003530:	4313      	orrs	r3, r2
 8003532:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8003534:	4b2d      	ldr	r3, [pc, #180]	; (80035ec <HAL_RCC_OscConfig+0x764>)
 8003536:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003538:	f023 0202 	bic.w	r2, r3, #2
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003540:	492a      	ldr	r1, [pc, #168]	; (80035ec <HAL_RCC_OscConfig+0x764>)
 8003542:	4313      	orrs	r3, r2
 8003544:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8003546:	4b29      	ldr	r3, [pc, #164]	; (80035ec <HAL_RCC_OscConfig+0x764>)
 8003548:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800354a:	4a28      	ldr	r2, [pc, #160]	; (80035ec <HAL_RCC_OscConfig+0x764>)
 800354c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003550:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003552:	4b26      	ldr	r3, [pc, #152]	; (80035ec <HAL_RCC_OscConfig+0x764>)
 8003554:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003556:	4a25      	ldr	r2, [pc, #148]	; (80035ec <HAL_RCC_OscConfig+0x764>)
 8003558:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800355c:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 800355e:	4b23      	ldr	r3, [pc, #140]	; (80035ec <HAL_RCC_OscConfig+0x764>)
 8003560:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003562:	4a22      	ldr	r2, [pc, #136]	; (80035ec <HAL_RCC_OscConfig+0x764>)
 8003564:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003568:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
         __HAL_RCC_PLLFRACN_ENABLE();
 800356a:	4b20      	ldr	r3, [pc, #128]	; (80035ec <HAL_RCC_OscConfig+0x764>)
 800356c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800356e:	4a1f      	ldr	r2, [pc, #124]	; (80035ec <HAL_RCC_OscConfig+0x764>)
 8003570:	f043 0301 	orr.w	r3, r3, #1
 8003574:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003576:	4b1d      	ldr	r3, [pc, #116]	; (80035ec <HAL_RCC_OscConfig+0x764>)
 8003578:	681b      	ldr	r3, [r3, #0]
 800357a:	4a1c      	ldr	r2, [pc, #112]	; (80035ec <HAL_RCC_OscConfig+0x764>)
 800357c:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003580:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003582:	f7fd faa5 	bl	8000ad0 <HAL_GetTick>
 8003586:	61f8      	str	r0, [r7, #28]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8003588:	e008      	b.n	800359c <HAL_RCC_OscConfig+0x714>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800358a:	f7fd faa1 	bl	8000ad0 <HAL_GetTick>
 800358e:	4602      	mov	r2, r0
 8003590:	69fb      	ldr	r3, [r7, #28]
 8003592:	1ad3      	subs	r3, r2, r3
 8003594:	2b02      	cmp	r3, #2
 8003596:	d901      	bls.n	800359c <HAL_RCC_OscConfig+0x714>
          {
            return HAL_TIMEOUT;
 8003598:	2303      	movs	r3, #3
 800359a:	e023      	b.n	80035e4 <HAL_RCC_OscConfig+0x75c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800359c:	4b13      	ldr	r3, [pc, #76]	; (80035ec <HAL_RCC_OscConfig+0x764>)
 800359e:	681b      	ldr	r3, [r3, #0]
 80035a0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80035a4:	2b00      	cmp	r3, #0
 80035a6:	d0f0      	beq.n	800358a <HAL_RCC_OscConfig+0x702>
 80035a8:	e01b      	b.n	80035e2 <HAL_RCC_OscConfig+0x75a>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80035aa:	4b10      	ldr	r3, [pc, #64]	; (80035ec <HAL_RCC_OscConfig+0x764>)
 80035ac:	681b      	ldr	r3, [r3, #0]
 80035ae:	4a0f      	ldr	r2, [pc, #60]	; (80035ec <HAL_RCC_OscConfig+0x764>)
 80035b0:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80035b4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80035b6:	f7fd fa8b 	bl	8000ad0 <HAL_GetTick>
 80035ba:	61f8      	str	r0, [r7, #28]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80035bc:	e008      	b.n	80035d0 <HAL_RCC_OscConfig+0x748>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80035be:	f7fd fa87 	bl	8000ad0 <HAL_GetTick>
 80035c2:	4602      	mov	r2, r0
 80035c4:	69fb      	ldr	r3, [r7, #28]
 80035c6:	1ad3      	subs	r3, r2, r3
 80035c8:	2b02      	cmp	r3, #2
 80035ca:	d901      	bls.n	80035d0 <HAL_RCC_OscConfig+0x748>
          {
            return HAL_TIMEOUT;
 80035cc:	2303      	movs	r3, #3
 80035ce:	e009      	b.n	80035e4 <HAL_RCC_OscConfig+0x75c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80035d0:	4b06      	ldr	r3, [pc, #24]	; (80035ec <HAL_RCC_OscConfig+0x764>)
 80035d2:	681b      	ldr	r3, [r3, #0]
 80035d4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80035d8:	2b00      	cmp	r3, #0
 80035da:	d1f0      	bne.n	80035be <HAL_RCC_OscConfig+0x736>
 80035dc:	e001      	b.n	80035e2 <HAL_RCC_OscConfig+0x75a>
        }
      }
    }
    else
    {
      return HAL_ERROR;
 80035de:	2301      	movs	r3, #1
 80035e0:	e000      	b.n	80035e4 <HAL_RCC_OscConfig+0x75c>
    }
  }
  return HAL_OK;
 80035e2:	2300      	movs	r3, #0
}
 80035e4:	4618      	mov	r0, r3
 80035e6:	3728      	adds	r7, #40	; 0x28
 80035e8:	46bd      	mov	sp, r7
 80035ea:	bd80      	pop	{r7, pc}
 80035ec:	58024400 	.word	0x58024400
 80035f0:	fffffc0c 	.word	0xfffffc0c
 80035f4:	ffff0007 	.word	0xffff0007

080035f8 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80035f8:	b580      	push	{r7, lr}
 80035fa:	b084      	sub	sp, #16
 80035fc:	af00      	add	r7, sp, #0
 80035fe:	6078      	str	r0, [r7, #4]
 8003600:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;

   /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	2b00      	cmp	r3, #0
 8003606:	d101      	bne.n	800360c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003608:	2301      	movs	r3, #1
 800360a:	e18d      	b.n	8003928 <HAL_RCC_ClockConfig+0x330>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800360c:	4b8a      	ldr	r3, [pc, #552]	; (8003838 <HAL_RCC_ClockConfig+0x240>)
 800360e:	681b      	ldr	r3, [r3, #0]
 8003610:	f003 030f 	and.w	r3, r3, #15
 8003614:	683a      	ldr	r2, [r7, #0]
 8003616:	429a      	cmp	r2, r3
 8003618:	d910      	bls.n	800363c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800361a:	4b87      	ldr	r3, [pc, #540]	; (8003838 <HAL_RCC_ClockConfig+0x240>)
 800361c:	681b      	ldr	r3, [r3, #0]
 800361e:	f023 020f 	bic.w	r2, r3, #15
 8003622:	4985      	ldr	r1, [pc, #532]	; (8003838 <HAL_RCC_ClockConfig+0x240>)
 8003624:	683b      	ldr	r3, [r7, #0]
 8003626:	4313      	orrs	r3, r2
 8003628:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800362a:	4b83      	ldr	r3, [pc, #524]	; (8003838 <HAL_RCC_ClockConfig+0x240>)
 800362c:	681b      	ldr	r3, [r3, #0]
 800362e:	f003 030f 	and.w	r3, r3, #15
 8003632:	683a      	ldr	r2, [r7, #0]
 8003634:	429a      	cmp	r2, r3
 8003636:	d001      	beq.n	800363c <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8003638:	2301      	movs	r3, #1
 800363a:	e175      	b.n	8003928 <HAL_RCC_ClockConfig+0x330>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	681b      	ldr	r3, [r3, #0]
 8003640:	f003 0304 	and.w	r3, r3, #4
 8003644:	2b00      	cmp	r3, #0
 8003646:	d010      	beq.n	800366a <HAL_RCC_ClockConfig+0x72>
  {
    if((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	691a      	ldr	r2, [r3, #16]
 800364c:	4b7b      	ldr	r3, [pc, #492]	; (800383c <HAL_RCC_ClockConfig+0x244>)
 800364e:	699b      	ldr	r3, [r3, #24]
 8003650:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8003654:	429a      	cmp	r2, r3
 8003656:	d908      	bls.n	800366a <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8003658:	4b78      	ldr	r3, [pc, #480]	; (800383c <HAL_RCC_ClockConfig+0x244>)
 800365a:	699b      	ldr	r3, [r3, #24]
 800365c:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	691b      	ldr	r3, [r3, #16]
 8003664:	4975      	ldr	r1, [pc, #468]	; (800383c <HAL_RCC_ClockConfig+0x244>)
 8003666:	4313      	orrs	r3, r2
 8003668:	618b      	str	r3, [r1, #24]
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	681b      	ldr	r3, [r3, #0]
 800366e:	f003 0308 	and.w	r3, r3, #8
 8003672:	2b00      	cmp	r3, #0
 8003674:	d010      	beq.n	8003698 <HAL_RCC_ClockConfig+0xa0>
  {
    if((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	695a      	ldr	r2, [r3, #20]
 800367a:	4b70      	ldr	r3, [pc, #448]	; (800383c <HAL_RCC_ClockConfig+0x244>)
 800367c:	69db      	ldr	r3, [r3, #28]
 800367e:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8003682:	429a      	cmp	r2, r3
 8003684:	d908      	bls.n	8003698 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8003686:	4b6d      	ldr	r3, [pc, #436]	; (800383c <HAL_RCC_ClockConfig+0x244>)
 8003688:	69db      	ldr	r3, [r3, #28]
 800368a:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	695b      	ldr	r3, [r3, #20]
 8003692:	496a      	ldr	r1, [pc, #424]	; (800383c <HAL_RCC_ClockConfig+0x244>)
 8003694:	4313      	orrs	r3, r2
 8003696:	61cb      	str	r3, [r1, #28]
    }
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	681b      	ldr	r3, [r3, #0]
 800369c:	f003 0310 	and.w	r3, r3, #16
 80036a0:	2b00      	cmp	r3, #0
 80036a2:	d010      	beq.n	80036c6 <HAL_RCC_ClockConfig+0xce>
  {
    if((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	699a      	ldr	r2, [r3, #24]
 80036a8:	4b64      	ldr	r3, [pc, #400]	; (800383c <HAL_RCC_ClockConfig+0x244>)
 80036aa:	69db      	ldr	r3, [r3, #28]
 80036ac:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80036b0:	429a      	cmp	r2, r3
 80036b2:	d908      	bls.n	80036c6 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 80036b4:	4b61      	ldr	r3, [pc, #388]	; (800383c <HAL_RCC_ClockConfig+0x244>)
 80036b6:	69db      	ldr	r3, [r3, #28]
 80036b8:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	699b      	ldr	r3, [r3, #24]
 80036c0:	495e      	ldr	r1, [pc, #376]	; (800383c <HAL_RCC_ClockConfig+0x244>)
 80036c2:	4313      	orrs	r3, r2
 80036c4:	61cb      	str	r3, [r1, #28]
    }
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	681b      	ldr	r3, [r3, #0]
 80036ca:	f003 0320 	and.w	r3, r3, #32
 80036ce:	2b00      	cmp	r3, #0
 80036d0:	d010      	beq.n	80036f4 <HAL_RCC_ClockConfig+0xfc>
  {
    if((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	69da      	ldr	r2, [r3, #28]
 80036d6:	4b59      	ldr	r3, [pc, #356]	; (800383c <HAL_RCC_ClockConfig+0x244>)
 80036d8:	6a1b      	ldr	r3, [r3, #32]
 80036da:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80036de:	429a      	cmp	r2, r3
 80036e0:	d908      	bls.n	80036f4 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 80036e2:	4b56      	ldr	r3, [pc, #344]	; (800383c <HAL_RCC_ClockConfig+0x244>)
 80036e4:	6a1b      	ldr	r3, [r3, #32]
 80036e6:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	69db      	ldr	r3, [r3, #28]
 80036ee:	4953      	ldr	r1, [pc, #332]	; (800383c <HAL_RCC_ClockConfig+0x244>)
 80036f0:	4313      	orrs	r3, r2
 80036f2:	620b      	str	r3, [r1, #32]
    }
  }

   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	681b      	ldr	r3, [r3, #0]
 80036f8:	f003 0302 	and.w	r3, r3, #2
 80036fc:	2b00      	cmp	r3, #0
 80036fe:	d010      	beq.n	8003722 <HAL_RCC_ClockConfig+0x12a>
  {
    if((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	68da      	ldr	r2, [r3, #12]
 8003704:	4b4d      	ldr	r3, [pc, #308]	; (800383c <HAL_RCC_ClockConfig+0x244>)
 8003706:	699b      	ldr	r3, [r3, #24]
 8003708:	f003 030f 	and.w	r3, r3, #15
 800370c:	429a      	cmp	r2, r3
 800370e:	d908      	bls.n	8003722 <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003710:	4b4a      	ldr	r3, [pc, #296]	; (800383c <HAL_RCC_ClockConfig+0x244>)
 8003712:	699b      	ldr	r3, [r3, #24]
 8003714:	f023 020f 	bic.w	r2, r3, #15
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	68db      	ldr	r3, [r3, #12]
 800371c:	4947      	ldr	r1, [pc, #284]	; (800383c <HAL_RCC_ClockConfig+0x244>)
 800371e:	4313      	orrs	r3, r2
 8003720:	618b      	str	r3, [r1, #24]
    }
  }

    /*------------------------- SYSCLK Configuration -------------------------*/
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	681b      	ldr	r3, [r3, #0]
 8003726:	f003 0301 	and.w	r3, r3, #1
 800372a:	2b00      	cmp	r3, #0
 800372c:	d055      	beq.n	80037da <HAL_RCC_ClockConfig+0x1e2>
    {
      assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
      assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 800372e:	4b43      	ldr	r3, [pc, #268]	; (800383c <HAL_RCC_ClockConfig+0x244>)
 8003730:	699b      	ldr	r3, [r3, #24]
 8003732:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	689b      	ldr	r3, [r3, #8]
 800373a:	4940      	ldr	r1, [pc, #256]	; (800383c <HAL_RCC_ClockConfig+0x244>)
 800373c:	4313      	orrs	r3, r2
 800373e:	618b      	str	r3, [r1, #24]
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	685b      	ldr	r3, [r3, #4]
 8003744:	2b02      	cmp	r3, #2
 8003746:	d107      	bne.n	8003758 <HAL_RCC_ClockConfig+0x160>
      {
        /* Check the HSE ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8003748:	4b3c      	ldr	r3, [pc, #240]	; (800383c <HAL_RCC_ClockConfig+0x244>)
 800374a:	681b      	ldr	r3, [r3, #0]
 800374c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003750:	2b00      	cmp	r3, #0
 8003752:	d121      	bne.n	8003798 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8003754:	2301      	movs	r3, #1
 8003756:	e0e7      	b.n	8003928 <HAL_RCC_ClockConfig+0x330>
        }
      }
      /* PLL is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	685b      	ldr	r3, [r3, #4]
 800375c:	2b03      	cmp	r3, #3
 800375e:	d107      	bne.n	8003770 <HAL_RCC_ClockConfig+0x178>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8003760:	4b36      	ldr	r3, [pc, #216]	; (800383c <HAL_RCC_ClockConfig+0x244>)
 8003762:	681b      	ldr	r3, [r3, #0]
 8003764:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003768:	2b00      	cmp	r3, #0
 800376a:	d115      	bne.n	8003798 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 800376c:	2301      	movs	r3, #1
 800376e:	e0db      	b.n	8003928 <HAL_RCC_ClockConfig+0x330>
        }
      }
      /* CSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	685b      	ldr	r3, [r3, #4]
 8003774:	2b01      	cmp	r3, #1
 8003776:	d107      	bne.n	8003788 <HAL_RCC_ClockConfig+0x190>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8003778:	4b30      	ldr	r3, [pc, #192]	; (800383c <HAL_RCC_ClockConfig+0x244>)
 800377a:	681b      	ldr	r3, [r3, #0]
 800377c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003780:	2b00      	cmp	r3, #0
 8003782:	d109      	bne.n	8003798 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8003784:	2301      	movs	r3, #1
 8003786:	e0cf      	b.n	8003928 <HAL_RCC_ClockConfig+0x330>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8003788:	4b2c      	ldr	r3, [pc, #176]	; (800383c <HAL_RCC_ClockConfig+0x244>)
 800378a:	681b      	ldr	r3, [r3, #0]
 800378c:	f003 0304 	and.w	r3, r3, #4
 8003790:	2b00      	cmp	r3, #0
 8003792:	d101      	bne.n	8003798 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8003794:	2301      	movs	r3, #1
 8003796:	e0c7      	b.n	8003928 <HAL_RCC_ClockConfig+0x330>
        }
      }
      MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8003798:	4b28      	ldr	r3, [pc, #160]	; (800383c <HAL_RCC_ClockConfig+0x244>)
 800379a:	691b      	ldr	r3, [r3, #16]
 800379c:	f023 0207 	bic.w	r2, r3, #7
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	685b      	ldr	r3, [r3, #4]
 80037a4:	4925      	ldr	r1, [pc, #148]	; (800383c <HAL_RCC_ClockConfig+0x244>)
 80037a6:	4313      	orrs	r3, r2
 80037a8:	610b      	str	r3, [r1, #16]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80037aa:	f7fd f991 	bl	8000ad0 <HAL_GetTick>
 80037ae:	60f8      	str	r0, [r7, #12]

        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80037b0:	e00a      	b.n	80037c8 <HAL_RCC_ClockConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80037b2:	f7fd f98d 	bl	8000ad0 <HAL_GetTick>
 80037b6:	4602      	mov	r2, r0
 80037b8:	68fb      	ldr	r3, [r7, #12]
 80037ba:	1ad3      	subs	r3, r2, r3
 80037bc:	f241 3288 	movw	r2, #5000	; 0x1388
 80037c0:	4293      	cmp	r3, r2
 80037c2:	d901      	bls.n	80037c8 <HAL_RCC_ClockConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 80037c4:	2303      	movs	r3, #3
 80037c6:	e0af      	b.n	8003928 <HAL_RCC_ClockConfig+0x330>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80037c8:	4b1c      	ldr	r3, [pc, #112]	; (800383c <HAL_RCC_ClockConfig+0x244>)
 80037ca:	691b      	ldr	r3, [r3, #16]
 80037cc:	f003 0238 	and.w	r2, r3, #56	; 0x38
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	685b      	ldr	r3, [r3, #4]
 80037d4:	00db      	lsls	r3, r3, #3
 80037d6:	429a      	cmp	r2, r3
 80037d8:	d1eb      	bne.n	80037b2 <HAL_RCC_ClockConfig+0x1ba>

    }

    /* Decreasing the BUS frequency divider */
   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	681b      	ldr	r3, [r3, #0]
 80037de:	f003 0302 	and.w	r3, r3, #2
 80037e2:	2b00      	cmp	r3, #0
 80037e4:	d010      	beq.n	8003808 <HAL_RCC_ClockConfig+0x210>
  {
    if((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	68da      	ldr	r2, [r3, #12]
 80037ea:	4b14      	ldr	r3, [pc, #80]	; (800383c <HAL_RCC_ClockConfig+0x244>)
 80037ec:	699b      	ldr	r3, [r3, #24]
 80037ee:	f003 030f 	and.w	r3, r3, #15
 80037f2:	429a      	cmp	r2, r3
 80037f4:	d208      	bcs.n	8003808 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80037f6:	4b11      	ldr	r3, [pc, #68]	; (800383c <HAL_RCC_ClockConfig+0x244>)
 80037f8:	699b      	ldr	r3, [r3, #24]
 80037fa:	f023 020f 	bic.w	r2, r3, #15
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	68db      	ldr	r3, [r3, #12]
 8003802:	490e      	ldr	r1, [pc, #56]	; (800383c <HAL_RCC_ClockConfig+0x244>)
 8003804:	4313      	orrs	r3, r2
 8003806:	618b      	str	r3, [r1, #24]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003808:	4b0b      	ldr	r3, [pc, #44]	; (8003838 <HAL_RCC_ClockConfig+0x240>)
 800380a:	681b      	ldr	r3, [r3, #0]
 800380c:	f003 030f 	and.w	r3, r3, #15
 8003810:	683a      	ldr	r2, [r7, #0]
 8003812:	429a      	cmp	r2, r3
 8003814:	d214      	bcs.n	8003840 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003816:	4b08      	ldr	r3, [pc, #32]	; (8003838 <HAL_RCC_ClockConfig+0x240>)
 8003818:	681b      	ldr	r3, [r3, #0]
 800381a:	f023 020f 	bic.w	r2, r3, #15
 800381e:	4906      	ldr	r1, [pc, #24]	; (8003838 <HAL_RCC_ClockConfig+0x240>)
 8003820:	683b      	ldr	r3, [r7, #0]
 8003822:	4313      	orrs	r3, r2
 8003824:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003826:	4b04      	ldr	r3, [pc, #16]	; (8003838 <HAL_RCC_ClockConfig+0x240>)
 8003828:	681b      	ldr	r3, [r3, #0]
 800382a:	f003 030f 	and.w	r3, r3, #15
 800382e:	683a      	ldr	r2, [r7, #0]
 8003830:	429a      	cmp	r2, r3
 8003832:	d005      	beq.n	8003840 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8003834:	2301      	movs	r3, #1
 8003836:	e077      	b.n	8003928 <HAL_RCC_ClockConfig+0x330>
 8003838:	52002000 	.word	0x52002000
 800383c:	58024400 	.word	0x58024400
    }
 }

  /*-------------------------- D1PCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	681b      	ldr	r3, [r3, #0]
 8003844:	f003 0304 	and.w	r3, r3, #4
 8003848:	2b00      	cmp	r3, #0
 800384a:	d010      	beq.n	800386e <HAL_RCC_ClockConfig+0x276>
 {
   if((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	691a      	ldr	r2, [r3, #16]
 8003850:	4b37      	ldr	r3, [pc, #220]	; (8003930 <HAL_RCC_ClockConfig+0x338>)
 8003852:	699b      	ldr	r3, [r3, #24]
 8003854:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8003858:	429a      	cmp	r2, r3
 800385a:	d208      	bcs.n	800386e <HAL_RCC_ClockConfig+0x276>
   {
     assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
     MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 800385c:	4b34      	ldr	r3, [pc, #208]	; (8003930 <HAL_RCC_ClockConfig+0x338>)
 800385e:	699b      	ldr	r3, [r3, #24]
 8003860:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	691b      	ldr	r3, [r3, #16]
 8003868:	4931      	ldr	r1, [pc, #196]	; (8003930 <HAL_RCC_ClockConfig+0x338>)
 800386a:	4313      	orrs	r3, r2
 800386c:	618b      	str	r3, [r1, #24]
   }
 }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	681b      	ldr	r3, [r3, #0]
 8003872:	f003 0308 	and.w	r3, r3, #8
 8003876:	2b00      	cmp	r3, #0
 8003878:	d010      	beq.n	800389c <HAL_RCC_ClockConfig+0x2a4>
 {
   if((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	695a      	ldr	r2, [r3, #20]
 800387e:	4b2c      	ldr	r3, [pc, #176]	; (8003930 <HAL_RCC_ClockConfig+0x338>)
 8003880:	69db      	ldr	r3, [r3, #28]
 8003882:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8003886:	429a      	cmp	r2, r3
 8003888:	d208      	bcs.n	800389c <HAL_RCC_ClockConfig+0x2a4>
   {
     assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800388a:	4b29      	ldr	r3, [pc, #164]	; (8003930 <HAL_RCC_ClockConfig+0x338>)
 800388c:	69db      	ldr	r3, [r3, #28]
 800388e:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	695b      	ldr	r3, [r3, #20]
 8003896:	4926      	ldr	r1, [pc, #152]	; (8003930 <HAL_RCC_ClockConfig+0x338>)
 8003898:	4313      	orrs	r3, r2
 800389a:	61cb      	str	r3, [r1, #28]
   }
 }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	681b      	ldr	r3, [r3, #0]
 80038a0:	f003 0310 	and.w	r3, r3, #16
 80038a4:	2b00      	cmp	r3, #0
 80038a6:	d010      	beq.n	80038ca <HAL_RCC_ClockConfig+0x2d2>
 {
   if((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	699a      	ldr	r2, [r3, #24]
 80038ac:	4b20      	ldr	r3, [pc, #128]	; (8003930 <HAL_RCC_ClockConfig+0x338>)
 80038ae:	69db      	ldr	r3, [r3, #28]
 80038b0:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80038b4:	429a      	cmp	r2, r3
 80038b6:	d208      	bcs.n	80038ca <HAL_RCC_ClockConfig+0x2d2>
   {
     assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 80038b8:	4b1d      	ldr	r3, [pc, #116]	; (8003930 <HAL_RCC_ClockConfig+0x338>)
 80038ba:	69db      	ldr	r3, [r3, #28]
 80038bc:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	699b      	ldr	r3, [r3, #24]
 80038c4:	491a      	ldr	r1, [pc, #104]	; (8003930 <HAL_RCC_ClockConfig+0x338>)
 80038c6:	4313      	orrs	r3, r2
 80038c8:	61cb      	str	r3, [r1, #28]
   }
 }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	681b      	ldr	r3, [r3, #0]
 80038ce:	f003 0320 	and.w	r3, r3, #32
 80038d2:	2b00      	cmp	r3, #0
 80038d4:	d010      	beq.n	80038f8 <HAL_RCC_ClockConfig+0x300>
 {
   if((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	69da      	ldr	r2, [r3, #28]
 80038da:	4b15      	ldr	r3, [pc, #84]	; (8003930 <HAL_RCC_ClockConfig+0x338>)
 80038dc:	6a1b      	ldr	r3, [r3, #32]
 80038de:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80038e2:	429a      	cmp	r2, r3
 80038e4:	d208      	bcs.n	80038f8 <HAL_RCC_ClockConfig+0x300>
   {
     assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
     MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 80038e6:	4b12      	ldr	r3, [pc, #72]	; (8003930 <HAL_RCC_ClockConfig+0x338>)
 80038e8:	6a1b      	ldr	r3, [r3, #32]
 80038ea:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	69db      	ldr	r3, [r3, #28]
 80038f2:	490f      	ldr	r1, [pc, #60]	; (8003930 <HAL_RCC_ClockConfig+0x338>)
 80038f4:	4313      	orrs	r3, r2
 80038f6:	620b      	str	r3, [r1, #32]
   }
 }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 80038f8:	f000 f822 	bl	8003940 <HAL_RCC_GetSysClockFreq>
 80038fc:	4601      	mov	r1, r0
 80038fe:	4b0c      	ldr	r3, [pc, #48]	; (8003930 <HAL_RCC_ClockConfig+0x338>)
 8003900:	699b      	ldr	r3, [r3, #24]
 8003902:	0a1b      	lsrs	r3, r3, #8
 8003904:	f003 030f 	and.w	r3, r3, #15
 8003908:	4a0a      	ldr	r2, [pc, #40]	; (8003934 <HAL_RCC_ClockConfig+0x33c>)
 800390a:	5cd3      	ldrb	r3, [r2, r3]
 800390c:	f003 031f 	and.w	r3, r3, #31
 8003910:	fa21 f303 	lsr.w	r3, r1, r3
 8003914:	4a08      	ldr	r2, [pc, #32]	; (8003938 <HAL_RCC_ClockConfig+0x340>)
 8003916:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick (uwTickPrio);
 8003918:	4b08      	ldr	r3, [pc, #32]	; (800393c <HAL_RCC_ClockConfig+0x344>)
 800391a:	681b      	ldr	r3, [r3, #0]
 800391c:	4618      	mov	r0, r3
 800391e:	f7fd f88d 	bl	8000a3c <HAL_InitTick>
 8003922:	4603      	mov	r3, r0
 8003924:	72fb      	strb	r3, [r7, #11]

  return halstatus;
 8003926:	7afb      	ldrb	r3, [r7, #11]
}
 8003928:	4618      	mov	r0, r3
 800392a:	3710      	adds	r7, #16
 800392c:	46bd      	mov	sp, r7
 800392e:	bd80      	pop	{r7, pc}
 8003930:	58024400 	.word	0x58024400
 8003934:	0801c184 	.word	0x0801c184
 8003938:	2400002c 	.word	0x2400002c
 800393c:	24000000 	.word	0x24000000

08003940 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003940:	b480      	push	{r7}
 8003942:	b089      	sub	sp, #36	; 0x24
 8003944:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003946:	4baf      	ldr	r3, [pc, #700]	; (8003c04 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8003948:	691b      	ldr	r3, [r3, #16]
 800394a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800394e:	2b18      	cmp	r3, #24
 8003950:	f200 814e 	bhi.w	8003bf0 <HAL_RCC_GetSysClockFreq+0x2b0>
 8003954:	a201      	add	r2, pc, #4	; (adr r2, 800395c <HAL_RCC_GetSysClockFreq+0x1c>)
 8003956:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800395a:	bf00      	nop
 800395c:	080039c1 	.word	0x080039c1
 8003960:	08003bf1 	.word	0x08003bf1
 8003964:	08003bf1 	.word	0x08003bf1
 8003968:	08003bf1 	.word	0x08003bf1
 800396c:	08003bf1 	.word	0x08003bf1
 8003970:	08003bf1 	.word	0x08003bf1
 8003974:	08003bf1 	.word	0x08003bf1
 8003978:	08003bf1 	.word	0x08003bf1
 800397c:	080039e7 	.word	0x080039e7
 8003980:	08003bf1 	.word	0x08003bf1
 8003984:	08003bf1 	.word	0x08003bf1
 8003988:	08003bf1 	.word	0x08003bf1
 800398c:	08003bf1 	.word	0x08003bf1
 8003990:	08003bf1 	.word	0x08003bf1
 8003994:	08003bf1 	.word	0x08003bf1
 8003998:	08003bf1 	.word	0x08003bf1
 800399c:	080039ed 	.word	0x080039ed
 80039a0:	08003bf1 	.word	0x08003bf1
 80039a4:	08003bf1 	.word	0x08003bf1
 80039a8:	08003bf1 	.word	0x08003bf1
 80039ac:	08003bf1 	.word	0x08003bf1
 80039b0:	08003bf1 	.word	0x08003bf1
 80039b4:	08003bf1 	.word	0x08003bf1
 80039b8:	08003bf1 	.word	0x08003bf1
 80039bc:	080039f3 	.word	0x080039f3
  {
  case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

   if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80039c0:	4b90      	ldr	r3, [pc, #576]	; (8003c04 <HAL_RCC_GetSysClockFreq+0x2c4>)
 80039c2:	681b      	ldr	r3, [r3, #0]
 80039c4:	f003 0320 	and.w	r3, r3, #32
 80039c8:	2b00      	cmp	r3, #0
 80039ca:	d009      	beq.n	80039e0 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t) (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 80039cc:	4b8d      	ldr	r3, [pc, #564]	; (8003c04 <HAL_RCC_GetSysClockFreq+0x2c4>)
 80039ce:	681b      	ldr	r3, [r3, #0]
 80039d0:	08db      	lsrs	r3, r3, #3
 80039d2:	f003 0303 	and.w	r3, r3, #3
 80039d6:	4a8c      	ldr	r2, [pc, #560]	; (8003c08 <HAL_RCC_GetSysClockFreq+0x2c8>)
 80039d8:	fa22 f303 	lsr.w	r3, r2, r3
 80039dc:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

    break;
 80039de:	e10a      	b.n	8003bf6 <HAL_RCC_GetSysClockFreq+0x2b6>
        sysclockfreq = (uint32_t) HSI_VALUE;
 80039e0:	4b89      	ldr	r3, [pc, #548]	; (8003c08 <HAL_RCC_GetSysClockFreq+0x2c8>)
 80039e2:	61bb      	str	r3, [r7, #24]
    break;
 80039e4:	e107      	b.n	8003bf6 <HAL_RCC_GetSysClockFreq+0x2b6>

  case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
    sysclockfreq = CSI_VALUE;
 80039e6:	4b89      	ldr	r3, [pc, #548]	; (8003c0c <HAL_RCC_GetSysClockFreq+0x2cc>)
 80039e8:	61bb      	str	r3, [r7, #24]
    break;
 80039ea:	e104      	b.n	8003bf6 <HAL_RCC_GetSysClockFreq+0x2b6>

  case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    sysclockfreq = HSE_VALUE;
 80039ec:	4b88      	ldr	r3, [pc, #544]	; (8003c10 <HAL_RCC_GetSysClockFreq+0x2d0>)
 80039ee:	61bb      	str	r3, [r7, #24]
    break;
 80039f0:	e101      	b.n	8003bf6 <HAL_RCC_GetSysClockFreq+0x2b6>
  case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80039f2:	4b84      	ldr	r3, [pc, #528]	; (8003c04 <HAL_RCC_GetSysClockFreq+0x2c4>)
 80039f4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80039f6:	f003 0303 	and.w	r3, r3, #3
 80039fa:	617b      	str	r3, [r7, #20]
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 80039fc:	4b81      	ldr	r3, [pc, #516]	; (8003c04 <HAL_RCC_GetSysClockFreq+0x2c4>)
 80039fe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003a00:	091b      	lsrs	r3, r3, #4
 8003a02:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003a06:	613b      	str	r3, [r7, #16]
    pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN)>>RCC_PLLCFGR_PLL1FRACEN_Pos);
 8003a08:	4b7e      	ldr	r3, [pc, #504]	; (8003c04 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8003a0a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a0c:	f003 0301 	and.w	r3, r3, #1
 8003a10:	60fb      	str	r3, [r7, #12]
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 8003a12:	4b7c      	ldr	r3, [pc, #496]	; (8003c04 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8003a14:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003a16:	08db      	lsrs	r3, r3, #3
 8003a18:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8003a1c:	68fa      	ldr	r2, [r7, #12]
 8003a1e:	fb02 f303 	mul.w	r3, r2, r3
 8003a22:	ee07 3a90 	vmov	s15, r3
 8003a26:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003a2a:	edc7 7a02 	vstr	s15, [r7, #8]

    if (pllm != 0U)
 8003a2e:	693b      	ldr	r3, [r7, #16]
 8003a30:	2b00      	cmp	r3, #0
 8003a32:	f000 80da 	beq.w	8003bea <HAL_RCC_GetSysClockFreq+0x2aa>
    {
      switch (pllsource)
 8003a36:	697b      	ldr	r3, [r7, #20]
 8003a38:	2b01      	cmp	r3, #1
 8003a3a:	d05a      	beq.n	8003af2 <HAL_RCC_GetSysClockFreq+0x1b2>
 8003a3c:	2b01      	cmp	r3, #1
 8003a3e:	d302      	bcc.n	8003a46 <HAL_RCC_GetSysClockFreq+0x106>
 8003a40:	2b02      	cmp	r3, #2
 8003a42:	d078      	beq.n	8003b36 <HAL_RCC_GetSysClockFreq+0x1f6>
 8003a44:	e099      	b.n	8003b7a <HAL_RCC_GetSysClockFreq+0x23a>
      {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

       if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8003a46:	4b6f      	ldr	r3, [pc, #444]	; (8003c04 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8003a48:	681b      	ldr	r3, [r3, #0]
 8003a4a:	f003 0320 	and.w	r3, r3, #32
 8003a4e:	2b00      	cmp	r3, #0
 8003a50:	d02d      	beq.n	8003aae <HAL_RCC_GetSysClockFreq+0x16e>
        {
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8003a52:	4b6c      	ldr	r3, [pc, #432]	; (8003c04 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8003a54:	681b      	ldr	r3, [r3, #0]
 8003a56:	08db      	lsrs	r3, r3, #3
 8003a58:	f003 0303 	and.w	r3, r3, #3
 8003a5c:	4a6a      	ldr	r2, [pc, #424]	; (8003c08 <HAL_RCC_GetSysClockFreq+0x2c8>)
 8003a5e:	fa22 f303 	lsr.w	r3, r2, r3
 8003a62:	607b      	str	r3, [r7, #4]
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	ee07 3a90 	vmov	s15, r3
 8003a6a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003a6e:	693b      	ldr	r3, [r7, #16]
 8003a70:	ee07 3a90 	vmov	s15, r3
 8003a74:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003a78:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003a7c:	4b61      	ldr	r3, [pc, #388]	; (8003c04 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8003a7e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a80:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003a84:	ee07 3a90 	vmov	s15, r3
 8003a88:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003a8c:	ed97 6a02 	vldr	s12, [r7, #8]
 8003a90:	eddf 5a60 	vldr	s11, [pc, #384]	; 8003c14 <HAL_RCC_GetSysClockFreq+0x2d4>
 8003a94:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003a98:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003a9c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003aa0:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003aa4:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003aa8:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
        }
        break;
 8003aac:	e087      	b.n	8003bbe <HAL_RCC_GetSysClockFreq+0x27e>
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8003aae:	693b      	ldr	r3, [r7, #16]
 8003ab0:	ee07 3a90 	vmov	s15, r3
 8003ab4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003ab8:	eddf 6a57 	vldr	s13, [pc, #348]	; 8003c18 <HAL_RCC_GetSysClockFreq+0x2d8>
 8003abc:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003ac0:	4b50      	ldr	r3, [pc, #320]	; (8003c04 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8003ac2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ac4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003ac8:	ee07 3a90 	vmov	s15, r3
 8003acc:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003ad0:	ed97 6a02 	vldr	s12, [r7, #8]
 8003ad4:	eddf 5a4f 	vldr	s11, [pc, #316]	; 8003c14 <HAL_RCC_GetSysClockFreq+0x2d4>
 8003ad8:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003adc:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003ae0:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003ae4:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003ae8:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003aec:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8003af0:	e065      	b.n	8003bbe <HAL_RCC_GetSysClockFreq+0x27e>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8003af2:	693b      	ldr	r3, [r7, #16]
 8003af4:	ee07 3a90 	vmov	s15, r3
 8003af8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003afc:	eddf 6a47 	vldr	s13, [pc, #284]	; 8003c1c <HAL_RCC_GetSysClockFreq+0x2dc>
 8003b00:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003b04:	4b3f      	ldr	r3, [pc, #252]	; (8003c04 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8003b06:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b08:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003b0c:	ee07 3a90 	vmov	s15, r3
 8003b10:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003b14:	ed97 6a02 	vldr	s12, [r7, #8]
 8003b18:	eddf 5a3e 	vldr	s11, [pc, #248]	; 8003c14 <HAL_RCC_GetSysClockFreq+0x2d4>
 8003b1c:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003b20:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003b24:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003b28:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003b2c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003b30:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8003b34:	e043      	b.n	8003bbe <HAL_RCC_GetSysClockFreq+0x27e>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8003b36:	693b      	ldr	r3, [r7, #16]
 8003b38:	ee07 3a90 	vmov	s15, r3
 8003b3c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003b40:	eddf 6a37 	vldr	s13, [pc, #220]	; 8003c20 <HAL_RCC_GetSysClockFreq+0x2e0>
 8003b44:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003b48:	4b2e      	ldr	r3, [pc, #184]	; (8003c04 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8003b4a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b4c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003b50:	ee07 3a90 	vmov	s15, r3
 8003b54:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003b58:	ed97 6a02 	vldr	s12, [r7, #8]
 8003b5c:	eddf 5a2d 	vldr	s11, [pc, #180]	; 8003c14 <HAL_RCC_GetSysClockFreq+0x2d4>
 8003b60:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003b64:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003b68:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003b6c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003b70:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003b74:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8003b78:	e021      	b.n	8003bbe <HAL_RCC_GetSysClockFreq+0x27e>

      default:
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8003b7a:	693b      	ldr	r3, [r7, #16]
 8003b7c:	ee07 3a90 	vmov	s15, r3
 8003b80:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003b84:	eddf 6a25 	vldr	s13, [pc, #148]	; 8003c1c <HAL_RCC_GetSysClockFreq+0x2dc>
 8003b88:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003b8c:	4b1d      	ldr	r3, [pc, #116]	; (8003c04 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8003b8e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b90:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003b94:	ee07 3a90 	vmov	s15, r3
 8003b98:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003b9c:	ed97 6a02 	vldr	s12, [r7, #8]
 8003ba0:	eddf 5a1c 	vldr	s11, [pc, #112]	; 8003c14 <HAL_RCC_GetSysClockFreq+0x2d4>
 8003ba4:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003ba8:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003bac:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003bb0:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003bb4:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003bb8:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8003bbc:	bf00      	nop
      }
      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9) + 1U ) ;
 8003bbe:	4b11      	ldr	r3, [pc, #68]	; (8003c04 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8003bc0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003bc2:	0a5b      	lsrs	r3, r3, #9
 8003bc4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003bc8:	3301      	adds	r3, #1
 8003bca:	603b      	str	r3, [r7, #0]
      sysclockfreq =  (uint32_t)(float_t)(pllvco/(float_t)pllp);
 8003bcc:	683b      	ldr	r3, [r7, #0]
 8003bce:	ee07 3a90 	vmov	s15, r3
 8003bd2:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8003bd6:	edd7 6a07 	vldr	s13, [r7, #28]
 8003bda:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003bde:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003be2:	ee17 3a90 	vmov	r3, s15
 8003be6:	61bb      	str	r3, [r7, #24]
    }
    else
    {
      sysclockfreq = 0U;
    }
    break;
 8003be8:	e005      	b.n	8003bf6 <HAL_RCC_GetSysClockFreq+0x2b6>
      sysclockfreq = 0U;
 8003bea:	2300      	movs	r3, #0
 8003bec:	61bb      	str	r3, [r7, #24]
    break;
 8003bee:	e002      	b.n	8003bf6 <HAL_RCC_GetSysClockFreq+0x2b6>

  default:
    sysclockfreq = CSI_VALUE;
 8003bf0:	4b06      	ldr	r3, [pc, #24]	; (8003c0c <HAL_RCC_GetSysClockFreq+0x2cc>)
 8003bf2:	61bb      	str	r3, [r7, #24]
    break;
 8003bf4:	bf00      	nop
  }

  return sysclockfreq;
 8003bf6:	69bb      	ldr	r3, [r7, #24]
}
 8003bf8:	4618      	mov	r0, r3
 8003bfa:	3724      	adds	r7, #36	; 0x24
 8003bfc:	46bd      	mov	sp, r7
 8003bfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c02:	4770      	bx	lr
 8003c04:	58024400 	.word	0x58024400
 8003c08:	03d09000 	.word	0x03d09000
 8003c0c:	003d0900 	.word	0x003d0900
 8003c10:	017d7840 	.word	0x017d7840
 8003c14:	46000000 	.word	0x46000000
 8003c18:	4c742400 	.word	0x4c742400
 8003c1c:	4a742400 	.word	0x4a742400
 8003c20:	4bbebc20 	.word	0x4bbebc20

08003c24 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003c24:	b580      	push	{r7, lr}
 8003c26:	af00      	add	r7, sp, #0
  SystemD2Clock = (HAL_RCCEx_GetD1SysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8003c28:	f000 f818 	bl	8003c5c <HAL_RCCEx_GetD1SysClockFreq>
 8003c2c:	4601      	mov	r1, r0
 8003c2e:	4b08      	ldr	r3, [pc, #32]	; (8003c50 <HAL_RCC_GetHCLKFreq+0x2c>)
 8003c30:	699b      	ldr	r3, [r3, #24]
 8003c32:	f003 030f 	and.w	r3, r3, #15
 8003c36:	4a07      	ldr	r2, [pc, #28]	; (8003c54 <HAL_RCC_GetHCLKFreq+0x30>)
 8003c38:	5cd3      	ldrb	r3, [r2, r3]
 8003c3a:	f003 031f 	and.w	r3, r3, #31
 8003c3e:	fa21 f303 	lsr.w	r3, r1, r3
 8003c42:	4a05      	ldr	r2, [pc, #20]	; (8003c58 <HAL_RCC_GetHCLKFreq+0x34>)
 8003c44:	6013      	str	r3, [r2, #0]
  return SystemD2Clock;
 8003c46:	4b04      	ldr	r3, [pc, #16]	; (8003c58 <HAL_RCC_GetHCLKFreq+0x34>)
 8003c48:	681b      	ldr	r3, [r3, #0]
}
 8003c4a:	4618      	mov	r0, r3
 8003c4c:	bd80      	pop	{r7, pc}
 8003c4e:	bf00      	nop
 8003c50:	58024400 	.word	0x58024400
 8003c54:	0801c184 	.word	0x0801c184
 8003c58:	24000030 	.word	0x24000030

08003c5c <HAL_RCCEx_GetD1SysClockFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCCEx_GetD1SysClockFreq(void)
{
 8003c5c:	b580      	push	{r7, lr}
 8003c5e:	af00      	add	r7, sp, #0
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8003c60:	f7ff fe6e 	bl	8003940 <HAL_RCC_GetSysClockFreq>
 8003c64:	4601      	mov	r1, r0
 8003c66:	4b08      	ldr	r3, [pc, #32]	; (8003c88 <HAL_RCCEx_GetD1SysClockFreq+0x2c>)
 8003c68:	699b      	ldr	r3, [r3, #24]
 8003c6a:	0a1b      	lsrs	r3, r3, #8
 8003c6c:	f003 030f 	and.w	r3, r3, #15
 8003c70:	4a06      	ldr	r2, [pc, #24]	; (8003c8c <HAL_RCCEx_GetD1SysClockFreq+0x30>)
 8003c72:	5cd3      	ldrb	r3, [r2, r3]
 8003c74:	f003 031f 	and.w	r3, r3, #31
 8003c78:	fa21 f303 	lsr.w	r3, r1, r3
 8003c7c:	4a04      	ldr	r2, [pc, #16]	; (8003c90 <HAL_RCCEx_GetD1SysClockFreq+0x34>)
 8003c7e:	6013      	str	r3, [r2, #0]
  return SystemCoreClock;
 8003c80:	4b03      	ldr	r3, [pc, #12]	; (8003c90 <HAL_RCCEx_GetD1SysClockFreq+0x34>)
 8003c82:	681b      	ldr	r3, [r3, #0]
}
 8003c84:	4618      	mov	r0, r3
 8003c86:	bd80      	pop	{r7, pc}
 8003c88:	58024400 	.word	0x58024400
 8003c8c:	0801c184 	.word	0x0801c184
 8003c90:	2400002c 	.word	0x2400002c

08003c94 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 8003c94:	b480      	push	{r7}
 8003c96:	b085      	sub	sp, #20
 8003c98:	af00      	add	r7, sp, #0
 8003c9a:	4603      	mov	r3, r0
 8003c9c:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 8003c9e:	2300      	movs	r3, #0
 8003ca0:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 8003ca2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8003ca6:	2b84      	cmp	r3, #132	; 0x84
 8003ca8:	d005      	beq.n	8003cb6 <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 8003caa:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8003cae:	68fb      	ldr	r3, [r7, #12]
 8003cb0:	4413      	add	r3, r2
 8003cb2:	3303      	adds	r3, #3
 8003cb4:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 8003cb6:	68fb      	ldr	r3, [r7, #12]
}
 8003cb8:	4618      	mov	r0, r3
 8003cba:	3714      	adds	r7, #20
 8003cbc:	46bd      	mov	sp, r7
 8003cbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cc2:	4770      	bx	lr

08003cc4 <inHandlerMode>:
#endif


/* Determine whether we are in thread mode or handler mode. */
static int inHandlerMode (void)
{
 8003cc4:	b480      	push	{r7}
 8003cc6:	b083      	sub	sp, #12
 8003cc8:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8003cca:	f3ef 8305 	mrs	r3, IPSR
 8003cce:	607b      	str	r3, [r7, #4]
  return(result);
 8003cd0:	687b      	ldr	r3, [r7, #4]
  return __get_IPSR() != 0;
 8003cd2:	2b00      	cmp	r3, #0
 8003cd4:	bf14      	ite	ne
 8003cd6:	2301      	movne	r3, #1
 8003cd8:	2300      	moveq	r3, #0
 8003cda:	b2db      	uxtb	r3, r3
}
 8003cdc:	4618      	mov	r0, r3
 8003cde:	370c      	adds	r7, #12
 8003ce0:	46bd      	mov	sp, r7
 8003ce2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ce6:	4770      	bx	lr

08003ce8 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 8003ce8:	b580      	push	{r7, lr}
 8003cea:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 8003cec:	f001 fba8 	bl	8005440 <vTaskStartScheduler>
  
  return osOK;
 8003cf0:	2300      	movs	r3, #0
}
 8003cf2:	4618      	mov	r0, r3
 8003cf4:	bd80      	pop	{r7, pc}

08003cf6 <osKernelSysTick>:
* @param  None
* @retval None
* @note   MUST REMAIN UNCHANGED: \b osKernelSysTick shall be consistent in every CMSIS-RTOS.
*/
uint32_t osKernelSysTick(void)
{
 8003cf6:	b580      	push	{r7, lr}
 8003cf8:	af00      	add	r7, sp, #0
  if (inHandlerMode()) {
 8003cfa:	f7ff ffe3 	bl	8003cc4 <inHandlerMode>
 8003cfe:	4603      	mov	r3, r0
 8003d00:	2b00      	cmp	r3, #0
 8003d02:	d003      	beq.n	8003d0c <osKernelSysTick+0x16>
    return xTaskGetTickCountFromISR();
 8003d04:	f001 fc9c 	bl	8005640 <xTaskGetTickCountFromISR>
 8003d08:	4603      	mov	r3, r0
 8003d0a:	e002      	b.n	8003d12 <osKernelSysTick+0x1c>
  }
  else {
    return xTaskGetTickCount();
 8003d0c:	f001 fc88 	bl	8005620 <xTaskGetTickCount>
 8003d10:	4603      	mov	r3, r0
  }
}
 8003d12:	4618      	mov	r0, r3
 8003d14:	bd80      	pop	{r7, pc}

08003d16 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 8003d16:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003d18:	b087      	sub	sp, #28
 8003d1a:	af02      	add	r7, sp, #8
 8003d1c:	6078      	str	r0, [r7, #4]
 8003d1e:	6039      	str	r1, [r7, #0]

    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
#else
  if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	685c      	ldr	r4, [r3, #4]
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	681d      	ldr	r5, [r3, #0]
                   thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	691b      	ldr	r3, [r3, #16]
  if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8003d2c:	b29e      	uxth	r6, r3
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8003d34:	4618      	mov	r0, r3
 8003d36:	f7ff ffad 	bl	8003c94 <makeFreeRtosPriority>
 8003d3a:	4602      	mov	r2, r0
 8003d3c:	f107 030c 	add.w	r3, r7, #12
 8003d40:	9301      	str	r3, [sp, #4]
 8003d42:	9200      	str	r2, [sp, #0]
 8003d44:	683b      	ldr	r3, [r7, #0]
 8003d46:	4632      	mov	r2, r6
 8003d48:	4629      	mov	r1, r5
 8003d4a:	4620      	mov	r0, r4
 8003d4c:	f001 fa1a 	bl	8005184 <xTaskCreate>
 8003d50:	4603      	mov	r3, r0
 8003d52:	2b01      	cmp	r3, #1
 8003d54:	d001      	beq.n	8003d5a <osThreadCreate+0x44>
                   &handle) != pdPASS)  {
    return NULL;
 8003d56:	2300      	movs	r3, #0
 8003d58:	e000      	b.n	8003d5c <osThreadCreate+0x46>
  }     
#endif
  
  return handle;
 8003d5a:	68fb      	ldr	r3, [r7, #12]
}
 8003d5c:	4618      	mov	r0, r3
 8003d5e:	3714      	adds	r7, #20
 8003d60:	46bd      	mov	sp, r7
 8003d62:	bdf0      	pop	{r4, r5, r6, r7, pc}

08003d64 <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 8003d64:	b580      	push	{r7, lr}
 8003d66:	b084      	sub	sp, #16
 8003d68:	af00      	add	r7, sp, #0
 8003d6a:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 8003d70:	68fb      	ldr	r3, [r7, #12]
 8003d72:	2b00      	cmp	r3, #0
 8003d74:	d001      	beq.n	8003d7a <osDelay+0x16>
 8003d76:	68fb      	ldr	r3, [r7, #12]
 8003d78:	e000      	b.n	8003d7c <osDelay+0x18>
 8003d7a:	2301      	movs	r3, #1
 8003d7c:	4618      	mov	r0, r3
 8003d7e:	f001 fb2b 	bl	80053d8 <vTaskDelay>
  
  return osOK;
 8003d82:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 8003d84:	4618      	mov	r0, r3
 8003d86:	3710      	adds	r7, #16
 8003d88:	46bd      	mov	sp, r7
 8003d8a:	bd80      	pop	{r7, pc}

08003d8c <osMutexCreate>:
* @param  mutex_def     mutex definition referenced with \ref osMutex.
* @retval  mutex ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osMutexCreate shall be consistent in every CMSIS-RTOS.
*/
osMutexId osMutexCreate (const osMutexDef_t *mutex_def)
{
 8003d8c:	b580      	push	{r7, lr}
 8003d8e:	b082      	sub	sp, #8
 8003d90:	af00      	add	r7, sp, #0
 8003d92:	6078      	str	r0, [r7, #4]
    return xSemaphoreCreateMutex(); 
  }
#elif ( configSUPPORT_STATIC_ALLOCATION == 1 )
  return xSemaphoreCreateMutexStatic( mutex_def->controlblock );
#else  
    return xSemaphoreCreateMutex(); 
 8003d94:	2001      	movs	r0, #1
 8003d96:	f000 fbbd 	bl	8004514 <xQueueCreateMutex>
 8003d9a:	4603      	mov	r3, r0
#endif
#else
  return NULL;
#endif
}
 8003d9c:	4618      	mov	r0, r3
 8003d9e:	3708      	adds	r7, #8
 8003da0:	46bd      	mov	sp, r7
 8003da2:	bd80      	pop	{r7, pc}

08003da4 <osMutexWait>:
* @param millisec      timeout value or 0 in case of no time-out.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMutexWait shall be consistent in every CMSIS-RTOS.
*/
osStatus osMutexWait (osMutexId mutex_id, uint32_t millisec)
{
 8003da4:	b580      	push	{r7, lr}
 8003da6:	b084      	sub	sp, #16
 8003da8:	af00      	add	r7, sp, #0
 8003daa:	6078      	str	r0, [r7, #4]
 8003dac:	6039      	str	r1, [r7, #0]
  TickType_t ticks;
  portBASE_TYPE taskWoken = pdFALSE;  
 8003dae:	2300      	movs	r3, #0
 8003db0:	60bb      	str	r3, [r7, #8]
  
  
  if (mutex_id == NULL) {
 8003db2:	687b      	ldr	r3, [r7, #4]
 8003db4:	2b00      	cmp	r3, #0
 8003db6:	d101      	bne.n	8003dbc <osMutexWait+0x18>
    return osErrorParameter;
 8003db8:	2380      	movs	r3, #128	; 0x80
 8003dba:	e03a      	b.n	8003e32 <osMutexWait+0x8e>
  }
  
  ticks = 0;
 8003dbc:	2300      	movs	r3, #0
 8003dbe:	60fb      	str	r3, [r7, #12]
  if (millisec == osWaitForever) {
 8003dc0:	683b      	ldr	r3, [r7, #0]
 8003dc2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003dc6:	d103      	bne.n	8003dd0 <osMutexWait+0x2c>
    ticks = portMAX_DELAY;
 8003dc8:	f04f 33ff 	mov.w	r3, #4294967295
 8003dcc:	60fb      	str	r3, [r7, #12]
 8003dce:	e009      	b.n	8003de4 <osMutexWait+0x40>
  }
  else if (millisec != 0) {
 8003dd0:	683b      	ldr	r3, [r7, #0]
 8003dd2:	2b00      	cmp	r3, #0
 8003dd4:	d006      	beq.n	8003de4 <osMutexWait+0x40>
    ticks = millisec / portTICK_PERIOD_MS;
 8003dd6:	683b      	ldr	r3, [r7, #0]
 8003dd8:	60fb      	str	r3, [r7, #12]
    if (ticks == 0) {
 8003dda:	68fb      	ldr	r3, [r7, #12]
 8003ddc:	2b00      	cmp	r3, #0
 8003dde:	d101      	bne.n	8003de4 <osMutexWait+0x40>
      ticks = 1;
 8003de0:	2301      	movs	r3, #1
 8003de2:	60fb      	str	r3, [r7, #12]
    }
  }
  
  if (inHandlerMode()) {
 8003de4:	f7ff ff6e 	bl	8003cc4 <inHandlerMode>
 8003de8:	4603      	mov	r3, r0
 8003dea:	2b00      	cmp	r3, #0
 8003dec:	d017      	beq.n	8003e1e <osMutexWait+0x7a>
    if (xSemaphoreTakeFromISR(mutex_id, &taskWoken) != pdTRUE) {
 8003dee:	f107 0308 	add.w	r3, r7, #8
 8003df2:	461a      	mov	r2, r3
 8003df4:	2100      	movs	r1, #0
 8003df6:	6878      	ldr	r0, [r7, #4]
 8003df8:	f000 ffa0 	bl	8004d3c <xQueueReceiveFromISR>
 8003dfc:	4603      	mov	r3, r0
 8003dfe:	2b01      	cmp	r3, #1
 8003e00:	d001      	beq.n	8003e06 <osMutexWait+0x62>
      return osErrorOS;
 8003e02:	23ff      	movs	r3, #255	; 0xff
 8003e04:	e015      	b.n	8003e32 <osMutexWait+0x8e>
    }
	portEND_SWITCHING_ISR(taskWoken);
 8003e06:	68bb      	ldr	r3, [r7, #8]
 8003e08:	2b00      	cmp	r3, #0
 8003e0a:	d011      	beq.n	8003e30 <osMutexWait+0x8c>
 8003e0c:	4b0b      	ldr	r3, [pc, #44]	; (8003e3c <osMutexWait+0x98>)
 8003e0e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003e12:	601a      	str	r2, [r3, #0]
 8003e14:	f3bf 8f4f 	dsb	sy
 8003e18:	f3bf 8f6f 	isb	sy
 8003e1c:	e008      	b.n	8003e30 <osMutexWait+0x8c>
  } 
  else if (xSemaphoreTake(mutex_id, ticks) != pdTRUE) {
 8003e1e:	68f9      	ldr	r1, [r7, #12]
 8003e20:	6878      	ldr	r0, [r7, #4]
 8003e22:	f000 fe83 	bl	8004b2c <xQueueSemaphoreTake>
 8003e26:	4603      	mov	r3, r0
 8003e28:	2b01      	cmp	r3, #1
 8003e2a:	d001      	beq.n	8003e30 <osMutexWait+0x8c>
    return osErrorOS;
 8003e2c:	23ff      	movs	r3, #255	; 0xff
 8003e2e:	e000      	b.n	8003e32 <osMutexWait+0x8e>
  }
  
  return osOK;
 8003e30:	2300      	movs	r3, #0
}
 8003e32:	4618      	mov	r0, r3
 8003e34:	3710      	adds	r7, #16
 8003e36:	46bd      	mov	sp, r7
 8003e38:	bd80      	pop	{r7, pc}
 8003e3a:	bf00      	nop
 8003e3c:	e000ed04 	.word	0xe000ed04

08003e40 <osMutexRelease>:
* @param mutex_id      mutex ID obtained by \ref osMutexCreate.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMutexRelease shall be consistent in every CMSIS-RTOS.
*/
osStatus osMutexRelease (osMutexId mutex_id)
{
 8003e40:	b580      	push	{r7, lr}
 8003e42:	b084      	sub	sp, #16
 8003e44:	af00      	add	r7, sp, #0
 8003e46:	6078      	str	r0, [r7, #4]
  osStatus result = osOK;
 8003e48:	2300      	movs	r3, #0
 8003e4a:	60fb      	str	r3, [r7, #12]
  portBASE_TYPE taskWoken = pdFALSE;
 8003e4c:	2300      	movs	r3, #0
 8003e4e:	60bb      	str	r3, [r7, #8]
  
  if (inHandlerMode()) {
 8003e50:	f7ff ff38 	bl	8003cc4 <inHandlerMode>
 8003e54:	4603      	mov	r3, r0
 8003e56:	2b00      	cmp	r3, #0
 8003e58:	d016      	beq.n	8003e88 <osMutexRelease+0x48>
    if (xSemaphoreGiveFromISR(mutex_id, &taskWoken) != pdTRUE) {
 8003e5a:	f107 0308 	add.w	r3, r7, #8
 8003e5e:	4619      	mov	r1, r3
 8003e60:	6878      	ldr	r0, [r7, #4]
 8003e62:	f000 fcfd 	bl	8004860 <xQueueGiveFromISR>
 8003e66:	4603      	mov	r3, r0
 8003e68:	2b01      	cmp	r3, #1
 8003e6a:	d001      	beq.n	8003e70 <osMutexRelease+0x30>
      return osErrorOS;
 8003e6c:	23ff      	movs	r3, #255	; 0xff
 8003e6e:	e017      	b.n	8003ea0 <osMutexRelease+0x60>
    }
    portEND_SWITCHING_ISR(taskWoken);
 8003e70:	68bb      	ldr	r3, [r7, #8]
 8003e72:	2b00      	cmp	r3, #0
 8003e74:	d013      	beq.n	8003e9e <osMutexRelease+0x5e>
 8003e76:	4b0c      	ldr	r3, [pc, #48]	; (8003ea8 <osMutexRelease+0x68>)
 8003e78:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003e7c:	601a      	str	r2, [r3, #0]
 8003e7e:	f3bf 8f4f 	dsb	sy
 8003e82:	f3bf 8f6f 	isb	sy
 8003e86:	e00a      	b.n	8003e9e <osMutexRelease+0x5e>
  }
  else if (xSemaphoreGive(mutex_id) != pdTRUE) 
 8003e88:	2300      	movs	r3, #0
 8003e8a:	2200      	movs	r2, #0
 8003e8c:	2100      	movs	r1, #0
 8003e8e:	6878      	ldr	r0, [r7, #4]
 8003e90:	f000 fb58 	bl	8004544 <xQueueGenericSend>
 8003e94:	4603      	mov	r3, r0
 8003e96:	2b01      	cmp	r3, #1
 8003e98:	d001      	beq.n	8003e9e <osMutexRelease+0x5e>
  {
    result = osErrorOS;
 8003e9a:	23ff      	movs	r3, #255	; 0xff
 8003e9c:	60fb      	str	r3, [r7, #12]
  }
  return result;
 8003e9e:	68fb      	ldr	r3, [r7, #12]
}
 8003ea0:	4618      	mov	r0, r3
 8003ea2:	3710      	adds	r7, #16
 8003ea4:	46bd      	mov	sp, r7
 8003ea6:	bd80      	pop	{r7, pc}
 8003ea8:	e000ed04 	.word	0xe000ed04

08003eac <osSemaphoreCreate>:
* @param count         number of available resources.
* @retval  semaphore ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreCreate shall be consistent in every CMSIS-RTOS.
*/
osSemaphoreId osSemaphoreCreate (const osSemaphoreDef_t *semaphore_def, int32_t count)
{ 
 8003eac:	b580      	push	{r7, lr}
 8003eae:	b084      	sub	sp, #16
 8003eb0:	af00      	add	r7, sp, #0
 8003eb2:	6078      	str	r0, [r7, #4]
 8003eb4:	6039      	str	r1, [r7, #0]
#endif    
  }
#else  // configSUPPORT_STATIC_ALLOCATION == 0  && configSUPPORT_DYNAMIC_ALLOCATION == 1
  osSemaphoreId sema;
 
  if (count == 1) {
 8003eb6:	683b      	ldr	r3, [r7, #0]
 8003eb8:	2b01      	cmp	r3, #1
 8003eba:	d110      	bne.n	8003ede <osSemaphoreCreate+0x32>
    vSemaphoreCreateBinary(sema);
 8003ebc:	2203      	movs	r2, #3
 8003ebe:	2100      	movs	r1, #0
 8003ec0:	2001      	movs	r0, #1
 8003ec2:	f000 fab5 	bl	8004430 <xQueueGenericCreate>
 8003ec6:	60f8      	str	r0, [r7, #12]
 8003ec8:	68fb      	ldr	r3, [r7, #12]
 8003eca:	2b00      	cmp	r3, #0
 8003ecc:	d005      	beq.n	8003eda <osSemaphoreCreate+0x2e>
 8003ece:	2300      	movs	r3, #0
 8003ed0:	2200      	movs	r2, #0
 8003ed2:	2100      	movs	r1, #0
 8003ed4:	68f8      	ldr	r0, [r7, #12]
 8003ed6:	f000 fb35 	bl	8004544 <xQueueGenericSend>
    return sema;
 8003eda:	68fb      	ldr	r3, [r7, #12]
 8003edc:	e000      	b.n	8003ee0 <osSemaphoreCreate+0x34>
  }
  else {
#if (configUSE_COUNTING_SEMAPHORES == 1 )	
    return xSemaphoreCreateCounting(count, count);
#else
    return NULL;
 8003ede:	2300      	movs	r3, #0
#endif
  }
#endif
}
 8003ee0:	4618      	mov	r0, r3
 8003ee2:	3710      	adds	r7, #16
 8003ee4:	46bd      	mov	sp, r7
 8003ee6:	bd80      	pop	{r7, pc}

08003ee8 <osSemaphoreWait>:
* @param  millisec      timeout value or 0 in case of no time-out.
* @retval  number of available tokens, or -1 in case of incorrect parameters.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreWait shall be consistent in every CMSIS-RTOS.
*/
int32_t osSemaphoreWait (osSemaphoreId semaphore_id, uint32_t millisec)
{
 8003ee8:	b580      	push	{r7, lr}
 8003eea:	b084      	sub	sp, #16
 8003eec:	af00      	add	r7, sp, #0
 8003eee:	6078      	str	r0, [r7, #4]
 8003ef0:	6039      	str	r1, [r7, #0]
  TickType_t ticks;
  portBASE_TYPE taskWoken = pdFALSE;  
 8003ef2:	2300      	movs	r3, #0
 8003ef4:	60bb      	str	r3, [r7, #8]
  
  
  if (semaphore_id == NULL) {
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	2b00      	cmp	r3, #0
 8003efa:	d101      	bne.n	8003f00 <osSemaphoreWait+0x18>
    return osErrorParameter;
 8003efc:	2380      	movs	r3, #128	; 0x80
 8003efe:	e03a      	b.n	8003f76 <osSemaphoreWait+0x8e>
  }
  
  ticks = 0;
 8003f00:	2300      	movs	r3, #0
 8003f02:	60fb      	str	r3, [r7, #12]
  if (millisec == osWaitForever) {
 8003f04:	683b      	ldr	r3, [r7, #0]
 8003f06:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003f0a:	d103      	bne.n	8003f14 <osSemaphoreWait+0x2c>
    ticks = portMAX_DELAY;
 8003f0c:	f04f 33ff 	mov.w	r3, #4294967295
 8003f10:	60fb      	str	r3, [r7, #12]
 8003f12:	e009      	b.n	8003f28 <osSemaphoreWait+0x40>
  }
  else if (millisec != 0) {
 8003f14:	683b      	ldr	r3, [r7, #0]
 8003f16:	2b00      	cmp	r3, #0
 8003f18:	d006      	beq.n	8003f28 <osSemaphoreWait+0x40>
    ticks = millisec / portTICK_PERIOD_MS;
 8003f1a:	683b      	ldr	r3, [r7, #0]
 8003f1c:	60fb      	str	r3, [r7, #12]
    if (ticks == 0) {
 8003f1e:	68fb      	ldr	r3, [r7, #12]
 8003f20:	2b00      	cmp	r3, #0
 8003f22:	d101      	bne.n	8003f28 <osSemaphoreWait+0x40>
      ticks = 1;
 8003f24:	2301      	movs	r3, #1
 8003f26:	60fb      	str	r3, [r7, #12]
    }
  }
  
  if (inHandlerMode()) {
 8003f28:	f7ff fecc 	bl	8003cc4 <inHandlerMode>
 8003f2c:	4603      	mov	r3, r0
 8003f2e:	2b00      	cmp	r3, #0
 8003f30:	d017      	beq.n	8003f62 <osSemaphoreWait+0x7a>
    if (xSemaphoreTakeFromISR(semaphore_id, &taskWoken) != pdTRUE) {
 8003f32:	f107 0308 	add.w	r3, r7, #8
 8003f36:	461a      	mov	r2, r3
 8003f38:	2100      	movs	r1, #0
 8003f3a:	6878      	ldr	r0, [r7, #4]
 8003f3c:	f000 fefe 	bl	8004d3c <xQueueReceiveFromISR>
 8003f40:	4603      	mov	r3, r0
 8003f42:	2b01      	cmp	r3, #1
 8003f44:	d001      	beq.n	8003f4a <osSemaphoreWait+0x62>
      return osErrorOS;
 8003f46:	23ff      	movs	r3, #255	; 0xff
 8003f48:	e015      	b.n	8003f76 <osSemaphoreWait+0x8e>
    }
	portEND_SWITCHING_ISR(taskWoken);
 8003f4a:	68bb      	ldr	r3, [r7, #8]
 8003f4c:	2b00      	cmp	r3, #0
 8003f4e:	d011      	beq.n	8003f74 <osSemaphoreWait+0x8c>
 8003f50:	4b0b      	ldr	r3, [pc, #44]	; (8003f80 <osSemaphoreWait+0x98>)
 8003f52:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003f56:	601a      	str	r2, [r3, #0]
 8003f58:	f3bf 8f4f 	dsb	sy
 8003f5c:	f3bf 8f6f 	isb	sy
 8003f60:	e008      	b.n	8003f74 <osSemaphoreWait+0x8c>
  }  
  else if (xSemaphoreTake(semaphore_id, ticks) != pdTRUE) {
 8003f62:	68f9      	ldr	r1, [r7, #12]
 8003f64:	6878      	ldr	r0, [r7, #4]
 8003f66:	f000 fde1 	bl	8004b2c <xQueueSemaphoreTake>
 8003f6a:	4603      	mov	r3, r0
 8003f6c:	2b01      	cmp	r3, #1
 8003f6e:	d001      	beq.n	8003f74 <osSemaphoreWait+0x8c>
    return osErrorOS;
 8003f70:	23ff      	movs	r3, #255	; 0xff
 8003f72:	e000      	b.n	8003f76 <osSemaphoreWait+0x8e>
  }
  
  return osOK;
 8003f74:	2300      	movs	r3, #0
}
 8003f76:	4618      	mov	r0, r3
 8003f78:	3710      	adds	r7, #16
 8003f7a:	46bd      	mov	sp, r7
 8003f7c:	bd80      	pop	{r7, pc}
 8003f7e:	bf00      	nop
 8003f80:	e000ed04 	.word	0xe000ed04

08003f84 <osSemaphoreRelease>:
* @param  semaphore_id  semaphore object referenced with \ref osSemaphore.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreRelease shall be consistent in every CMSIS-RTOS.
*/
osStatus osSemaphoreRelease (osSemaphoreId semaphore_id)
{
 8003f84:	b580      	push	{r7, lr}
 8003f86:	b084      	sub	sp, #16
 8003f88:	af00      	add	r7, sp, #0
 8003f8a:	6078      	str	r0, [r7, #4]
  osStatus result = osOK;
 8003f8c:	2300      	movs	r3, #0
 8003f8e:	60fb      	str	r3, [r7, #12]
  portBASE_TYPE taskWoken = pdFALSE;
 8003f90:	2300      	movs	r3, #0
 8003f92:	60bb      	str	r3, [r7, #8]
  
  
  if (inHandlerMode()) {
 8003f94:	f7ff fe96 	bl	8003cc4 <inHandlerMode>
 8003f98:	4603      	mov	r3, r0
 8003f9a:	2b00      	cmp	r3, #0
 8003f9c:	d016      	beq.n	8003fcc <osSemaphoreRelease+0x48>
    if (xSemaphoreGiveFromISR(semaphore_id, &taskWoken) != pdTRUE) {
 8003f9e:	f107 0308 	add.w	r3, r7, #8
 8003fa2:	4619      	mov	r1, r3
 8003fa4:	6878      	ldr	r0, [r7, #4]
 8003fa6:	f000 fc5b 	bl	8004860 <xQueueGiveFromISR>
 8003faa:	4603      	mov	r3, r0
 8003fac:	2b01      	cmp	r3, #1
 8003fae:	d001      	beq.n	8003fb4 <osSemaphoreRelease+0x30>
      return osErrorOS;
 8003fb0:	23ff      	movs	r3, #255	; 0xff
 8003fb2:	e017      	b.n	8003fe4 <osSemaphoreRelease+0x60>
    }
    portEND_SWITCHING_ISR(taskWoken);
 8003fb4:	68bb      	ldr	r3, [r7, #8]
 8003fb6:	2b00      	cmp	r3, #0
 8003fb8:	d013      	beq.n	8003fe2 <osSemaphoreRelease+0x5e>
 8003fba:	4b0c      	ldr	r3, [pc, #48]	; (8003fec <osSemaphoreRelease+0x68>)
 8003fbc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003fc0:	601a      	str	r2, [r3, #0]
 8003fc2:	f3bf 8f4f 	dsb	sy
 8003fc6:	f3bf 8f6f 	isb	sy
 8003fca:	e00a      	b.n	8003fe2 <osSemaphoreRelease+0x5e>
  }
  else {
    if (xSemaphoreGive(semaphore_id) != pdTRUE) {
 8003fcc:	2300      	movs	r3, #0
 8003fce:	2200      	movs	r2, #0
 8003fd0:	2100      	movs	r1, #0
 8003fd2:	6878      	ldr	r0, [r7, #4]
 8003fd4:	f000 fab6 	bl	8004544 <xQueueGenericSend>
 8003fd8:	4603      	mov	r3, r0
 8003fda:	2b01      	cmp	r3, #1
 8003fdc:	d001      	beq.n	8003fe2 <osSemaphoreRelease+0x5e>
      result = osErrorOS;
 8003fde:	23ff      	movs	r3, #255	; 0xff
 8003fe0:	60fb      	str	r3, [r7, #12]
    }
  }
  
  return result;
 8003fe2:	68fb      	ldr	r3, [r7, #12]
}
 8003fe4:	4618      	mov	r0, r3
 8003fe6:	3710      	adds	r7, #16
 8003fe8:	46bd      	mov	sp, r7
 8003fea:	bd80      	pop	{r7, pc}
 8003fec:	e000ed04 	.word	0xe000ed04

08003ff0 <osSemaphoreDelete>:
* @param  semaphore_id  semaphore object referenced with \ref osSemaphore.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreDelete shall be consistent in every CMSIS-RTOS.
*/
osStatus osSemaphoreDelete (osSemaphoreId semaphore_id)
{
 8003ff0:	b580      	push	{r7, lr}
 8003ff2:	b082      	sub	sp, #8
 8003ff4:	af00      	add	r7, sp, #0
 8003ff6:	6078      	str	r0, [r7, #4]
  if (inHandlerMode()) {
 8003ff8:	f7ff fe64 	bl	8003cc4 <inHandlerMode>
 8003ffc:	4603      	mov	r3, r0
 8003ffe:	2b00      	cmp	r3, #0
 8004000:	d001      	beq.n	8004006 <osSemaphoreDelete+0x16>
    return osErrorISR;
 8004002:	2382      	movs	r3, #130	; 0x82
 8004004:	e003      	b.n	800400e <osSemaphoreDelete+0x1e>
  }

  vSemaphoreDelete(semaphore_id);
 8004006:	6878      	ldr	r0, [r7, #4]
 8004008:	f000 ff4d 	bl	8004ea6 <vQueueDelete>

  return osOK; 
 800400c:	2300      	movs	r3, #0
}
 800400e:	4618      	mov	r0, r3
 8004010:	3708      	adds	r7, #8
 8004012:	46bd      	mov	sp, r7
 8004014:	bd80      	pop	{r7, pc}

08004016 <osMessageCreate>:
* @param  thread_id     thread ID (obtained by \ref osThreadCreate or \ref osThreadGetId) or NULL.
* @retval  message queue ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osMessageCreate shall be consistent in every CMSIS-RTOS.
*/
osMessageQId osMessageCreate (const osMessageQDef_t *queue_def, osThreadId thread_id)
{
 8004016:	b580      	push	{r7, lr}
 8004018:	b082      	sub	sp, #8
 800401a:	af00      	add	r7, sp, #0
 800401c:	6078      	str	r0, [r7, #4]
 800401e:	6039      	str	r1, [r7, #0]
    return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
  }
#elif ( configSUPPORT_STATIC_ALLOCATION == 1 )
  return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
#else  
  return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	6818      	ldr	r0, [r3, #0]
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	685b      	ldr	r3, [r3, #4]
 8004028:	2200      	movs	r2, #0
 800402a:	4619      	mov	r1, r3
 800402c:	f000 fa00 	bl	8004430 <xQueueGenericCreate>
 8004030:	4603      	mov	r3, r0
#endif
}
 8004032:	4618      	mov	r0, r3
 8004034:	3708      	adds	r7, #8
 8004036:	46bd      	mov	sp, r7
 8004038:	bd80      	pop	{r7, pc}
	...

0800403c <osMessagePut>:
* @param  millisec  timeout value or 0 in case of no time-out.
* @retval status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMessagePut shall be consistent in every CMSIS-RTOS.
*/
osStatus osMessagePut (osMessageQId queue_id, uint32_t info, uint32_t millisec)
{
 800403c:	b580      	push	{r7, lr}
 800403e:	b086      	sub	sp, #24
 8004040:	af00      	add	r7, sp, #0
 8004042:	60f8      	str	r0, [r7, #12]
 8004044:	60b9      	str	r1, [r7, #8]
 8004046:	607a      	str	r2, [r7, #4]
  portBASE_TYPE taskWoken = pdFALSE;
 8004048:	2300      	movs	r3, #0
 800404a:	613b      	str	r3, [r7, #16]
  TickType_t ticks;
  
  ticks = millisec / portTICK_PERIOD_MS;
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	617b      	str	r3, [r7, #20]
  if (ticks == 0) {
 8004050:	697b      	ldr	r3, [r7, #20]
 8004052:	2b00      	cmp	r3, #0
 8004054:	d101      	bne.n	800405a <osMessagePut+0x1e>
    ticks = 1;
 8004056:	2301      	movs	r3, #1
 8004058:	617b      	str	r3, [r7, #20]
  }
  
  if (inHandlerMode()) {
 800405a:	f7ff fe33 	bl	8003cc4 <inHandlerMode>
 800405e:	4603      	mov	r3, r0
 8004060:	2b00      	cmp	r3, #0
 8004062:	d018      	beq.n	8004096 <osMessagePut+0x5a>
    if (xQueueSendFromISR(queue_id, &info, &taskWoken) != pdTRUE) {
 8004064:	f107 0210 	add.w	r2, r7, #16
 8004068:	f107 0108 	add.w	r1, r7, #8
 800406c:	2300      	movs	r3, #0
 800406e:	68f8      	ldr	r0, [r7, #12]
 8004070:	f000 fb62 	bl	8004738 <xQueueGenericSendFromISR>
 8004074:	4603      	mov	r3, r0
 8004076:	2b01      	cmp	r3, #1
 8004078:	d001      	beq.n	800407e <osMessagePut+0x42>
      return osErrorOS;
 800407a:	23ff      	movs	r3, #255	; 0xff
 800407c:	e018      	b.n	80040b0 <osMessagePut+0x74>
    }
    portEND_SWITCHING_ISR(taskWoken);
 800407e:	693b      	ldr	r3, [r7, #16]
 8004080:	2b00      	cmp	r3, #0
 8004082:	d014      	beq.n	80040ae <osMessagePut+0x72>
 8004084:	4b0c      	ldr	r3, [pc, #48]	; (80040b8 <osMessagePut+0x7c>)
 8004086:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800408a:	601a      	str	r2, [r3, #0]
 800408c:	f3bf 8f4f 	dsb	sy
 8004090:	f3bf 8f6f 	isb	sy
 8004094:	e00b      	b.n	80040ae <osMessagePut+0x72>
  }
  else {
    if (xQueueSend(queue_id, &info, ticks) != pdTRUE) {
 8004096:	f107 0108 	add.w	r1, r7, #8
 800409a:	2300      	movs	r3, #0
 800409c:	697a      	ldr	r2, [r7, #20]
 800409e:	68f8      	ldr	r0, [r7, #12]
 80040a0:	f000 fa50 	bl	8004544 <xQueueGenericSend>
 80040a4:	4603      	mov	r3, r0
 80040a6:	2b01      	cmp	r3, #1
 80040a8:	d001      	beq.n	80040ae <osMessagePut+0x72>
      return osErrorOS;
 80040aa:	23ff      	movs	r3, #255	; 0xff
 80040ac:	e000      	b.n	80040b0 <osMessagePut+0x74>
    }
  }
  
  return osOK;
 80040ae:	2300      	movs	r3, #0
}
 80040b0:	4618      	mov	r0, r3
 80040b2:	3718      	adds	r7, #24
 80040b4:	46bd      	mov	sp, r7
 80040b6:	bd80      	pop	{r7, pc}
 80040b8:	e000ed04 	.word	0xe000ed04

080040bc <osMessageGet>:
* @param  millisec  timeout value or 0 in case of no time-out.
* @retval event information that includes status code.
* @note   MUST REMAIN UNCHANGED: \b osMessageGet shall be consistent in every CMSIS-RTOS.
*/
osEvent osMessageGet (osMessageQId queue_id, uint32_t millisec)
{
 80040bc:	b590      	push	{r4, r7, lr}
 80040be:	b08b      	sub	sp, #44	; 0x2c
 80040c0:	af00      	add	r7, sp, #0
 80040c2:	60f8      	str	r0, [r7, #12]
 80040c4:	60b9      	str	r1, [r7, #8]
 80040c6:	607a      	str	r2, [r7, #4]
  portBASE_TYPE taskWoken;
  TickType_t ticks;
  osEvent event;
  
  event.def.message_id = queue_id;
 80040c8:	68bb      	ldr	r3, [r7, #8]
 80040ca:	61fb      	str	r3, [r7, #28]
  event.value.v = 0;
 80040cc:	2300      	movs	r3, #0
 80040ce:	61bb      	str	r3, [r7, #24]
  
  if (queue_id == NULL) {
 80040d0:	68bb      	ldr	r3, [r7, #8]
 80040d2:	2b00      	cmp	r3, #0
 80040d4:	d10a      	bne.n	80040ec <osMessageGet+0x30>
    event.status = osErrorParameter;
 80040d6:	2380      	movs	r3, #128	; 0x80
 80040d8:	617b      	str	r3, [r7, #20]
    return event;
 80040da:	68fb      	ldr	r3, [r7, #12]
 80040dc:	461c      	mov	r4, r3
 80040de:	f107 0314 	add.w	r3, r7, #20
 80040e2:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 80040e6:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 80040ea:	e054      	b.n	8004196 <osMessageGet+0xda>
  }
  
  taskWoken = pdFALSE;
 80040ec:	2300      	movs	r3, #0
 80040ee:	623b      	str	r3, [r7, #32]
  
  ticks = 0;
 80040f0:	2300      	movs	r3, #0
 80040f2:	627b      	str	r3, [r7, #36]	; 0x24
  if (millisec == osWaitForever) {
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80040fa:	d103      	bne.n	8004104 <osMessageGet+0x48>
    ticks = portMAX_DELAY;
 80040fc:	f04f 33ff 	mov.w	r3, #4294967295
 8004100:	627b      	str	r3, [r7, #36]	; 0x24
 8004102:	e009      	b.n	8004118 <osMessageGet+0x5c>
  }
  else if (millisec != 0) {
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	2b00      	cmp	r3, #0
 8004108:	d006      	beq.n	8004118 <osMessageGet+0x5c>
    ticks = millisec / portTICK_PERIOD_MS;
 800410a:	687b      	ldr	r3, [r7, #4]
 800410c:	627b      	str	r3, [r7, #36]	; 0x24
    if (ticks == 0) {
 800410e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004110:	2b00      	cmp	r3, #0
 8004112:	d101      	bne.n	8004118 <osMessageGet+0x5c>
      ticks = 1;
 8004114:	2301      	movs	r3, #1
 8004116:	627b      	str	r3, [r7, #36]	; 0x24
    }
  }
  
  if (inHandlerMode()) {
 8004118:	f7ff fdd4 	bl	8003cc4 <inHandlerMode>
 800411c:	4603      	mov	r3, r0
 800411e:	2b00      	cmp	r3, #0
 8004120:	d01c      	beq.n	800415c <osMessageGet+0xa0>
    if (xQueueReceiveFromISR(queue_id, &event.value.v, &taskWoken) == pdTRUE) {
 8004122:	f107 0220 	add.w	r2, r7, #32
 8004126:	f107 0314 	add.w	r3, r7, #20
 800412a:	3304      	adds	r3, #4
 800412c:	4619      	mov	r1, r3
 800412e:	68b8      	ldr	r0, [r7, #8]
 8004130:	f000 fe04 	bl	8004d3c <xQueueReceiveFromISR>
 8004134:	4603      	mov	r3, r0
 8004136:	2b01      	cmp	r3, #1
 8004138:	d102      	bne.n	8004140 <osMessageGet+0x84>
      /* We have mail */
      event.status = osEventMessage;
 800413a:	2310      	movs	r3, #16
 800413c:	617b      	str	r3, [r7, #20]
 800413e:	e001      	b.n	8004144 <osMessageGet+0x88>
    }
    else {
      event.status = osOK;
 8004140:	2300      	movs	r3, #0
 8004142:	617b      	str	r3, [r7, #20]
    }
    portEND_SWITCHING_ISR(taskWoken);
 8004144:	6a3b      	ldr	r3, [r7, #32]
 8004146:	2b00      	cmp	r3, #0
 8004148:	d01d      	beq.n	8004186 <osMessageGet+0xca>
 800414a:	4b15      	ldr	r3, [pc, #84]	; (80041a0 <osMessageGet+0xe4>)
 800414c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004150:	601a      	str	r2, [r3, #0]
 8004152:	f3bf 8f4f 	dsb	sy
 8004156:	f3bf 8f6f 	isb	sy
 800415a:	e014      	b.n	8004186 <osMessageGet+0xca>
  }
  else {
    if (xQueueReceive(queue_id, &event.value.v, ticks) == pdTRUE) {
 800415c:	f107 0314 	add.w	r3, r7, #20
 8004160:	3304      	adds	r3, #4
 8004162:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004164:	4619      	mov	r1, r3
 8004166:	68b8      	ldr	r0, [r7, #8]
 8004168:	f000 fc04 	bl	8004974 <xQueueReceive>
 800416c:	4603      	mov	r3, r0
 800416e:	2b01      	cmp	r3, #1
 8004170:	d102      	bne.n	8004178 <osMessageGet+0xbc>
      /* We have mail */
      event.status = osEventMessage;
 8004172:	2310      	movs	r3, #16
 8004174:	617b      	str	r3, [r7, #20]
 8004176:	e006      	b.n	8004186 <osMessageGet+0xca>
    }
    else {
      event.status = (ticks == 0) ? osOK : osEventTimeout;
 8004178:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800417a:	2b00      	cmp	r3, #0
 800417c:	d101      	bne.n	8004182 <osMessageGet+0xc6>
 800417e:	2300      	movs	r3, #0
 8004180:	e000      	b.n	8004184 <osMessageGet+0xc8>
 8004182:	2340      	movs	r3, #64	; 0x40
 8004184:	617b      	str	r3, [r7, #20]
    }
  }
  
  return event;
 8004186:	68fb      	ldr	r3, [r7, #12]
 8004188:	461c      	mov	r4, r3
 800418a:	f107 0314 	add.w	r3, r7, #20
 800418e:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8004192:	e884 0007 	stmia.w	r4, {r0, r1, r2}
}
 8004196:	68f8      	ldr	r0, [r7, #12]
 8004198:	372c      	adds	r7, #44	; 0x2c
 800419a:	46bd      	mov	sp, r7
 800419c:	bd90      	pop	{r4, r7, pc}
 800419e:	bf00      	nop
 80041a0:	e000ed04 	.word	0xe000ed04

080041a4 <osMessageWaiting>:
* @brief  Get the number of messaged stored in a queue.
* @param  queue_id  message queue ID obtained with \ref osMessageCreate.
* @retval number of messages stored in a queue.
*/
uint32_t osMessageWaiting(osMessageQId queue_id)
{
 80041a4:	b580      	push	{r7, lr}
 80041a6:	b082      	sub	sp, #8
 80041a8:	af00      	add	r7, sp, #0
 80041aa:	6078      	str	r0, [r7, #4]
  if (inHandlerMode()) {
 80041ac:	f7ff fd8a 	bl	8003cc4 <inHandlerMode>
 80041b0:	4603      	mov	r3, r0
 80041b2:	2b00      	cmp	r3, #0
 80041b4:	d004      	beq.n	80041c0 <osMessageWaiting+0x1c>
    return uxQueueMessagesWaitingFromISR(queue_id);
 80041b6:	6878      	ldr	r0, [r7, #4]
 80041b8:	f000 fe5a 	bl	8004e70 <uxQueueMessagesWaitingFromISR>
 80041bc:	4603      	mov	r3, r0
 80041be:	e003      	b.n	80041c8 <osMessageWaiting+0x24>
  }
  else
  {
    return uxQueueMessagesWaiting(queue_id);
 80041c0:	6878      	ldr	r0, [r7, #4]
 80041c2:	f000 fe38 	bl	8004e36 <uxQueueMessagesWaiting>
 80041c6:	4603      	mov	r3, r0
  }
}
 80041c8:	4618      	mov	r0, r3
 80041ca:	3708      	adds	r7, #8
 80041cc:	46bd      	mov	sp, r7
 80041ce:	bd80      	pop	{r7, pc}

080041d0 <osMessageDelete>:
* @brief Delete a Message Queue
* @param  queue_id  message queue ID obtained with \ref osMessageCreate.
* @retval  status code that indicates the execution status of the function.
*/
osStatus osMessageDelete (osMessageQId queue_id)
{
 80041d0:	b580      	push	{r7, lr}
 80041d2:	b082      	sub	sp, #8
 80041d4:	af00      	add	r7, sp, #0
 80041d6:	6078      	str	r0, [r7, #4]
  if (inHandlerMode()) {
 80041d8:	f7ff fd74 	bl	8003cc4 <inHandlerMode>
 80041dc:	4603      	mov	r3, r0
 80041de:	2b00      	cmp	r3, #0
 80041e0:	d001      	beq.n	80041e6 <osMessageDelete+0x16>
    return osErrorISR;
 80041e2:	2382      	movs	r3, #130	; 0x82
 80041e4:	e003      	b.n	80041ee <osMessageDelete+0x1e>
  }

  vQueueDelete(queue_id);
 80041e6:	6878      	ldr	r0, [r7, #4]
 80041e8:	f000 fe5d 	bl	8004ea6 <vQueueDelete>

  return osOK; 
 80041ec:	2300      	movs	r3, #0
}
 80041ee:	4618      	mov	r0, r3
 80041f0:	3708      	adds	r7, #8
 80041f2:	46bd      	mov	sp, r7
 80041f4:	bd80      	pop	{r7, pc}

080041f6 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 80041f6:	b480      	push	{r7}
 80041f8:	b083      	sub	sp, #12
 80041fa:	af00      	add	r7, sp, #0
 80041fc:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80041fe:	687b      	ldr	r3, [r7, #4]
 8004200:	f103 0208 	add.w	r2, r3, #8
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	f04f 32ff 	mov.w	r2, #4294967295
 800420e:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004210:	687b      	ldr	r3, [r7, #4]
 8004212:	f103 0208 	add.w	r2, r3, #8
 8004216:	687b      	ldr	r3, [r7, #4]
 8004218:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800421a:	687b      	ldr	r3, [r7, #4]
 800421c:	f103 0208 	add.w	r2, r3, #8
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	2200      	movs	r2, #0
 8004228:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800422a:	bf00      	nop
 800422c:	370c      	adds	r7, #12
 800422e:	46bd      	mov	sp, r7
 8004230:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004234:	4770      	bx	lr

08004236 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8004236:	b480      	push	{r7}
 8004238:	b083      	sub	sp, #12
 800423a:	af00      	add	r7, sp, #0
 800423c:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 800423e:	687b      	ldr	r3, [r7, #4]
 8004240:	2200      	movs	r2, #0
 8004242:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8004244:	bf00      	nop
 8004246:	370c      	adds	r7, #12
 8004248:	46bd      	mov	sp, r7
 800424a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800424e:	4770      	bx	lr

08004250 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8004250:	b480      	push	{r7}
 8004252:	b085      	sub	sp, #20
 8004254:	af00      	add	r7, sp, #0
 8004256:	6078      	str	r0, [r7, #4]
 8004258:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800425a:	687b      	ldr	r3, [r7, #4]
 800425c:	685b      	ldr	r3, [r3, #4]
 800425e:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8004260:	683b      	ldr	r3, [r7, #0]
 8004262:	68fa      	ldr	r2, [r7, #12]
 8004264:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8004266:	68fb      	ldr	r3, [r7, #12]
 8004268:	689a      	ldr	r2, [r3, #8]
 800426a:	683b      	ldr	r3, [r7, #0]
 800426c:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800426e:	68fb      	ldr	r3, [r7, #12]
 8004270:	689b      	ldr	r3, [r3, #8]
 8004272:	683a      	ldr	r2, [r7, #0]
 8004274:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8004276:	68fb      	ldr	r3, [r7, #12]
 8004278:	683a      	ldr	r2, [r7, #0]
 800427a:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 800427c:	683b      	ldr	r3, [r7, #0]
 800427e:	687a      	ldr	r2, [r7, #4]
 8004280:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8004282:	687b      	ldr	r3, [r7, #4]
 8004284:	681b      	ldr	r3, [r3, #0]
 8004286:	1c5a      	adds	r2, r3, #1
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	601a      	str	r2, [r3, #0]
}
 800428c:	bf00      	nop
 800428e:	3714      	adds	r7, #20
 8004290:	46bd      	mov	sp, r7
 8004292:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004296:	4770      	bx	lr

08004298 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8004298:	b480      	push	{r7}
 800429a:	b085      	sub	sp, #20
 800429c:	af00      	add	r7, sp, #0
 800429e:	6078      	str	r0, [r7, #4]
 80042a0:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80042a2:	683b      	ldr	r3, [r7, #0]
 80042a4:	681b      	ldr	r3, [r3, #0]
 80042a6:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 80042a8:	68bb      	ldr	r3, [r7, #8]
 80042aa:	f1b3 3fff 	cmp.w	r3, #4294967295
 80042ae:	d103      	bne.n	80042b8 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	691b      	ldr	r3, [r3, #16]
 80042b4:	60fb      	str	r3, [r7, #12]
 80042b6:	e00c      	b.n	80042d2 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80042b8:	687b      	ldr	r3, [r7, #4]
 80042ba:	3308      	adds	r3, #8
 80042bc:	60fb      	str	r3, [r7, #12]
 80042be:	e002      	b.n	80042c6 <vListInsert+0x2e>
 80042c0:	68fb      	ldr	r3, [r7, #12]
 80042c2:	685b      	ldr	r3, [r3, #4]
 80042c4:	60fb      	str	r3, [r7, #12]
 80042c6:	68fb      	ldr	r3, [r7, #12]
 80042c8:	685b      	ldr	r3, [r3, #4]
 80042ca:	681b      	ldr	r3, [r3, #0]
 80042cc:	68ba      	ldr	r2, [r7, #8]
 80042ce:	429a      	cmp	r2, r3
 80042d0:	d2f6      	bcs.n	80042c0 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 80042d2:	68fb      	ldr	r3, [r7, #12]
 80042d4:	685a      	ldr	r2, [r3, #4]
 80042d6:	683b      	ldr	r3, [r7, #0]
 80042d8:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80042da:	683b      	ldr	r3, [r7, #0]
 80042dc:	685b      	ldr	r3, [r3, #4]
 80042de:	683a      	ldr	r2, [r7, #0]
 80042e0:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 80042e2:	683b      	ldr	r3, [r7, #0]
 80042e4:	68fa      	ldr	r2, [r7, #12]
 80042e6:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 80042e8:	68fb      	ldr	r3, [r7, #12]
 80042ea:	683a      	ldr	r2, [r7, #0]
 80042ec:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 80042ee:	683b      	ldr	r3, [r7, #0]
 80042f0:	687a      	ldr	r2, [r7, #4]
 80042f2:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	681b      	ldr	r3, [r3, #0]
 80042f8:	1c5a      	adds	r2, r3, #1
 80042fa:	687b      	ldr	r3, [r7, #4]
 80042fc:	601a      	str	r2, [r3, #0]
}
 80042fe:	bf00      	nop
 8004300:	3714      	adds	r7, #20
 8004302:	46bd      	mov	sp, r7
 8004304:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004308:	4770      	bx	lr

0800430a <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800430a:	b480      	push	{r7}
 800430c:	b085      	sub	sp, #20
 800430e:	af00      	add	r7, sp, #0
 8004310:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 8004312:	687b      	ldr	r3, [r7, #4]
 8004314:	691b      	ldr	r3, [r3, #16]
 8004316:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	685b      	ldr	r3, [r3, #4]
 800431c:	687a      	ldr	r2, [r7, #4]
 800431e:	6892      	ldr	r2, [r2, #8]
 8004320:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8004322:	687b      	ldr	r3, [r7, #4]
 8004324:	689b      	ldr	r3, [r3, #8]
 8004326:	687a      	ldr	r2, [r7, #4]
 8004328:	6852      	ldr	r2, [r2, #4]
 800432a:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800432c:	68fb      	ldr	r3, [r7, #12]
 800432e:	685b      	ldr	r3, [r3, #4]
 8004330:	687a      	ldr	r2, [r7, #4]
 8004332:	429a      	cmp	r2, r3
 8004334:	d103      	bne.n	800433e <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8004336:	687b      	ldr	r3, [r7, #4]
 8004338:	689a      	ldr	r2, [r3, #8]
 800433a:	68fb      	ldr	r3, [r7, #12]
 800433c:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 800433e:	687b      	ldr	r3, [r7, #4]
 8004340:	2200      	movs	r2, #0
 8004342:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8004344:	68fb      	ldr	r3, [r7, #12]
 8004346:	681b      	ldr	r3, [r3, #0]
 8004348:	1e5a      	subs	r2, r3, #1
 800434a:	68fb      	ldr	r3, [r7, #12]
 800434c:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800434e:	68fb      	ldr	r3, [r7, #12]
 8004350:	681b      	ldr	r3, [r3, #0]
}
 8004352:	4618      	mov	r0, r3
 8004354:	3714      	adds	r7, #20
 8004356:	46bd      	mov	sp, r7
 8004358:	f85d 7b04 	ldr.w	r7, [sp], #4
 800435c:	4770      	bx	lr
	...

08004360 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8004360:	b580      	push	{r7, lr}
 8004362:	b084      	sub	sp, #16
 8004364:	af00      	add	r7, sp, #0
 8004366:	6078      	str	r0, [r7, #4]
 8004368:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 800436a:	687b      	ldr	r3, [r7, #4]
 800436c:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800436e:	68fb      	ldr	r3, [r7, #12]
 8004370:	2b00      	cmp	r3, #0
 8004372:	d109      	bne.n	8004388 <xQueueGenericReset+0x28>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8004374:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004378:	f383 8811 	msr	BASEPRI, r3
 800437c:	f3bf 8f6f 	isb	sy
 8004380:	f3bf 8f4f 	dsb	sy
 8004384:	60bb      	str	r3, [r7, #8]
 8004386:	e7fe      	b.n	8004386 <xQueueGenericReset+0x26>

	taskENTER_CRITICAL();
 8004388:	f001 ffa8 	bl	80062dc <vPortEnterCritical>
	{
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 800438c:	68fb      	ldr	r3, [r7, #12]
 800438e:	681a      	ldr	r2, [r3, #0]
 8004390:	68fb      	ldr	r3, [r7, #12]
 8004392:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004394:	68f9      	ldr	r1, [r7, #12]
 8004396:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8004398:	fb01 f303 	mul.w	r3, r1, r3
 800439c:	441a      	add	r2, r3
 800439e:	68fb      	ldr	r3, [r7, #12]
 80043a0:	605a      	str	r2, [r3, #4]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 80043a2:	68fb      	ldr	r3, [r7, #12]
 80043a4:	2200      	movs	r2, #0
 80043a6:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 80043a8:	68fb      	ldr	r3, [r7, #12]
 80043aa:	681a      	ldr	r2, [r3, #0]
 80043ac:	68fb      	ldr	r3, [r7, #12]
 80043ae:	609a      	str	r2, [r3, #8]
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
 80043b0:	68fb      	ldr	r3, [r7, #12]
 80043b2:	681a      	ldr	r2, [r3, #0]
 80043b4:	68fb      	ldr	r3, [r7, #12]
 80043b6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80043b8:	3b01      	subs	r3, #1
 80043ba:	68f9      	ldr	r1, [r7, #12]
 80043bc:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80043be:	fb01 f303 	mul.w	r3, r1, r3
 80043c2:	441a      	add	r2, r3
 80043c4:	68fb      	ldr	r3, [r7, #12]
 80043c6:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 80043c8:	68fb      	ldr	r3, [r7, #12]
 80043ca:	22ff      	movs	r2, #255	; 0xff
 80043cc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 80043d0:	68fb      	ldr	r3, [r7, #12]
 80043d2:	22ff      	movs	r2, #255	; 0xff
 80043d4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 80043d8:	683b      	ldr	r3, [r7, #0]
 80043da:	2b00      	cmp	r3, #0
 80043dc:	d114      	bne.n	8004408 <xQueueGenericReset+0xa8>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80043de:	68fb      	ldr	r3, [r7, #12]
 80043e0:	691b      	ldr	r3, [r3, #16]
 80043e2:	2b00      	cmp	r3, #0
 80043e4:	d01a      	beq.n	800441c <xQueueGenericReset+0xbc>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80043e6:	68fb      	ldr	r3, [r7, #12]
 80043e8:	3310      	adds	r3, #16
 80043ea:	4618      	mov	r0, r3
 80043ec:	f001 fa74 	bl	80058d8 <xTaskRemoveFromEventList>
 80043f0:	4603      	mov	r3, r0
 80043f2:	2b00      	cmp	r3, #0
 80043f4:	d012      	beq.n	800441c <xQueueGenericReset+0xbc>
				{
					queueYIELD_IF_USING_PREEMPTION();
 80043f6:	4b0d      	ldr	r3, [pc, #52]	; (800442c <xQueueGenericReset+0xcc>)
 80043f8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80043fc:	601a      	str	r2, [r3, #0]
 80043fe:	f3bf 8f4f 	dsb	sy
 8004402:	f3bf 8f6f 	isb	sy
 8004406:	e009      	b.n	800441c <xQueueGenericReset+0xbc>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8004408:	68fb      	ldr	r3, [r7, #12]
 800440a:	3310      	adds	r3, #16
 800440c:	4618      	mov	r0, r3
 800440e:	f7ff fef2 	bl	80041f6 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8004412:	68fb      	ldr	r3, [r7, #12]
 8004414:	3324      	adds	r3, #36	; 0x24
 8004416:	4618      	mov	r0, r3
 8004418:	f7ff feed 	bl	80041f6 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800441c:	f001 ff8c 	bl	8006338 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8004420:	2301      	movs	r3, #1
}
 8004422:	4618      	mov	r0, r3
 8004424:	3710      	adds	r7, #16
 8004426:	46bd      	mov	sp, r7
 8004428:	bd80      	pop	{r7, pc}
 800442a:	bf00      	nop
 800442c:	e000ed04 	.word	0xe000ed04

08004430 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8004430:	b580      	push	{r7, lr}
 8004432:	b08a      	sub	sp, #40	; 0x28
 8004434:	af02      	add	r7, sp, #8
 8004436:	60f8      	str	r0, [r7, #12]
 8004438:	60b9      	str	r1, [r7, #8]
 800443a:	4613      	mov	r3, r2
 800443c:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800443e:	68fb      	ldr	r3, [r7, #12]
 8004440:	2b00      	cmp	r3, #0
 8004442:	d109      	bne.n	8004458 <xQueueGenericCreate+0x28>
 8004444:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004448:	f383 8811 	msr	BASEPRI, r3
 800444c:	f3bf 8f6f 	isb	sy
 8004450:	f3bf 8f4f 	dsb	sy
 8004454:	613b      	str	r3, [r7, #16]
 8004456:	e7fe      	b.n	8004456 <xQueueGenericCreate+0x26>

		if( uxItemSize == ( UBaseType_t ) 0 )
 8004458:	68bb      	ldr	r3, [r7, #8]
 800445a:	2b00      	cmp	r3, #0
 800445c:	d102      	bne.n	8004464 <xQueueGenericCreate+0x34>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
 800445e:	2300      	movs	r3, #0
 8004460:	61fb      	str	r3, [r7, #28]
 8004462:	e004      	b.n	800446e <xQueueGenericCreate+0x3e>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004464:	68fb      	ldr	r3, [r7, #12]
 8004466:	68ba      	ldr	r2, [r7, #8]
 8004468:	fb02 f303 	mul.w	r3, r2, r3
 800446c:	61fb      	str	r3, [r7, #28]
		}

		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes );
 800446e:	69fb      	ldr	r3, [r7, #28]
 8004470:	3348      	adds	r3, #72	; 0x48
 8004472:	4618      	mov	r0, r3
 8004474:	f002 f84c 	bl	8006510 <pvPortMalloc>
 8004478:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 800447a:	69bb      	ldr	r3, [r7, #24]
 800447c:	2b00      	cmp	r3, #0
 800447e:	d00b      	beq.n	8004498 <xQueueGenericCreate+0x68>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( ( uint8_t * ) pxNewQueue ) + sizeof( Queue_t );
 8004480:	69bb      	ldr	r3, [r7, #24]
 8004482:	3348      	adds	r3, #72	; 0x48
 8004484:	617b      	str	r3, [r7, #20]
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8004486:	79fa      	ldrb	r2, [r7, #7]
 8004488:	69bb      	ldr	r3, [r7, #24]
 800448a:	9300      	str	r3, [sp, #0]
 800448c:	4613      	mov	r3, r2
 800448e:	697a      	ldr	r2, [r7, #20]
 8004490:	68b9      	ldr	r1, [r7, #8]
 8004492:	68f8      	ldr	r0, [r7, #12]
 8004494:	f000 f805 	bl	80044a2 <prvInitialiseNewQueue>
		else
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
		}

		return pxNewQueue;
 8004498:	69bb      	ldr	r3, [r7, #24]
	}
 800449a:	4618      	mov	r0, r3
 800449c:	3720      	adds	r7, #32
 800449e:	46bd      	mov	sp, r7
 80044a0:	bd80      	pop	{r7, pc}

080044a2 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 80044a2:	b580      	push	{r7, lr}
 80044a4:	b084      	sub	sp, #16
 80044a6:	af00      	add	r7, sp, #0
 80044a8:	60f8      	str	r0, [r7, #12]
 80044aa:	60b9      	str	r1, [r7, #8]
 80044ac:	607a      	str	r2, [r7, #4]
 80044ae:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 80044b0:	68bb      	ldr	r3, [r7, #8]
 80044b2:	2b00      	cmp	r3, #0
 80044b4:	d103      	bne.n	80044be <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 80044b6:	69bb      	ldr	r3, [r7, #24]
 80044b8:	69ba      	ldr	r2, [r7, #24]
 80044ba:	601a      	str	r2, [r3, #0]
 80044bc:	e002      	b.n	80044c4 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 80044be:	69bb      	ldr	r3, [r7, #24]
 80044c0:	687a      	ldr	r2, [r7, #4]
 80044c2:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 80044c4:	69bb      	ldr	r3, [r7, #24]
 80044c6:	68fa      	ldr	r2, [r7, #12]
 80044c8:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 80044ca:	69bb      	ldr	r3, [r7, #24]
 80044cc:	68ba      	ldr	r2, [r7, #8]
 80044ce:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 80044d0:	2101      	movs	r1, #1
 80044d2:	69b8      	ldr	r0, [r7, #24]
 80044d4:	f7ff ff44 	bl	8004360 <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 80044d8:	bf00      	nop
 80044da:	3710      	adds	r7, #16
 80044dc:	46bd      	mov	sp, r7
 80044de:	bd80      	pop	{r7, pc}

080044e0 <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
 80044e0:	b580      	push	{r7, lr}
 80044e2:	b082      	sub	sp, #8
 80044e4:	af00      	add	r7, sp, #0
 80044e6:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
 80044e8:	687b      	ldr	r3, [r7, #4]
 80044ea:	2b00      	cmp	r3, #0
 80044ec:	d00e      	beq.n	800450c <prvInitialiseMutex+0x2c>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->pxMutexHolder = NULL;
 80044ee:	687b      	ldr	r3, [r7, #4]
 80044f0:	2200      	movs	r2, #0
 80044f2:	605a      	str	r2, [r3, #4]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 80044f4:	687b      	ldr	r3, [r7, #4]
 80044f6:	2200      	movs	r2, #0
 80044f8:	601a      	str	r2, [r3, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.uxRecursiveCallCount = 0;
 80044fa:	687b      	ldr	r3, [r7, #4]
 80044fc:	2200      	movs	r2, #0
 80044fe:	60da      	str	r2, [r3, #12]

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 8004500:	2300      	movs	r3, #0
 8004502:	2200      	movs	r2, #0
 8004504:	2100      	movs	r1, #0
 8004506:	6878      	ldr	r0, [r7, #4]
 8004508:	f000 f81c 	bl	8004544 <xQueueGenericSend>
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
 800450c:	bf00      	nop
 800450e:	3708      	adds	r7, #8
 8004510:	46bd      	mov	sp, r7
 8004512:	bd80      	pop	{r7, pc}

08004514 <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
 8004514:	b580      	push	{r7, lr}
 8004516:	b086      	sub	sp, #24
 8004518:	af00      	add	r7, sp, #0
 800451a:	4603      	mov	r3, r0
 800451c:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 800451e:	2301      	movs	r3, #1
 8004520:	617b      	str	r3, [r7, #20]
 8004522:	2300      	movs	r3, #0
 8004524:	613b      	str	r3, [r7, #16]

		pxNewQueue = ( Queue_t * ) xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 8004526:	79fb      	ldrb	r3, [r7, #7]
 8004528:	461a      	mov	r2, r3
 800452a:	6939      	ldr	r1, [r7, #16]
 800452c:	6978      	ldr	r0, [r7, #20]
 800452e:	f7ff ff7f 	bl	8004430 <xQueueGenericCreate>
 8004532:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( pxNewQueue );
 8004534:	68f8      	ldr	r0, [r7, #12]
 8004536:	f7ff ffd3 	bl	80044e0 <prvInitialiseMutex>

		return pxNewQueue;
 800453a:	68fb      	ldr	r3, [r7, #12]
	}
 800453c:	4618      	mov	r0, r3
 800453e:	3718      	adds	r7, #24
 8004540:	46bd      	mov	sp, r7
 8004542:	bd80      	pop	{r7, pc}

08004544 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8004544:	b580      	push	{r7, lr}
 8004546:	b08e      	sub	sp, #56	; 0x38
 8004548:	af00      	add	r7, sp, #0
 800454a:	60f8      	str	r0, [r7, #12]
 800454c:	60b9      	str	r1, [r7, #8]
 800454e:	607a      	str	r2, [r7, #4]
 8004550:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8004552:	2300      	movs	r3, #0
 8004554:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8004556:	68fb      	ldr	r3, [r7, #12]
 8004558:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800455a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800455c:	2b00      	cmp	r3, #0
 800455e:	d109      	bne.n	8004574 <xQueueGenericSend+0x30>
 8004560:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004564:	f383 8811 	msr	BASEPRI, r3
 8004568:	f3bf 8f6f 	isb	sy
 800456c:	f3bf 8f4f 	dsb	sy
 8004570:	62bb      	str	r3, [r7, #40]	; 0x28
 8004572:	e7fe      	b.n	8004572 <xQueueGenericSend+0x2e>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8004574:	68bb      	ldr	r3, [r7, #8]
 8004576:	2b00      	cmp	r3, #0
 8004578:	d103      	bne.n	8004582 <xQueueGenericSend+0x3e>
 800457a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800457c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800457e:	2b00      	cmp	r3, #0
 8004580:	d101      	bne.n	8004586 <xQueueGenericSend+0x42>
 8004582:	2301      	movs	r3, #1
 8004584:	e000      	b.n	8004588 <xQueueGenericSend+0x44>
 8004586:	2300      	movs	r3, #0
 8004588:	2b00      	cmp	r3, #0
 800458a:	d109      	bne.n	80045a0 <xQueueGenericSend+0x5c>
 800458c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004590:	f383 8811 	msr	BASEPRI, r3
 8004594:	f3bf 8f6f 	isb	sy
 8004598:	f3bf 8f4f 	dsb	sy
 800459c:	627b      	str	r3, [r7, #36]	; 0x24
 800459e:	e7fe      	b.n	800459e <xQueueGenericSend+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80045a0:	683b      	ldr	r3, [r7, #0]
 80045a2:	2b02      	cmp	r3, #2
 80045a4:	d103      	bne.n	80045ae <xQueueGenericSend+0x6a>
 80045a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80045a8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80045aa:	2b01      	cmp	r3, #1
 80045ac:	d101      	bne.n	80045b2 <xQueueGenericSend+0x6e>
 80045ae:	2301      	movs	r3, #1
 80045b0:	e000      	b.n	80045b4 <xQueueGenericSend+0x70>
 80045b2:	2300      	movs	r3, #0
 80045b4:	2b00      	cmp	r3, #0
 80045b6:	d109      	bne.n	80045cc <xQueueGenericSend+0x88>
 80045b8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80045bc:	f383 8811 	msr	BASEPRI, r3
 80045c0:	f3bf 8f6f 	isb	sy
 80045c4:	f3bf 8f4f 	dsb	sy
 80045c8:	623b      	str	r3, [r7, #32]
 80045ca:	e7fe      	b.n	80045ca <xQueueGenericSend+0x86>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80045cc:	f001 fb22 	bl	8005c14 <xTaskGetSchedulerState>
 80045d0:	4603      	mov	r3, r0
 80045d2:	2b00      	cmp	r3, #0
 80045d4:	d102      	bne.n	80045dc <xQueueGenericSend+0x98>
 80045d6:	687b      	ldr	r3, [r7, #4]
 80045d8:	2b00      	cmp	r3, #0
 80045da:	d101      	bne.n	80045e0 <xQueueGenericSend+0x9c>
 80045dc:	2301      	movs	r3, #1
 80045de:	e000      	b.n	80045e2 <xQueueGenericSend+0x9e>
 80045e0:	2300      	movs	r3, #0
 80045e2:	2b00      	cmp	r3, #0
 80045e4:	d109      	bne.n	80045fa <xQueueGenericSend+0xb6>
 80045e6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80045ea:	f383 8811 	msr	BASEPRI, r3
 80045ee:	f3bf 8f6f 	isb	sy
 80045f2:	f3bf 8f4f 	dsb	sy
 80045f6:	61fb      	str	r3, [r7, #28]
 80045f8:	e7fe      	b.n	80045f8 <xQueueGenericSend+0xb4>
	/* This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80045fa:	f001 fe6f 	bl	80062dc <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80045fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004600:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004602:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004604:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004606:	429a      	cmp	r2, r3
 8004608:	d302      	bcc.n	8004610 <xQueueGenericSend+0xcc>
 800460a:	683b      	ldr	r3, [r7, #0]
 800460c:	2b02      	cmp	r3, #2
 800460e:	d129      	bne.n	8004664 <xQueueGenericSend+0x120>
			{
				traceQUEUE_SEND( pxQueue );
				xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8004610:	683a      	ldr	r2, [r7, #0]
 8004612:	68b9      	ldr	r1, [r7, #8]
 8004614:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8004616:	f000 fc7b 	bl	8004f10 <prvCopyDataToQueue>
 800461a:	62f8      	str	r0, [r7, #44]	; 0x2c
				}
				#else /* configUSE_QUEUE_SETS */
				{
					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800461c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800461e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004620:	2b00      	cmp	r3, #0
 8004622:	d010      	beq.n	8004646 <xQueueGenericSend+0x102>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8004624:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004626:	3324      	adds	r3, #36	; 0x24
 8004628:	4618      	mov	r0, r3
 800462a:	f001 f955 	bl	80058d8 <xTaskRemoveFromEventList>
 800462e:	4603      	mov	r3, r0
 8004630:	2b00      	cmp	r3, #0
 8004632:	d013      	beq.n	800465c <xQueueGenericSend+0x118>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8004634:	4b3f      	ldr	r3, [pc, #252]	; (8004734 <xQueueGenericSend+0x1f0>)
 8004636:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800463a:	601a      	str	r2, [r3, #0]
 800463c:	f3bf 8f4f 	dsb	sy
 8004640:	f3bf 8f6f 	isb	sy
 8004644:	e00a      	b.n	800465c <xQueueGenericSend+0x118>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8004646:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004648:	2b00      	cmp	r3, #0
 800464a:	d007      	beq.n	800465c <xQueueGenericSend+0x118>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800464c:	4b39      	ldr	r3, [pc, #228]	; (8004734 <xQueueGenericSend+0x1f0>)
 800464e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004652:	601a      	str	r2, [r3, #0]
 8004654:	f3bf 8f4f 	dsb	sy
 8004658:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800465c:	f001 fe6c 	bl	8006338 <vPortExitCritical>
				return pdPASS;
 8004660:	2301      	movs	r3, #1
 8004662:	e063      	b.n	800472c <xQueueGenericSend+0x1e8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8004664:	687b      	ldr	r3, [r7, #4]
 8004666:	2b00      	cmp	r3, #0
 8004668:	d103      	bne.n	8004672 <xQueueGenericSend+0x12e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800466a:	f001 fe65 	bl	8006338 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800466e:	2300      	movs	r3, #0
 8004670:	e05c      	b.n	800472c <xQueueGenericSend+0x1e8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8004672:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004674:	2b00      	cmp	r3, #0
 8004676:	d106      	bne.n	8004686 <xQueueGenericSend+0x142>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8004678:	f107 0314 	add.w	r3, r7, #20
 800467c:	4618      	mov	r0, r3
 800467e:	f001 f98d 	bl	800599c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8004682:	2301      	movs	r3, #1
 8004684:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8004686:	f001 fe57 	bl	8006338 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800468a:	f000 ff1f 	bl	80054cc <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800468e:	f001 fe25 	bl	80062dc <vPortEnterCritical>
 8004692:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004694:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8004698:	b25b      	sxtb	r3, r3
 800469a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800469e:	d103      	bne.n	80046a8 <xQueueGenericSend+0x164>
 80046a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80046a2:	2200      	movs	r2, #0
 80046a4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80046a8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80046aa:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80046ae:	b25b      	sxtb	r3, r3
 80046b0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80046b4:	d103      	bne.n	80046be <xQueueGenericSend+0x17a>
 80046b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80046b8:	2200      	movs	r2, #0
 80046ba:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80046be:	f001 fe3b 	bl	8006338 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80046c2:	1d3a      	adds	r2, r7, #4
 80046c4:	f107 0314 	add.w	r3, r7, #20
 80046c8:	4611      	mov	r1, r2
 80046ca:	4618      	mov	r0, r3
 80046cc:	f001 f97c 	bl	80059c8 <xTaskCheckForTimeOut>
 80046d0:	4603      	mov	r3, r0
 80046d2:	2b00      	cmp	r3, #0
 80046d4:	d124      	bne.n	8004720 <xQueueGenericSend+0x1dc>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 80046d6:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80046d8:	f000 fd12 	bl	8005100 <prvIsQueueFull>
 80046dc:	4603      	mov	r3, r0
 80046de:	2b00      	cmp	r3, #0
 80046e0:	d018      	beq.n	8004714 <xQueueGenericSend+0x1d0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 80046e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80046e4:	3310      	adds	r3, #16
 80046e6:	687a      	ldr	r2, [r7, #4]
 80046e8:	4611      	mov	r1, r2
 80046ea:	4618      	mov	r0, r3
 80046ec:	f001 f8d0 	bl	8005890 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 80046f0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80046f2:	f000 fc9d 	bl	8005030 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 80046f6:	f000 fef7 	bl	80054e8 <xTaskResumeAll>
 80046fa:	4603      	mov	r3, r0
 80046fc:	2b00      	cmp	r3, #0
 80046fe:	f47f af7c 	bne.w	80045fa <xQueueGenericSend+0xb6>
				{
					portYIELD_WITHIN_API();
 8004702:	4b0c      	ldr	r3, [pc, #48]	; (8004734 <xQueueGenericSend+0x1f0>)
 8004704:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004708:	601a      	str	r2, [r3, #0]
 800470a:	f3bf 8f4f 	dsb	sy
 800470e:	f3bf 8f6f 	isb	sy
 8004712:	e772      	b.n	80045fa <xQueueGenericSend+0xb6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8004714:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8004716:	f000 fc8b 	bl	8005030 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800471a:	f000 fee5 	bl	80054e8 <xTaskResumeAll>
 800471e:	e76c      	b.n	80045fa <xQueueGenericSend+0xb6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8004720:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8004722:	f000 fc85 	bl	8005030 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8004726:	f000 fedf 	bl	80054e8 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800472a:	2300      	movs	r3, #0
		}
	}
}
 800472c:	4618      	mov	r0, r3
 800472e:	3738      	adds	r7, #56	; 0x38
 8004730:	46bd      	mov	sp, r7
 8004732:	bd80      	pop	{r7, pc}
 8004734:	e000ed04 	.word	0xe000ed04

08004738 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8004738:	b580      	push	{r7, lr}
 800473a:	b08e      	sub	sp, #56	; 0x38
 800473c:	af00      	add	r7, sp, #0
 800473e:	60f8      	str	r0, [r7, #12]
 8004740:	60b9      	str	r1, [r7, #8]
 8004742:	607a      	str	r2, [r7, #4]
 8004744:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8004746:	68fb      	ldr	r3, [r7, #12]
 8004748:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800474a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800474c:	2b00      	cmp	r3, #0
 800474e:	d109      	bne.n	8004764 <xQueueGenericSendFromISR+0x2c>
 8004750:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004754:	f383 8811 	msr	BASEPRI, r3
 8004758:	f3bf 8f6f 	isb	sy
 800475c:	f3bf 8f4f 	dsb	sy
 8004760:	627b      	str	r3, [r7, #36]	; 0x24
 8004762:	e7fe      	b.n	8004762 <xQueueGenericSendFromISR+0x2a>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8004764:	68bb      	ldr	r3, [r7, #8]
 8004766:	2b00      	cmp	r3, #0
 8004768:	d103      	bne.n	8004772 <xQueueGenericSendFromISR+0x3a>
 800476a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800476c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800476e:	2b00      	cmp	r3, #0
 8004770:	d101      	bne.n	8004776 <xQueueGenericSendFromISR+0x3e>
 8004772:	2301      	movs	r3, #1
 8004774:	e000      	b.n	8004778 <xQueueGenericSendFromISR+0x40>
 8004776:	2300      	movs	r3, #0
 8004778:	2b00      	cmp	r3, #0
 800477a:	d109      	bne.n	8004790 <xQueueGenericSendFromISR+0x58>
 800477c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004780:	f383 8811 	msr	BASEPRI, r3
 8004784:	f3bf 8f6f 	isb	sy
 8004788:	f3bf 8f4f 	dsb	sy
 800478c:	623b      	str	r3, [r7, #32]
 800478e:	e7fe      	b.n	800478e <xQueueGenericSendFromISR+0x56>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8004790:	683b      	ldr	r3, [r7, #0]
 8004792:	2b02      	cmp	r3, #2
 8004794:	d103      	bne.n	800479e <xQueueGenericSendFromISR+0x66>
 8004796:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004798:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800479a:	2b01      	cmp	r3, #1
 800479c:	d101      	bne.n	80047a2 <xQueueGenericSendFromISR+0x6a>
 800479e:	2301      	movs	r3, #1
 80047a0:	e000      	b.n	80047a4 <xQueueGenericSendFromISR+0x6c>
 80047a2:	2300      	movs	r3, #0
 80047a4:	2b00      	cmp	r3, #0
 80047a6:	d109      	bne.n	80047bc <xQueueGenericSendFromISR+0x84>
 80047a8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80047ac:	f383 8811 	msr	BASEPRI, r3
 80047b0:	f3bf 8f6f 	isb	sy
 80047b4:	f3bf 8f4f 	dsb	sy
 80047b8:	61fb      	str	r3, [r7, #28]
 80047ba:	e7fe      	b.n	80047ba <xQueueGenericSendFromISR+0x82>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80047bc:	f001 fe6a 	bl	8006494 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 80047c0:	f3ef 8211 	mrs	r2, BASEPRI
 80047c4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80047c8:	f383 8811 	msr	BASEPRI, r3
 80047cc:	f3bf 8f6f 	isb	sy
 80047d0:	f3bf 8f4f 	dsb	sy
 80047d4:	61ba      	str	r2, [r7, #24]
 80047d6:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 80047d8:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80047da:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80047dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80047de:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80047e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80047e2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80047e4:	429a      	cmp	r2, r3
 80047e6:	d302      	bcc.n	80047ee <xQueueGenericSendFromISR+0xb6>
 80047e8:	683b      	ldr	r3, [r7, #0]
 80047ea:	2b02      	cmp	r3, #2
 80047ec:	d12c      	bne.n	8004848 <xQueueGenericSendFromISR+0x110>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 80047ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80047f0:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80047f4:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80047f8:	683a      	ldr	r2, [r7, #0]
 80047fa:	68b9      	ldr	r1, [r7, #8]
 80047fc:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80047fe:	f000 fb87 	bl	8004f10 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8004802:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 8004806:	f1b3 3fff 	cmp.w	r3, #4294967295
 800480a:	d112      	bne.n	8004832 <xQueueGenericSendFromISR+0xfa>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800480c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800480e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004810:	2b00      	cmp	r3, #0
 8004812:	d016      	beq.n	8004842 <xQueueGenericSendFromISR+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8004814:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004816:	3324      	adds	r3, #36	; 0x24
 8004818:	4618      	mov	r0, r3
 800481a:	f001 f85d 	bl	80058d8 <xTaskRemoveFromEventList>
 800481e:	4603      	mov	r3, r0
 8004820:	2b00      	cmp	r3, #0
 8004822:	d00e      	beq.n	8004842 <xQueueGenericSendFromISR+0x10a>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8004824:	687b      	ldr	r3, [r7, #4]
 8004826:	2b00      	cmp	r3, #0
 8004828:	d00b      	beq.n	8004842 <xQueueGenericSendFromISR+0x10a>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800482a:	687b      	ldr	r3, [r7, #4]
 800482c:	2201      	movs	r2, #1
 800482e:	601a      	str	r2, [r3, #0]
 8004830:	e007      	b.n	8004842 <xQueueGenericSendFromISR+0x10a>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8004832:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8004836:	3301      	adds	r3, #1
 8004838:	b2db      	uxtb	r3, r3
 800483a:	b25a      	sxtb	r2, r3
 800483c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800483e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8004842:	2301      	movs	r3, #1
 8004844:	637b      	str	r3, [r7, #52]	; 0x34
		{
 8004846:	e001      	b.n	800484c <xQueueGenericSendFromISR+0x114>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8004848:	2300      	movs	r3, #0
 800484a:	637b      	str	r3, [r7, #52]	; 0x34
 800484c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800484e:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8004850:	693b      	ldr	r3, [r7, #16]
 8004852:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8004856:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8004858:	4618      	mov	r0, r3
 800485a:	3738      	adds	r7, #56	; 0x38
 800485c:	46bd      	mov	sp, r7
 800485e:	bd80      	pop	{r7, pc}

08004860 <xQueueGiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8004860:	b580      	push	{r7, lr}
 8004862:	b08e      	sub	sp, #56	; 0x38
 8004864:	af00      	add	r7, sp, #0
 8004866:	6078      	str	r0, [r7, #4]
 8004868:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 800486a:	687b      	ldr	r3, [r7, #4]
 800486c:	633b      	str	r3, [r7, #48]	; 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 800486e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004870:	2b00      	cmp	r3, #0
 8004872:	d109      	bne.n	8004888 <xQueueGiveFromISR+0x28>
	__asm volatile
 8004874:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004878:	f383 8811 	msr	BASEPRI, r3
 800487c:	f3bf 8f6f 	isb	sy
 8004880:	f3bf 8f4f 	dsb	sy
 8004884:	623b      	str	r3, [r7, #32]
 8004886:	e7fe      	b.n	8004886 <xQueueGiveFromISR+0x26>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8004888:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800488a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800488c:	2b00      	cmp	r3, #0
 800488e:	d009      	beq.n	80048a4 <xQueueGiveFromISR+0x44>
 8004890:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004894:	f383 8811 	msr	BASEPRI, r3
 8004898:	f3bf 8f6f 	isb	sy
 800489c:	f3bf 8f4f 	dsb	sy
 80048a0:	61fb      	str	r3, [r7, #28]
 80048a2:	e7fe      	b.n	80048a2 <xQueueGiveFromISR+0x42>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->pxMutexHolder != NULL ) ) );
 80048a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80048a6:	681b      	ldr	r3, [r3, #0]
 80048a8:	2b00      	cmp	r3, #0
 80048aa:	d103      	bne.n	80048b4 <xQueueGiveFromISR+0x54>
 80048ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80048ae:	685b      	ldr	r3, [r3, #4]
 80048b0:	2b00      	cmp	r3, #0
 80048b2:	d101      	bne.n	80048b8 <xQueueGiveFromISR+0x58>
 80048b4:	2301      	movs	r3, #1
 80048b6:	e000      	b.n	80048ba <xQueueGiveFromISR+0x5a>
 80048b8:	2300      	movs	r3, #0
 80048ba:	2b00      	cmp	r3, #0
 80048bc:	d109      	bne.n	80048d2 <xQueueGiveFromISR+0x72>
 80048be:	f04f 0350 	mov.w	r3, #80	; 0x50
 80048c2:	f383 8811 	msr	BASEPRI, r3
 80048c6:	f3bf 8f6f 	isb	sy
 80048ca:	f3bf 8f4f 	dsb	sy
 80048ce:	61bb      	str	r3, [r7, #24]
 80048d0:	e7fe      	b.n	80048d0 <xQueueGiveFromISR+0x70>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80048d2:	f001 fddf 	bl	8006494 <vPortValidateInterruptPriority>
	__asm volatile
 80048d6:	f3ef 8211 	mrs	r2, BASEPRI
 80048da:	f04f 0350 	mov.w	r3, #80	; 0x50
 80048de:	f383 8811 	msr	BASEPRI, r3
 80048e2:	f3bf 8f6f 	isb	sy
 80048e6:	f3bf 8f4f 	dsb	sy
 80048ea:	617a      	str	r2, [r7, #20]
 80048ec:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 80048ee:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80048f0:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80048f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80048f4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80048f6:	62bb      	str	r3, [r7, #40]	; 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 80048f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80048fa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80048fc:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80048fe:	429a      	cmp	r2, r3
 8004900:	d22b      	bcs.n	800495a <xQueueGiveFromISR+0xfa>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8004902:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004904:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004908:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800490c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800490e:	1c5a      	adds	r2, r3, #1
 8004910:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004912:	639a      	str	r2, [r3, #56]	; 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8004914:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8004918:	f1b3 3fff 	cmp.w	r3, #4294967295
 800491c:	d112      	bne.n	8004944 <xQueueGiveFromISR+0xe4>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800491e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004920:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004922:	2b00      	cmp	r3, #0
 8004924:	d016      	beq.n	8004954 <xQueueGiveFromISR+0xf4>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8004926:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004928:	3324      	adds	r3, #36	; 0x24
 800492a:	4618      	mov	r0, r3
 800492c:	f000 ffd4 	bl	80058d8 <xTaskRemoveFromEventList>
 8004930:	4603      	mov	r3, r0
 8004932:	2b00      	cmp	r3, #0
 8004934:	d00e      	beq.n	8004954 <xQueueGiveFromISR+0xf4>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8004936:	683b      	ldr	r3, [r7, #0]
 8004938:	2b00      	cmp	r3, #0
 800493a:	d00b      	beq.n	8004954 <xQueueGiveFromISR+0xf4>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800493c:	683b      	ldr	r3, [r7, #0]
 800493e:	2201      	movs	r2, #1
 8004940:	601a      	str	r2, [r3, #0]
 8004942:	e007      	b.n	8004954 <xQueueGiveFromISR+0xf4>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8004944:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8004948:	3301      	adds	r3, #1
 800494a:	b2db      	uxtb	r3, r3
 800494c:	b25a      	sxtb	r2, r3
 800494e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004950:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8004954:	2301      	movs	r3, #1
 8004956:	637b      	str	r3, [r7, #52]	; 0x34
 8004958:	e001      	b.n	800495e <xQueueGiveFromISR+0xfe>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800495a:	2300      	movs	r3, #0
 800495c:	637b      	str	r3, [r7, #52]	; 0x34
 800495e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004960:	60fb      	str	r3, [r7, #12]
	__asm volatile
 8004962:	68fb      	ldr	r3, [r7, #12]
 8004964:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8004968:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800496a:	4618      	mov	r0, r3
 800496c:	3738      	adds	r7, #56	; 0x38
 800496e:	46bd      	mov	sp, r7
 8004970:	bd80      	pop	{r7, pc}
	...

08004974 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8004974:	b580      	push	{r7, lr}
 8004976:	b08c      	sub	sp, #48	; 0x30
 8004978:	af00      	add	r7, sp, #0
 800497a:	60f8      	str	r0, [r7, #12]
 800497c:	60b9      	str	r1, [r7, #8]
 800497e:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8004980:	2300      	movs	r3, #0
 8004982:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8004984:	68fb      	ldr	r3, [r7, #12]
 8004986:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8004988:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800498a:	2b00      	cmp	r3, #0
 800498c:	d109      	bne.n	80049a2 <xQueueReceive+0x2e>
	__asm volatile
 800498e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004992:	f383 8811 	msr	BASEPRI, r3
 8004996:	f3bf 8f6f 	isb	sy
 800499a:	f3bf 8f4f 	dsb	sy
 800499e:	623b      	str	r3, [r7, #32]
 80049a0:	e7fe      	b.n	80049a0 <xQueueReceive+0x2c>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80049a2:	68bb      	ldr	r3, [r7, #8]
 80049a4:	2b00      	cmp	r3, #0
 80049a6:	d103      	bne.n	80049b0 <xQueueReceive+0x3c>
 80049a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80049aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80049ac:	2b00      	cmp	r3, #0
 80049ae:	d101      	bne.n	80049b4 <xQueueReceive+0x40>
 80049b0:	2301      	movs	r3, #1
 80049b2:	e000      	b.n	80049b6 <xQueueReceive+0x42>
 80049b4:	2300      	movs	r3, #0
 80049b6:	2b00      	cmp	r3, #0
 80049b8:	d109      	bne.n	80049ce <xQueueReceive+0x5a>
 80049ba:	f04f 0350 	mov.w	r3, #80	; 0x50
 80049be:	f383 8811 	msr	BASEPRI, r3
 80049c2:	f3bf 8f6f 	isb	sy
 80049c6:	f3bf 8f4f 	dsb	sy
 80049ca:	61fb      	str	r3, [r7, #28]
 80049cc:	e7fe      	b.n	80049cc <xQueueReceive+0x58>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80049ce:	f001 f921 	bl	8005c14 <xTaskGetSchedulerState>
 80049d2:	4603      	mov	r3, r0
 80049d4:	2b00      	cmp	r3, #0
 80049d6:	d102      	bne.n	80049de <xQueueReceive+0x6a>
 80049d8:	687b      	ldr	r3, [r7, #4]
 80049da:	2b00      	cmp	r3, #0
 80049dc:	d101      	bne.n	80049e2 <xQueueReceive+0x6e>
 80049de:	2301      	movs	r3, #1
 80049e0:	e000      	b.n	80049e4 <xQueueReceive+0x70>
 80049e2:	2300      	movs	r3, #0
 80049e4:	2b00      	cmp	r3, #0
 80049e6:	d109      	bne.n	80049fc <xQueueReceive+0x88>
 80049e8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80049ec:	f383 8811 	msr	BASEPRI, r3
 80049f0:	f3bf 8f6f 	isb	sy
 80049f4:	f3bf 8f4f 	dsb	sy
 80049f8:	61bb      	str	r3, [r7, #24]
 80049fa:	e7fe      	b.n	80049fa <xQueueReceive+0x86>
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
 80049fc:	f001 fc6e 	bl	80062dc <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8004a00:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004a02:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004a04:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8004a06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a08:	2b00      	cmp	r3, #0
 8004a0a:	d01f      	beq.n	8004a4c <xQueueReceive+0xd8>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8004a0c:	68b9      	ldr	r1, [r7, #8]
 8004a0e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004a10:	f000 fae8 	bl	8004fe4 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8004a14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a16:	1e5a      	subs	r2, r3, #1
 8004a18:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004a1a:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8004a1c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004a1e:	691b      	ldr	r3, [r3, #16]
 8004a20:	2b00      	cmp	r3, #0
 8004a22:	d00f      	beq.n	8004a44 <xQueueReceive+0xd0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8004a24:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004a26:	3310      	adds	r3, #16
 8004a28:	4618      	mov	r0, r3
 8004a2a:	f000 ff55 	bl	80058d8 <xTaskRemoveFromEventList>
 8004a2e:	4603      	mov	r3, r0
 8004a30:	2b00      	cmp	r3, #0
 8004a32:	d007      	beq.n	8004a44 <xQueueReceive+0xd0>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8004a34:	4b3c      	ldr	r3, [pc, #240]	; (8004b28 <xQueueReceive+0x1b4>)
 8004a36:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004a3a:	601a      	str	r2, [r3, #0]
 8004a3c:	f3bf 8f4f 	dsb	sy
 8004a40:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8004a44:	f001 fc78 	bl	8006338 <vPortExitCritical>
				return pdPASS;
 8004a48:	2301      	movs	r3, #1
 8004a4a:	e069      	b.n	8004b20 <xQueueReceive+0x1ac>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8004a4c:	687b      	ldr	r3, [r7, #4]
 8004a4e:	2b00      	cmp	r3, #0
 8004a50:	d103      	bne.n	8004a5a <xQueueReceive+0xe6>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8004a52:	f001 fc71 	bl	8006338 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8004a56:	2300      	movs	r3, #0
 8004a58:	e062      	b.n	8004b20 <xQueueReceive+0x1ac>
				}
				else if( xEntryTimeSet == pdFALSE )
 8004a5a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004a5c:	2b00      	cmp	r3, #0
 8004a5e:	d106      	bne.n	8004a6e <xQueueReceive+0xfa>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8004a60:	f107 0310 	add.w	r3, r7, #16
 8004a64:	4618      	mov	r0, r3
 8004a66:	f000 ff99 	bl	800599c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8004a6a:	2301      	movs	r3, #1
 8004a6c:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8004a6e:	f001 fc63 	bl	8006338 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8004a72:	f000 fd2b 	bl	80054cc <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8004a76:	f001 fc31 	bl	80062dc <vPortEnterCritical>
 8004a7a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004a7c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8004a80:	b25b      	sxtb	r3, r3
 8004a82:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004a86:	d103      	bne.n	8004a90 <xQueueReceive+0x11c>
 8004a88:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004a8a:	2200      	movs	r2, #0
 8004a8c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004a90:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004a92:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004a96:	b25b      	sxtb	r3, r3
 8004a98:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004a9c:	d103      	bne.n	8004aa6 <xQueueReceive+0x132>
 8004a9e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004aa0:	2200      	movs	r2, #0
 8004aa2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004aa6:	f001 fc47 	bl	8006338 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8004aaa:	1d3a      	adds	r2, r7, #4
 8004aac:	f107 0310 	add.w	r3, r7, #16
 8004ab0:	4611      	mov	r1, r2
 8004ab2:	4618      	mov	r0, r3
 8004ab4:	f000 ff88 	bl	80059c8 <xTaskCheckForTimeOut>
 8004ab8:	4603      	mov	r3, r0
 8004aba:	2b00      	cmp	r3, #0
 8004abc:	d123      	bne.n	8004b06 <xQueueReceive+0x192>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8004abe:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004ac0:	f000 fb08 	bl	80050d4 <prvIsQueueEmpty>
 8004ac4:	4603      	mov	r3, r0
 8004ac6:	2b00      	cmp	r3, #0
 8004ac8:	d017      	beq.n	8004afa <xQueueReceive+0x186>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8004aca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004acc:	3324      	adds	r3, #36	; 0x24
 8004ace:	687a      	ldr	r2, [r7, #4]
 8004ad0:	4611      	mov	r1, r2
 8004ad2:	4618      	mov	r0, r3
 8004ad4:	f000 fedc 	bl	8005890 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8004ad8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004ada:	f000 faa9 	bl	8005030 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8004ade:	f000 fd03 	bl	80054e8 <xTaskResumeAll>
 8004ae2:	4603      	mov	r3, r0
 8004ae4:	2b00      	cmp	r3, #0
 8004ae6:	d189      	bne.n	80049fc <xQueueReceive+0x88>
				{
					portYIELD_WITHIN_API();
 8004ae8:	4b0f      	ldr	r3, [pc, #60]	; (8004b28 <xQueueReceive+0x1b4>)
 8004aea:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004aee:	601a      	str	r2, [r3, #0]
 8004af0:	f3bf 8f4f 	dsb	sy
 8004af4:	f3bf 8f6f 	isb	sy
 8004af8:	e780      	b.n	80049fc <xQueueReceive+0x88>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8004afa:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004afc:	f000 fa98 	bl	8005030 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8004b00:	f000 fcf2 	bl	80054e8 <xTaskResumeAll>
 8004b04:	e77a      	b.n	80049fc <xQueueReceive+0x88>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8004b06:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004b08:	f000 fa92 	bl	8005030 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8004b0c:	f000 fcec 	bl	80054e8 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8004b10:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004b12:	f000 fadf 	bl	80050d4 <prvIsQueueEmpty>
 8004b16:	4603      	mov	r3, r0
 8004b18:	2b00      	cmp	r3, #0
 8004b1a:	f43f af6f 	beq.w	80049fc <xQueueReceive+0x88>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8004b1e:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
}
 8004b20:	4618      	mov	r0, r3
 8004b22:	3730      	adds	r7, #48	; 0x30
 8004b24:	46bd      	mov	sp, r7
 8004b26:	bd80      	pop	{r7, pc}
 8004b28:	e000ed04 	.word	0xe000ed04

08004b2c <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 8004b2c:	b580      	push	{r7, lr}
 8004b2e:	b08e      	sub	sp, #56	; 0x38
 8004b30:	af00      	add	r7, sp, #0
 8004b32:	6078      	str	r0, [r7, #4]
 8004b34:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 8004b36:	2300      	movs	r3, #0
 8004b38:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8004b3a:	687b      	ldr	r3, [r7, #4]
 8004b3c:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 8004b3e:	2300      	movs	r3, #0
 8004b40:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8004b42:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004b44:	2b00      	cmp	r3, #0
 8004b46:	d109      	bne.n	8004b5c <xQueueSemaphoreTake+0x30>
 8004b48:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004b4c:	f383 8811 	msr	BASEPRI, r3
 8004b50:	f3bf 8f6f 	isb	sy
 8004b54:	f3bf 8f4f 	dsb	sy
 8004b58:	623b      	str	r3, [r7, #32]
 8004b5a:	e7fe      	b.n	8004b5a <xQueueSemaphoreTake+0x2e>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8004b5c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004b5e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b60:	2b00      	cmp	r3, #0
 8004b62:	d009      	beq.n	8004b78 <xQueueSemaphoreTake+0x4c>
 8004b64:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004b68:	f383 8811 	msr	BASEPRI, r3
 8004b6c:	f3bf 8f6f 	isb	sy
 8004b70:	f3bf 8f4f 	dsb	sy
 8004b74:	61fb      	str	r3, [r7, #28]
 8004b76:	e7fe      	b.n	8004b76 <xQueueSemaphoreTake+0x4a>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8004b78:	f001 f84c 	bl	8005c14 <xTaskGetSchedulerState>
 8004b7c:	4603      	mov	r3, r0
 8004b7e:	2b00      	cmp	r3, #0
 8004b80:	d102      	bne.n	8004b88 <xQueueSemaphoreTake+0x5c>
 8004b82:	683b      	ldr	r3, [r7, #0]
 8004b84:	2b00      	cmp	r3, #0
 8004b86:	d101      	bne.n	8004b8c <xQueueSemaphoreTake+0x60>
 8004b88:	2301      	movs	r3, #1
 8004b8a:	e000      	b.n	8004b8e <xQueueSemaphoreTake+0x62>
 8004b8c:	2300      	movs	r3, #0
 8004b8e:	2b00      	cmp	r3, #0
 8004b90:	d109      	bne.n	8004ba6 <xQueueSemaphoreTake+0x7a>
 8004b92:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004b96:	f383 8811 	msr	BASEPRI, r3
 8004b9a:	f3bf 8f6f 	isb	sy
 8004b9e:	f3bf 8f4f 	dsb	sy
 8004ba2:	61bb      	str	r3, [r7, #24]
 8004ba4:	e7fe      	b.n	8004ba4 <xQueueSemaphoreTake+0x78>
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
 8004ba6:	f001 fb99 	bl	80062dc <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 8004baa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004bac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004bae:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 8004bb0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004bb2:	2b00      	cmp	r3, #0
 8004bb4:	d024      	beq.n	8004c00 <xQueueSemaphoreTake+0xd4>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 8004bb6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004bb8:	1e5a      	subs	r2, r3, #1
 8004bba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004bbc:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8004bbe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004bc0:	681b      	ldr	r3, [r3, #0]
 8004bc2:	2b00      	cmp	r3, #0
 8004bc4:	d104      	bne.n	8004bd0 <xQueueSemaphoreTake+0xa4>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->pxMutexHolder = ( int8_t * ) pvTaskIncrementMutexHeldCount(); /*lint !e961 Cast is not redundant as TaskHandle_t is a typedef. */
 8004bc6:	f001 f9eb 	bl	8005fa0 <pvTaskIncrementMutexHeldCount>
 8004bca:	4602      	mov	r2, r0
 8004bcc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004bce:	605a      	str	r2, [r3, #4]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8004bd0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004bd2:	691b      	ldr	r3, [r3, #16]
 8004bd4:	2b00      	cmp	r3, #0
 8004bd6:	d00f      	beq.n	8004bf8 <xQueueSemaphoreTake+0xcc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8004bd8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004bda:	3310      	adds	r3, #16
 8004bdc:	4618      	mov	r0, r3
 8004bde:	f000 fe7b 	bl	80058d8 <xTaskRemoveFromEventList>
 8004be2:	4603      	mov	r3, r0
 8004be4:	2b00      	cmp	r3, #0
 8004be6:	d007      	beq.n	8004bf8 <xQueueSemaphoreTake+0xcc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8004be8:	4b53      	ldr	r3, [pc, #332]	; (8004d38 <xQueueSemaphoreTake+0x20c>)
 8004bea:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004bee:	601a      	str	r2, [r3, #0]
 8004bf0:	f3bf 8f4f 	dsb	sy
 8004bf4:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8004bf8:	f001 fb9e 	bl	8006338 <vPortExitCritical>
				return pdPASS;
 8004bfc:	2301      	movs	r3, #1
 8004bfe:	e096      	b.n	8004d2e <xQueueSemaphoreTake+0x202>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8004c00:	683b      	ldr	r3, [r7, #0]
 8004c02:	2b00      	cmp	r3, #0
 8004c04:	d110      	bne.n	8004c28 <xQueueSemaphoreTake+0xfc>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 8004c06:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004c08:	2b00      	cmp	r3, #0
 8004c0a:	d009      	beq.n	8004c20 <xQueueSemaphoreTake+0xf4>
 8004c0c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004c10:	f383 8811 	msr	BASEPRI, r3
 8004c14:	f3bf 8f6f 	isb	sy
 8004c18:	f3bf 8f4f 	dsb	sy
 8004c1c:	617b      	str	r3, [r7, #20]
 8004c1e:	e7fe      	b.n	8004c1e <xQueueSemaphoreTake+0xf2>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 8004c20:	f001 fb8a 	bl	8006338 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8004c24:	2300      	movs	r3, #0
 8004c26:	e082      	b.n	8004d2e <xQueueSemaphoreTake+0x202>
				}
				else if( xEntryTimeSet == pdFALSE )
 8004c28:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004c2a:	2b00      	cmp	r3, #0
 8004c2c:	d106      	bne.n	8004c3c <xQueueSemaphoreTake+0x110>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8004c2e:	f107 030c 	add.w	r3, r7, #12
 8004c32:	4618      	mov	r0, r3
 8004c34:	f000 feb2 	bl	800599c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8004c38:	2301      	movs	r3, #1
 8004c3a:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8004c3c:	f001 fb7c 	bl	8006338 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 8004c40:	f000 fc44 	bl	80054cc <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8004c44:	f001 fb4a 	bl	80062dc <vPortEnterCritical>
 8004c48:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004c4a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8004c4e:	b25b      	sxtb	r3, r3
 8004c50:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004c54:	d103      	bne.n	8004c5e <xQueueSemaphoreTake+0x132>
 8004c56:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004c58:	2200      	movs	r2, #0
 8004c5a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004c5e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004c60:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004c64:	b25b      	sxtb	r3, r3
 8004c66:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004c6a:	d103      	bne.n	8004c74 <xQueueSemaphoreTake+0x148>
 8004c6c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004c6e:	2200      	movs	r2, #0
 8004c70:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004c74:	f001 fb60 	bl	8006338 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8004c78:	463a      	mov	r2, r7
 8004c7a:	f107 030c 	add.w	r3, r7, #12
 8004c7e:	4611      	mov	r1, r2
 8004c80:	4618      	mov	r0, r3
 8004c82:	f000 fea1 	bl	80059c8 <xTaskCheckForTimeOut>
 8004c86:	4603      	mov	r3, r0
 8004c88:	2b00      	cmp	r3, #0
 8004c8a:	d132      	bne.n	8004cf2 <xQueueSemaphoreTake+0x1c6>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8004c8c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8004c8e:	f000 fa21 	bl	80050d4 <prvIsQueueEmpty>
 8004c92:	4603      	mov	r3, r0
 8004c94:	2b00      	cmp	r3, #0
 8004c96:	d026      	beq.n	8004ce6 <xQueueSemaphoreTake+0x1ba>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8004c98:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004c9a:	681b      	ldr	r3, [r3, #0]
 8004c9c:	2b00      	cmp	r3, #0
 8004c9e:	d109      	bne.n	8004cb4 <xQueueSemaphoreTake+0x188>
					{
						taskENTER_CRITICAL();
 8004ca0:	f001 fb1c 	bl	80062dc <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( ( void * ) pxQueue->pxMutexHolder );
 8004ca4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004ca6:	685b      	ldr	r3, [r3, #4]
 8004ca8:	4618      	mov	r0, r3
 8004caa:	f000 ffd1 	bl	8005c50 <xTaskPriorityInherit>
 8004cae:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 8004cb0:	f001 fb42 	bl	8006338 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8004cb4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004cb6:	3324      	adds	r3, #36	; 0x24
 8004cb8:	683a      	ldr	r2, [r7, #0]
 8004cba:	4611      	mov	r1, r2
 8004cbc:	4618      	mov	r0, r3
 8004cbe:	f000 fde7 	bl	8005890 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8004cc2:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8004cc4:	f000 f9b4 	bl	8005030 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8004cc8:	f000 fc0e 	bl	80054e8 <xTaskResumeAll>
 8004ccc:	4603      	mov	r3, r0
 8004cce:	2b00      	cmp	r3, #0
 8004cd0:	f47f af69 	bne.w	8004ba6 <xQueueSemaphoreTake+0x7a>
				{
					portYIELD_WITHIN_API();
 8004cd4:	4b18      	ldr	r3, [pc, #96]	; (8004d38 <xQueueSemaphoreTake+0x20c>)
 8004cd6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004cda:	601a      	str	r2, [r3, #0]
 8004cdc:	f3bf 8f4f 	dsb	sy
 8004ce0:	f3bf 8f6f 	isb	sy
 8004ce4:	e75f      	b.n	8004ba6 <xQueueSemaphoreTake+0x7a>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 8004ce6:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8004ce8:	f000 f9a2 	bl	8005030 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8004cec:	f000 fbfc 	bl	80054e8 <xTaskResumeAll>
 8004cf0:	e759      	b.n	8004ba6 <xQueueSemaphoreTake+0x7a>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 8004cf2:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8004cf4:	f000 f99c 	bl	8005030 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8004cf8:	f000 fbf6 	bl	80054e8 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8004cfc:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8004cfe:	f000 f9e9 	bl	80050d4 <prvIsQueueEmpty>
 8004d02:	4603      	mov	r3, r0
 8004d04:	2b00      	cmp	r3, #0
 8004d06:	f43f af4e 	beq.w	8004ba6 <xQueueSemaphoreTake+0x7a>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 8004d0a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004d0c:	2b00      	cmp	r3, #0
 8004d0e:	d00d      	beq.n	8004d2c <xQueueSemaphoreTake+0x200>
					{
						taskENTER_CRITICAL();
 8004d10:	f001 fae4 	bl	80062dc <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 8004d14:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8004d16:	f000 f8e3 	bl	8004ee0 <prvGetDisinheritPriorityAfterTimeout>
 8004d1a:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( ( void * ) pxQueue->pxMutexHolder, uxHighestWaitingPriority );
 8004d1c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004d1e:	685b      	ldr	r3, [r3, #4]
 8004d20:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8004d22:	4618      	mov	r0, r3
 8004d24:	f001 f89e 	bl	8005e64 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 8004d28:	f001 fb06 	bl	8006338 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8004d2c:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
}
 8004d2e:	4618      	mov	r0, r3
 8004d30:	3738      	adds	r7, #56	; 0x38
 8004d32:	46bd      	mov	sp, r7
 8004d34:	bd80      	pop	{r7, pc}
 8004d36:	bf00      	nop
 8004d38:	e000ed04 	.word	0xe000ed04

08004d3c <xQueueReceiveFromISR>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8004d3c:	b580      	push	{r7, lr}
 8004d3e:	b08e      	sub	sp, #56	; 0x38
 8004d40:	af00      	add	r7, sp, #0
 8004d42:	60f8      	str	r0, [r7, #12]
 8004d44:	60b9      	str	r1, [r7, #8]
 8004d46:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8004d48:	68fb      	ldr	r3, [r7, #12]
 8004d4a:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8004d4c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004d4e:	2b00      	cmp	r3, #0
 8004d50:	d109      	bne.n	8004d66 <xQueueReceiveFromISR+0x2a>
 8004d52:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004d56:	f383 8811 	msr	BASEPRI, r3
 8004d5a:	f3bf 8f6f 	isb	sy
 8004d5e:	f3bf 8f4f 	dsb	sy
 8004d62:	623b      	str	r3, [r7, #32]
 8004d64:	e7fe      	b.n	8004d64 <xQueueReceiveFromISR+0x28>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8004d66:	68bb      	ldr	r3, [r7, #8]
 8004d68:	2b00      	cmp	r3, #0
 8004d6a:	d103      	bne.n	8004d74 <xQueueReceiveFromISR+0x38>
 8004d6c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004d6e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d70:	2b00      	cmp	r3, #0
 8004d72:	d101      	bne.n	8004d78 <xQueueReceiveFromISR+0x3c>
 8004d74:	2301      	movs	r3, #1
 8004d76:	e000      	b.n	8004d7a <xQueueReceiveFromISR+0x3e>
 8004d78:	2300      	movs	r3, #0
 8004d7a:	2b00      	cmp	r3, #0
 8004d7c:	d109      	bne.n	8004d92 <xQueueReceiveFromISR+0x56>
 8004d7e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004d82:	f383 8811 	msr	BASEPRI, r3
 8004d86:	f3bf 8f6f 	isb	sy
 8004d8a:	f3bf 8f4f 	dsb	sy
 8004d8e:	61fb      	str	r3, [r7, #28]
 8004d90:	e7fe      	b.n	8004d90 <xQueueReceiveFromISR+0x54>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8004d92:	f001 fb7f 	bl	8006494 <vPortValidateInterruptPriority>
	__asm volatile
 8004d96:	f3ef 8211 	mrs	r2, BASEPRI
 8004d9a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004d9e:	f383 8811 	msr	BASEPRI, r3
 8004da2:	f3bf 8f6f 	isb	sy
 8004da6:	f3bf 8f4f 	dsb	sy
 8004daa:	61ba      	str	r2, [r7, #24]
 8004dac:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 8004dae:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8004db0:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8004db2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004db4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004db6:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8004db8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004dba:	2b00      	cmp	r3, #0
 8004dbc:	d02f      	beq.n	8004e1e <xQueueReceiveFromISR+0xe2>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 8004dbe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004dc0:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8004dc4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 8004dc8:	68b9      	ldr	r1, [r7, #8]
 8004dca:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8004dcc:	f000 f90a 	bl	8004fe4 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8004dd0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004dd2:	1e5a      	subs	r2, r3, #1
 8004dd4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004dd6:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 8004dd8:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8004ddc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004de0:	d112      	bne.n	8004e08 <xQueueReceiveFromISR+0xcc>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8004de2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004de4:	691b      	ldr	r3, [r3, #16]
 8004de6:	2b00      	cmp	r3, #0
 8004de8:	d016      	beq.n	8004e18 <xQueueReceiveFromISR+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8004dea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004dec:	3310      	adds	r3, #16
 8004dee:	4618      	mov	r0, r3
 8004df0:	f000 fd72 	bl	80058d8 <xTaskRemoveFromEventList>
 8004df4:	4603      	mov	r3, r0
 8004df6:	2b00      	cmp	r3, #0
 8004df8:	d00e      	beq.n	8004e18 <xQueueReceiveFromISR+0xdc>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 8004dfa:	687b      	ldr	r3, [r7, #4]
 8004dfc:	2b00      	cmp	r3, #0
 8004dfe:	d00b      	beq.n	8004e18 <xQueueReceiveFromISR+0xdc>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 8004e00:	687b      	ldr	r3, [r7, #4]
 8004e02:	2201      	movs	r2, #1
 8004e04:	601a      	str	r2, [r3, #0]
 8004e06:	e007      	b.n	8004e18 <xQueueReceiveFromISR+0xdc>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 8004e08:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8004e0c:	3301      	adds	r3, #1
 8004e0e:	b2db      	uxtb	r3, r3
 8004e10:	b25a      	sxtb	r2, r3
 8004e12:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004e14:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 8004e18:	2301      	movs	r3, #1
 8004e1a:	637b      	str	r3, [r7, #52]	; 0x34
 8004e1c:	e001      	b.n	8004e22 <xQueueReceiveFromISR+0xe6>
		}
		else
		{
			xReturn = pdFAIL;
 8004e1e:	2300      	movs	r3, #0
 8004e20:	637b      	str	r3, [r7, #52]	; 0x34
 8004e22:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004e24:	613b      	str	r3, [r7, #16]
	__asm volatile
 8004e26:	693b      	ldr	r3, [r7, #16]
 8004e28:	f383 8811 	msr	BASEPRI, r3
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8004e2c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8004e2e:	4618      	mov	r0, r3
 8004e30:	3738      	adds	r7, #56	; 0x38
 8004e32:	46bd      	mov	sp, r7
 8004e34:	bd80      	pop	{r7, pc}

08004e36 <uxQueueMessagesWaiting>:
	return xReturn;
}
/*-----------------------------------------------------------*/

UBaseType_t uxQueueMessagesWaiting( const QueueHandle_t xQueue )
{
 8004e36:	b580      	push	{r7, lr}
 8004e38:	b084      	sub	sp, #16
 8004e3a:	af00      	add	r7, sp, #0
 8004e3c:	6078      	str	r0, [r7, #4]
UBaseType_t uxReturn;

	configASSERT( xQueue );
 8004e3e:	687b      	ldr	r3, [r7, #4]
 8004e40:	2b00      	cmp	r3, #0
 8004e42:	d109      	bne.n	8004e58 <uxQueueMessagesWaiting+0x22>
	__asm volatile
 8004e44:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004e48:	f383 8811 	msr	BASEPRI, r3
 8004e4c:	f3bf 8f6f 	isb	sy
 8004e50:	f3bf 8f4f 	dsb	sy
 8004e54:	60bb      	str	r3, [r7, #8]
 8004e56:	e7fe      	b.n	8004e56 <uxQueueMessagesWaiting+0x20>

	taskENTER_CRITICAL();
 8004e58:	f001 fa40 	bl	80062dc <vPortEnterCritical>
	{
		uxReturn = ( ( Queue_t * ) xQueue )->uxMessagesWaiting;
 8004e5c:	687b      	ldr	r3, [r7, #4]
 8004e5e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004e60:	60fb      	str	r3, [r7, #12]
	}
	taskEXIT_CRITICAL();
 8004e62:	f001 fa69 	bl	8006338 <vPortExitCritical>

	return uxReturn;
 8004e66:	68fb      	ldr	r3, [r7, #12]
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
 8004e68:	4618      	mov	r0, r3
 8004e6a:	3710      	adds	r7, #16
 8004e6c:	46bd      	mov	sp, r7
 8004e6e:	bd80      	pop	{r7, pc}

08004e70 <uxQueueMessagesWaitingFromISR>:
	return uxReturn;
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
/*-----------------------------------------------------------*/

UBaseType_t uxQueueMessagesWaitingFromISR( const QueueHandle_t xQueue )
{
 8004e70:	b480      	push	{r7}
 8004e72:	b085      	sub	sp, #20
 8004e74:	af00      	add	r7, sp, #0
 8004e76:	6078      	str	r0, [r7, #4]
UBaseType_t uxReturn;

	configASSERT( xQueue );
 8004e78:	687b      	ldr	r3, [r7, #4]
 8004e7a:	2b00      	cmp	r3, #0
 8004e7c:	d109      	bne.n	8004e92 <uxQueueMessagesWaitingFromISR+0x22>
 8004e7e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004e82:	f383 8811 	msr	BASEPRI, r3
 8004e86:	f3bf 8f6f 	isb	sy
 8004e8a:	f3bf 8f4f 	dsb	sy
 8004e8e:	60bb      	str	r3, [r7, #8]
 8004e90:	e7fe      	b.n	8004e90 <uxQueueMessagesWaitingFromISR+0x20>

	uxReturn = ( ( Queue_t * ) xQueue )->uxMessagesWaiting;
 8004e92:	687b      	ldr	r3, [r7, #4]
 8004e94:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004e96:	60fb      	str	r3, [r7, #12]

	return uxReturn;
 8004e98:	68fb      	ldr	r3, [r7, #12]
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
 8004e9a:	4618      	mov	r0, r3
 8004e9c:	3714      	adds	r7, #20
 8004e9e:	46bd      	mov	sp, r7
 8004ea0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ea4:	4770      	bx	lr

08004ea6 <vQueueDelete>:
/*-----------------------------------------------------------*/

void vQueueDelete( QueueHandle_t xQueue )
{
 8004ea6:	b580      	push	{r7, lr}
 8004ea8:	b084      	sub	sp, #16
 8004eaa:	af00      	add	r7, sp, #0
 8004eac:	6078      	str	r0, [r7, #4]
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8004eae:	687b      	ldr	r3, [r7, #4]
 8004eb0:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8004eb2:	68fb      	ldr	r3, [r7, #12]
 8004eb4:	2b00      	cmp	r3, #0
 8004eb6:	d109      	bne.n	8004ecc <vQueueDelete+0x26>
 8004eb8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004ebc:	f383 8811 	msr	BASEPRI, r3
 8004ec0:	f3bf 8f6f 	isb	sy
 8004ec4:	f3bf 8f4f 	dsb	sy
 8004ec8:	60bb      	str	r3, [r7, #8]
 8004eca:	e7fe      	b.n	8004eca <vQueueDelete+0x24>
	traceQUEUE_DELETE( pxQueue );

	#if ( configQUEUE_REGISTRY_SIZE > 0 )
	{
		vQueueUnregisterQueue( pxQueue );
 8004ecc:	68f8      	ldr	r0, [r7, #12]
 8004ece:	f000 f92f 	bl	8005130 <vQueueUnregisterQueue>

	#if( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) )
	{
		/* The queue can only have been allocated dynamically - free it
		again. */
		vPortFree( pxQueue );
 8004ed2:	68f8      	ldr	r0, [r7, #12]
 8004ed4:	f001 fbde 	bl	8006694 <vPortFree>
		/* The queue must have been statically allocated, so is not going to be
		deleted.  Avoid compiler warnings about the unused parameter. */
		( void ) pxQueue;
	}
	#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
}
 8004ed8:	bf00      	nop
 8004eda:	3710      	adds	r7, #16
 8004edc:	46bd      	mov	sp, r7
 8004ede:	bd80      	pop	{r7, pc}

08004ee0 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 8004ee0:	b480      	push	{r7}
 8004ee2:	b085      	sub	sp, #20
 8004ee4:	af00      	add	r7, sp, #0
 8004ee6:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0 )
 8004ee8:	687b      	ldr	r3, [r7, #4]
 8004eea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004eec:	2b00      	cmp	r3, #0
 8004eee:	d006      	beq.n	8004efe <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = configMAX_PRIORITIES - listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 8004ef0:	687b      	ldr	r3, [r7, #4]
 8004ef2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004ef4:	681b      	ldr	r3, [r3, #0]
 8004ef6:	f1c3 0320 	rsb	r3, r3, #32
 8004efa:	60fb      	str	r3, [r7, #12]
 8004efc:	e001      	b.n	8004f02 <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 8004efe:	2300      	movs	r3, #0
 8004f00:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 8004f02:	68fb      	ldr	r3, [r7, #12]
	}
 8004f04:	4618      	mov	r0, r3
 8004f06:	3714      	adds	r7, #20
 8004f08:	46bd      	mov	sp, r7
 8004f0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f0e:	4770      	bx	lr

08004f10 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8004f10:	b580      	push	{r7, lr}
 8004f12:	b086      	sub	sp, #24
 8004f14:	af00      	add	r7, sp, #0
 8004f16:	60f8      	str	r0, [r7, #12]
 8004f18:	60b9      	str	r1, [r7, #8]
 8004f1a:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8004f1c:	2300      	movs	r3, #0
 8004f1e:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8004f20:	68fb      	ldr	r3, [r7, #12]
 8004f22:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004f24:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8004f26:	68fb      	ldr	r3, [r7, #12]
 8004f28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f2a:	2b00      	cmp	r3, #0
 8004f2c:	d10d      	bne.n	8004f4a <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8004f2e:	68fb      	ldr	r3, [r7, #12]
 8004f30:	681b      	ldr	r3, [r3, #0]
 8004f32:	2b00      	cmp	r3, #0
 8004f34:	d14d      	bne.n	8004fd2 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
 8004f36:	68fb      	ldr	r3, [r7, #12]
 8004f38:	685b      	ldr	r3, [r3, #4]
 8004f3a:	4618      	mov	r0, r3
 8004f3c:	f000 ff0e 	bl	8005d5c <xTaskPriorityDisinherit>
 8004f40:	6178      	str	r0, [r7, #20]
				pxQueue->pxMutexHolder = NULL;
 8004f42:	68fb      	ldr	r3, [r7, #12]
 8004f44:	2200      	movs	r2, #0
 8004f46:	605a      	str	r2, [r3, #4]
 8004f48:	e043      	b.n	8004fd2 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8004f4a:	687b      	ldr	r3, [r7, #4]
 8004f4c:	2b00      	cmp	r3, #0
 8004f4e:	d119      	bne.n	8004f84 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0. */
 8004f50:	68fb      	ldr	r3, [r7, #12]
 8004f52:	6898      	ldr	r0, [r3, #8]
 8004f54:	68fb      	ldr	r3, [r7, #12]
 8004f56:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f58:	461a      	mov	r2, r3
 8004f5a:	68b9      	ldr	r1, [r7, #8]
 8004f5c:	f010 feab 	bl	8015cb6 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
 8004f60:	68fb      	ldr	r3, [r7, #12]
 8004f62:	689a      	ldr	r2, [r3, #8]
 8004f64:	68fb      	ldr	r3, [r7, #12]
 8004f66:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f68:	441a      	add	r2, r3
 8004f6a:	68fb      	ldr	r3, [r7, #12]
 8004f6c:	609a      	str	r2, [r3, #8]
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8004f6e:	68fb      	ldr	r3, [r7, #12]
 8004f70:	689a      	ldr	r2, [r3, #8]
 8004f72:	68fb      	ldr	r3, [r7, #12]
 8004f74:	685b      	ldr	r3, [r3, #4]
 8004f76:	429a      	cmp	r2, r3
 8004f78:	d32b      	bcc.n	8004fd2 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8004f7a:	68fb      	ldr	r3, [r7, #12]
 8004f7c:	681a      	ldr	r2, [r3, #0]
 8004f7e:	68fb      	ldr	r3, [r7, #12]
 8004f80:	609a      	str	r2, [r3, #8]
 8004f82:	e026      	b.n	8004fd2 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004f84:	68fb      	ldr	r3, [r7, #12]
 8004f86:	68d8      	ldr	r0, [r3, #12]
 8004f88:	68fb      	ldr	r3, [r7, #12]
 8004f8a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f8c:	461a      	mov	r2, r3
 8004f8e:	68b9      	ldr	r1, [r7, #8]
 8004f90:	f010 fe91 	bl	8015cb6 <memcpy>
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
 8004f94:	68fb      	ldr	r3, [r7, #12]
 8004f96:	68da      	ldr	r2, [r3, #12]
 8004f98:	68fb      	ldr	r3, [r7, #12]
 8004f9a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f9c:	425b      	negs	r3, r3
 8004f9e:	441a      	add	r2, r3
 8004fa0:	68fb      	ldr	r3, [r7, #12]
 8004fa2:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8004fa4:	68fb      	ldr	r3, [r7, #12]
 8004fa6:	68da      	ldr	r2, [r3, #12]
 8004fa8:	68fb      	ldr	r3, [r7, #12]
 8004faa:	681b      	ldr	r3, [r3, #0]
 8004fac:	429a      	cmp	r2, r3
 8004fae:	d207      	bcs.n	8004fc0 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
 8004fb0:	68fb      	ldr	r3, [r7, #12]
 8004fb2:	685a      	ldr	r2, [r3, #4]
 8004fb4:	68fb      	ldr	r3, [r7, #12]
 8004fb6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004fb8:	425b      	negs	r3, r3
 8004fba:	441a      	add	r2, r3
 8004fbc:	68fb      	ldr	r3, [r7, #12]
 8004fbe:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8004fc0:	687b      	ldr	r3, [r7, #4]
 8004fc2:	2b02      	cmp	r3, #2
 8004fc4:	d105      	bne.n	8004fd2 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8004fc6:	693b      	ldr	r3, [r7, #16]
 8004fc8:	2b00      	cmp	r3, #0
 8004fca:	d002      	beq.n	8004fd2 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8004fcc:	693b      	ldr	r3, [r7, #16]
 8004fce:	3b01      	subs	r3, #1
 8004fd0:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8004fd2:	693b      	ldr	r3, [r7, #16]
 8004fd4:	1c5a      	adds	r2, r3, #1
 8004fd6:	68fb      	ldr	r3, [r7, #12]
 8004fd8:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8004fda:	697b      	ldr	r3, [r7, #20]
}
 8004fdc:	4618      	mov	r0, r3
 8004fde:	3718      	adds	r7, #24
 8004fe0:	46bd      	mov	sp, r7
 8004fe2:	bd80      	pop	{r7, pc}

08004fe4 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8004fe4:	b580      	push	{r7, lr}
 8004fe6:	b082      	sub	sp, #8
 8004fe8:	af00      	add	r7, sp, #0
 8004fea:	6078      	str	r0, [r7, #4]
 8004fec:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8004fee:	687b      	ldr	r3, [r7, #4]
 8004ff0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ff2:	2b00      	cmp	r3, #0
 8004ff4:	d018      	beq.n	8005028 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
 8004ff6:	687b      	ldr	r3, [r7, #4]
 8004ff8:	68da      	ldr	r2, [r3, #12]
 8004ffa:	687b      	ldr	r3, [r7, #4]
 8004ffc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ffe:	441a      	add	r2, r3
 8005000:	687b      	ldr	r3, [r7, #4]
 8005002:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8005004:	687b      	ldr	r3, [r7, #4]
 8005006:	68da      	ldr	r2, [r3, #12]
 8005008:	687b      	ldr	r3, [r7, #4]
 800500a:	685b      	ldr	r3, [r3, #4]
 800500c:	429a      	cmp	r2, r3
 800500e:	d303      	bcc.n	8005018 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.pcReadFrom = pxQueue->pcHead;
 8005010:	687b      	ldr	r3, [r7, #4]
 8005012:	681a      	ldr	r2, [r3, #0]
 8005014:	687b      	ldr	r3, [r7, #4]
 8005016:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0. */
 8005018:	687b      	ldr	r3, [r7, #4]
 800501a:	68d9      	ldr	r1, [r3, #12]
 800501c:	687b      	ldr	r3, [r7, #4]
 800501e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005020:	461a      	mov	r2, r3
 8005022:	6838      	ldr	r0, [r7, #0]
 8005024:	f010 fe47 	bl	8015cb6 <memcpy>
	}
}
 8005028:	bf00      	nop
 800502a:	3708      	adds	r7, #8
 800502c:	46bd      	mov	sp, r7
 800502e:	bd80      	pop	{r7, pc}

08005030 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8005030:	b580      	push	{r7, lr}
 8005032:	b084      	sub	sp, #16
 8005034:	af00      	add	r7, sp, #0
 8005036:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8005038:	f001 f950 	bl	80062dc <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800503c:	687b      	ldr	r3, [r7, #4]
 800503e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8005042:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8005044:	e011      	b.n	800506a <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8005046:	687b      	ldr	r3, [r7, #4]
 8005048:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800504a:	2b00      	cmp	r3, #0
 800504c:	d012      	beq.n	8005074 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800504e:	687b      	ldr	r3, [r7, #4]
 8005050:	3324      	adds	r3, #36	; 0x24
 8005052:	4618      	mov	r0, r3
 8005054:	f000 fc40 	bl	80058d8 <xTaskRemoveFromEventList>
 8005058:	4603      	mov	r3, r0
 800505a:	2b00      	cmp	r3, #0
 800505c:	d001      	beq.n	8005062 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800505e:	f000 fd13 	bl	8005a88 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8005062:	7bfb      	ldrb	r3, [r7, #15]
 8005064:	3b01      	subs	r3, #1
 8005066:	b2db      	uxtb	r3, r3
 8005068:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800506a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800506e:	2b00      	cmp	r3, #0
 8005070:	dce9      	bgt.n	8005046 <prvUnlockQueue+0x16>
 8005072:	e000      	b.n	8005076 <prvUnlockQueue+0x46>
					break;
 8005074:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8005076:	687b      	ldr	r3, [r7, #4]
 8005078:	22ff      	movs	r2, #255	; 0xff
 800507a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 800507e:	f001 f95b 	bl	8006338 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8005082:	f001 f92b 	bl	80062dc <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8005086:	687b      	ldr	r3, [r7, #4]
 8005088:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800508c:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800508e:	e011      	b.n	80050b4 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8005090:	687b      	ldr	r3, [r7, #4]
 8005092:	691b      	ldr	r3, [r3, #16]
 8005094:	2b00      	cmp	r3, #0
 8005096:	d012      	beq.n	80050be <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005098:	687b      	ldr	r3, [r7, #4]
 800509a:	3310      	adds	r3, #16
 800509c:	4618      	mov	r0, r3
 800509e:	f000 fc1b 	bl	80058d8 <xTaskRemoveFromEventList>
 80050a2:	4603      	mov	r3, r0
 80050a4:	2b00      	cmp	r3, #0
 80050a6:	d001      	beq.n	80050ac <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 80050a8:	f000 fcee 	bl	8005a88 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 80050ac:	7bbb      	ldrb	r3, [r7, #14]
 80050ae:	3b01      	subs	r3, #1
 80050b0:	b2db      	uxtb	r3, r3
 80050b2:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 80050b4:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80050b8:	2b00      	cmp	r3, #0
 80050ba:	dce9      	bgt.n	8005090 <prvUnlockQueue+0x60>
 80050bc:	e000      	b.n	80050c0 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 80050be:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 80050c0:	687b      	ldr	r3, [r7, #4]
 80050c2:	22ff      	movs	r2, #255	; 0xff
 80050c4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 80050c8:	f001 f936 	bl	8006338 <vPortExitCritical>
}
 80050cc:	bf00      	nop
 80050ce:	3710      	adds	r7, #16
 80050d0:	46bd      	mov	sp, r7
 80050d2:	bd80      	pop	{r7, pc}

080050d4 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 80050d4:	b580      	push	{r7, lr}
 80050d6:	b084      	sub	sp, #16
 80050d8:	af00      	add	r7, sp, #0
 80050da:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80050dc:	f001 f8fe 	bl	80062dc <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 80050e0:	687b      	ldr	r3, [r7, #4]
 80050e2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80050e4:	2b00      	cmp	r3, #0
 80050e6:	d102      	bne.n	80050ee <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 80050e8:	2301      	movs	r3, #1
 80050ea:	60fb      	str	r3, [r7, #12]
 80050ec:	e001      	b.n	80050f2 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 80050ee:	2300      	movs	r3, #0
 80050f0:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80050f2:	f001 f921 	bl	8006338 <vPortExitCritical>

	return xReturn;
 80050f6:	68fb      	ldr	r3, [r7, #12]
}
 80050f8:	4618      	mov	r0, r3
 80050fa:	3710      	adds	r7, #16
 80050fc:	46bd      	mov	sp, r7
 80050fe:	bd80      	pop	{r7, pc}

08005100 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8005100:	b580      	push	{r7, lr}
 8005102:	b084      	sub	sp, #16
 8005104:	af00      	add	r7, sp, #0
 8005106:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8005108:	f001 f8e8 	bl	80062dc <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800510c:	687b      	ldr	r3, [r7, #4]
 800510e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005110:	687b      	ldr	r3, [r7, #4]
 8005112:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005114:	429a      	cmp	r2, r3
 8005116:	d102      	bne.n	800511e <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8005118:	2301      	movs	r3, #1
 800511a:	60fb      	str	r3, [r7, #12]
 800511c:	e001      	b.n	8005122 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800511e:	2300      	movs	r3, #0
 8005120:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8005122:	f001 f909 	bl	8006338 <vPortExitCritical>

	return xReturn;
 8005126:	68fb      	ldr	r3, [r7, #12]
}
 8005128:	4618      	mov	r0, r3
 800512a:	3710      	adds	r7, #16
 800512c:	46bd      	mov	sp, r7
 800512e:	bd80      	pop	{r7, pc}

08005130 <vQueueUnregisterQueue>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueUnregisterQueue( QueueHandle_t xQueue )
	{
 8005130:	b480      	push	{r7}
 8005132:	b085      	sub	sp, #20
 8005134:	af00      	add	r7, sp, #0
 8005136:	6078      	str	r0, [r7, #4]
	UBaseType_t ux;

		/* See if the handle of the queue being unregistered in actually in the
		registry. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8005138:	2300      	movs	r3, #0
 800513a:	60fb      	str	r3, [r7, #12]
 800513c:	e016      	b.n	800516c <vQueueUnregisterQueue+0x3c>
		{
			if( xQueueRegistry[ ux ].xHandle == xQueue )
 800513e:	4a10      	ldr	r2, [pc, #64]	; (8005180 <vQueueUnregisterQueue+0x50>)
 8005140:	68fb      	ldr	r3, [r7, #12]
 8005142:	00db      	lsls	r3, r3, #3
 8005144:	4413      	add	r3, r2
 8005146:	685b      	ldr	r3, [r3, #4]
 8005148:	687a      	ldr	r2, [r7, #4]
 800514a:	429a      	cmp	r2, r3
 800514c:	d10b      	bne.n	8005166 <vQueueUnregisterQueue+0x36>
			{
				/* Set the name to NULL to show that this slot if free again. */
				xQueueRegistry[ ux ].pcQueueName = NULL;
 800514e:	4a0c      	ldr	r2, [pc, #48]	; (8005180 <vQueueUnregisterQueue+0x50>)
 8005150:	68fb      	ldr	r3, [r7, #12]
 8005152:	2100      	movs	r1, #0
 8005154:	f842 1033 	str.w	r1, [r2, r3, lsl #3]

				/* Set the handle to NULL to ensure the same queue handle cannot
				appear in the registry twice if it is added, removed, then
				added again. */
				xQueueRegistry[ ux ].xHandle = ( QueueHandle_t ) 0;
 8005158:	4a09      	ldr	r2, [pc, #36]	; (8005180 <vQueueUnregisterQueue+0x50>)
 800515a:	68fb      	ldr	r3, [r7, #12]
 800515c:	00db      	lsls	r3, r3, #3
 800515e:	4413      	add	r3, r2
 8005160:	2200      	movs	r2, #0
 8005162:	605a      	str	r2, [r3, #4]
				break;
 8005164:	e005      	b.n	8005172 <vQueueUnregisterQueue+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8005166:	68fb      	ldr	r3, [r7, #12]
 8005168:	3301      	adds	r3, #1
 800516a:	60fb      	str	r3, [r7, #12]
 800516c:	68fb      	ldr	r3, [r7, #12]
 800516e:	2b07      	cmp	r3, #7
 8005170:	d9e5      	bls.n	800513e <vQueueUnregisterQueue+0xe>
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

	} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 8005172:	bf00      	nop
 8005174:	3714      	adds	r7, #20
 8005176:	46bd      	mov	sp, r7
 8005178:	f85d 7b04 	ldr.w	r7, [sp], #4
 800517c:	4770      	bx	lr
 800517e:	bf00      	nop
 8005180:	24008764 	.word	0x24008764

08005184 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8005184:	b580      	push	{r7, lr}
 8005186:	b08c      	sub	sp, #48	; 0x30
 8005188:	af04      	add	r7, sp, #16
 800518a:	60f8      	str	r0, [r7, #12]
 800518c:	60b9      	str	r1, [r7, #8]
 800518e:	603b      	str	r3, [r7, #0]
 8005190:	4613      	mov	r3, r2
 8005192:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005194:	88fb      	ldrh	r3, [r7, #6]
 8005196:	009b      	lsls	r3, r3, #2
 8005198:	4618      	mov	r0, r3
 800519a:	f001 f9b9 	bl	8006510 <pvPortMalloc>
 800519e:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 80051a0:	697b      	ldr	r3, [r7, #20]
 80051a2:	2b00      	cmp	r3, #0
 80051a4:	d00e      	beq.n	80051c4 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
 80051a6:	2054      	movs	r0, #84	; 0x54
 80051a8:	f001 f9b2 	bl	8006510 <pvPortMalloc>
 80051ac:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 80051ae:	69fb      	ldr	r3, [r7, #28]
 80051b0:	2b00      	cmp	r3, #0
 80051b2:	d003      	beq.n	80051bc <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 80051b4:	69fb      	ldr	r3, [r7, #28]
 80051b6:	697a      	ldr	r2, [r7, #20]
 80051b8:	631a      	str	r2, [r3, #48]	; 0x30
 80051ba:	e005      	b.n	80051c8 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 80051bc:	6978      	ldr	r0, [r7, #20]
 80051be:	f001 fa69 	bl	8006694 <vPortFree>
 80051c2:	e001      	b.n	80051c8 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 80051c4:	2300      	movs	r3, #0
 80051c6:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 80051c8:	69fb      	ldr	r3, [r7, #28]
 80051ca:	2b00      	cmp	r3, #0
 80051cc:	d013      	beq.n	80051f6 <xTaskCreate+0x72>
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 80051ce:	88fa      	ldrh	r2, [r7, #6]
 80051d0:	2300      	movs	r3, #0
 80051d2:	9303      	str	r3, [sp, #12]
 80051d4:	69fb      	ldr	r3, [r7, #28]
 80051d6:	9302      	str	r3, [sp, #8]
 80051d8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80051da:	9301      	str	r3, [sp, #4]
 80051dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80051de:	9300      	str	r3, [sp, #0]
 80051e0:	683b      	ldr	r3, [r7, #0]
 80051e2:	68b9      	ldr	r1, [r7, #8]
 80051e4:	68f8      	ldr	r0, [r7, #12]
 80051e6:	f000 f80e 	bl	8005206 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80051ea:	69f8      	ldr	r0, [r7, #28]
 80051ec:	f000 f88a 	bl	8005304 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 80051f0:	2301      	movs	r3, #1
 80051f2:	61bb      	str	r3, [r7, #24]
 80051f4:	e002      	b.n	80051fc <xTaskCreate+0x78>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 80051f6:	f04f 33ff 	mov.w	r3, #4294967295
 80051fa:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 80051fc:	69bb      	ldr	r3, [r7, #24]
	}
 80051fe:	4618      	mov	r0, r3
 8005200:	3720      	adds	r7, #32
 8005202:	46bd      	mov	sp, r7
 8005204:	bd80      	pop	{r7, pc}

08005206 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8005206:	b580      	push	{r7, lr}
 8005208:	b088      	sub	sp, #32
 800520a:	af00      	add	r7, sp, #0
 800520c:	60f8      	str	r0, [r7, #12]
 800520e:	60b9      	str	r1, [r7, #8]
 8005210:	607a      	str	r2, [r7, #4]
 8005212:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 8005214:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005216:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005218:	6879      	ldr	r1, [r7, #4]
 800521a:	f06f 4340 	mvn.w	r3, #3221225472	; 0xc0000000
 800521e:	440b      	add	r3, r1
 8005220:	009b      	lsls	r3, r3, #2
 8005222:	4413      	add	r3, r2
 8005224:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 8005226:	69bb      	ldr	r3, [r7, #24]
 8005228:	f023 0307 	bic.w	r3, r3, #7
 800522c:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800522e:	69bb      	ldr	r3, [r7, #24]
 8005230:	f003 0307 	and.w	r3, r3, #7
 8005234:	2b00      	cmp	r3, #0
 8005236:	d009      	beq.n	800524c <prvInitialiseNewTask+0x46>
 8005238:	f04f 0350 	mov.w	r3, #80	; 0x50
 800523c:	f383 8811 	msr	BASEPRI, r3
 8005240:	f3bf 8f6f 	isb	sy
 8005244:	f3bf 8f4f 	dsb	sy
 8005248:	617b      	str	r3, [r7, #20]
 800524a:	e7fe      	b.n	800524a <prvInitialiseNewTask+0x44>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800524c:	2300      	movs	r3, #0
 800524e:	61fb      	str	r3, [r7, #28]
 8005250:	e012      	b.n	8005278 <prvInitialiseNewTask+0x72>
	{
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8005252:	68ba      	ldr	r2, [r7, #8]
 8005254:	69fb      	ldr	r3, [r7, #28]
 8005256:	4413      	add	r3, r2
 8005258:	7819      	ldrb	r1, [r3, #0]
 800525a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800525c:	69fb      	ldr	r3, [r7, #28]
 800525e:	4413      	add	r3, r2
 8005260:	3334      	adds	r3, #52	; 0x34
 8005262:	460a      	mov	r2, r1
 8005264:	701a      	strb	r2, [r3, #0]

		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
		configMAX_TASK_NAME_LEN characters just in case the memory after the
		string is not accessible (extremely unlikely). */
		if( pcName[ x ] == 0x00 )
 8005266:	68ba      	ldr	r2, [r7, #8]
 8005268:	69fb      	ldr	r3, [r7, #28]
 800526a:	4413      	add	r3, r2
 800526c:	781b      	ldrb	r3, [r3, #0]
 800526e:	2b00      	cmp	r3, #0
 8005270:	d006      	beq.n	8005280 <prvInitialiseNewTask+0x7a>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8005272:	69fb      	ldr	r3, [r7, #28]
 8005274:	3301      	adds	r3, #1
 8005276:	61fb      	str	r3, [r7, #28]
 8005278:	69fb      	ldr	r3, [r7, #28]
 800527a:	2b0f      	cmp	r3, #15
 800527c:	d9e9      	bls.n	8005252 <prvInitialiseNewTask+0x4c>
 800527e:	e000      	b.n	8005282 <prvInitialiseNewTask+0x7c>
		{
			break;
 8005280:	bf00      	nop
		}
	}

	/* Ensure the name string is terminated in the case that the string length
	was greater or equal to configMAX_TASK_NAME_LEN. */
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8005282:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005284:	2200      	movs	r2, #0
 8005286:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800528a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800528c:	2b1f      	cmp	r3, #31
 800528e:	d901      	bls.n	8005294 <prvInitialiseNewTask+0x8e>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8005290:	231f      	movs	r3, #31
 8005292:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8005294:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005296:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005298:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800529a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800529c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800529e:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 80052a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80052a2:	2200      	movs	r2, #0
 80052a4:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80052a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80052a8:	3304      	adds	r3, #4
 80052aa:	4618      	mov	r0, r3
 80052ac:	f7fe ffc3 	bl	8004236 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 80052b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80052b2:	3318      	adds	r3, #24
 80052b4:	4618      	mov	r0, r3
 80052b6:	f7fe ffbe 	bl	8004236 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 80052ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80052bc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80052be:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80052c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80052c2:	f1c3 0220 	rsb	r2, r3, #32
 80052c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80052c8:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 80052ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80052cc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80052ce:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 80052d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80052d2:	2200      	movs	r2, #0
 80052d4:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80052d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80052d8:	2200      	movs	r2, #0
 80052da:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
	}
	#else /* portUSING_MPU_WRAPPERS */
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80052de:	683a      	ldr	r2, [r7, #0]
 80052e0:	68f9      	ldr	r1, [r7, #12]
 80052e2:	69b8      	ldr	r0, [r7, #24]
 80052e4:	f000 fed6 	bl	8006094 <pxPortInitialiseStack>
 80052e8:	4602      	mov	r2, r0
 80052ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80052ec:	601a      	str	r2, [r3, #0]
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( ( void * ) pxCreatedTask != NULL )
 80052ee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80052f0:	2b00      	cmp	r3, #0
 80052f2:	d002      	beq.n	80052fa <prvInitialiseNewTask+0xf4>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 80052f4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80052f6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80052f8:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80052fa:	bf00      	nop
 80052fc:	3720      	adds	r7, #32
 80052fe:	46bd      	mov	sp, r7
 8005300:	bd80      	pop	{r7, pc}
	...

08005304 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8005304:	b580      	push	{r7, lr}
 8005306:	b082      	sub	sp, #8
 8005308:	af00      	add	r7, sp, #0
 800530a:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800530c:	f000 ffe6 	bl	80062dc <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8005310:	4b2a      	ldr	r3, [pc, #168]	; (80053bc <prvAddNewTaskToReadyList+0xb8>)
 8005312:	681b      	ldr	r3, [r3, #0]
 8005314:	3301      	adds	r3, #1
 8005316:	4a29      	ldr	r2, [pc, #164]	; (80053bc <prvAddNewTaskToReadyList+0xb8>)
 8005318:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800531a:	4b29      	ldr	r3, [pc, #164]	; (80053c0 <prvAddNewTaskToReadyList+0xbc>)
 800531c:	681b      	ldr	r3, [r3, #0]
 800531e:	2b00      	cmp	r3, #0
 8005320:	d109      	bne.n	8005336 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8005322:	4a27      	ldr	r2, [pc, #156]	; (80053c0 <prvAddNewTaskToReadyList+0xbc>)
 8005324:	687b      	ldr	r3, [r7, #4]
 8005326:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8005328:	4b24      	ldr	r3, [pc, #144]	; (80053bc <prvAddNewTaskToReadyList+0xb8>)
 800532a:	681b      	ldr	r3, [r3, #0]
 800532c:	2b01      	cmp	r3, #1
 800532e:	d110      	bne.n	8005352 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8005330:	f000 fbce 	bl	8005ad0 <prvInitialiseTaskLists>
 8005334:	e00d      	b.n	8005352 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8005336:	4b23      	ldr	r3, [pc, #140]	; (80053c4 <prvAddNewTaskToReadyList+0xc0>)
 8005338:	681b      	ldr	r3, [r3, #0]
 800533a:	2b00      	cmp	r3, #0
 800533c:	d109      	bne.n	8005352 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800533e:	4b20      	ldr	r3, [pc, #128]	; (80053c0 <prvAddNewTaskToReadyList+0xbc>)
 8005340:	681b      	ldr	r3, [r3, #0]
 8005342:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005344:	687b      	ldr	r3, [r7, #4]
 8005346:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005348:	429a      	cmp	r2, r3
 800534a:	d802      	bhi.n	8005352 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800534c:	4a1c      	ldr	r2, [pc, #112]	; (80053c0 <prvAddNewTaskToReadyList+0xbc>)
 800534e:	687b      	ldr	r3, [r7, #4]
 8005350:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8005352:	4b1d      	ldr	r3, [pc, #116]	; (80053c8 <prvAddNewTaskToReadyList+0xc4>)
 8005354:	681b      	ldr	r3, [r3, #0]
 8005356:	3301      	adds	r3, #1
 8005358:	4a1b      	ldr	r2, [pc, #108]	; (80053c8 <prvAddNewTaskToReadyList+0xc4>)
 800535a:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800535c:	687b      	ldr	r3, [r7, #4]
 800535e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005360:	2201      	movs	r2, #1
 8005362:	409a      	lsls	r2, r3
 8005364:	4b19      	ldr	r3, [pc, #100]	; (80053cc <prvAddNewTaskToReadyList+0xc8>)
 8005366:	681b      	ldr	r3, [r3, #0]
 8005368:	4313      	orrs	r3, r2
 800536a:	4a18      	ldr	r2, [pc, #96]	; (80053cc <prvAddNewTaskToReadyList+0xc8>)
 800536c:	6013      	str	r3, [r2, #0]
 800536e:	687b      	ldr	r3, [r7, #4]
 8005370:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005372:	4613      	mov	r3, r2
 8005374:	009b      	lsls	r3, r3, #2
 8005376:	4413      	add	r3, r2
 8005378:	009b      	lsls	r3, r3, #2
 800537a:	4a15      	ldr	r2, [pc, #84]	; (80053d0 <prvAddNewTaskToReadyList+0xcc>)
 800537c:	441a      	add	r2, r3
 800537e:	687b      	ldr	r3, [r7, #4]
 8005380:	3304      	adds	r3, #4
 8005382:	4619      	mov	r1, r3
 8005384:	4610      	mov	r0, r2
 8005386:	f7fe ff63 	bl	8004250 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800538a:	f000 ffd5 	bl	8006338 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800538e:	4b0d      	ldr	r3, [pc, #52]	; (80053c4 <prvAddNewTaskToReadyList+0xc0>)
 8005390:	681b      	ldr	r3, [r3, #0]
 8005392:	2b00      	cmp	r3, #0
 8005394:	d00e      	beq.n	80053b4 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8005396:	4b0a      	ldr	r3, [pc, #40]	; (80053c0 <prvAddNewTaskToReadyList+0xbc>)
 8005398:	681b      	ldr	r3, [r3, #0]
 800539a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800539c:	687b      	ldr	r3, [r7, #4]
 800539e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80053a0:	429a      	cmp	r2, r3
 80053a2:	d207      	bcs.n	80053b4 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 80053a4:	4b0b      	ldr	r3, [pc, #44]	; (80053d4 <prvAddNewTaskToReadyList+0xd0>)
 80053a6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80053aa:	601a      	str	r2, [r3, #0]
 80053ac:	f3bf 8f4f 	dsb	sy
 80053b0:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80053b4:	bf00      	nop
 80053b6:	3708      	adds	r7, #8
 80053b8:	46bd      	mov	sp, r7
 80053ba:	bd80      	pop	{r7, pc}
 80053bc:	24000514 	.word	0x24000514
 80053c0:	24000220 	.word	0x24000220
 80053c4:	24000520 	.word	0x24000520
 80053c8:	24000530 	.word	0x24000530
 80053cc:	2400051c 	.word	0x2400051c
 80053d0:	24000224 	.word	0x24000224
 80053d4:	e000ed04 	.word	0xe000ed04

080053d8 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 80053d8:	b580      	push	{r7, lr}
 80053da:	b084      	sub	sp, #16
 80053dc:	af00      	add	r7, sp, #0
 80053de:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 80053e0:	2300      	movs	r3, #0
 80053e2:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 80053e4:	687b      	ldr	r3, [r7, #4]
 80053e6:	2b00      	cmp	r3, #0
 80053e8:	d016      	beq.n	8005418 <vTaskDelay+0x40>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 80053ea:	4b13      	ldr	r3, [pc, #76]	; (8005438 <vTaskDelay+0x60>)
 80053ec:	681b      	ldr	r3, [r3, #0]
 80053ee:	2b00      	cmp	r3, #0
 80053f0:	d009      	beq.n	8005406 <vTaskDelay+0x2e>
 80053f2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80053f6:	f383 8811 	msr	BASEPRI, r3
 80053fa:	f3bf 8f6f 	isb	sy
 80053fe:	f3bf 8f4f 	dsb	sy
 8005402:	60bb      	str	r3, [r7, #8]
 8005404:	e7fe      	b.n	8005404 <vTaskDelay+0x2c>
			vTaskSuspendAll();
 8005406:	f000 f861 	bl	80054cc <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800540a:	2100      	movs	r1, #0
 800540c:	6878      	ldr	r0, [r7, #4]
 800540e:	f000 fddb 	bl	8005fc8 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8005412:	f000 f869 	bl	80054e8 <xTaskResumeAll>
 8005416:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8005418:	68fb      	ldr	r3, [r7, #12]
 800541a:	2b00      	cmp	r3, #0
 800541c:	d107      	bne.n	800542e <vTaskDelay+0x56>
		{
			portYIELD_WITHIN_API();
 800541e:	4b07      	ldr	r3, [pc, #28]	; (800543c <vTaskDelay+0x64>)
 8005420:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005424:	601a      	str	r2, [r3, #0]
 8005426:	f3bf 8f4f 	dsb	sy
 800542a:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800542e:	bf00      	nop
 8005430:	3710      	adds	r7, #16
 8005432:	46bd      	mov	sp, r7
 8005434:	bd80      	pop	{r7, pc}
 8005436:	bf00      	nop
 8005438:	2400053c 	.word	0x2400053c
 800543c:	e000ed04 	.word	0xe000ed04

08005440 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8005440:	b580      	push	{r7, lr}
 8005442:	b086      	sub	sp, #24
 8005444:	af02      	add	r7, sp, #8
		}
	}
	#else
	{
		/* The Idle task is being created using dynamically allocated RAM. */
		xReturn = xTaskCreate(	prvIdleTask,
 8005446:	4b1b      	ldr	r3, [pc, #108]	; (80054b4 <vTaskStartScheduler+0x74>)
 8005448:	9301      	str	r3, [sp, #4]
 800544a:	2300      	movs	r3, #0
 800544c:	9300      	str	r3, [sp, #0]
 800544e:	2300      	movs	r3, #0
 8005450:	2280      	movs	r2, #128	; 0x80
 8005452:	4919      	ldr	r1, [pc, #100]	; (80054b8 <vTaskStartScheduler+0x78>)
 8005454:	4819      	ldr	r0, [pc, #100]	; (80054bc <vTaskStartScheduler+0x7c>)
 8005456:	f7ff fe95 	bl	8005184 <xTaskCreate>
 800545a:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800545c:	68fb      	ldr	r3, [r7, #12]
 800545e:	2b01      	cmp	r3, #1
 8005460:	d115      	bne.n	800548e <vTaskStartScheduler+0x4e>
 8005462:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005466:	f383 8811 	msr	BASEPRI, r3
 800546a:	f3bf 8f6f 	isb	sy
 800546e:	f3bf 8f4f 	dsb	sy
 8005472:	60bb      	str	r3, [r7, #8]
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8005474:	4b12      	ldr	r3, [pc, #72]	; (80054c0 <vTaskStartScheduler+0x80>)
 8005476:	f04f 32ff 	mov.w	r2, #4294967295
 800547a:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800547c:	4b11      	ldr	r3, [pc, #68]	; (80054c4 <vTaskStartScheduler+0x84>)
 800547e:	2201      	movs	r2, #1
 8005480:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
 8005482:	4b11      	ldr	r3, [pc, #68]	; (80054c8 <vTaskStartScheduler+0x88>)
 8005484:	2200      	movs	r2, #0
 8005486:	601a      	str	r2, [r3, #0]
		FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8005488:	f000 fe8a 	bl	80061a0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800548c:	e00d      	b.n	80054aa <vTaskStartScheduler+0x6a>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800548e:	68fb      	ldr	r3, [r7, #12]
 8005490:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005494:	d109      	bne.n	80054aa <vTaskStartScheduler+0x6a>
 8005496:	f04f 0350 	mov.w	r3, #80	; 0x50
 800549a:	f383 8811 	msr	BASEPRI, r3
 800549e:	f3bf 8f6f 	isb	sy
 80054a2:	f3bf 8f4f 	dsb	sy
 80054a6:	607b      	str	r3, [r7, #4]
 80054a8:	e7fe      	b.n	80054a8 <vTaskStartScheduler+0x68>
}
 80054aa:	bf00      	nop
 80054ac:	3710      	adds	r7, #16
 80054ae:	46bd      	mov	sp, r7
 80054b0:	bd80      	pop	{r7, pc}
 80054b2:	bf00      	nop
 80054b4:	24000538 	.word	0x24000538
 80054b8:	080195b8 	.word	0x080195b8
 80054bc:	08005aa1 	.word	0x08005aa1
 80054c0:	24000534 	.word	0x24000534
 80054c4:	24000520 	.word	0x24000520
 80054c8:	24000518 	.word	0x24000518

080054cc <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 80054cc:	b480      	push	{r7}
 80054ce:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 80054d0:	4b04      	ldr	r3, [pc, #16]	; (80054e4 <vTaskSuspendAll+0x18>)
 80054d2:	681b      	ldr	r3, [r3, #0]
 80054d4:	3301      	adds	r3, #1
 80054d6:	4a03      	ldr	r2, [pc, #12]	; (80054e4 <vTaskSuspendAll+0x18>)
 80054d8:	6013      	str	r3, [r2, #0]
}
 80054da:	bf00      	nop
 80054dc:	46bd      	mov	sp, r7
 80054de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054e2:	4770      	bx	lr
 80054e4:	2400053c 	.word	0x2400053c

080054e8 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 80054e8:	b580      	push	{r7, lr}
 80054ea:	b084      	sub	sp, #16
 80054ec:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 80054ee:	2300      	movs	r3, #0
 80054f0:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 80054f2:	2300      	movs	r3, #0
 80054f4:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 80054f6:	4b41      	ldr	r3, [pc, #260]	; (80055fc <xTaskResumeAll+0x114>)
 80054f8:	681b      	ldr	r3, [r3, #0]
 80054fa:	2b00      	cmp	r3, #0
 80054fc:	d109      	bne.n	8005512 <xTaskResumeAll+0x2a>
 80054fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005502:	f383 8811 	msr	BASEPRI, r3
 8005506:	f3bf 8f6f 	isb	sy
 800550a:	f3bf 8f4f 	dsb	sy
 800550e:	603b      	str	r3, [r7, #0]
 8005510:	e7fe      	b.n	8005510 <xTaskResumeAll+0x28>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8005512:	f000 fee3 	bl	80062dc <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8005516:	4b39      	ldr	r3, [pc, #228]	; (80055fc <xTaskResumeAll+0x114>)
 8005518:	681b      	ldr	r3, [r3, #0]
 800551a:	3b01      	subs	r3, #1
 800551c:	4a37      	ldr	r2, [pc, #220]	; (80055fc <xTaskResumeAll+0x114>)
 800551e:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005520:	4b36      	ldr	r3, [pc, #216]	; (80055fc <xTaskResumeAll+0x114>)
 8005522:	681b      	ldr	r3, [r3, #0]
 8005524:	2b00      	cmp	r3, #0
 8005526:	d161      	bne.n	80055ec <xTaskResumeAll+0x104>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8005528:	4b35      	ldr	r3, [pc, #212]	; (8005600 <xTaskResumeAll+0x118>)
 800552a:	681b      	ldr	r3, [r3, #0]
 800552c:	2b00      	cmp	r3, #0
 800552e:	d05d      	beq.n	80055ec <xTaskResumeAll+0x104>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8005530:	e02e      	b.n	8005590 <xTaskResumeAll+0xa8>
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 8005532:	4b34      	ldr	r3, [pc, #208]	; (8005604 <xTaskResumeAll+0x11c>)
 8005534:	68db      	ldr	r3, [r3, #12]
 8005536:	68db      	ldr	r3, [r3, #12]
 8005538:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800553a:	68fb      	ldr	r3, [r7, #12]
 800553c:	3318      	adds	r3, #24
 800553e:	4618      	mov	r0, r3
 8005540:	f7fe fee3 	bl	800430a <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005544:	68fb      	ldr	r3, [r7, #12]
 8005546:	3304      	adds	r3, #4
 8005548:	4618      	mov	r0, r3
 800554a:	f7fe fede 	bl	800430a <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800554e:	68fb      	ldr	r3, [r7, #12]
 8005550:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005552:	2201      	movs	r2, #1
 8005554:	409a      	lsls	r2, r3
 8005556:	4b2c      	ldr	r3, [pc, #176]	; (8005608 <xTaskResumeAll+0x120>)
 8005558:	681b      	ldr	r3, [r3, #0]
 800555a:	4313      	orrs	r3, r2
 800555c:	4a2a      	ldr	r2, [pc, #168]	; (8005608 <xTaskResumeAll+0x120>)
 800555e:	6013      	str	r3, [r2, #0]
 8005560:	68fb      	ldr	r3, [r7, #12]
 8005562:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005564:	4613      	mov	r3, r2
 8005566:	009b      	lsls	r3, r3, #2
 8005568:	4413      	add	r3, r2
 800556a:	009b      	lsls	r3, r3, #2
 800556c:	4a27      	ldr	r2, [pc, #156]	; (800560c <xTaskResumeAll+0x124>)
 800556e:	441a      	add	r2, r3
 8005570:	68fb      	ldr	r3, [r7, #12]
 8005572:	3304      	adds	r3, #4
 8005574:	4619      	mov	r1, r3
 8005576:	4610      	mov	r0, r2
 8005578:	f7fe fe6a 	bl	8004250 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800557c:	68fb      	ldr	r3, [r7, #12]
 800557e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005580:	4b23      	ldr	r3, [pc, #140]	; (8005610 <xTaskResumeAll+0x128>)
 8005582:	681b      	ldr	r3, [r3, #0]
 8005584:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005586:	429a      	cmp	r2, r3
 8005588:	d302      	bcc.n	8005590 <xTaskResumeAll+0xa8>
					{
						xYieldPending = pdTRUE;
 800558a:	4b22      	ldr	r3, [pc, #136]	; (8005614 <xTaskResumeAll+0x12c>)
 800558c:	2201      	movs	r2, #1
 800558e:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8005590:	4b1c      	ldr	r3, [pc, #112]	; (8005604 <xTaskResumeAll+0x11c>)
 8005592:	681b      	ldr	r3, [r3, #0]
 8005594:	2b00      	cmp	r3, #0
 8005596:	d1cc      	bne.n	8005532 <xTaskResumeAll+0x4a>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8005598:	68fb      	ldr	r3, [r7, #12]
 800559a:	2b00      	cmp	r3, #0
 800559c:	d001      	beq.n	80055a2 <xTaskResumeAll+0xba>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800559e:	f000 fb13 	bl	8005bc8 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 80055a2:	4b1d      	ldr	r3, [pc, #116]	; (8005618 <xTaskResumeAll+0x130>)
 80055a4:	681b      	ldr	r3, [r3, #0]
 80055a6:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 80055a8:	687b      	ldr	r3, [r7, #4]
 80055aa:	2b00      	cmp	r3, #0
 80055ac:	d010      	beq.n	80055d0 <xTaskResumeAll+0xe8>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 80055ae:	f000 f859 	bl	8005664 <xTaskIncrementTick>
 80055b2:	4603      	mov	r3, r0
 80055b4:	2b00      	cmp	r3, #0
 80055b6:	d002      	beq.n	80055be <xTaskResumeAll+0xd6>
							{
								xYieldPending = pdTRUE;
 80055b8:	4b16      	ldr	r3, [pc, #88]	; (8005614 <xTaskResumeAll+0x12c>)
 80055ba:	2201      	movs	r2, #1
 80055bc:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 80055be:	687b      	ldr	r3, [r7, #4]
 80055c0:	3b01      	subs	r3, #1
 80055c2:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 80055c4:	687b      	ldr	r3, [r7, #4]
 80055c6:	2b00      	cmp	r3, #0
 80055c8:	d1f1      	bne.n	80055ae <xTaskResumeAll+0xc6>

						uxPendedTicks = 0;
 80055ca:	4b13      	ldr	r3, [pc, #76]	; (8005618 <xTaskResumeAll+0x130>)
 80055cc:	2200      	movs	r2, #0
 80055ce:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 80055d0:	4b10      	ldr	r3, [pc, #64]	; (8005614 <xTaskResumeAll+0x12c>)
 80055d2:	681b      	ldr	r3, [r3, #0]
 80055d4:	2b00      	cmp	r3, #0
 80055d6:	d009      	beq.n	80055ec <xTaskResumeAll+0x104>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 80055d8:	2301      	movs	r3, #1
 80055da:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 80055dc:	4b0f      	ldr	r3, [pc, #60]	; (800561c <xTaskResumeAll+0x134>)
 80055de:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80055e2:	601a      	str	r2, [r3, #0]
 80055e4:	f3bf 8f4f 	dsb	sy
 80055e8:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80055ec:	f000 fea4 	bl	8006338 <vPortExitCritical>

	return xAlreadyYielded;
 80055f0:	68bb      	ldr	r3, [r7, #8]
}
 80055f2:	4618      	mov	r0, r3
 80055f4:	3710      	adds	r7, #16
 80055f6:	46bd      	mov	sp, r7
 80055f8:	bd80      	pop	{r7, pc}
 80055fa:	bf00      	nop
 80055fc:	2400053c 	.word	0x2400053c
 8005600:	24000514 	.word	0x24000514
 8005604:	240004d4 	.word	0x240004d4
 8005608:	2400051c 	.word	0x2400051c
 800560c:	24000224 	.word	0x24000224
 8005610:	24000220 	.word	0x24000220
 8005614:	24000528 	.word	0x24000528
 8005618:	24000524 	.word	0x24000524
 800561c:	e000ed04 	.word	0xe000ed04

08005620 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8005620:	b480      	push	{r7}
 8005622:	b083      	sub	sp, #12
 8005624:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8005626:	4b05      	ldr	r3, [pc, #20]	; (800563c <xTaskGetTickCount+0x1c>)
 8005628:	681b      	ldr	r3, [r3, #0]
 800562a:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 800562c:	687b      	ldr	r3, [r7, #4]
}
 800562e:	4618      	mov	r0, r3
 8005630:	370c      	adds	r7, #12
 8005632:	46bd      	mov	sp, r7
 8005634:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005638:	4770      	bx	lr
 800563a:	bf00      	nop
 800563c:	24000518 	.word	0x24000518

08005640 <xTaskGetTickCountFromISR>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCountFromISR( void )
{
 8005640:	b580      	push	{r7, lr}
 8005642:	b082      	sub	sp, #8
 8005644:	af00      	add	r7, sp, #0
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8005646:	f000 ff25 	bl	8006494 <vPortValidateInterruptPriority>

	uxSavedInterruptStatus = portTICK_TYPE_SET_INTERRUPT_MASK_FROM_ISR();
 800564a:	2300      	movs	r3, #0
 800564c:	607b      	str	r3, [r7, #4]
	{
		xReturn = xTickCount;
 800564e:	4b04      	ldr	r3, [pc, #16]	; (8005660 <xTaskGetTickCountFromISR+0x20>)
 8005650:	681b      	ldr	r3, [r3, #0]
 8005652:	603b      	str	r3, [r7, #0]
	}
	portTICK_TYPE_CLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8005654:	683b      	ldr	r3, [r7, #0]
}
 8005656:	4618      	mov	r0, r3
 8005658:	3708      	adds	r7, #8
 800565a:	46bd      	mov	sp, r7
 800565c:	bd80      	pop	{r7, pc}
 800565e:	bf00      	nop
 8005660:	24000518 	.word	0x24000518

08005664 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8005664:	b580      	push	{r7, lr}
 8005666:	b086      	sub	sp, #24
 8005668:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800566a:	2300      	movs	r3, #0
 800566c:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800566e:	4b50      	ldr	r3, [pc, #320]	; (80057b0 <xTaskIncrementTick+0x14c>)
 8005670:	681b      	ldr	r3, [r3, #0]
 8005672:	2b00      	cmp	r3, #0
 8005674:	f040 808c 	bne.w	8005790 <xTaskIncrementTick+0x12c>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8005678:	4b4e      	ldr	r3, [pc, #312]	; (80057b4 <xTaskIncrementTick+0x150>)
 800567a:	681b      	ldr	r3, [r3, #0]
 800567c:	3301      	adds	r3, #1
 800567e:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8005680:	4a4c      	ldr	r2, [pc, #304]	; (80057b4 <xTaskIncrementTick+0x150>)
 8005682:	693b      	ldr	r3, [r7, #16]
 8005684:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8005686:	693b      	ldr	r3, [r7, #16]
 8005688:	2b00      	cmp	r3, #0
 800568a:	d11f      	bne.n	80056cc <xTaskIncrementTick+0x68>
		{
			taskSWITCH_DELAYED_LISTS();
 800568c:	4b4a      	ldr	r3, [pc, #296]	; (80057b8 <xTaskIncrementTick+0x154>)
 800568e:	681b      	ldr	r3, [r3, #0]
 8005690:	681b      	ldr	r3, [r3, #0]
 8005692:	2b00      	cmp	r3, #0
 8005694:	d009      	beq.n	80056aa <xTaskIncrementTick+0x46>
 8005696:	f04f 0350 	mov.w	r3, #80	; 0x50
 800569a:	f383 8811 	msr	BASEPRI, r3
 800569e:	f3bf 8f6f 	isb	sy
 80056a2:	f3bf 8f4f 	dsb	sy
 80056a6:	603b      	str	r3, [r7, #0]
 80056a8:	e7fe      	b.n	80056a8 <xTaskIncrementTick+0x44>
 80056aa:	4b43      	ldr	r3, [pc, #268]	; (80057b8 <xTaskIncrementTick+0x154>)
 80056ac:	681b      	ldr	r3, [r3, #0]
 80056ae:	60fb      	str	r3, [r7, #12]
 80056b0:	4b42      	ldr	r3, [pc, #264]	; (80057bc <xTaskIncrementTick+0x158>)
 80056b2:	681b      	ldr	r3, [r3, #0]
 80056b4:	4a40      	ldr	r2, [pc, #256]	; (80057b8 <xTaskIncrementTick+0x154>)
 80056b6:	6013      	str	r3, [r2, #0]
 80056b8:	4a40      	ldr	r2, [pc, #256]	; (80057bc <xTaskIncrementTick+0x158>)
 80056ba:	68fb      	ldr	r3, [r7, #12]
 80056bc:	6013      	str	r3, [r2, #0]
 80056be:	4b40      	ldr	r3, [pc, #256]	; (80057c0 <xTaskIncrementTick+0x15c>)
 80056c0:	681b      	ldr	r3, [r3, #0]
 80056c2:	3301      	adds	r3, #1
 80056c4:	4a3e      	ldr	r2, [pc, #248]	; (80057c0 <xTaskIncrementTick+0x15c>)
 80056c6:	6013      	str	r3, [r2, #0]
 80056c8:	f000 fa7e 	bl	8005bc8 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 80056cc:	4b3d      	ldr	r3, [pc, #244]	; (80057c4 <xTaskIncrementTick+0x160>)
 80056ce:	681b      	ldr	r3, [r3, #0]
 80056d0:	693a      	ldr	r2, [r7, #16]
 80056d2:	429a      	cmp	r2, r3
 80056d4:	d34d      	bcc.n	8005772 <xTaskIncrementTick+0x10e>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80056d6:	4b38      	ldr	r3, [pc, #224]	; (80057b8 <xTaskIncrementTick+0x154>)
 80056d8:	681b      	ldr	r3, [r3, #0]
 80056da:	681b      	ldr	r3, [r3, #0]
 80056dc:	2b00      	cmp	r3, #0
 80056de:	d101      	bne.n	80056e4 <xTaskIncrementTick+0x80>
 80056e0:	2301      	movs	r3, #1
 80056e2:	e000      	b.n	80056e6 <xTaskIncrementTick+0x82>
 80056e4:	2300      	movs	r3, #0
 80056e6:	2b00      	cmp	r3, #0
 80056e8:	d004      	beq.n	80056f4 <xTaskIncrementTick+0x90>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80056ea:	4b36      	ldr	r3, [pc, #216]	; (80057c4 <xTaskIncrementTick+0x160>)
 80056ec:	f04f 32ff 	mov.w	r2, #4294967295
 80056f0:	601a      	str	r2, [r3, #0]
					break;
 80056f2:	e03e      	b.n	8005772 <xTaskIncrementTick+0x10e>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 80056f4:	4b30      	ldr	r3, [pc, #192]	; (80057b8 <xTaskIncrementTick+0x154>)
 80056f6:	681b      	ldr	r3, [r3, #0]
 80056f8:	68db      	ldr	r3, [r3, #12]
 80056fa:	68db      	ldr	r3, [r3, #12]
 80056fc:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 80056fe:	68bb      	ldr	r3, [r7, #8]
 8005700:	685b      	ldr	r3, [r3, #4]
 8005702:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8005704:	693a      	ldr	r2, [r7, #16]
 8005706:	687b      	ldr	r3, [r7, #4]
 8005708:	429a      	cmp	r2, r3
 800570a:	d203      	bcs.n	8005714 <xTaskIncrementTick+0xb0>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800570c:	4a2d      	ldr	r2, [pc, #180]	; (80057c4 <xTaskIncrementTick+0x160>)
 800570e:	687b      	ldr	r3, [r7, #4]
 8005710:	6013      	str	r3, [r2, #0]
						break;
 8005712:	e02e      	b.n	8005772 <xTaskIncrementTick+0x10e>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005714:	68bb      	ldr	r3, [r7, #8]
 8005716:	3304      	adds	r3, #4
 8005718:	4618      	mov	r0, r3
 800571a:	f7fe fdf6 	bl	800430a <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800571e:	68bb      	ldr	r3, [r7, #8]
 8005720:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005722:	2b00      	cmp	r3, #0
 8005724:	d004      	beq.n	8005730 <xTaskIncrementTick+0xcc>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8005726:	68bb      	ldr	r3, [r7, #8]
 8005728:	3318      	adds	r3, #24
 800572a:	4618      	mov	r0, r3
 800572c:	f7fe fded 	bl	800430a <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8005730:	68bb      	ldr	r3, [r7, #8]
 8005732:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005734:	2201      	movs	r2, #1
 8005736:	409a      	lsls	r2, r3
 8005738:	4b23      	ldr	r3, [pc, #140]	; (80057c8 <xTaskIncrementTick+0x164>)
 800573a:	681b      	ldr	r3, [r3, #0]
 800573c:	4313      	orrs	r3, r2
 800573e:	4a22      	ldr	r2, [pc, #136]	; (80057c8 <xTaskIncrementTick+0x164>)
 8005740:	6013      	str	r3, [r2, #0]
 8005742:	68bb      	ldr	r3, [r7, #8]
 8005744:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005746:	4613      	mov	r3, r2
 8005748:	009b      	lsls	r3, r3, #2
 800574a:	4413      	add	r3, r2
 800574c:	009b      	lsls	r3, r3, #2
 800574e:	4a1f      	ldr	r2, [pc, #124]	; (80057cc <xTaskIncrementTick+0x168>)
 8005750:	441a      	add	r2, r3
 8005752:	68bb      	ldr	r3, [r7, #8]
 8005754:	3304      	adds	r3, #4
 8005756:	4619      	mov	r1, r3
 8005758:	4610      	mov	r0, r2
 800575a:	f7fe fd79 	bl	8004250 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800575e:	68bb      	ldr	r3, [r7, #8]
 8005760:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005762:	4b1b      	ldr	r3, [pc, #108]	; (80057d0 <xTaskIncrementTick+0x16c>)
 8005764:	681b      	ldr	r3, [r3, #0]
 8005766:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005768:	429a      	cmp	r2, r3
 800576a:	d3b4      	bcc.n	80056d6 <xTaskIncrementTick+0x72>
						{
							xSwitchRequired = pdTRUE;
 800576c:	2301      	movs	r3, #1
 800576e:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8005770:	e7b1      	b.n	80056d6 <xTaskIncrementTick+0x72>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8005772:	4b17      	ldr	r3, [pc, #92]	; (80057d0 <xTaskIncrementTick+0x16c>)
 8005774:	681b      	ldr	r3, [r3, #0]
 8005776:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005778:	4914      	ldr	r1, [pc, #80]	; (80057cc <xTaskIncrementTick+0x168>)
 800577a:	4613      	mov	r3, r2
 800577c:	009b      	lsls	r3, r3, #2
 800577e:	4413      	add	r3, r2
 8005780:	009b      	lsls	r3, r3, #2
 8005782:	440b      	add	r3, r1
 8005784:	681b      	ldr	r3, [r3, #0]
 8005786:	2b01      	cmp	r3, #1
 8005788:	d907      	bls.n	800579a <xTaskIncrementTick+0x136>
			{
				xSwitchRequired = pdTRUE;
 800578a:	2301      	movs	r3, #1
 800578c:	617b      	str	r3, [r7, #20]
 800578e:	e004      	b.n	800579a <xTaskIncrementTick+0x136>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 8005790:	4b10      	ldr	r3, [pc, #64]	; (80057d4 <xTaskIncrementTick+0x170>)
 8005792:	681b      	ldr	r3, [r3, #0]
 8005794:	3301      	adds	r3, #1
 8005796:	4a0f      	ldr	r2, [pc, #60]	; (80057d4 <xTaskIncrementTick+0x170>)
 8005798:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 800579a:	4b0f      	ldr	r3, [pc, #60]	; (80057d8 <xTaskIncrementTick+0x174>)
 800579c:	681b      	ldr	r3, [r3, #0]
 800579e:	2b00      	cmp	r3, #0
 80057a0:	d001      	beq.n	80057a6 <xTaskIncrementTick+0x142>
		{
			xSwitchRequired = pdTRUE;
 80057a2:	2301      	movs	r3, #1
 80057a4:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 80057a6:	697b      	ldr	r3, [r7, #20]
}
 80057a8:	4618      	mov	r0, r3
 80057aa:	3718      	adds	r7, #24
 80057ac:	46bd      	mov	sp, r7
 80057ae:	bd80      	pop	{r7, pc}
 80057b0:	2400053c 	.word	0x2400053c
 80057b4:	24000518 	.word	0x24000518
 80057b8:	240004cc 	.word	0x240004cc
 80057bc:	240004d0 	.word	0x240004d0
 80057c0:	2400052c 	.word	0x2400052c
 80057c4:	24000534 	.word	0x24000534
 80057c8:	2400051c 	.word	0x2400051c
 80057cc:	24000224 	.word	0x24000224
 80057d0:	24000220 	.word	0x24000220
 80057d4:	24000524 	.word	0x24000524
 80057d8:	24000528 	.word	0x24000528

080057dc <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 80057dc:	b480      	push	{r7}
 80057de:	b087      	sub	sp, #28
 80057e0:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 80057e2:	4b26      	ldr	r3, [pc, #152]	; (800587c <vTaskSwitchContext+0xa0>)
 80057e4:	681b      	ldr	r3, [r3, #0]
 80057e6:	2b00      	cmp	r3, #0
 80057e8:	d003      	beq.n	80057f2 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 80057ea:	4b25      	ldr	r3, [pc, #148]	; (8005880 <vTaskSwitchContext+0xa4>)
 80057ec:	2201      	movs	r2, #1
 80057ee:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 80057f0:	e03e      	b.n	8005870 <vTaskSwitchContext+0x94>
		xYieldPending = pdFALSE;
 80057f2:	4b23      	ldr	r3, [pc, #140]	; (8005880 <vTaskSwitchContext+0xa4>)
 80057f4:	2200      	movs	r2, #0
 80057f6:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK();
 80057f8:	4b22      	ldr	r3, [pc, #136]	; (8005884 <vTaskSwitchContext+0xa8>)
 80057fa:	681b      	ldr	r3, [r3, #0]
 80057fc:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 80057fe:	68fb      	ldr	r3, [r7, #12]
 8005800:	fab3 f383 	clz	r3, r3
 8005804:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 8005806:	7afb      	ldrb	r3, [r7, #11]
 8005808:	f1c3 031f 	rsb	r3, r3, #31
 800580c:	617b      	str	r3, [r7, #20]
 800580e:	491e      	ldr	r1, [pc, #120]	; (8005888 <vTaskSwitchContext+0xac>)
 8005810:	697a      	ldr	r2, [r7, #20]
 8005812:	4613      	mov	r3, r2
 8005814:	009b      	lsls	r3, r3, #2
 8005816:	4413      	add	r3, r2
 8005818:	009b      	lsls	r3, r3, #2
 800581a:	440b      	add	r3, r1
 800581c:	681b      	ldr	r3, [r3, #0]
 800581e:	2b00      	cmp	r3, #0
 8005820:	d109      	bne.n	8005836 <vTaskSwitchContext+0x5a>
	__asm volatile
 8005822:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005826:	f383 8811 	msr	BASEPRI, r3
 800582a:	f3bf 8f6f 	isb	sy
 800582e:	f3bf 8f4f 	dsb	sy
 8005832:	607b      	str	r3, [r7, #4]
 8005834:	e7fe      	b.n	8005834 <vTaskSwitchContext+0x58>
 8005836:	697a      	ldr	r2, [r7, #20]
 8005838:	4613      	mov	r3, r2
 800583a:	009b      	lsls	r3, r3, #2
 800583c:	4413      	add	r3, r2
 800583e:	009b      	lsls	r3, r3, #2
 8005840:	4a11      	ldr	r2, [pc, #68]	; (8005888 <vTaskSwitchContext+0xac>)
 8005842:	4413      	add	r3, r2
 8005844:	613b      	str	r3, [r7, #16]
 8005846:	693b      	ldr	r3, [r7, #16]
 8005848:	685b      	ldr	r3, [r3, #4]
 800584a:	685a      	ldr	r2, [r3, #4]
 800584c:	693b      	ldr	r3, [r7, #16]
 800584e:	605a      	str	r2, [r3, #4]
 8005850:	693b      	ldr	r3, [r7, #16]
 8005852:	685a      	ldr	r2, [r3, #4]
 8005854:	693b      	ldr	r3, [r7, #16]
 8005856:	3308      	adds	r3, #8
 8005858:	429a      	cmp	r2, r3
 800585a:	d104      	bne.n	8005866 <vTaskSwitchContext+0x8a>
 800585c:	693b      	ldr	r3, [r7, #16]
 800585e:	685b      	ldr	r3, [r3, #4]
 8005860:	685a      	ldr	r2, [r3, #4]
 8005862:	693b      	ldr	r3, [r7, #16]
 8005864:	605a      	str	r2, [r3, #4]
 8005866:	693b      	ldr	r3, [r7, #16]
 8005868:	685b      	ldr	r3, [r3, #4]
 800586a:	68db      	ldr	r3, [r3, #12]
 800586c:	4a07      	ldr	r2, [pc, #28]	; (800588c <vTaskSwitchContext+0xb0>)
 800586e:	6013      	str	r3, [r2, #0]
}
 8005870:	bf00      	nop
 8005872:	371c      	adds	r7, #28
 8005874:	46bd      	mov	sp, r7
 8005876:	f85d 7b04 	ldr.w	r7, [sp], #4
 800587a:	4770      	bx	lr
 800587c:	2400053c 	.word	0x2400053c
 8005880:	24000528 	.word	0x24000528
 8005884:	2400051c 	.word	0x2400051c
 8005888:	24000224 	.word	0x24000224
 800588c:	24000220 	.word	0x24000220

08005890 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8005890:	b580      	push	{r7, lr}
 8005892:	b084      	sub	sp, #16
 8005894:	af00      	add	r7, sp, #0
 8005896:	6078      	str	r0, [r7, #4]
 8005898:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800589a:	687b      	ldr	r3, [r7, #4]
 800589c:	2b00      	cmp	r3, #0
 800589e:	d109      	bne.n	80058b4 <vTaskPlaceOnEventList+0x24>
 80058a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80058a4:	f383 8811 	msr	BASEPRI, r3
 80058a8:	f3bf 8f6f 	isb	sy
 80058ac:	f3bf 8f4f 	dsb	sy
 80058b0:	60fb      	str	r3, [r7, #12]
 80058b2:	e7fe      	b.n	80058b2 <vTaskPlaceOnEventList+0x22>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80058b4:	4b07      	ldr	r3, [pc, #28]	; (80058d4 <vTaskPlaceOnEventList+0x44>)
 80058b6:	681b      	ldr	r3, [r3, #0]
 80058b8:	3318      	adds	r3, #24
 80058ba:	4619      	mov	r1, r3
 80058bc:	6878      	ldr	r0, [r7, #4]
 80058be:	f7fe fceb 	bl	8004298 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 80058c2:	2101      	movs	r1, #1
 80058c4:	6838      	ldr	r0, [r7, #0]
 80058c6:	f000 fb7f 	bl	8005fc8 <prvAddCurrentTaskToDelayedList>
}
 80058ca:	bf00      	nop
 80058cc:	3710      	adds	r7, #16
 80058ce:	46bd      	mov	sp, r7
 80058d0:	bd80      	pop	{r7, pc}
 80058d2:	bf00      	nop
 80058d4:	24000220 	.word	0x24000220

080058d8 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 80058d8:	b580      	push	{r7, lr}
 80058da:	b086      	sub	sp, #24
 80058dc:	af00      	add	r7, sp, #0
 80058de:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
 80058e0:	687b      	ldr	r3, [r7, #4]
 80058e2:	68db      	ldr	r3, [r3, #12]
 80058e4:	68db      	ldr	r3, [r3, #12]
 80058e6:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 80058e8:	693b      	ldr	r3, [r7, #16]
 80058ea:	2b00      	cmp	r3, #0
 80058ec:	d109      	bne.n	8005902 <xTaskRemoveFromEventList+0x2a>
 80058ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 80058f2:	f383 8811 	msr	BASEPRI, r3
 80058f6:	f3bf 8f6f 	isb	sy
 80058fa:	f3bf 8f4f 	dsb	sy
 80058fe:	60fb      	str	r3, [r7, #12]
 8005900:	e7fe      	b.n	8005900 <xTaskRemoveFromEventList+0x28>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8005902:	693b      	ldr	r3, [r7, #16]
 8005904:	3318      	adds	r3, #24
 8005906:	4618      	mov	r0, r3
 8005908:	f7fe fcff 	bl	800430a <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800590c:	4b1d      	ldr	r3, [pc, #116]	; (8005984 <xTaskRemoveFromEventList+0xac>)
 800590e:	681b      	ldr	r3, [r3, #0]
 8005910:	2b00      	cmp	r3, #0
 8005912:	d11c      	bne.n	800594e <xTaskRemoveFromEventList+0x76>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8005914:	693b      	ldr	r3, [r7, #16]
 8005916:	3304      	adds	r3, #4
 8005918:	4618      	mov	r0, r3
 800591a:	f7fe fcf6 	bl	800430a <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800591e:	693b      	ldr	r3, [r7, #16]
 8005920:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005922:	2201      	movs	r2, #1
 8005924:	409a      	lsls	r2, r3
 8005926:	4b18      	ldr	r3, [pc, #96]	; (8005988 <xTaskRemoveFromEventList+0xb0>)
 8005928:	681b      	ldr	r3, [r3, #0]
 800592a:	4313      	orrs	r3, r2
 800592c:	4a16      	ldr	r2, [pc, #88]	; (8005988 <xTaskRemoveFromEventList+0xb0>)
 800592e:	6013      	str	r3, [r2, #0]
 8005930:	693b      	ldr	r3, [r7, #16]
 8005932:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005934:	4613      	mov	r3, r2
 8005936:	009b      	lsls	r3, r3, #2
 8005938:	4413      	add	r3, r2
 800593a:	009b      	lsls	r3, r3, #2
 800593c:	4a13      	ldr	r2, [pc, #76]	; (800598c <xTaskRemoveFromEventList+0xb4>)
 800593e:	441a      	add	r2, r3
 8005940:	693b      	ldr	r3, [r7, #16]
 8005942:	3304      	adds	r3, #4
 8005944:	4619      	mov	r1, r3
 8005946:	4610      	mov	r0, r2
 8005948:	f7fe fc82 	bl	8004250 <vListInsertEnd>
 800594c:	e005      	b.n	800595a <xTaskRemoveFromEventList+0x82>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800594e:	693b      	ldr	r3, [r7, #16]
 8005950:	3318      	adds	r3, #24
 8005952:	4619      	mov	r1, r3
 8005954:	480e      	ldr	r0, [pc, #56]	; (8005990 <xTaskRemoveFromEventList+0xb8>)
 8005956:	f7fe fc7b 	bl	8004250 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800595a:	693b      	ldr	r3, [r7, #16]
 800595c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800595e:	4b0d      	ldr	r3, [pc, #52]	; (8005994 <xTaskRemoveFromEventList+0xbc>)
 8005960:	681b      	ldr	r3, [r3, #0]
 8005962:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005964:	429a      	cmp	r2, r3
 8005966:	d905      	bls.n	8005974 <xTaskRemoveFromEventList+0x9c>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8005968:	2301      	movs	r3, #1
 800596a:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800596c:	4b0a      	ldr	r3, [pc, #40]	; (8005998 <xTaskRemoveFromEventList+0xc0>)
 800596e:	2201      	movs	r2, #1
 8005970:	601a      	str	r2, [r3, #0]
 8005972:	e001      	b.n	8005978 <xTaskRemoveFromEventList+0xa0>
	}
	else
	{
		xReturn = pdFALSE;
 8005974:	2300      	movs	r3, #0
 8005976:	617b      	str	r3, [r7, #20]
		ensure it is updated at the earliest possible time. */
		prvResetNextTaskUnblockTime();
	}
	#endif

	return xReturn;
 8005978:	697b      	ldr	r3, [r7, #20]
}
 800597a:	4618      	mov	r0, r3
 800597c:	3718      	adds	r7, #24
 800597e:	46bd      	mov	sp, r7
 8005980:	bd80      	pop	{r7, pc}
 8005982:	bf00      	nop
 8005984:	2400053c 	.word	0x2400053c
 8005988:	2400051c 	.word	0x2400051c
 800598c:	24000224 	.word	0x24000224
 8005990:	240004d4 	.word	0x240004d4
 8005994:	24000220 	.word	0x24000220
 8005998:	24000528 	.word	0x24000528

0800599c <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800599c:	b480      	push	{r7}
 800599e:	b083      	sub	sp, #12
 80059a0:	af00      	add	r7, sp, #0
 80059a2:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 80059a4:	4b06      	ldr	r3, [pc, #24]	; (80059c0 <vTaskInternalSetTimeOutState+0x24>)
 80059a6:	681a      	ldr	r2, [r3, #0]
 80059a8:	687b      	ldr	r3, [r7, #4]
 80059aa:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 80059ac:	4b05      	ldr	r3, [pc, #20]	; (80059c4 <vTaskInternalSetTimeOutState+0x28>)
 80059ae:	681a      	ldr	r2, [r3, #0]
 80059b0:	687b      	ldr	r3, [r7, #4]
 80059b2:	605a      	str	r2, [r3, #4]
}
 80059b4:	bf00      	nop
 80059b6:	370c      	adds	r7, #12
 80059b8:	46bd      	mov	sp, r7
 80059ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059be:	4770      	bx	lr
 80059c0:	2400052c 	.word	0x2400052c
 80059c4:	24000518 	.word	0x24000518

080059c8 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 80059c8:	b580      	push	{r7, lr}
 80059ca:	b088      	sub	sp, #32
 80059cc:	af00      	add	r7, sp, #0
 80059ce:	6078      	str	r0, [r7, #4]
 80059d0:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 80059d2:	687b      	ldr	r3, [r7, #4]
 80059d4:	2b00      	cmp	r3, #0
 80059d6:	d109      	bne.n	80059ec <xTaskCheckForTimeOut+0x24>
 80059d8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80059dc:	f383 8811 	msr	BASEPRI, r3
 80059e0:	f3bf 8f6f 	isb	sy
 80059e4:	f3bf 8f4f 	dsb	sy
 80059e8:	613b      	str	r3, [r7, #16]
 80059ea:	e7fe      	b.n	80059ea <xTaskCheckForTimeOut+0x22>
	configASSERT( pxTicksToWait );
 80059ec:	683b      	ldr	r3, [r7, #0]
 80059ee:	2b00      	cmp	r3, #0
 80059f0:	d109      	bne.n	8005a06 <xTaskCheckForTimeOut+0x3e>
 80059f2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80059f6:	f383 8811 	msr	BASEPRI, r3
 80059fa:	f3bf 8f6f 	isb	sy
 80059fe:	f3bf 8f4f 	dsb	sy
 8005a02:	60fb      	str	r3, [r7, #12]
 8005a04:	e7fe      	b.n	8005a04 <xTaskCheckForTimeOut+0x3c>

	taskENTER_CRITICAL();
 8005a06:	f000 fc69 	bl	80062dc <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8005a0a:	4b1d      	ldr	r3, [pc, #116]	; (8005a80 <xTaskCheckForTimeOut+0xb8>)
 8005a0c:	681b      	ldr	r3, [r3, #0]
 8005a0e:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8005a10:	687b      	ldr	r3, [r7, #4]
 8005a12:	685b      	ldr	r3, [r3, #4]
 8005a14:	69ba      	ldr	r2, [r7, #24]
 8005a16:	1ad3      	subs	r3, r2, r3
 8005a18:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8005a1a:	683b      	ldr	r3, [r7, #0]
 8005a1c:	681b      	ldr	r3, [r3, #0]
 8005a1e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005a22:	d102      	bne.n	8005a2a <xTaskCheckForTimeOut+0x62>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8005a24:	2300      	movs	r3, #0
 8005a26:	61fb      	str	r3, [r7, #28]
 8005a28:	e023      	b.n	8005a72 <xTaskCheckForTimeOut+0xaa>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8005a2a:	687b      	ldr	r3, [r7, #4]
 8005a2c:	681a      	ldr	r2, [r3, #0]
 8005a2e:	4b15      	ldr	r3, [pc, #84]	; (8005a84 <xTaskCheckForTimeOut+0xbc>)
 8005a30:	681b      	ldr	r3, [r3, #0]
 8005a32:	429a      	cmp	r2, r3
 8005a34:	d007      	beq.n	8005a46 <xTaskCheckForTimeOut+0x7e>
 8005a36:	687b      	ldr	r3, [r7, #4]
 8005a38:	685b      	ldr	r3, [r3, #4]
 8005a3a:	69ba      	ldr	r2, [r7, #24]
 8005a3c:	429a      	cmp	r2, r3
 8005a3e:	d302      	bcc.n	8005a46 <xTaskCheckForTimeOut+0x7e>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8005a40:	2301      	movs	r3, #1
 8005a42:	61fb      	str	r3, [r7, #28]
 8005a44:	e015      	b.n	8005a72 <xTaskCheckForTimeOut+0xaa>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8005a46:	683b      	ldr	r3, [r7, #0]
 8005a48:	681b      	ldr	r3, [r3, #0]
 8005a4a:	697a      	ldr	r2, [r7, #20]
 8005a4c:	429a      	cmp	r2, r3
 8005a4e:	d20b      	bcs.n	8005a68 <xTaskCheckForTimeOut+0xa0>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8005a50:	683b      	ldr	r3, [r7, #0]
 8005a52:	681a      	ldr	r2, [r3, #0]
 8005a54:	697b      	ldr	r3, [r7, #20]
 8005a56:	1ad2      	subs	r2, r2, r3
 8005a58:	683b      	ldr	r3, [r7, #0]
 8005a5a:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8005a5c:	6878      	ldr	r0, [r7, #4]
 8005a5e:	f7ff ff9d 	bl	800599c <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8005a62:	2300      	movs	r3, #0
 8005a64:	61fb      	str	r3, [r7, #28]
 8005a66:	e004      	b.n	8005a72 <xTaskCheckForTimeOut+0xaa>
		}
		else
		{
			*pxTicksToWait = 0;
 8005a68:	683b      	ldr	r3, [r7, #0]
 8005a6a:	2200      	movs	r2, #0
 8005a6c:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8005a6e:	2301      	movs	r3, #1
 8005a70:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8005a72:	f000 fc61 	bl	8006338 <vPortExitCritical>

	return xReturn;
 8005a76:	69fb      	ldr	r3, [r7, #28]
}
 8005a78:	4618      	mov	r0, r3
 8005a7a:	3720      	adds	r7, #32
 8005a7c:	46bd      	mov	sp, r7
 8005a7e:	bd80      	pop	{r7, pc}
 8005a80:	24000518 	.word	0x24000518
 8005a84:	2400052c 	.word	0x2400052c

08005a88 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8005a88:	b480      	push	{r7}
 8005a8a:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8005a8c:	4b03      	ldr	r3, [pc, #12]	; (8005a9c <vTaskMissedYield+0x14>)
 8005a8e:	2201      	movs	r2, #1
 8005a90:	601a      	str	r2, [r3, #0]
}
 8005a92:	bf00      	nop
 8005a94:	46bd      	mov	sp, r7
 8005a96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a9a:	4770      	bx	lr
 8005a9c:	24000528 	.word	0x24000528

08005aa0 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8005aa0:	b580      	push	{r7, lr}
 8005aa2:	b082      	sub	sp, #8
 8005aa4:	af00      	add	r7, sp, #0
 8005aa6:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8005aa8:	f000 f852 	bl	8005b50 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8005aac:	4b06      	ldr	r3, [pc, #24]	; (8005ac8 <prvIdleTask+0x28>)
 8005aae:	681b      	ldr	r3, [r3, #0]
 8005ab0:	2b01      	cmp	r3, #1
 8005ab2:	d9f9      	bls.n	8005aa8 <prvIdleTask+0x8>
			{
				taskYIELD();
 8005ab4:	4b05      	ldr	r3, [pc, #20]	; (8005acc <prvIdleTask+0x2c>)
 8005ab6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005aba:	601a      	str	r2, [r3, #0]
 8005abc:	f3bf 8f4f 	dsb	sy
 8005ac0:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8005ac4:	e7f0      	b.n	8005aa8 <prvIdleTask+0x8>
 8005ac6:	bf00      	nop
 8005ac8:	24000224 	.word	0x24000224
 8005acc:	e000ed04 	.word	0xe000ed04

08005ad0 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8005ad0:	b580      	push	{r7, lr}
 8005ad2:	b082      	sub	sp, #8
 8005ad4:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8005ad6:	2300      	movs	r3, #0
 8005ad8:	607b      	str	r3, [r7, #4]
 8005ada:	e00c      	b.n	8005af6 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8005adc:	687a      	ldr	r2, [r7, #4]
 8005ade:	4613      	mov	r3, r2
 8005ae0:	009b      	lsls	r3, r3, #2
 8005ae2:	4413      	add	r3, r2
 8005ae4:	009b      	lsls	r3, r3, #2
 8005ae6:	4a12      	ldr	r2, [pc, #72]	; (8005b30 <prvInitialiseTaskLists+0x60>)
 8005ae8:	4413      	add	r3, r2
 8005aea:	4618      	mov	r0, r3
 8005aec:	f7fe fb83 	bl	80041f6 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8005af0:	687b      	ldr	r3, [r7, #4]
 8005af2:	3301      	adds	r3, #1
 8005af4:	607b      	str	r3, [r7, #4]
 8005af6:	687b      	ldr	r3, [r7, #4]
 8005af8:	2b1f      	cmp	r3, #31
 8005afa:	d9ef      	bls.n	8005adc <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8005afc:	480d      	ldr	r0, [pc, #52]	; (8005b34 <prvInitialiseTaskLists+0x64>)
 8005afe:	f7fe fb7a 	bl	80041f6 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8005b02:	480d      	ldr	r0, [pc, #52]	; (8005b38 <prvInitialiseTaskLists+0x68>)
 8005b04:	f7fe fb77 	bl	80041f6 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8005b08:	480c      	ldr	r0, [pc, #48]	; (8005b3c <prvInitialiseTaskLists+0x6c>)
 8005b0a:	f7fe fb74 	bl	80041f6 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8005b0e:	480c      	ldr	r0, [pc, #48]	; (8005b40 <prvInitialiseTaskLists+0x70>)
 8005b10:	f7fe fb71 	bl	80041f6 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8005b14:	480b      	ldr	r0, [pc, #44]	; (8005b44 <prvInitialiseTaskLists+0x74>)
 8005b16:	f7fe fb6e 	bl	80041f6 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8005b1a:	4b0b      	ldr	r3, [pc, #44]	; (8005b48 <prvInitialiseTaskLists+0x78>)
 8005b1c:	4a05      	ldr	r2, [pc, #20]	; (8005b34 <prvInitialiseTaskLists+0x64>)
 8005b1e:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8005b20:	4b0a      	ldr	r3, [pc, #40]	; (8005b4c <prvInitialiseTaskLists+0x7c>)
 8005b22:	4a05      	ldr	r2, [pc, #20]	; (8005b38 <prvInitialiseTaskLists+0x68>)
 8005b24:	601a      	str	r2, [r3, #0]
}
 8005b26:	bf00      	nop
 8005b28:	3708      	adds	r7, #8
 8005b2a:	46bd      	mov	sp, r7
 8005b2c:	bd80      	pop	{r7, pc}
 8005b2e:	bf00      	nop
 8005b30:	24000224 	.word	0x24000224
 8005b34:	240004a4 	.word	0x240004a4
 8005b38:	240004b8 	.word	0x240004b8
 8005b3c:	240004d4 	.word	0x240004d4
 8005b40:	240004e8 	.word	0x240004e8
 8005b44:	24000500 	.word	0x24000500
 8005b48:	240004cc 	.word	0x240004cc
 8005b4c:	240004d0 	.word	0x240004d0

08005b50 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8005b50:	b580      	push	{r7, lr}
 8005b52:	b082      	sub	sp, #8
 8005b54:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent vTaskSuspendAll()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8005b56:	e019      	b.n	8005b8c <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8005b58:	f000 fbc0 	bl	80062dc <vPortEnterCritical>
			{
				pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 8005b5c:	4b0f      	ldr	r3, [pc, #60]	; (8005b9c <prvCheckTasksWaitingTermination+0x4c>)
 8005b5e:	68db      	ldr	r3, [r3, #12]
 8005b60:	68db      	ldr	r3, [r3, #12]
 8005b62:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005b64:	687b      	ldr	r3, [r7, #4]
 8005b66:	3304      	adds	r3, #4
 8005b68:	4618      	mov	r0, r3
 8005b6a:	f7fe fbce 	bl	800430a <uxListRemove>
				--uxCurrentNumberOfTasks;
 8005b6e:	4b0c      	ldr	r3, [pc, #48]	; (8005ba0 <prvCheckTasksWaitingTermination+0x50>)
 8005b70:	681b      	ldr	r3, [r3, #0]
 8005b72:	3b01      	subs	r3, #1
 8005b74:	4a0a      	ldr	r2, [pc, #40]	; (8005ba0 <prvCheckTasksWaitingTermination+0x50>)
 8005b76:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8005b78:	4b0a      	ldr	r3, [pc, #40]	; (8005ba4 <prvCheckTasksWaitingTermination+0x54>)
 8005b7a:	681b      	ldr	r3, [r3, #0]
 8005b7c:	3b01      	subs	r3, #1
 8005b7e:	4a09      	ldr	r2, [pc, #36]	; (8005ba4 <prvCheckTasksWaitingTermination+0x54>)
 8005b80:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8005b82:	f000 fbd9 	bl	8006338 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8005b86:	6878      	ldr	r0, [r7, #4]
 8005b88:	f000 f80e 	bl	8005ba8 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8005b8c:	4b05      	ldr	r3, [pc, #20]	; (8005ba4 <prvCheckTasksWaitingTermination+0x54>)
 8005b8e:	681b      	ldr	r3, [r3, #0]
 8005b90:	2b00      	cmp	r3, #0
 8005b92:	d1e1      	bne.n	8005b58 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8005b94:	bf00      	nop
 8005b96:	3708      	adds	r7, #8
 8005b98:	46bd      	mov	sp, r7
 8005b9a:	bd80      	pop	{r7, pc}
 8005b9c:	240004e8 	.word	0x240004e8
 8005ba0:	24000514 	.word	0x24000514
 8005ba4:	240004fc 	.word	0x240004fc

08005ba8 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8005ba8:	b580      	push	{r7, lr}
 8005baa:	b082      	sub	sp, #8
 8005bac:	af00      	add	r7, sp, #0
 8005bae:	6078      	str	r0, [r7, #4]

		#if( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) && ( portUSING_MPU_WRAPPERS == 0 ) )
		{
			/* The task can only have been allocated dynamically - free both
			the stack and TCB. */
			vPortFree( pxTCB->pxStack );
 8005bb0:	687b      	ldr	r3, [r7, #4]
 8005bb2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005bb4:	4618      	mov	r0, r3
 8005bb6:	f000 fd6d 	bl	8006694 <vPortFree>
			vPortFree( pxTCB );
 8005bba:	6878      	ldr	r0, [r7, #4]
 8005bbc:	f000 fd6a 	bl	8006694 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8005bc0:	bf00      	nop
 8005bc2:	3708      	adds	r7, #8
 8005bc4:	46bd      	mov	sp, r7
 8005bc6:	bd80      	pop	{r7, pc}

08005bc8 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8005bc8:	b480      	push	{r7}
 8005bca:	b083      	sub	sp, #12
 8005bcc:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8005bce:	4b0f      	ldr	r3, [pc, #60]	; (8005c0c <prvResetNextTaskUnblockTime+0x44>)
 8005bd0:	681b      	ldr	r3, [r3, #0]
 8005bd2:	681b      	ldr	r3, [r3, #0]
 8005bd4:	2b00      	cmp	r3, #0
 8005bd6:	d101      	bne.n	8005bdc <prvResetNextTaskUnblockTime+0x14>
 8005bd8:	2301      	movs	r3, #1
 8005bda:	e000      	b.n	8005bde <prvResetNextTaskUnblockTime+0x16>
 8005bdc:	2300      	movs	r3, #0
 8005bde:	2b00      	cmp	r3, #0
 8005be0:	d004      	beq.n	8005bec <prvResetNextTaskUnblockTime+0x24>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8005be2:	4b0b      	ldr	r3, [pc, #44]	; (8005c10 <prvResetNextTaskUnblockTime+0x48>)
 8005be4:	f04f 32ff 	mov.w	r2, #4294967295
 8005be8:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8005bea:	e008      	b.n	8005bfe <prvResetNextTaskUnblockTime+0x36>
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8005bec:	4b07      	ldr	r3, [pc, #28]	; (8005c0c <prvResetNextTaskUnblockTime+0x44>)
 8005bee:	681b      	ldr	r3, [r3, #0]
 8005bf0:	68db      	ldr	r3, [r3, #12]
 8005bf2:	68db      	ldr	r3, [r3, #12]
 8005bf4:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8005bf6:	687b      	ldr	r3, [r7, #4]
 8005bf8:	685b      	ldr	r3, [r3, #4]
 8005bfa:	4a05      	ldr	r2, [pc, #20]	; (8005c10 <prvResetNextTaskUnblockTime+0x48>)
 8005bfc:	6013      	str	r3, [r2, #0]
}
 8005bfe:	bf00      	nop
 8005c00:	370c      	adds	r7, #12
 8005c02:	46bd      	mov	sp, r7
 8005c04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c08:	4770      	bx	lr
 8005c0a:	bf00      	nop
 8005c0c:	240004cc 	.word	0x240004cc
 8005c10:	24000534 	.word	0x24000534

08005c14 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8005c14:	b480      	push	{r7}
 8005c16:	b083      	sub	sp, #12
 8005c18:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8005c1a:	4b0b      	ldr	r3, [pc, #44]	; (8005c48 <xTaskGetSchedulerState+0x34>)
 8005c1c:	681b      	ldr	r3, [r3, #0]
 8005c1e:	2b00      	cmp	r3, #0
 8005c20:	d102      	bne.n	8005c28 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8005c22:	2301      	movs	r3, #1
 8005c24:	607b      	str	r3, [r7, #4]
 8005c26:	e008      	b.n	8005c3a <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005c28:	4b08      	ldr	r3, [pc, #32]	; (8005c4c <xTaskGetSchedulerState+0x38>)
 8005c2a:	681b      	ldr	r3, [r3, #0]
 8005c2c:	2b00      	cmp	r3, #0
 8005c2e:	d102      	bne.n	8005c36 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8005c30:	2302      	movs	r3, #2
 8005c32:	607b      	str	r3, [r7, #4]
 8005c34:	e001      	b.n	8005c3a <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8005c36:	2300      	movs	r3, #0
 8005c38:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8005c3a:	687b      	ldr	r3, [r7, #4]
	}
 8005c3c:	4618      	mov	r0, r3
 8005c3e:	370c      	adds	r7, #12
 8005c40:	46bd      	mov	sp, r7
 8005c42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c46:	4770      	bx	lr
 8005c48:	24000520 	.word	0x24000520
 8005c4c:	2400053c 	.word	0x2400053c

08005c50 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 8005c50:	b580      	push	{r7, lr}
 8005c52:	b084      	sub	sp, #16
 8005c54:	af00      	add	r7, sp, #0
 8005c56:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = ( TCB_t * ) pxMutexHolder;
 8005c58:	687b      	ldr	r3, [r7, #4]
 8005c5a:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 8005c5c:	2300      	movs	r3, #0
 8005c5e:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 8005c60:	687b      	ldr	r3, [r7, #4]
 8005c62:	2b00      	cmp	r3, #0
 8005c64:	d06e      	beq.n	8005d44 <xTaskPriorityInherit+0xf4>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 8005c66:	68bb      	ldr	r3, [r7, #8]
 8005c68:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005c6a:	4b39      	ldr	r3, [pc, #228]	; (8005d50 <xTaskPriorityInherit+0x100>)
 8005c6c:	681b      	ldr	r3, [r3, #0]
 8005c6e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005c70:	429a      	cmp	r2, r3
 8005c72:	d25e      	bcs.n	8005d32 <xTaskPriorityInherit+0xe2>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8005c74:	68bb      	ldr	r3, [r7, #8]
 8005c76:	699b      	ldr	r3, [r3, #24]
 8005c78:	2b00      	cmp	r3, #0
 8005c7a:	db06      	blt.n	8005c8a <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005c7c:	4b34      	ldr	r3, [pc, #208]	; (8005d50 <xTaskPriorityInherit+0x100>)
 8005c7e:	681b      	ldr	r3, [r3, #0]
 8005c80:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005c82:	f1c3 0220 	rsb	r2, r3, #32
 8005c86:	68bb      	ldr	r3, [r7, #8]
 8005c88:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 8005c8a:	68bb      	ldr	r3, [r7, #8]
 8005c8c:	6959      	ldr	r1, [r3, #20]
 8005c8e:	68bb      	ldr	r3, [r7, #8]
 8005c90:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005c92:	4613      	mov	r3, r2
 8005c94:	009b      	lsls	r3, r3, #2
 8005c96:	4413      	add	r3, r2
 8005c98:	009b      	lsls	r3, r3, #2
 8005c9a:	4a2e      	ldr	r2, [pc, #184]	; (8005d54 <xTaskPriorityInherit+0x104>)
 8005c9c:	4413      	add	r3, r2
 8005c9e:	4299      	cmp	r1, r3
 8005ca0:	d101      	bne.n	8005ca6 <xTaskPriorityInherit+0x56>
 8005ca2:	2301      	movs	r3, #1
 8005ca4:	e000      	b.n	8005ca8 <xTaskPriorityInherit+0x58>
 8005ca6:	2300      	movs	r3, #0
 8005ca8:	2b00      	cmp	r3, #0
 8005caa:	d03a      	beq.n	8005d22 <xTaskPriorityInherit+0xd2>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8005cac:	68bb      	ldr	r3, [r7, #8]
 8005cae:	3304      	adds	r3, #4
 8005cb0:	4618      	mov	r0, r3
 8005cb2:	f7fe fb2a 	bl	800430a <uxListRemove>
 8005cb6:	4603      	mov	r3, r0
 8005cb8:	2b00      	cmp	r3, #0
 8005cba:	d115      	bne.n	8005ce8 <xTaskPriorityInherit+0x98>
					{
						taskRESET_READY_PRIORITY( pxMutexHolderTCB->uxPriority );
 8005cbc:	68bb      	ldr	r3, [r7, #8]
 8005cbe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005cc0:	4924      	ldr	r1, [pc, #144]	; (8005d54 <xTaskPriorityInherit+0x104>)
 8005cc2:	4613      	mov	r3, r2
 8005cc4:	009b      	lsls	r3, r3, #2
 8005cc6:	4413      	add	r3, r2
 8005cc8:	009b      	lsls	r3, r3, #2
 8005cca:	440b      	add	r3, r1
 8005ccc:	681b      	ldr	r3, [r3, #0]
 8005cce:	2b00      	cmp	r3, #0
 8005cd0:	d10a      	bne.n	8005ce8 <xTaskPriorityInherit+0x98>
 8005cd2:	68bb      	ldr	r3, [r7, #8]
 8005cd4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005cd6:	2201      	movs	r2, #1
 8005cd8:	fa02 f303 	lsl.w	r3, r2, r3
 8005cdc:	43da      	mvns	r2, r3
 8005cde:	4b1e      	ldr	r3, [pc, #120]	; (8005d58 <xTaskPriorityInherit+0x108>)
 8005ce0:	681b      	ldr	r3, [r3, #0]
 8005ce2:	4013      	ands	r3, r2
 8005ce4:	4a1c      	ldr	r2, [pc, #112]	; (8005d58 <xTaskPriorityInherit+0x108>)
 8005ce6:	6013      	str	r3, [r2, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8005ce8:	4b19      	ldr	r3, [pc, #100]	; (8005d50 <xTaskPriorityInherit+0x100>)
 8005cea:	681b      	ldr	r3, [r3, #0]
 8005cec:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005cee:	68bb      	ldr	r3, [r7, #8]
 8005cf0:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 8005cf2:	68bb      	ldr	r3, [r7, #8]
 8005cf4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005cf6:	2201      	movs	r2, #1
 8005cf8:	409a      	lsls	r2, r3
 8005cfa:	4b17      	ldr	r3, [pc, #92]	; (8005d58 <xTaskPriorityInherit+0x108>)
 8005cfc:	681b      	ldr	r3, [r3, #0]
 8005cfe:	4313      	orrs	r3, r2
 8005d00:	4a15      	ldr	r2, [pc, #84]	; (8005d58 <xTaskPriorityInherit+0x108>)
 8005d02:	6013      	str	r3, [r2, #0]
 8005d04:	68bb      	ldr	r3, [r7, #8]
 8005d06:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005d08:	4613      	mov	r3, r2
 8005d0a:	009b      	lsls	r3, r3, #2
 8005d0c:	4413      	add	r3, r2
 8005d0e:	009b      	lsls	r3, r3, #2
 8005d10:	4a10      	ldr	r2, [pc, #64]	; (8005d54 <xTaskPriorityInherit+0x104>)
 8005d12:	441a      	add	r2, r3
 8005d14:	68bb      	ldr	r3, [r7, #8]
 8005d16:	3304      	adds	r3, #4
 8005d18:	4619      	mov	r1, r3
 8005d1a:	4610      	mov	r0, r2
 8005d1c:	f7fe fa98 	bl	8004250 <vListInsertEnd>
 8005d20:	e004      	b.n	8005d2c <xTaskPriorityInherit+0xdc>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8005d22:	4b0b      	ldr	r3, [pc, #44]	; (8005d50 <xTaskPriorityInherit+0x100>)
 8005d24:	681b      	ldr	r3, [r3, #0]
 8005d26:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005d28:	68bb      	ldr	r3, [r7, #8]
 8005d2a:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 8005d2c:	2301      	movs	r3, #1
 8005d2e:	60fb      	str	r3, [r7, #12]
 8005d30:	e008      	b.n	8005d44 <xTaskPriorityInherit+0xf4>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 8005d32:	68bb      	ldr	r3, [r7, #8]
 8005d34:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005d36:	4b06      	ldr	r3, [pc, #24]	; (8005d50 <xTaskPriorityInherit+0x100>)
 8005d38:	681b      	ldr	r3, [r3, #0]
 8005d3a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005d3c:	429a      	cmp	r2, r3
 8005d3e:	d201      	bcs.n	8005d44 <xTaskPriorityInherit+0xf4>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 8005d40:	2301      	movs	r3, #1
 8005d42:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8005d44:	68fb      	ldr	r3, [r7, #12]
	}
 8005d46:	4618      	mov	r0, r3
 8005d48:	3710      	adds	r7, #16
 8005d4a:	46bd      	mov	sp, r7
 8005d4c:	bd80      	pop	{r7, pc}
 8005d4e:	bf00      	nop
 8005d50:	24000220 	.word	0x24000220
 8005d54:	24000224 	.word	0x24000224
 8005d58:	2400051c 	.word	0x2400051c

08005d5c <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8005d5c:	b580      	push	{r7, lr}
 8005d5e:	b086      	sub	sp, #24
 8005d60:	af00      	add	r7, sp, #0
 8005d62:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
 8005d64:	687b      	ldr	r3, [r7, #4]
 8005d66:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8005d68:	2300      	movs	r3, #0
 8005d6a:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8005d6c:	687b      	ldr	r3, [r7, #4]
 8005d6e:	2b00      	cmp	r3, #0
 8005d70:	d06c      	beq.n	8005e4c <xTaskPriorityDisinherit+0xf0>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8005d72:	4b39      	ldr	r3, [pc, #228]	; (8005e58 <xTaskPriorityDisinherit+0xfc>)
 8005d74:	681b      	ldr	r3, [r3, #0]
 8005d76:	693a      	ldr	r2, [r7, #16]
 8005d78:	429a      	cmp	r2, r3
 8005d7a:	d009      	beq.n	8005d90 <xTaskPriorityDisinherit+0x34>
 8005d7c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005d80:	f383 8811 	msr	BASEPRI, r3
 8005d84:	f3bf 8f6f 	isb	sy
 8005d88:	f3bf 8f4f 	dsb	sy
 8005d8c:	60fb      	str	r3, [r7, #12]
 8005d8e:	e7fe      	b.n	8005d8e <xTaskPriorityDisinherit+0x32>
			configASSERT( pxTCB->uxMutexesHeld );
 8005d90:	693b      	ldr	r3, [r7, #16]
 8005d92:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005d94:	2b00      	cmp	r3, #0
 8005d96:	d109      	bne.n	8005dac <xTaskPriorityDisinherit+0x50>
 8005d98:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005d9c:	f383 8811 	msr	BASEPRI, r3
 8005da0:	f3bf 8f6f 	isb	sy
 8005da4:	f3bf 8f4f 	dsb	sy
 8005da8:	60bb      	str	r3, [r7, #8]
 8005daa:	e7fe      	b.n	8005daa <xTaskPriorityDisinherit+0x4e>
			( pxTCB->uxMutexesHeld )--;
 8005dac:	693b      	ldr	r3, [r7, #16]
 8005dae:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005db0:	1e5a      	subs	r2, r3, #1
 8005db2:	693b      	ldr	r3, [r7, #16]
 8005db4:	649a      	str	r2, [r3, #72]	; 0x48

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8005db6:	693b      	ldr	r3, [r7, #16]
 8005db8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005dba:	693b      	ldr	r3, [r7, #16]
 8005dbc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005dbe:	429a      	cmp	r2, r3
 8005dc0:	d044      	beq.n	8005e4c <xTaskPriorityDisinherit+0xf0>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8005dc2:	693b      	ldr	r3, [r7, #16]
 8005dc4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005dc6:	2b00      	cmp	r3, #0
 8005dc8:	d140      	bne.n	8005e4c <xTaskPriorityDisinherit+0xf0>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8005dca:	693b      	ldr	r3, [r7, #16]
 8005dcc:	3304      	adds	r3, #4
 8005dce:	4618      	mov	r0, r3
 8005dd0:	f7fe fa9b 	bl	800430a <uxListRemove>
 8005dd4:	4603      	mov	r3, r0
 8005dd6:	2b00      	cmp	r3, #0
 8005dd8:	d115      	bne.n	8005e06 <xTaskPriorityDisinherit+0xaa>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 8005dda:	693b      	ldr	r3, [r7, #16]
 8005ddc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005dde:	491f      	ldr	r1, [pc, #124]	; (8005e5c <xTaskPriorityDisinherit+0x100>)
 8005de0:	4613      	mov	r3, r2
 8005de2:	009b      	lsls	r3, r3, #2
 8005de4:	4413      	add	r3, r2
 8005de6:	009b      	lsls	r3, r3, #2
 8005de8:	440b      	add	r3, r1
 8005dea:	681b      	ldr	r3, [r3, #0]
 8005dec:	2b00      	cmp	r3, #0
 8005dee:	d10a      	bne.n	8005e06 <xTaskPriorityDisinherit+0xaa>
 8005df0:	693b      	ldr	r3, [r7, #16]
 8005df2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005df4:	2201      	movs	r2, #1
 8005df6:	fa02 f303 	lsl.w	r3, r2, r3
 8005dfa:	43da      	mvns	r2, r3
 8005dfc:	4b18      	ldr	r3, [pc, #96]	; (8005e60 <xTaskPriorityDisinherit+0x104>)
 8005dfe:	681b      	ldr	r3, [r3, #0]
 8005e00:	4013      	ands	r3, r2
 8005e02:	4a17      	ldr	r2, [pc, #92]	; (8005e60 <xTaskPriorityDisinherit+0x104>)
 8005e04:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8005e06:	693b      	ldr	r3, [r7, #16]
 8005e08:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005e0a:	693b      	ldr	r3, [r7, #16]
 8005e0c:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005e0e:	693b      	ldr	r3, [r7, #16]
 8005e10:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005e12:	f1c3 0220 	rsb	r2, r3, #32
 8005e16:	693b      	ldr	r3, [r7, #16]
 8005e18:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8005e1a:	693b      	ldr	r3, [r7, #16]
 8005e1c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005e1e:	2201      	movs	r2, #1
 8005e20:	409a      	lsls	r2, r3
 8005e22:	4b0f      	ldr	r3, [pc, #60]	; (8005e60 <xTaskPriorityDisinherit+0x104>)
 8005e24:	681b      	ldr	r3, [r3, #0]
 8005e26:	4313      	orrs	r3, r2
 8005e28:	4a0d      	ldr	r2, [pc, #52]	; (8005e60 <xTaskPriorityDisinherit+0x104>)
 8005e2a:	6013      	str	r3, [r2, #0]
 8005e2c:	693b      	ldr	r3, [r7, #16]
 8005e2e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005e30:	4613      	mov	r3, r2
 8005e32:	009b      	lsls	r3, r3, #2
 8005e34:	4413      	add	r3, r2
 8005e36:	009b      	lsls	r3, r3, #2
 8005e38:	4a08      	ldr	r2, [pc, #32]	; (8005e5c <xTaskPriorityDisinherit+0x100>)
 8005e3a:	441a      	add	r2, r3
 8005e3c:	693b      	ldr	r3, [r7, #16]
 8005e3e:	3304      	adds	r3, #4
 8005e40:	4619      	mov	r1, r3
 8005e42:	4610      	mov	r0, r2
 8005e44:	f7fe fa04 	bl	8004250 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8005e48:	2301      	movs	r3, #1
 8005e4a:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8005e4c:	697b      	ldr	r3, [r7, #20]
	}
 8005e4e:	4618      	mov	r0, r3
 8005e50:	3718      	adds	r7, #24
 8005e52:	46bd      	mov	sp, r7
 8005e54:	bd80      	pop	{r7, pc}
 8005e56:	bf00      	nop
 8005e58:	24000220 	.word	0x24000220
 8005e5c:	24000224 	.word	0x24000224
 8005e60:	2400051c 	.word	0x2400051c

08005e64 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 8005e64:	b580      	push	{r7, lr}
 8005e66:	b088      	sub	sp, #32
 8005e68:	af00      	add	r7, sp, #0
 8005e6a:	6078      	str	r0, [r7, #4]
 8005e6c:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
 8005e6e:	687b      	ldr	r3, [r7, #4]
 8005e70:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 8005e72:	2301      	movs	r3, #1
 8005e74:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8005e76:	687b      	ldr	r3, [r7, #4]
 8005e78:	2b00      	cmp	r3, #0
 8005e7a:	f000 8086 	beq.w	8005f8a <vTaskPriorityDisinheritAfterTimeout+0x126>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 8005e7e:	69bb      	ldr	r3, [r7, #24]
 8005e80:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005e82:	2b00      	cmp	r3, #0
 8005e84:	d109      	bne.n	8005e9a <vTaskPriorityDisinheritAfterTimeout+0x36>
 8005e86:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005e8a:	f383 8811 	msr	BASEPRI, r3
 8005e8e:	f3bf 8f6f 	isb	sy
 8005e92:	f3bf 8f4f 	dsb	sy
 8005e96:	60fb      	str	r3, [r7, #12]
 8005e98:	e7fe      	b.n	8005e98 <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 8005e9a:	69bb      	ldr	r3, [r7, #24]
 8005e9c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005e9e:	683a      	ldr	r2, [r7, #0]
 8005ea0:	429a      	cmp	r2, r3
 8005ea2:	d902      	bls.n	8005eaa <vTaskPriorityDisinheritAfterTimeout+0x46>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 8005ea4:	683b      	ldr	r3, [r7, #0]
 8005ea6:	61fb      	str	r3, [r7, #28]
 8005ea8:	e002      	b.n	8005eb0 <vTaskPriorityDisinheritAfterTimeout+0x4c>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 8005eaa:	69bb      	ldr	r3, [r7, #24]
 8005eac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005eae:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 8005eb0:	69bb      	ldr	r3, [r7, #24]
 8005eb2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005eb4:	69fa      	ldr	r2, [r7, #28]
 8005eb6:	429a      	cmp	r2, r3
 8005eb8:	d067      	beq.n	8005f8a <vTaskPriorityDisinheritAfterTimeout+0x126>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 8005eba:	69bb      	ldr	r3, [r7, #24]
 8005ebc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005ebe:	697a      	ldr	r2, [r7, #20]
 8005ec0:	429a      	cmp	r2, r3
 8005ec2:	d162      	bne.n	8005f8a <vTaskPriorityDisinheritAfterTimeout+0x126>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 8005ec4:	4b33      	ldr	r3, [pc, #204]	; (8005f94 <vTaskPriorityDisinheritAfterTimeout+0x130>)
 8005ec6:	681b      	ldr	r3, [r3, #0]
 8005ec8:	69ba      	ldr	r2, [r7, #24]
 8005eca:	429a      	cmp	r2, r3
 8005ecc:	d109      	bne.n	8005ee2 <vTaskPriorityDisinheritAfterTimeout+0x7e>
 8005ece:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005ed2:	f383 8811 	msr	BASEPRI, r3
 8005ed6:	f3bf 8f6f 	isb	sy
 8005eda:	f3bf 8f4f 	dsb	sy
 8005ede:	60bb      	str	r3, [r7, #8]
 8005ee0:	e7fe      	b.n	8005ee0 <vTaskPriorityDisinheritAfterTimeout+0x7c>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 8005ee2:	69bb      	ldr	r3, [r7, #24]
 8005ee4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005ee6:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 8005ee8:	69bb      	ldr	r3, [r7, #24]
 8005eea:	69fa      	ldr	r2, [r7, #28]
 8005eec:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8005eee:	69bb      	ldr	r3, [r7, #24]
 8005ef0:	699b      	ldr	r3, [r3, #24]
 8005ef2:	2b00      	cmp	r3, #0
 8005ef4:	db04      	blt.n	8005f00 <vTaskPriorityDisinheritAfterTimeout+0x9c>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005ef6:	69fb      	ldr	r3, [r7, #28]
 8005ef8:	f1c3 0220 	rsb	r2, r3, #32
 8005efc:	69bb      	ldr	r3, [r7, #24]
 8005efe:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 8005f00:	69bb      	ldr	r3, [r7, #24]
 8005f02:	6959      	ldr	r1, [r3, #20]
 8005f04:	693a      	ldr	r2, [r7, #16]
 8005f06:	4613      	mov	r3, r2
 8005f08:	009b      	lsls	r3, r3, #2
 8005f0a:	4413      	add	r3, r2
 8005f0c:	009b      	lsls	r3, r3, #2
 8005f0e:	4a22      	ldr	r2, [pc, #136]	; (8005f98 <vTaskPriorityDisinheritAfterTimeout+0x134>)
 8005f10:	4413      	add	r3, r2
 8005f12:	4299      	cmp	r1, r3
 8005f14:	d101      	bne.n	8005f1a <vTaskPriorityDisinheritAfterTimeout+0xb6>
 8005f16:	2301      	movs	r3, #1
 8005f18:	e000      	b.n	8005f1c <vTaskPriorityDisinheritAfterTimeout+0xb8>
 8005f1a:	2300      	movs	r3, #0
 8005f1c:	2b00      	cmp	r3, #0
 8005f1e:	d034      	beq.n	8005f8a <vTaskPriorityDisinheritAfterTimeout+0x126>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8005f20:	69bb      	ldr	r3, [r7, #24]
 8005f22:	3304      	adds	r3, #4
 8005f24:	4618      	mov	r0, r3
 8005f26:	f7fe f9f0 	bl	800430a <uxListRemove>
 8005f2a:	4603      	mov	r3, r0
 8005f2c:	2b00      	cmp	r3, #0
 8005f2e:	d115      	bne.n	8005f5c <vTaskPriorityDisinheritAfterTimeout+0xf8>
						{
							taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 8005f30:	69bb      	ldr	r3, [r7, #24]
 8005f32:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005f34:	4918      	ldr	r1, [pc, #96]	; (8005f98 <vTaskPriorityDisinheritAfterTimeout+0x134>)
 8005f36:	4613      	mov	r3, r2
 8005f38:	009b      	lsls	r3, r3, #2
 8005f3a:	4413      	add	r3, r2
 8005f3c:	009b      	lsls	r3, r3, #2
 8005f3e:	440b      	add	r3, r1
 8005f40:	681b      	ldr	r3, [r3, #0]
 8005f42:	2b00      	cmp	r3, #0
 8005f44:	d10a      	bne.n	8005f5c <vTaskPriorityDisinheritAfterTimeout+0xf8>
 8005f46:	69bb      	ldr	r3, [r7, #24]
 8005f48:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005f4a:	2201      	movs	r2, #1
 8005f4c:	fa02 f303 	lsl.w	r3, r2, r3
 8005f50:	43da      	mvns	r2, r3
 8005f52:	4b12      	ldr	r3, [pc, #72]	; (8005f9c <vTaskPriorityDisinheritAfterTimeout+0x138>)
 8005f54:	681b      	ldr	r3, [r3, #0]
 8005f56:	4013      	ands	r3, r2
 8005f58:	4a10      	ldr	r2, [pc, #64]	; (8005f9c <vTaskPriorityDisinheritAfterTimeout+0x138>)
 8005f5a:	6013      	str	r3, [r2, #0]
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 8005f5c:	69bb      	ldr	r3, [r7, #24]
 8005f5e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005f60:	2201      	movs	r2, #1
 8005f62:	409a      	lsls	r2, r3
 8005f64:	4b0d      	ldr	r3, [pc, #52]	; (8005f9c <vTaskPriorityDisinheritAfterTimeout+0x138>)
 8005f66:	681b      	ldr	r3, [r3, #0]
 8005f68:	4313      	orrs	r3, r2
 8005f6a:	4a0c      	ldr	r2, [pc, #48]	; (8005f9c <vTaskPriorityDisinheritAfterTimeout+0x138>)
 8005f6c:	6013      	str	r3, [r2, #0]
 8005f6e:	69bb      	ldr	r3, [r7, #24]
 8005f70:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005f72:	4613      	mov	r3, r2
 8005f74:	009b      	lsls	r3, r3, #2
 8005f76:	4413      	add	r3, r2
 8005f78:	009b      	lsls	r3, r3, #2
 8005f7a:	4a07      	ldr	r2, [pc, #28]	; (8005f98 <vTaskPriorityDisinheritAfterTimeout+0x134>)
 8005f7c:	441a      	add	r2, r3
 8005f7e:	69bb      	ldr	r3, [r7, #24]
 8005f80:	3304      	adds	r3, #4
 8005f82:	4619      	mov	r1, r3
 8005f84:	4610      	mov	r0, r2
 8005f86:	f7fe f963 	bl	8004250 <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8005f8a:	bf00      	nop
 8005f8c:	3720      	adds	r7, #32
 8005f8e:	46bd      	mov	sp, r7
 8005f90:	bd80      	pop	{r7, pc}
 8005f92:	bf00      	nop
 8005f94:	24000220 	.word	0x24000220
 8005f98:	24000224 	.word	0x24000224
 8005f9c:	2400051c 	.word	0x2400051c

08005fa0 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void *pvTaskIncrementMutexHeldCount( void )
	{
 8005fa0:	b480      	push	{r7}
 8005fa2:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 8005fa4:	4b07      	ldr	r3, [pc, #28]	; (8005fc4 <pvTaskIncrementMutexHeldCount+0x24>)
 8005fa6:	681b      	ldr	r3, [r3, #0]
 8005fa8:	2b00      	cmp	r3, #0
 8005faa:	d004      	beq.n	8005fb6 <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 8005fac:	4b05      	ldr	r3, [pc, #20]	; (8005fc4 <pvTaskIncrementMutexHeldCount+0x24>)
 8005fae:	681b      	ldr	r3, [r3, #0]
 8005fb0:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8005fb2:	3201      	adds	r2, #1
 8005fb4:	649a      	str	r2, [r3, #72]	; 0x48
		}

		return pxCurrentTCB;
 8005fb6:	4b03      	ldr	r3, [pc, #12]	; (8005fc4 <pvTaskIncrementMutexHeldCount+0x24>)
 8005fb8:	681b      	ldr	r3, [r3, #0]
	}
 8005fba:	4618      	mov	r0, r3
 8005fbc:	46bd      	mov	sp, r7
 8005fbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fc2:	4770      	bx	lr
 8005fc4:	24000220 	.word	0x24000220

08005fc8 <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8005fc8:	b580      	push	{r7, lr}
 8005fca:	b084      	sub	sp, #16
 8005fcc:	af00      	add	r7, sp, #0
 8005fce:	6078      	str	r0, [r7, #4]
 8005fd0:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8005fd2:	4b29      	ldr	r3, [pc, #164]	; (8006078 <prvAddCurrentTaskToDelayedList+0xb0>)
 8005fd4:	681b      	ldr	r3, [r3, #0]
 8005fd6:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8005fd8:	4b28      	ldr	r3, [pc, #160]	; (800607c <prvAddCurrentTaskToDelayedList+0xb4>)
 8005fda:	681b      	ldr	r3, [r3, #0]
 8005fdc:	3304      	adds	r3, #4
 8005fde:	4618      	mov	r0, r3
 8005fe0:	f7fe f993 	bl	800430a <uxListRemove>
 8005fe4:	4603      	mov	r3, r0
 8005fe6:	2b00      	cmp	r3, #0
 8005fe8:	d10b      	bne.n	8006002 <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority );
 8005fea:	4b24      	ldr	r3, [pc, #144]	; (800607c <prvAddCurrentTaskToDelayedList+0xb4>)
 8005fec:	681b      	ldr	r3, [r3, #0]
 8005fee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005ff0:	2201      	movs	r2, #1
 8005ff2:	fa02 f303 	lsl.w	r3, r2, r3
 8005ff6:	43da      	mvns	r2, r3
 8005ff8:	4b21      	ldr	r3, [pc, #132]	; (8006080 <prvAddCurrentTaskToDelayedList+0xb8>)
 8005ffa:	681b      	ldr	r3, [r3, #0]
 8005ffc:	4013      	ands	r3, r2
 8005ffe:	4a20      	ldr	r2, [pc, #128]	; (8006080 <prvAddCurrentTaskToDelayedList+0xb8>)
 8006000:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8006002:	687b      	ldr	r3, [r7, #4]
 8006004:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006008:	d10a      	bne.n	8006020 <prvAddCurrentTaskToDelayedList+0x58>
 800600a:	683b      	ldr	r3, [r7, #0]
 800600c:	2b00      	cmp	r3, #0
 800600e:	d007      	beq.n	8006020 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8006010:	4b1a      	ldr	r3, [pc, #104]	; (800607c <prvAddCurrentTaskToDelayedList+0xb4>)
 8006012:	681b      	ldr	r3, [r3, #0]
 8006014:	3304      	adds	r3, #4
 8006016:	4619      	mov	r1, r3
 8006018:	481a      	ldr	r0, [pc, #104]	; (8006084 <prvAddCurrentTaskToDelayedList+0xbc>)
 800601a:	f7fe f919 	bl	8004250 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800601e:	e026      	b.n	800606e <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8006020:	68fa      	ldr	r2, [r7, #12]
 8006022:	687b      	ldr	r3, [r7, #4]
 8006024:	4413      	add	r3, r2
 8006026:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8006028:	4b14      	ldr	r3, [pc, #80]	; (800607c <prvAddCurrentTaskToDelayedList+0xb4>)
 800602a:	681b      	ldr	r3, [r3, #0]
 800602c:	68ba      	ldr	r2, [r7, #8]
 800602e:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8006030:	68ba      	ldr	r2, [r7, #8]
 8006032:	68fb      	ldr	r3, [r7, #12]
 8006034:	429a      	cmp	r2, r3
 8006036:	d209      	bcs.n	800604c <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8006038:	4b13      	ldr	r3, [pc, #76]	; (8006088 <prvAddCurrentTaskToDelayedList+0xc0>)
 800603a:	681a      	ldr	r2, [r3, #0]
 800603c:	4b0f      	ldr	r3, [pc, #60]	; (800607c <prvAddCurrentTaskToDelayedList+0xb4>)
 800603e:	681b      	ldr	r3, [r3, #0]
 8006040:	3304      	adds	r3, #4
 8006042:	4619      	mov	r1, r3
 8006044:	4610      	mov	r0, r2
 8006046:	f7fe f927 	bl	8004298 <vListInsert>
}
 800604a:	e010      	b.n	800606e <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800604c:	4b0f      	ldr	r3, [pc, #60]	; (800608c <prvAddCurrentTaskToDelayedList+0xc4>)
 800604e:	681a      	ldr	r2, [r3, #0]
 8006050:	4b0a      	ldr	r3, [pc, #40]	; (800607c <prvAddCurrentTaskToDelayedList+0xb4>)
 8006052:	681b      	ldr	r3, [r3, #0]
 8006054:	3304      	adds	r3, #4
 8006056:	4619      	mov	r1, r3
 8006058:	4610      	mov	r0, r2
 800605a:	f7fe f91d 	bl	8004298 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800605e:	4b0c      	ldr	r3, [pc, #48]	; (8006090 <prvAddCurrentTaskToDelayedList+0xc8>)
 8006060:	681b      	ldr	r3, [r3, #0]
 8006062:	68ba      	ldr	r2, [r7, #8]
 8006064:	429a      	cmp	r2, r3
 8006066:	d202      	bcs.n	800606e <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 8006068:	4a09      	ldr	r2, [pc, #36]	; (8006090 <prvAddCurrentTaskToDelayedList+0xc8>)
 800606a:	68bb      	ldr	r3, [r7, #8]
 800606c:	6013      	str	r3, [r2, #0]
}
 800606e:	bf00      	nop
 8006070:	3710      	adds	r7, #16
 8006072:	46bd      	mov	sp, r7
 8006074:	bd80      	pop	{r7, pc}
 8006076:	bf00      	nop
 8006078:	24000518 	.word	0x24000518
 800607c:	24000220 	.word	0x24000220
 8006080:	2400051c 	.word	0x2400051c
 8006084:	24000500 	.word	0x24000500
 8006088:	240004d0 	.word	0x240004d0
 800608c:	240004cc 	.word	0x240004cc
 8006090:	24000534 	.word	0x24000534

08006094 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8006094:	b480      	push	{r7}
 8006096:	b085      	sub	sp, #20
 8006098:	af00      	add	r7, sp, #0
 800609a:	60f8      	str	r0, [r7, #12]
 800609c:	60b9      	str	r1, [r7, #8]
 800609e:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 80060a0:	68fb      	ldr	r3, [r7, #12]
 80060a2:	3b04      	subs	r3, #4
 80060a4:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 80060a6:	68fb      	ldr	r3, [r7, #12]
 80060a8:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80060ac:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80060ae:	68fb      	ldr	r3, [r7, #12]
 80060b0:	3b04      	subs	r3, #4
 80060b2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 80060b4:	68bb      	ldr	r3, [r7, #8]
 80060b6:	f023 0201 	bic.w	r2, r3, #1
 80060ba:	68fb      	ldr	r3, [r7, #12]
 80060bc:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80060be:	68fb      	ldr	r3, [r7, #12]
 80060c0:	3b04      	subs	r3, #4
 80060c2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 80060c4:	4a0c      	ldr	r2, [pc, #48]	; (80060f8 <pxPortInitialiseStack+0x64>)
 80060c6:	68fb      	ldr	r3, [r7, #12]
 80060c8:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 80060ca:	68fb      	ldr	r3, [r7, #12]
 80060cc:	3b14      	subs	r3, #20
 80060ce:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 80060d0:	687a      	ldr	r2, [r7, #4]
 80060d2:	68fb      	ldr	r3, [r7, #12]
 80060d4:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 80060d6:	68fb      	ldr	r3, [r7, #12]
 80060d8:	3b04      	subs	r3, #4
 80060da:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 80060dc:	68fb      	ldr	r3, [r7, #12]
 80060de:	f06f 0202 	mvn.w	r2, #2
 80060e2:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 80060e4:	68fb      	ldr	r3, [r7, #12]
 80060e6:	3b20      	subs	r3, #32
 80060e8:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 80060ea:	68fb      	ldr	r3, [r7, #12]
}
 80060ec:	4618      	mov	r0, r3
 80060ee:	3714      	adds	r7, #20
 80060f0:	46bd      	mov	sp, r7
 80060f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060f6:	4770      	bx	lr
 80060f8:	080060fd 	.word	0x080060fd

080060fc <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 80060fc:	b480      	push	{r7}
 80060fe:	b085      	sub	sp, #20
 8006100:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8006102:	2300      	movs	r3, #0
 8006104:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8006106:	4b11      	ldr	r3, [pc, #68]	; (800614c <prvTaskExitError+0x50>)
 8006108:	681b      	ldr	r3, [r3, #0]
 800610a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800610e:	d009      	beq.n	8006124 <prvTaskExitError+0x28>
 8006110:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006114:	f383 8811 	msr	BASEPRI, r3
 8006118:	f3bf 8f6f 	isb	sy
 800611c:	f3bf 8f4f 	dsb	sy
 8006120:	60fb      	str	r3, [r7, #12]
 8006122:	e7fe      	b.n	8006122 <prvTaskExitError+0x26>
 8006124:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006128:	f383 8811 	msr	BASEPRI, r3
 800612c:	f3bf 8f6f 	isb	sy
 8006130:	f3bf 8f4f 	dsb	sy
 8006134:	60bb      	str	r3, [r7, #8]
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8006136:	bf00      	nop
 8006138:	687b      	ldr	r3, [r7, #4]
 800613a:	2b00      	cmp	r3, #0
 800613c:	d0fc      	beq.n	8006138 <prvTaskExitError+0x3c>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800613e:	bf00      	nop
 8006140:	3714      	adds	r7, #20
 8006142:	46bd      	mov	sp, r7
 8006144:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006148:	4770      	bx	lr
 800614a:	bf00      	nop
 800614c:	24000008 	.word	0x24000008

08006150 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8006150:	4b07      	ldr	r3, [pc, #28]	; (8006170 <pxCurrentTCBConst2>)
 8006152:	6819      	ldr	r1, [r3, #0]
 8006154:	6808      	ldr	r0, [r1, #0]
 8006156:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800615a:	f380 8809 	msr	PSP, r0
 800615e:	f3bf 8f6f 	isb	sy
 8006162:	f04f 0000 	mov.w	r0, #0
 8006166:	f380 8811 	msr	BASEPRI, r0
 800616a:	4770      	bx	lr
 800616c:	f3af 8000 	nop.w

08006170 <pxCurrentTCBConst2>:
 8006170:	24000220 	.word	0x24000220
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8006174:	bf00      	nop
 8006176:	bf00      	nop

08006178 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8006178:	4808      	ldr	r0, [pc, #32]	; (800619c <prvPortStartFirstTask+0x24>)
 800617a:	6800      	ldr	r0, [r0, #0]
 800617c:	6800      	ldr	r0, [r0, #0]
 800617e:	f380 8808 	msr	MSP, r0
 8006182:	f04f 0000 	mov.w	r0, #0
 8006186:	f380 8814 	msr	CONTROL, r0
 800618a:	b662      	cpsie	i
 800618c:	b661      	cpsie	f
 800618e:	f3bf 8f4f 	dsb	sy
 8006192:	f3bf 8f6f 	isb	sy
 8006196:	df00      	svc	0
 8006198:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800619a:	bf00      	nop
 800619c:	e000ed08 	.word	0xe000ed08

080061a0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 80061a0:	b580      	push	{r7, lr}
 80061a2:	b086      	sub	sp, #24
 80061a4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 80061a6:	4b44      	ldr	r3, [pc, #272]	; (80062b8 <xPortStartScheduler+0x118>)
 80061a8:	681b      	ldr	r3, [r3, #0]
 80061aa:	4a44      	ldr	r2, [pc, #272]	; (80062bc <xPortStartScheduler+0x11c>)
 80061ac:	4293      	cmp	r3, r2
 80061ae:	d109      	bne.n	80061c4 <xPortStartScheduler+0x24>
 80061b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80061b4:	f383 8811 	msr	BASEPRI, r3
 80061b8:	f3bf 8f6f 	isb	sy
 80061bc:	f3bf 8f4f 	dsb	sy
 80061c0:	613b      	str	r3, [r7, #16]
 80061c2:	e7fe      	b.n	80061c2 <xPortStartScheduler+0x22>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 80061c4:	4b3c      	ldr	r3, [pc, #240]	; (80062b8 <xPortStartScheduler+0x118>)
 80061c6:	681b      	ldr	r3, [r3, #0]
 80061c8:	4a3d      	ldr	r2, [pc, #244]	; (80062c0 <xPortStartScheduler+0x120>)
 80061ca:	4293      	cmp	r3, r2
 80061cc:	d109      	bne.n	80061e2 <xPortStartScheduler+0x42>
 80061ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 80061d2:	f383 8811 	msr	BASEPRI, r3
 80061d6:	f3bf 8f6f 	isb	sy
 80061da:	f3bf 8f4f 	dsb	sy
 80061de:	60fb      	str	r3, [r7, #12]
 80061e0:	e7fe      	b.n	80061e0 <xPortStartScheduler+0x40>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 80061e2:	4b38      	ldr	r3, [pc, #224]	; (80062c4 <xPortStartScheduler+0x124>)
 80061e4:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 80061e6:	697b      	ldr	r3, [r7, #20]
 80061e8:	781b      	ldrb	r3, [r3, #0]
 80061ea:	b2db      	uxtb	r3, r3
 80061ec:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 80061ee:	697b      	ldr	r3, [r7, #20]
 80061f0:	22ff      	movs	r2, #255	; 0xff
 80061f2:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 80061f4:	697b      	ldr	r3, [r7, #20]
 80061f6:	781b      	ldrb	r3, [r3, #0]
 80061f8:	b2db      	uxtb	r3, r3
 80061fa:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 80061fc:	78fb      	ldrb	r3, [r7, #3]
 80061fe:	b2db      	uxtb	r3, r3
 8006200:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8006204:	b2da      	uxtb	r2, r3
 8006206:	4b30      	ldr	r3, [pc, #192]	; (80062c8 <xPortStartScheduler+0x128>)
 8006208:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800620a:	4b30      	ldr	r3, [pc, #192]	; (80062cc <xPortStartScheduler+0x12c>)
 800620c:	2207      	movs	r2, #7
 800620e:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8006210:	e009      	b.n	8006226 <xPortStartScheduler+0x86>
		{
			ulMaxPRIGROUPValue--;
 8006212:	4b2e      	ldr	r3, [pc, #184]	; (80062cc <xPortStartScheduler+0x12c>)
 8006214:	681b      	ldr	r3, [r3, #0]
 8006216:	3b01      	subs	r3, #1
 8006218:	4a2c      	ldr	r2, [pc, #176]	; (80062cc <xPortStartScheduler+0x12c>)
 800621a:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800621c:	78fb      	ldrb	r3, [r7, #3]
 800621e:	b2db      	uxtb	r3, r3
 8006220:	005b      	lsls	r3, r3, #1
 8006222:	b2db      	uxtb	r3, r3
 8006224:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8006226:	78fb      	ldrb	r3, [r7, #3]
 8006228:	b2db      	uxtb	r3, r3
 800622a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800622e:	2b80      	cmp	r3, #128	; 0x80
 8006230:	d0ef      	beq.n	8006212 <xPortStartScheduler+0x72>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8006232:	4b26      	ldr	r3, [pc, #152]	; (80062cc <xPortStartScheduler+0x12c>)
 8006234:	681b      	ldr	r3, [r3, #0]
 8006236:	f1c3 0307 	rsb	r3, r3, #7
 800623a:	2b04      	cmp	r3, #4
 800623c:	d009      	beq.n	8006252 <xPortStartScheduler+0xb2>
 800623e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006242:	f383 8811 	msr	BASEPRI, r3
 8006246:	f3bf 8f6f 	isb	sy
 800624a:	f3bf 8f4f 	dsb	sy
 800624e:	60bb      	str	r3, [r7, #8]
 8006250:	e7fe      	b.n	8006250 <xPortStartScheduler+0xb0>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8006252:	4b1e      	ldr	r3, [pc, #120]	; (80062cc <xPortStartScheduler+0x12c>)
 8006254:	681b      	ldr	r3, [r3, #0]
 8006256:	021b      	lsls	r3, r3, #8
 8006258:	4a1c      	ldr	r2, [pc, #112]	; (80062cc <xPortStartScheduler+0x12c>)
 800625a:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800625c:	4b1b      	ldr	r3, [pc, #108]	; (80062cc <xPortStartScheduler+0x12c>)
 800625e:	681b      	ldr	r3, [r3, #0]
 8006260:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8006264:	4a19      	ldr	r2, [pc, #100]	; (80062cc <xPortStartScheduler+0x12c>)
 8006266:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8006268:	687b      	ldr	r3, [r7, #4]
 800626a:	b2da      	uxtb	r2, r3
 800626c:	697b      	ldr	r3, [r7, #20]
 800626e:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8006270:	4b17      	ldr	r3, [pc, #92]	; (80062d0 <xPortStartScheduler+0x130>)
 8006272:	681b      	ldr	r3, [r3, #0]
 8006274:	4a16      	ldr	r2, [pc, #88]	; (80062d0 <xPortStartScheduler+0x130>)
 8006276:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800627a:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800627c:	4b14      	ldr	r3, [pc, #80]	; (80062d0 <xPortStartScheduler+0x130>)
 800627e:	681b      	ldr	r3, [r3, #0]
 8006280:	4a13      	ldr	r2, [pc, #76]	; (80062d0 <xPortStartScheduler+0x130>)
 8006282:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8006286:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8006288:	f000 f8d6 	bl	8006438 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800628c:	4b11      	ldr	r3, [pc, #68]	; (80062d4 <xPortStartScheduler+0x134>)
 800628e:	2200      	movs	r2, #0
 8006290:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8006292:	f000 f8f5 	bl	8006480 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8006296:	4b10      	ldr	r3, [pc, #64]	; (80062d8 <xPortStartScheduler+0x138>)
 8006298:	681b      	ldr	r3, [r3, #0]
 800629a:	4a0f      	ldr	r2, [pc, #60]	; (80062d8 <xPortStartScheduler+0x138>)
 800629c:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 80062a0:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 80062a2:	f7ff ff69 	bl	8006178 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 80062a6:	f7ff fa99 	bl	80057dc <vTaskSwitchContext>
	prvTaskExitError();
 80062aa:	f7ff ff27 	bl	80060fc <prvTaskExitError>

	/* Should not get here! */
	return 0;
 80062ae:	2300      	movs	r3, #0
}
 80062b0:	4618      	mov	r0, r3
 80062b2:	3718      	adds	r7, #24
 80062b4:	46bd      	mov	sp, r7
 80062b6:	bd80      	pop	{r7, pc}
 80062b8:	e000ed00 	.word	0xe000ed00
 80062bc:	410fc271 	.word	0x410fc271
 80062c0:	410fc270 	.word	0x410fc270
 80062c4:	e000e400 	.word	0xe000e400
 80062c8:	24000540 	.word	0x24000540
 80062cc:	24000544 	.word	0x24000544
 80062d0:	e000ed20 	.word	0xe000ed20
 80062d4:	24000008 	.word	0x24000008
 80062d8:	e000ef34 	.word	0xe000ef34

080062dc <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 80062dc:	b480      	push	{r7}
 80062de:	b083      	sub	sp, #12
 80062e0:	af00      	add	r7, sp, #0
 80062e2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80062e6:	f383 8811 	msr	BASEPRI, r3
 80062ea:	f3bf 8f6f 	isb	sy
 80062ee:	f3bf 8f4f 	dsb	sy
 80062f2:	607b      	str	r3, [r7, #4]
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 80062f4:	4b0e      	ldr	r3, [pc, #56]	; (8006330 <vPortEnterCritical+0x54>)
 80062f6:	681b      	ldr	r3, [r3, #0]
 80062f8:	3301      	adds	r3, #1
 80062fa:	4a0d      	ldr	r2, [pc, #52]	; (8006330 <vPortEnterCritical+0x54>)
 80062fc:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 80062fe:	4b0c      	ldr	r3, [pc, #48]	; (8006330 <vPortEnterCritical+0x54>)
 8006300:	681b      	ldr	r3, [r3, #0]
 8006302:	2b01      	cmp	r3, #1
 8006304:	d10e      	bne.n	8006324 <vPortEnterCritical+0x48>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8006306:	4b0b      	ldr	r3, [pc, #44]	; (8006334 <vPortEnterCritical+0x58>)
 8006308:	681b      	ldr	r3, [r3, #0]
 800630a:	b2db      	uxtb	r3, r3
 800630c:	2b00      	cmp	r3, #0
 800630e:	d009      	beq.n	8006324 <vPortEnterCritical+0x48>
 8006310:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006314:	f383 8811 	msr	BASEPRI, r3
 8006318:	f3bf 8f6f 	isb	sy
 800631c:	f3bf 8f4f 	dsb	sy
 8006320:	603b      	str	r3, [r7, #0]
 8006322:	e7fe      	b.n	8006322 <vPortEnterCritical+0x46>
	}
}
 8006324:	bf00      	nop
 8006326:	370c      	adds	r7, #12
 8006328:	46bd      	mov	sp, r7
 800632a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800632e:	4770      	bx	lr
 8006330:	24000008 	.word	0x24000008
 8006334:	e000ed04 	.word	0xe000ed04

08006338 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8006338:	b480      	push	{r7}
 800633a:	b083      	sub	sp, #12
 800633c:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800633e:	4b11      	ldr	r3, [pc, #68]	; (8006384 <vPortExitCritical+0x4c>)
 8006340:	681b      	ldr	r3, [r3, #0]
 8006342:	2b00      	cmp	r3, #0
 8006344:	d109      	bne.n	800635a <vPortExitCritical+0x22>
 8006346:	f04f 0350 	mov.w	r3, #80	; 0x50
 800634a:	f383 8811 	msr	BASEPRI, r3
 800634e:	f3bf 8f6f 	isb	sy
 8006352:	f3bf 8f4f 	dsb	sy
 8006356:	607b      	str	r3, [r7, #4]
 8006358:	e7fe      	b.n	8006358 <vPortExitCritical+0x20>
	uxCriticalNesting--;
 800635a:	4b0a      	ldr	r3, [pc, #40]	; (8006384 <vPortExitCritical+0x4c>)
 800635c:	681b      	ldr	r3, [r3, #0]
 800635e:	3b01      	subs	r3, #1
 8006360:	4a08      	ldr	r2, [pc, #32]	; (8006384 <vPortExitCritical+0x4c>)
 8006362:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8006364:	4b07      	ldr	r3, [pc, #28]	; (8006384 <vPortExitCritical+0x4c>)
 8006366:	681b      	ldr	r3, [r3, #0]
 8006368:	2b00      	cmp	r3, #0
 800636a:	d104      	bne.n	8006376 <vPortExitCritical+0x3e>
 800636c:	2300      	movs	r3, #0
 800636e:	603b      	str	r3, [r7, #0]
	__asm volatile
 8006370:	683b      	ldr	r3, [r7, #0]
 8006372:	f383 8811 	msr	BASEPRI, r3
	{
		portENABLE_INTERRUPTS();
	}
}
 8006376:	bf00      	nop
 8006378:	370c      	adds	r7, #12
 800637a:	46bd      	mov	sp, r7
 800637c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006380:	4770      	bx	lr
 8006382:	bf00      	nop
 8006384:	24000008 	.word	0x24000008
	...

08006390 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8006390:	f3ef 8009 	mrs	r0, PSP
 8006394:	f3bf 8f6f 	isb	sy
 8006398:	4b15      	ldr	r3, [pc, #84]	; (80063f0 <pxCurrentTCBConst>)
 800639a:	681a      	ldr	r2, [r3, #0]
 800639c:	f01e 0f10 	tst.w	lr, #16
 80063a0:	bf08      	it	eq
 80063a2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 80063a6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80063aa:	6010      	str	r0, [r2, #0]
 80063ac:	e92d 0009 	stmdb	sp!, {r0, r3}
 80063b0:	f04f 0050 	mov.w	r0, #80	; 0x50
 80063b4:	f380 8811 	msr	BASEPRI, r0
 80063b8:	f3bf 8f4f 	dsb	sy
 80063bc:	f3bf 8f6f 	isb	sy
 80063c0:	f7ff fa0c 	bl	80057dc <vTaskSwitchContext>
 80063c4:	f04f 0000 	mov.w	r0, #0
 80063c8:	f380 8811 	msr	BASEPRI, r0
 80063cc:	bc09      	pop	{r0, r3}
 80063ce:	6819      	ldr	r1, [r3, #0]
 80063d0:	6808      	ldr	r0, [r1, #0]
 80063d2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80063d6:	f01e 0f10 	tst.w	lr, #16
 80063da:	bf08      	it	eq
 80063dc:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 80063e0:	f380 8809 	msr	PSP, r0
 80063e4:	f3bf 8f6f 	isb	sy
 80063e8:	4770      	bx	lr
 80063ea:	bf00      	nop
 80063ec:	f3af 8000 	nop.w

080063f0 <pxCurrentTCBConst>:
 80063f0:	24000220 	.word	0x24000220
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 80063f4:	bf00      	nop
 80063f6:	bf00      	nop

080063f8 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 80063f8:	b580      	push	{r7, lr}
 80063fa:	b082      	sub	sp, #8
 80063fc:	af00      	add	r7, sp, #0
	__asm volatile
 80063fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006402:	f383 8811 	msr	BASEPRI, r3
 8006406:	f3bf 8f6f 	isb	sy
 800640a:	f3bf 8f4f 	dsb	sy
 800640e:	607b      	str	r3, [r7, #4]
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8006410:	f7ff f928 	bl	8005664 <xTaskIncrementTick>
 8006414:	4603      	mov	r3, r0
 8006416:	2b00      	cmp	r3, #0
 8006418:	d003      	beq.n	8006422 <xPortSysTickHandler+0x2a>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800641a:	4b06      	ldr	r3, [pc, #24]	; (8006434 <xPortSysTickHandler+0x3c>)
 800641c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006420:	601a      	str	r2, [r3, #0]
 8006422:	2300      	movs	r3, #0
 8006424:	603b      	str	r3, [r7, #0]
	__asm volatile
 8006426:	683b      	ldr	r3, [r7, #0]
 8006428:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portENABLE_INTERRUPTS();
}
 800642c:	bf00      	nop
 800642e:	3708      	adds	r7, #8
 8006430:	46bd      	mov	sp, r7
 8006432:	bd80      	pop	{r7, pc}
 8006434:	e000ed04 	.word	0xe000ed04

08006438 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8006438:	b480      	push	{r7}
 800643a:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800643c:	4b0b      	ldr	r3, [pc, #44]	; (800646c <vPortSetupTimerInterrupt+0x34>)
 800643e:	2200      	movs	r2, #0
 8006440:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8006442:	4b0b      	ldr	r3, [pc, #44]	; (8006470 <vPortSetupTimerInterrupt+0x38>)
 8006444:	2200      	movs	r2, #0
 8006446:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8006448:	4b0a      	ldr	r3, [pc, #40]	; (8006474 <vPortSetupTimerInterrupt+0x3c>)
 800644a:	681b      	ldr	r3, [r3, #0]
 800644c:	4a0a      	ldr	r2, [pc, #40]	; (8006478 <vPortSetupTimerInterrupt+0x40>)
 800644e:	fba2 2303 	umull	r2, r3, r2, r3
 8006452:	099b      	lsrs	r3, r3, #6
 8006454:	4a09      	ldr	r2, [pc, #36]	; (800647c <vPortSetupTimerInterrupt+0x44>)
 8006456:	3b01      	subs	r3, #1
 8006458:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800645a:	4b04      	ldr	r3, [pc, #16]	; (800646c <vPortSetupTimerInterrupt+0x34>)
 800645c:	2207      	movs	r2, #7
 800645e:	601a      	str	r2, [r3, #0]
}
 8006460:	bf00      	nop
 8006462:	46bd      	mov	sp, r7
 8006464:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006468:	4770      	bx	lr
 800646a:	bf00      	nop
 800646c:	e000e010 	.word	0xe000e010
 8006470:	e000e018 	.word	0xe000e018
 8006474:	2400002c 	.word	0x2400002c
 8006478:	10624dd3 	.word	0x10624dd3
 800647c:	e000e014 	.word	0xe000e014

08006480 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8006480:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8006490 <vPortEnableVFP+0x10>
 8006484:	6801      	ldr	r1, [r0, #0]
 8006486:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800648a:	6001      	str	r1, [r0, #0]
 800648c:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800648e:	bf00      	nop
 8006490:	e000ed88 	.word	0xe000ed88

08006494 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8006494:	b480      	push	{r7}
 8006496:	b085      	sub	sp, #20
 8006498:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800649a:	f3ef 8305 	mrs	r3, IPSR
 800649e:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 80064a0:	68fb      	ldr	r3, [r7, #12]
 80064a2:	2b0f      	cmp	r3, #15
 80064a4:	d913      	bls.n	80064ce <vPortValidateInterruptPriority+0x3a>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 80064a6:	4a16      	ldr	r2, [pc, #88]	; (8006500 <vPortValidateInterruptPriority+0x6c>)
 80064a8:	68fb      	ldr	r3, [r7, #12]
 80064aa:	4413      	add	r3, r2
 80064ac:	781b      	ldrb	r3, [r3, #0]
 80064ae:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 80064b0:	4b14      	ldr	r3, [pc, #80]	; (8006504 <vPortValidateInterruptPriority+0x70>)
 80064b2:	781b      	ldrb	r3, [r3, #0]
 80064b4:	7afa      	ldrb	r2, [r7, #11]
 80064b6:	429a      	cmp	r2, r3
 80064b8:	d209      	bcs.n	80064ce <vPortValidateInterruptPriority+0x3a>
	__asm volatile
 80064ba:	f04f 0350 	mov.w	r3, #80	; 0x50
 80064be:	f383 8811 	msr	BASEPRI, r3
 80064c2:	f3bf 8f6f 	isb	sy
 80064c6:	f3bf 8f4f 	dsb	sy
 80064ca:	607b      	str	r3, [r7, #4]
 80064cc:	e7fe      	b.n	80064cc <vPortValidateInterruptPriority+0x38>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 80064ce:	4b0e      	ldr	r3, [pc, #56]	; (8006508 <vPortValidateInterruptPriority+0x74>)
 80064d0:	681b      	ldr	r3, [r3, #0]
 80064d2:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 80064d6:	4b0d      	ldr	r3, [pc, #52]	; (800650c <vPortValidateInterruptPriority+0x78>)
 80064d8:	681b      	ldr	r3, [r3, #0]
 80064da:	429a      	cmp	r2, r3
 80064dc:	d909      	bls.n	80064f2 <vPortValidateInterruptPriority+0x5e>
 80064de:	f04f 0350 	mov.w	r3, #80	; 0x50
 80064e2:	f383 8811 	msr	BASEPRI, r3
 80064e6:	f3bf 8f6f 	isb	sy
 80064ea:	f3bf 8f4f 	dsb	sy
 80064ee:	603b      	str	r3, [r7, #0]
 80064f0:	e7fe      	b.n	80064f0 <vPortValidateInterruptPriority+0x5c>
	}
 80064f2:	bf00      	nop
 80064f4:	3714      	adds	r7, #20
 80064f6:	46bd      	mov	sp, r7
 80064f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064fc:	4770      	bx	lr
 80064fe:	bf00      	nop
 8006500:	e000e3f0 	.word	0xe000e3f0
 8006504:	24000540 	.word	0x24000540
 8006508:	e000ed0c 	.word	0xe000ed0c
 800650c:	24000544 	.word	0x24000544

08006510 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8006510:	b580      	push	{r7, lr}
 8006512:	b08a      	sub	sp, #40	; 0x28
 8006514:	af00      	add	r7, sp, #0
 8006516:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8006518:	2300      	movs	r3, #0
 800651a:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800651c:	f7fe ffd6 	bl	80054cc <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8006520:	4b57      	ldr	r3, [pc, #348]	; (8006680 <pvPortMalloc+0x170>)
 8006522:	681b      	ldr	r3, [r3, #0]
 8006524:	2b00      	cmp	r3, #0
 8006526:	d101      	bne.n	800652c <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8006528:	f000 f90c 	bl	8006744 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800652c:	4b55      	ldr	r3, [pc, #340]	; (8006684 <pvPortMalloc+0x174>)
 800652e:	681a      	ldr	r2, [r3, #0]
 8006530:	687b      	ldr	r3, [r7, #4]
 8006532:	4013      	ands	r3, r2
 8006534:	2b00      	cmp	r3, #0
 8006536:	f040 808c 	bne.w	8006652 <pvPortMalloc+0x142>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800653a:	687b      	ldr	r3, [r7, #4]
 800653c:	2b00      	cmp	r3, #0
 800653e:	d01c      	beq.n	800657a <pvPortMalloc+0x6a>
			{
				xWantedSize += xHeapStructSize;
 8006540:	2208      	movs	r2, #8
 8006542:	687b      	ldr	r3, [r7, #4]
 8006544:	4413      	add	r3, r2
 8006546:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8006548:	687b      	ldr	r3, [r7, #4]
 800654a:	f003 0307 	and.w	r3, r3, #7
 800654e:	2b00      	cmp	r3, #0
 8006550:	d013      	beq.n	800657a <pvPortMalloc+0x6a>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8006552:	687b      	ldr	r3, [r7, #4]
 8006554:	f023 0307 	bic.w	r3, r3, #7
 8006558:	3308      	adds	r3, #8
 800655a:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800655c:	687b      	ldr	r3, [r7, #4]
 800655e:	f003 0307 	and.w	r3, r3, #7
 8006562:	2b00      	cmp	r3, #0
 8006564:	d009      	beq.n	800657a <pvPortMalloc+0x6a>
 8006566:	f04f 0350 	mov.w	r3, #80	; 0x50
 800656a:	f383 8811 	msr	BASEPRI, r3
 800656e:	f3bf 8f6f 	isb	sy
 8006572:	f3bf 8f4f 	dsb	sy
 8006576:	617b      	str	r3, [r7, #20]
 8006578:	e7fe      	b.n	8006578 <pvPortMalloc+0x68>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800657a:	687b      	ldr	r3, [r7, #4]
 800657c:	2b00      	cmp	r3, #0
 800657e:	d068      	beq.n	8006652 <pvPortMalloc+0x142>
 8006580:	4b41      	ldr	r3, [pc, #260]	; (8006688 <pvPortMalloc+0x178>)
 8006582:	681b      	ldr	r3, [r3, #0]
 8006584:	687a      	ldr	r2, [r7, #4]
 8006586:	429a      	cmp	r2, r3
 8006588:	d863      	bhi.n	8006652 <pvPortMalloc+0x142>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800658a:	4b40      	ldr	r3, [pc, #256]	; (800668c <pvPortMalloc+0x17c>)
 800658c:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800658e:	4b3f      	ldr	r3, [pc, #252]	; (800668c <pvPortMalloc+0x17c>)
 8006590:	681b      	ldr	r3, [r3, #0]
 8006592:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8006594:	e004      	b.n	80065a0 <pvPortMalloc+0x90>
				{
					pxPreviousBlock = pxBlock;
 8006596:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006598:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800659a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800659c:	681b      	ldr	r3, [r3, #0]
 800659e:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80065a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80065a2:	685b      	ldr	r3, [r3, #4]
 80065a4:	687a      	ldr	r2, [r7, #4]
 80065a6:	429a      	cmp	r2, r3
 80065a8:	d903      	bls.n	80065b2 <pvPortMalloc+0xa2>
 80065aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80065ac:	681b      	ldr	r3, [r3, #0]
 80065ae:	2b00      	cmp	r3, #0
 80065b0:	d1f1      	bne.n	8006596 <pvPortMalloc+0x86>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 80065b2:	4b33      	ldr	r3, [pc, #204]	; (8006680 <pvPortMalloc+0x170>)
 80065b4:	681b      	ldr	r3, [r3, #0]
 80065b6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80065b8:	429a      	cmp	r2, r3
 80065ba:	d04a      	beq.n	8006652 <pvPortMalloc+0x142>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 80065bc:	6a3b      	ldr	r3, [r7, #32]
 80065be:	681b      	ldr	r3, [r3, #0]
 80065c0:	2208      	movs	r2, #8
 80065c2:	4413      	add	r3, r2
 80065c4:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 80065c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80065c8:	681a      	ldr	r2, [r3, #0]
 80065ca:	6a3b      	ldr	r3, [r7, #32]
 80065cc:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 80065ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80065d0:	685a      	ldr	r2, [r3, #4]
 80065d2:	687b      	ldr	r3, [r7, #4]
 80065d4:	1ad2      	subs	r2, r2, r3
 80065d6:	2308      	movs	r3, #8
 80065d8:	005b      	lsls	r3, r3, #1
 80065da:	429a      	cmp	r2, r3
 80065dc:	d91e      	bls.n	800661c <pvPortMalloc+0x10c>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 80065de:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80065e0:	687b      	ldr	r3, [r7, #4]
 80065e2:	4413      	add	r3, r2
 80065e4:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 80065e6:	69bb      	ldr	r3, [r7, #24]
 80065e8:	f003 0307 	and.w	r3, r3, #7
 80065ec:	2b00      	cmp	r3, #0
 80065ee:	d009      	beq.n	8006604 <pvPortMalloc+0xf4>
 80065f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80065f4:	f383 8811 	msr	BASEPRI, r3
 80065f8:	f3bf 8f6f 	isb	sy
 80065fc:	f3bf 8f4f 	dsb	sy
 8006600:	613b      	str	r3, [r7, #16]
 8006602:	e7fe      	b.n	8006602 <pvPortMalloc+0xf2>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8006604:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006606:	685a      	ldr	r2, [r3, #4]
 8006608:	687b      	ldr	r3, [r7, #4]
 800660a:	1ad2      	subs	r2, r2, r3
 800660c:	69bb      	ldr	r3, [r7, #24]
 800660e:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8006610:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006612:	687a      	ldr	r2, [r7, #4]
 8006614:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8006616:	69b8      	ldr	r0, [r7, #24]
 8006618:	f000 f8f6 	bl	8006808 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800661c:	4b1a      	ldr	r3, [pc, #104]	; (8006688 <pvPortMalloc+0x178>)
 800661e:	681a      	ldr	r2, [r3, #0]
 8006620:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006622:	685b      	ldr	r3, [r3, #4]
 8006624:	1ad3      	subs	r3, r2, r3
 8006626:	4a18      	ldr	r2, [pc, #96]	; (8006688 <pvPortMalloc+0x178>)
 8006628:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800662a:	4b17      	ldr	r3, [pc, #92]	; (8006688 <pvPortMalloc+0x178>)
 800662c:	681a      	ldr	r2, [r3, #0]
 800662e:	4b18      	ldr	r3, [pc, #96]	; (8006690 <pvPortMalloc+0x180>)
 8006630:	681b      	ldr	r3, [r3, #0]
 8006632:	429a      	cmp	r2, r3
 8006634:	d203      	bcs.n	800663e <pvPortMalloc+0x12e>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8006636:	4b14      	ldr	r3, [pc, #80]	; (8006688 <pvPortMalloc+0x178>)
 8006638:	681b      	ldr	r3, [r3, #0]
 800663a:	4a15      	ldr	r2, [pc, #84]	; (8006690 <pvPortMalloc+0x180>)
 800663c:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800663e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006640:	685a      	ldr	r2, [r3, #4]
 8006642:	4b10      	ldr	r3, [pc, #64]	; (8006684 <pvPortMalloc+0x174>)
 8006644:	681b      	ldr	r3, [r3, #0]
 8006646:	431a      	orrs	r2, r3
 8006648:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800664a:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800664c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800664e:	2200      	movs	r2, #0
 8006650:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8006652:	f7fe ff49 	bl	80054e8 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8006656:	69fb      	ldr	r3, [r7, #28]
 8006658:	f003 0307 	and.w	r3, r3, #7
 800665c:	2b00      	cmp	r3, #0
 800665e:	d009      	beq.n	8006674 <pvPortMalloc+0x164>
 8006660:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006664:	f383 8811 	msr	BASEPRI, r3
 8006668:	f3bf 8f6f 	isb	sy
 800666c:	f3bf 8f4f 	dsb	sy
 8006670:	60fb      	str	r3, [r7, #12]
 8006672:	e7fe      	b.n	8006672 <pvPortMalloc+0x162>
	return pvReturn;
 8006674:	69fb      	ldr	r3, [r7, #28]
}
 8006676:	4618      	mov	r0, r3
 8006678:	3728      	adds	r7, #40	; 0x28
 800667a:	46bd      	mov	sp, r7
 800667c:	bd80      	pop	{r7, pc}
 800667e:	bf00      	nop
 8006680:	24008550 	.word	0x24008550
 8006684:	2400855c 	.word	0x2400855c
 8006688:	24008554 	.word	0x24008554
 800668c:	24008548 	.word	0x24008548
 8006690:	24008558 	.word	0x24008558

08006694 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8006694:	b580      	push	{r7, lr}
 8006696:	b086      	sub	sp, #24
 8006698:	af00      	add	r7, sp, #0
 800669a:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800669c:	687b      	ldr	r3, [r7, #4]
 800669e:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 80066a0:	687b      	ldr	r3, [r7, #4]
 80066a2:	2b00      	cmp	r3, #0
 80066a4:	d046      	beq.n	8006734 <vPortFree+0xa0>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 80066a6:	2308      	movs	r3, #8
 80066a8:	425b      	negs	r3, r3
 80066aa:	697a      	ldr	r2, [r7, #20]
 80066ac:	4413      	add	r3, r2
 80066ae:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 80066b0:	697b      	ldr	r3, [r7, #20]
 80066b2:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 80066b4:	693b      	ldr	r3, [r7, #16]
 80066b6:	685a      	ldr	r2, [r3, #4]
 80066b8:	4b20      	ldr	r3, [pc, #128]	; (800673c <vPortFree+0xa8>)
 80066ba:	681b      	ldr	r3, [r3, #0]
 80066bc:	4013      	ands	r3, r2
 80066be:	2b00      	cmp	r3, #0
 80066c0:	d109      	bne.n	80066d6 <vPortFree+0x42>
 80066c2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80066c6:	f383 8811 	msr	BASEPRI, r3
 80066ca:	f3bf 8f6f 	isb	sy
 80066ce:	f3bf 8f4f 	dsb	sy
 80066d2:	60fb      	str	r3, [r7, #12]
 80066d4:	e7fe      	b.n	80066d4 <vPortFree+0x40>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 80066d6:	693b      	ldr	r3, [r7, #16]
 80066d8:	681b      	ldr	r3, [r3, #0]
 80066da:	2b00      	cmp	r3, #0
 80066dc:	d009      	beq.n	80066f2 <vPortFree+0x5e>
 80066de:	f04f 0350 	mov.w	r3, #80	; 0x50
 80066e2:	f383 8811 	msr	BASEPRI, r3
 80066e6:	f3bf 8f6f 	isb	sy
 80066ea:	f3bf 8f4f 	dsb	sy
 80066ee:	60bb      	str	r3, [r7, #8]
 80066f0:	e7fe      	b.n	80066f0 <vPortFree+0x5c>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 80066f2:	693b      	ldr	r3, [r7, #16]
 80066f4:	685a      	ldr	r2, [r3, #4]
 80066f6:	4b11      	ldr	r3, [pc, #68]	; (800673c <vPortFree+0xa8>)
 80066f8:	681b      	ldr	r3, [r3, #0]
 80066fa:	4013      	ands	r3, r2
 80066fc:	2b00      	cmp	r3, #0
 80066fe:	d019      	beq.n	8006734 <vPortFree+0xa0>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8006700:	693b      	ldr	r3, [r7, #16]
 8006702:	681b      	ldr	r3, [r3, #0]
 8006704:	2b00      	cmp	r3, #0
 8006706:	d115      	bne.n	8006734 <vPortFree+0xa0>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8006708:	693b      	ldr	r3, [r7, #16]
 800670a:	685a      	ldr	r2, [r3, #4]
 800670c:	4b0b      	ldr	r3, [pc, #44]	; (800673c <vPortFree+0xa8>)
 800670e:	681b      	ldr	r3, [r3, #0]
 8006710:	43db      	mvns	r3, r3
 8006712:	401a      	ands	r2, r3
 8006714:	693b      	ldr	r3, [r7, #16]
 8006716:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8006718:	f7fe fed8 	bl	80054cc <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800671c:	693b      	ldr	r3, [r7, #16]
 800671e:	685a      	ldr	r2, [r3, #4]
 8006720:	4b07      	ldr	r3, [pc, #28]	; (8006740 <vPortFree+0xac>)
 8006722:	681b      	ldr	r3, [r3, #0]
 8006724:	4413      	add	r3, r2
 8006726:	4a06      	ldr	r2, [pc, #24]	; (8006740 <vPortFree+0xac>)
 8006728:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800672a:	6938      	ldr	r0, [r7, #16]
 800672c:	f000 f86c 	bl	8006808 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 8006730:	f7fe feda 	bl	80054e8 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8006734:	bf00      	nop
 8006736:	3718      	adds	r7, #24
 8006738:	46bd      	mov	sp, r7
 800673a:	bd80      	pop	{r7, pc}
 800673c:	2400855c 	.word	0x2400855c
 8006740:	24008554 	.word	0x24008554

08006744 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8006744:	b480      	push	{r7}
 8006746:	b085      	sub	sp, #20
 8006748:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800674a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800674e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8006750:	4b27      	ldr	r3, [pc, #156]	; (80067f0 <prvHeapInit+0xac>)
 8006752:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8006754:	68fb      	ldr	r3, [r7, #12]
 8006756:	f003 0307 	and.w	r3, r3, #7
 800675a:	2b00      	cmp	r3, #0
 800675c:	d00c      	beq.n	8006778 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800675e:	68fb      	ldr	r3, [r7, #12]
 8006760:	3307      	adds	r3, #7
 8006762:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8006764:	68fb      	ldr	r3, [r7, #12]
 8006766:	f023 0307 	bic.w	r3, r3, #7
 800676a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800676c:	68ba      	ldr	r2, [r7, #8]
 800676e:	68fb      	ldr	r3, [r7, #12]
 8006770:	1ad3      	subs	r3, r2, r3
 8006772:	4a1f      	ldr	r2, [pc, #124]	; (80067f0 <prvHeapInit+0xac>)
 8006774:	4413      	add	r3, r2
 8006776:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8006778:	68fb      	ldr	r3, [r7, #12]
 800677a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800677c:	4a1d      	ldr	r2, [pc, #116]	; (80067f4 <prvHeapInit+0xb0>)
 800677e:	687b      	ldr	r3, [r7, #4]
 8006780:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8006782:	4b1c      	ldr	r3, [pc, #112]	; (80067f4 <prvHeapInit+0xb0>)
 8006784:	2200      	movs	r2, #0
 8006786:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8006788:	687b      	ldr	r3, [r7, #4]
 800678a:	68ba      	ldr	r2, [r7, #8]
 800678c:	4413      	add	r3, r2
 800678e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8006790:	2208      	movs	r2, #8
 8006792:	68fb      	ldr	r3, [r7, #12]
 8006794:	1a9b      	subs	r3, r3, r2
 8006796:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8006798:	68fb      	ldr	r3, [r7, #12]
 800679a:	f023 0307 	bic.w	r3, r3, #7
 800679e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 80067a0:	68fb      	ldr	r3, [r7, #12]
 80067a2:	4a15      	ldr	r2, [pc, #84]	; (80067f8 <prvHeapInit+0xb4>)
 80067a4:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 80067a6:	4b14      	ldr	r3, [pc, #80]	; (80067f8 <prvHeapInit+0xb4>)
 80067a8:	681b      	ldr	r3, [r3, #0]
 80067aa:	2200      	movs	r2, #0
 80067ac:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 80067ae:	4b12      	ldr	r3, [pc, #72]	; (80067f8 <prvHeapInit+0xb4>)
 80067b0:	681b      	ldr	r3, [r3, #0]
 80067b2:	2200      	movs	r2, #0
 80067b4:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 80067b6:	687b      	ldr	r3, [r7, #4]
 80067b8:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 80067ba:	683b      	ldr	r3, [r7, #0]
 80067bc:	68fa      	ldr	r2, [r7, #12]
 80067be:	1ad2      	subs	r2, r2, r3
 80067c0:	683b      	ldr	r3, [r7, #0]
 80067c2:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 80067c4:	4b0c      	ldr	r3, [pc, #48]	; (80067f8 <prvHeapInit+0xb4>)
 80067c6:	681a      	ldr	r2, [r3, #0]
 80067c8:	683b      	ldr	r3, [r7, #0]
 80067ca:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80067cc:	683b      	ldr	r3, [r7, #0]
 80067ce:	685b      	ldr	r3, [r3, #4]
 80067d0:	4a0a      	ldr	r2, [pc, #40]	; (80067fc <prvHeapInit+0xb8>)
 80067d2:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80067d4:	683b      	ldr	r3, [r7, #0]
 80067d6:	685b      	ldr	r3, [r3, #4]
 80067d8:	4a09      	ldr	r2, [pc, #36]	; (8006800 <prvHeapInit+0xbc>)
 80067da:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 80067dc:	4b09      	ldr	r3, [pc, #36]	; (8006804 <prvHeapInit+0xc0>)
 80067de:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 80067e2:	601a      	str	r2, [r3, #0]
}
 80067e4:	bf00      	nop
 80067e6:	3714      	adds	r7, #20
 80067e8:	46bd      	mov	sp, r7
 80067ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067ee:	4770      	bx	lr
 80067f0:	24000548 	.word	0x24000548
 80067f4:	24008548 	.word	0x24008548
 80067f8:	24008550 	.word	0x24008550
 80067fc:	24008558 	.word	0x24008558
 8006800:	24008554 	.word	0x24008554
 8006804:	2400855c 	.word	0x2400855c

08006808 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8006808:	b480      	push	{r7}
 800680a:	b085      	sub	sp, #20
 800680c:	af00      	add	r7, sp, #0
 800680e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8006810:	4b28      	ldr	r3, [pc, #160]	; (80068b4 <prvInsertBlockIntoFreeList+0xac>)
 8006812:	60fb      	str	r3, [r7, #12]
 8006814:	e002      	b.n	800681c <prvInsertBlockIntoFreeList+0x14>
 8006816:	68fb      	ldr	r3, [r7, #12]
 8006818:	681b      	ldr	r3, [r3, #0]
 800681a:	60fb      	str	r3, [r7, #12]
 800681c:	68fb      	ldr	r3, [r7, #12]
 800681e:	681b      	ldr	r3, [r3, #0]
 8006820:	687a      	ldr	r2, [r7, #4]
 8006822:	429a      	cmp	r2, r3
 8006824:	d8f7      	bhi.n	8006816 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8006826:	68fb      	ldr	r3, [r7, #12]
 8006828:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800682a:	68fb      	ldr	r3, [r7, #12]
 800682c:	685b      	ldr	r3, [r3, #4]
 800682e:	68ba      	ldr	r2, [r7, #8]
 8006830:	4413      	add	r3, r2
 8006832:	687a      	ldr	r2, [r7, #4]
 8006834:	429a      	cmp	r2, r3
 8006836:	d108      	bne.n	800684a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8006838:	68fb      	ldr	r3, [r7, #12]
 800683a:	685a      	ldr	r2, [r3, #4]
 800683c:	687b      	ldr	r3, [r7, #4]
 800683e:	685b      	ldr	r3, [r3, #4]
 8006840:	441a      	add	r2, r3
 8006842:	68fb      	ldr	r3, [r7, #12]
 8006844:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8006846:	68fb      	ldr	r3, [r7, #12]
 8006848:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800684a:	687b      	ldr	r3, [r7, #4]
 800684c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800684e:	687b      	ldr	r3, [r7, #4]
 8006850:	685b      	ldr	r3, [r3, #4]
 8006852:	68ba      	ldr	r2, [r7, #8]
 8006854:	441a      	add	r2, r3
 8006856:	68fb      	ldr	r3, [r7, #12]
 8006858:	681b      	ldr	r3, [r3, #0]
 800685a:	429a      	cmp	r2, r3
 800685c:	d118      	bne.n	8006890 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800685e:	68fb      	ldr	r3, [r7, #12]
 8006860:	681a      	ldr	r2, [r3, #0]
 8006862:	4b15      	ldr	r3, [pc, #84]	; (80068b8 <prvInsertBlockIntoFreeList+0xb0>)
 8006864:	681b      	ldr	r3, [r3, #0]
 8006866:	429a      	cmp	r2, r3
 8006868:	d00d      	beq.n	8006886 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800686a:	687b      	ldr	r3, [r7, #4]
 800686c:	685a      	ldr	r2, [r3, #4]
 800686e:	68fb      	ldr	r3, [r7, #12]
 8006870:	681b      	ldr	r3, [r3, #0]
 8006872:	685b      	ldr	r3, [r3, #4]
 8006874:	441a      	add	r2, r3
 8006876:	687b      	ldr	r3, [r7, #4]
 8006878:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800687a:	68fb      	ldr	r3, [r7, #12]
 800687c:	681b      	ldr	r3, [r3, #0]
 800687e:	681a      	ldr	r2, [r3, #0]
 8006880:	687b      	ldr	r3, [r7, #4]
 8006882:	601a      	str	r2, [r3, #0]
 8006884:	e008      	b.n	8006898 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8006886:	4b0c      	ldr	r3, [pc, #48]	; (80068b8 <prvInsertBlockIntoFreeList+0xb0>)
 8006888:	681a      	ldr	r2, [r3, #0]
 800688a:	687b      	ldr	r3, [r7, #4]
 800688c:	601a      	str	r2, [r3, #0]
 800688e:	e003      	b.n	8006898 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8006890:	68fb      	ldr	r3, [r7, #12]
 8006892:	681a      	ldr	r2, [r3, #0]
 8006894:	687b      	ldr	r3, [r7, #4]
 8006896:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8006898:	68fa      	ldr	r2, [r7, #12]
 800689a:	687b      	ldr	r3, [r7, #4]
 800689c:	429a      	cmp	r2, r3
 800689e:	d002      	beq.n	80068a6 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 80068a0:	68fb      	ldr	r3, [r7, #12]
 80068a2:	687a      	ldr	r2, [r7, #4]
 80068a4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80068a6:	bf00      	nop
 80068a8:	3714      	adds	r7, #20
 80068aa:	46bd      	mov	sp, r7
 80068ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068b0:	4770      	bx	lr
 80068b2:	bf00      	nop
 80068b4:	24008548 	.word	0x24008548
 80068b8:	24008550 	.word	0x24008550

080068bc <netconn_apimsg>:
 * @param apimsg a struct containing the function to call and its parameters
 * @return ERR_OK if the function was called, another err_t if not
 */
static err_t
netconn_apimsg(tcpip_callback_fn fn, struct api_msg *apimsg)
{
 80068bc:	b580      	push	{r7, lr}
 80068be:	b084      	sub	sp, #16
 80068c0:	af00      	add	r7, sp, #0
 80068c2:	6078      	str	r0, [r7, #4]
 80068c4:	6039      	str	r1, [r7, #0]

#if LWIP_NETCONN_SEM_PER_THREAD
  apimsg->op_completed_sem = LWIP_NETCONN_THREAD_SEM_GET();
#endif /* LWIP_NETCONN_SEM_PER_THREAD */

  err = tcpip_send_msg_wait_sem(fn, apimsg, LWIP_API_MSG_SEM(apimsg));
 80068c6:	683b      	ldr	r3, [r7, #0]
 80068c8:	681b      	ldr	r3, [r3, #0]
 80068ca:	330c      	adds	r3, #12
 80068cc:	461a      	mov	r2, r3
 80068ce:	6839      	ldr	r1, [r7, #0]
 80068d0:	6878      	ldr	r0, [r7, #4]
 80068d2:	f002 fb61 	bl	8008f98 <tcpip_send_msg_wait_sem>
 80068d6:	4603      	mov	r3, r0
 80068d8:	73fb      	strb	r3, [r7, #15]
  if (err == ERR_OK) {
 80068da:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80068de:	2b00      	cmp	r3, #0
 80068e0:	d103      	bne.n	80068ea <netconn_apimsg+0x2e>
    return apimsg->err;
 80068e2:	683b      	ldr	r3, [r7, #0]
 80068e4:	f993 3004 	ldrsb.w	r3, [r3, #4]
 80068e8:	e001      	b.n	80068ee <netconn_apimsg+0x32>
  }
  return err;
 80068ea:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80068ee:	4618      	mov	r0, r3
 80068f0:	3710      	adds	r7, #16
 80068f2:	46bd      	mov	sp, r7
 80068f4:	bd80      	pop	{r7, pc}
	...

080068f8 <netconn_new_with_proto_and_callback>:
 * @return a newly allocated struct netconn or
 *         NULL on memory error
 */
struct netconn*
netconn_new_with_proto_and_callback(enum netconn_type t, u8_t proto, netconn_callback callback)
{
 80068f8:	b580      	push	{r7, lr}
 80068fa:	b08a      	sub	sp, #40	; 0x28
 80068fc:	af00      	add	r7, sp, #0
 80068fe:	4603      	mov	r3, r0
 8006900:	603a      	str	r2, [r7, #0]
 8006902:	71fb      	strb	r3, [r7, #7]
 8006904:	460b      	mov	r3, r1
 8006906:	71bb      	strb	r3, [r7, #6]
  struct netconn *conn;
  API_MSG_VAR_DECLARE(msg);
  API_MSG_VAR_ALLOC_RETURN_NULL(msg);

  conn = netconn_alloc(t, callback);
 8006908:	79fb      	ldrb	r3, [r7, #7]
 800690a:	6839      	ldr	r1, [r7, #0]
 800690c:	4618      	mov	r0, r3
 800690e:	f000 fd09 	bl	8007324 <netconn_alloc>
 8006912:	6278      	str	r0, [r7, #36]	; 0x24
  if (conn != NULL) {
 8006914:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006916:	2b00      	cmp	r3, #0
 8006918:	d054      	beq.n	80069c4 <netconn_new_with_proto_and_callback+0xcc>
    err_t err;

    API_MSG_VAR_REF(msg).msg.n.proto = proto;
 800691a:	79bb      	ldrb	r3, [r7, #6]
 800691c:	753b      	strb	r3, [r7, #20]
    API_MSG_VAR_REF(msg).conn = conn;
 800691e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006920:	60fb      	str	r3, [r7, #12]
    err = netconn_apimsg(lwip_netconn_do_newconn, &API_MSG_VAR_REF(msg));
 8006922:	f107 030c 	add.w	r3, r7, #12
 8006926:	4619      	mov	r1, r3
 8006928:	4829      	ldr	r0, [pc, #164]	; (80069d0 <netconn_new_with_proto_and_callback+0xd8>)
 800692a:	f7ff ffc7 	bl	80068bc <netconn_apimsg>
 800692e:	4603      	mov	r3, r0
 8006930:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    if (err != ERR_OK) {
 8006934:	f997 3023 	ldrsb.w	r3, [r7, #35]	; 0x23
 8006938:	2b00      	cmp	r3, #0
 800693a:	d043      	beq.n	80069c4 <netconn_new_with_proto_and_callback+0xcc>
      LWIP_ASSERT("freeing conn without freeing pcb", conn->pcb.tcp == NULL);
 800693c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800693e:	685b      	ldr	r3, [r3, #4]
 8006940:	2b00      	cmp	r3, #0
 8006942:	d005      	beq.n	8006950 <netconn_new_with_proto_and_callback+0x58>
 8006944:	4b23      	ldr	r3, [pc, #140]	; (80069d4 <netconn_new_with_proto_and_callback+0xdc>)
 8006946:	2289      	movs	r2, #137	; 0x89
 8006948:	4923      	ldr	r1, [pc, #140]	; (80069d8 <netconn_new_with_proto_and_callback+0xe0>)
 800694a:	4824      	ldr	r0, [pc, #144]	; (80069dc <netconn_new_with_proto_and_callback+0xe4>)
 800694c:	f00f f942 	bl	8015bd4 <printf_>
      LWIP_ASSERT("conn has no recvmbox", sys_mbox_valid(&conn->recvmbox));
 8006950:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006952:	3310      	adds	r3, #16
 8006954:	4618      	mov	r0, r3
 8006956:	f00c fa8f 	bl	8012e78 <sys_mbox_valid>
 800695a:	4603      	mov	r3, r0
 800695c:	2b00      	cmp	r3, #0
 800695e:	d105      	bne.n	800696c <netconn_new_with_proto_and_callback+0x74>
 8006960:	4b1c      	ldr	r3, [pc, #112]	; (80069d4 <netconn_new_with_proto_and_callback+0xdc>)
 8006962:	228a      	movs	r2, #138	; 0x8a
 8006964:	491e      	ldr	r1, [pc, #120]	; (80069e0 <netconn_new_with_proto_and_callback+0xe8>)
 8006966:	481d      	ldr	r0, [pc, #116]	; (80069dc <netconn_new_with_proto_and_callback+0xe4>)
 8006968:	f00f f934 	bl	8015bd4 <printf_>
#if LWIP_TCP
      LWIP_ASSERT("conn->acceptmbox shouldn't exist", !sys_mbox_valid(&conn->acceptmbox));
 800696c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800696e:	3314      	adds	r3, #20
 8006970:	4618      	mov	r0, r3
 8006972:	f00c fa81 	bl	8012e78 <sys_mbox_valid>
 8006976:	4603      	mov	r3, r0
 8006978:	2b00      	cmp	r3, #0
 800697a:	d005      	beq.n	8006988 <netconn_new_with_proto_and_callback+0x90>
 800697c:	4b15      	ldr	r3, [pc, #84]	; (80069d4 <netconn_new_with_proto_and_callback+0xdc>)
 800697e:	228c      	movs	r2, #140	; 0x8c
 8006980:	4918      	ldr	r1, [pc, #96]	; (80069e4 <netconn_new_with_proto_and_callback+0xec>)
 8006982:	4816      	ldr	r0, [pc, #88]	; (80069dc <netconn_new_with_proto_and_callback+0xe4>)
 8006984:	f00f f926 	bl	8015bd4 <printf_>
#endif /* LWIP_TCP */
#if !LWIP_NETCONN_SEM_PER_THREAD
      LWIP_ASSERT("conn has no op_completed", sys_sem_valid(&conn->op_completed));
 8006988:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800698a:	330c      	adds	r3, #12
 800698c:	4618      	mov	r0, r3
 800698e:	f00c fb02 	bl	8012f96 <sys_sem_valid>
 8006992:	4603      	mov	r3, r0
 8006994:	2b00      	cmp	r3, #0
 8006996:	d105      	bne.n	80069a4 <netconn_new_with_proto_and_callback+0xac>
 8006998:	4b0e      	ldr	r3, [pc, #56]	; (80069d4 <netconn_new_with_proto_and_callback+0xdc>)
 800699a:	228f      	movs	r2, #143	; 0x8f
 800699c:	4912      	ldr	r1, [pc, #72]	; (80069e8 <netconn_new_with_proto_and_callback+0xf0>)
 800699e:	480f      	ldr	r0, [pc, #60]	; (80069dc <netconn_new_with_proto_and_callback+0xe4>)
 80069a0:	f00f f918 	bl	8015bd4 <printf_>
      sys_sem_free(&conn->op_completed);
 80069a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80069a6:	330c      	adds	r3, #12
 80069a8:	4618      	mov	r0, r3
 80069aa:	f00c fae7 	bl	8012f7c <sys_sem_free>
#endif /* !LWIP_NETCONN_SEM_PER_THREAD */
      sys_mbox_free(&conn->recvmbox);
 80069ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80069b0:	3310      	adds	r3, #16
 80069b2:	4618      	mov	r0, r3
 80069b4:	f00c f9c4 	bl	8012d40 <sys_mbox_free>
      memp_free(MEMP_NETCONN, conn);
 80069b8:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80069ba:	2007      	movs	r0, #7
 80069bc:	f002 ffce 	bl	800995c <memp_free>
      API_MSG_VAR_FREE(msg);
      return NULL;
 80069c0:	2300      	movs	r3, #0
 80069c2:	e000      	b.n	80069c6 <netconn_new_with_proto_and_callback+0xce>
    }
  }
  API_MSG_VAR_FREE(msg);
  return conn;
 80069c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80069c6:	4618      	mov	r0, r3
 80069c8:	3728      	adds	r7, #40	; 0x28
 80069ca:	46bd      	mov	sp, r7
 80069cc:	bd80      	pop	{r7, pc}
 80069ce:	bf00      	nop
 80069d0:	080072cd 	.word	0x080072cd
 80069d4:	080195c0 	.word	0x080195c0
 80069d8:	080195f4 	.word	0x080195f4
 80069dc:	08019618 	.word	0x08019618
 80069e0:	08019640 	.word	0x08019640
 80069e4:	08019658 	.word	0x08019658
 80069e8:	0801967c 	.word	0x0801967c

080069ec <netconn_delete>:
 * @param conn the netconn to delete
 * @return ERR_OK if the connection was deleted
 */
err_t
netconn_delete(struct netconn *conn)
{
 80069ec:	b580      	push	{r7, lr}
 80069ee:	b088      	sub	sp, #32
 80069f0:	af00      	add	r7, sp, #0
 80069f2:	6078      	str	r0, [r7, #4]
  err_t err;
  API_MSG_VAR_DECLARE(msg);

  /* No ASSERT here because possible to get a (conn == NULL) if we got an accept error */
  if (conn == NULL) {
 80069f4:	687b      	ldr	r3, [r7, #4]
 80069f6:	2b00      	cmp	r3, #0
 80069f8:	d101      	bne.n	80069fe <netconn_delete+0x12>
    return ERR_OK;
 80069fa:	2300      	movs	r3, #0
 80069fc:	e016      	b.n	8006a2c <netconn_delete+0x40>
  }

  API_MSG_VAR_ALLOC(msg);
  API_MSG_VAR_REF(msg).conn = conn;
 80069fe:	687b      	ldr	r3, [r7, #4]
 8006a00:	60bb      	str	r3, [r7, #8]
  /* get the time we started, which is later compared to
     sys_now() + conn->send_timeout */
  API_MSG_VAR_REF(msg).msg.sd.time_started = sys_now();
#else /* LWIP_SO_SNDTIMEO || LWIP_SO_LINGER */
#if LWIP_TCP
  API_MSG_VAR_REF(msg).msg.sd.polls_left =
 8006a02:	2329      	movs	r3, #41	; 0x29
 8006a04:	747b      	strb	r3, [r7, #17]
    ((LWIP_TCP_CLOSE_TIMEOUT_MS_DEFAULT + TCP_SLOW_INTERVAL - 1) / TCP_SLOW_INTERVAL) + 1;
#endif /* LWIP_TCP */
#endif /* LWIP_SO_SNDTIMEO || LWIP_SO_LINGER */
  err = netconn_apimsg(lwip_netconn_do_delconn, &API_MSG_VAR_REF(msg));
 8006a06:	f107 0308 	add.w	r3, r7, #8
 8006a0a:	4619      	mov	r1, r3
 8006a0c:	4809      	ldr	r0, [pc, #36]	; (8006a34 <netconn_delete+0x48>)
 8006a0e:	f7ff ff55 	bl	80068bc <netconn_apimsg>
 8006a12:	4603      	mov	r3, r0
 8006a14:	77fb      	strb	r3, [r7, #31]
  API_MSG_VAR_FREE(msg);

  if (err != ERR_OK) {
 8006a16:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8006a1a:	2b00      	cmp	r3, #0
 8006a1c:	d002      	beq.n	8006a24 <netconn_delete+0x38>
    return err;
 8006a1e:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8006a22:	e003      	b.n	8006a2c <netconn_delete+0x40>
  }

  netconn_free(conn);
 8006a24:	6878      	ldr	r0, [r7, #4]
 8006a26:	f000 fced 	bl	8007404 <netconn_free>

  return ERR_OK;
 8006a2a:	2300      	movs	r3, #0
}
 8006a2c:	4618      	mov	r0, r3
 8006a2e:	3720      	adds	r7, #32
 8006a30:	46bd      	mov	sp, r7
 8006a32:	bd80      	pop	{r7, pc}
 8006a34:	08007889 	.word	0x08007889

08006a38 <netconn_connect>:
 * @param port the remote port to connect to (no used for RAW)
 * @return ERR_OK if connected, return value of tcp_/udp_/raw_connect otherwise
 */
err_t
netconn_connect(struct netconn *conn, const ip_addr_t *addr, u16_t port)
{
 8006a38:	b580      	push	{r7, lr}
 8006a3a:	b08a      	sub	sp, #40	; 0x28
 8006a3c:	af00      	add	r7, sp, #0
 8006a3e:	60f8      	str	r0, [r7, #12]
 8006a40:	60b9      	str	r1, [r7, #8]
 8006a42:	4613      	mov	r3, r2
 8006a44:	80fb      	strh	r3, [r7, #6]
  API_MSG_VAR_DECLARE(msg);
  err_t err;

  LWIP_ERROR("netconn_connect: invalid conn", (conn != NULL), return ERR_ARG;);
 8006a46:	68fb      	ldr	r3, [r7, #12]
 8006a48:	2b00      	cmp	r3, #0
 8006a4a:	d109      	bne.n	8006a60 <netconn_connect+0x28>
 8006a4c:	4b11      	ldr	r3, [pc, #68]	; (8006a94 <netconn_connect+0x5c>)
 8006a4e:	f240 122b 	movw	r2, #299	; 0x12b
 8006a52:	4911      	ldr	r1, [pc, #68]	; (8006a98 <netconn_connect+0x60>)
 8006a54:	4811      	ldr	r0, [pc, #68]	; (8006a9c <netconn_connect+0x64>)
 8006a56:	f00f f8bd 	bl	8015bd4 <printf_>
 8006a5a:	f06f 030f 	mvn.w	r3, #15
 8006a5e:	e015      	b.n	8006a8c <netconn_connect+0x54>

#if LWIP_IPV4
  /* Don't propagate NULL pointer (IP_ADDR_ANY alias) to subsequent functions */
  if (addr == NULL) {
 8006a60:	68bb      	ldr	r3, [r7, #8]
 8006a62:	2b00      	cmp	r3, #0
 8006a64:	d101      	bne.n	8006a6a <netconn_connect+0x32>
    addr = IP4_ADDR_ANY;
 8006a66:	4b0e      	ldr	r3, [pc, #56]	; (8006aa0 <netconn_connect+0x68>)
 8006a68:	60bb      	str	r3, [r7, #8]
  }
#endif /* LWIP_IPV4 */

  API_MSG_VAR_ALLOC(msg);
  API_MSG_VAR_REF(msg).conn = conn;
 8006a6a:	68fb      	ldr	r3, [r7, #12]
 8006a6c:	613b      	str	r3, [r7, #16]
  API_MSG_VAR_REF(msg).msg.bc.ipaddr = API_MSG_VAR_REF(addr);
 8006a6e:	68bb      	ldr	r3, [r7, #8]
 8006a70:	61bb      	str	r3, [r7, #24]
  API_MSG_VAR_REF(msg).msg.bc.port = port;
 8006a72:	88fb      	ldrh	r3, [r7, #6]
 8006a74:	83bb      	strh	r3, [r7, #28]
  err = netconn_apimsg(lwip_netconn_do_connect, &API_MSG_VAR_REF(msg));
 8006a76:	f107 0310 	add.w	r3, r7, #16
 8006a7a:	4619      	mov	r1, r3
 8006a7c:	4809      	ldr	r0, [pc, #36]	; (8006aa4 <netconn_connect+0x6c>)
 8006a7e:	f7ff ff1d 	bl	80068bc <netconn_apimsg>
 8006a82:	4603      	mov	r3, r0
 8006a84:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  API_MSG_VAR_FREE(msg);

  return err;
 8006a88:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 8006a8c:	4618      	mov	r0, r3
 8006a8e:	3728      	adds	r7, #40	; 0x28
 8006a90:	46bd      	mov	sp, r7
 8006a92:	bd80      	pop	{r7, pc}
 8006a94:	080195c0 	.word	0x080195c0
 8006a98:	08019714 	.word	0x08019714
 8006a9c:	08019618 	.word	0x08019618
 8006aa0:	0801c160 	.word	0x0801c160
 8006aa4:	08007bd1 	.word	0x08007bd1

08006aa8 <netconn_disconnect>:
 * @param conn the netconn to disconnect
 * @return See @ref err_t
 */
err_t
netconn_disconnect(struct netconn *conn)
{
 8006aa8:	b580      	push	{r7, lr}
 8006aaa:	b088      	sub	sp, #32
 8006aac:	af00      	add	r7, sp, #0
 8006aae:	6078      	str	r0, [r7, #4]
  API_MSG_VAR_DECLARE(msg);
  err_t err;

  LWIP_ERROR("netconn_disconnect: invalid conn", (conn != NULL), return ERR_ARG;);
 8006ab0:	687b      	ldr	r3, [r7, #4]
 8006ab2:	2b00      	cmp	r3, #0
 8006ab4:	d109      	bne.n	8006aca <netconn_disconnect+0x22>
 8006ab6:	4b0d      	ldr	r3, [pc, #52]	; (8006aec <netconn_disconnect+0x44>)
 8006ab8:	f240 124b 	movw	r2, #331	; 0x14b
 8006abc:	490c      	ldr	r1, [pc, #48]	; (8006af0 <netconn_disconnect+0x48>)
 8006abe:	480d      	ldr	r0, [pc, #52]	; (8006af4 <netconn_disconnect+0x4c>)
 8006ac0:	f00f f888 	bl	8015bd4 <printf_>
 8006ac4:	f06f 030f 	mvn.w	r3, #15
 8006ac8:	e00b      	b.n	8006ae2 <netconn_disconnect+0x3a>

  API_MSG_VAR_ALLOC(msg);
  API_MSG_VAR_REF(msg).conn = conn;
 8006aca:	687b      	ldr	r3, [r7, #4]
 8006acc:	60bb      	str	r3, [r7, #8]
  err = netconn_apimsg(lwip_netconn_do_disconnect, &API_MSG_VAR_REF(msg));
 8006ace:	f107 0308 	add.w	r3, r7, #8
 8006ad2:	4619      	mov	r1, r3
 8006ad4:	4808      	ldr	r0, [pc, #32]	; (8006af8 <netconn_disconnect+0x50>)
 8006ad6:	f7ff fef1 	bl	80068bc <netconn_apimsg>
 8006ada:	4603      	mov	r3, r0
 8006adc:	77fb      	strb	r3, [r7, #31]
  API_MSG_VAR_FREE(msg);

  return err;
 8006ade:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 8006ae2:	4618      	mov	r0, r3
 8006ae4:	3720      	adds	r7, #32
 8006ae6:	46bd      	mov	sp, r7
 8006ae8:	bd80      	pop	{r7, pc}
 8006aea:	bf00      	nop
 8006aec:	080195c0 	.word	0x080195c0
 8006af0:	08019734 	.word	0x08019734
 8006af4:	08019618 	.word	0x08019618
 8006af8:	08007d89 	.word	0x08007d89

08006afc <netconn_send>:
 * @param buf a netbuf containing the data to send
 * @return ERR_OK if data was sent, any other err_t on error
 */
err_t
netconn_send(struct netconn *conn, struct netbuf *buf)
{
 8006afc:	b580      	push	{r7, lr}
 8006afe:	b088      	sub	sp, #32
 8006b00:	af00      	add	r7, sp, #0
 8006b02:	6078      	str	r0, [r7, #4]
 8006b04:	6039      	str	r1, [r7, #0]
  API_MSG_VAR_DECLARE(msg);
  err_t err;

  LWIP_ERROR("netconn_send: invalid conn",  (conn != NULL), return ERR_ARG;);
 8006b06:	687b      	ldr	r3, [r7, #4]
 8006b08:	2b00      	cmp	r3, #0
 8006b0a:	d109      	bne.n	8006b20 <netconn_send+0x24>
 8006b0c:	4b0d      	ldr	r3, [pc, #52]	; (8006b44 <netconn_send+0x48>)
 8006b0e:	f240 22c3 	movw	r2, #707	; 0x2c3
 8006b12:	490d      	ldr	r1, [pc, #52]	; (8006b48 <netconn_send+0x4c>)
 8006b14:	480d      	ldr	r0, [pc, #52]	; (8006b4c <netconn_send+0x50>)
 8006b16:	f00f f85d 	bl	8015bd4 <printf_>
 8006b1a:	f06f 030f 	mvn.w	r3, #15
 8006b1e:	e00d      	b.n	8006b3c <netconn_send+0x40>

  LWIP_DEBUGF(API_LIB_DEBUG, ("netconn_send: sending %"U16_F" bytes\n", buf->p->tot_len));

  API_MSG_VAR_ALLOC(msg);
  API_MSG_VAR_REF(msg).conn = conn;
 8006b20:	687b      	ldr	r3, [r7, #4]
 8006b22:	60bb      	str	r3, [r7, #8]
  API_MSG_VAR_REF(msg).msg.b = buf;
 8006b24:	683b      	ldr	r3, [r7, #0]
 8006b26:	613b      	str	r3, [r7, #16]
  err = netconn_apimsg(lwip_netconn_do_send, &API_MSG_VAR_REF(msg));
 8006b28:	f107 0308 	add.w	r3, r7, #8
 8006b2c:	4619      	mov	r1, r3
 8006b2e:	4808      	ldr	r0, [pc, #32]	; (8006b50 <netconn_send+0x54>)
 8006b30:	f7ff fec4 	bl	80068bc <netconn_apimsg>
 8006b34:	4603      	mov	r3, r0
 8006b36:	77fb      	strb	r3, [r7, #31]
  API_MSG_VAR_FREE(msg);

  return err;
 8006b38:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 8006b3c:	4618      	mov	r0, r3
 8006b3e:	3720      	adds	r7, #32
 8006b40:	46bd      	mov	sp, r7
 8006b42:	bd80      	pop	{r7, pc}
 8006b44:	080195c0 	.word	0x080195c0
 8006b48:	0801982c 	.word	0x0801982c
 8006b4c:	08019618 	.word	0x08019618
 8006b50:	08007df3 	.word	0x08007df3

08006b54 <netconn_write_partly>:
 * @return ERR_OK if data was sent, any other err_t on error
 */
err_t
netconn_write_partly(struct netconn *conn, const void *dataptr, size_t size,
                     u8_t apiflags, size_t *bytes_written)
{
 8006b54:	b580      	push	{r7, lr}
 8006b56:	b08a      	sub	sp, #40	; 0x28
 8006b58:	af00      	add	r7, sp, #0
 8006b5a:	60f8      	str	r0, [r7, #12]
 8006b5c:	60b9      	str	r1, [r7, #8]
 8006b5e:	607a      	str	r2, [r7, #4]
 8006b60:	70fb      	strb	r3, [r7, #3]
  API_MSG_VAR_DECLARE(msg);
  err_t err;
  u8_t dontblock;

  LWIP_ERROR("netconn_write: invalid conn",  (conn != NULL), return ERR_ARG;);
 8006b62:	68fb      	ldr	r3, [r7, #12]
 8006b64:	2b00      	cmp	r3, #0
 8006b66:	d109      	bne.n	8006b7c <netconn_write_partly+0x28>
 8006b68:	4b31      	ldr	r3, [pc, #196]	; (8006c30 <netconn_write_partly+0xdc>)
 8006b6a:	f240 22e6 	movw	r2, #742	; 0x2e6
 8006b6e:	4931      	ldr	r1, [pc, #196]	; (8006c34 <netconn_write_partly+0xe0>)
 8006b70:	4831      	ldr	r0, [pc, #196]	; (8006c38 <netconn_write_partly+0xe4>)
 8006b72:	f00f f82f 	bl	8015bd4 <printf_>
 8006b76:	f06f 030f 	mvn.w	r3, #15
 8006b7a:	e054      	b.n	8006c26 <netconn_write_partly+0xd2>
  LWIP_ERROR("netconn_write: invalid conn->type",  (NETCONNTYPE_GROUP(conn->type)== NETCONN_TCP), return ERR_VAL;);
 8006b7c:	68fb      	ldr	r3, [r7, #12]
 8006b7e:	781b      	ldrb	r3, [r3, #0]
 8006b80:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8006b84:	2b10      	cmp	r3, #16
 8006b86:	d009      	beq.n	8006b9c <netconn_write_partly+0x48>
 8006b88:	4b29      	ldr	r3, [pc, #164]	; (8006c30 <netconn_write_partly+0xdc>)
 8006b8a:	f240 22e7 	movw	r2, #743	; 0x2e7
 8006b8e:	492b      	ldr	r1, [pc, #172]	; (8006c3c <netconn_write_partly+0xe8>)
 8006b90:	4829      	ldr	r0, [pc, #164]	; (8006c38 <netconn_write_partly+0xe4>)
 8006b92:	f00f f81f 	bl	8015bd4 <printf_>
 8006b96:	f06f 0305 	mvn.w	r3, #5
 8006b9a:	e044      	b.n	8006c26 <netconn_write_partly+0xd2>
  if (size == 0) {
 8006b9c:	687b      	ldr	r3, [r7, #4]
 8006b9e:	2b00      	cmp	r3, #0
 8006ba0:	d101      	bne.n	8006ba6 <netconn_write_partly+0x52>
    return ERR_OK;
 8006ba2:	2300      	movs	r3, #0
 8006ba4:	e03f      	b.n	8006c26 <netconn_write_partly+0xd2>
  }
  dontblock = netconn_is_nonblocking(conn) || (apiflags & NETCONN_DONTBLOCK);
 8006ba6:	68fb      	ldr	r3, [r7, #12]
 8006ba8:	7f1b      	ldrb	r3, [r3, #28]
 8006baa:	f003 0302 	and.w	r3, r3, #2
 8006bae:	2b00      	cmp	r3, #0
 8006bb0:	d104      	bne.n	8006bbc <netconn_write_partly+0x68>
 8006bb2:	78fb      	ldrb	r3, [r7, #3]
 8006bb4:	f003 0304 	and.w	r3, r3, #4
 8006bb8:	2b00      	cmp	r3, #0
 8006bba:	d001      	beq.n	8006bc0 <netconn_write_partly+0x6c>
 8006bbc:	2301      	movs	r3, #1
 8006bbe:	e000      	b.n	8006bc2 <netconn_write_partly+0x6e>
 8006bc0:	2300      	movs	r3, #0
 8006bc2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
#if LWIP_SO_SNDTIMEO
  if (conn->send_timeout != 0) {
    dontblock = 1;
  }
#endif /* LWIP_SO_SNDTIMEO */
  if (dontblock && !bytes_written) {
 8006bc6:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8006bca:	2b00      	cmp	r3, #0
 8006bcc:	d005      	beq.n	8006bda <netconn_write_partly+0x86>
 8006bce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006bd0:	2b00      	cmp	r3, #0
 8006bd2:	d102      	bne.n	8006bda <netconn_write_partly+0x86>
    /* This implies netconn_write() cannot be used for non-blocking send, since
       it has no way to return the number of bytes written. */
    return ERR_VAL;
 8006bd4:	f06f 0305 	mvn.w	r3, #5
 8006bd8:	e025      	b.n	8006c26 <netconn_write_partly+0xd2>
  }

  API_MSG_VAR_ALLOC(msg);
  /* non-blocking write sends as much  */
  API_MSG_VAR_REF(msg).conn = conn;
 8006bda:	68fb      	ldr	r3, [r7, #12]
 8006bdc:	613b      	str	r3, [r7, #16]
  API_MSG_VAR_REF(msg).msg.w.dataptr = dataptr;
 8006bde:	68bb      	ldr	r3, [r7, #8]
 8006be0:	61bb      	str	r3, [r7, #24]
  API_MSG_VAR_REF(msg).msg.w.apiflags = apiflags;
 8006be2:	78fb      	ldrb	r3, [r7, #3]
 8006be4:	f887 3020 	strb.w	r3, [r7, #32]
  API_MSG_VAR_REF(msg).msg.w.len = size;
 8006be8:	687b      	ldr	r3, [r7, #4]
 8006bea:	61fb      	str	r3, [r7, #28]
#endif /* LWIP_SO_SNDTIMEO */

  /* For locking the core: this _can_ be delayed on low memory/low send buffer,
     but if it is, this is done inside api_msg.c:do_write(), so we can use the
     non-blocking version here. */
  err = netconn_apimsg(lwip_netconn_do_write, &API_MSG_VAR_REF(msg));
 8006bec:	f107 0310 	add.w	r3, r7, #16
 8006bf0:	4619      	mov	r1, r3
 8006bf2:	4813      	ldr	r0, [pc, #76]	; (8006c40 <netconn_write_partly+0xec>)
 8006bf4:	f7ff fe62 	bl	80068bc <netconn_apimsg>
 8006bf8:	4603      	mov	r3, r0
 8006bfa:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
  if ((err == ERR_OK) && (bytes_written != NULL)) {
 8006bfe:	f997 3026 	ldrsb.w	r3, [r7, #38]	; 0x26
 8006c02:	2b00      	cmp	r3, #0
 8006c04:	d10d      	bne.n	8006c22 <netconn_write_partly+0xce>
 8006c06:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006c08:	2b00      	cmp	r3, #0
 8006c0a:	d00a      	beq.n	8006c22 <netconn_write_partly+0xce>
    if (dontblock) {
 8006c0c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8006c10:	2b00      	cmp	r3, #0
 8006c12:	d003      	beq.n	8006c1c <netconn_write_partly+0xc8>
      /* nonblocking write: maybe the data has been sent partly */
      *bytes_written = API_MSG_VAR_REF(msg).msg.w.len;
 8006c14:	69fa      	ldr	r2, [r7, #28]
 8006c16:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006c18:	601a      	str	r2, [r3, #0]
 8006c1a:	e002      	b.n	8006c22 <netconn_write_partly+0xce>
    } else {
      /* blocking call succeeded: all data has been sent if it */
      *bytes_written = size;
 8006c1c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006c1e:	687a      	ldr	r2, [r7, #4]
 8006c20:	601a      	str	r2, [r3, #0]
    }
  }
  API_MSG_VAR_FREE(msg);

  return err;
 8006c22:	f997 3026 	ldrsb.w	r3, [r7, #38]	; 0x26
}
 8006c26:	4618      	mov	r0, r3
 8006c28:	3728      	adds	r7, #40	; 0x28
 8006c2a:	46bd      	mov	sp, r7
 8006c2c:	bd80      	pop	{r7, pc}
 8006c2e:	bf00      	nop
 8006c30:	080195c0 	.word	0x080195c0
 8006c34:	08019848 	.word	0x08019848
 8006c38:	08019618 	.word	0x08019618
 8006c3c:	08019864 	.word	0x08019864
 8006c40:	0800820d 	.word	0x0800820d

08006c44 <recv_udp>:
 * @see udp.h (struct udp_pcb.recv) for parameters
 */
static void
recv_udp(void *arg, struct udp_pcb *pcb, struct pbuf *p,
   const ip_addr_t *addr, u16_t port)
{
 8006c44:	b580      	push	{r7, lr}
 8006c46:	b088      	sub	sp, #32
 8006c48:	af00      	add	r7, sp, #0
 8006c4a:	60f8      	str	r0, [r7, #12]
 8006c4c:	60b9      	str	r1, [r7, #8]
 8006c4e:	607a      	str	r2, [r7, #4]
 8006c50:	603b      	str	r3, [r7, #0]
#if LWIP_SO_RCVBUF
  int recv_avail;
#endif /* LWIP_SO_RCVBUF */

  LWIP_UNUSED_ARG(pcb); /* only used for asserts... */
  LWIP_ASSERT("recv_udp must have a pcb argument", pcb != NULL);
 8006c52:	68bb      	ldr	r3, [r7, #8]
 8006c54:	2b00      	cmp	r3, #0
 8006c56:	d105      	bne.n	8006c64 <recv_udp+0x20>
 8006c58:	4b34      	ldr	r3, [pc, #208]	; (8006d2c <recv_udp+0xe8>)
 8006c5a:	22b1      	movs	r2, #177	; 0xb1
 8006c5c:	4934      	ldr	r1, [pc, #208]	; (8006d30 <recv_udp+0xec>)
 8006c5e:	4835      	ldr	r0, [pc, #212]	; (8006d34 <recv_udp+0xf0>)
 8006c60:	f00e ffb8 	bl	8015bd4 <printf_>
  LWIP_ASSERT("recv_udp must have an argument", arg != NULL);
 8006c64:	68fb      	ldr	r3, [r7, #12]
 8006c66:	2b00      	cmp	r3, #0
 8006c68:	d105      	bne.n	8006c76 <recv_udp+0x32>
 8006c6a:	4b30      	ldr	r3, [pc, #192]	; (8006d2c <recv_udp+0xe8>)
 8006c6c:	22b2      	movs	r2, #178	; 0xb2
 8006c6e:	4932      	ldr	r1, [pc, #200]	; (8006d38 <recv_udp+0xf4>)
 8006c70:	4830      	ldr	r0, [pc, #192]	; (8006d34 <recv_udp+0xf0>)
 8006c72:	f00e ffaf 	bl	8015bd4 <printf_>
  conn = (struct netconn *)arg;
 8006c76:	68fb      	ldr	r3, [r7, #12]
 8006c78:	61fb      	str	r3, [r7, #28]

  if (conn == NULL) {
 8006c7a:	69fb      	ldr	r3, [r7, #28]
 8006c7c:	2b00      	cmp	r3, #0
 8006c7e:	d103      	bne.n	8006c88 <recv_udp+0x44>
    pbuf_free(p);
 8006c80:	6878      	ldr	r0, [r7, #4]
 8006c82:	f003 fc15 	bl	800a4b0 <pbuf_free>
    return;
 8006c86:	e04d      	b.n	8006d24 <recv_udp+0xe0>
  }

  LWIP_ASSERT("recv_udp: recv for wrong pcb!", conn->pcb.udp == pcb);
 8006c88:	69fb      	ldr	r3, [r7, #28]
 8006c8a:	685b      	ldr	r3, [r3, #4]
 8006c8c:	68ba      	ldr	r2, [r7, #8]
 8006c8e:	429a      	cmp	r2, r3
 8006c90:	d005      	beq.n	8006c9e <recv_udp+0x5a>
 8006c92:	4b26      	ldr	r3, [pc, #152]	; (8006d2c <recv_udp+0xe8>)
 8006c94:	22ba      	movs	r2, #186	; 0xba
 8006c96:	4929      	ldr	r1, [pc, #164]	; (8006d3c <recv_udp+0xf8>)
 8006c98:	4826      	ldr	r0, [pc, #152]	; (8006d34 <recv_udp+0xf0>)
 8006c9a:	f00e ff9b 	bl	8015bd4 <printf_>
#if LWIP_SO_RCVBUF
  SYS_ARCH_GET(conn->recv_avail, recv_avail);
  if (!sys_mbox_valid(&conn->recvmbox) ||
      ((recv_avail + (int)(p->tot_len)) > conn->recv_bufsize)) {
#else  /* LWIP_SO_RCVBUF */
  if (!sys_mbox_valid(&conn->recvmbox)) {
 8006c9e:	69fb      	ldr	r3, [r7, #28]
 8006ca0:	3310      	adds	r3, #16
 8006ca2:	4618      	mov	r0, r3
 8006ca4:	f00c f8e8 	bl	8012e78 <sys_mbox_valid>
 8006ca8:	4603      	mov	r3, r0
 8006caa:	2b00      	cmp	r3, #0
 8006cac:	d103      	bne.n	8006cb6 <recv_udp+0x72>
#endif /* LWIP_SO_RCVBUF */
    pbuf_free(p);
 8006cae:	6878      	ldr	r0, [r7, #4]
 8006cb0:	f003 fbfe 	bl	800a4b0 <pbuf_free>
    return;
 8006cb4:	e036      	b.n	8006d24 <recv_udp+0xe0>
  }

  buf = (struct netbuf *)memp_malloc(MEMP_NETBUF);
 8006cb6:	2006      	movs	r0, #6
 8006cb8:	f002 fdda 	bl	8009870 <memp_malloc>
 8006cbc:	61b8      	str	r0, [r7, #24]
  if (buf == NULL) {
 8006cbe:	69bb      	ldr	r3, [r7, #24]
 8006cc0:	2b00      	cmp	r3, #0
 8006cc2:	d103      	bne.n	8006ccc <recv_udp+0x88>
    pbuf_free(p);
 8006cc4:	6878      	ldr	r0, [r7, #4]
 8006cc6:	f003 fbf3 	bl	800a4b0 <pbuf_free>
    return;
 8006cca:	e02b      	b.n	8006d24 <recv_udp+0xe0>
  } else {
    buf->p = p;
 8006ccc:	69bb      	ldr	r3, [r7, #24]
 8006cce:	687a      	ldr	r2, [r7, #4]
 8006cd0:	601a      	str	r2, [r3, #0]
    buf->ptr = p;
 8006cd2:	69bb      	ldr	r3, [r7, #24]
 8006cd4:	687a      	ldr	r2, [r7, #4]
 8006cd6:	605a      	str	r2, [r3, #4]
    ip_addr_set(&buf->addr, addr);
 8006cd8:	683b      	ldr	r3, [r7, #0]
 8006cda:	2b00      	cmp	r3, #0
 8006cdc:	d002      	beq.n	8006ce4 <recv_udp+0xa0>
 8006cde:	683b      	ldr	r3, [r7, #0]
 8006ce0:	681b      	ldr	r3, [r3, #0]
 8006ce2:	e000      	b.n	8006ce6 <recv_udp+0xa2>
 8006ce4:	2300      	movs	r3, #0
 8006ce6:	69ba      	ldr	r2, [r7, #24]
 8006ce8:	6093      	str	r3, [r2, #8]
    buf->port = port;
 8006cea:	69bb      	ldr	r3, [r7, #24]
 8006cec:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 8006cee:	819a      	strh	r2, [r3, #12]
      buf->toport_chksum = udphdr->dest;
    }
#endif /* LWIP_NETBUF_RECVINFO */
  }

  len = p->tot_len;
 8006cf0:	687b      	ldr	r3, [r7, #4]
 8006cf2:	891b      	ldrh	r3, [r3, #8]
 8006cf4:	82fb      	strh	r3, [r7, #22]
  if (sys_mbox_trypost(&conn->recvmbox, buf) != ERR_OK) {
 8006cf6:	69fb      	ldr	r3, [r7, #28]
 8006cf8:	3310      	adds	r3, #16
 8006cfa:	69b9      	ldr	r1, [r7, #24]
 8006cfc:	4618      	mov	r0, r3
 8006cfe:	f00c f846 	bl	8012d8e <sys_mbox_trypost>
 8006d02:	4603      	mov	r3, r0
 8006d04:	2b00      	cmp	r3, #0
 8006d06:	d003      	beq.n	8006d10 <recv_udp+0xcc>
    netbuf_delete(buf);
 8006d08:	69b8      	ldr	r0, [r7, #24]
 8006d0a:	f001 fb4d 	bl	80083a8 <netbuf_delete>
    return;
 8006d0e:	e009      	b.n	8006d24 <recv_udp+0xe0>
  } else {
#if LWIP_SO_RCVBUF
    SYS_ARCH_INC(conn->recv_avail, len);
#endif /* LWIP_SO_RCVBUF */
    /* Register event with callback */
    API_EVENT(conn, NETCONN_EVT_RCVPLUS, len);
 8006d10:	69fb      	ldr	r3, [r7, #28]
 8006d12:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006d14:	2b00      	cmp	r3, #0
 8006d16:	d005      	beq.n	8006d24 <recv_udp+0xe0>
 8006d18:	69fb      	ldr	r3, [r7, #28]
 8006d1a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006d1c:	8afa      	ldrh	r2, [r7, #22]
 8006d1e:	2100      	movs	r1, #0
 8006d20:	69f8      	ldr	r0, [r7, #28]
 8006d22:	4798      	blx	r3
  }
}
 8006d24:	3720      	adds	r7, #32
 8006d26:	46bd      	mov	sp, r7
 8006d28:	bd80      	pop	{r7, pc}
 8006d2a:	bf00      	nop
 8006d2c:	080198a4 	.word	0x080198a4
 8006d30:	080198d8 	.word	0x080198d8
 8006d34:	080198fc 	.word	0x080198fc
 8006d38:	08019924 	.word	0x08019924
 8006d3c:	08019944 	.word	0x08019944

08006d40 <recv_tcp>:
 *
 * @see tcp.h (struct tcp_pcb.recv) for parameters and return value
 */
static err_t
recv_tcp(void *arg, struct tcp_pcb *pcb, struct pbuf *p, err_t err)
{
 8006d40:	b580      	push	{r7, lr}
 8006d42:	b088      	sub	sp, #32
 8006d44:	af00      	add	r7, sp, #0
 8006d46:	60f8      	str	r0, [r7, #12]
 8006d48:	60b9      	str	r1, [r7, #8]
 8006d4a:	607a      	str	r2, [r7, #4]
 8006d4c:	70fb      	strb	r3, [r7, #3]
  struct netconn *conn;
  u16_t len;

  LWIP_UNUSED_ARG(pcb);
  LWIP_ASSERT("recv_tcp must have a pcb argument", pcb != NULL);
 8006d4e:	68bb      	ldr	r3, [r7, #8]
 8006d50:	2b00      	cmp	r3, #0
 8006d52:	d105      	bne.n	8006d60 <recv_tcp+0x20>
 8006d54:	4b39      	ldr	r3, [pc, #228]	; (8006e3c <recv_tcp+0xfc>)
 8006d56:	22f9      	movs	r2, #249	; 0xf9
 8006d58:	4939      	ldr	r1, [pc, #228]	; (8006e40 <recv_tcp+0x100>)
 8006d5a:	483a      	ldr	r0, [pc, #232]	; (8006e44 <recv_tcp+0x104>)
 8006d5c:	f00e ff3a 	bl	8015bd4 <printf_>
  LWIP_ASSERT("recv_tcp must have an argument", arg != NULL);
 8006d60:	68fb      	ldr	r3, [r7, #12]
 8006d62:	2b00      	cmp	r3, #0
 8006d64:	d105      	bne.n	8006d72 <recv_tcp+0x32>
 8006d66:	4b35      	ldr	r3, [pc, #212]	; (8006e3c <recv_tcp+0xfc>)
 8006d68:	22fa      	movs	r2, #250	; 0xfa
 8006d6a:	4937      	ldr	r1, [pc, #220]	; (8006e48 <recv_tcp+0x108>)
 8006d6c:	4835      	ldr	r0, [pc, #212]	; (8006e44 <recv_tcp+0x104>)
 8006d6e:	f00e ff31 	bl	8015bd4 <printf_>
  conn = (struct netconn *)arg;
 8006d72:	68fb      	ldr	r3, [r7, #12]
 8006d74:	61bb      	str	r3, [r7, #24]

  if (conn == NULL) {
 8006d76:	69bb      	ldr	r3, [r7, #24]
 8006d78:	2b00      	cmp	r3, #0
 8006d7a:	d102      	bne.n	8006d82 <recv_tcp+0x42>
    return ERR_VAL;
 8006d7c:	f06f 0305 	mvn.w	r3, #5
 8006d80:	e057      	b.n	8006e32 <recv_tcp+0xf2>
  }
  LWIP_ASSERT("recv_tcp: recv for wrong pcb!", conn->pcb.tcp == pcb);
 8006d82:	69bb      	ldr	r3, [r7, #24]
 8006d84:	685b      	ldr	r3, [r3, #4]
 8006d86:	68ba      	ldr	r2, [r7, #8]
 8006d88:	429a      	cmp	r2, r3
 8006d8a:	d006      	beq.n	8006d9a <recv_tcp+0x5a>
 8006d8c:	4b2b      	ldr	r3, [pc, #172]	; (8006e3c <recv_tcp+0xfc>)
 8006d8e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8006d92:	492e      	ldr	r1, [pc, #184]	; (8006e4c <recv_tcp+0x10c>)
 8006d94:	482b      	ldr	r0, [pc, #172]	; (8006e44 <recv_tcp+0x104>)
 8006d96:	f00e ff1d 	bl	8015bd4 <printf_>

  if (!sys_mbox_valid(&conn->recvmbox)) {
 8006d9a:	69bb      	ldr	r3, [r7, #24]
 8006d9c:	3310      	adds	r3, #16
 8006d9e:	4618      	mov	r0, r3
 8006da0:	f00c f86a 	bl	8012e78 <sys_mbox_valid>
 8006da4:	4603      	mov	r3, r0
 8006da6:	2b00      	cmp	r3, #0
 8006da8:	d10d      	bne.n	8006dc6 <recv_tcp+0x86>
    /* recvmbox already deleted */
    if (p != NULL) {
 8006daa:	687b      	ldr	r3, [r7, #4]
 8006dac:	2b00      	cmp	r3, #0
 8006dae:	d008      	beq.n	8006dc2 <recv_tcp+0x82>
      tcp_recved(pcb, p->tot_len);
 8006db0:	687b      	ldr	r3, [r7, #4]
 8006db2:	891b      	ldrh	r3, [r3, #8]
 8006db4:	4619      	mov	r1, r3
 8006db6:	68b8      	ldr	r0, [r7, #8]
 8006db8:	f004 f92c 	bl	800b014 <tcp_recved>
      pbuf_free(p);
 8006dbc:	6878      	ldr	r0, [r7, #4]
 8006dbe:	f003 fb77 	bl	800a4b0 <pbuf_free>
    }
    return ERR_OK;
 8006dc2:	2300      	movs	r3, #0
 8006dc4:	e035      	b.n	8006e32 <recv_tcp+0xf2>
  /* Unlike for UDP or RAW pcbs, don't check for available space
     using recv_avail since that could break the connection
     (data is already ACKed) */

  /* don't overwrite fatal errors! */
  if (err != ERR_OK) {
 8006dc6:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8006dca:	2b00      	cmp	r3, #0
 8006dcc:	d011      	beq.n	8006df2 <recv_tcp+0xb2>
    NETCONN_SET_SAFE_ERR(conn, err);
 8006dce:	69bb      	ldr	r3, [r7, #24]
 8006dd0:	2b00      	cmp	r3, #0
 8006dd2:	d00e      	beq.n	8006df2 <recv_tcp+0xb2>
 8006dd4:	f00c f960 	bl	8013098 <sys_arch_protect>
 8006dd8:	6178      	str	r0, [r7, #20]
 8006dda:	69bb      	ldr	r3, [r7, #24]
 8006ddc:	f993 3008 	ldrsb.w	r3, [r3, #8]
 8006de0:	f113 0f0c 	cmn.w	r3, #12
 8006de4:	db02      	blt.n	8006dec <recv_tcp+0xac>
 8006de6:	69bb      	ldr	r3, [r7, #24]
 8006de8:	78fa      	ldrb	r2, [r7, #3]
 8006dea:	721a      	strb	r2, [r3, #8]
 8006dec:	6978      	ldr	r0, [r7, #20]
 8006dee:	f00c f961 	bl	80130b4 <sys_arch_unprotect>
  }

  if (p != NULL) {
 8006df2:	687b      	ldr	r3, [r7, #4]
 8006df4:	2b00      	cmp	r3, #0
 8006df6:	d003      	beq.n	8006e00 <recv_tcp+0xc0>
    len = p->tot_len;
 8006df8:	687b      	ldr	r3, [r7, #4]
 8006dfa:	891b      	ldrh	r3, [r3, #8]
 8006dfc:	83fb      	strh	r3, [r7, #30]
 8006dfe:	e001      	b.n	8006e04 <recv_tcp+0xc4>
  } else {
    len = 0;
 8006e00:	2300      	movs	r3, #0
 8006e02:	83fb      	strh	r3, [r7, #30]
  }

  if (sys_mbox_trypost(&conn->recvmbox, p) != ERR_OK) {
 8006e04:	69bb      	ldr	r3, [r7, #24]
 8006e06:	3310      	adds	r3, #16
 8006e08:	6879      	ldr	r1, [r7, #4]
 8006e0a:	4618      	mov	r0, r3
 8006e0c:	f00b ffbf 	bl	8012d8e <sys_mbox_trypost>
 8006e10:	4603      	mov	r3, r0
 8006e12:	2b00      	cmp	r3, #0
 8006e14:	d002      	beq.n	8006e1c <recv_tcp+0xdc>
    /* don't deallocate p: it is presented to us later again from tcp_fasttmr! */
    return ERR_MEM;
 8006e16:	f04f 33ff 	mov.w	r3, #4294967295
 8006e1a:	e00a      	b.n	8006e32 <recv_tcp+0xf2>
  } else {
#if LWIP_SO_RCVBUF
    SYS_ARCH_INC(conn->recv_avail, len);
#endif /* LWIP_SO_RCVBUF */
    /* Register event with callback */
    API_EVENT(conn, NETCONN_EVT_RCVPLUS, len);
 8006e1c:	69bb      	ldr	r3, [r7, #24]
 8006e1e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006e20:	2b00      	cmp	r3, #0
 8006e22:	d005      	beq.n	8006e30 <recv_tcp+0xf0>
 8006e24:	69bb      	ldr	r3, [r7, #24]
 8006e26:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006e28:	8bfa      	ldrh	r2, [r7, #30]
 8006e2a:	2100      	movs	r1, #0
 8006e2c:	69b8      	ldr	r0, [r7, #24]
 8006e2e:	4798      	blx	r3
  }

  return ERR_OK;
 8006e30:	2300      	movs	r3, #0
}
 8006e32:	4618      	mov	r0, r3
 8006e34:	3720      	adds	r7, #32
 8006e36:	46bd      	mov	sp, r7
 8006e38:	bd80      	pop	{r7, pc}
 8006e3a:	bf00      	nop
 8006e3c:	080198a4 	.word	0x080198a4
 8006e40:	08019964 	.word	0x08019964
 8006e44:	080198fc 	.word	0x080198fc
 8006e48:	08019988 	.word	0x08019988
 8006e4c:	080199a8 	.word	0x080199a8

08006e50 <poll_tcp>:
 *
 * @see tcp.h (struct tcp_pcb.poll) for parameters and return value
 */
static err_t
poll_tcp(void *arg, struct tcp_pcb *pcb)
{
 8006e50:	b580      	push	{r7, lr}
 8006e52:	b084      	sub	sp, #16
 8006e54:	af00      	add	r7, sp, #0
 8006e56:	6078      	str	r0, [r7, #4]
 8006e58:	6039      	str	r1, [r7, #0]
  struct netconn *conn = (struct netconn *)arg;
 8006e5a:	687b      	ldr	r3, [r7, #4]
 8006e5c:	60fb      	str	r3, [r7, #12]

  LWIP_UNUSED_ARG(pcb);
  LWIP_ASSERT("conn != NULL", (conn != NULL));
 8006e5e:	68fb      	ldr	r3, [r7, #12]
 8006e60:	2b00      	cmp	r3, #0
 8006e62:	d106      	bne.n	8006e72 <poll_tcp+0x22>
 8006e64:	4b2a      	ldr	r3, [pc, #168]	; (8006f10 <poll_tcp+0xc0>)
 8006e66:	f44f 729c 	mov.w	r2, #312	; 0x138
 8006e6a:	492a      	ldr	r1, [pc, #168]	; (8006f14 <poll_tcp+0xc4>)
 8006e6c:	482a      	ldr	r0, [pc, #168]	; (8006f18 <poll_tcp+0xc8>)
 8006e6e:	f00e feb1 	bl	8015bd4 <printf_>

  if (conn->state == NETCONN_WRITE) {
 8006e72:	68fb      	ldr	r3, [r7, #12]
 8006e74:	785b      	ldrb	r3, [r3, #1]
 8006e76:	2b01      	cmp	r3, #1
 8006e78:	d104      	bne.n	8006e84 <poll_tcp+0x34>
    lwip_netconn_do_writemore(conn  WRITE_DELAYED);
 8006e7a:	2101      	movs	r1, #1
 8006e7c:	68f8      	ldr	r0, [r7, #12]
 8006e7e:	f001 f821 	bl	8007ec4 <lwip_netconn_do_writemore>
 8006e82:	e016      	b.n	8006eb2 <poll_tcp+0x62>
  } else if (conn->state == NETCONN_CLOSE) {
 8006e84:	68fb      	ldr	r3, [r7, #12]
 8006e86:	785b      	ldrb	r3, [r3, #1]
 8006e88:	2b04      	cmp	r3, #4
 8006e8a:	d112      	bne.n	8006eb2 <poll_tcp+0x62>
#if !LWIP_SO_SNDTIMEO && !LWIP_SO_LINGER
    if (conn->current_msg && conn->current_msg->msg.sd.polls_left) {
 8006e8c:	68fb      	ldr	r3, [r7, #12]
 8006e8e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006e90:	2b00      	cmp	r3, #0
 8006e92:	d00a      	beq.n	8006eaa <poll_tcp+0x5a>
 8006e94:	68fb      	ldr	r3, [r7, #12]
 8006e96:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006e98:	7a5b      	ldrb	r3, [r3, #9]
 8006e9a:	2b00      	cmp	r3, #0
 8006e9c:	d005      	beq.n	8006eaa <poll_tcp+0x5a>
      conn->current_msg->msg.sd.polls_left--;
 8006e9e:	68fb      	ldr	r3, [r7, #12]
 8006ea0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006ea2:	7a5a      	ldrb	r2, [r3, #9]
 8006ea4:	3a01      	subs	r2, #1
 8006ea6:	b2d2      	uxtb	r2, r2
 8006ea8:	725a      	strb	r2, [r3, #9]
    }
#endif /* !LWIP_SO_SNDTIMEO && !LWIP_SO_LINGER */
    lwip_netconn_do_close_internal(conn  WRITE_DELAYED);
 8006eaa:	2101      	movs	r1, #1
 8006eac:	68f8      	ldr	r0, [r7, #12]
 8006eae:	f000 fb73 	bl	8007598 <lwip_netconn_do_close_internal>
  }
  /* @todo: implement connect timeout here? */

  /* Did a nonblocking write fail before? Then check available write-space. */
  if (conn->flags & NETCONN_FLAG_CHECK_WRITESPACE) {
 8006eb2:	68fb      	ldr	r3, [r7, #12]
 8006eb4:	7f1b      	ldrb	r3, [r3, #28]
 8006eb6:	f003 0310 	and.w	r3, r3, #16
 8006eba:	2b00      	cmp	r3, #0
 8006ebc:	d022      	beq.n	8006f04 <poll_tcp+0xb4>
    /* If the queued byte- or pbuf-count drops below the configured low-water limit,
       let select mark this pcb as writable again. */
    if ((conn->pcb.tcp != NULL) && (tcp_sndbuf(conn->pcb.tcp) > TCP_SNDLOWAT) &&
 8006ebe:	68fb      	ldr	r3, [r7, #12]
 8006ec0:	685b      	ldr	r3, [r3, #4]
 8006ec2:	2b00      	cmp	r3, #0
 8006ec4:	d01e      	beq.n	8006f04 <poll_tcp+0xb4>
 8006ec6:	68fb      	ldr	r3, [r7, #12]
 8006ec8:	685b      	ldr	r3, [r3, #4]
 8006eca:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8006ece:	f640 3267 	movw	r2, #2919	; 0xb67
 8006ed2:	4293      	cmp	r3, r2
 8006ed4:	d916      	bls.n	8006f04 <poll_tcp+0xb4>
      (tcp_sndqueuelen(conn->pcb.tcp) < TCP_SNDQUEUELOWAT)) {
 8006ed6:	68fb      	ldr	r3, [r7, #12]
 8006ed8:	685b      	ldr	r3, [r3, #4]
 8006eda:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
    if ((conn->pcb.tcp != NULL) && (tcp_sndbuf(conn->pcb.tcp) > TCP_SNDLOWAT) &&
 8006ede:	2b04      	cmp	r3, #4
 8006ee0:	d810      	bhi.n	8006f04 <poll_tcp+0xb4>
      conn->flags &= ~NETCONN_FLAG_CHECK_WRITESPACE;
 8006ee2:	68fb      	ldr	r3, [r7, #12]
 8006ee4:	7f1b      	ldrb	r3, [r3, #28]
 8006ee6:	f023 0310 	bic.w	r3, r3, #16
 8006eea:	b2da      	uxtb	r2, r3
 8006eec:	68fb      	ldr	r3, [r7, #12]
 8006eee:	771a      	strb	r2, [r3, #28]
      API_EVENT(conn, NETCONN_EVT_SENDPLUS, 0);
 8006ef0:	68fb      	ldr	r3, [r7, #12]
 8006ef2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006ef4:	2b00      	cmp	r3, #0
 8006ef6:	d005      	beq.n	8006f04 <poll_tcp+0xb4>
 8006ef8:	68fb      	ldr	r3, [r7, #12]
 8006efa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006efc:	2200      	movs	r2, #0
 8006efe:	2102      	movs	r1, #2
 8006f00:	68f8      	ldr	r0, [r7, #12]
 8006f02:	4798      	blx	r3
    }
  }

  return ERR_OK;
 8006f04:	2300      	movs	r3, #0
}
 8006f06:	4618      	mov	r0, r3
 8006f08:	3710      	adds	r7, #16
 8006f0a:	46bd      	mov	sp, r7
 8006f0c:	bd80      	pop	{r7, pc}
 8006f0e:	bf00      	nop
 8006f10:	080198a4 	.word	0x080198a4
 8006f14:	080199c8 	.word	0x080199c8
 8006f18:	080198fc 	.word	0x080198fc

08006f1c <sent_tcp>:
 *
 * @see tcp.h (struct tcp_pcb.sent) for parameters and return value
 */
static err_t
sent_tcp(void *arg, struct tcp_pcb *pcb, u16_t len)
{
 8006f1c:	b580      	push	{r7, lr}
 8006f1e:	b086      	sub	sp, #24
 8006f20:	af00      	add	r7, sp, #0
 8006f22:	60f8      	str	r0, [r7, #12]
 8006f24:	60b9      	str	r1, [r7, #8]
 8006f26:	4613      	mov	r3, r2
 8006f28:	80fb      	strh	r3, [r7, #6]
  struct netconn *conn = (struct netconn *)arg;
 8006f2a:	68fb      	ldr	r3, [r7, #12]
 8006f2c:	617b      	str	r3, [r7, #20]

  LWIP_UNUSED_ARG(pcb);
  LWIP_ASSERT("conn != NULL", (conn != NULL));
 8006f2e:	697b      	ldr	r3, [r7, #20]
 8006f30:	2b00      	cmp	r3, #0
 8006f32:	d106      	bne.n	8006f42 <sent_tcp+0x26>
 8006f34:	4b21      	ldr	r3, [pc, #132]	; (8006fbc <sent_tcp+0xa0>)
 8006f36:	f240 1261 	movw	r2, #353	; 0x161
 8006f3a:	4921      	ldr	r1, [pc, #132]	; (8006fc0 <sent_tcp+0xa4>)
 8006f3c:	4821      	ldr	r0, [pc, #132]	; (8006fc4 <sent_tcp+0xa8>)
 8006f3e:	f00e fe49 	bl	8015bd4 <printf_>

  if (conn) {
 8006f42:	697b      	ldr	r3, [r7, #20]
 8006f44:	2b00      	cmp	r3, #0
 8006f46:	d033      	beq.n	8006fb0 <sent_tcp+0x94>
    if (conn->state == NETCONN_WRITE) {
 8006f48:	697b      	ldr	r3, [r7, #20]
 8006f4a:	785b      	ldrb	r3, [r3, #1]
 8006f4c:	2b01      	cmp	r3, #1
 8006f4e:	d104      	bne.n	8006f5a <sent_tcp+0x3e>
      lwip_netconn_do_writemore(conn  WRITE_DELAYED);
 8006f50:	2101      	movs	r1, #1
 8006f52:	6978      	ldr	r0, [r7, #20]
 8006f54:	f000 ffb6 	bl	8007ec4 <lwip_netconn_do_writemore>
 8006f58:	e007      	b.n	8006f6a <sent_tcp+0x4e>
    } else if (conn->state == NETCONN_CLOSE) {
 8006f5a:	697b      	ldr	r3, [r7, #20]
 8006f5c:	785b      	ldrb	r3, [r3, #1]
 8006f5e:	2b04      	cmp	r3, #4
 8006f60:	d103      	bne.n	8006f6a <sent_tcp+0x4e>
      lwip_netconn_do_close_internal(conn  WRITE_DELAYED);
 8006f62:	2101      	movs	r1, #1
 8006f64:	6978      	ldr	r0, [r7, #20]
 8006f66:	f000 fb17 	bl	8007598 <lwip_netconn_do_close_internal>
    }

    /* If the queued byte- or pbuf-count drops below the configured low-water limit,
       let select mark this pcb as writable again. */
    if ((conn->pcb.tcp != NULL) && (tcp_sndbuf(conn->pcb.tcp) > TCP_SNDLOWAT) &&
 8006f6a:	697b      	ldr	r3, [r7, #20]
 8006f6c:	685b      	ldr	r3, [r3, #4]
 8006f6e:	2b00      	cmp	r3, #0
 8006f70:	d01e      	beq.n	8006fb0 <sent_tcp+0x94>
 8006f72:	697b      	ldr	r3, [r7, #20]
 8006f74:	685b      	ldr	r3, [r3, #4]
 8006f76:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8006f7a:	f640 3267 	movw	r2, #2919	; 0xb67
 8006f7e:	4293      	cmp	r3, r2
 8006f80:	d916      	bls.n	8006fb0 <sent_tcp+0x94>
      (tcp_sndqueuelen(conn->pcb.tcp) < TCP_SNDQUEUELOWAT)) {
 8006f82:	697b      	ldr	r3, [r7, #20]
 8006f84:	685b      	ldr	r3, [r3, #4]
 8006f86:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
    if ((conn->pcb.tcp != NULL) && (tcp_sndbuf(conn->pcb.tcp) > TCP_SNDLOWAT) &&
 8006f8a:	2b04      	cmp	r3, #4
 8006f8c:	d810      	bhi.n	8006fb0 <sent_tcp+0x94>
      conn->flags &= ~NETCONN_FLAG_CHECK_WRITESPACE;
 8006f8e:	697b      	ldr	r3, [r7, #20]
 8006f90:	7f1b      	ldrb	r3, [r3, #28]
 8006f92:	f023 0310 	bic.w	r3, r3, #16
 8006f96:	b2da      	uxtb	r2, r3
 8006f98:	697b      	ldr	r3, [r7, #20]
 8006f9a:	771a      	strb	r2, [r3, #28]
      API_EVENT(conn, NETCONN_EVT_SENDPLUS, len);
 8006f9c:	697b      	ldr	r3, [r7, #20]
 8006f9e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006fa0:	2b00      	cmp	r3, #0
 8006fa2:	d005      	beq.n	8006fb0 <sent_tcp+0x94>
 8006fa4:	697b      	ldr	r3, [r7, #20]
 8006fa6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006fa8:	88fa      	ldrh	r2, [r7, #6]
 8006faa:	2102      	movs	r1, #2
 8006fac:	6978      	ldr	r0, [r7, #20]
 8006fae:	4798      	blx	r3
    }
  }

  return ERR_OK;
 8006fb0:	2300      	movs	r3, #0
}
 8006fb2:	4618      	mov	r0, r3
 8006fb4:	3718      	adds	r7, #24
 8006fb6:	46bd      	mov	sp, r7
 8006fb8:	bd80      	pop	{r7, pc}
 8006fba:	bf00      	nop
 8006fbc:	080198a4 	.word	0x080198a4
 8006fc0:	080199c8 	.word	0x080199c8
 8006fc4:	080198fc 	.word	0x080198fc

08006fc8 <err_tcp>:
 *
 * @see tcp.h (struct tcp_pcb.err) for parameters
 */
static void
err_tcp(void *arg, err_t err)
{
 8006fc8:	b580      	push	{r7, lr}
 8006fca:	b08a      	sub	sp, #40	; 0x28
 8006fcc:	af00      	add	r7, sp, #0
 8006fce:	6078      	str	r0, [r7, #4]
 8006fd0:	460b      	mov	r3, r1
 8006fd2:	70fb      	strb	r3, [r7, #3]
  struct netconn *conn;
  enum netconn_state old_state;

  conn = (struct netconn *)arg;
 8006fd4:	687b      	ldr	r3, [r7, #4]
 8006fd6:	627b      	str	r3, [r7, #36]	; 0x24
  LWIP_ASSERT("conn != NULL", (conn != NULL));
 8006fd8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006fda:	2b00      	cmp	r3, #0
 8006fdc:	d106      	bne.n	8006fec <err_tcp+0x24>
 8006fde:	4b6c      	ldr	r3, [pc, #432]	; (8007190 <err_tcp+0x1c8>)
 8006fe0:	f44f 72c2 	mov.w	r2, #388	; 0x184
 8006fe4:	496b      	ldr	r1, [pc, #428]	; (8007194 <err_tcp+0x1cc>)
 8006fe6:	486c      	ldr	r0, [pc, #432]	; (8007198 <err_tcp+0x1d0>)
 8006fe8:	f00e fdf4 	bl	8015bd4 <printf_>

  conn->pcb.tcp = NULL;
 8006fec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006fee:	2200      	movs	r2, #0
 8006ff0:	605a      	str	r2, [r3, #4]

  /* reset conn->state now before waking up other threads */
  old_state = conn->state;
 8006ff2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006ff4:	785b      	ldrb	r3, [r3, #1]
 8006ff6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  conn->state = NETCONN_NONE;
 8006ffa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006ffc:	2200      	movs	r2, #0
 8006ffe:	705a      	strb	r2, [r3, #1]

  if (old_state == NETCONN_CLOSE) {
 8007000:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8007004:	2b04      	cmp	r3, #4
 8007006:	d114      	bne.n	8007032 <err_tcp+0x6a>
    /* RST during close: let close return success & dealloc the netconn */
    err = ERR_OK;
 8007008:	2300      	movs	r3, #0
 800700a:	70fb      	strb	r3, [r7, #3]
    NETCONN_SET_SAFE_ERR(conn, ERR_OK);
 800700c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800700e:	2b00      	cmp	r3, #0
 8007010:	d018      	beq.n	8007044 <err_tcp+0x7c>
 8007012:	f00c f841 	bl	8013098 <sys_arch_protect>
 8007016:	61b8      	str	r0, [r7, #24]
 8007018:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800701a:	f993 3008 	ldrsb.w	r3, [r3, #8]
 800701e:	f113 0f0c 	cmn.w	r3, #12
 8007022:	db02      	blt.n	800702a <err_tcp+0x62>
 8007024:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007026:	2200      	movs	r2, #0
 8007028:	721a      	strb	r2, [r3, #8]
 800702a:	69b8      	ldr	r0, [r7, #24]
 800702c:	f00c f842 	bl	80130b4 <sys_arch_unprotect>
 8007030:	e008      	b.n	8007044 <err_tcp+0x7c>
  } else {
    /* no check since this is always fatal! */
    SYS_ARCH_SET(conn->last_err, err);
 8007032:	f00c f831 	bl	8013098 <sys_arch_protect>
 8007036:	61f8      	str	r0, [r7, #28]
 8007038:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800703a:	78fa      	ldrb	r2, [r7, #3]
 800703c:	721a      	strb	r2, [r3, #8]
 800703e:	69f8      	ldr	r0, [r7, #28]
 8007040:	f00c f838 	bl	80130b4 <sys_arch_unprotect>
  }

  /* @todo: the type of NETCONN_EVT created should depend on 'old_state' */

  /* Notify the user layer about a connection error. Used to signal select. */
  API_EVENT(conn, NETCONN_EVT_ERROR, 0);
 8007044:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007046:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007048:	2b00      	cmp	r3, #0
 800704a:	d005      	beq.n	8007058 <err_tcp+0x90>
 800704c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800704e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007050:	2200      	movs	r2, #0
 8007052:	2104      	movs	r1, #4
 8007054:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8007056:	4798      	blx	r3
  /* Try to release selects pending on 'read' or 'write', too.
     They will get an error if they actually try to read or write. */
  API_EVENT(conn, NETCONN_EVT_RCVPLUS, 0);
 8007058:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800705a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800705c:	2b00      	cmp	r3, #0
 800705e:	d005      	beq.n	800706c <err_tcp+0xa4>
 8007060:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007062:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007064:	2200      	movs	r2, #0
 8007066:	2100      	movs	r1, #0
 8007068:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800706a:	4798      	blx	r3
  API_EVENT(conn, NETCONN_EVT_SENDPLUS, 0);
 800706c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800706e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007070:	2b00      	cmp	r3, #0
 8007072:	d005      	beq.n	8007080 <err_tcp+0xb8>
 8007074:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007076:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007078:	2200      	movs	r2, #0
 800707a:	2102      	movs	r1, #2
 800707c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800707e:	4798      	blx	r3

  /* pass NULL-message to recvmbox to wake up pending recv */
  if (sys_mbox_valid(&conn->recvmbox)) {
 8007080:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007082:	3310      	adds	r3, #16
 8007084:	4618      	mov	r0, r3
 8007086:	f00b fef7 	bl	8012e78 <sys_mbox_valid>
 800708a:	4603      	mov	r3, r0
 800708c:	2b00      	cmp	r3, #0
 800708e:	d005      	beq.n	800709c <err_tcp+0xd4>
    /* use trypost to prevent deadlock */
    sys_mbox_trypost(&conn->recvmbox, NULL);
 8007090:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007092:	3310      	adds	r3, #16
 8007094:	2100      	movs	r1, #0
 8007096:	4618      	mov	r0, r3
 8007098:	f00b fe79 	bl	8012d8e <sys_mbox_trypost>
  }
  /* pass NULL-message to acceptmbox to wake up pending accept */
  if (sys_mbox_valid(&conn->acceptmbox)) {
 800709c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800709e:	3314      	adds	r3, #20
 80070a0:	4618      	mov	r0, r3
 80070a2:	f00b fee9 	bl	8012e78 <sys_mbox_valid>
 80070a6:	4603      	mov	r3, r0
 80070a8:	2b00      	cmp	r3, #0
 80070aa:	d005      	beq.n	80070b8 <err_tcp+0xf0>
    /* use trypost to preven deadlock */
    sys_mbox_trypost(&conn->acceptmbox, NULL);
 80070ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80070ae:	3314      	adds	r3, #20
 80070b0:	2100      	movs	r1, #0
 80070b2:	4618      	mov	r0, r3
 80070b4:	f00b fe6b 	bl	8012d8e <sys_mbox_trypost>
  }

  if ((old_state == NETCONN_WRITE) || (old_state == NETCONN_CLOSE) ||
 80070b8:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80070bc:	2b01      	cmp	r3, #1
 80070be:	d007      	beq.n	80070d0 <err_tcp+0x108>
 80070c0:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80070c4:	2b04      	cmp	r3, #4
 80070c6:	d003      	beq.n	80070d0 <err_tcp+0x108>
 80070c8:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80070cc:	2b03      	cmp	r3, #3
 80070ce:	d14d      	bne.n	800716c <err_tcp+0x1a4>
      (old_state == NETCONN_CONNECT)) {
    /* calling lwip_netconn_do_writemore/lwip_netconn_do_close_internal is not necessary
       since the pcb has already been deleted! */
    int was_nonblocking_connect = IN_NONBLOCKING_CONNECT(conn);
 80070d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80070d2:	7f1b      	ldrb	r3, [r3, #28]
 80070d4:	f003 0304 	and.w	r3, r3, #4
 80070d8:	2b00      	cmp	r3, #0
 80070da:	bf14      	ite	ne
 80070dc:	2301      	movne	r3, #1
 80070de:	2300      	moveq	r3, #0
 80070e0:	b2db      	uxtb	r3, r3
 80070e2:	617b      	str	r3, [r7, #20]
    SET_NONBLOCKING_CONNECT(conn, 0);
 80070e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80070e6:	7f1b      	ldrb	r3, [r3, #28]
 80070e8:	f023 0304 	bic.w	r3, r3, #4
 80070ec:	b2da      	uxtb	r2, r3
 80070ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80070f0:	771a      	strb	r2, [r3, #28]

    if (!was_nonblocking_connect) {
 80070f2:	697b      	ldr	r3, [r7, #20]
 80070f4:	2b00      	cmp	r3, #0
 80070f6:	d145      	bne.n	8007184 <err_tcp+0x1bc>
      sys_sem_t* op_completed_sem;
      /* set error return code */
      LWIP_ASSERT("conn->current_msg != NULL", conn->current_msg != NULL);
 80070f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80070fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80070fc:	2b00      	cmp	r3, #0
 80070fe:	d106      	bne.n	800710e <err_tcp+0x146>
 8007100:	4b23      	ldr	r3, [pc, #140]	; (8007190 <err_tcp+0x1c8>)
 8007102:	f240 12b3 	movw	r2, #435	; 0x1b3
 8007106:	4925      	ldr	r1, [pc, #148]	; (800719c <err_tcp+0x1d4>)
 8007108:	4823      	ldr	r0, [pc, #140]	; (8007198 <err_tcp+0x1d0>)
 800710a:	f00e fd63 	bl	8015bd4 <printf_>
      conn->current_msg->err = err;
 800710e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007110:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007112:	78fa      	ldrb	r2, [r7, #3]
 8007114:	711a      	strb	r2, [r3, #4]
      op_completed_sem = LWIP_API_MSG_SEM(conn->current_msg);
 8007116:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007118:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800711a:	681b      	ldr	r3, [r3, #0]
 800711c:	330c      	adds	r3, #12
 800711e:	613b      	str	r3, [r7, #16]
      LWIP_ASSERT("inavlid op_completed_sem", sys_sem_valid(op_completed_sem));
 8007120:	6938      	ldr	r0, [r7, #16]
 8007122:	f00b ff38 	bl	8012f96 <sys_sem_valid>
 8007126:	4603      	mov	r3, r0
 8007128:	2b00      	cmp	r3, #0
 800712a:	d106      	bne.n	800713a <err_tcp+0x172>
 800712c:	4b18      	ldr	r3, [pc, #96]	; (8007190 <err_tcp+0x1c8>)
 800712e:	f44f 72db 	mov.w	r2, #438	; 0x1b6
 8007132:	491b      	ldr	r1, [pc, #108]	; (80071a0 <err_tcp+0x1d8>)
 8007134:	4818      	ldr	r0, [pc, #96]	; (8007198 <err_tcp+0x1d0>)
 8007136:	f00e fd4d 	bl	8015bd4 <printf_>
      conn->current_msg = NULL;
 800713a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800713c:	2200      	movs	r2, #0
 800713e:	625a      	str	r2, [r3, #36]	; 0x24
      /* wake up the waiting task */
      NETCONN_SET_SAFE_ERR(conn, err);
 8007140:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007142:	2b00      	cmp	r3, #0
 8007144:	d00e      	beq.n	8007164 <err_tcp+0x19c>
 8007146:	f00b ffa7 	bl	8013098 <sys_arch_protect>
 800714a:	60f8      	str	r0, [r7, #12]
 800714c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800714e:	f993 3008 	ldrsb.w	r3, [r3, #8]
 8007152:	f113 0f0c 	cmn.w	r3, #12
 8007156:	db02      	blt.n	800715e <err_tcp+0x196>
 8007158:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800715a:	78fa      	ldrb	r2, [r7, #3]
 800715c:	721a      	strb	r2, [r3, #8]
 800715e:	68f8      	ldr	r0, [r7, #12]
 8007160:	f00b ffa8 	bl	80130b4 <sys_arch_unprotect>
      sys_sem_signal(op_completed_sem);
 8007164:	6938      	ldr	r0, [r7, #16]
 8007166:	f00b fefc 	bl	8012f62 <sys_sem_signal>
      (old_state == NETCONN_CONNECT)) {
 800716a:	e00b      	b.n	8007184 <err_tcp+0x1bc>
    }
  } else {
    LWIP_ASSERT("conn->current_msg == NULL", conn->current_msg == NULL);
 800716c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800716e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007170:	2b00      	cmp	r3, #0
 8007172:	d008      	beq.n	8007186 <err_tcp+0x1be>
 8007174:	4b06      	ldr	r3, [pc, #24]	; (8007190 <err_tcp+0x1c8>)
 8007176:	f240 12bd 	movw	r2, #445	; 0x1bd
 800717a:	490a      	ldr	r1, [pc, #40]	; (80071a4 <err_tcp+0x1dc>)
 800717c:	4806      	ldr	r0, [pc, #24]	; (8007198 <err_tcp+0x1d0>)
 800717e:	f00e fd29 	bl	8015bd4 <printf_>
  }
}
 8007182:	e000      	b.n	8007186 <err_tcp+0x1be>
      (old_state == NETCONN_CONNECT)) {
 8007184:	bf00      	nop
}
 8007186:	bf00      	nop
 8007188:	3728      	adds	r7, #40	; 0x28
 800718a:	46bd      	mov	sp, r7
 800718c:	bd80      	pop	{r7, pc}
 800718e:	bf00      	nop
 8007190:	080198a4 	.word	0x080198a4
 8007194:	080199c8 	.word	0x080199c8
 8007198:	080198fc 	.word	0x080198fc
 800719c:	080199d8 	.word	0x080199d8
 80071a0:	080199f4 	.word	0x080199f4
 80071a4:	08019a10 	.word	0x08019a10

080071a8 <setup_tcp>:
 *
 * @param conn the TCP netconn to setup
 */
static void
setup_tcp(struct netconn *conn)
{
 80071a8:	b580      	push	{r7, lr}
 80071aa:	b084      	sub	sp, #16
 80071ac:	af00      	add	r7, sp, #0
 80071ae:	6078      	str	r0, [r7, #4]
  struct tcp_pcb *pcb;

  pcb = conn->pcb.tcp;
 80071b0:	687b      	ldr	r3, [r7, #4]
 80071b2:	685b      	ldr	r3, [r3, #4]
 80071b4:	60fb      	str	r3, [r7, #12]
  tcp_arg(pcb, conn);
 80071b6:	6879      	ldr	r1, [r7, #4]
 80071b8:	68f8      	ldr	r0, [r7, #12]
 80071ba:	f004 fe03 	bl	800bdc4 <tcp_arg>
  tcp_recv(pcb, recv_tcp);
 80071be:	490a      	ldr	r1, [pc, #40]	; (80071e8 <setup_tcp+0x40>)
 80071c0:	68f8      	ldr	r0, [r7, #12]
 80071c2:	f004 fe11 	bl	800bde8 <tcp_recv>
  tcp_sent(pcb, sent_tcp);
 80071c6:	4909      	ldr	r1, [pc, #36]	; (80071ec <setup_tcp+0x44>)
 80071c8:	68f8      	ldr	r0, [r7, #12]
 80071ca:	f004 fe2f 	bl	800be2c <tcp_sent>
  tcp_poll(pcb, poll_tcp, NETCONN_TCP_POLL_INTERVAL);
 80071ce:	2202      	movs	r2, #2
 80071d0:	4907      	ldr	r1, [pc, #28]	; (80071f0 <setup_tcp+0x48>)
 80071d2:	68f8      	ldr	r0, [r7, #12]
 80071d4:	f004 fe84 	bl	800bee0 <tcp_poll>
  tcp_err(pcb, err_tcp);
 80071d8:	4906      	ldr	r1, [pc, #24]	; (80071f4 <setup_tcp+0x4c>)
 80071da:	68f8      	ldr	r0, [r7, #12]
 80071dc:	f004 fe46 	bl	800be6c <tcp_err>
}
 80071e0:	bf00      	nop
 80071e2:	3710      	adds	r7, #16
 80071e4:	46bd      	mov	sp, r7
 80071e6:	bd80      	pop	{r7, pc}
 80071e8:	08006d41 	.word	0x08006d41
 80071ec:	08006f1d 	.word	0x08006f1d
 80071f0:	08006e51 	.word	0x08006e51
 80071f4:	08006fc9 	.word	0x08006fc9

080071f8 <pcb_new>:
 *
 * @param msg the api_msg_msg describing the connection type
 */
static void
pcb_new(struct api_msg *msg)
{
 80071f8:	b590      	push	{r4, r7, lr}
 80071fa:	b085      	sub	sp, #20
 80071fc:	af00      	add	r7, sp, #0
 80071fe:	6078      	str	r0, [r7, #4]
  enum lwip_ip_addr_type iptype = IPADDR_TYPE_V4;
 8007200:	2300      	movs	r3, #0
 8007202:	73fb      	strb	r3, [r7, #15]

  LWIP_ASSERT("pcb_new: pcb already allocated", msg->conn->pcb.tcp == NULL);
 8007204:	687b      	ldr	r3, [r7, #4]
 8007206:	681b      	ldr	r3, [r3, #0]
 8007208:	685b      	ldr	r3, [r3, #4]
 800720a:	2b00      	cmp	r3, #0
 800720c:	d006      	beq.n	800721c <pcb_new+0x24>
 800720e:	4b2b      	ldr	r3, [pc, #172]	; (80072bc <pcb_new+0xc4>)
 8007210:	f44f 720b 	mov.w	r2, #556	; 0x22c
 8007214:	492a      	ldr	r1, [pc, #168]	; (80072c0 <pcb_new+0xc8>)
 8007216:	482b      	ldr	r0, [pc, #172]	; (80072c4 <pcb_new+0xcc>)
 8007218:	f00e fcdc 	bl	8015bd4 <printf_>
    iptype = IPADDR_TYPE_ANY;
  }
#endif
  
  /* Allocate a PCB for this connection */
  switch(NETCONNTYPE_GROUP(msg->conn->type)) {
 800721c:	687b      	ldr	r3, [r7, #4]
 800721e:	681b      	ldr	r3, [r3, #0]
 8007220:	781b      	ldrb	r3, [r3, #0]
 8007222:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8007226:	2b10      	cmp	r3, #16
 8007228:	d022      	beq.n	8007270 <pcb_new+0x78>
 800722a:	2b20      	cmp	r3, #32
 800722c:	d133      	bne.n	8007296 <pcb_new+0x9e>
    }
    break;
#endif /* LWIP_RAW */
#if LWIP_UDP
  case NETCONN_UDP:
    msg->conn->pcb.udp = udp_new_ip_type(iptype);
 800722e:	687b      	ldr	r3, [r7, #4]
 8007230:	681c      	ldr	r4, [r3, #0]
 8007232:	7bfb      	ldrb	r3, [r7, #15]
 8007234:	4618      	mov	r0, r3
 8007236:	f009 faea 	bl	801080e <udp_new_ip_type>
 800723a:	4603      	mov	r3, r0
 800723c:	6063      	str	r3, [r4, #4]
    if (msg->conn->pcb.udp != NULL) {
 800723e:	687b      	ldr	r3, [r7, #4]
 8007240:	681b      	ldr	r3, [r3, #0]
 8007242:	685b      	ldr	r3, [r3, #4]
 8007244:	2b00      	cmp	r3, #0
 8007246:	d02a      	beq.n	800729e <pcb_new+0xa6>
#if LWIP_UDPLITE
      if (NETCONNTYPE_ISUDPLITE(msg->conn->type)) {
        udp_setflags(msg->conn->pcb.udp, UDP_FLAGS_UDPLITE);
      }
#endif /* LWIP_UDPLITE */
      if (NETCONNTYPE_ISUDPNOCHKSUM(msg->conn->type)) {
 8007248:	687b      	ldr	r3, [r7, #4]
 800724a:	681b      	ldr	r3, [r3, #0]
 800724c:	781b      	ldrb	r3, [r3, #0]
 800724e:	2b22      	cmp	r3, #34	; 0x22
 8007250:	d104      	bne.n	800725c <pcb_new+0x64>
        udp_setflags(msg->conn->pcb.udp, UDP_FLAGS_NOCHKSUM);
 8007252:	687b      	ldr	r3, [r7, #4]
 8007254:	681b      	ldr	r3, [r3, #0]
 8007256:	685b      	ldr	r3, [r3, #4]
 8007258:	2201      	movs	r2, #1
 800725a:	741a      	strb	r2, [r3, #16]
      }
      udp_recv(msg->conn->pcb.udp, recv_udp, msg->conn);
 800725c:	687b      	ldr	r3, [r7, #4]
 800725e:	681b      	ldr	r3, [r3, #0]
 8007260:	6858      	ldr	r0, [r3, #4]
 8007262:	687b      	ldr	r3, [r7, #4]
 8007264:	681b      	ldr	r3, [r3, #0]
 8007266:	461a      	mov	r2, r3
 8007268:	4917      	ldr	r1, [pc, #92]	; (80072c8 <pcb_new+0xd0>)
 800726a:	f009 fa74 	bl	8010756 <udp_recv>
    }
    break;
 800726e:	e016      	b.n	800729e <pcb_new+0xa6>
#endif /* LWIP_UDP */
#if LWIP_TCP
  case NETCONN_TCP:
    msg->conn->pcb.tcp = tcp_new_ip_type(iptype);
 8007270:	687b      	ldr	r3, [r7, #4]
 8007272:	681c      	ldr	r4, [r3, #0]
 8007274:	7bfb      	ldrb	r3, [r7, #15]
 8007276:	4618      	mov	r0, r3
 8007278:	f004 fd96 	bl	800bda8 <tcp_new_ip_type>
 800727c:	4603      	mov	r3, r0
 800727e:	6063      	str	r3, [r4, #4]
    if (msg->conn->pcb.tcp != NULL) {
 8007280:	687b      	ldr	r3, [r7, #4]
 8007282:	681b      	ldr	r3, [r3, #0]
 8007284:	685b      	ldr	r3, [r3, #4]
 8007286:	2b00      	cmp	r3, #0
 8007288:	d00b      	beq.n	80072a2 <pcb_new+0xaa>
      setup_tcp(msg->conn);
 800728a:	687b      	ldr	r3, [r7, #4]
 800728c:	681b      	ldr	r3, [r3, #0]
 800728e:	4618      	mov	r0, r3
 8007290:	f7ff ff8a 	bl	80071a8 <setup_tcp>
    }
    break;
 8007294:	e005      	b.n	80072a2 <pcb_new+0xaa>
#endif /* LWIP_TCP */
  default:
    /* Unsupported netconn type, e.g. protocol disabled */
    msg->err = ERR_VAL;
 8007296:	687b      	ldr	r3, [r7, #4]
 8007298:	22fa      	movs	r2, #250	; 0xfa
 800729a:	711a      	strb	r2, [r3, #4]
    return;
 800729c:	e00a      	b.n	80072b4 <pcb_new+0xbc>
    break;
 800729e:	bf00      	nop
 80072a0:	e000      	b.n	80072a4 <pcb_new+0xac>
    break;
 80072a2:	bf00      	nop
  }
  if (msg->conn->pcb.ip == NULL) {
 80072a4:	687b      	ldr	r3, [r7, #4]
 80072a6:	681b      	ldr	r3, [r3, #0]
 80072a8:	685b      	ldr	r3, [r3, #4]
 80072aa:	2b00      	cmp	r3, #0
 80072ac:	d102      	bne.n	80072b4 <pcb_new+0xbc>
    msg->err = ERR_MEM;
 80072ae:	687b      	ldr	r3, [r7, #4]
 80072b0:	22ff      	movs	r2, #255	; 0xff
 80072b2:	711a      	strb	r2, [r3, #4]
  }
}
 80072b4:	3714      	adds	r7, #20
 80072b6:	46bd      	mov	sp, r7
 80072b8:	bd90      	pop	{r4, r7, pc}
 80072ba:	bf00      	nop
 80072bc:	080198a4 	.word	0x080198a4
 80072c0:	08019a2c 	.word	0x08019a2c
 80072c4:	080198fc 	.word	0x080198fc
 80072c8:	08006c45 	.word	0x08006c45

080072cc <lwip_netconn_do_newconn>:
 *
 * @param m the api_msg_msg describing the connection type
 */
void
lwip_netconn_do_newconn(void *m)
{
 80072cc:	b580      	push	{r7, lr}
 80072ce:	b084      	sub	sp, #16
 80072d0:	af00      	add	r7, sp, #0
 80072d2:	6078      	str	r0, [r7, #4]
  struct api_msg *msg = (struct api_msg*)m;
 80072d4:	687b      	ldr	r3, [r7, #4]
 80072d6:	60fb      	str	r3, [r7, #12]

  msg->err = ERR_OK;
 80072d8:	68fb      	ldr	r3, [r7, #12]
 80072da:	2200      	movs	r2, #0
 80072dc:	711a      	strb	r2, [r3, #4]
  if (msg->conn->pcb.tcp == NULL) {
 80072de:	68fb      	ldr	r3, [r7, #12]
 80072e0:	681b      	ldr	r3, [r3, #0]
 80072e2:	685b      	ldr	r3, [r3, #4]
 80072e4:	2b00      	cmp	r3, #0
 80072e6:	d102      	bne.n	80072ee <lwip_netconn_do_newconn+0x22>
    pcb_new(msg);
 80072e8:	68f8      	ldr	r0, [r7, #12]
 80072ea:	f7ff ff85 	bl	80071f8 <pcb_new>
  }
  /* Else? This "new" connection already has a PCB allocated. */
  /* Is this an error condition? Should it be deleted? */
  /* We currently just are happy and return. */

  TCPIP_APIMSG_ACK(msg);
 80072ee:	68fb      	ldr	r3, [r7, #12]
 80072f0:	681b      	ldr	r3, [r3, #0]
 80072f2:	2b00      	cmp	r3, #0
 80072f4:	d012      	beq.n	800731c <lwip_netconn_do_newconn+0x50>
 80072f6:	f00b fecf 	bl	8013098 <sys_arch_protect>
 80072fa:	60b8      	str	r0, [r7, #8]
 80072fc:	68fb      	ldr	r3, [r7, #12]
 80072fe:	681b      	ldr	r3, [r3, #0]
 8007300:	f993 3008 	ldrsb.w	r3, [r3, #8]
 8007304:	f113 0f0c 	cmn.w	r3, #12
 8007308:	db05      	blt.n	8007316 <lwip_netconn_do_newconn+0x4a>
 800730a:	68fb      	ldr	r3, [r7, #12]
 800730c:	681b      	ldr	r3, [r3, #0]
 800730e:	68fa      	ldr	r2, [r7, #12]
 8007310:	f992 2004 	ldrsb.w	r2, [r2, #4]
 8007314:	721a      	strb	r2, [r3, #8]
 8007316:	68b8      	ldr	r0, [r7, #8]
 8007318:	f00b fecc 	bl	80130b4 <sys_arch_unprotect>
}
 800731c:	bf00      	nop
 800731e:	3710      	adds	r7, #16
 8007320:	46bd      	mov	sp, r7
 8007322:	bd80      	pop	{r7, pc}

08007324 <netconn_alloc>:
 * @return a newly allocated struct netconn or
 *         NULL on memory error
 */
struct netconn*
netconn_alloc(enum netconn_type t, netconn_callback callback)
{
 8007324:	b580      	push	{r7, lr}
 8007326:	b084      	sub	sp, #16
 8007328:	af00      	add	r7, sp, #0
 800732a:	4603      	mov	r3, r0
 800732c:	6039      	str	r1, [r7, #0]
 800732e:	71fb      	strb	r3, [r7, #7]
  struct netconn *conn;
  int size;

  conn = (struct netconn *)memp_malloc(MEMP_NETCONN);
 8007330:	2007      	movs	r0, #7
 8007332:	f002 fa9d 	bl	8009870 <memp_malloc>
 8007336:	60b8      	str	r0, [r7, #8]
  if (conn == NULL) {
 8007338:	68bb      	ldr	r3, [r7, #8]
 800733a:	2b00      	cmp	r3, #0
 800733c:	d101      	bne.n	8007342 <netconn_alloc+0x1e>
    return NULL;
 800733e:	2300      	movs	r3, #0
 8007340:	e055      	b.n	80073ee <netconn_alloc+0xca>
  }

  conn->last_err = ERR_OK;
 8007342:	68bb      	ldr	r3, [r7, #8]
 8007344:	2200      	movs	r2, #0
 8007346:	721a      	strb	r2, [r3, #8]
  conn->type = t;
 8007348:	68bb      	ldr	r3, [r7, #8]
 800734a:	79fa      	ldrb	r2, [r7, #7]
 800734c:	701a      	strb	r2, [r3, #0]
  conn->pcb.tcp = NULL;
 800734e:	68bb      	ldr	r3, [r7, #8]
 8007350:	2200      	movs	r2, #0
 8007352:	605a      	str	r2, [r3, #4]

  /* If all sizes are the same, every compiler should optimize this switch to nothing */
  switch(NETCONNTYPE_GROUP(t)) {
 8007354:	79fb      	ldrb	r3, [r7, #7]
 8007356:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800735a:	2b10      	cmp	r3, #16
 800735c:	d004      	beq.n	8007368 <netconn_alloc+0x44>
 800735e:	2b20      	cmp	r3, #32
 8007360:	d105      	bne.n	800736e <netconn_alloc+0x4a>
    size = DEFAULT_RAW_RECVMBOX_SIZE;
    break;
#endif /* LWIP_RAW */
#if LWIP_UDP
  case NETCONN_UDP:
    size = DEFAULT_UDP_RECVMBOX_SIZE;
 8007362:	2306      	movs	r3, #6
 8007364:	60fb      	str	r3, [r7, #12]
    break;
 8007366:	e00a      	b.n	800737e <netconn_alloc+0x5a>
#endif /* LWIP_UDP */
#if LWIP_TCP
  case NETCONN_TCP:
    size = DEFAULT_TCP_RECVMBOX_SIZE;
 8007368:	2306      	movs	r3, #6
 800736a:	60fb      	str	r3, [r7, #12]
    break;
 800736c:	e007      	b.n	800737e <netconn_alloc+0x5a>
#endif /* LWIP_TCP */
  default:
    LWIP_ASSERT("netconn_alloc: undefined netconn_type", 0);
 800736e:	4b22      	ldr	r3, [pc, #136]	; (80073f8 <netconn_alloc+0xd4>)
 8007370:	f44f 722a 	mov.w	r2, #680	; 0x2a8
 8007374:	4921      	ldr	r1, [pc, #132]	; (80073fc <netconn_alloc+0xd8>)
 8007376:	4822      	ldr	r0, [pc, #136]	; (8007400 <netconn_alloc+0xdc>)
 8007378:	f00e fc2c 	bl	8015bd4 <printf_>
    goto free_and_return;
 800737c:	e032      	b.n	80073e4 <netconn_alloc+0xc0>
  }

  if (sys_mbox_new(&conn->recvmbox, size) != ERR_OK) {
 800737e:	68bb      	ldr	r3, [r7, #8]
 8007380:	3310      	adds	r3, #16
 8007382:	68f9      	ldr	r1, [r7, #12]
 8007384:	4618      	mov	r0, r3
 8007386:	f00b fcbd 	bl	8012d04 <sys_mbox_new>
 800738a:	4603      	mov	r3, r0
 800738c:	2b00      	cmp	r3, #0
 800738e:	d128      	bne.n	80073e2 <netconn_alloc+0xbe>
    goto free_and_return;
  }
#if !LWIP_NETCONN_SEM_PER_THREAD
  if (sys_sem_new(&conn->op_completed, 0) != ERR_OK) {
 8007390:	68bb      	ldr	r3, [r7, #8]
 8007392:	330c      	adds	r3, #12
 8007394:	2100      	movs	r1, #0
 8007396:	4618      	mov	r0, r3
 8007398:	f00b fd8c 	bl	8012eb4 <sys_sem_new>
 800739c:	4603      	mov	r3, r0
 800739e:	2b00      	cmp	r3, #0
 80073a0:	d005      	beq.n	80073ae <netconn_alloc+0x8a>
    sys_mbox_free(&conn->recvmbox);
 80073a2:	68bb      	ldr	r3, [r7, #8]
 80073a4:	3310      	adds	r3, #16
 80073a6:	4618      	mov	r0, r3
 80073a8:	f00b fcca 	bl	8012d40 <sys_mbox_free>
    goto free_and_return;
 80073ac:	e01a      	b.n	80073e4 <netconn_alloc+0xc0>
  }
#endif

#if LWIP_TCP
  sys_mbox_set_invalid(&conn->acceptmbox);
 80073ae:	68bb      	ldr	r3, [r7, #8]
 80073b0:	3314      	adds	r3, #20
 80073b2:	4618      	mov	r0, r3
 80073b4:	f00b fd71 	bl	8012e9a <sys_mbox_set_invalid>
#endif
  conn->state        = NETCONN_NONE;
 80073b8:	68bb      	ldr	r3, [r7, #8]
 80073ba:	2200      	movs	r2, #0
 80073bc:	705a      	strb	r2, [r3, #1]
#if LWIP_SOCKET
  /* initialize socket to -1 since 0 is a valid socket */
  conn->socket       = -1;
 80073be:	68bb      	ldr	r3, [r7, #8]
 80073c0:	f04f 32ff 	mov.w	r2, #4294967295
 80073c4:	619a      	str	r2, [r3, #24]
#endif /* LWIP_SOCKET */
  conn->callback     = callback;
 80073c6:	68bb      	ldr	r3, [r7, #8]
 80073c8:	683a      	ldr	r2, [r7, #0]
 80073ca:	629a      	str	r2, [r3, #40]	; 0x28
#if LWIP_TCP
  conn->current_msg  = NULL;
 80073cc:	68bb      	ldr	r3, [r7, #8]
 80073ce:	2200      	movs	r2, #0
 80073d0:	625a      	str	r2, [r3, #36]	; 0x24
  conn->write_offset = 0;
 80073d2:	68bb      	ldr	r3, [r7, #8]
 80073d4:	2200      	movs	r2, #0
 80073d6:	621a      	str	r2, [r3, #32]
  conn->recv_avail   = 0;
#endif /* LWIP_SO_RCVBUF */
#if LWIP_SO_LINGER
  conn->linger = -1;
#endif /* LWIP_SO_LINGER */
  conn->flags = 0;
 80073d8:	68bb      	ldr	r3, [r7, #8]
 80073da:	2200      	movs	r2, #0
 80073dc:	771a      	strb	r2, [r3, #28]
  return conn;
 80073de:	68bb      	ldr	r3, [r7, #8]
 80073e0:	e005      	b.n	80073ee <netconn_alloc+0xca>
    goto free_and_return;
 80073e2:	bf00      	nop
free_and_return:
  memp_free(MEMP_NETCONN, conn);
 80073e4:	68b9      	ldr	r1, [r7, #8]
 80073e6:	2007      	movs	r0, #7
 80073e8:	f002 fab8 	bl	800995c <memp_free>
  return NULL;
 80073ec:	2300      	movs	r3, #0
}
 80073ee:	4618      	mov	r0, r3
 80073f0:	3710      	adds	r7, #16
 80073f2:	46bd      	mov	sp, r7
 80073f4:	bd80      	pop	{r7, pc}
 80073f6:	bf00      	nop
 80073f8:	080198a4 	.word	0x080198a4
 80073fc:	08019a4c 	.word	0x08019a4c
 8007400:	080198fc 	.word	0x080198fc

08007404 <netconn_free>:
 *
 * @param conn the netconn to free
 */
void
netconn_free(struct netconn *conn)
{
 8007404:	b580      	push	{r7, lr}
 8007406:	b082      	sub	sp, #8
 8007408:	af00      	add	r7, sp, #0
 800740a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("PCB must be deallocated outside this function", conn->pcb.tcp == NULL);
 800740c:	687b      	ldr	r3, [r7, #4]
 800740e:	685b      	ldr	r3, [r3, #4]
 8007410:	2b00      	cmp	r3, #0
 8007412:	d006      	beq.n	8007422 <netconn_free+0x1e>
 8007414:	4b1b      	ldr	r3, [pc, #108]	; (8007484 <netconn_free+0x80>)
 8007416:	f44f 7238 	mov.w	r2, #736	; 0x2e0
 800741a:	491b      	ldr	r1, [pc, #108]	; (8007488 <netconn_free+0x84>)
 800741c:	481b      	ldr	r0, [pc, #108]	; (800748c <netconn_free+0x88>)
 800741e:	f00e fbd9 	bl	8015bd4 <printf_>
  LWIP_ASSERT("recvmbox must be deallocated before calling this function",
 8007422:	687b      	ldr	r3, [r7, #4]
 8007424:	3310      	adds	r3, #16
 8007426:	4618      	mov	r0, r3
 8007428:	f00b fd26 	bl	8012e78 <sys_mbox_valid>
 800742c:	4603      	mov	r3, r0
 800742e:	2b00      	cmp	r3, #0
 8007430:	d006      	beq.n	8007440 <netconn_free+0x3c>
 8007432:	4b14      	ldr	r3, [pc, #80]	; (8007484 <netconn_free+0x80>)
 8007434:	f240 22e2 	movw	r2, #738	; 0x2e2
 8007438:	4915      	ldr	r1, [pc, #84]	; (8007490 <netconn_free+0x8c>)
 800743a:	4814      	ldr	r0, [pc, #80]	; (800748c <netconn_free+0x88>)
 800743c:	f00e fbca 	bl	8015bd4 <printf_>
    !sys_mbox_valid(&conn->recvmbox));
#if LWIP_TCP
  LWIP_ASSERT("acceptmbox must be deallocated before calling this function",
 8007440:	687b      	ldr	r3, [r7, #4]
 8007442:	3314      	adds	r3, #20
 8007444:	4618      	mov	r0, r3
 8007446:	f00b fd17 	bl	8012e78 <sys_mbox_valid>
 800744a:	4603      	mov	r3, r0
 800744c:	2b00      	cmp	r3, #0
 800744e:	d006      	beq.n	800745e <netconn_free+0x5a>
 8007450:	4b0c      	ldr	r3, [pc, #48]	; (8007484 <netconn_free+0x80>)
 8007452:	f240 22e5 	movw	r2, #741	; 0x2e5
 8007456:	490f      	ldr	r1, [pc, #60]	; (8007494 <netconn_free+0x90>)
 8007458:	480c      	ldr	r0, [pc, #48]	; (800748c <netconn_free+0x88>)
 800745a:	f00e fbbb 	bl	8015bd4 <printf_>
    !sys_mbox_valid(&conn->acceptmbox));
#endif /* LWIP_TCP */

#if !LWIP_NETCONN_SEM_PER_THREAD
  sys_sem_free(&conn->op_completed);
 800745e:	687b      	ldr	r3, [r7, #4]
 8007460:	330c      	adds	r3, #12
 8007462:	4618      	mov	r0, r3
 8007464:	f00b fd8a 	bl	8012f7c <sys_sem_free>
  sys_sem_set_invalid(&conn->op_completed);
 8007468:	687b      	ldr	r3, [r7, #4]
 800746a:	330c      	adds	r3, #12
 800746c:	4618      	mov	r0, r3
 800746e:	f00b fda3 	bl	8012fb8 <sys_sem_set_invalid>
#endif

  memp_free(MEMP_NETCONN, conn);
 8007472:	6879      	ldr	r1, [r7, #4]
 8007474:	2007      	movs	r0, #7
 8007476:	f002 fa71 	bl	800995c <memp_free>
}
 800747a:	bf00      	nop
 800747c:	3708      	adds	r7, #8
 800747e:	46bd      	mov	sp, r7
 8007480:	bd80      	pop	{r7, pc}
 8007482:	bf00      	nop
 8007484:	080198a4 	.word	0x080198a4
 8007488:	08019a74 	.word	0x08019a74
 800748c:	080198fc 	.word	0x080198fc
 8007490:	08019aa4 	.word	0x08019aa4
 8007494:	08019ae0 	.word	0x08019ae0

08007498 <netconn_drain>:
 * @bytes_drained bytes drained from recvmbox
 * @accepts_drained pending connections drained from acceptmbox
 */
static void
netconn_drain(struct netconn *conn)
{
 8007498:	b580      	push	{r7, lr}
 800749a:	b086      	sub	sp, #24
 800749c:	af00      	add	r7, sp, #0
 800749e:	6078      	str	r0, [r7, #4]
#endif /* LWIP_TCP */

  /* This runs in tcpip_thread, so we don't need to lock against rx packets */

  /* Delete and drain the recvmbox. */
  if (sys_mbox_valid(&conn->recvmbox)) {
 80074a0:	687b      	ldr	r3, [r7, #4]
 80074a2:	3310      	adds	r3, #16
 80074a4:	4618      	mov	r0, r3
 80074a6:	f00b fce7 	bl	8012e78 <sys_mbox_valid>
 80074aa:	4603      	mov	r3, r0
 80074ac:	2b00      	cmp	r3, #0
 80074ae:	d035      	beq.n	800751c <netconn_drain+0x84>
    while (sys_mbox_tryfetch(&conn->recvmbox, &mem) != SYS_MBOX_EMPTY) {
 80074b0:	e01e      	b.n	80074f0 <netconn_drain+0x58>
#if LWIP_TCP
      if (NETCONNTYPE_GROUP(conn->type) == NETCONN_TCP) {
 80074b2:	687b      	ldr	r3, [r7, #4]
 80074b4:	781b      	ldrb	r3, [r3, #0]
 80074b6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80074ba:	2b10      	cmp	r3, #16
 80074bc:	d114      	bne.n	80074e8 <netconn_drain+0x50>
        if (mem != NULL) {
 80074be:	68fb      	ldr	r3, [r7, #12]
 80074c0:	2b00      	cmp	r3, #0
 80074c2:	d015      	beq.n	80074f0 <netconn_drain+0x58>
          p = (struct pbuf*)mem;
 80074c4:	68fb      	ldr	r3, [r7, #12]
 80074c6:	617b      	str	r3, [r7, #20]
          /* pcb might be set to NULL already by err_tcp() */
          if (conn->pcb.tcp != NULL) {
 80074c8:	687b      	ldr	r3, [r7, #4]
 80074ca:	685b      	ldr	r3, [r3, #4]
 80074cc:	2b00      	cmp	r3, #0
 80074ce:	d007      	beq.n	80074e0 <netconn_drain+0x48>
            tcp_recved(conn->pcb.tcp, p->tot_len);
 80074d0:	687b      	ldr	r3, [r7, #4]
 80074d2:	685a      	ldr	r2, [r3, #4]
 80074d4:	697b      	ldr	r3, [r7, #20]
 80074d6:	891b      	ldrh	r3, [r3, #8]
 80074d8:	4619      	mov	r1, r3
 80074da:	4610      	mov	r0, r2
 80074dc:	f003 fd9a 	bl	800b014 <tcp_recved>
          }
          pbuf_free(p);
 80074e0:	6978      	ldr	r0, [r7, #20]
 80074e2:	f002 ffe5 	bl	800a4b0 <pbuf_free>
 80074e6:	e003      	b.n	80074f0 <netconn_drain+0x58>
        }
      } else
#endif /* LWIP_TCP */
      {
        netbuf_delete((struct netbuf *)mem);
 80074e8:	68fb      	ldr	r3, [r7, #12]
 80074ea:	4618      	mov	r0, r3
 80074ec:	f000 ff5c 	bl	80083a8 <netbuf_delete>
    while (sys_mbox_tryfetch(&conn->recvmbox, &mem) != SYS_MBOX_EMPTY) {
 80074f0:	687b      	ldr	r3, [r7, #4]
 80074f2:	3310      	adds	r3, #16
 80074f4:	f107 020c 	add.w	r2, r7, #12
 80074f8:	4611      	mov	r1, r2
 80074fa:	4618      	mov	r0, r3
 80074fc:	f00b fca0 	bl	8012e40 <sys_arch_mbox_tryfetch>
 8007500:	4603      	mov	r3, r0
 8007502:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007506:	d1d4      	bne.n	80074b2 <netconn_drain+0x1a>
      }
    }
    sys_mbox_free(&conn->recvmbox);
 8007508:	687b      	ldr	r3, [r7, #4]
 800750a:	3310      	adds	r3, #16
 800750c:	4618      	mov	r0, r3
 800750e:	f00b fc17 	bl	8012d40 <sys_mbox_free>
    sys_mbox_set_invalid(&conn->recvmbox);
 8007512:	687b      	ldr	r3, [r7, #4]
 8007514:	3310      	adds	r3, #16
 8007516:	4618      	mov	r0, r3
 8007518:	f00b fcbf 	bl	8012e9a <sys_mbox_set_invalid>
  }

  /* Delete and drain the acceptmbox. */
#if LWIP_TCP
  if (sys_mbox_valid(&conn->acceptmbox)) {
 800751c:	687b      	ldr	r3, [r7, #4]
 800751e:	3314      	adds	r3, #20
 8007520:	4618      	mov	r0, r3
 8007522:	f00b fca9 	bl	8012e78 <sys_mbox_valid>
 8007526:	4603      	mov	r3, r0
 8007528:	2b00      	cmp	r3, #0
 800752a:	d02e      	beq.n	800758a <netconn_drain+0xf2>
    while (sys_mbox_tryfetch(&conn->acceptmbox, &mem) != SYS_MBOX_EMPTY) {
 800752c:	e017      	b.n	800755e <netconn_drain+0xc6>
      if (mem != &netconn_aborted) {
 800752e:	68fb      	ldr	r3, [r7, #12]
 8007530:	4a18      	ldr	r2, [pc, #96]	; (8007594 <netconn_drain+0xfc>)
 8007532:	4293      	cmp	r3, r2
 8007534:	d013      	beq.n	800755e <netconn_drain+0xc6>
        struct netconn *newconn = (struct netconn *)mem;
 8007536:	68fb      	ldr	r3, [r7, #12]
 8007538:	613b      	str	r3, [r7, #16]
        /* Only tcp pcbs have an acceptmbox, so no need to check conn->type */
        /* pcb might be set to NULL already by err_tcp() */
        /* drain recvmbox */
        netconn_drain(newconn);
 800753a:	6938      	ldr	r0, [r7, #16]
 800753c:	f7ff ffac 	bl	8007498 <netconn_drain>
        if (newconn->pcb.tcp != NULL) {
 8007540:	693b      	ldr	r3, [r7, #16]
 8007542:	685b      	ldr	r3, [r3, #4]
 8007544:	2b00      	cmp	r3, #0
 8007546:	d007      	beq.n	8007558 <netconn_drain+0xc0>
          tcp_abort(newconn->pcb.tcp);
 8007548:	693b      	ldr	r3, [r7, #16]
 800754a:	685b      	ldr	r3, [r3, #4]
 800754c:	4618      	mov	r0, r3
 800754e:	f003 fd07 	bl	800af60 <tcp_abort>
          newconn->pcb.tcp = NULL;
 8007552:	693b      	ldr	r3, [r7, #16]
 8007554:	2200      	movs	r2, #0
 8007556:	605a      	str	r2, [r3, #4]
        }
        netconn_free(newconn);
 8007558:	6938      	ldr	r0, [r7, #16]
 800755a:	f7ff ff53 	bl	8007404 <netconn_free>
    while (sys_mbox_tryfetch(&conn->acceptmbox, &mem) != SYS_MBOX_EMPTY) {
 800755e:	687b      	ldr	r3, [r7, #4]
 8007560:	3314      	adds	r3, #20
 8007562:	f107 020c 	add.w	r2, r7, #12
 8007566:	4611      	mov	r1, r2
 8007568:	4618      	mov	r0, r3
 800756a:	f00b fc69 	bl	8012e40 <sys_arch_mbox_tryfetch>
 800756e:	4603      	mov	r3, r0
 8007570:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007574:	d1db      	bne.n	800752e <netconn_drain+0x96>
      }
    }
    sys_mbox_free(&conn->acceptmbox);
 8007576:	687b      	ldr	r3, [r7, #4]
 8007578:	3314      	adds	r3, #20
 800757a:	4618      	mov	r0, r3
 800757c:	f00b fbe0 	bl	8012d40 <sys_mbox_free>
    sys_mbox_set_invalid(&conn->acceptmbox);
 8007580:	687b      	ldr	r3, [r7, #4]
 8007582:	3314      	adds	r3, #20
 8007584:	4618      	mov	r0, r3
 8007586:	f00b fc88 	bl	8012e9a <sys_mbox_set_invalid>
  }
#endif /* LWIP_TCP */
}
 800758a:	bf00      	nop
 800758c:	3718      	adds	r7, #24
 800758e:	46bd      	mov	sp, r7
 8007590:	bd80      	pop	{r7, pc}
 8007592:	bf00      	nop
 8007594:	240087a4 	.word	0x240087a4

08007598 <lwip_netconn_do_close_internal>:
 *
 * @param conn the TCP netconn to close
 */
static err_t
lwip_netconn_do_close_internal(struct netconn *conn  WRITE_DELAYED_PARAM)
{
 8007598:	b580      	push	{r7, lr}
 800759a:	b088      	sub	sp, #32
 800759c:	af00      	add	r7, sp, #0
 800759e:	6078      	str	r0, [r7, #4]
 80075a0:	460b      	mov	r3, r1
 80075a2:	70fb      	strb	r3, [r7, #3]
  err_t err;
  u8_t shut, shut_rx, shut_tx, close;
  u8_t close_finished = 0;
 80075a4:	2300      	movs	r3, #0
 80075a6:	777b      	strb	r3, [r7, #29]
  struct tcp_pcb* tpcb;
#if LWIP_SO_LINGER
  u8_t linger_wait_required = 0;
#endif /* LWIP_SO_LINGER */

  LWIP_ASSERT("invalid conn", (conn != NULL));
 80075a8:	687b      	ldr	r3, [r7, #4]
 80075aa:	2b00      	cmp	r3, #0
 80075ac:	d106      	bne.n	80075bc <lwip_netconn_do_close_internal+0x24>
 80075ae:	4baa      	ldr	r3, [pc, #680]	; (8007858 <lwip_netconn_do_close_internal+0x2c0>)
 80075b0:	f240 3243 	movw	r2, #835	; 0x343
 80075b4:	49a9      	ldr	r1, [pc, #676]	; (800785c <lwip_netconn_do_close_internal+0x2c4>)
 80075b6:	48aa      	ldr	r0, [pc, #680]	; (8007860 <lwip_netconn_do_close_internal+0x2c8>)
 80075b8:	f00e fb0c 	bl	8015bd4 <printf_>
  LWIP_ASSERT("this is for tcp netconns only", (NETCONNTYPE_GROUP(conn->type) == NETCONN_TCP));
 80075bc:	687b      	ldr	r3, [r7, #4]
 80075be:	781b      	ldrb	r3, [r3, #0]
 80075c0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80075c4:	2b10      	cmp	r3, #16
 80075c6:	d006      	beq.n	80075d6 <lwip_netconn_do_close_internal+0x3e>
 80075c8:	4ba3      	ldr	r3, [pc, #652]	; (8007858 <lwip_netconn_do_close_internal+0x2c0>)
 80075ca:	f44f 7251 	mov.w	r2, #836	; 0x344
 80075ce:	49a5      	ldr	r1, [pc, #660]	; (8007864 <lwip_netconn_do_close_internal+0x2cc>)
 80075d0:	48a3      	ldr	r0, [pc, #652]	; (8007860 <lwip_netconn_do_close_internal+0x2c8>)
 80075d2:	f00e faff 	bl	8015bd4 <printf_>
  LWIP_ASSERT("conn must be in state NETCONN_CLOSE", (conn->state == NETCONN_CLOSE));
 80075d6:	687b      	ldr	r3, [r7, #4]
 80075d8:	785b      	ldrb	r3, [r3, #1]
 80075da:	2b04      	cmp	r3, #4
 80075dc:	d006      	beq.n	80075ec <lwip_netconn_do_close_internal+0x54>
 80075de:	4b9e      	ldr	r3, [pc, #632]	; (8007858 <lwip_netconn_do_close_internal+0x2c0>)
 80075e0:	f240 3245 	movw	r2, #837	; 0x345
 80075e4:	49a0      	ldr	r1, [pc, #640]	; (8007868 <lwip_netconn_do_close_internal+0x2d0>)
 80075e6:	489e      	ldr	r0, [pc, #632]	; (8007860 <lwip_netconn_do_close_internal+0x2c8>)
 80075e8:	f00e faf4 	bl	8015bd4 <printf_>
  LWIP_ASSERT("pcb already closed", (conn->pcb.tcp != NULL));
 80075ec:	687b      	ldr	r3, [r7, #4]
 80075ee:	685b      	ldr	r3, [r3, #4]
 80075f0:	2b00      	cmp	r3, #0
 80075f2:	d106      	bne.n	8007602 <lwip_netconn_do_close_internal+0x6a>
 80075f4:	4b98      	ldr	r3, [pc, #608]	; (8007858 <lwip_netconn_do_close_internal+0x2c0>)
 80075f6:	f240 3246 	movw	r2, #838	; 0x346
 80075fa:	499c      	ldr	r1, [pc, #624]	; (800786c <lwip_netconn_do_close_internal+0x2d4>)
 80075fc:	4898      	ldr	r0, [pc, #608]	; (8007860 <lwip_netconn_do_close_internal+0x2c8>)
 80075fe:	f00e fae9 	bl	8015bd4 <printf_>
  LWIP_ASSERT("conn->current_msg != NULL", conn->current_msg != NULL);
 8007602:	687b      	ldr	r3, [r7, #4]
 8007604:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007606:	2b00      	cmp	r3, #0
 8007608:	d106      	bne.n	8007618 <lwip_netconn_do_close_internal+0x80>
 800760a:	4b93      	ldr	r3, [pc, #588]	; (8007858 <lwip_netconn_do_close_internal+0x2c0>)
 800760c:	f240 3247 	movw	r2, #839	; 0x347
 8007610:	4997      	ldr	r1, [pc, #604]	; (8007870 <lwip_netconn_do_close_internal+0x2d8>)
 8007612:	4893      	ldr	r0, [pc, #588]	; (8007860 <lwip_netconn_do_close_internal+0x2c8>)
 8007614:	f00e fade 	bl	8015bd4 <printf_>

  tpcb = conn->pcb.tcp;
 8007618:	687b      	ldr	r3, [r7, #4]
 800761a:	685b      	ldr	r3, [r3, #4]
 800761c:	61bb      	str	r3, [r7, #24]
  shut = conn->current_msg->msg.sd.shut;
 800761e:	687b      	ldr	r3, [r7, #4]
 8007620:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007622:	7a1b      	ldrb	r3, [r3, #8]
 8007624:	75fb      	strb	r3, [r7, #23]
  shut_rx = shut & NETCONN_SHUT_RD;
 8007626:	7dfb      	ldrb	r3, [r7, #23]
 8007628:	f003 0301 	and.w	r3, r3, #1
 800762c:	75bb      	strb	r3, [r7, #22]
  shut_tx = shut & NETCONN_SHUT_WR;
 800762e:	7dfb      	ldrb	r3, [r7, #23]
 8007630:	f003 0302 	and.w	r3, r3, #2
 8007634:	757b      	strb	r3, [r7, #21]
  /* shutting down both ends is the same as closing
     (also if RD or WR side was shut down before already) */
  if (shut == NETCONN_SHUT_RDWR) {
 8007636:	7dfb      	ldrb	r3, [r7, #23]
 8007638:	2b03      	cmp	r3, #3
 800763a:	d102      	bne.n	8007642 <lwip_netconn_do_close_internal+0xaa>
    close = 1;
 800763c:	2301      	movs	r3, #1
 800763e:	77bb      	strb	r3, [r7, #30]
 8007640:	e01f      	b.n	8007682 <lwip_netconn_do_close_internal+0xea>
  } else if (shut_rx &&
 8007642:	7dbb      	ldrb	r3, [r7, #22]
 8007644:	2b00      	cmp	r3, #0
 8007646:	d00e      	beq.n	8007666 <lwip_netconn_do_close_internal+0xce>
             ((tpcb->state == FIN_WAIT_1) ||
 8007648:	69bb      	ldr	r3, [r7, #24]
 800764a:	7d1b      	ldrb	r3, [r3, #20]
  } else if (shut_rx &&
 800764c:	2b05      	cmp	r3, #5
 800764e:	d007      	beq.n	8007660 <lwip_netconn_do_close_internal+0xc8>
              (tpcb->state == FIN_WAIT_2) ||
 8007650:	69bb      	ldr	r3, [r7, #24]
 8007652:	7d1b      	ldrb	r3, [r3, #20]
             ((tpcb->state == FIN_WAIT_1) ||
 8007654:	2b06      	cmp	r3, #6
 8007656:	d003      	beq.n	8007660 <lwip_netconn_do_close_internal+0xc8>
              (tpcb->state == CLOSING))) {
 8007658:	69bb      	ldr	r3, [r7, #24]
 800765a:	7d1b      	ldrb	r3, [r3, #20]
              (tpcb->state == FIN_WAIT_2) ||
 800765c:	2b08      	cmp	r3, #8
 800765e:	d102      	bne.n	8007666 <lwip_netconn_do_close_internal+0xce>
    close = 1;
 8007660:	2301      	movs	r3, #1
 8007662:	77bb      	strb	r3, [r7, #30]
 8007664:	e00d      	b.n	8007682 <lwip_netconn_do_close_internal+0xea>
  } else if (shut_tx && ((tpcb->flags & TF_RXCLOSED) != 0)) {
 8007666:	7d7b      	ldrb	r3, [r7, #21]
 8007668:	2b00      	cmp	r3, #0
 800766a:	d008      	beq.n	800767e <lwip_netconn_do_close_internal+0xe6>
 800766c:	69bb      	ldr	r3, [r7, #24]
 800766e:	7e9b      	ldrb	r3, [r3, #26]
 8007670:	f003 0310 	and.w	r3, r3, #16
 8007674:	2b00      	cmp	r3, #0
 8007676:	d002      	beq.n	800767e <lwip_netconn_do_close_internal+0xe6>
    close = 1;
 8007678:	2301      	movs	r3, #1
 800767a:	77bb      	strb	r3, [r7, #30]
 800767c:	e001      	b.n	8007682 <lwip_netconn_do_close_internal+0xea>
  } else {
    close = 0;
 800767e:	2300      	movs	r3, #0
 8007680:	77bb      	strb	r3, [r7, #30]
  }

  /* Set back some callback pointers */
  if (close) {
 8007682:	7fbb      	ldrb	r3, [r7, #30]
 8007684:	2b00      	cmp	r3, #0
 8007686:	d003      	beq.n	8007690 <lwip_netconn_do_close_internal+0xf8>
    tcp_arg(tpcb, NULL);
 8007688:	2100      	movs	r1, #0
 800768a:	69b8      	ldr	r0, [r7, #24]
 800768c:	f004 fb9a 	bl	800bdc4 <tcp_arg>
  }
  if (tpcb->state == LISTEN) {
 8007690:	69bb      	ldr	r3, [r7, #24]
 8007692:	7d1b      	ldrb	r3, [r3, #20]
 8007694:	2b01      	cmp	r3, #1
 8007696:	d104      	bne.n	80076a2 <lwip_netconn_do_close_internal+0x10a>
    tcp_accept(tpcb, NULL);
 8007698:	2100      	movs	r1, #0
 800769a:	69b8      	ldr	r0, [r7, #24]
 800769c:	f004 fc08 	bl	800beb0 <tcp_accept>
 80076a0:	e01d      	b.n	80076de <lwip_netconn_do_close_internal+0x146>
  } else {
    /* some callbacks have to be reset if tcp_close is not successful */
    if (shut_rx) {
 80076a2:	7dbb      	ldrb	r3, [r7, #22]
 80076a4:	2b00      	cmp	r3, #0
 80076a6:	d007      	beq.n	80076b8 <lwip_netconn_do_close_internal+0x120>
      tcp_recv(tpcb, NULL);
 80076a8:	2100      	movs	r1, #0
 80076aa:	69b8      	ldr	r0, [r7, #24]
 80076ac:	f004 fb9c 	bl	800bde8 <tcp_recv>
      tcp_accept(tpcb, NULL);
 80076b0:	2100      	movs	r1, #0
 80076b2:	69b8      	ldr	r0, [r7, #24]
 80076b4:	f004 fbfc 	bl	800beb0 <tcp_accept>
    }
    if (shut_tx) {
 80076b8:	7d7b      	ldrb	r3, [r7, #21]
 80076ba:	2b00      	cmp	r3, #0
 80076bc:	d003      	beq.n	80076c6 <lwip_netconn_do_close_internal+0x12e>
      tcp_sent(tpcb, NULL);
 80076be:	2100      	movs	r1, #0
 80076c0:	69b8      	ldr	r0, [r7, #24]
 80076c2:	f004 fbb3 	bl	800be2c <tcp_sent>
    }
    if (close) {
 80076c6:	7fbb      	ldrb	r3, [r7, #30]
 80076c8:	2b00      	cmp	r3, #0
 80076ca:	d008      	beq.n	80076de <lwip_netconn_do_close_internal+0x146>
      tcp_poll(tpcb, NULL, 0);
 80076cc:	2200      	movs	r2, #0
 80076ce:	2100      	movs	r1, #0
 80076d0:	69b8      	ldr	r0, [r7, #24]
 80076d2:	f004 fc05 	bl	800bee0 <tcp_poll>
      tcp_err(tpcb, NULL);
 80076d6:	2100      	movs	r1, #0
 80076d8:	69b8      	ldr	r0, [r7, #24]
 80076da:	f004 fbc7 	bl	800be6c <tcp_err>
    }
  }
  /* Try to close the connection */
  if (close) {
 80076de:	7fbb      	ldrb	r3, [r7, #30]
 80076e0:	2b00      	cmp	r3, #0
 80076e2:	d005      	beq.n	80076f0 <lwip_netconn_do_close_internal+0x158>
      }
    }
    if ((err == ERR_OK) && (tpcb != NULL))
#endif /* LWIP_SO_LINGER */
    {
      err = tcp_close(tpcb);
 80076e4:	69b8      	ldr	r0, [r7, #24]
 80076e6:	f003 fb29 	bl	800ad3c <tcp_close>
 80076ea:	4603      	mov	r3, r0
 80076ec:	77fb      	strb	r3, [r7, #31]
 80076ee:	e007      	b.n	8007700 <lwip_netconn_do_close_internal+0x168>
    }
  } else {
    err = tcp_shutdown(tpcb, shut_rx, shut_tx);
 80076f0:	7dbb      	ldrb	r3, [r7, #22]
 80076f2:	7d7a      	ldrb	r2, [r7, #21]
 80076f4:	4619      	mov	r1, r3
 80076f6:	69b8      	ldr	r0, [r7, #24]
 80076f8:	f003 fb38 	bl	800ad6c <tcp_shutdown>
 80076fc:	4603      	mov	r3, r0
 80076fe:	77fb      	strb	r3, [r7, #31]
  }
  if (err == ERR_OK) {
 8007700:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8007704:	2b00      	cmp	r3, #0
 8007706:	d102      	bne.n	800770e <lwip_netconn_do_close_internal+0x176>
    close_finished = 1;
 8007708:	2301      	movs	r3, #1
 800770a:	777b      	strb	r3, [r7, #29]
 800770c:	e016      	b.n	800773c <lwip_netconn_do_close_internal+0x1a4>
      close_finished = 0;
      err = ERR_INPROGRESS;
    }
#endif /* LWIP_SO_LINGER */
  } else {
    if (err == ERR_MEM) {
 800770e:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8007712:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007716:	d10f      	bne.n	8007738 <lwip_netconn_do_close_internal+0x1a0>
        close_timeout = conn->linger * 1000U;
      }
#endif
      if ((s32_t)(sys_now() - conn->current_msg->msg.sd.time_started) >= close_timeout) {
#else /* LWIP_SO_SNDTIMEO || LWIP_SO_LINGER */
      if (conn->current_msg->msg.sd.polls_left == 0) {
 8007718:	687b      	ldr	r3, [r7, #4]
 800771a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800771c:	7a5b      	ldrb	r3, [r3, #9]
 800771e:	2b00      	cmp	r3, #0
 8007720:	d10c      	bne.n	800773c <lwip_netconn_do_close_internal+0x1a4>
#endif /* LWIP_SO_SNDTIMEO || LWIP_SO_LINGER */
        close_finished = 1;
 8007722:	2301      	movs	r3, #1
 8007724:	777b      	strb	r3, [r7, #29]
        if (close) {
 8007726:	7fbb      	ldrb	r3, [r7, #30]
 8007728:	2b00      	cmp	r3, #0
 800772a:	d007      	beq.n	800773c <lwip_netconn_do_close_internal+0x1a4>
          /* in this case, we want to RST the connection */
          tcp_abort(tpcb);
 800772c:	69b8      	ldr	r0, [r7, #24]
 800772e:	f003 fc17 	bl	800af60 <tcp_abort>
          err = ERR_OK;
 8007732:	2300      	movs	r3, #0
 8007734:	77fb      	strb	r3, [r7, #31]
 8007736:	e001      	b.n	800773c <lwip_netconn_do_close_internal+0x1a4>
        }
      }
    } else {
      /* Closing failed for a non-memory error: give up */
      close_finished = 1;
 8007738:	2301      	movs	r3, #1
 800773a:	777b      	strb	r3, [r7, #29]
    }
  }
  if (close_finished) {
 800773c:	7f7b      	ldrb	r3, [r7, #29]
 800773e:	2b00      	cmp	r3, #0
 8007740:	d056      	beq.n	80077f0 <lwip_netconn_do_close_internal+0x258>
    /* Closing done (succeeded, non-memory error, nonblocking error or timeout) */
    sys_sem_t* op_completed_sem = LWIP_API_MSG_SEM(conn->current_msg);
 8007742:	687b      	ldr	r3, [r7, #4]
 8007744:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007746:	681b      	ldr	r3, [r3, #0]
 8007748:	330c      	adds	r3, #12
 800774a:	613b      	str	r3, [r7, #16]
    conn->current_msg->err = err;
 800774c:	687b      	ldr	r3, [r7, #4]
 800774e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007750:	7ffa      	ldrb	r2, [r7, #31]
 8007752:	711a      	strb	r2, [r3, #4]
    conn->current_msg = NULL;
 8007754:	687b      	ldr	r3, [r7, #4]
 8007756:	2200      	movs	r2, #0
 8007758:	625a      	str	r2, [r3, #36]	; 0x24
    conn->state = NETCONN_NONE;
 800775a:	687b      	ldr	r3, [r7, #4]
 800775c:	2200      	movs	r2, #0
 800775e:	705a      	strb	r2, [r3, #1]
    if (err == ERR_OK) {
 8007760:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8007764:	2b00      	cmp	r3, #0
 8007766:	d129      	bne.n	80077bc <lwip_netconn_do_close_internal+0x224>
      if (close) {
 8007768:	7fbb      	ldrb	r3, [r7, #30]
 800776a:	2b00      	cmp	r3, #0
 800776c:	d00c      	beq.n	8007788 <lwip_netconn_do_close_internal+0x1f0>
        /* Set back some callback pointers as conn is going away */
        conn->pcb.tcp = NULL;
 800776e:	687b      	ldr	r3, [r7, #4]
 8007770:	2200      	movs	r2, #0
 8007772:	605a      	str	r2, [r3, #4]
        /* Trigger select() in socket layer. Make sure everybody notices activity
         on the connection, error first! */
        API_EVENT(conn, NETCONN_EVT_ERROR, 0);
 8007774:	687b      	ldr	r3, [r7, #4]
 8007776:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007778:	2b00      	cmp	r3, #0
 800777a:	d005      	beq.n	8007788 <lwip_netconn_do_close_internal+0x1f0>
 800777c:	687b      	ldr	r3, [r7, #4]
 800777e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007780:	2200      	movs	r2, #0
 8007782:	2104      	movs	r1, #4
 8007784:	6878      	ldr	r0, [r7, #4]
 8007786:	4798      	blx	r3
      }
      if (shut_rx) {
 8007788:	7dbb      	ldrb	r3, [r7, #22]
 800778a:	2b00      	cmp	r3, #0
 800778c:	d009      	beq.n	80077a2 <lwip_netconn_do_close_internal+0x20a>
        API_EVENT(conn, NETCONN_EVT_RCVPLUS, 0);
 800778e:	687b      	ldr	r3, [r7, #4]
 8007790:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007792:	2b00      	cmp	r3, #0
 8007794:	d005      	beq.n	80077a2 <lwip_netconn_do_close_internal+0x20a>
 8007796:	687b      	ldr	r3, [r7, #4]
 8007798:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800779a:	2200      	movs	r2, #0
 800779c:	2100      	movs	r1, #0
 800779e:	6878      	ldr	r0, [r7, #4]
 80077a0:	4798      	blx	r3
      }
      if (shut_tx) {
 80077a2:	7d7b      	ldrb	r3, [r7, #21]
 80077a4:	2b00      	cmp	r3, #0
 80077a6:	d009      	beq.n	80077bc <lwip_netconn_do_close_internal+0x224>
        API_EVENT(conn, NETCONN_EVT_SENDPLUS, 0);
 80077a8:	687b      	ldr	r3, [r7, #4]
 80077aa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80077ac:	2b00      	cmp	r3, #0
 80077ae:	d005      	beq.n	80077bc <lwip_netconn_do_close_internal+0x224>
 80077b0:	687b      	ldr	r3, [r7, #4]
 80077b2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80077b4:	2200      	movs	r2, #0
 80077b6:	2102      	movs	r1, #2
 80077b8:	6878      	ldr	r0, [r7, #4]
 80077ba:	4798      	blx	r3
      }
    }
    NETCONN_SET_SAFE_ERR(conn, err);
 80077bc:	687b      	ldr	r3, [r7, #4]
 80077be:	2b00      	cmp	r3, #0
 80077c0:	d00e      	beq.n	80077e0 <lwip_netconn_do_close_internal+0x248>
 80077c2:	f00b fc69 	bl	8013098 <sys_arch_protect>
 80077c6:	60f8      	str	r0, [r7, #12]
 80077c8:	687b      	ldr	r3, [r7, #4]
 80077ca:	f993 3008 	ldrsb.w	r3, [r3, #8]
 80077ce:	f113 0f0c 	cmn.w	r3, #12
 80077d2:	db02      	blt.n	80077da <lwip_netconn_do_close_internal+0x242>
 80077d4:	687b      	ldr	r3, [r7, #4]
 80077d6:	7ffa      	ldrb	r2, [r7, #31]
 80077d8:	721a      	strb	r2, [r3, #8]
 80077da:	68f8      	ldr	r0, [r7, #12]
 80077dc:	f00b fc6a 	bl	80130b4 <sys_arch_unprotect>
#if LWIP_TCPIP_CORE_LOCKING
    if (delayed)
 80077e0:	78fb      	ldrb	r3, [r7, #3]
 80077e2:	2b00      	cmp	r3, #0
 80077e4:	d002      	beq.n	80077ec <lwip_netconn_do_close_internal+0x254>
#endif
    {
      /* wake up the application task */
      sys_sem_signal(op_completed_sem);
 80077e6:	6938      	ldr	r0, [r7, #16]
 80077e8:	f00b fbbb 	bl	8012f62 <sys_sem_signal>
    }
    return ERR_OK;
 80077ec:	2300      	movs	r3, #0
 80077ee:	e02e      	b.n	800784e <lwip_netconn_do_close_internal+0x2b6>
  }
  if (!close_finished) {
 80077f0:	7f7b      	ldrb	r3, [r7, #29]
 80077f2:	2b00      	cmp	r3, #0
 80077f4:	d11e      	bne.n	8007834 <lwip_netconn_do_close_internal+0x29c>
    /* Closing failed and we want to wait: restore some of the callbacks */
    /* Closing of listen pcb will never fail! */
    LWIP_ASSERT("Closing a listen pcb may not fail!", (tpcb->state != LISTEN));
 80077f6:	69bb      	ldr	r3, [r7, #24]
 80077f8:	7d1b      	ldrb	r3, [r3, #20]
 80077fa:	2b01      	cmp	r3, #1
 80077fc:	d106      	bne.n	800780c <lwip_netconn_do_close_internal+0x274>
 80077fe:	4b16      	ldr	r3, [pc, #88]	; (8007858 <lwip_netconn_do_close_internal+0x2c0>)
 8007800:	f240 32e3 	movw	r2, #995	; 0x3e3
 8007804:	491b      	ldr	r1, [pc, #108]	; (8007874 <lwip_netconn_do_close_internal+0x2dc>)
 8007806:	4816      	ldr	r0, [pc, #88]	; (8007860 <lwip_netconn_do_close_internal+0x2c8>)
 8007808:	f00e f9e4 	bl	8015bd4 <printf_>
    if (shut_tx) {
 800780c:	7d7b      	ldrb	r3, [r7, #21]
 800780e:	2b00      	cmp	r3, #0
 8007810:	d003      	beq.n	800781a <lwip_netconn_do_close_internal+0x282>
      tcp_sent(tpcb, sent_tcp);
 8007812:	4919      	ldr	r1, [pc, #100]	; (8007878 <lwip_netconn_do_close_internal+0x2e0>)
 8007814:	69b8      	ldr	r0, [r7, #24]
 8007816:	f004 fb09 	bl	800be2c <tcp_sent>
    }
    /* when waiting for close, set up poll interval to 500ms */
    tcp_poll(tpcb, poll_tcp, 1);
 800781a:	2201      	movs	r2, #1
 800781c:	4917      	ldr	r1, [pc, #92]	; (800787c <lwip_netconn_do_close_internal+0x2e4>)
 800781e:	69b8      	ldr	r0, [r7, #24]
 8007820:	f004 fb5e 	bl	800bee0 <tcp_poll>
    tcp_err(tpcb, err_tcp);
 8007824:	4916      	ldr	r1, [pc, #88]	; (8007880 <lwip_netconn_do_close_internal+0x2e8>)
 8007826:	69b8      	ldr	r0, [r7, #24]
 8007828:	f004 fb20 	bl	800be6c <tcp_err>
    tcp_arg(tpcb, conn);
 800782c:	6879      	ldr	r1, [r7, #4]
 800782e:	69b8      	ldr	r0, [r7, #24]
 8007830:	f004 fac8 	bl	800bdc4 <tcp_arg>
    /* don't restore recv callback: we don't want to receive any more data */
  }
  /* If closing didn't succeed, we get called again either
     from poll_tcp or from sent_tcp */
  LWIP_ASSERT("err != ERR_OK", err != ERR_OK);
 8007834:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8007838:	2b00      	cmp	r3, #0
 800783a:	d106      	bne.n	800784a <lwip_netconn_do_close_internal+0x2b2>
 800783c:	4b06      	ldr	r3, [pc, #24]	; (8007858 <lwip_netconn_do_close_internal+0x2c0>)
 800783e:	f240 32ef 	movw	r2, #1007	; 0x3ef
 8007842:	4910      	ldr	r1, [pc, #64]	; (8007884 <lwip_netconn_do_close_internal+0x2ec>)
 8007844:	4806      	ldr	r0, [pc, #24]	; (8007860 <lwip_netconn_do_close_internal+0x2c8>)
 8007846:	f00e f9c5 	bl	8015bd4 <printf_>
  return err;
 800784a:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 800784e:	4618      	mov	r0, r3
 8007850:	3720      	adds	r7, #32
 8007852:	46bd      	mov	sp, r7
 8007854:	bd80      	pop	{r7, pc}
 8007856:	bf00      	nop
 8007858:	080198a4 	.word	0x080198a4
 800785c:	08019b1c 	.word	0x08019b1c
 8007860:	080198fc 	.word	0x080198fc
 8007864:	08019b2c 	.word	0x08019b2c
 8007868:	08019b4c 	.word	0x08019b4c
 800786c:	08019b70 	.word	0x08019b70
 8007870:	080199d8 	.word	0x080199d8
 8007874:	08019b84 	.word	0x08019b84
 8007878:	08006f1d 	.word	0x08006f1d
 800787c:	08006e51 	.word	0x08006e51
 8007880:	08006fc9 	.word	0x08006fc9
 8007884:	08019ba8 	.word	0x08019ba8

08007888 <lwip_netconn_do_delconn>:
 *
 * @param m the api_msg_msg pointing to the connection
 */
void
lwip_netconn_do_delconn(void *m)
{
 8007888:	b580      	push	{r7, lr}
 800788a:	b086      	sub	sp, #24
 800788c:	af00      	add	r7, sp, #0
 800788e:	6078      	str	r0, [r7, #4]
  struct api_msg *msg = (struct api_msg*)m;
 8007890:	687b      	ldr	r3, [r7, #4]
 8007892:	617b      	str	r3, [r7, #20]

  enum netconn_state state = msg->conn->state;
 8007894:	697b      	ldr	r3, [r7, #20]
 8007896:	681b      	ldr	r3, [r3, #0]
 8007898:	785b      	ldrb	r3, [r3, #1]
 800789a:	74fb      	strb	r3, [r7, #19]
  LWIP_ASSERT("netconn state error", /* this only happens for TCP netconns */
 800789c:	7cfb      	ldrb	r3, [r7, #19]
 800789e:	2b00      	cmp	r3, #0
 80078a0:	d00d      	beq.n	80078be <lwip_netconn_do_delconn+0x36>
 80078a2:	697b      	ldr	r3, [r7, #20]
 80078a4:	681b      	ldr	r3, [r3, #0]
 80078a6:	781b      	ldrb	r3, [r3, #0]
 80078a8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80078ac:	2b10      	cmp	r3, #16
 80078ae:	d006      	beq.n	80078be <lwip_netconn_do_delconn+0x36>
 80078b0:	4b6f      	ldr	r3, [pc, #444]	; (8007a70 <lwip_netconn_do_delconn+0x1e8>)
 80078b2:	f240 4201 	movw	r2, #1025	; 0x401
 80078b6:	496f      	ldr	r1, [pc, #444]	; (8007a74 <lwip_netconn_do_delconn+0x1ec>)
 80078b8:	486f      	ldr	r0, [pc, #444]	; (8007a78 <lwip_netconn_do_delconn+0x1f0>)
 80078ba:	f00e f98b 	bl	8015bd4 <printf_>
      NETCONN_SET_SAFE_ERR(msg->conn, ERR_CLSD);
      sys_sem_signal(op_completed_sem);
    }
  }
#else /* LWIP_NETCONN_FULLDUPLEX */
  if (((state != NETCONN_NONE) &&
 80078be:	7cfb      	ldrb	r3, [r7, #19]
 80078c0:	2b00      	cmp	r3, #0
 80078c2:	d005      	beq.n	80078d0 <lwip_netconn_do_delconn+0x48>
 80078c4:	7cfb      	ldrb	r3, [r7, #19]
 80078c6:	2b02      	cmp	r3, #2
 80078c8:	d002      	beq.n	80078d0 <lwip_netconn_do_delconn+0x48>
       (state != NETCONN_LISTEN) &&
 80078ca:	7cfb      	ldrb	r3, [r7, #19]
 80078cc:	2b03      	cmp	r3, #3
 80078ce:	d109      	bne.n	80078e4 <lwip_netconn_do_delconn+0x5c>
       (state != NETCONN_CONNECT)) ||
 80078d0:	7cfb      	ldrb	r3, [r7, #19]
 80078d2:	2b03      	cmp	r3, #3
 80078d4:	d10a      	bne.n	80078ec <lwip_netconn_do_delconn+0x64>
      ((state == NETCONN_CONNECT) && !IN_NONBLOCKING_CONNECT(msg->conn))) {
 80078d6:	697b      	ldr	r3, [r7, #20]
 80078d8:	681b      	ldr	r3, [r3, #0]
 80078da:	7f1b      	ldrb	r3, [r3, #28]
 80078dc:	f003 0304 	and.w	r3, r3, #4
 80078e0:	2b00      	cmp	r3, #0
 80078e2:	d103      	bne.n	80078ec <lwip_netconn_do_delconn+0x64>
    /* This means either a blocking write or blocking connect is running
       (nonblocking write returns and sets state to NONE) */
    msg->err = ERR_INPROGRESS;
 80078e4:	697b      	ldr	r3, [r7, #20]
 80078e6:	22fb      	movs	r2, #251	; 0xfb
 80078e8:	711a      	strb	r2, [r3, #4]
 80078ea:	e09c      	b.n	8007a26 <lwip_netconn_do_delconn+0x19e>
  } else
#endif /* LWIP_NETCONN_FULLDUPLEX */
  {
    LWIP_ASSERT("blocking connect in progress",
 80078ec:	7cfb      	ldrb	r3, [r7, #19]
 80078ee:	2b03      	cmp	r3, #3
 80078f0:	d10d      	bne.n	800790e <lwip_netconn_do_delconn+0x86>
 80078f2:	697b      	ldr	r3, [r7, #20]
 80078f4:	681b      	ldr	r3, [r3, #0]
 80078f6:	7f1b      	ldrb	r3, [r3, #28]
 80078f8:	f003 0304 	and.w	r3, r3, #4
 80078fc:	2b00      	cmp	r3, #0
 80078fe:	d106      	bne.n	800790e <lwip_netconn_do_delconn+0x86>
 8007900:	4b5b      	ldr	r3, [pc, #364]	; (8007a70 <lwip_netconn_do_delconn+0x1e8>)
 8007902:	f240 421f 	movw	r2, #1055	; 0x41f
 8007906:	495d      	ldr	r1, [pc, #372]	; (8007a7c <lwip_netconn_do_delconn+0x1f4>)
 8007908:	485b      	ldr	r0, [pc, #364]	; (8007a78 <lwip_netconn_do_delconn+0x1f0>)
 800790a:	f00e f963 	bl	8015bd4 <printf_>
      (state != NETCONN_CONNECT) || IN_NONBLOCKING_CONNECT(msg->conn));
    msg->err = ERR_OK;
 800790e:	697b      	ldr	r3, [r7, #20]
 8007910:	2200      	movs	r2, #0
 8007912:	711a      	strb	r2, [r3, #4]
    /* Drain and delete mboxes */
    netconn_drain(msg->conn);
 8007914:	697b      	ldr	r3, [r7, #20]
 8007916:	681b      	ldr	r3, [r3, #0]
 8007918:	4618      	mov	r0, r3
 800791a:	f7ff fdbd 	bl	8007498 <netconn_drain>

    if (msg->conn->pcb.tcp != NULL) {
 800791e:	697b      	ldr	r3, [r7, #20]
 8007920:	681b      	ldr	r3, [r3, #0]
 8007922:	685b      	ldr	r3, [r3, #4]
 8007924:	2b00      	cmp	r3, #0
 8007926:	d064      	beq.n	80079f2 <lwip_netconn_do_delconn+0x16a>

      switch (NETCONNTYPE_GROUP(msg->conn->type)) {
 8007928:	697b      	ldr	r3, [r7, #20]
 800792a:	681b      	ldr	r3, [r3, #0]
 800792c:	781b      	ldrb	r3, [r3, #0]
 800792e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8007932:	2b10      	cmp	r3, #16
 8007934:	d00e      	beq.n	8007954 <lwip_netconn_do_delconn+0xcc>
 8007936:	2b20      	cmp	r3, #32
 8007938:	d000      	beq.n	800793c <lwip_netconn_do_delconn+0xb4>
        /* API_EVENT is called inside lwip_netconn_do_close_internal, before releasing
           the application thread, so we can return at this point! */
        return;
#endif /* LWIP_TCP */
      default:
        break;
 800793a:	e056      	b.n	80079ea <lwip_netconn_do_delconn+0x162>
        msg->conn->pcb.udp->recv_arg = NULL;
 800793c:	697b      	ldr	r3, [r7, #20]
 800793e:	681b      	ldr	r3, [r3, #0]
 8007940:	685b      	ldr	r3, [r3, #4]
 8007942:	2200      	movs	r2, #0
 8007944:	61da      	str	r2, [r3, #28]
        udp_remove(msg->conn->pcb.udp);
 8007946:	697b      	ldr	r3, [r7, #20]
 8007948:	681b      	ldr	r3, [r3, #0]
 800794a:	685b      	ldr	r3, [r3, #4]
 800794c:	4618      	mov	r0, r3
 800794e:	f008 ff15 	bl	801077c <udp_remove>
        break;
 8007952:	e04a      	b.n	80079ea <lwip_netconn_do_delconn+0x162>
        LWIP_ASSERT("already writing or closing", msg->conn->current_msg == NULL &&
 8007954:	697b      	ldr	r3, [r7, #20]
 8007956:	681b      	ldr	r3, [r3, #0]
 8007958:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800795a:	2b00      	cmp	r3, #0
 800795c:	d104      	bne.n	8007968 <lwip_netconn_do_delconn+0xe0>
 800795e:	697b      	ldr	r3, [r7, #20]
 8007960:	681b      	ldr	r3, [r3, #0]
 8007962:	6a1b      	ldr	r3, [r3, #32]
 8007964:	2b00      	cmp	r3, #0
 8007966:	d006      	beq.n	8007976 <lwip_netconn_do_delconn+0xee>
 8007968:	4b41      	ldr	r3, [pc, #260]	; (8007a70 <lwip_netconn_do_delconn+0x1e8>)
 800796a:	f240 4235 	movw	r2, #1077	; 0x435
 800796e:	4944      	ldr	r1, [pc, #272]	; (8007a80 <lwip_netconn_do_delconn+0x1f8>)
 8007970:	4841      	ldr	r0, [pc, #260]	; (8007a78 <lwip_netconn_do_delconn+0x1f0>)
 8007972:	f00e f92f 	bl	8015bd4 <printf_>
        msg->conn->state = NETCONN_CLOSE;
 8007976:	697b      	ldr	r3, [r7, #20]
 8007978:	681b      	ldr	r3, [r3, #0]
 800797a:	2204      	movs	r2, #4
 800797c:	705a      	strb	r2, [r3, #1]
        msg->msg.sd.shut = NETCONN_SHUT_RDWR;
 800797e:	697b      	ldr	r3, [r7, #20]
 8007980:	2203      	movs	r2, #3
 8007982:	721a      	strb	r2, [r3, #8]
        msg->conn->current_msg = msg;
 8007984:	697b      	ldr	r3, [r7, #20]
 8007986:	681b      	ldr	r3, [r3, #0]
 8007988:	697a      	ldr	r2, [r7, #20]
 800798a:	625a      	str	r2, [r3, #36]	; 0x24
        if (lwip_netconn_do_close_internal(msg->conn, 0) != ERR_OK) {
 800798c:	697b      	ldr	r3, [r7, #20]
 800798e:	681b      	ldr	r3, [r3, #0]
 8007990:	2100      	movs	r1, #0
 8007992:	4618      	mov	r0, r3
 8007994:	f7ff fe00 	bl	8007598 <lwip_netconn_do_close_internal>
 8007998:	4603      	mov	r3, r0
 800799a:	2b00      	cmp	r3, #0
 800799c:	d064      	beq.n	8007a68 <lwip_netconn_do_delconn+0x1e0>
          LWIP_ASSERT("state!", msg->conn->state == NETCONN_CLOSE);
 800799e:	697b      	ldr	r3, [r7, #20]
 80079a0:	681b      	ldr	r3, [r3, #0]
 80079a2:	785b      	ldrb	r3, [r3, #1]
 80079a4:	2b04      	cmp	r3, #4
 80079a6:	d006      	beq.n	80079b6 <lwip_netconn_do_delconn+0x12e>
 80079a8:	4b31      	ldr	r3, [pc, #196]	; (8007a70 <lwip_netconn_do_delconn+0x1e8>)
 80079aa:	f240 423b 	movw	r2, #1083	; 0x43b
 80079ae:	4935      	ldr	r1, [pc, #212]	; (8007a84 <lwip_netconn_do_delconn+0x1fc>)
 80079b0:	4831      	ldr	r0, [pc, #196]	; (8007a78 <lwip_netconn_do_delconn+0x1f0>)
 80079b2:	f00e f90f 	bl	8015bd4 <printf_>
          UNLOCK_TCPIP_CORE();
 80079b6:	4834      	ldr	r0, [pc, #208]	; (8007a88 <lwip_netconn_do_delconn+0x200>)
 80079b8:	f00b fb43 	bl	8013042 <sys_mutex_unlock>
          sys_arch_sem_wait(LWIP_API_MSG_SEM(msg), 0);
 80079bc:	697b      	ldr	r3, [r7, #20]
 80079be:	681b      	ldr	r3, [r3, #0]
 80079c0:	330c      	adds	r3, #12
 80079c2:	2100      	movs	r1, #0
 80079c4:	4618      	mov	r0, r3
 80079c6:	f00b fa9b 	bl	8012f00 <sys_arch_sem_wait>
          LOCK_TCPIP_CORE();
 80079ca:	482f      	ldr	r0, [pc, #188]	; (8007a88 <lwip_netconn_do_delconn+0x200>)
 80079cc:	f00b fb2a 	bl	8013024 <sys_mutex_lock>
          LWIP_ASSERT("state!", msg->conn->state == NETCONN_NONE);
 80079d0:	697b      	ldr	r3, [r7, #20]
 80079d2:	681b      	ldr	r3, [r3, #0]
 80079d4:	785b      	ldrb	r3, [r3, #1]
 80079d6:	2b00      	cmp	r3, #0
 80079d8:	d046      	beq.n	8007a68 <lwip_netconn_do_delconn+0x1e0>
 80079da:	4b25      	ldr	r3, [pc, #148]	; (8007a70 <lwip_netconn_do_delconn+0x1e8>)
 80079dc:	f240 423f 	movw	r2, #1087	; 0x43f
 80079e0:	4928      	ldr	r1, [pc, #160]	; (8007a84 <lwip_netconn_do_delconn+0x1fc>)
 80079e2:	4825      	ldr	r0, [pc, #148]	; (8007a78 <lwip_netconn_do_delconn+0x1f0>)
 80079e4:	f00e f8f6 	bl	8015bd4 <printf_>
        return;
 80079e8:	e03e      	b.n	8007a68 <lwip_netconn_do_delconn+0x1e0>
      }
      msg->conn->pcb.tcp = NULL;
 80079ea:	697b      	ldr	r3, [r7, #20]
 80079ec:	681b      	ldr	r3, [r3, #0]
 80079ee:	2200      	movs	r2, #0
 80079f0:	605a      	str	r2, [r3, #4]
    }
    /* tcp netconns don't come here! */

    /* @todo: this lets select make the socket readable and writable,
       which is wrong! errfd instead? */
    API_EVENT(msg->conn, NETCONN_EVT_RCVPLUS, 0);
 80079f2:	697b      	ldr	r3, [r7, #20]
 80079f4:	681b      	ldr	r3, [r3, #0]
 80079f6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80079f8:	2b00      	cmp	r3, #0
 80079fa:	d007      	beq.n	8007a0c <lwip_netconn_do_delconn+0x184>
 80079fc:	697b      	ldr	r3, [r7, #20]
 80079fe:	681b      	ldr	r3, [r3, #0]
 8007a00:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007a02:	697a      	ldr	r2, [r7, #20]
 8007a04:	6810      	ldr	r0, [r2, #0]
 8007a06:	2200      	movs	r2, #0
 8007a08:	2100      	movs	r1, #0
 8007a0a:	4798      	blx	r3
    API_EVENT(msg->conn, NETCONN_EVT_SENDPLUS, 0);
 8007a0c:	697b      	ldr	r3, [r7, #20]
 8007a0e:	681b      	ldr	r3, [r3, #0]
 8007a10:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007a12:	2b00      	cmp	r3, #0
 8007a14:	d007      	beq.n	8007a26 <lwip_netconn_do_delconn+0x19e>
 8007a16:	697b      	ldr	r3, [r7, #20]
 8007a18:	681b      	ldr	r3, [r3, #0]
 8007a1a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007a1c:	697a      	ldr	r2, [r7, #20]
 8007a1e:	6810      	ldr	r0, [r2, #0]
 8007a20:	2200      	movs	r2, #0
 8007a22:	2102      	movs	r1, #2
 8007a24:	4798      	blx	r3
  }
  if (sys_sem_valid(LWIP_API_MSG_SEM(msg))) {
 8007a26:	697b      	ldr	r3, [r7, #20]
 8007a28:	681b      	ldr	r3, [r3, #0]
 8007a2a:	330c      	adds	r3, #12
 8007a2c:	4618      	mov	r0, r3
 8007a2e:	f00b fab2 	bl	8012f96 <sys_sem_valid>
 8007a32:	4603      	mov	r3, r0
 8007a34:	2b00      	cmp	r3, #0
 8007a36:	d018      	beq.n	8007a6a <lwip_netconn_do_delconn+0x1e2>
    TCPIP_APIMSG_ACK(msg);
 8007a38:	697b      	ldr	r3, [r7, #20]
 8007a3a:	681b      	ldr	r3, [r3, #0]
 8007a3c:	2b00      	cmp	r3, #0
 8007a3e:	d014      	beq.n	8007a6a <lwip_netconn_do_delconn+0x1e2>
 8007a40:	f00b fb2a 	bl	8013098 <sys_arch_protect>
 8007a44:	60f8      	str	r0, [r7, #12]
 8007a46:	697b      	ldr	r3, [r7, #20]
 8007a48:	681b      	ldr	r3, [r3, #0]
 8007a4a:	f993 3008 	ldrsb.w	r3, [r3, #8]
 8007a4e:	f113 0f0c 	cmn.w	r3, #12
 8007a52:	db05      	blt.n	8007a60 <lwip_netconn_do_delconn+0x1d8>
 8007a54:	697b      	ldr	r3, [r7, #20]
 8007a56:	681b      	ldr	r3, [r3, #0]
 8007a58:	697a      	ldr	r2, [r7, #20]
 8007a5a:	f992 2004 	ldrsb.w	r2, [r2, #4]
 8007a5e:	721a      	strb	r2, [r3, #8]
 8007a60:	68f8      	ldr	r0, [r7, #12]
 8007a62:	f00b fb27 	bl	80130b4 <sys_arch_unprotect>
 8007a66:	e000      	b.n	8007a6a <lwip_netconn_do_delconn+0x1e2>
        return;
 8007a68:	bf00      	nop
  }
}
 8007a6a:	3718      	adds	r7, #24
 8007a6c:	46bd      	mov	sp, r7
 8007a6e:	bd80      	pop	{r7, pc}
 8007a70:	080198a4 	.word	0x080198a4
 8007a74:	08019bb8 	.word	0x08019bb8
 8007a78:	080198fc 	.word	0x080198fc
 8007a7c:	08019bcc 	.word	0x08019bcc
 8007a80:	08019bec 	.word	0x08019bec
 8007a84:	08019c08 	.word	0x08019c08
 8007a88:	240087a8 	.word	0x240087a8

08007a8c <lwip_netconn_do_connected>:
 *
 * @see tcp.h (struct tcp_pcb.connected) for parameters and return values
 */
static err_t
lwip_netconn_do_connected(void *arg, struct tcp_pcb *pcb, err_t err)
{
 8007a8c:	b580      	push	{r7, lr}
 8007a8e:	b088      	sub	sp, #32
 8007a90:	af00      	add	r7, sp, #0
 8007a92:	60f8      	str	r0, [r7, #12]
 8007a94:	60b9      	str	r1, [r7, #8]
 8007a96:	4613      	mov	r3, r2
 8007a98:	71fb      	strb	r3, [r7, #7]
  struct netconn *conn;
  int was_blocking;
  sys_sem_t* op_completed_sem = NULL;
 8007a9a:	2300      	movs	r3, #0
 8007a9c:	61fb      	str	r3, [r7, #28]

  LWIP_UNUSED_ARG(pcb);

  conn = (struct netconn *)arg;
 8007a9e:	68fb      	ldr	r3, [r7, #12]
 8007aa0:	61bb      	str	r3, [r7, #24]

  if (conn == NULL) {
 8007aa2:	69bb      	ldr	r3, [r7, #24]
 8007aa4:	2b00      	cmp	r3, #0
 8007aa6:	d102      	bne.n	8007aae <lwip_netconn_do_connected+0x22>
    return ERR_VAL;
 8007aa8:	f06f 0305 	mvn.w	r3, #5
 8007aac:	e082      	b.n	8007bb4 <lwip_netconn_do_connected+0x128>
  }

  LWIP_ASSERT("conn->state == NETCONN_CONNECT", conn->state == NETCONN_CONNECT);
 8007aae:	69bb      	ldr	r3, [r7, #24]
 8007ab0:	785b      	ldrb	r3, [r3, #1]
 8007ab2:	2b03      	cmp	r3, #3
 8007ab4:	d006      	beq.n	8007ac4 <lwip_netconn_do_connected+0x38>
 8007ab6:	4b41      	ldr	r3, [pc, #260]	; (8007bbc <lwip_netconn_do_connected+0x130>)
 8007ab8:	f44f 6293 	mov.w	r2, #1176	; 0x498
 8007abc:	4940      	ldr	r1, [pc, #256]	; (8007bc0 <lwip_netconn_do_connected+0x134>)
 8007abe:	4841      	ldr	r0, [pc, #260]	; (8007bc4 <lwip_netconn_do_connected+0x138>)
 8007ac0:	f00e f888 	bl	8015bd4 <printf_>
  LWIP_ASSERT("(conn->current_msg != NULL) || conn->in_non_blocking_connect",
 8007ac4:	69bb      	ldr	r3, [r7, #24]
 8007ac6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007ac8:	2b00      	cmp	r3, #0
 8007aca:	d10c      	bne.n	8007ae6 <lwip_netconn_do_connected+0x5a>
 8007acc:	69bb      	ldr	r3, [r7, #24]
 8007ace:	7f1b      	ldrb	r3, [r3, #28]
 8007ad0:	f003 0304 	and.w	r3, r3, #4
 8007ad4:	2b00      	cmp	r3, #0
 8007ad6:	d106      	bne.n	8007ae6 <lwip_netconn_do_connected+0x5a>
 8007ad8:	4b38      	ldr	r3, [pc, #224]	; (8007bbc <lwip_netconn_do_connected+0x130>)
 8007ada:	f240 429a 	movw	r2, #1178	; 0x49a
 8007ade:	493a      	ldr	r1, [pc, #232]	; (8007bc8 <lwip_netconn_do_connected+0x13c>)
 8007ae0:	4838      	ldr	r0, [pc, #224]	; (8007bc4 <lwip_netconn_do_connected+0x138>)
 8007ae2:	f00e f877 	bl	8015bd4 <printf_>
    (conn->current_msg != NULL) || IN_NONBLOCKING_CONNECT(conn));

  if (conn->current_msg != NULL) {
 8007ae6:	69bb      	ldr	r3, [r7, #24]
 8007ae8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007aea:	2b00      	cmp	r3, #0
 8007aec:	d008      	beq.n	8007b00 <lwip_netconn_do_connected+0x74>
    conn->current_msg->err = err;
 8007aee:	69bb      	ldr	r3, [r7, #24]
 8007af0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007af2:	79fa      	ldrb	r2, [r7, #7]
 8007af4:	711a      	strb	r2, [r3, #4]
    op_completed_sem = LWIP_API_MSG_SEM(conn->current_msg);
 8007af6:	69bb      	ldr	r3, [r7, #24]
 8007af8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007afa:	681b      	ldr	r3, [r3, #0]
 8007afc:	330c      	adds	r3, #12
 8007afe:	61fb      	str	r3, [r7, #28]
  }
  if ((NETCONNTYPE_GROUP(conn->type) == NETCONN_TCP) && (err == ERR_OK)) {
 8007b00:	69bb      	ldr	r3, [r7, #24]
 8007b02:	781b      	ldrb	r3, [r3, #0]
 8007b04:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8007b08:	2b10      	cmp	r3, #16
 8007b0a:	d106      	bne.n	8007b1a <lwip_netconn_do_connected+0x8e>
 8007b0c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007b10:	2b00      	cmp	r3, #0
 8007b12:	d102      	bne.n	8007b1a <lwip_netconn_do_connected+0x8e>
    setup_tcp(conn);
 8007b14:	69b8      	ldr	r0, [r7, #24]
 8007b16:	f7ff fb47 	bl	80071a8 <setup_tcp>
  }
  was_blocking = !IN_NONBLOCKING_CONNECT(conn);
 8007b1a:	69bb      	ldr	r3, [r7, #24]
 8007b1c:	7f1b      	ldrb	r3, [r3, #28]
 8007b1e:	f003 0304 	and.w	r3, r3, #4
 8007b22:	2b00      	cmp	r3, #0
 8007b24:	bf0c      	ite	eq
 8007b26:	2301      	moveq	r3, #1
 8007b28:	2300      	movne	r3, #0
 8007b2a:	b2db      	uxtb	r3, r3
 8007b2c:	617b      	str	r3, [r7, #20]
  SET_NONBLOCKING_CONNECT(conn, 0);
 8007b2e:	69bb      	ldr	r3, [r7, #24]
 8007b30:	7f1b      	ldrb	r3, [r3, #28]
 8007b32:	f023 0304 	bic.w	r3, r3, #4
 8007b36:	b2da      	uxtb	r2, r3
 8007b38:	69bb      	ldr	r3, [r7, #24]
 8007b3a:	771a      	strb	r2, [r3, #28]
  LWIP_ASSERT("blocking connect state error",
 8007b3c:	697b      	ldr	r3, [r7, #20]
 8007b3e:	2b00      	cmp	r3, #0
 8007b40:	d002      	beq.n	8007b48 <lwip_netconn_do_connected+0xbc>
 8007b42:	69fb      	ldr	r3, [r7, #28]
 8007b44:	2b00      	cmp	r3, #0
 8007b46:	d10c      	bne.n	8007b62 <lwip_netconn_do_connected+0xd6>
 8007b48:	697b      	ldr	r3, [r7, #20]
 8007b4a:	2b00      	cmp	r3, #0
 8007b4c:	d102      	bne.n	8007b54 <lwip_netconn_do_connected+0xc8>
 8007b4e:	69fb      	ldr	r3, [r7, #28]
 8007b50:	2b00      	cmp	r3, #0
 8007b52:	d006      	beq.n	8007b62 <lwip_netconn_do_connected+0xd6>
 8007b54:	4b19      	ldr	r3, [pc, #100]	; (8007bbc <lwip_netconn_do_connected+0x130>)
 8007b56:	f240 42a7 	movw	r2, #1191	; 0x4a7
 8007b5a:	491c      	ldr	r1, [pc, #112]	; (8007bcc <lwip_netconn_do_connected+0x140>)
 8007b5c:	4819      	ldr	r0, [pc, #100]	; (8007bc4 <lwip_netconn_do_connected+0x138>)
 8007b5e:	f00e f839 	bl	8015bd4 <printf_>
    (was_blocking && op_completed_sem != NULL) ||
    (!was_blocking && op_completed_sem == NULL));
  conn->current_msg = NULL;
 8007b62:	69bb      	ldr	r3, [r7, #24]
 8007b64:	2200      	movs	r2, #0
 8007b66:	625a      	str	r2, [r3, #36]	; 0x24
  conn->state = NETCONN_NONE;
 8007b68:	69bb      	ldr	r3, [r7, #24]
 8007b6a:	2200      	movs	r2, #0
 8007b6c:	705a      	strb	r2, [r3, #1]
  NETCONN_SET_SAFE_ERR(conn, ERR_OK);
 8007b6e:	69bb      	ldr	r3, [r7, #24]
 8007b70:	2b00      	cmp	r3, #0
 8007b72:	d00e      	beq.n	8007b92 <lwip_netconn_do_connected+0x106>
 8007b74:	f00b fa90 	bl	8013098 <sys_arch_protect>
 8007b78:	6138      	str	r0, [r7, #16]
 8007b7a:	69bb      	ldr	r3, [r7, #24]
 8007b7c:	f993 3008 	ldrsb.w	r3, [r3, #8]
 8007b80:	f113 0f0c 	cmn.w	r3, #12
 8007b84:	db02      	blt.n	8007b8c <lwip_netconn_do_connected+0x100>
 8007b86:	69bb      	ldr	r3, [r7, #24]
 8007b88:	2200      	movs	r2, #0
 8007b8a:	721a      	strb	r2, [r3, #8]
 8007b8c:	6938      	ldr	r0, [r7, #16]
 8007b8e:	f00b fa91 	bl	80130b4 <sys_arch_unprotect>
  API_EVENT(conn, NETCONN_EVT_SENDPLUS, 0);
 8007b92:	69bb      	ldr	r3, [r7, #24]
 8007b94:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007b96:	2b00      	cmp	r3, #0
 8007b98:	d005      	beq.n	8007ba6 <lwip_netconn_do_connected+0x11a>
 8007b9a:	69bb      	ldr	r3, [r7, #24]
 8007b9c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007b9e:	2200      	movs	r2, #0
 8007ba0:	2102      	movs	r1, #2
 8007ba2:	69b8      	ldr	r0, [r7, #24]
 8007ba4:	4798      	blx	r3

  if (was_blocking) {
 8007ba6:	697b      	ldr	r3, [r7, #20]
 8007ba8:	2b00      	cmp	r3, #0
 8007baa:	d002      	beq.n	8007bb2 <lwip_netconn_do_connected+0x126>
    sys_sem_signal(op_completed_sem);
 8007bac:	69f8      	ldr	r0, [r7, #28]
 8007bae:	f00b f9d8 	bl	8012f62 <sys_sem_signal>
  }
  return ERR_OK;
 8007bb2:	2300      	movs	r3, #0
}
 8007bb4:	4618      	mov	r0, r3
 8007bb6:	3720      	adds	r7, #32
 8007bb8:	46bd      	mov	sp, r7
 8007bba:	bd80      	pop	{r7, pc}
 8007bbc:	080198a4 	.word	0x080198a4
 8007bc0:	08019c10 	.word	0x08019c10
 8007bc4:	080198fc 	.word	0x080198fc
 8007bc8:	08019c30 	.word	0x08019c30
 8007bcc:	08019c70 	.word	0x08019c70

08007bd0 <lwip_netconn_do_connect>:
 * @param m the api_msg_msg pointing to the connection and containing
 *          the IP address and port to connect to
 */
void
lwip_netconn_do_connect(void *m)
{
 8007bd0:	b580      	push	{r7, lr}
 8007bd2:	b086      	sub	sp, #24
 8007bd4:	af00      	add	r7, sp, #0
 8007bd6:	6078      	str	r0, [r7, #4]
  struct api_msg *msg = (struct api_msg*)m;
 8007bd8:	687b      	ldr	r3, [r7, #4]
 8007bda:	617b      	str	r3, [r7, #20]

  if (msg->conn->pcb.tcp == NULL) {
 8007bdc:	697b      	ldr	r3, [r7, #20]
 8007bde:	681b      	ldr	r3, [r3, #0]
 8007be0:	685b      	ldr	r3, [r3, #4]
 8007be2:	2b00      	cmp	r3, #0
 8007be4:	d103      	bne.n	8007bee <lwip_netconn_do_connect+0x1e>
    /* This may happen when calling netconn_connect() a second time */
    msg->err = ERR_CLSD;
 8007be6:	697b      	ldr	r3, [r7, #20]
 8007be8:	22f1      	movs	r2, #241	; 0xf1
 8007bea:	711a      	strb	r2, [r3, #4]
 8007bec:	e0a4      	b.n	8007d38 <lwip_netconn_do_connect+0x168>
  } else {
    switch (NETCONNTYPE_GROUP(msg->conn->type)) {
 8007bee:	697b      	ldr	r3, [r7, #20]
 8007bf0:	681b      	ldr	r3, [r3, #0]
 8007bf2:	781b      	ldrb	r3, [r3, #0]
 8007bf4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8007bf8:	2b10      	cmp	r3, #16
 8007bfa:	d011      	beq.n	8007c20 <lwip_netconn_do_connect+0x50>
 8007bfc:	2b20      	cmp	r3, #32
 8007bfe:	f040 808f 	bne.w	8007d20 <lwip_netconn_do_connect+0x150>
      msg->err = raw_connect(msg->conn->pcb.raw, API_EXPR_REF(msg->msg.bc.ipaddr));
      break;
#endif /* LWIP_RAW */
#if LWIP_UDP
    case NETCONN_UDP:
      msg->err = udp_connect(msg->conn->pcb.udp, API_EXPR_REF(msg->msg.bc.ipaddr), msg->msg.bc.port);
 8007c02:	697b      	ldr	r3, [r7, #20]
 8007c04:	681b      	ldr	r3, [r3, #0]
 8007c06:	6858      	ldr	r0, [r3, #4]
 8007c08:	697b      	ldr	r3, [r7, #20]
 8007c0a:	6899      	ldr	r1, [r3, #8]
 8007c0c:	697b      	ldr	r3, [r7, #20]
 8007c0e:	899b      	ldrh	r3, [r3, #12]
 8007c10:	461a      	mov	r2, r3
 8007c12:	f008 fd33 	bl	801067c <udp_connect>
 8007c16:	4603      	mov	r3, r0
 8007c18:	461a      	mov	r2, r3
 8007c1a:	697b      	ldr	r3, [r7, #20]
 8007c1c:	711a      	strb	r2, [r3, #4]
      break;
 8007c1e:	e08b      	b.n	8007d38 <lwip_netconn_do_connect+0x168>
#endif /* LWIP_UDP */
#if LWIP_TCP
    case NETCONN_TCP:
      /* Prevent connect while doing any other action. */
      if (msg->conn->state == NETCONN_CONNECT) {
 8007c20:	697b      	ldr	r3, [r7, #20]
 8007c22:	681b      	ldr	r3, [r3, #0]
 8007c24:	785b      	ldrb	r3, [r3, #1]
 8007c26:	2b03      	cmp	r3, #3
 8007c28:	d103      	bne.n	8007c32 <lwip_netconn_do_connect+0x62>
        msg->err = ERR_ALREADY;
 8007c2a:	697b      	ldr	r3, [r7, #20]
 8007c2c:	22f7      	movs	r2, #247	; 0xf7
 8007c2e:	711a      	strb	r2, [r3, #4]
#endif /* LWIP_TCPIP_CORE_LOCKING */
            return;
          }
        }
      }
      break;
 8007c30:	e081      	b.n	8007d36 <lwip_netconn_do_connect+0x166>
      } else if (msg->conn->state != NETCONN_NONE) {
 8007c32:	697b      	ldr	r3, [r7, #20]
 8007c34:	681b      	ldr	r3, [r3, #0]
 8007c36:	785b      	ldrb	r3, [r3, #1]
 8007c38:	2b00      	cmp	r3, #0
 8007c3a:	d003      	beq.n	8007c44 <lwip_netconn_do_connect+0x74>
        msg->err = ERR_ISCONN;
 8007c3c:	697b      	ldr	r3, [r7, #20]
 8007c3e:	22f6      	movs	r2, #246	; 0xf6
 8007c40:	711a      	strb	r2, [r3, #4]
      break;
 8007c42:	e078      	b.n	8007d36 <lwip_netconn_do_connect+0x166>
        setup_tcp(msg->conn);
 8007c44:	697b      	ldr	r3, [r7, #20]
 8007c46:	681b      	ldr	r3, [r3, #0]
 8007c48:	4618      	mov	r0, r3
 8007c4a:	f7ff faad 	bl	80071a8 <setup_tcp>
        msg->err = tcp_connect(msg->conn->pcb.tcp, API_EXPR_REF(msg->msg.bc.ipaddr),
 8007c4e:	697b      	ldr	r3, [r7, #20]
 8007c50:	681b      	ldr	r3, [r3, #0]
 8007c52:	6858      	ldr	r0, [r3, #4]
 8007c54:	697b      	ldr	r3, [r7, #20]
 8007c56:	6899      	ldr	r1, [r3, #8]
 8007c58:	697b      	ldr	r3, [r7, #20]
 8007c5a:	899a      	ldrh	r2, [r3, #12]
 8007c5c:	4b44      	ldr	r3, [pc, #272]	; (8007d70 <lwip_netconn_do_connect+0x1a0>)
 8007c5e:	f003 fa79 	bl	800b154 <tcp_connect>
 8007c62:	4603      	mov	r3, r0
 8007c64:	461a      	mov	r2, r3
 8007c66:	697b      	ldr	r3, [r7, #20]
 8007c68:	711a      	strb	r2, [r3, #4]
        if (msg->err == ERR_OK) {
 8007c6a:	697b      	ldr	r3, [r7, #20]
 8007c6c:	f993 3004 	ldrsb.w	r3, [r3, #4]
 8007c70:	2b00      	cmp	r3, #0
 8007c72:	d160      	bne.n	8007d36 <lwip_netconn_do_connect+0x166>
          u8_t non_blocking = netconn_is_nonblocking(msg->conn);
 8007c74:	697b      	ldr	r3, [r7, #20]
 8007c76:	681b      	ldr	r3, [r3, #0]
 8007c78:	7f1b      	ldrb	r3, [r3, #28]
 8007c7a:	f003 0302 	and.w	r3, r3, #2
 8007c7e:	2b00      	cmp	r3, #0
 8007c80:	bf14      	ite	ne
 8007c82:	2301      	movne	r3, #1
 8007c84:	2300      	moveq	r3, #0
 8007c86:	b2db      	uxtb	r3, r3
 8007c88:	74fb      	strb	r3, [r7, #19]
          msg->conn->state = NETCONN_CONNECT;
 8007c8a:	697b      	ldr	r3, [r7, #20]
 8007c8c:	681b      	ldr	r3, [r3, #0]
 8007c8e:	2203      	movs	r2, #3
 8007c90:	705a      	strb	r2, [r3, #1]
          SET_NONBLOCKING_CONNECT(msg->conn, non_blocking);
 8007c92:	7cfb      	ldrb	r3, [r7, #19]
 8007c94:	2b00      	cmp	r3, #0
 8007c96:	d009      	beq.n	8007cac <lwip_netconn_do_connect+0xdc>
 8007c98:	697b      	ldr	r3, [r7, #20]
 8007c9a:	681b      	ldr	r3, [r3, #0]
 8007c9c:	7f1a      	ldrb	r2, [r3, #28]
 8007c9e:	697b      	ldr	r3, [r7, #20]
 8007ca0:	681b      	ldr	r3, [r3, #0]
 8007ca2:	f042 0204 	orr.w	r2, r2, #4
 8007ca6:	b2d2      	uxtb	r2, r2
 8007ca8:	771a      	strb	r2, [r3, #28]
 8007caa:	e008      	b.n	8007cbe <lwip_netconn_do_connect+0xee>
 8007cac:	697b      	ldr	r3, [r7, #20]
 8007cae:	681b      	ldr	r3, [r3, #0]
 8007cb0:	7f1a      	ldrb	r2, [r3, #28]
 8007cb2:	697b      	ldr	r3, [r7, #20]
 8007cb4:	681b      	ldr	r3, [r3, #0]
 8007cb6:	f022 0204 	bic.w	r2, r2, #4
 8007cba:	b2d2      	uxtb	r2, r2
 8007cbc:	771a      	strb	r2, [r3, #28]
          if (non_blocking) {
 8007cbe:	7cfb      	ldrb	r3, [r7, #19]
 8007cc0:	2b00      	cmp	r3, #0
 8007cc2:	d003      	beq.n	8007ccc <lwip_netconn_do_connect+0xfc>
            msg->err = ERR_INPROGRESS;
 8007cc4:	697b      	ldr	r3, [r7, #20]
 8007cc6:	22fb      	movs	r2, #251	; 0xfb
 8007cc8:	711a      	strb	r2, [r3, #4]
      break;
 8007cca:	e034      	b.n	8007d36 <lwip_netconn_do_connect+0x166>
            msg->conn->current_msg = msg;
 8007ccc:	697b      	ldr	r3, [r7, #20]
 8007cce:	681b      	ldr	r3, [r3, #0]
 8007cd0:	697a      	ldr	r2, [r7, #20]
 8007cd2:	625a      	str	r2, [r3, #36]	; 0x24
            LWIP_ASSERT("state!", msg->conn->state == NETCONN_CONNECT);
 8007cd4:	697b      	ldr	r3, [r7, #20]
 8007cd6:	681b      	ldr	r3, [r3, #0]
 8007cd8:	785b      	ldrb	r3, [r3, #1]
 8007cda:	2b03      	cmp	r3, #3
 8007cdc:	d006      	beq.n	8007cec <lwip_netconn_do_connect+0x11c>
 8007cde:	4b25      	ldr	r3, [pc, #148]	; (8007d74 <lwip_netconn_do_connect+0x1a4>)
 8007ce0:	f240 42e5 	movw	r2, #1253	; 0x4e5
 8007ce4:	4924      	ldr	r1, [pc, #144]	; (8007d78 <lwip_netconn_do_connect+0x1a8>)
 8007ce6:	4825      	ldr	r0, [pc, #148]	; (8007d7c <lwip_netconn_do_connect+0x1ac>)
 8007ce8:	f00d ff74 	bl	8015bd4 <printf_>
            UNLOCK_TCPIP_CORE();
 8007cec:	4824      	ldr	r0, [pc, #144]	; (8007d80 <lwip_netconn_do_connect+0x1b0>)
 8007cee:	f00b f9a8 	bl	8013042 <sys_mutex_unlock>
            sys_arch_sem_wait(LWIP_API_MSG_SEM(msg), 0);
 8007cf2:	697b      	ldr	r3, [r7, #20]
 8007cf4:	681b      	ldr	r3, [r3, #0]
 8007cf6:	330c      	adds	r3, #12
 8007cf8:	2100      	movs	r1, #0
 8007cfa:	4618      	mov	r0, r3
 8007cfc:	f00b f900 	bl	8012f00 <sys_arch_sem_wait>
            LOCK_TCPIP_CORE();
 8007d00:	481f      	ldr	r0, [pc, #124]	; (8007d80 <lwip_netconn_do_connect+0x1b0>)
 8007d02:	f00b f98f 	bl	8013024 <sys_mutex_lock>
            LWIP_ASSERT("state!", msg->conn->state != NETCONN_CONNECT);
 8007d06:	697b      	ldr	r3, [r7, #20]
 8007d08:	681b      	ldr	r3, [r3, #0]
 8007d0a:	785b      	ldrb	r3, [r3, #1]
 8007d0c:	2b03      	cmp	r3, #3
 8007d0e:	d12b      	bne.n	8007d68 <lwip_netconn_do_connect+0x198>
 8007d10:	4b18      	ldr	r3, [pc, #96]	; (8007d74 <lwip_netconn_do_connect+0x1a4>)
 8007d12:	f240 42e9 	movw	r2, #1257	; 0x4e9
 8007d16:	4918      	ldr	r1, [pc, #96]	; (8007d78 <lwip_netconn_do_connect+0x1a8>)
 8007d18:	4818      	ldr	r0, [pc, #96]	; (8007d7c <lwip_netconn_do_connect+0x1ac>)
 8007d1a:	f00d ff5b 	bl	8015bd4 <printf_>
            return;
 8007d1e:	e023      	b.n	8007d68 <lwip_netconn_do_connect+0x198>
#endif /* LWIP_TCP */
    default:
      LWIP_ERROR("Invalid netconn type", 0, do{ msg->err = ERR_VAL; }while(0));
 8007d20:	4b14      	ldr	r3, [pc, #80]	; (8007d74 <lwip_netconn_do_connect+0x1a4>)
 8007d22:	f240 42f2 	movw	r2, #1266	; 0x4f2
 8007d26:	4917      	ldr	r1, [pc, #92]	; (8007d84 <lwip_netconn_do_connect+0x1b4>)
 8007d28:	4814      	ldr	r0, [pc, #80]	; (8007d7c <lwip_netconn_do_connect+0x1ac>)
 8007d2a:	f00d ff53 	bl	8015bd4 <printf_>
 8007d2e:	697b      	ldr	r3, [r7, #20]
 8007d30:	22fa      	movs	r2, #250	; 0xfa
 8007d32:	711a      	strb	r2, [r3, #4]
      break;
 8007d34:	e000      	b.n	8007d38 <lwip_netconn_do_connect+0x168>
      break;
 8007d36:	bf00      	nop
    }
  }
  /* For all other protocols, netconn_connect() calls TCPIP_APIMSG(),
     so use TCPIP_APIMSG_ACK() here. */
  TCPIP_APIMSG_ACK(msg);
 8007d38:	697b      	ldr	r3, [r7, #20]
 8007d3a:	681b      	ldr	r3, [r3, #0]
 8007d3c:	2b00      	cmp	r3, #0
 8007d3e:	d014      	beq.n	8007d6a <lwip_netconn_do_connect+0x19a>
 8007d40:	f00b f9aa 	bl	8013098 <sys_arch_protect>
 8007d44:	60f8      	str	r0, [r7, #12]
 8007d46:	697b      	ldr	r3, [r7, #20]
 8007d48:	681b      	ldr	r3, [r3, #0]
 8007d4a:	f993 3008 	ldrsb.w	r3, [r3, #8]
 8007d4e:	f113 0f0c 	cmn.w	r3, #12
 8007d52:	db05      	blt.n	8007d60 <lwip_netconn_do_connect+0x190>
 8007d54:	697b      	ldr	r3, [r7, #20]
 8007d56:	681b      	ldr	r3, [r3, #0]
 8007d58:	697a      	ldr	r2, [r7, #20]
 8007d5a:	f992 2004 	ldrsb.w	r2, [r2, #4]
 8007d5e:	721a      	strb	r2, [r3, #8]
 8007d60:	68f8      	ldr	r0, [r7, #12]
 8007d62:	f00b f9a7 	bl	80130b4 <sys_arch_unprotect>
 8007d66:	e000      	b.n	8007d6a <lwip_netconn_do_connect+0x19a>
            return;
 8007d68:	bf00      	nop
}
 8007d6a:	3718      	adds	r7, #24
 8007d6c:	46bd      	mov	sp, r7
 8007d6e:	bd80      	pop	{r7, pc}
 8007d70:	08007a8d 	.word	0x08007a8d
 8007d74:	080198a4 	.word	0x080198a4
 8007d78:	08019c08 	.word	0x08019c08
 8007d7c:	080198fc 	.word	0x080198fc
 8007d80:	240087a8 	.word	0x240087a8
 8007d84:	08019c90 	.word	0x08019c90

08007d88 <lwip_netconn_do_disconnect>:
 *
 * @param m the api_msg_msg pointing to the connection to disconnect
 */
void
lwip_netconn_do_disconnect(void *m)
{
 8007d88:	b580      	push	{r7, lr}
 8007d8a:	b084      	sub	sp, #16
 8007d8c:	af00      	add	r7, sp, #0
 8007d8e:	6078      	str	r0, [r7, #4]
  struct api_msg *msg = (struct api_msg*)m;
 8007d90:	687b      	ldr	r3, [r7, #4]
 8007d92:	60fb      	str	r3, [r7, #12]

#if LWIP_UDP
  if (NETCONNTYPE_GROUP(msg->conn->type) == NETCONN_UDP) {
 8007d94:	68fb      	ldr	r3, [r7, #12]
 8007d96:	681b      	ldr	r3, [r3, #0]
 8007d98:	781b      	ldrb	r3, [r3, #0]
 8007d9a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8007d9e:	2b20      	cmp	r3, #32
 8007da0:	d109      	bne.n	8007db6 <lwip_netconn_do_disconnect+0x2e>
    udp_disconnect(msg->conn->pcb.udp);
 8007da2:	68fb      	ldr	r3, [r7, #12]
 8007da4:	681b      	ldr	r3, [r3, #0]
 8007da6:	685b      	ldr	r3, [r3, #4]
 8007da8:	4618      	mov	r0, r3
 8007daa:	f008 fcbd 	bl	8010728 <udp_disconnect>
    msg->err = ERR_OK;
 8007dae:	68fb      	ldr	r3, [r7, #12]
 8007db0:	2200      	movs	r2, #0
 8007db2:	711a      	strb	r2, [r3, #4]
 8007db4:	e002      	b.n	8007dbc <lwip_netconn_do_disconnect+0x34>
  } else
#endif /* LWIP_UDP */
  {
    msg->err = ERR_VAL;
 8007db6:	68fb      	ldr	r3, [r7, #12]
 8007db8:	22fa      	movs	r2, #250	; 0xfa
 8007dba:	711a      	strb	r2, [r3, #4]
  }
  TCPIP_APIMSG_ACK(msg);
 8007dbc:	68fb      	ldr	r3, [r7, #12]
 8007dbe:	681b      	ldr	r3, [r3, #0]
 8007dc0:	2b00      	cmp	r3, #0
 8007dc2:	d012      	beq.n	8007dea <lwip_netconn_do_disconnect+0x62>
 8007dc4:	f00b f968 	bl	8013098 <sys_arch_protect>
 8007dc8:	60b8      	str	r0, [r7, #8]
 8007dca:	68fb      	ldr	r3, [r7, #12]
 8007dcc:	681b      	ldr	r3, [r3, #0]
 8007dce:	f993 3008 	ldrsb.w	r3, [r3, #8]
 8007dd2:	f113 0f0c 	cmn.w	r3, #12
 8007dd6:	db05      	blt.n	8007de4 <lwip_netconn_do_disconnect+0x5c>
 8007dd8:	68fb      	ldr	r3, [r7, #12]
 8007dda:	681b      	ldr	r3, [r3, #0]
 8007ddc:	68fa      	ldr	r2, [r7, #12]
 8007dde:	f992 2004 	ldrsb.w	r2, [r2, #4]
 8007de2:	721a      	strb	r2, [r3, #8]
 8007de4:	68b8      	ldr	r0, [r7, #8]
 8007de6:	f00b f965 	bl	80130b4 <sys_arch_unprotect>
}
 8007dea:	bf00      	nop
 8007dec:	3710      	adds	r7, #16
 8007dee:	46bd      	mov	sp, r7
 8007df0:	bd80      	pop	{r7, pc}

08007df2 <lwip_netconn_do_send>:
 *
 * @param m the api_msg_msg pointing to the connection
 */
void
lwip_netconn_do_send(void *m)
{
 8007df2:	b580      	push	{r7, lr}
 8007df4:	b084      	sub	sp, #16
 8007df6:	af00      	add	r7, sp, #0
 8007df8:	6078      	str	r0, [r7, #4]
  struct api_msg *msg = (struct api_msg*)m;
 8007dfa:	687b      	ldr	r3, [r7, #4]
 8007dfc:	60fb      	str	r3, [r7, #12]

  if (ERR_IS_FATAL(msg->conn->last_err)) {
 8007dfe:	68fb      	ldr	r3, [r7, #12]
 8007e00:	681b      	ldr	r3, [r3, #0]
 8007e02:	f993 3008 	ldrsb.w	r3, [r3, #8]
 8007e06:	f113 0f0c 	cmn.w	r3, #12
 8007e0a:	da06      	bge.n	8007e1a <lwip_netconn_do_send+0x28>
    msg->err = msg->conn->last_err;
 8007e0c:	68fb      	ldr	r3, [r7, #12]
 8007e0e:	681b      	ldr	r3, [r3, #0]
 8007e10:	f993 2008 	ldrsb.w	r2, [r3, #8]
 8007e14:	68fb      	ldr	r3, [r7, #12]
 8007e16:	711a      	strb	r2, [r3, #4]
 8007e18:	e038      	b.n	8007e8c <lwip_netconn_do_send+0x9a>
  } else {
    msg->err = ERR_CONN;
 8007e1a:	68fb      	ldr	r3, [r7, #12]
 8007e1c:	22f5      	movs	r2, #245	; 0xf5
 8007e1e:	711a      	strb	r2, [r3, #4]
    if (msg->conn->pcb.tcp != NULL) {
 8007e20:	68fb      	ldr	r3, [r7, #12]
 8007e22:	681b      	ldr	r3, [r3, #0]
 8007e24:	685b      	ldr	r3, [r3, #4]
 8007e26:	2b00      	cmp	r3, #0
 8007e28:	d02f      	beq.n	8007e8a <lwip_netconn_do_send+0x98>
      switch (NETCONNTYPE_GROUP(msg->conn->type)) {
 8007e2a:	68fb      	ldr	r3, [r7, #12]
 8007e2c:	681b      	ldr	r3, [r3, #0]
 8007e2e:	781b      	ldrb	r3, [r3, #0]
 8007e30:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8007e34:	2b20      	cmp	r3, #32
 8007e36:	d000      	beq.n	8007e3a <lwip_netconn_do_send+0x48>
        }
#endif /* LWIP_CHECKSUM_ON_COPY */
        break;
#endif /* LWIP_UDP */
      default:
        break;
 8007e38:	e028      	b.n	8007e8c <lwip_netconn_do_send+0x9a>
        if (ip_addr_isany_val(msg->msg.b->addr) || IP_IS_ANY_TYPE_VAL(msg->msg.b->addr)) {
 8007e3a:	68fb      	ldr	r3, [r7, #12]
 8007e3c:	689b      	ldr	r3, [r3, #8]
 8007e3e:	689b      	ldr	r3, [r3, #8]
 8007e40:	2b00      	cmp	r3, #0
 8007e42:	d10e      	bne.n	8007e62 <lwip_netconn_do_send+0x70>
          msg->err = udp_send(msg->conn->pcb.udp, msg->msg.b->p);
 8007e44:	68fb      	ldr	r3, [r7, #12]
 8007e46:	681b      	ldr	r3, [r3, #0]
 8007e48:	685a      	ldr	r2, [r3, #4]
 8007e4a:	68fb      	ldr	r3, [r7, #12]
 8007e4c:	689b      	ldr	r3, [r3, #8]
 8007e4e:	681b      	ldr	r3, [r3, #0]
 8007e50:	4619      	mov	r1, r3
 8007e52:	4610      	mov	r0, r2
 8007e54:	f008 fa88 	bl	8010368 <udp_send>
 8007e58:	4603      	mov	r3, r0
 8007e5a:	461a      	mov	r2, r3
 8007e5c:	68fb      	ldr	r3, [r7, #12]
 8007e5e:	711a      	strb	r2, [r3, #4]
        break;
 8007e60:	e014      	b.n	8007e8c <lwip_netconn_do_send+0x9a>
          msg->err = udp_sendto(msg->conn->pcb.udp, msg->msg.b->p, &msg->msg.b->addr, msg->msg.b->port);
 8007e62:	68fb      	ldr	r3, [r7, #12]
 8007e64:	681b      	ldr	r3, [r3, #0]
 8007e66:	6858      	ldr	r0, [r3, #4]
 8007e68:	68fb      	ldr	r3, [r7, #12]
 8007e6a:	689b      	ldr	r3, [r3, #8]
 8007e6c:	6819      	ldr	r1, [r3, #0]
 8007e6e:	68fb      	ldr	r3, [r7, #12]
 8007e70:	689b      	ldr	r3, [r3, #8]
 8007e72:	f103 0208 	add.w	r2, r3, #8
 8007e76:	68fb      	ldr	r3, [r7, #12]
 8007e78:	689b      	ldr	r3, [r3, #8]
 8007e7a:	899b      	ldrh	r3, [r3, #12]
 8007e7c:	f008 fa8c 	bl	8010398 <udp_sendto>
 8007e80:	4603      	mov	r3, r0
 8007e82:	461a      	mov	r2, r3
 8007e84:	68fb      	ldr	r3, [r7, #12]
 8007e86:	711a      	strb	r2, [r3, #4]
        break;
 8007e88:	e000      	b.n	8007e8c <lwip_netconn_do_send+0x9a>
      }
    }
 8007e8a:	bf00      	nop
  }
  TCPIP_APIMSG_ACK(msg);
 8007e8c:	68fb      	ldr	r3, [r7, #12]
 8007e8e:	681b      	ldr	r3, [r3, #0]
 8007e90:	2b00      	cmp	r3, #0
 8007e92:	d012      	beq.n	8007eba <lwip_netconn_do_send+0xc8>
 8007e94:	f00b f900 	bl	8013098 <sys_arch_protect>
 8007e98:	60b8      	str	r0, [r7, #8]
 8007e9a:	68fb      	ldr	r3, [r7, #12]
 8007e9c:	681b      	ldr	r3, [r3, #0]
 8007e9e:	f993 3008 	ldrsb.w	r3, [r3, #8]
 8007ea2:	f113 0f0c 	cmn.w	r3, #12
 8007ea6:	db05      	blt.n	8007eb4 <lwip_netconn_do_send+0xc2>
 8007ea8:	68fb      	ldr	r3, [r7, #12]
 8007eaa:	681b      	ldr	r3, [r3, #0]
 8007eac:	68fa      	ldr	r2, [r7, #12]
 8007eae:	f992 2004 	ldrsb.w	r2, [r2, #4]
 8007eb2:	721a      	strb	r2, [r3, #8]
 8007eb4:	68b8      	ldr	r0, [r7, #8]
 8007eb6:	f00b f8fd 	bl	80130b4 <sys_arch_unprotect>
}
 8007eba:	bf00      	nop
 8007ebc:	3710      	adds	r7, #16
 8007ebe:	46bd      	mov	sp, r7
 8007ec0:	bd80      	pop	{r7, pc}
	...

08007ec4 <lwip_netconn_do_writemore>:
 * @return ERR_OK
 *         ERR_MEM if LWIP_TCPIP_CORE_LOCKING=1 and sending hasn't yet finished
 */
static err_t
lwip_netconn_do_writemore(struct netconn *conn  WRITE_DELAYED_PARAM)
{
 8007ec4:	b580      	push	{r7, lr}
 8007ec6:	b08a      	sub	sp, #40	; 0x28
 8007ec8:	af00      	add	r7, sp, #0
 8007eca:	6078      	str	r0, [r7, #4]
 8007ecc:	460b      	mov	r3, r1
 8007ece:	70fb      	strb	r3, [r7, #3]
  err_t err;
  const void *dataptr;
  u16_t len, available;
  u8_t write_finished = 0;
 8007ed0:	2300      	movs	r3, #0
 8007ed2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  size_t diff;
  u8_t dontblock;
  u8_t apiflags;

  LWIP_ASSERT("conn != NULL", conn != NULL);
 8007ed6:	687b      	ldr	r3, [r7, #4]
 8007ed8:	2b00      	cmp	r3, #0
 8007eda:	d106      	bne.n	8007eea <lwip_netconn_do_writemore+0x26>
 8007edc:	4ba3      	ldr	r3, [pc, #652]	; (800816c <lwip_netconn_do_writemore+0x2a8>)
 8007ede:	f240 52e3 	movw	r2, #1507	; 0x5e3
 8007ee2:	49a3      	ldr	r1, [pc, #652]	; (8008170 <lwip_netconn_do_writemore+0x2ac>)
 8007ee4:	48a3      	ldr	r0, [pc, #652]	; (8008174 <lwip_netconn_do_writemore+0x2b0>)
 8007ee6:	f00d fe75 	bl	8015bd4 <printf_>
  LWIP_ASSERT("conn->state == NETCONN_WRITE", (conn->state == NETCONN_WRITE));
 8007eea:	687b      	ldr	r3, [r7, #4]
 8007eec:	785b      	ldrb	r3, [r3, #1]
 8007eee:	2b01      	cmp	r3, #1
 8007ef0:	d006      	beq.n	8007f00 <lwip_netconn_do_writemore+0x3c>
 8007ef2:	4b9e      	ldr	r3, [pc, #632]	; (800816c <lwip_netconn_do_writemore+0x2a8>)
 8007ef4:	f240 52e4 	movw	r2, #1508	; 0x5e4
 8007ef8:	499f      	ldr	r1, [pc, #636]	; (8008178 <lwip_netconn_do_writemore+0x2b4>)
 8007efa:	489e      	ldr	r0, [pc, #632]	; (8008174 <lwip_netconn_do_writemore+0x2b0>)
 8007efc:	f00d fe6a 	bl	8015bd4 <printf_>
  LWIP_ASSERT("conn->current_msg != NULL", conn->current_msg != NULL);
 8007f00:	687b      	ldr	r3, [r7, #4]
 8007f02:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007f04:	2b00      	cmp	r3, #0
 8007f06:	d106      	bne.n	8007f16 <lwip_netconn_do_writemore+0x52>
 8007f08:	4b98      	ldr	r3, [pc, #608]	; (800816c <lwip_netconn_do_writemore+0x2a8>)
 8007f0a:	f240 52e5 	movw	r2, #1509	; 0x5e5
 8007f0e:	499b      	ldr	r1, [pc, #620]	; (800817c <lwip_netconn_do_writemore+0x2b8>)
 8007f10:	4898      	ldr	r0, [pc, #608]	; (8008174 <lwip_netconn_do_writemore+0x2b0>)
 8007f12:	f00d fe5f 	bl	8015bd4 <printf_>
  LWIP_ASSERT("conn->pcb.tcp != NULL", conn->pcb.tcp != NULL);
 8007f16:	687b      	ldr	r3, [r7, #4]
 8007f18:	685b      	ldr	r3, [r3, #4]
 8007f1a:	2b00      	cmp	r3, #0
 8007f1c:	d106      	bne.n	8007f2c <lwip_netconn_do_writemore+0x68>
 8007f1e:	4b93      	ldr	r3, [pc, #588]	; (800816c <lwip_netconn_do_writemore+0x2a8>)
 8007f20:	f240 52e6 	movw	r2, #1510	; 0x5e6
 8007f24:	4996      	ldr	r1, [pc, #600]	; (8008180 <lwip_netconn_do_writemore+0x2bc>)
 8007f26:	4893      	ldr	r0, [pc, #588]	; (8008174 <lwip_netconn_do_writemore+0x2b0>)
 8007f28:	f00d fe54 	bl	8015bd4 <printf_>
  LWIP_ASSERT("conn->write_offset < conn->current_msg->msg.w.len",
 8007f2c:	687b      	ldr	r3, [r7, #4]
 8007f2e:	6a1a      	ldr	r2, [r3, #32]
 8007f30:	687b      	ldr	r3, [r7, #4]
 8007f32:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007f34:	68db      	ldr	r3, [r3, #12]
 8007f36:	429a      	cmp	r2, r3
 8007f38:	d306      	bcc.n	8007f48 <lwip_netconn_do_writemore+0x84>
 8007f3a:	4b8c      	ldr	r3, [pc, #560]	; (800816c <lwip_netconn_do_writemore+0x2a8>)
 8007f3c:	f44f 62bd 	mov.w	r2, #1512	; 0x5e8
 8007f40:	4990      	ldr	r1, [pc, #576]	; (8008184 <lwip_netconn_do_writemore+0x2c0>)
 8007f42:	488c      	ldr	r0, [pc, #560]	; (8008174 <lwip_netconn_do_writemore+0x2b0>)
 8007f44:	f00d fe46 	bl	8015bd4 <printf_>
    conn->write_offset < conn->current_msg->msg.w.len);

  apiflags = conn->current_msg->msg.w.apiflags;
 8007f48:	687b      	ldr	r3, [r7, #4]
 8007f4a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007f4c:	7c1b      	ldrb	r3, [r3, #16]
 8007f4e:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  dontblock = netconn_is_nonblocking(conn) || (apiflags & NETCONN_DONTBLOCK);
 8007f52:	687b      	ldr	r3, [r7, #4]
 8007f54:	7f1b      	ldrb	r3, [r3, #28]
 8007f56:	f003 0302 	and.w	r3, r3, #2
 8007f5a:	2b00      	cmp	r3, #0
 8007f5c:	d105      	bne.n	8007f6a <lwip_netconn_do_writemore+0xa6>
 8007f5e:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8007f62:	f003 0304 	and.w	r3, r3, #4
 8007f66:	2b00      	cmp	r3, #0
 8007f68:	d001      	beq.n	8007f6e <lwip_netconn_do_writemore+0xaa>
 8007f6a:	2301      	movs	r3, #1
 8007f6c:	e000      	b.n	8007f70 <lwip_netconn_do_writemore+0xac>
 8007f6e:	2300      	movs	r3, #0
 8007f70:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
      conn->write_offset = 0;
    }
  } else
#endif /* LWIP_SO_SNDTIMEO */
  {
    dataptr = (const u8_t*)conn->current_msg->msg.w.dataptr + conn->write_offset;
 8007f74:	687b      	ldr	r3, [r7, #4]
 8007f76:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007f78:	689a      	ldr	r2, [r3, #8]
 8007f7a:	687b      	ldr	r3, [r7, #4]
 8007f7c:	6a1b      	ldr	r3, [r3, #32]
 8007f7e:	4413      	add	r3, r2
 8007f80:	61fb      	str	r3, [r7, #28]
    diff = conn->current_msg->msg.w.len - conn->write_offset;
 8007f82:	687b      	ldr	r3, [r7, #4]
 8007f84:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007f86:	68da      	ldr	r2, [r3, #12]
 8007f88:	687b      	ldr	r3, [r7, #4]
 8007f8a:	6a1b      	ldr	r3, [r3, #32]
 8007f8c:	1ad3      	subs	r3, r2, r3
 8007f8e:	61bb      	str	r3, [r7, #24]
    if (diff > 0xffffUL) { /* max_u16_t */
 8007f90:	69bb      	ldr	r3, [r7, #24]
 8007f92:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007f96:	d309      	bcc.n	8007fac <lwip_netconn_do_writemore+0xe8>
      len = 0xffff;
 8007f98:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8007f9c:	84bb      	strh	r3, [r7, #36]	; 0x24
      apiflags |= TCP_WRITE_FLAG_MORE;
 8007f9e:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8007fa2:	f043 0302 	orr.w	r3, r3, #2
 8007fa6:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8007faa:	e001      	b.n	8007fb0 <lwip_netconn_do_writemore+0xec>
    } else {
      len = (u16_t)diff;
 8007fac:	69bb      	ldr	r3, [r7, #24]
 8007fae:	84bb      	strh	r3, [r7, #36]	; 0x24
    }
    available = tcp_sndbuf(conn->pcb.tcp);
 8007fb0:	687b      	ldr	r3, [r7, #4]
 8007fb2:	685b      	ldr	r3, [r3, #4]
 8007fb4:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8007fb8:	82fb      	strh	r3, [r7, #22]
    if (available < len) {
 8007fba:	8afa      	ldrh	r2, [r7, #22]
 8007fbc:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8007fbe:	429a      	cmp	r2, r3
 8007fc0:	d212      	bcs.n	8007fe8 <lwip_netconn_do_writemore+0x124>
      /* don't try to write more than sendbuf */
      len = available;
 8007fc2:	8afb      	ldrh	r3, [r7, #22]
 8007fc4:	84bb      	strh	r3, [r7, #36]	; 0x24
      if (dontblock) {
 8007fc6:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 8007fca:	2b00      	cmp	r3, #0
 8007fcc:	d006      	beq.n	8007fdc <lwip_netconn_do_writemore+0x118>
        if (!len) {
 8007fce:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8007fd0:	2b00      	cmp	r3, #0
 8007fd2:	d109      	bne.n	8007fe8 <lwip_netconn_do_writemore+0x124>
          err = ERR_WOULDBLOCK;
 8007fd4:	23f9      	movs	r3, #249	; 0xf9
 8007fd6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
          goto err_mem;
 8007fda:	e02a      	b.n	8008032 <lwip_netconn_do_writemore+0x16e>
        }
      } else {
        apiflags |= TCP_WRITE_FLAG_MORE;
 8007fdc:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8007fe0:	f043 0302 	orr.w	r3, r3, #2
 8007fe4:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
      }
    }
    LWIP_ASSERT("lwip_netconn_do_writemore: invalid length!", ((conn->write_offset + len) <= conn->current_msg->msg.w.len));
 8007fe8:	687b      	ldr	r3, [r7, #4]
 8007fea:	6a1a      	ldr	r2, [r3, #32]
 8007fec:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8007fee:	441a      	add	r2, r3
 8007ff0:	687b      	ldr	r3, [r7, #4]
 8007ff2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007ff4:	68db      	ldr	r3, [r3, #12]
 8007ff6:	429a      	cmp	r2, r3
 8007ff8:	d906      	bls.n	8008008 <lwip_netconn_do_writemore+0x144>
 8007ffa:	4b5c      	ldr	r3, [pc, #368]	; (800816c <lwip_netconn_do_writemore+0x2a8>)
 8007ffc:	f240 6213 	movw	r2, #1555	; 0x613
 8008000:	4961      	ldr	r1, [pc, #388]	; (8008188 <lwip_netconn_do_writemore+0x2c4>)
 8008002:	485c      	ldr	r0, [pc, #368]	; (8008174 <lwip_netconn_do_writemore+0x2b0>)
 8008004:	f00d fde6 	bl	8015bd4 <printf_>
    err = tcp_write(conn->pcb.tcp, dataptr, len, apiflags);
 8008008:	687b      	ldr	r3, [r7, #4]
 800800a:	6858      	ldr	r0, [r3, #4]
 800800c:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8008010:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8008012:	69f9      	ldr	r1, [r7, #28]
 8008014:	f006 fd18 	bl	800ea48 <tcp_write>
 8008018:	4603      	mov	r3, r0
 800801a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    /* if OK or memory error, check available space */
    if ((err == ERR_OK) || (err == ERR_MEM)) {
 800801e:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8008022:	2b00      	cmp	r3, #0
 8008024:	d004      	beq.n	8008030 <lwip_netconn_do_writemore+0x16c>
 8008026:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800802a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800802e:	d134      	bne.n	800809a <lwip_netconn_do_writemore+0x1d6>
err_mem:
 8008030:	bf00      	nop
      if (dontblock && (len < conn->current_msg->msg.w.len)) {
 8008032:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 8008036:	2b00      	cmp	r3, #0
 8008038:	d017      	beq.n	800806a <lwip_netconn_do_writemore+0x1a6>
 800803a:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800803c:	687b      	ldr	r3, [r7, #4]
 800803e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008040:	68db      	ldr	r3, [r3, #12]
 8008042:	429a      	cmp	r2, r3
 8008044:	d211      	bcs.n	800806a <lwip_netconn_do_writemore+0x1a6>
        /* non-blocking write did not write everything: mark the pcb non-writable
           and let poll_tcp check writable space to mark the pcb writable again */
        API_EVENT(conn, NETCONN_EVT_SENDMINUS, len);
 8008046:	687b      	ldr	r3, [r7, #4]
 8008048:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800804a:	2b00      	cmp	r3, #0
 800804c:	d005      	beq.n	800805a <lwip_netconn_do_writemore+0x196>
 800804e:	687b      	ldr	r3, [r7, #4]
 8008050:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008052:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8008054:	2103      	movs	r1, #3
 8008056:	6878      	ldr	r0, [r7, #4]
 8008058:	4798      	blx	r3
        conn->flags |= NETCONN_FLAG_CHECK_WRITESPACE;
 800805a:	687b      	ldr	r3, [r7, #4]
 800805c:	7f1b      	ldrb	r3, [r3, #28]
 800805e:	f043 0310 	orr.w	r3, r3, #16
 8008062:	b2da      	uxtb	r2, r3
 8008064:	687b      	ldr	r3, [r7, #4]
 8008066:	771a      	strb	r2, [r3, #28]
 8008068:	e017      	b.n	800809a <lwip_netconn_do_writemore+0x1d6>
      } else if ((tcp_sndbuf(conn->pcb.tcp) <= TCP_SNDLOWAT) ||
 800806a:	687b      	ldr	r3, [r7, #4]
 800806c:	685b      	ldr	r3, [r3, #4]
 800806e:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8008072:	f640 3267 	movw	r2, #2919	; 0xb67
 8008076:	4293      	cmp	r3, r2
 8008078:	d905      	bls.n	8008086 <lwip_netconn_do_writemore+0x1c2>
                 (tcp_sndqueuelen(conn->pcb.tcp) >= TCP_SNDQUEUELOWAT)) {
 800807a:	687b      	ldr	r3, [r7, #4]
 800807c:	685b      	ldr	r3, [r3, #4]
 800807e:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
      } else if ((tcp_sndbuf(conn->pcb.tcp) <= TCP_SNDLOWAT) ||
 8008082:	2b04      	cmp	r3, #4
 8008084:	d909      	bls.n	800809a <lwip_netconn_do_writemore+0x1d6>
        /* The queued byte- or pbuf-count exceeds the configured low-water limit,
           let select mark this pcb as non-writable. */
        API_EVENT(conn, NETCONN_EVT_SENDMINUS, len);
 8008086:	687b      	ldr	r3, [r7, #4]
 8008088:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800808a:	2b00      	cmp	r3, #0
 800808c:	d005      	beq.n	800809a <lwip_netconn_do_writemore+0x1d6>
 800808e:	687b      	ldr	r3, [r7, #4]
 8008090:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008092:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8008094:	2103      	movs	r1, #3
 8008096:	6878      	ldr	r0, [r7, #4]
 8008098:	4798      	blx	r3
      }
    }

    if (err == ERR_OK) {
 800809a:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800809e:	2b00      	cmp	r3, #0
 80080a0:	d134      	bne.n	800810c <lwip_netconn_do_writemore+0x248>
      err_t out_err;
      conn->write_offset += len;
 80080a2:	687b      	ldr	r3, [r7, #4]
 80080a4:	6a1a      	ldr	r2, [r3, #32]
 80080a6:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80080a8:	441a      	add	r2, r3
 80080aa:	687b      	ldr	r3, [r7, #4]
 80080ac:	621a      	str	r2, [r3, #32]
      if ((conn->write_offset == conn->current_msg->msg.w.len) || dontblock) {
 80080ae:	687b      	ldr	r3, [r7, #4]
 80080b0:	6a1a      	ldr	r2, [r3, #32]
 80080b2:	687b      	ldr	r3, [r7, #4]
 80080b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80080b6:	68db      	ldr	r3, [r3, #12]
 80080b8:	429a      	cmp	r2, r3
 80080ba:	d003      	beq.n	80080c4 <lwip_netconn_do_writemore+0x200>
 80080bc:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 80080c0:	2b00      	cmp	r3, #0
 80080c2:	d007      	beq.n	80080d4 <lwip_netconn_do_writemore+0x210>
        /* return sent length */
        conn->current_msg->msg.w.len = conn->write_offset;
 80080c4:	687b      	ldr	r3, [r7, #4]
 80080c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80080c8:	687a      	ldr	r2, [r7, #4]
 80080ca:	6a12      	ldr	r2, [r2, #32]
 80080cc:	60da      	str	r2, [r3, #12]
        /* everything was written */
        write_finished = 1;
 80080ce:	2301      	movs	r3, #1
 80080d0:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
      }
      out_err = tcp_output(conn->pcb.tcp);
 80080d4:	687b      	ldr	r3, [r7, #4]
 80080d6:	685b      	ldr	r3, [r3, #4]
 80080d8:	4618      	mov	r0, r3
 80080da:	f007 f967 	bl	800f3ac <tcp_output>
 80080de:	4603      	mov	r3, r0
 80080e0:	753b      	strb	r3, [r7, #20]
      if (ERR_IS_FATAL(out_err) || (out_err == ERR_RTE)) {
 80080e2:	f997 3014 	ldrsb.w	r3, [r7, #20]
 80080e6:	f113 0f0c 	cmn.w	r3, #12
 80080ea:	db04      	blt.n	80080f6 <lwip_netconn_do_writemore+0x232>
 80080ec:	f997 3014 	ldrsb.w	r3, [r7, #20]
 80080f0:	f113 0f04 	cmn.w	r3, #4
 80080f4:	d151      	bne.n	800819a <lwip_netconn_do_writemore+0x2d6>
        /* If tcp_output fails with fatal error or no route is found,
           don't try writing any more but return the error
           to the application thread. */
        err = out_err;
 80080f6:	7d3b      	ldrb	r3, [r7, #20]
 80080f8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        write_finished = 1;
 80080fc:	2301      	movs	r3, #1
 80080fe:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        conn->current_msg->msg.w.len = 0;
 8008102:	687b      	ldr	r3, [r7, #4]
 8008104:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008106:	2200      	movs	r2, #0
 8008108:	60da      	str	r2, [r3, #12]
 800810a:	e046      	b.n	800819a <lwip_netconn_do_writemore+0x2d6>
      }
    } else if (err == ERR_MEM) {
 800810c:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8008110:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008114:	d13a      	bne.n	800818c <lwip_netconn_do_writemore+0x2c8>
         For blocking sockets, we do NOT return to the application
         thread, since ERR_MEM is only a temporary error! Non-blocking
         will remain non-writable until sent_tcp/poll_tcp is called */

      /* tcp_write returned ERR_MEM, try tcp_output anyway */
      err_t out_err = tcp_output(conn->pcb.tcp);
 8008116:	687b      	ldr	r3, [r7, #4]
 8008118:	685b      	ldr	r3, [r3, #4]
 800811a:	4618      	mov	r0, r3
 800811c:	f007 f946 	bl	800f3ac <tcp_output>
 8008120:	4603      	mov	r3, r0
 8008122:	757b      	strb	r3, [r7, #21]
      if (ERR_IS_FATAL(out_err) || (out_err == ERR_RTE)) {
 8008124:	f997 3015 	ldrsb.w	r3, [r7, #21]
 8008128:	f113 0f0c 	cmn.w	r3, #12
 800812c:	db04      	blt.n	8008138 <lwip_netconn_do_writemore+0x274>
 800812e:	f997 3015 	ldrsb.w	r3, [r7, #21]
 8008132:	f113 0f04 	cmn.w	r3, #4
 8008136:	d10a      	bne.n	800814e <lwip_netconn_do_writemore+0x28a>
        /* If tcp_output fails with fatal error or no route is found,
           don't try writing any more but return the error
           to the application thread. */
        err = out_err;
 8008138:	7d7b      	ldrb	r3, [r7, #21]
 800813a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        write_finished = 1;
 800813e:	2301      	movs	r3, #1
 8008140:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        conn->current_msg->msg.w.len = 0;
 8008144:	687b      	ldr	r3, [r7, #4]
 8008146:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008148:	2200      	movs	r2, #0
 800814a:	60da      	str	r2, [r3, #12]
 800814c:	e025      	b.n	800819a <lwip_netconn_do_writemore+0x2d6>
      } else if (dontblock) {
 800814e:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 8008152:	2b00      	cmp	r3, #0
 8008154:	d021      	beq.n	800819a <lwip_netconn_do_writemore+0x2d6>
        /* non-blocking write is done on ERR_MEM */
        err = ERR_WOULDBLOCK;
 8008156:	23f9      	movs	r3, #249	; 0xf9
 8008158:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        write_finished = 1;
 800815c:	2301      	movs	r3, #1
 800815e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        conn->current_msg->msg.w.len = 0;
 8008162:	687b      	ldr	r3, [r7, #4]
 8008164:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008166:	2200      	movs	r2, #0
 8008168:	60da      	str	r2, [r3, #12]
 800816a:	e016      	b.n	800819a <lwip_netconn_do_writemore+0x2d6>
 800816c:	080198a4 	.word	0x080198a4
 8008170:	080199c8 	.word	0x080199c8
 8008174:	080198fc 	.word	0x080198fc
 8008178:	08019ca8 	.word	0x08019ca8
 800817c:	080199d8 	.word	0x080199d8
 8008180:	08019cc8 	.word	0x08019cc8
 8008184:	08019ce0 	.word	0x08019ce0
 8008188:	08019d14 	.word	0x08019d14
      }
    } else {
      /* On errors != ERR_MEM, we don't try writing any more but return
         the error to the application thread. */
      write_finished = 1;
 800818c:	2301      	movs	r3, #1
 800818e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
      conn->current_msg->msg.w.len = 0;
 8008192:	687b      	ldr	r3, [r7, #4]
 8008194:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008196:	2200      	movs	r2, #0
 8008198:	60da      	str	r2, [r3, #12]
    }
  }
  if (write_finished) {
 800819a:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800819e:	2b00      	cmp	r3, #0
 80081a0:	d02c      	beq.n	80081fc <lwip_netconn_do_writemore+0x338>
    /* everything was written: set back connection state
       and back to application task */
    sys_sem_t* op_completed_sem = LWIP_API_MSG_SEM(conn->current_msg);
 80081a2:	687b      	ldr	r3, [r7, #4]
 80081a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80081a6:	681b      	ldr	r3, [r3, #0]
 80081a8:	330c      	adds	r3, #12
 80081aa:	613b      	str	r3, [r7, #16]
    conn->current_msg->err = err;
 80081ac:	687b      	ldr	r3, [r7, #4]
 80081ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80081b0:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 80081b4:	711a      	strb	r2, [r3, #4]
    conn->current_msg = NULL;
 80081b6:	687b      	ldr	r3, [r7, #4]
 80081b8:	2200      	movs	r2, #0
 80081ba:	625a      	str	r2, [r3, #36]	; 0x24
    conn->write_offset = 0;
 80081bc:	687b      	ldr	r3, [r7, #4]
 80081be:	2200      	movs	r2, #0
 80081c0:	621a      	str	r2, [r3, #32]
    conn->state = NETCONN_NONE;
 80081c2:	687b      	ldr	r3, [r7, #4]
 80081c4:	2200      	movs	r2, #0
 80081c6:	705a      	strb	r2, [r3, #1]
    NETCONN_SET_SAFE_ERR(conn, err);
 80081c8:	687b      	ldr	r3, [r7, #4]
 80081ca:	2b00      	cmp	r3, #0
 80081cc:	d00f      	beq.n	80081ee <lwip_netconn_do_writemore+0x32a>
 80081ce:	f00a ff63 	bl	8013098 <sys_arch_protect>
 80081d2:	60f8      	str	r0, [r7, #12]
 80081d4:	687b      	ldr	r3, [r7, #4]
 80081d6:	f993 3008 	ldrsb.w	r3, [r3, #8]
 80081da:	f113 0f0c 	cmn.w	r3, #12
 80081de:	db03      	blt.n	80081e8 <lwip_netconn_do_writemore+0x324>
 80081e0:	687b      	ldr	r3, [r7, #4]
 80081e2:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 80081e6:	721a      	strb	r2, [r3, #8]
 80081e8:	68f8      	ldr	r0, [r7, #12]
 80081ea:	f00a ff63 	bl	80130b4 <sys_arch_unprotect>
#if LWIP_TCPIP_CORE_LOCKING
    if (delayed)
 80081ee:	78fb      	ldrb	r3, [r7, #3]
 80081f0:	2b00      	cmp	r3, #0
 80081f2:	d006      	beq.n	8008202 <lwip_netconn_do_writemore+0x33e>
#endif
    {
      sys_sem_signal(op_completed_sem);
 80081f4:	6938      	ldr	r0, [r7, #16]
 80081f6:	f00a feb4 	bl	8012f62 <sys_sem_signal>
 80081fa:	e002      	b.n	8008202 <lwip_netconn_do_writemore+0x33e>
    }
  }
#if LWIP_TCPIP_CORE_LOCKING
  else {
    return ERR_MEM;
 80081fc:	f04f 33ff 	mov.w	r3, #4294967295
 8008200:	e000      	b.n	8008204 <lwip_netconn_do_writemore+0x340>
  }
#endif
  return ERR_OK;
 8008202:	2300      	movs	r3, #0
}
 8008204:	4618      	mov	r0, r3
 8008206:	3728      	adds	r7, #40	; 0x28
 8008208:	46bd      	mov	sp, r7
 800820a:	bd80      	pop	{r7, pc}

0800820c <lwip_netconn_do_write>:
 *
 * @param m the api_msg_msg pointing to the connection
 */
void
lwip_netconn_do_write(void *m)
{
 800820c:	b580      	push	{r7, lr}
 800820e:	b084      	sub	sp, #16
 8008210:	af00      	add	r7, sp, #0
 8008212:	6078      	str	r0, [r7, #4]
  struct api_msg *msg = (struct api_msg*)m;
 8008214:	687b      	ldr	r3, [r7, #4]
 8008216:	60fb      	str	r3, [r7, #12]

  if (ERR_IS_FATAL(msg->conn->last_err)) {
 8008218:	68fb      	ldr	r3, [r7, #12]
 800821a:	681b      	ldr	r3, [r3, #0]
 800821c:	f993 3008 	ldrsb.w	r3, [r3, #8]
 8008220:	f113 0f0c 	cmn.w	r3, #12
 8008224:	da06      	bge.n	8008234 <lwip_netconn_do_write+0x28>
    msg->err = msg->conn->last_err;
 8008226:	68fb      	ldr	r3, [r7, #12]
 8008228:	681b      	ldr	r3, [r3, #0]
 800822a:	f993 2008 	ldrsb.w	r2, [r3, #8]
 800822e:	68fb      	ldr	r3, [r7, #12]
 8008230:	711a      	strb	r2, [r3, #4]
 8008232:	e072      	b.n	800831a <lwip_netconn_do_write+0x10e>
  } else {
    if (NETCONNTYPE_GROUP(msg->conn->type) == NETCONN_TCP) {
 8008234:	68fb      	ldr	r3, [r7, #12]
 8008236:	681b      	ldr	r3, [r3, #0]
 8008238:	781b      	ldrb	r3, [r3, #0]
 800823a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800823e:	2b10      	cmp	r3, #16
 8008240:	d168      	bne.n	8008314 <lwip_netconn_do_write+0x108>
#if LWIP_TCP
      if (msg->conn->state != NETCONN_NONE) {
 8008242:	68fb      	ldr	r3, [r7, #12]
 8008244:	681b      	ldr	r3, [r3, #0]
 8008246:	785b      	ldrb	r3, [r3, #1]
 8008248:	2b00      	cmp	r3, #0
 800824a:	d003      	beq.n	8008254 <lwip_netconn_do_write+0x48>
        /* netconn is connecting, closing or in blocking write */
        msg->err = ERR_INPROGRESS;
 800824c:	68fb      	ldr	r3, [r7, #12]
 800824e:	22fb      	movs	r2, #251	; 0xfb
 8008250:	711a      	strb	r2, [r3, #4]
 8008252:	e062      	b.n	800831a <lwip_netconn_do_write+0x10e>
      } else if (msg->conn->pcb.tcp != NULL) {
 8008254:	68fb      	ldr	r3, [r7, #12]
 8008256:	681b      	ldr	r3, [r3, #0]
 8008258:	685b      	ldr	r3, [r3, #4]
 800825a:	2b00      	cmp	r3, #0
 800825c:	d056      	beq.n	800830c <lwip_netconn_do_write+0x100>
        msg->conn->state = NETCONN_WRITE;
 800825e:	68fb      	ldr	r3, [r7, #12]
 8008260:	681b      	ldr	r3, [r3, #0]
 8008262:	2201      	movs	r2, #1
 8008264:	705a      	strb	r2, [r3, #1]
        /* set all the variables used by lwip_netconn_do_writemore */
        LWIP_ASSERT("already writing or closing", msg->conn->current_msg == NULL &&
 8008266:	68fb      	ldr	r3, [r7, #12]
 8008268:	681b      	ldr	r3, [r3, #0]
 800826a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800826c:	2b00      	cmp	r3, #0
 800826e:	d104      	bne.n	800827a <lwip_netconn_do_write+0x6e>
 8008270:	68fb      	ldr	r3, [r7, #12]
 8008272:	681b      	ldr	r3, [r3, #0]
 8008274:	6a1b      	ldr	r3, [r3, #32]
 8008276:	2b00      	cmp	r3, #0
 8008278:	d006      	beq.n	8008288 <lwip_netconn_do_write+0x7c>
 800827a:	4b36      	ldr	r3, [pc, #216]	; (8008354 <lwip_netconn_do_write+0x148>)
 800827c:	f240 6283 	movw	r2, #1667	; 0x683
 8008280:	4935      	ldr	r1, [pc, #212]	; (8008358 <lwip_netconn_do_write+0x14c>)
 8008282:	4836      	ldr	r0, [pc, #216]	; (800835c <lwip_netconn_do_write+0x150>)
 8008284:	f00d fca6 	bl	8015bd4 <printf_>
          msg->conn->write_offset == 0);
        LWIP_ASSERT("msg->msg.w.len != 0", msg->msg.w.len != 0);
 8008288:	68fb      	ldr	r3, [r7, #12]
 800828a:	68db      	ldr	r3, [r3, #12]
 800828c:	2b00      	cmp	r3, #0
 800828e:	d106      	bne.n	800829e <lwip_netconn_do_write+0x92>
 8008290:	4b30      	ldr	r3, [pc, #192]	; (8008354 <lwip_netconn_do_write+0x148>)
 8008292:	f240 6284 	movw	r2, #1668	; 0x684
 8008296:	4932      	ldr	r1, [pc, #200]	; (8008360 <lwip_netconn_do_write+0x154>)
 8008298:	4830      	ldr	r0, [pc, #192]	; (800835c <lwip_netconn_do_write+0x150>)
 800829a:	f00d fc9b 	bl	8015bd4 <printf_>
        msg->conn->current_msg = msg;
 800829e:	68fb      	ldr	r3, [r7, #12]
 80082a0:	681b      	ldr	r3, [r3, #0]
 80082a2:	68fa      	ldr	r2, [r7, #12]
 80082a4:	625a      	str	r2, [r3, #36]	; 0x24
        msg->conn->write_offset = 0;
 80082a6:	68fb      	ldr	r3, [r7, #12]
 80082a8:	681b      	ldr	r3, [r3, #0]
 80082aa:	2200      	movs	r2, #0
 80082ac:	621a      	str	r2, [r3, #32]
#if LWIP_TCPIP_CORE_LOCKING
        if (lwip_netconn_do_writemore(msg->conn, 0) != ERR_OK) {
 80082ae:	68fb      	ldr	r3, [r7, #12]
 80082b0:	681b      	ldr	r3, [r3, #0]
 80082b2:	2100      	movs	r1, #0
 80082b4:	4618      	mov	r0, r3
 80082b6:	f7ff fe05 	bl	8007ec4 <lwip_netconn_do_writemore>
 80082ba:	4603      	mov	r3, r0
 80082bc:	2b00      	cmp	r3, #0
 80082be:	d044      	beq.n	800834a <lwip_netconn_do_write+0x13e>
          LWIP_ASSERT("state!", msg->conn->state == NETCONN_WRITE);
 80082c0:	68fb      	ldr	r3, [r7, #12]
 80082c2:	681b      	ldr	r3, [r3, #0]
 80082c4:	785b      	ldrb	r3, [r3, #1]
 80082c6:	2b01      	cmp	r3, #1
 80082c8:	d006      	beq.n	80082d8 <lwip_netconn_do_write+0xcc>
 80082ca:	4b22      	ldr	r3, [pc, #136]	; (8008354 <lwip_netconn_do_write+0x148>)
 80082cc:	f240 6289 	movw	r2, #1673	; 0x689
 80082d0:	4924      	ldr	r1, [pc, #144]	; (8008364 <lwip_netconn_do_write+0x158>)
 80082d2:	4822      	ldr	r0, [pc, #136]	; (800835c <lwip_netconn_do_write+0x150>)
 80082d4:	f00d fc7e 	bl	8015bd4 <printf_>
          UNLOCK_TCPIP_CORE();
 80082d8:	4823      	ldr	r0, [pc, #140]	; (8008368 <lwip_netconn_do_write+0x15c>)
 80082da:	f00a feb2 	bl	8013042 <sys_mutex_unlock>
          sys_arch_sem_wait(LWIP_API_MSG_SEM(msg), 0);
 80082de:	68fb      	ldr	r3, [r7, #12]
 80082e0:	681b      	ldr	r3, [r3, #0]
 80082e2:	330c      	adds	r3, #12
 80082e4:	2100      	movs	r1, #0
 80082e6:	4618      	mov	r0, r3
 80082e8:	f00a fe0a 	bl	8012f00 <sys_arch_sem_wait>
          LOCK_TCPIP_CORE();
 80082ec:	481e      	ldr	r0, [pc, #120]	; (8008368 <lwip_netconn_do_write+0x15c>)
 80082ee:	f00a fe99 	bl	8013024 <sys_mutex_lock>
          LWIP_ASSERT("state!", msg->conn->state != NETCONN_WRITE);
 80082f2:	68fb      	ldr	r3, [r7, #12]
 80082f4:	681b      	ldr	r3, [r3, #0]
 80082f6:	785b      	ldrb	r3, [r3, #1]
 80082f8:	2b01      	cmp	r3, #1
 80082fa:	d126      	bne.n	800834a <lwip_netconn_do_write+0x13e>
 80082fc:	4b15      	ldr	r3, [pc, #84]	; (8008354 <lwip_netconn_do_write+0x148>)
 80082fe:	f240 628d 	movw	r2, #1677	; 0x68d
 8008302:	4918      	ldr	r1, [pc, #96]	; (8008364 <lwip_netconn_do_write+0x158>)
 8008304:	4815      	ldr	r0, [pc, #84]	; (800835c <lwip_netconn_do_write+0x150>)
 8008306:	f00d fc65 	bl	8015bd4 <printf_>
#else /* LWIP_TCPIP_CORE_LOCKING */
        lwip_netconn_do_writemore(msg->conn);
#endif /* LWIP_TCPIP_CORE_LOCKING */
        /* for both cases: if lwip_netconn_do_writemore was called, don't ACK the APIMSG
           since lwip_netconn_do_writemore ACKs it! */
        return;
 800830a:	e01e      	b.n	800834a <lwip_netconn_do_write+0x13e>
      } else {
        msg->err = ERR_CONN;
 800830c:	68fb      	ldr	r3, [r7, #12]
 800830e:	22f5      	movs	r2, #245	; 0xf5
 8008310:	711a      	strb	r2, [r3, #4]
 8008312:	e002      	b.n	800831a <lwip_netconn_do_write+0x10e>
#else /* LWIP_TCP */
      msg->err = ERR_VAL;
#endif /* LWIP_TCP */
#if (LWIP_UDP || LWIP_RAW)
    } else {
      msg->err = ERR_VAL;
 8008314:	68fb      	ldr	r3, [r7, #12]
 8008316:	22fa      	movs	r2, #250	; 0xfa
 8008318:	711a      	strb	r2, [r3, #4]
#endif /* (LWIP_UDP || LWIP_RAW) */
    }
  }
  TCPIP_APIMSG_ACK(msg);
 800831a:	68fb      	ldr	r3, [r7, #12]
 800831c:	681b      	ldr	r3, [r3, #0]
 800831e:	2b00      	cmp	r3, #0
 8008320:	d014      	beq.n	800834c <lwip_netconn_do_write+0x140>
 8008322:	f00a feb9 	bl	8013098 <sys_arch_protect>
 8008326:	60b8      	str	r0, [r7, #8]
 8008328:	68fb      	ldr	r3, [r7, #12]
 800832a:	681b      	ldr	r3, [r3, #0]
 800832c:	f993 3008 	ldrsb.w	r3, [r3, #8]
 8008330:	f113 0f0c 	cmn.w	r3, #12
 8008334:	db05      	blt.n	8008342 <lwip_netconn_do_write+0x136>
 8008336:	68fb      	ldr	r3, [r7, #12]
 8008338:	681b      	ldr	r3, [r3, #0]
 800833a:	68fa      	ldr	r2, [r7, #12]
 800833c:	f992 2004 	ldrsb.w	r2, [r2, #4]
 8008340:	721a      	strb	r2, [r3, #8]
 8008342:	68b8      	ldr	r0, [r7, #8]
 8008344:	f00a feb6 	bl	80130b4 <sys_arch_unprotect>
 8008348:	e000      	b.n	800834c <lwip_netconn_do_write+0x140>
        return;
 800834a:	bf00      	nop
}
 800834c:	3710      	adds	r7, #16
 800834e:	46bd      	mov	sp, r7
 8008350:	bd80      	pop	{r7, pc}
 8008352:	bf00      	nop
 8008354:	080198a4 	.word	0x080198a4
 8008358:	08019bec 	.word	0x08019bec
 800835c:	080198fc 	.word	0x080198fc
 8008360:	08019d40 	.word	0x08019d40
 8008364:	08019c08 	.word	0x08019c08
 8008368:	240087a8 	.word	0x240087a8

0800836c <err_to_errno>:
  EIO            /* ERR_ARG        -16     Illegal argument.        */
};

int
err_to_errno(err_t err)
{
 800836c:	b480      	push	{r7}
 800836e:	b083      	sub	sp, #12
 8008370:	af00      	add	r7, sp, #0
 8008372:	4603      	mov	r3, r0
 8008374:	71fb      	strb	r3, [r7, #7]
  if ((err > 0) || (-err >= (err_t)LWIP_ARRAYSIZE(err_to_errno_table))) {
 8008376:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800837a:	2b00      	cmp	r3, #0
 800837c:	dc04      	bgt.n	8008388 <err_to_errno+0x1c>
 800837e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8008382:	425b      	negs	r3, r3
 8008384:	2b10      	cmp	r3, #16
 8008386:	dd01      	ble.n	800838c <err_to_errno+0x20>
    return EIO;
 8008388:	2305      	movs	r3, #5
 800838a:	e005      	b.n	8008398 <err_to_errno+0x2c>
  }
  return err_to_errno_table[-err];
 800838c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8008390:	425b      	negs	r3, r3
 8008392:	4a04      	ldr	r2, [pc, #16]	; (80083a4 <err_to_errno+0x38>)
 8008394:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
}
 8008398:	4618      	mov	r0, r3
 800839a:	370c      	adds	r7, #12
 800839c:	46bd      	mov	sp, r7
 800839e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083a2:	4770      	bx	lr
 80083a4:	0801c00c 	.word	0x0801c00c

080083a8 <netbuf_delete>:
 *
 * @param buf pointer to a netbuf allocated by netbuf_new()
 */
void
netbuf_delete(struct netbuf *buf)
{
 80083a8:	b580      	push	{r7, lr}
 80083aa:	b082      	sub	sp, #8
 80083ac:	af00      	add	r7, sp, #0
 80083ae:	6078      	str	r0, [r7, #4]
  if (buf != NULL) {
 80083b0:	687b      	ldr	r3, [r7, #4]
 80083b2:	2b00      	cmp	r3, #0
 80083b4:	d013      	beq.n	80083de <netbuf_delete+0x36>
    if (buf->p != NULL) {
 80083b6:	687b      	ldr	r3, [r7, #4]
 80083b8:	681b      	ldr	r3, [r3, #0]
 80083ba:	2b00      	cmp	r3, #0
 80083bc:	d00b      	beq.n	80083d6 <netbuf_delete+0x2e>
      pbuf_free(buf->p);
 80083be:	687b      	ldr	r3, [r7, #4]
 80083c0:	681b      	ldr	r3, [r3, #0]
 80083c2:	4618      	mov	r0, r3
 80083c4:	f002 f874 	bl	800a4b0 <pbuf_free>
      buf->p = buf->ptr = NULL;
 80083c8:	687b      	ldr	r3, [r7, #4]
 80083ca:	2200      	movs	r2, #0
 80083cc:	605a      	str	r2, [r3, #4]
 80083ce:	687b      	ldr	r3, [r7, #4]
 80083d0:	685a      	ldr	r2, [r3, #4]
 80083d2:	687b      	ldr	r3, [r7, #4]
 80083d4:	601a      	str	r2, [r3, #0]
    }
    memp_free(MEMP_NETBUF, buf);
 80083d6:	6879      	ldr	r1, [r7, #4]
 80083d8:	2006      	movs	r0, #6
 80083da:	f001 fabf 	bl	800995c <memp_free>
  }
}
 80083de:	bf00      	nop
 80083e0:	3708      	adds	r7, #8
 80083e2:	46bd      	mov	sp, r7
 80083e4:	bd80      	pop	{r7, pc}
	...

080083e8 <netbuf_free>:
 *
 * @param buf pointer to the netbuf which contains the packet buffer to free
 */
void
netbuf_free(struct netbuf *buf)
{
 80083e8:	b580      	push	{r7, lr}
 80083ea:	b082      	sub	sp, #8
 80083ec:	af00      	add	r7, sp, #0
 80083ee:	6078      	str	r0, [r7, #4]
  LWIP_ERROR("netbuf_free: invalid buf", (buf != NULL), return;);
 80083f0:	687b      	ldr	r3, [r7, #4]
 80083f2:	2b00      	cmp	r3, #0
 80083f4:	d106      	bne.n	8008404 <netbuf_free+0x1c>
 80083f6:	4b0d      	ldr	r3, [pc, #52]	; (800842c <netbuf_free+0x44>)
 80083f8:	2281      	movs	r2, #129	; 0x81
 80083fa:	490d      	ldr	r1, [pc, #52]	; (8008430 <netbuf_free+0x48>)
 80083fc:	480d      	ldr	r0, [pc, #52]	; (8008434 <netbuf_free+0x4c>)
 80083fe:	f00d fbe9 	bl	8015bd4 <printf_>
 8008402:	e00f      	b.n	8008424 <netbuf_free+0x3c>
  if (buf->p != NULL) {
 8008404:	687b      	ldr	r3, [r7, #4]
 8008406:	681b      	ldr	r3, [r3, #0]
 8008408:	2b00      	cmp	r3, #0
 800840a:	d004      	beq.n	8008416 <netbuf_free+0x2e>
    pbuf_free(buf->p);
 800840c:	687b      	ldr	r3, [r7, #4]
 800840e:	681b      	ldr	r3, [r3, #0]
 8008410:	4618      	mov	r0, r3
 8008412:	f002 f84d 	bl	800a4b0 <pbuf_free>
  }
  buf->p = buf->ptr = NULL;
 8008416:	687b      	ldr	r3, [r7, #4]
 8008418:	2200      	movs	r2, #0
 800841a:	605a      	str	r2, [r3, #4]
 800841c:	687b      	ldr	r3, [r7, #4]
 800841e:	685a      	ldr	r2, [r3, #4]
 8008420:	687b      	ldr	r3, [r7, #4]
 8008422:	601a      	str	r2, [r3, #0]
}
 8008424:	3708      	adds	r7, #8
 8008426:	46bd      	mov	sp, r7
 8008428:	bd80      	pop	{r7, pc}
 800842a:	bf00      	nop
 800842c:	08019d6c 	.word	0x08019d6c
 8008430:	08019e08 	.word	0x08019e08
 8008434:	08019dbc 	.word	0x08019dbc

08008438 <netbuf_ref>:
 * @return ERR_OK if data is referenced
 *         ERR_MEM if data couldn't be referenced due to lack of memory
 */
err_t
netbuf_ref(struct netbuf *buf, const void *dataptr, u16_t size)
{
 8008438:	b580      	push	{r7, lr}
 800843a:	b084      	sub	sp, #16
 800843c:	af00      	add	r7, sp, #0
 800843e:	60f8      	str	r0, [r7, #12]
 8008440:	60b9      	str	r1, [r7, #8]
 8008442:	4613      	mov	r3, r2
 8008444:	80fb      	strh	r3, [r7, #6]
  LWIP_ERROR("netbuf_ref: invalid buf", (buf != NULL), return ERR_ARG;);
 8008446:	68fb      	ldr	r3, [r7, #12]
 8008448:	2b00      	cmp	r3, #0
 800844a:	d108      	bne.n	800845e <netbuf_ref+0x26>
 800844c:	4b1c      	ldr	r3, [pc, #112]	; (80084c0 <netbuf_ref+0x88>)
 800844e:	2295      	movs	r2, #149	; 0x95
 8008450:	491c      	ldr	r1, [pc, #112]	; (80084c4 <netbuf_ref+0x8c>)
 8008452:	481d      	ldr	r0, [pc, #116]	; (80084c8 <netbuf_ref+0x90>)
 8008454:	f00d fbbe 	bl	8015bd4 <printf_>
 8008458:	f06f 030f 	mvn.w	r3, #15
 800845c:	e02b      	b.n	80084b6 <netbuf_ref+0x7e>
  if (buf->p != NULL) {
 800845e:	68fb      	ldr	r3, [r7, #12]
 8008460:	681b      	ldr	r3, [r3, #0]
 8008462:	2b00      	cmp	r3, #0
 8008464:	d004      	beq.n	8008470 <netbuf_ref+0x38>
    pbuf_free(buf->p);
 8008466:	68fb      	ldr	r3, [r7, #12]
 8008468:	681b      	ldr	r3, [r3, #0]
 800846a:	4618      	mov	r0, r3
 800846c:	f002 f820 	bl	800a4b0 <pbuf_free>
  }
  buf->p = pbuf_alloc(PBUF_TRANSPORT, 0, PBUF_REF);
 8008470:	2202      	movs	r2, #2
 8008472:	2100      	movs	r1, #0
 8008474:	2000      	movs	r0, #0
 8008476:	f001 fca9 	bl	8009dcc <pbuf_alloc>
 800847a:	4602      	mov	r2, r0
 800847c:	68fb      	ldr	r3, [r7, #12]
 800847e:	601a      	str	r2, [r3, #0]
  if (buf->p == NULL) {
 8008480:	68fb      	ldr	r3, [r7, #12]
 8008482:	681b      	ldr	r3, [r3, #0]
 8008484:	2b00      	cmp	r3, #0
 8008486:	d105      	bne.n	8008494 <netbuf_ref+0x5c>
    buf->ptr = NULL;
 8008488:	68fb      	ldr	r3, [r7, #12]
 800848a:	2200      	movs	r2, #0
 800848c:	605a      	str	r2, [r3, #4]
    return ERR_MEM;
 800848e:	f04f 33ff 	mov.w	r3, #4294967295
 8008492:	e010      	b.n	80084b6 <netbuf_ref+0x7e>
  }
  ((struct pbuf_rom*)buf->p)->payload = dataptr;
 8008494:	68fb      	ldr	r3, [r7, #12]
 8008496:	681b      	ldr	r3, [r3, #0]
 8008498:	68ba      	ldr	r2, [r7, #8]
 800849a:	605a      	str	r2, [r3, #4]
  buf->p->len = buf->p->tot_len = size;
 800849c:	68fb      	ldr	r3, [r7, #12]
 800849e:	681b      	ldr	r3, [r3, #0]
 80084a0:	88fa      	ldrh	r2, [r7, #6]
 80084a2:	811a      	strh	r2, [r3, #8]
 80084a4:	68fa      	ldr	r2, [r7, #12]
 80084a6:	6812      	ldr	r2, [r2, #0]
 80084a8:	891b      	ldrh	r3, [r3, #8]
 80084aa:	8153      	strh	r3, [r2, #10]
  buf->ptr = buf->p;
 80084ac:	68fb      	ldr	r3, [r7, #12]
 80084ae:	681a      	ldr	r2, [r3, #0]
 80084b0:	68fb      	ldr	r3, [r7, #12]
 80084b2:	605a      	str	r2, [r3, #4]
  return ERR_OK;
 80084b4:	2300      	movs	r3, #0
}
 80084b6:	4618      	mov	r0, r3
 80084b8:	3710      	adds	r7, #16
 80084ba:	46bd      	mov	sp, r7
 80084bc:	bd80      	pop	{r7, pc}
 80084be:	bf00      	nop
 80084c0:	08019d6c 	.word	0x08019d6c
 80084c4:	08019e24 	.word	0x08019e24
 80084c8:	08019dbc 	.word	0x08019dbc

080084cc <get_socket>:
 * @param s externally used socket index
 * @return struct lwip_sock for the socket or NULL if not found
 */
static struct lwip_sock *
get_socket(int s)
{
 80084cc:	b480      	push	{r7}
 80084ce:	b085      	sub	sp, #20
 80084d0:	af00      	add	r7, sp, #0
 80084d2:	6078      	str	r0, [r7, #4]
  struct lwip_sock *sock;

  s -= LWIP_SOCKET_OFFSET;

  if ((s < 0) || (s >= NUM_SOCKETS)) {
 80084d4:	687b      	ldr	r3, [r7, #4]
 80084d6:	2b00      	cmp	r3, #0
 80084d8:	db02      	blt.n	80084e0 <get_socket+0x14>
 80084da:	687b      	ldr	r3, [r7, #4]
 80084dc:	2b03      	cmp	r3, #3
 80084de:	dd04      	ble.n	80084ea <get_socket+0x1e>
    LWIP_DEBUGF(SOCKETS_DEBUG, ("get_socket(%d): invalid\n", s + LWIP_SOCKET_OFFSET));
    set_errno(EBADF);
 80084e0:	4b0e      	ldr	r3, [pc, #56]	; (800851c <get_socket+0x50>)
 80084e2:	2209      	movs	r2, #9
 80084e4:	601a      	str	r2, [r3, #0]
    return NULL;
 80084e6:	2300      	movs	r3, #0
 80084e8:	e011      	b.n	800850e <get_socket+0x42>
  }

  sock = &sockets[s];
 80084ea:	687a      	ldr	r2, [r7, #4]
 80084ec:	4613      	mov	r3, r2
 80084ee:	009b      	lsls	r3, r3, #2
 80084f0:	4413      	add	r3, r2
 80084f2:	009b      	lsls	r3, r3, #2
 80084f4:	4a0a      	ldr	r2, [pc, #40]	; (8008520 <get_socket+0x54>)
 80084f6:	4413      	add	r3, r2
 80084f8:	60fb      	str	r3, [r7, #12]

  if (!sock->conn) {
 80084fa:	68fb      	ldr	r3, [r7, #12]
 80084fc:	681b      	ldr	r3, [r3, #0]
 80084fe:	2b00      	cmp	r3, #0
 8008500:	d104      	bne.n	800850c <get_socket+0x40>
    LWIP_DEBUGF(SOCKETS_DEBUG, ("get_socket(%d): not active\n", s + LWIP_SOCKET_OFFSET));
    set_errno(EBADF);
 8008502:	4b06      	ldr	r3, [pc, #24]	; (800851c <get_socket+0x50>)
 8008504:	2209      	movs	r2, #9
 8008506:	601a      	str	r2, [r3, #0]
    return NULL;
 8008508:	2300      	movs	r3, #0
 800850a:	e000      	b.n	800850e <get_socket+0x42>
  }

  return sock;
 800850c:	68fb      	ldr	r3, [r7, #12]
}
 800850e:	4618      	mov	r0, r3
 8008510:	3714      	adds	r7, #20
 8008512:	46bd      	mov	sp, r7
 8008514:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008518:	4770      	bx	lr
 800851a:	bf00      	nop
 800851c:	2400f304 	.word	0x2400f304
 8008520:	24008560 	.word	0x24008560

08008524 <alloc_socket>:
 *                 0 if socket has been created by socket()
 * @return the index of the new socket; -1 on error
 */
static int
alloc_socket(struct netconn *newconn, int accepted)
{
 8008524:	b580      	push	{r7, lr}
 8008526:	b084      	sub	sp, #16
 8008528:	af00      	add	r7, sp, #0
 800852a:	6078      	str	r0, [r7, #4]
 800852c:	6039      	str	r1, [r7, #0]
  int i;
  SYS_ARCH_DECL_PROTECT(lev);

  /* allocate a new socket identifier */
  for (i = 0; i < NUM_SOCKETS; ++i) {
 800852e:	2300      	movs	r3, #0
 8008530:	60fb      	str	r3, [r7, #12]
 8008532:	e074      	b.n	800861e <alloc_socket+0xfa>
    /* Protect socket array */
    SYS_ARCH_PROTECT(lev);
 8008534:	f00a fdb0 	bl	8013098 <sys_arch_protect>
 8008538:	60b8      	str	r0, [r7, #8]
    if (!sockets[i].conn && (sockets[i].select_waiting == 0)) {
 800853a:	493d      	ldr	r1, [pc, #244]	; (8008630 <alloc_socket+0x10c>)
 800853c:	68fa      	ldr	r2, [r7, #12]
 800853e:	4613      	mov	r3, r2
 8008540:	009b      	lsls	r3, r3, #2
 8008542:	4413      	add	r3, r2
 8008544:	009b      	lsls	r3, r3, #2
 8008546:	440b      	add	r3, r1
 8008548:	681b      	ldr	r3, [r3, #0]
 800854a:	2b00      	cmp	r3, #0
 800854c:	d161      	bne.n	8008612 <alloc_socket+0xee>
 800854e:	4938      	ldr	r1, [pc, #224]	; (8008630 <alloc_socket+0x10c>)
 8008550:	68fa      	ldr	r2, [r7, #12]
 8008552:	4613      	mov	r3, r2
 8008554:	009b      	lsls	r3, r3, #2
 8008556:	4413      	add	r3, r2
 8008558:	009b      	lsls	r3, r3, #2
 800855a:	440b      	add	r3, r1
 800855c:	3311      	adds	r3, #17
 800855e:	781b      	ldrb	r3, [r3, #0]
 8008560:	2b00      	cmp	r3, #0
 8008562:	d156      	bne.n	8008612 <alloc_socket+0xee>
      sockets[i].conn       = newconn;
 8008564:	4932      	ldr	r1, [pc, #200]	; (8008630 <alloc_socket+0x10c>)
 8008566:	68fa      	ldr	r2, [r7, #12]
 8008568:	4613      	mov	r3, r2
 800856a:	009b      	lsls	r3, r3, #2
 800856c:	4413      	add	r3, r2
 800856e:	009b      	lsls	r3, r3, #2
 8008570:	440b      	add	r3, r1
 8008572:	687a      	ldr	r2, [r7, #4]
 8008574:	601a      	str	r2, [r3, #0]
      /* The socket is not yet known to anyone, so no need to protect
         after having marked it as used. */
      SYS_ARCH_UNPROTECT(lev);
 8008576:	68b8      	ldr	r0, [r7, #8]
 8008578:	f00a fd9c 	bl	80130b4 <sys_arch_unprotect>
      sockets[i].lastdata   = NULL;
 800857c:	492c      	ldr	r1, [pc, #176]	; (8008630 <alloc_socket+0x10c>)
 800857e:	68fa      	ldr	r2, [r7, #12]
 8008580:	4613      	mov	r3, r2
 8008582:	009b      	lsls	r3, r3, #2
 8008584:	4413      	add	r3, r2
 8008586:	009b      	lsls	r3, r3, #2
 8008588:	440b      	add	r3, r1
 800858a:	3304      	adds	r3, #4
 800858c:	2200      	movs	r2, #0
 800858e:	601a      	str	r2, [r3, #0]
      sockets[i].lastoffset = 0;
 8008590:	4927      	ldr	r1, [pc, #156]	; (8008630 <alloc_socket+0x10c>)
 8008592:	68fa      	ldr	r2, [r7, #12]
 8008594:	4613      	mov	r3, r2
 8008596:	009b      	lsls	r3, r3, #2
 8008598:	4413      	add	r3, r2
 800859a:	009b      	lsls	r3, r3, #2
 800859c:	440b      	add	r3, r1
 800859e:	3308      	adds	r3, #8
 80085a0:	2200      	movs	r2, #0
 80085a2:	801a      	strh	r2, [r3, #0]
      sockets[i].rcvevent   = 0;
 80085a4:	4922      	ldr	r1, [pc, #136]	; (8008630 <alloc_socket+0x10c>)
 80085a6:	68fa      	ldr	r2, [r7, #12]
 80085a8:	4613      	mov	r3, r2
 80085aa:	009b      	lsls	r3, r3, #2
 80085ac:	4413      	add	r3, r2
 80085ae:	009b      	lsls	r3, r3, #2
 80085b0:	440b      	add	r3, r1
 80085b2:	330a      	adds	r3, #10
 80085b4:	2200      	movs	r2, #0
 80085b6:	801a      	strh	r2, [r3, #0]
      /* TCP sendbuf is empty, but the socket is not yet writable until connected
       * (unless it has been created by accept()). */
      sockets[i].sendevent  = (NETCONNTYPE_GROUP(newconn->type) == NETCONN_TCP ? (accepted != 0) : 1);
 80085b8:	687b      	ldr	r3, [r7, #4]
 80085ba:	781b      	ldrb	r3, [r3, #0]
 80085bc:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80085c0:	2b10      	cmp	r3, #16
 80085c2:	d102      	bne.n	80085ca <alloc_socket+0xa6>
 80085c4:	683b      	ldr	r3, [r7, #0]
 80085c6:	2b00      	cmp	r3, #0
 80085c8:	d001      	beq.n	80085ce <alloc_socket+0xaa>
 80085ca:	2301      	movs	r3, #1
 80085cc:	e000      	b.n	80085d0 <alloc_socket+0xac>
 80085ce:	2300      	movs	r3, #0
 80085d0:	b298      	uxth	r0, r3
 80085d2:	4917      	ldr	r1, [pc, #92]	; (8008630 <alloc_socket+0x10c>)
 80085d4:	68fa      	ldr	r2, [r7, #12]
 80085d6:	4613      	mov	r3, r2
 80085d8:	009b      	lsls	r3, r3, #2
 80085da:	4413      	add	r3, r2
 80085dc:	009b      	lsls	r3, r3, #2
 80085de:	440b      	add	r3, r1
 80085e0:	330c      	adds	r3, #12
 80085e2:	4602      	mov	r2, r0
 80085e4:	801a      	strh	r2, [r3, #0]
      sockets[i].errevent   = 0;
 80085e6:	4912      	ldr	r1, [pc, #72]	; (8008630 <alloc_socket+0x10c>)
 80085e8:	68fa      	ldr	r2, [r7, #12]
 80085ea:	4613      	mov	r3, r2
 80085ec:	009b      	lsls	r3, r3, #2
 80085ee:	4413      	add	r3, r2
 80085f0:	009b      	lsls	r3, r3, #2
 80085f2:	440b      	add	r3, r1
 80085f4:	330e      	adds	r3, #14
 80085f6:	2200      	movs	r2, #0
 80085f8:	801a      	strh	r2, [r3, #0]
      sockets[i].err        = 0;
 80085fa:	490d      	ldr	r1, [pc, #52]	; (8008630 <alloc_socket+0x10c>)
 80085fc:	68fa      	ldr	r2, [r7, #12]
 80085fe:	4613      	mov	r3, r2
 8008600:	009b      	lsls	r3, r3, #2
 8008602:	4413      	add	r3, r2
 8008604:	009b      	lsls	r3, r3, #2
 8008606:	440b      	add	r3, r1
 8008608:	3310      	adds	r3, #16
 800860a:	2200      	movs	r2, #0
 800860c:	701a      	strb	r2, [r3, #0]
      return i + LWIP_SOCKET_OFFSET;
 800860e:	68fb      	ldr	r3, [r7, #12]
 8008610:	e00a      	b.n	8008628 <alloc_socket+0x104>
    }
    SYS_ARCH_UNPROTECT(lev);
 8008612:	68b8      	ldr	r0, [r7, #8]
 8008614:	f00a fd4e 	bl	80130b4 <sys_arch_unprotect>
  for (i = 0; i < NUM_SOCKETS; ++i) {
 8008618:	68fb      	ldr	r3, [r7, #12]
 800861a:	3301      	adds	r3, #1
 800861c:	60fb      	str	r3, [r7, #12]
 800861e:	68fb      	ldr	r3, [r7, #12]
 8008620:	2b03      	cmp	r3, #3
 8008622:	dd87      	ble.n	8008534 <alloc_socket+0x10>
  }
  return -1;
 8008624:	f04f 33ff 	mov.w	r3, #4294967295
}
 8008628:	4618      	mov	r0, r3
 800862a:	3710      	adds	r7, #16
 800862c:	46bd      	mov	sp, r7
 800862e:	bd80      	pop	{r7, pc}
 8008630:	24008560 	.word	0x24008560

08008634 <free_socket>:
 * @param sock the socket to free
 * @param is_tcp != 0 for TCP sockets, used to free lastdata
 */
static void
free_socket(struct lwip_sock *sock, int is_tcp)
{
 8008634:	b580      	push	{r7, lr}
 8008636:	b084      	sub	sp, #16
 8008638:	af00      	add	r7, sp, #0
 800863a:	6078      	str	r0, [r7, #4]
 800863c:	6039      	str	r1, [r7, #0]
  void *lastdata;

  lastdata         = sock->lastdata;
 800863e:	687b      	ldr	r3, [r7, #4]
 8008640:	685b      	ldr	r3, [r3, #4]
 8008642:	60fb      	str	r3, [r7, #12]
  sock->lastdata   = NULL;
 8008644:	687b      	ldr	r3, [r7, #4]
 8008646:	2200      	movs	r2, #0
 8008648:	605a      	str	r2, [r3, #4]
  sock->lastoffset = 0;
 800864a:	687b      	ldr	r3, [r7, #4]
 800864c:	2200      	movs	r2, #0
 800864e:	811a      	strh	r2, [r3, #8]
  sock->err        = 0;
 8008650:	687b      	ldr	r3, [r7, #4]
 8008652:	2200      	movs	r2, #0
 8008654:	741a      	strb	r2, [r3, #16]

  /* Protect socket array */
  SYS_ARCH_SET(sock->conn, NULL);
 8008656:	f00a fd1f 	bl	8013098 <sys_arch_protect>
 800865a:	60b8      	str	r0, [r7, #8]
 800865c:	687b      	ldr	r3, [r7, #4]
 800865e:	2200      	movs	r2, #0
 8008660:	601a      	str	r2, [r3, #0]
 8008662:	68b8      	ldr	r0, [r7, #8]
 8008664:	f00a fd26 	bl	80130b4 <sys_arch_unprotect>
  /* don't use 'sock' after this line, as another task might have allocated it */

  if (lastdata != NULL) {
 8008668:	68fb      	ldr	r3, [r7, #12]
 800866a:	2b00      	cmp	r3, #0
 800866c:	d009      	beq.n	8008682 <free_socket+0x4e>
    if (is_tcp) {
 800866e:	683b      	ldr	r3, [r7, #0]
 8008670:	2b00      	cmp	r3, #0
 8008672:	d003      	beq.n	800867c <free_socket+0x48>
      pbuf_free((struct pbuf *)lastdata);
 8008674:	68f8      	ldr	r0, [r7, #12]
 8008676:	f001 ff1b 	bl	800a4b0 <pbuf_free>
    } else {
      netbuf_delete((struct netbuf *)lastdata);
    }
  }
}
 800867a:	e002      	b.n	8008682 <free_socket+0x4e>
      netbuf_delete((struct netbuf *)lastdata);
 800867c:	68f8      	ldr	r0, [r7, #12]
 800867e:	f7ff fe93 	bl	80083a8 <netbuf_delete>
}
 8008682:	bf00      	nop
 8008684:	3710      	adds	r7, #16
 8008686:	46bd      	mov	sp, r7
 8008688:	bd80      	pop	{r7, pc}
	...

0800868c <lwip_close>:
  return 0;
}

int
lwip_close(int s)
{
 800868c:	b580      	push	{r7, lr}
 800868e:	b086      	sub	sp, #24
 8008690:	af00      	add	r7, sp, #0
 8008692:	6078      	str	r0, [r7, #4]
  struct lwip_sock *sock;
  int is_tcp = 0;
 8008694:	2300      	movs	r3, #0
 8008696:	617b      	str	r3, [r7, #20]
  err_t err;

  LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_close(%d)\n", s));

  sock = get_socket(s);
 8008698:	6878      	ldr	r0, [r7, #4]
 800869a:	f7ff ff17 	bl	80084cc <get_socket>
 800869e:	6138      	str	r0, [r7, #16]
  if (!sock) {
 80086a0:	693b      	ldr	r3, [r7, #16]
 80086a2:	2b00      	cmp	r3, #0
 80086a4:	d102      	bne.n	80086ac <lwip_close+0x20>
    return -1;
 80086a6:	f04f 33ff 	mov.w	r3, #4294967295
 80086aa:	e03d      	b.n	8008728 <lwip_close+0x9c>
  }

  if (sock->conn != NULL) {
 80086ac:	693b      	ldr	r3, [r7, #16]
 80086ae:	681b      	ldr	r3, [r3, #0]
 80086b0:	2b00      	cmp	r3, #0
 80086b2:	d00b      	beq.n	80086cc <lwip_close+0x40>
    is_tcp = NETCONNTYPE_GROUP(netconn_type(sock->conn)) == NETCONN_TCP;
 80086b4:	693b      	ldr	r3, [r7, #16]
 80086b6:	681b      	ldr	r3, [r3, #0]
 80086b8:	781b      	ldrb	r3, [r3, #0]
 80086ba:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80086be:	2b10      	cmp	r3, #16
 80086c0:	bf0c      	ite	eq
 80086c2:	2301      	moveq	r3, #1
 80086c4:	2300      	movne	r3, #0
 80086c6:	b2db      	uxtb	r3, r3
 80086c8:	617b      	str	r3, [r7, #20]
 80086ca:	e00a      	b.n	80086e2 <lwip_close+0x56>
  } else {
    LWIP_ASSERT("sock->lastdata == NULL", sock->lastdata == NULL);
 80086cc:	693b      	ldr	r3, [r7, #16]
 80086ce:	685b      	ldr	r3, [r3, #4]
 80086d0:	2b00      	cmp	r3, #0
 80086d2:	d006      	beq.n	80086e2 <lwip_close+0x56>
 80086d4:	4b16      	ldr	r3, [pc, #88]	; (8008730 <lwip_close+0xa4>)
 80086d6:	f44f 721c 	mov.w	r2, #624	; 0x270
 80086da:	4916      	ldr	r1, [pc, #88]	; (8008734 <lwip_close+0xa8>)
 80086dc:	4816      	ldr	r0, [pc, #88]	; (8008738 <lwip_close+0xac>)
 80086de:	f00d fa79 	bl	8015bd4 <printf_>
#if LWIP_IGMP
  /* drop all possibly joined IGMP memberships */
  lwip_socket_drop_registered_memberships(s);
#endif /* LWIP_IGMP */

  err = netconn_delete(sock->conn);
 80086e2:	693b      	ldr	r3, [r7, #16]
 80086e4:	681b      	ldr	r3, [r3, #0]
 80086e6:	4618      	mov	r0, r3
 80086e8:	f7fe f980 	bl	80069ec <netconn_delete>
 80086ec:	4603      	mov	r3, r0
 80086ee:	73fb      	strb	r3, [r7, #15]
  if (err != ERR_OK) {
 80086f0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80086f4:	2b00      	cmp	r3, #0
 80086f6:	d012      	beq.n	800871e <lwip_close+0x92>
    sock_set_errno(sock, err_to_errno(err));
 80086f8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80086fc:	4618      	mov	r0, r3
 80086fe:	f7ff fe35 	bl	800836c <err_to_errno>
 8008702:	60b8      	str	r0, [r7, #8]
 8008704:	68bb      	ldr	r3, [r7, #8]
 8008706:	b2da      	uxtb	r2, r3
 8008708:	693b      	ldr	r3, [r7, #16]
 800870a:	741a      	strb	r2, [r3, #16]
 800870c:	68bb      	ldr	r3, [r7, #8]
 800870e:	2b00      	cmp	r3, #0
 8008710:	d002      	beq.n	8008718 <lwip_close+0x8c>
 8008712:	4a0a      	ldr	r2, [pc, #40]	; (800873c <lwip_close+0xb0>)
 8008714:	68bb      	ldr	r3, [r7, #8]
 8008716:	6013      	str	r3, [r2, #0]
    return -1;
 8008718:	f04f 33ff 	mov.w	r3, #4294967295
 800871c:	e004      	b.n	8008728 <lwip_close+0x9c>
  }

  free_socket(sock, is_tcp);
 800871e:	6979      	ldr	r1, [r7, #20]
 8008720:	6938      	ldr	r0, [r7, #16]
 8008722:	f7ff ff87 	bl	8008634 <free_socket>
  set_errno(0);
  return 0;
 8008726:	2300      	movs	r3, #0
}
 8008728:	4618      	mov	r0, r3
 800872a:	3718      	adds	r7, #24
 800872c:	46bd      	mov	sp, r7
 800872e:	bd80      	pop	{r7, pc}
 8008730:	08019f04 	.word	0x08019f04
 8008734:	08019fe4 	.word	0x08019fe4
 8008738:	08019f48 	.word	0x08019f48
 800873c:	2400f304 	.word	0x2400f304

08008740 <lwip_connect>:

int
lwip_connect(int s, const struct sockaddr *name, socklen_t namelen)
{
 8008740:	b580      	push	{r7, lr}
 8008742:	b08c      	sub	sp, #48	; 0x30
 8008744:	af00      	add	r7, sp, #0
 8008746:	60f8      	str	r0, [r7, #12]
 8008748:	60b9      	str	r1, [r7, #8]
 800874a:	607a      	str	r2, [r7, #4]
  struct lwip_sock *sock;
  err_t err;

  sock = get_socket(s);
 800874c:	68f8      	ldr	r0, [r7, #12]
 800874e:	f7ff febd 	bl	80084cc <get_socket>
 8008752:	62b8      	str	r0, [r7, #40]	; 0x28
  if (!sock) {
 8008754:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008756:	2b00      	cmp	r3, #0
 8008758:	d102      	bne.n	8008760 <lwip_connect+0x20>
    return -1;
 800875a:	f04f 33ff 	mov.w	r3, #4294967295
 800875e:	e06e      	b.n	800883e <lwip_connect+0xfe>
    sock_set_errno(sock, err_to_errno(ERR_VAL));
    return -1;
  }

  LWIP_UNUSED_ARG(namelen);
  if (name->sa_family == AF_UNSPEC) {
 8008760:	68bb      	ldr	r3, [r7, #8]
 8008762:	785b      	ldrb	r3, [r3, #1]
 8008764:	2b00      	cmp	r3, #0
 8008766:	d108      	bne.n	800877a <lwip_connect+0x3a>
    LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_connect(%d, AF_UNSPEC)\n", s));
    err = netconn_disconnect(sock->conn);
 8008768:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800876a:	681b      	ldr	r3, [r3, #0]
 800876c:	4618      	mov	r0, r3
 800876e:	f7fe f99b 	bl	8006aa8 <netconn_disconnect>
 8008772:	4603      	mov	r3, r0
 8008774:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 8008778:	e03d      	b.n	80087f6 <lwip_connect+0xb6>
  } else {
    ip_addr_t remote_addr;
    u16_t remote_port;

    /* check size, family and alignment of 'name' */
    LWIP_ERROR("lwip_connect: invalid address", IS_SOCK_ADDR_LEN_VALID(namelen) &&
 800877a:	687b      	ldr	r3, [r7, #4]
 800877c:	2b10      	cmp	r3, #16
 800877e:	d10c      	bne.n	800879a <lwip_connect+0x5a>
 8008780:	68bb      	ldr	r3, [r7, #8]
 8008782:	785b      	ldrb	r3, [r3, #1]
 8008784:	2b00      	cmp	r3, #0
 8008786:	d003      	beq.n	8008790 <lwip_connect+0x50>
 8008788:	68bb      	ldr	r3, [r7, #8]
 800878a:	785b      	ldrb	r3, [r3, #1]
 800878c:	2b02      	cmp	r3, #2
 800878e:	d104      	bne.n	800879a <lwip_connect+0x5a>
 8008790:	68bb      	ldr	r3, [r7, #8]
 8008792:	f003 0303 	and.w	r3, r3, #3
 8008796:	2b00      	cmp	r3, #0
 8008798:	d018      	beq.n	80087cc <lwip_connect+0x8c>
 800879a:	4b2b      	ldr	r3, [pc, #172]	; (8008848 <lwip_connect+0x108>)
 800879c:	f240 229f 	movw	r2, #671	; 0x29f
 80087a0:	492a      	ldr	r1, [pc, #168]	; (800884c <lwip_connect+0x10c>)
 80087a2:	482b      	ldr	r0, [pc, #172]	; (8008850 <lwip_connect+0x110>)
 80087a4:	f00d fa16 	bl	8015bd4 <printf_>
 80087a8:	f06f 000f 	mvn.w	r0, #15
 80087ac:	f7ff fdde 	bl	800836c <err_to_errno>
 80087b0:	6238      	str	r0, [r7, #32]
 80087b2:	6a3b      	ldr	r3, [r7, #32]
 80087b4:	b2da      	uxtb	r2, r3
 80087b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80087b8:	741a      	strb	r2, [r3, #16]
 80087ba:	6a3b      	ldr	r3, [r7, #32]
 80087bc:	2b00      	cmp	r3, #0
 80087be:	d002      	beq.n	80087c6 <lwip_connect+0x86>
 80087c0:	4a24      	ldr	r2, [pc, #144]	; (8008854 <lwip_connect+0x114>)
 80087c2:	6a3b      	ldr	r3, [r7, #32]
 80087c4:	6013      	str	r3, [r2, #0]
 80087c6:	f04f 33ff 	mov.w	r3, #4294967295
 80087ca:	e038      	b.n	800883e <lwip_connect+0xfe>
               IS_SOCK_ADDR_TYPE_VALID_OR_UNSPEC(name) && IS_SOCK_ADDR_ALIGNED(name),
               sock_set_errno(sock, err_to_errno(ERR_ARG)); return -1;);

    SOCKADDR_TO_IPADDR_PORT(name, &remote_addr, remote_port);
 80087cc:	68bb      	ldr	r3, [r7, #8]
 80087ce:	685b      	ldr	r3, [r3, #4]
 80087d0:	617b      	str	r3, [r7, #20]
 80087d2:	68bb      	ldr	r3, [r7, #8]
 80087d4:	885b      	ldrh	r3, [r3, #2]
 80087d6:	4618      	mov	r0, r3
 80087d8:	f000 fc3e 	bl	8009058 <lwip_htons>
 80087dc:	4603      	mov	r3, r0
 80087de:	84fb      	strh	r3, [r7, #38]	; 0x26
      unmap_ipv4_mapped_ipv6(ip_2_ip4(&remote_addr), ip_2_ip6(&remote_addr));
      IP_SET_TYPE_VAL(remote_addr, IPADDR_TYPE_V4);
    }
#endif /* LWIP_IPV4 && LWIP_IPV6 */

    err = netconn_connect(sock->conn, &remote_addr, remote_port);
 80087e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80087e2:	681b      	ldr	r3, [r3, #0]
 80087e4:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 80087e6:	f107 0114 	add.w	r1, r7, #20
 80087ea:	4618      	mov	r0, r3
 80087ec:	f7fe f924 	bl	8006a38 <netconn_connect>
 80087f0:	4603      	mov	r3, r0
 80087f2:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  }

  if (err != ERR_OK) {
 80087f6:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 80087fa:	2b00      	cmp	r3, #0
 80087fc:	d012      	beq.n	8008824 <lwip_connect+0xe4>
    LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_connect(%d) failed, err=%d\n", s, err));
    sock_set_errno(sock, err_to_errno(err));
 80087fe:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 8008802:	4618      	mov	r0, r3
 8008804:	f7ff fdb2 	bl	800836c <err_to_errno>
 8008808:	61b8      	str	r0, [r7, #24]
 800880a:	69bb      	ldr	r3, [r7, #24]
 800880c:	b2da      	uxtb	r2, r3
 800880e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008810:	741a      	strb	r2, [r3, #16]
 8008812:	69bb      	ldr	r3, [r7, #24]
 8008814:	2b00      	cmp	r3, #0
 8008816:	d002      	beq.n	800881e <lwip_connect+0xde>
 8008818:	4a0e      	ldr	r2, [pc, #56]	; (8008854 <lwip_connect+0x114>)
 800881a:	69bb      	ldr	r3, [r7, #24]
 800881c:	6013      	str	r3, [r2, #0]
    return -1;
 800881e:	f04f 33ff 	mov.w	r3, #4294967295
 8008822:	e00c      	b.n	800883e <lwip_connect+0xfe>
  }

  LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_connect(%d) succeeded\n", s));
  sock_set_errno(sock, 0);
 8008824:	2300      	movs	r3, #0
 8008826:	61fb      	str	r3, [r7, #28]
 8008828:	69fb      	ldr	r3, [r7, #28]
 800882a:	b2da      	uxtb	r2, r3
 800882c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800882e:	741a      	strb	r2, [r3, #16]
 8008830:	69fb      	ldr	r3, [r7, #28]
 8008832:	2b00      	cmp	r3, #0
 8008834:	d002      	beq.n	800883c <lwip_connect+0xfc>
 8008836:	4a07      	ldr	r2, [pc, #28]	; (8008854 <lwip_connect+0x114>)
 8008838:	69fb      	ldr	r3, [r7, #28]
 800883a:	6013      	str	r3, [r2, #0]
  return 0;
 800883c:	2300      	movs	r3, #0
}
 800883e:	4618      	mov	r0, r3
 8008840:	3730      	adds	r7, #48	; 0x30
 8008842:	46bd      	mov	sp, r7
 8008844:	bd80      	pop	{r7, pc}
 8008846:	bf00      	nop
 8008848:	08019f04 	.word	0x08019f04
 800884c:	08019ffc 	.word	0x08019ffc
 8008850:	08019f48 	.word	0x08019f48
 8008854:	2400f304 	.word	0x2400f304

08008858 <lwip_send>:
  return lwip_recvfrom(s, mem, len, flags, NULL, NULL);
}

int
lwip_send(int s, const void *data, size_t size, int flags)
{
 8008858:	b580      	push	{r7, lr}
 800885a:	b08a      	sub	sp, #40	; 0x28
 800885c:	af02      	add	r7, sp, #8
 800885e:	60f8      	str	r0, [r7, #12]
 8008860:	60b9      	str	r1, [r7, #8]
 8008862:	607a      	str	r2, [r7, #4]
 8008864:	603b      	str	r3, [r7, #0]
  size_t written;

  LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_send(%d, data=%p, size=%"SZT_F", flags=0x%x)\n",
                              s, data, size, flags));

  sock = get_socket(s);
 8008866:	68f8      	ldr	r0, [r7, #12]
 8008868:	f7ff fe30 	bl	80084cc <get_socket>
 800886c:	61f8      	str	r0, [r7, #28]
  if (!sock) {
 800886e:	69fb      	ldr	r3, [r7, #28]
 8008870:	2b00      	cmp	r3, #0
 8008872:	d102      	bne.n	800887a <lwip_send+0x22>
    return -1;
 8008874:	f04f 33ff 	mov.w	r3, #4294967295
 8008878:	e04b      	b.n	8008912 <lwip_send+0xba>
  }

  if (NETCONNTYPE_GROUP(netconn_type(sock->conn)) != NETCONN_TCP) {
 800887a:	69fb      	ldr	r3, [r7, #28]
 800887c:	681b      	ldr	r3, [r3, #0]
 800887e:	781b      	ldrb	r3, [r3, #0]
 8008880:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8008884:	2b10      	cmp	r3, #16
 8008886:	d00b      	beq.n	80088a0 <lwip_send+0x48>
#if (LWIP_UDP || LWIP_RAW)
    return lwip_sendto(s, data, size, flags, NULL, 0);
 8008888:	2300      	movs	r3, #0
 800888a:	9301      	str	r3, [sp, #4]
 800888c:	2300      	movs	r3, #0
 800888e:	9300      	str	r3, [sp, #0]
 8008890:	683b      	ldr	r3, [r7, #0]
 8008892:	687a      	ldr	r2, [r7, #4]
 8008894:	68b9      	ldr	r1, [r7, #8]
 8008896:	68f8      	ldr	r0, [r7, #12]
 8008898:	f000 f842 	bl	8008920 <lwip_sendto>
 800889c:	4603      	mov	r3, r0
 800889e:	e038      	b.n	8008912 <lwip_send+0xba>
    return -1;
#endif /* (LWIP_UDP || LWIP_RAW) */
  }

  write_flags = NETCONN_COPY |
    ((flags & MSG_MORE)     ? NETCONN_MORE      : 0) |
 80088a0:	683b      	ldr	r3, [r7, #0]
 80088a2:	10db      	asrs	r3, r3, #3
 80088a4:	b25b      	sxtb	r3, r3
 80088a6:	f003 0302 	and.w	r3, r3, #2
 80088aa:	b25b      	sxtb	r3, r3
  write_flags = NETCONN_COPY |
 80088ac:	f043 0301 	orr.w	r3, r3, #1
 80088b0:	b25a      	sxtb	r2, r3
    ((flags & MSG_DONTWAIT) ? NETCONN_DONTBLOCK : 0);
 80088b2:	683b      	ldr	r3, [r7, #0]
 80088b4:	105b      	asrs	r3, r3, #1
 80088b6:	b25b      	sxtb	r3, r3
 80088b8:	f003 0304 	and.w	r3, r3, #4
 80088bc:	b25b      	sxtb	r3, r3
    ((flags & MSG_MORE)     ? NETCONN_MORE      : 0) |
 80088be:	4313      	orrs	r3, r2
 80088c0:	b25b      	sxtb	r3, r3
  write_flags = NETCONN_COPY |
 80088c2:	76fb      	strb	r3, [r7, #27]
  written = 0;
 80088c4:	2300      	movs	r3, #0
 80088c6:	613b      	str	r3, [r7, #16]
  err = netconn_write_partly(sock->conn, data, size, write_flags, &written);
 80088c8:	69fb      	ldr	r3, [r7, #28]
 80088ca:	6818      	ldr	r0, [r3, #0]
 80088cc:	7efa      	ldrb	r2, [r7, #27]
 80088ce:	f107 0310 	add.w	r3, r7, #16
 80088d2:	9300      	str	r3, [sp, #0]
 80088d4:	4613      	mov	r3, r2
 80088d6:	687a      	ldr	r2, [r7, #4]
 80088d8:	68b9      	ldr	r1, [r7, #8]
 80088da:	f7fe f93b 	bl	8006b54 <netconn_write_partly>
 80088de:	4603      	mov	r3, r0
 80088e0:	76bb      	strb	r3, [r7, #26]

  LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_send(%d) err=%d written=%"SZT_F"\n", s, err, written));
  sock_set_errno(sock, err_to_errno(err));
 80088e2:	f997 301a 	ldrsb.w	r3, [r7, #26]
 80088e6:	4618      	mov	r0, r3
 80088e8:	f7ff fd40 	bl	800836c <err_to_errno>
 80088ec:	6178      	str	r0, [r7, #20]
 80088ee:	697b      	ldr	r3, [r7, #20]
 80088f0:	b2da      	uxtb	r2, r3
 80088f2:	69fb      	ldr	r3, [r7, #28]
 80088f4:	741a      	strb	r2, [r3, #16]
 80088f6:	697b      	ldr	r3, [r7, #20]
 80088f8:	2b00      	cmp	r3, #0
 80088fa:	d002      	beq.n	8008902 <lwip_send+0xaa>
 80088fc:	4a07      	ldr	r2, [pc, #28]	; (800891c <lwip_send+0xc4>)
 80088fe:	697b      	ldr	r3, [r7, #20]
 8008900:	6013      	str	r3, [r2, #0]
  return (err == ERR_OK ? (int)written : -1);
 8008902:	f997 301a 	ldrsb.w	r3, [r7, #26]
 8008906:	2b00      	cmp	r3, #0
 8008908:	d101      	bne.n	800890e <lwip_send+0xb6>
 800890a:	693b      	ldr	r3, [r7, #16]
 800890c:	e001      	b.n	8008912 <lwip_send+0xba>
 800890e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8008912:	4618      	mov	r0, r3
 8008914:	3720      	adds	r7, #32
 8008916:	46bd      	mov	sp, r7
 8008918:	bd80      	pop	{r7, pc}
 800891a:	bf00      	nop
 800891c:	2400f304 	.word	0x2400f304

08008920 <lwip_sendto>:
}

int
lwip_sendto(int s, const void *data, size_t size, int flags,
       const struct sockaddr *to, socklen_t tolen)
{
 8008920:	b580      	push	{r7, lr}
 8008922:	b08e      	sub	sp, #56	; 0x38
 8008924:	af00      	add	r7, sp, #0
 8008926:	60f8      	str	r0, [r7, #12]
 8008928:	60b9      	str	r1, [r7, #8]
 800892a:	607a      	str	r2, [r7, #4]
 800892c:	603b      	str	r3, [r7, #0]
  err_t err;
  u16_t short_size;
  u16_t remote_port;
  struct netbuf buf;

  sock = get_socket(s);
 800892e:	68f8      	ldr	r0, [r7, #12]
 8008930:	f7ff fdcc 	bl	80084cc <get_socket>
 8008934:	6338      	str	r0, [r7, #48]	; 0x30
  if (!sock) {
 8008936:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008938:	2b00      	cmp	r3, #0
 800893a:	d102      	bne.n	8008942 <lwip_sendto+0x22>
    return -1;
 800893c:	f04f 33ff 	mov.w	r3, #4294967295
 8008940:	e094      	b.n	8008a6c <lwip_sendto+0x14c>
  }

  if (NETCONNTYPE_GROUP(netconn_type(sock->conn)) == NETCONN_TCP) {
 8008942:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008944:	681b      	ldr	r3, [r3, #0]
 8008946:	781b      	ldrb	r3, [r3, #0]
 8008948:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800894c:	2b10      	cmp	r3, #16
 800894e:	d107      	bne.n	8008960 <lwip_sendto+0x40>
#if LWIP_TCP
    return lwip_send(s, data, size, flags);
 8008950:	683b      	ldr	r3, [r7, #0]
 8008952:	687a      	ldr	r2, [r7, #4]
 8008954:	68b9      	ldr	r1, [r7, #8]
 8008956:	68f8      	ldr	r0, [r7, #12]
 8008958:	f7ff ff7e 	bl	8008858 <lwip_send>
 800895c:	4603      	mov	r3, r0
 800895e:	e085      	b.n	8008a6c <lwip_sendto+0x14c>
    return -1;
#endif /* LWIP_TCP */
  }

  /* @todo: split into multiple sendto's? */
  LWIP_ASSERT("lwip_sendto: size must fit in u16_t", size <= 0xffff);
 8008960:	687b      	ldr	r3, [r7, #4]
 8008962:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008966:	d306      	bcc.n	8008976 <lwip_sendto+0x56>
 8008968:	4b42      	ldr	r3, [pc, #264]	; (8008a74 <lwip_sendto+0x154>)
 800896a:	f240 427b 	movw	r2, #1147	; 0x47b
 800896e:	4942      	ldr	r1, [pc, #264]	; (8008a78 <lwip_sendto+0x158>)
 8008970:	4842      	ldr	r0, [pc, #264]	; (8008a7c <lwip_sendto+0x15c>)
 8008972:	f00d f92f 	bl	8015bd4 <printf_>
  short_size = (u16_t)size;
 8008976:	687b      	ldr	r3, [r7, #4]
 8008978:	85fb      	strh	r3, [r7, #46]	; 0x2e
  LWIP_ERROR("lwip_sendto: invalid address", (((to == NULL) && (tolen == 0)) ||
 800897a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800897c:	2b00      	cmp	r3, #0
 800897e:	d102      	bne.n	8008986 <lwip_sendto+0x66>
 8008980:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008982:	2b00      	cmp	r3, #0
 8008984:	d024      	beq.n	80089d0 <lwip_sendto+0xb0>
 8008986:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008988:	2b10      	cmp	r3, #16
 800898a:	d108      	bne.n	800899e <lwip_sendto+0x7e>
 800898c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800898e:	785b      	ldrb	r3, [r3, #1]
 8008990:	2b02      	cmp	r3, #2
 8008992:	d104      	bne.n	800899e <lwip_sendto+0x7e>
 8008994:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008996:	f003 0303 	and.w	r3, r3, #3
 800899a:	2b00      	cmp	r3, #0
 800899c:	d018      	beq.n	80089d0 <lwip_sendto+0xb0>
 800899e:	4b35      	ldr	r3, [pc, #212]	; (8008a74 <lwip_sendto+0x154>)
 80089a0:	f44f 6290 	mov.w	r2, #1152	; 0x480
 80089a4:	4936      	ldr	r1, [pc, #216]	; (8008a80 <lwip_sendto+0x160>)
 80089a6:	4835      	ldr	r0, [pc, #212]	; (8008a7c <lwip_sendto+0x15c>)
 80089a8:	f00d f914 	bl	8015bd4 <printf_>
 80089ac:	f06f 000f 	mvn.w	r0, #15
 80089b0:	f7ff fcdc 	bl	800836c <err_to_errno>
 80089b4:	62b8      	str	r0, [r7, #40]	; 0x28
 80089b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80089b8:	b2da      	uxtb	r2, r3
 80089ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80089bc:	741a      	strb	r2, [r3, #16]
 80089be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80089c0:	2b00      	cmp	r3, #0
 80089c2:	d002      	beq.n	80089ca <lwip_sendto+0xaa>
 80089c4:	4a2f      	ldr	r2, [pc, #188]	; (8008a84 <lwip_sendto+0x164>)
 80089c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80089c8:	6013      	str	r3, [r2, #0]
 80089ca:	f04f 33ff 	mov.w	r3, #4294967295
 80089ce:	e04d      	b.n	8008a6c <lwip_sendto+0x14c>
             IS_SOCK_ADDR_TYPE_VALID(to) && IS_SOCK_ADDR_ALIGNED(to))),
             sock_set_errno(sock, err_to_errno(ERR_ARG)); return -1;);
  LWIP_UNUSED_ARG(tolen);

  /* initialize a buffer */
  buf.p = buf.ptr = NULL;
 80089d0:	2300      	movs	r3, #0
 80089d2:	61bb      	str	r3, [r7, #24]
 80089d4:	69bb      	ldr	r3, [r7, #24]
 80089d6:	617b      	str	r3, [r7, #20]
#if LWIP_CHECKSUM_ON_COPY
  buf.flags = 0;
#endif /* LWIP_CHECKSUM_ON_COPY */
  if (to) {
 80089d8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80089da:	2b00      	cmp	r3, #0
 80089dc:	d00a      	beq.n	80089f4 <lwip_sendto+0xd4>
    SOCKADDR_TO_IPADDR_PORT(to, &buf.addr, remote_port);
 80089de:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80089e0:	685b      	ldr	r3, [r3, #4]
 80089e2:	61fb      	str	r3, [r7, #28]
 80089e4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80089e6:	885b      	ldrh	r3, [r3, #2]
 80089e8:	4618      	mov	r0, r3
 80089ea:	f000 fb35 	bl	8009058 <lwip_htons>
 80089ee:	4603      	mov	r3, r0
 80089f0:	86bb      	strh	r3, [r7, #52]	; 0x34
 80089f2:	e003      	b.n	80089fc <lwip_sendto+0xdc>
  } else {
    remote_port = 0;
 80089f4:	2300      	movs	r3, #0
 80089f6:	86bb      	strh	r3, [r7, #52]	; 0x34
    ip_addr_set_any(NETCONNTYPE_ISIPV6(netconn_type(sock->conn)), &buf.addr);
 80089f8:	2300      	movs	r3, #0
 80089fa:	61fb      	str	r3, [r7, #28]
  }
  netbuf_fromport(&buf) = remote_port;
 80089fc:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 80089fe:	843b      	strh	r3, [r7, #32]
      MEMCPY(buf.p->payload, data, short_size);
    }
    err = ERR_OK;
  }
#else /* LWIP_NETIF_TX_SINGLE_PBUF */
  err = netbuf_ref(&buf, data, short_size);
 8008a00:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8008a02:	f107 0314 	add.w	r3, r7, #20
 8008a06:	68b9      	ldr	r1, [r7, #8]
 8008a08:	4618      	mov	r0, r3
 8008a0a:	f7ff fd15 	bl	8008438 <netbuf_ref>
 8008a0e:	4603      	mov	r3, r0
 8008a10:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */
  if (err == ERR_OK) {
 8008a14:	f997 3037 	ldrsb.w	r3, [r7, #55]	; 0x37
 8008a18:	2b00      	cmp	r3, #0
 8008a1a:	d10a      	bne.n	8008a32 <lwip_sendto+0x112>
      IP_SET_TYPE_VAL(buf.addr, IPADDR_TYPE_V4);
    }
#endif /* LWIP_IPV4 && LWIP_IPV6 */

    /* send the data */
    err = netconn_send(sock->conn, &buf);
 8008a1c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008a1e:	681b      	ldr	r3, [r3, #0]
 8008a20:	f107 0214 	add.w	r2, r7, #20
 8008a24:	4611      	mov	r1, r2
 8008a26:	4618      	mov	r0, r3
 8008a28:	f7fe f868 	bl	8006afc <netconn_send>
 8008a2c:	4603      	mov	r3, r0
 8008a2e:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
  }

  /* deallocated the buffer */
  netbuf_free(&buf);
 8008a32:	f107 0314 	add.w	r3, r7, #20
 8008a36:	4618      	mov	r0, r3
 8008a38:	f7ff fcd6 	bl	80083e8 <netbuf_free>

  sock_set_errno(sock, err_to_errno(err));
 8008a3c:	f997 3037 	ldrsb.w	r3, [r7, #55]	; 0x37
 8008a40:	4618      	mov	r0, r3
 8008a42:	f7ff fc93 	bl	800836c <err_to_errno>
 8008a46:	6278      	str	r0, [r7, #36]	; 0x24
 8008a48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008a4a:	b2da      	uxtb	r2, r3
 8008a4c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008a4e:	741a      	strb	r2, [r3, #16]
 8008a50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008a52:	2b00      	cmp	r3, #0
 8008a54:	d002      	beq.n	8008a5c <lwip_sendto+0x13c>
 8008a56:	4a0b      	ldr	r2, [pc, #44]	; (8008a84 <lwip_sendto+0x164>)
 8008a58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008a5a:	6013      	str	r3, [r2, #0]
  return (err == ERR_OK ? short_size : -1);
 8008a5c:	f997 3037 	ldrsb.w	r3, [r7, #55]	; 0x37
 8008a60:	2b00      	cmp	r3, #0
 8008a62:	d101      	bne.n	8008a68 <lwip_sendto+0x148>
 8008a64:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8008a66:	e001      	b.n	8008a6c <lwip_sendto+0x14c>
 8008a68:	f04f 33ff 	mov.w	r3, #4294967295
}
 8008a6c:	4618      	mov	r0, r3
 8008a6e:	3738      	adds	r7, #56	; 0x38
 8008a70:	46bd      	mov	sp, r7
 8008a72:	bd80      	pop	{r7, pc}
 8008a74:	08019f04 	.word	0x08019f04
 8008a78:	0801a0c8 	.word	0x0801a0c8
 8008a7c:	08019f48 	.word	0x08019f48
 8008a80:	0801a0ec 	.word	0x0801a0ec
 8008a84:	2400f304 	.word	0x2400f304

08008a88 <lwip_socket>:

int
lwip_socket(int domain, int type, int protocol)
{
 8008a88:	b580      	push	{r7, lr}
 8008a8a:	b086      	sub	sp, #24
 8008a8c:	af00      	add	r7, sp, #0
 8008a8e:	60f8      	str	r0, [r7, #12]
 8008a90:	60b9      	str	r1, [r7, #8]
 8008a92:	607a      	str	r2, [r7, #4]
  int i;

  LWIP_UNUSED_ARG(domain); /* @todo: check this */

  /* create a netconn */
  switch (type) {
 8008a94:	68bb      	ldr	r3, [r7, #8]
 8008a96:	2b02      	cmp	r3, #2
 8008a98:	d00d      	beq.n	8008ab6 <lwip_socket+0x2e>
 8008a9a:	2b03      	cmp	r3, #3
 8008a9c:	d002      	beq.n	8008aa4 <lwip_socket+0x1c>
 8008a9e:	2b01      	cmp	r3, #1
 8008aa0:	d016      	beq.n	8008ad0 <lwip_socket+0x48>
 8008aa2:	e01c      	b.n	8008ade <lwip_socket+0x56>
  case SOCK_RAW:
    conn = netconn_new_with_proto_and_callback(DOMAIN_TO_NETCONN_TYPE(domain, NETCONN_RAW),
 8008aa4:	687b      	ldr	r3, [r7, #4]
 8008aa6:	b2db      	uxtb	r3, r3
 8008aa8:	4a21      	ldr	r2, [pc, #132]	; (8008b30 <lwip_socket+0xa8>)
 8008aaa:	4619      	mov	r1, r3
 8008aac:	2040      	movs	r0, #64	; 0x40
 8008aae:	f7fd ff23 	bl	80068f8 <netconn_new_with_proto_and_callback>
 8008ab2:	6178      	str	r0, [r7, #20]
                                               (u8_t)protocol, event_callback);
    LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_socket(%s, SOCK_RAW, %d) = ",
                                 domain == PF_INET ? "PF_INET" : "UNKNOWN", protocol));
    break;
 8008ab4:	e019      	b.n	8008aea <lwip_socket+0x62>
  case SOCK_DGRAM:
    conn = netconn_new_with_callback(DOMAIN_TO_NETCONN_TYPE(domain,
 8008ab6:	687b      	ldr	r3, [r7, #4]
 8008ab8:	2b88      	cmp	r3, #136	; 0x88
 8008aba:	d101      	bne.n	8008ac0 <lwip_socket+0x38>
 8008abc:	2321      	movs	r3, #33	; 0x21
 8008abe:	e000      	b.n	8008ac2 <lwip_socket+0x3a>
 8008ac0:	2320      	movs	r3, #32
 8008ac2:	4a1b      	ldr	r2, [pc, #108]	; (8008b30 <lwip_socket+0xa8>)
 8008ac4:	2100      	movs	r1, #0
 8008ac6:	4618      	mov	r0, r3
 8008ac8:	f7fd ff16 	bl	80068f8 <netconn_new_with_proto_and_callback>
 8008acc:	6178      	str	r0, [r7, #20]
                 ((protocol == IPPROTO_UDPLITE) ? NETCONN_UDPLITE : NETCONN_UDP)) ,
                 event_callback);
    LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_socket(%s, SOCK_DGRAM, %d) = ",
                                 domain == PF_INET ? "PF_INET" : "UNKNOWN", protocol));
    break;
 8008ace:	e00c      	b.n	8008aea <lwip_socket+0x62>
  case SOCK_STREAM:
    conn = netconn_new_with_callback(DOMAIN_TO_NETCONN_TYPE(domain, NETCONN_TCP), event_callback);
 8008ad0:	4a17      	ldr	r2, [pc, #92]	; (8008b30 <lwip_socket+0xa8>)
 8008ad2:	2100      	movs	r1, #0
 8008ad4:	2010      	movs	r0, #16
 8008ad6:	f7fd ff0f 	bl	80068f8 <netconn_new_with_proto_and_callback>
 8008ada:	6178      	str	r0, [r7, #20]
    LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_socket(%s, SOCK_STREAM, %d) = ",
                                 domain == PF_INET ? "PF_INET" : "UNKNOWN", protocol));
    break;
 8008adc:	e005      	b.n	8008aea <lwip_socket+0x62>
  default:
    LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_socket(%d, %d/UNKNOWN, %d) = -1\n",
                                 domain, type, protocol));
    set_errno(EINVAL);
 8008ade:	4b15      	ldr	r3, [pc, #84]	; (8008b34 <lwip_socket+0xac>)
 8008ae0:	2216      	movs	r2, #22
 8008ae2:	601a      	str	r2, [r3, #0]
    return -1;
 8008ae4:	f04f 33ff 	mov.w	r3, #4294967295
 8008ae8:	e01e      	b.n	8008b28 <lwip_socket+0xa0>
  }

  if (!conn) {
 8008aea:	697b      	ldr	r3, [r7, #20]
 8008aec:	2b00      	cmp	r3, #0
 8008aee:	d105      	bne.n	8008afc <lwip_socket+0x74>
    LWIP_DEBUGF(SOCKETS_DEBUG, ("-1 / ENOBUFS (could not create netconn)\n"));
    set_errno(ENOBUFS);
 8008af0:	4b10      	ldr	r3, [pc, #64]	; (8008b34 <lwip_socket+0xac>)
 8008af2:	2269      	movs	r2, #105	; 0x69
 8008af4:	601a      	str	r2, [r3, #0]
    return -1;
 8008af6:	f04f 33ff 	mov.w	r3, #4294967295
 8008afa:	e015      	b.n	8008b28 <lwip_socket+0xa0>
  }

  i = alloc_socket(conn, 0);
 8008afc:	2100      	movs	r1, #0
 8008afe:	6978      	ldr	r0, [r7, #20]
 8008b00:	f7ff fd10 	bl	8008524 <alloc_socket>
 8008b04:	6138      	str	r0, [r7, #16]

  if (i == -1) {
 8008b06:	693b      	ldr	r3, [r7, #16]
 8008b08:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008b0c:	d108      	bne.n	8008b20 <lwip_socket+0x98>
    netconn_delete(conn);
 8008b0e:	6978      	ldr	r0, [r7, #20]
 8008b10:	f7fd ff6c 	bl	80069ec <netconn_delete>
    set_errno(ENFILE);
 8008b14:	4b07      	ldr	r3, [pc, #28]	; (8008b34 <lwip_socket+0xac>)
 8008b16:	2217      	movs	r2, #23
 8008b18:	601a      	str	r2, [r3, #0]
    return -1;
 8008b1a:	f04f 33ff 	mov.w	r3, #4294967295
 8008b1e:	e003      	b.n	8008b28 <lwip_socket+0xa0>
  }
  conn->socket = i;
 8008b20:	697b      	ldr	r3, [r7, #20]
 8008b22:	693a      	ldr	r2, [r7, #16]
 8008b24:	619a      	str	r2, [r3, #24]
  LWIP_DEBUGF(SOCKETS_DEBUG, ("%d\n", i));
  set_errno(0);
  return i;
 8008b26:	693b      	ldr	r3, [r7, #16]
}
 8008b28:	4618      	mov	r0, r3
 8008b2a:	3718      	adds	r7, #24
 8008b2c:	46bd      	mov	sp, r7
 8008b2e:	bd80      	pop	{r7, pc}
 8008b30:	08008b5d 	.word	0x08008b5d
 8008b34:	2400f304 	.word	0x2400f304

08008b38 <lwip_write>:

int
lwip_write(int s, const void *data, size_t size)
{
 8008b38:	b580      	push	{r7, lr}
 8008b3a:	b084      	sub	sp, #16
 8008b3c:	af00      	add	r7, sp, #0
 8008b3e:	60f8      	str	r0, [r7, #12]
 8008b40:	60b9      	str	r1, [r7, #8]
 8008b42:	607a      	str	r2, [r7, #4]
  return lwip_send(s, data, size, 0);
 8008b44:	2300      	movs	r3, #0
 8008b46:	687a      	ldr	r2, [r7, #4]
 8008b48:	68b9      	ldr	r1, [r7, #8]
 8008b4a:	68f8      	ldr	r0, [r7, #12]
 8008b4c:	f7ff fe84 	bl	8008858 <lwip_send>
 8008b50:	4603      	mov	r3, r0
}
 8008b52:	4618      	mov	r0, r3
 8008b54:	3710      	adds	r7, #16
 8008b56:	46bd      	mov	sp, r7
 8008b58:	bd80      	pop	{r7, pc}
	...

08008b5c <event_callback>:
 * Callback registered in the netconn layer for each socket-netconn.
 * Processes recvevent (data available) and wakes up tasks waiting for select.
 */
static void
event_callback(struct netconn *conn, enum netconn_evt evt, u16_t len)
{
 8008b5c:	b580      	push	{r7, lr}
 8008b5e:	b088      	sub	sp, #32
 8008b60:	af00      	add	r7, sp, #0
 8008b62:	6078      	str	r0, [r7, #4]
 8008b64:	460b      	mov	r3, r1
 8008b66:	70fb      	strb	r3, [r7, #3]
 8008b68:	4613      	mov	r3, r2
 8008b6a:	803b      	strh	r3, [r7, #0]
  SYS_ARCH_DECL_PROTECT(lev);

  LWIP_UNUSED_ARG(len);

  /* Get socket */
  if (conn) {
 8008b6c:	687b      	ldr	r3, [r7, #4]
 8008b6e:	2b00      	cmp	r3, #0
 8008b70:	f000 80eb 	beq.w	8008d4a <event_callback+0x1ee>
    s = conn->socket;
 8008b74:	687b      	ldr	r3, [r7, #4]
 8008b76:	699b      	ldr	r3, [r3, #24]
 8008b78:	61fb      	str	r3, [r7, #28]
    if (s < 0) {
 8008b7a:	69fb      	ldr	r3, [r7, #28]
 8008b7c:	2b00      	cmp	r3, #0
 8008b7e:	da18      	bge.n	8008bb2 <event_callback+0x56>
      /* Data comes in right away after an accept, even though
       * the server task might not have created a new socket yet.
       * Just count down (or up) if that's the case and we
       * will use the data later. Note that only receive events
       * can happen before the new socket is set up. */
      SYS_ARCH_PROTECT(lev);
 8008b80:	f00a fa8a 	bl	8013098 <sys_arch_protect>
 8008b84:	6178      	str	r0, [r7, #20]
      if (conn->socket < 0) {
 8008b86:	687b      	ldr	r3, [r7, #4]
 8008b88:	699b      	ldr	r3, [r3, #24]
 8008b8a:	2b00      	cmp	r3, #0
 8008b8c:	da0b      	bge.n	8008ba6 <event_callback+0x4a>
        if (evt == NETCONN_EVT_RCVPLUS) {
 8008b8e:	78fb      	ldrb	r3, [r7, #3]
 8008b90:	2b00      	cmp	r3, #0
 8008b92:	d104      	bne.n	8008b9e <event_callback+0x42>
          conn->socket--;
 8008b94:	687b      	ldr	r3, [r7, #4]
 8008b96:	699b      	ldr	r3, [r3, #24]
 8008b98:	1e5a      	subs	r2, r3, #1
 8008b9a:	687b      	ldr	r3, [r7, #4]
 8008b9c:	619a      	str	r2, [r3, #24]
        }
        SYS_ARCH_UNPROTECT(lev);
 8008b9e:	6978      	ldr	r0, [r7, #20]
 8008ba0:	f00a fa88 	bl	80130b4 <sys_arch_unprotect>
        return;
 8008ba4:	e0d4      	b.n	8008d50 <event_callback+0x1f4>
      }
      s = conn->socket;
 8008ba6:	687b      	ldr	r3, [r7, #4]
 8008ba8:	699b      	ldr	r3, [r3, #24]
 8008baa:	61fb      	str	r3, [r7, #28]
      SYS_ARCH_UNPROTECT(lev);
 8008bac:	6978      	ldr	r0, [r7, #20]
 8008bae:	f00a fa81 	bl	80130b4 <sys_arch_unprotect>
    }

    sock = get_socket(s);
 8008bb2:	69f8      	ldr	r0, [r7, #28]
 8008bb4:	f7ff fc8a 	bl	80084cc <get_socket>
 8008bb8:	60f8      	str	r0, [r7, #12]
    if (!sock) {
 8008bba:	68fb      	ldr	r3, [r7, #12]
 8008bbc:	2b00      	cmp	r3, #0
 8008bbe:	f000 80c6 	beq.w	8008d4e <event_callback+0x1f2>
    }
  } else {
    return;
  }

  SYS_ARCH_PROTECT(lev);
 8008bc2:	f00a fa69 	bl	8013098 <sys_arch_protect>
 8008bc6:	6178      	str	r0, [r7, #20]
  /* Set event as required */
  switch (evt) {
 8008bc8:	78fb      	ldrb	r3, [r7, #3]
 8008bca:	2b04      	cmp	r3, #4
 8008bcc:	d82c      	bhi.n	8008c28 <event_callback+0xcc>
 8008bce:	a201      	add	r2, pc, #4	; (adr r2, 8008bd4 <event_callback+0x78>)
 8008bd0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008bd4:	08008be9 	.word	0x08008be9
 8008bd8:	08008bfd 	.word	0x08008bfd
 8008bdc:	08008c11 	.word	0x08008c11
 8008be0:	08008c19 	.word	0x08008c19
 8008be4:	08008c21 	.word	0x08008c21
    case NETCONN_EVT_RCVPLUS:
      sock->rcvevent++;
 8008be8:	68fb      	ldr	r3, [r7, #12]
 8008bea:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 8008bee:	b29b      	uxth	r3, r3
 8008bf0:	3301      	adds	r3, #1
 8008bf2:	b29b      	uxth	r3, r3
 8008bf4:	b21a      	sxth	r2, r3
 8008bf6:	68fb      	ldr	r3, [r7, #12]
 8008bf8:	815a      	strh	r2, [r3, #10]
      break;
 8008bfa:	e01d      	b.n	8008c38 <event_callback+0xdc>
    case NETCONN_EVT_RCVMINUS:
      sock->rcvevent--;
 8008bfc:	68fb      	ldr	r3, [r7, #12]
 8008bfe:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 8008c02:	b29b      	uxth	r3, r3
 8008c04:	3b01      	subs	r3, #1
 8008c06:	b29b      	uxth	r3, r3
 8008c08:	b21a      	sxth	r2, r3
 8008c0a:	68fb      	ldr	r3, [r7, #12]
 8008c0c:	815a      	strh	r2, [r3, #10]
      break;
 8008c0e:	e013      	b.n	8008c38 <event_callback+0xdc>
    case NETCONN_EVT_SENDPLUS:
      sock->sendevent = 1;
 8008c10:	68fb      	ldr	r3, [r7, #12]
 8008c12:	2201      	movs	r2, #1
 8008c14:	819a      	strh	r2, [r3, #12]
      break;
 8008c16:	e00f      	b.n	8008c38 <event_callback+0xdc>
    case NETCONN_EVT_SENDMINUS:
      sock->sendevent = 0;
 8008c18:	68fb      	ldr	r3, [r7, #12]
 8008c1a:	2200      	movs	r2, #0
 8008c1c:	819a      	strh	r2, [r3, #12]
      break;
 8008c1e:	e00b      	b.n	8008c38 <event_callback+0xdc>
    case NETCONN_EVT_ERROR:
      sock->errevent = 1;
 8008c20:	68fb      	ldr	r3, [r7, #12]
 8008c22:	2201      	movs	r2, #1
 8008c24:	81da      	strh	r2, [r3, #14]
      break;
 8008c26:	e007      	b.n	8008c38 <event_callback+0xdc>
    default:
      LWIP_ASSERT("unknown event", 0);
 8008c28:	4b4b      	ldr	r3, [pc, #300]	; (8008d58 <event_callback+0x1fc>)
 8008c2a:	f240 625d 	movw	r2, #1629	; 0x65d
 8008c2e:	494b      	ldr	r1, [pc, #300]	; (8008d5c <event_callback+0x200>)
 8008c30:	484b      	ldr	r0, [pc, #300]	; (8008d60 <event_callback+0x204>)
 8008c32:	f00c ffcf 	bl	8015bd4 <printf_>
      break;
 8008c36:	bf00      	nop
  }

  if (sock->select_waiting == 0) {
 8008c38:	68fb      	ldr	r3, [r7, #12]
 8008c3a:	7c5b      	ldrb	r3, [r3, #17]
 8008c3c:	2b00      	cmp	r3, #0
 8008c3e:	d103      	bne.n	8008c48 <event_callback+0xec>
    /* noone is waiting for this socket, no need to check select_cb_list */
    SYS_ARCH_UNPROTECT(lev);
 8008c40:	6978      	ldr	r0, [r7, #20]
 8008c42:	f00a fa37 	bl	80130b4 <sys_arch_unprotect>
    return;
 8008c46:	e083      	b.n	8008d50 <event_callback+0x1f4>
  /* NOTE: This code goes through the select_cb_list list multiple times
     ONLY IF a select was actually waiting. We go through the list the number
     of waiting select calls + 1. This list is expected to be small. */

  /* At this point, SYS_ARCH is still protected! */
again:
 8008c48:	bf00      	nop
  for (scb = select_cb_list; scb != NULL; scb = scb->next) {
 8008c4a:	4b46      	ldr	r3, [pc, #280]	; (8008d64 <event_callback+0x208>)
 8008c4c:	681b      	ldr	r3, [r3, #0]
 8008c4e:	61bb      	str	r3, [r7, #24]
 8008c50:	e074      	b.n	8008d3c <event_callback+0x1e0>
    /* remember the state of select_cb_list to detect changes */
    last_select_cb_ctr = select_cb_ctr;
 8008c52:	4b45      	ldr	r3, [pc, #276]	; (8008d68 <event_callback+0x20c>)
 8008c54:	681b      	ldr	r3, [r3, #0]
 8008c56:	60bb      	str	r3, [r7, #8]
    if (scb->sem_signalled == 0) {
 8008c58:	69bb      	ldr	r3, [r7, #24]
 8008c5a:	695b      	ldr	r3, [r3, #20]
 8008c5c:	2b00      	cmp	r3, #0
 8008c5e:	d15e      	bne.n	8008d1e <event_callback+0x1c2>
      /* semaphore not signalled yet */
      int do_signal = 0;
 8008c60:	2300      	movs	r3, #0
 8008c62:	613b      	str	r3, [r7, #16]
      /* Test this select call for our socket */
      if (sock->rcvevent > 0) {
 8008c64:	68fb      	ldr	r3, [r7, #12]
 8008c66:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 8008c6a:	2b00      	cmp	r3, #0
 8008c6c:	dd14      	ble.n	8008c98 <event_callback+0x13c>
        if (scb->readset && FD_ISSET(s, scb->readset)) {
 8008c6e:	69bb      	ldr	r3, [r7, #24]
 8008c70:	689b      	ldr	r3, [r3, #8]
 8008c72:	2b00      	cmp	r3, #0
 8008c74:	d010      	beq.n	8008c98 <event_callback+0x13c>
 8008c76:	69bb      	ldr	r3, [r7, #24]
 8008c78:	689b      	ldr	r3, [r3, #8]
 8008c7a:	69fa      	ldr	r2, [r7, #28]
 8008c7c:	0952      	lsrs	r2, r2, #5
 8008c7e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008c82:	69fa      	ldr	r2, [r7, #28]
 8008c84:	f002 021f 	and.w	r2, r2, #31
 8008c88:	2101      	movs	r1, #1
 8008c8a:	fa01 f202 	lsl.w	r2, r1, r2
 8008c8e:	4013      	ands	r3, r2
 8008c90:	2b00      	cmp	r3, #0
 8008c92:	d001      	beq.n	8008c98 <event_callback+0x13c>
          do_signal = 1;
 8008c94:	2301      	movs	r3, #1
 8008c96:	613b      	str	r3, [r7, #16]
        }
      }
      if (sock->sendevent != 0) {
 8008c98:	68fb      	ldr	r3, [r7, #12]
 8008c9a:	899b      	ldrh	r3, [r3, #12]
 8008c9c:	2b00      	cmp	r3, #0
 8008c9e:	d017      	beq.n	8008cd0 <event_callback+0x174>
        if (!do_signal && scb->writeset && FD_ISSET(s, scb->writeset)) {
 8008ca0:	693b      	ldr	r3, [r7, #16]
 8008ca2:	2b00      	cmp	r3, #0
 8008ca4:	d114      	bne.n	8008cd0 <event_callback+0x174>
 8008ca6:	69bb      	ldr	r3, [r7, #24]
 8008ca8:	68db      	ldr	r3, [r3, #12]
 8008caa:	2b00      	cmp	r3, #0
 8008cac:	d010      	beq.n	8008cd0 <event_callback+0x174>
 8008cae:	69bb      	ldr	r3, [r7, #24]
 8008cb0:	68db      	ldr	r3, [r3, #12]
 8008cb2:	69fa      	ldr	r2, [r7, #28]
 8008cb4:	0952      	lsrs	r2, r2, #5
 8008cb6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008cba:	69fa      	ldr	r2, [r7, #28]
 8008cbc:	f002 021f 	and.w	r2, r2, #31
 8008cc0:	2101      	movs	r1, #1
 8008cc2:	fa01 f202 	lsl.w	r2, r1, r2
 8008cc6:	4013      	ands	r3, r2
 8008cc8:	2b00      	cmp	r3, #0
 8008cca:	d001      	beq.n	8008cd0 <event_callback+0x174>
          do_signal = 1;
 8008ccc:	2301      	movs	r3, #1
 8008cce:	613b      	str	r3, [r7, #16]
        }
      }
      if (sock->errevent != 0) {
 8008cd0:	68fb      	ldr	r3, [r7, #12]
 8008cd2:	89db      	ldrh	r3, [r3, #14]
 8008cd4:	2b00      	cmp	r3, #0
 8008cd6:	d017      	beq.n	8008d08 <event_callback+0x1ac>
        if (!do_signal && scb->exceptset && FD_ISSET(s, scb->exceptset)) {
 8008cd8:	693b      	ldr	r3, [r7, #16]
 8008cda:	2b00      	cmp	r3, #0
 8008cdc:	d114      	bne.n	8008d08 <event_callback+0x1ac>
 8008cde:	69bb      	ldr	r3, [r7, #24]
 8008ce0:	691b      	ldr	r3, [r3, #16]
 8008ce2:	2b00      	cmp	r3, #0
 8008ce4:	d010      	beq.n	8008d08 <event_callback+0x1ac>
 8008ce6:	69bb      	ldr	r3, [r7, #24]
 8008ce8:	691b      	ldr	r3, [r3, #16]
 8008cea:	69fa      	ldr	r2, [r7, #28]
 8008cec:	0952      	lsrs	r2, r2, #5
 8008cee:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008cf2:	69fa      	ldr	r2, [r7, #28]
 8008cf4:	f002 021f 	and.w	r2, r2, #31
 8008cf8:	2101      	movs	r1, #1
 8008cfa:	fa01 f202 	lsl.w	r2, r1, r2
 8008cfe:	4013      	ands	r3, r2
 8008d00:	2b00      	cmp	r3, #0
 8008d02:	d001      	beq.n	8008d08 <event_callback+0x1ac>
          do_signal = 1;
 8008d04:	2301      	movs	r3, #1
 8008d06:	613b      	str	r3, [r7, #16]
        }
      }
      if (do_signal) {
 8008d08:	693b      	ldr	r3, [r7, #16]
 8008d0a:	2b00      	cmp	r3, #0
 8008d0c:	d007      	beq.n	8008d1e <event_callback+0x1c2>
        scb->sem_signalled = 1;
 8008d0e:	69bb      	ldr	r3, [r7, #24]
 8008d10:	2201      	movs	r2, #1
 8008d12:	615a      	str	r2, [r3, #20]
        /* Don't call SYS_ARCH_UNPROTECT() before signaling the semaphore, as this might
           lead to the select thread taking itself off the list, invalidating the semaphore. */
        sys_sem_signal(SELECT_SEM_PTR(scb->sem));
 8008d14:	69bb      	ldr	r3, [r7, #24]
 8008d16:	3318      	adds	r3, #24
 8008d18:	4618      	mov	r0, r3
 8008d1a:	f00a f922 	bl	8012f62 <sys_sem_signal>
      }
    }
    /* unlock interrupts with each step */
    SYS_ARCH_UNPROTECT(lev);
 8008d1e:	6978      	ldr	r0, [r7, #20]
 8008d20:	f00a f9c8 	bl	80130b4 <sys_arch_unprotect>
    /* this makes sure interrupt protection time is short */
    SYS_ARCH_PROTECT(lev);
 8008d24:	f00a f9b8 	bl	8013098 <sys_arch_protect>
 8008d28:	6178      	str	r0, [r7, #20]
    if (last_select_cb_ctr != select_cb_ctr) {
 8008d2a:	4b0f      	ldr	r3, [pc, #60]	; (8008d68 <event_callback+0x20c>)
 8008d2c:	681b      	ldr	r3, [r3, #0]
 8008d2e:	68ba      	ldr	r2, [r7, #8]
 8008d30:	429a      	cmp	r2, r3
 8008d32:	d000      	beq.n	8008d36 <event_callback+0x1da>
      /* someone has changed select_cb_list, restart at the beginning */
      goto again;
 8008d34:	e789      	b.n	8008c4a <event_callback+0xee>
  for (scb = select_cb_list; scb != NULL; scb = scb->next) {
 8008d36:	69bb      	ldr	r3, [r7, #24]
 8008d38:	681b      	ldr	r3, [r3, #0]
 8008d3a:	61bb      	str	r3, [r7, #24]
 8008d3c:	69bb      	ldr	r3, [r7, #24]
 8008d3e:	2b00      	cmp	r3, #0
 8008d40:	d187      	bne.n	8008c52 <event_callback+0xf6>
    }
  }
  SYS_ARCH_UNPROTECT(lev);
 8008d42:	6978      	ldr	r0, [r7, #20]
 8008d44:	f00a f9b6 	bl	80130b4 <sys_arch_unprotect>
 8008d48:	e002      	b.n	8008d50 <event_callback+0x1f4>
    return;
 8008d4a:	bf00      	nop
 8008d4c:	e000      	b.n	8008d50 <event_callback+0x1f4>
      return;
 8008d4e:	bf00      	nop
}
 8008d50:	3720      	adds	r7, #32
 8008d52:	46bd      	mov	sp, r7
 8008d54:	bd80      	pop	{r7, pc}
 8008d56:	bf00      	nop
 8008d58:	08019f04 	.word	0x08019f04
 8008d5c:	0801a164 	.word	0x0801a164
 8008d60:	08019f48 	.word	0x08019f48
 8008d64:	240085b0 	.word	0x240085b0
 8008d68:	240085b4 	.word	0x240085b4

08008d6c <tcpip_thread>:
 *
 * @param arg unused argument
 */
static void
tcpip_thread(void *arg)
{
 8008d6c:	b580      	push	{r7, lr}
 8008d6e:	b084      	sub	sp, #16
 8008d70:	af00      	add	r7, sp, #0
 8008d72:	6078      	str	r0, [r7, #4]
  struct tcpip_msg *msg;
  LWIP_UNUSED_ARG(arg);

  if (tcpip_init_done != NULL) {
 8008d74:	4b29      	ldr	r3, [pc, #164]	; (8008e1c <tcpip_thread+0xb0>)
 8008d76:	681b      	ldr	r3, [r3, #0]
 8008d78:	2b00      	cmp	r3, #0
 8008d7a:	d005      	beq.n	8008d88 <tcpip_thread+0x1c>
    tcpip_init_done(tcpip_init_done_arg);
 8008d7c:	4b27      	ldr	r3, [pc, #156]	; (8008e1c <tcpip_thread+0xb0>)
 8008d7e:	681b      	ldr	r3, [r3, #0]
 8008d80:	4a27      	ldr	r2, [pc, #156]	; (8008e20 <tcpip_thread+0xb4>)
 8008d82:	6812      	ldr	r2, [r2, #0]
 8008d84:	4610      	mov	r0, r2
 8008d86:	4798      	blx	r3
  }

  LOCK_TCPIP_CORE();
 8008d88:	4826      	ldr	r0, [pc, #152]	; (8008e24 <tcpip_thread+0xb8>)
 8008d8a:	f00a f94b 	bl	8013024 <sys_mutex_lock>
  while (1) {                          /* MAIN Loop */
    UNLOCK_TCPIP_CORE();
 8008d8e:	4825      	ldr	r0, [pc, #148]	; (8008e24 <tcpip_thread+0xb8>)
 8008d90:	f00a f957 	bl	8013042 <sys_mutex_unlock>
    LWIP_TCPIP_THREAD_ALIVE();
    /* wait for a message, timeouts are processed while waiting */
    TCPIP_MBOX_FETCH(&mbox, (void **)&msg);
 8008d94:	f107 030c 	add.w	r3, r7, #12
 8008d98:	4619      	mov	r1, r3
 8008d9a:	4823      	ldr	r0, [pc, #140]	; (8008e28 <tcpip_thread+0xbc>)
 8008d9c:	f007 f95c 	bl	8010058 <sys_timeouts_mbox_fetch>
    LOCK_TCPIP_CORE();
 8008da0:	4820      	ldr	r0, [pc, #128]	; (8008e24 <tcpip_thread+0xb8>)
 8008da2:	f00a f93f 	bl	8013024 <sys_mutex_lock>
    if (msg == NULL) {
 8008da6:	68fb      	ldr	r3, [r7, #12]
 8008da8:	2b00      	cmp	r3, #0
 8008daa:	d106      	bne.n	8008dba <tcpip_thread+0x4e>
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: invalid message: NULL\n"));
      LWIP_ASSERT("tcpip_thread: invalid message", 0);
 8008dac:	4b1f      	ldr	r3, [pc, #124]	; (8008e2c <tcpip_thread+0xc0>)
 8008dae:	2269      	movs	r2, #105	; 0x69
 8008db0:	491f      	ldr	r1, [pc, #124]	; (8008e30 <tcpip_thread+0xc4>)
 8008db2:	4820      	ldr	r0, [pc, #128]	; (8008e34 <tcpip_thread+0xc8>)
 8008db4:	f00c ff0e 	bl	8015bd4 <printf_>
      continue;
 8008db8:	e02f      	b.n	8008e1a <tcpip_thread+0xae>
    }
    switch (msg->type) {
 8008dba:	68fb      	ldr	r3, [r7, #12]
 8008dbc:	781b      	ldrb	r3, [r3, #0]
 8008dbe:	2b03      	cmp	r3, #3
 8008dc0:	d011      	beq.n	8008de6 <tcpip_thread+0x7a>
 8008dc2:	2b04      	cmp	r3, #4
 8008dc4:	d01b      	beq.n	8008dfe <tcpip_thread+0x92>
 8008dc6:	2b02      	cmp	r3, #2
 8008dc8:	d120      	bne.n	8008e0c <tcpip_thread+0xa0>
#endif /* !LWIP_TCPIP_CORE_LOCKING */

#if !LWIP_TCPIP_CORE_LOCKING_INPUT
    case TCPIP_MSG_INPKT:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: PACKET %p\n", (void *)msg));
      msg->msg.inp.input_fn(msg->msg.inp.p, msg->msg.inp.netif);
 8008dca:	68fb      	ldr	r3, [r7, #12]
 8008dcc:	68db      	ldr	r3, [r3, #12]
 8008dce:	68fa      	ldr	r2, [r7, #12]
 8008dd0:	6850      	ldr	r0, [r2, #4]
 8008dd2:	68fa      	ldr	r2, [r7, #12]
 8008dd4:	6892      	ldr	r2, [r2, #8]
 8008dd6:	4611      	mov	r1, r2
 8008dd8:	4798      	blx	r3
      memp_free(MEMP_TCPIP_MSG_INPKT, msg);
 8008dda:	68fb      	ldr	r3, [r7, #12]
 8008ddc:	4619      	mov	r1, r3
 8008dde:	2009      	movs	r0, #9
 8008de0:	f000 fdbc 	bl	800995c <memp_free>
      break;
 8008de4:	e019      	b.n	8008e1a <tcpip_thread+0xae>
      break;
#endif /* LWIP_TCPIP_TIMEOUT && LWIP_TIMERS */

    case TCPIP_MSG_CALLBACK:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: CALLBACK %p\n", (void *)msg));
      msg->msg.cb.function(msg->msg.cb.ctx);
 8008de6:	68fb      	ldr	r3, [r7, #12]
 8008de8:	685b      	ldr	r3, [r3, #4]
 8008dea:	68fa      	ldr	r2, [r7, #12]
 8008dec:	6892      	ldr	r2, [r2, #8]
 8008dee:	4610      	mov	r0, r2
 8008df0:	4798      	blx	r3
      memp_free(MEMP_TCPIP_MSG_API, msg);
 8008df2:	68fb      	ldr	r3, [r7, #12]
 8008df4:	4619      	mov	r1, r3
 8008df6:	2008      	movs	r0, #8
 8008df8:	f000 fdb0 	bl	800995c <memp_free>
      break;
 8008dfc:	e00d      	b.n	8008e1a <tcpip_thread+0xae>

    case TCPIP_MSG_CALLBACK_STATIC:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: CALLBACK_STATIC %p\n", (void *)msg));
      msg->msg.cb.function(msg->msg.cb.ctx);
 8008dfe:	68fb      	ldr	r3, [r7, #12]
 8008e00:	685b      	ldr	r3, [r3, #4]
 8008e02:	68fa      	ldr	r2, [r7, #12]
 8008e04:	6892      	ldr	r2, [r2, #8]
 8008e06:	4610      	mov	r0, r2
 8008e08:	4798      	blx	r3
      break;
 8008e0a:	e006      	b.n	8008e1a <tcpip_thread+0xae>

    default:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: invalid message: %d\n", msg->type));
      LWIP_ASSERT("tcpip_thread: invalid message", 0);
 8008e0c:	4b07      	ldr	r3, [pc, #28]	; (8008e2c <tcpip_thread+0xc0>)
 8008e0e:	229b      	movs	r2, #155	; 0x9b
 8008e10:	4907      	ldr	r1, [pc, #28]	; (8008e30 <tcpip_thread+0xc4>)
 8008e12:	4808      	ldr	r0, [pc, #32]	; (8008e34 <tcpip_thread+0xc8>)
 8008e14:	f00c fede 	bl	8015bd4 <printf_>
      break;
 8008e18:	bf00      	nop
    UNLOCK_TCPIP_CORE();
 8008e1a:	e7b8      	b.n	8008d8e <tcpip_thread+0x22>
 8008e1c:	240085b8 	.word	0x240085b8
 8008e20:	240085bc 	.word	0x240085bc
 8008e24:	240087a8 	.word	0x240087a8
 8008e28:	240085c0 	.word	0x240085c0
 8008e2c:	0801a174 	.word	0x0801a174
 8008e30:	0801a1a4 	.word	0x0801a1a4
 8008e34:	0801a1c4 	.word	0x0801a1c4

08008e38 <tcpip_inpkt>:
 * @param inp the network interface on which the packet was received
 * @param input_fn input function to call
 */
err_t
tcpip_inpkt(struct pbuf *p, struct netif *inp, netif_input_fn input_fn)
{
 8008e38:	b580      	push	{r7, lr}
 8008e3a:	b086      	sub	sp, #24
 8008e3c:	af00      	add	r7, sp, #0
 8008e3e:	60f8      	str	r0, [r7, #12]
 8008e40:	60b9      	str	r1, [r7, #8]
 8008e42:	607a      	str	r2, [r7, #4]
  UNLOCK_TCPIP_CORE();
  return ret;
#else /* LWIP_TCPIP_CORE_LOCKING_INPUT */
  struct tcpip_msg *msg;

  LWIP_ASSERT("Invalid mbox", sys_mbox_valid_val(mbox));
 8008e44:	481a      	ldr	r0, [pc, #104]	; (8008eb0 <tcpip_inpkt+0x78>)
 8008e46:	f00a f817 	bl	8012e78 <sys_mbox_valid>
 8008e4a:	4603      	mov	r3, r0
 8008e4c:	2b00      	cmp	r3, #0
 8008e4e:	d105      	bne.n	8008e5c <tcpip_inpkt+0x24>
 8008e50:	4b18      	ldr	r3, [pc, #96]	; (8008eb4 <tcpip_inpkt+0x7c>)
 8008e52:	22b5      	movs	r2, #181	; 0xb5
 8008e54:	4918      	ldr	r1, [pc, #96]	; (8008eb8 <tcpip_inpkt+0x80>)
 8008e56:	4819      	ldr	r0, [pc, #100]	; (8008ebc <tcpip_inpkt+0x84>)
 8008e58:	f00c febc 	bl	8015bd4 <printf_>

  msg = (struct tcpip_msg *)memp_malloc(MEMP_TCPIP_MSG_INPKT);
 8008e5c:	2009      	movs	r0, #9
 8008e5e:	f000 fd07 	bl	8009870 <memp_malloc>
 8008e62:	6178      	str	r0, [r7, #20]
  if (msg == NULL) {
 8008e64:	697b      	ldr	r3, [r7, #20]
 8008e66:	2b00      	cmp	r3, #0
 8008e68:	d102      	bne.n	8008e70 <tcpip_inpkt+0x38>
    return ERR_MEM;
 8008e6a:	f04f 33ff 	mov.w	r3, #4294967295
 8008e6e:	e01a      	b.n	8008ea6 <tcpip_inpkt+0x6e>
  }

  msg->type = TCPIP_MSG_INPKT;
 8008e70:	697b      	ldr	r3, [r7, #20]
 8008e72:	2202      	movs	r2, #2
 8008e74:	701a      	strb	r2, [r3, #0]
  msg->msg.inp.p = p;
 8008e76:	697b      	ldr	r3, [r7, #20]
 8008e78:	68fa      	ldr	r2, [r7, #12]
 8008e7a:	605a      	str	r2, [r3, #4]
  msg->msg.inp.netif = inp;
 8008e7c:	697b      	ldr	r3, [r7, #20]
 8008e7e:	68ba      	ldr	r2, [r7, #8]
 8008e80:	609a      	str	r2, [r3, #8]
  msg->msg.inp.input_fn = input_fn;
 8008e82:	697b      	ldr	r3, [r7, #20]
 8008e84:	687a      	ldr	r2, [r7, #4]
 8008e86:	60da      	str	r2, [r3, #12]
  if (sys_mbox_trypost(&mbox, msg) != ERR_OK) {
 8008e88:	6979      	ldr	r1, [r7, #20]
 8008e8a:	4809      	ldr	r0, [pc, #36]	; (8008eb0 <tcpip_inpkt+0x78>)
 8008e8c:	f009 ff7f 	bl	8012d8e <sys_mbox_trypost>
 8008e90:	4603      	mov	r3, r0
 8008e92:	2b00      	cmp	r3, #0
 8008e94:	d006      	beq.n	8008ea4 <tcpip_inpkt+0x6c>
    memp_free(MEMP_TCPIP_MSG_INPKT, msg);
 8008e96:	6979      	ldr	r1, [r7, #20]
 8008e98:	2009      	movs	r0, #9
 8008e9a:	f000 fd5f 	bl	800995c <memp_free>
    return ERR_MEM;
 8008e9e:	f04f 33ff 	mov.w	r3, #4294967295
 8008ea2:	e000      	b.n	8008ea6 <tcpip_inpkt+0x6e>
  }
  return ERR_OK;
 8008ea4:	2300      	movs	r3, #0
#endif /* LWIP_TCPIP_CORE_LOCKING_INPUT */
}
 8008ea6:	4618      	mov	r0, r3
 8008ea8:	3718      	adds	r7, #24
 8008eaa:	46bd      	mov	sp, r7
 8008eac:	bd80      	pop	{r7, pc}
 8008eae:	bf00      	nop
 8008eb0:	240085c0 	.word	0x240085c0
 8008eb4:	0801a174 	.word	0x0801a174
 8008eb8:	0801a1ec 	.word	0x0801a1ec
 8008ebc:	0801a1c4 	.word	0x0801a1c4

08008ec0 <tcpip_input>:
 *          NETIF_FLAG_ETHERNET flags)
 * @param inp the network interface on which the packet was received
 */
err_t
tcpip_input(struct pbuf *p, struct netif *inp)
{
 8008ec0:	b580      	push	{r7, lr}
 8008ec2:	b082      	sub	sp, #8
 8008ec4:	af00      	add	r7, sp, #0
 8008ec6:	6078      	str	r0, [r7, #4]
 8008ec8:	6039      	str	r1, [r7, #0]
#if LWIP_ETHERNET
  if (inp->flags & (NETIF_FLAG_ETHARP | NETIF_FLAG_ETHERNET)) {
 8008eca:	683b      	ldr	r3, [r7, #0]
 8008ecc:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 8008ed0:	f003 0318 	and.w	r3, r3, #24
 8008ed4:	2b00      	cmp	r3, #0
 8008ed6:	d006      	beq.n	8008ee6 <tcpip_input+0x26>
    return tcpip_inpkt(p, inp, ethernet_input);
 8008ed8:	4a08      	ldr	r2, [pc, #32]	; (8008efc <tcpip_input+0x3c>)
 8008eda:	6839      	ldr	r1, [r7, #0]
 8008edc:	6878      	ldr	r0, [r7, #4]
 8008ede:	f7ff ffab 	bl	8008e38 <tcpip_inpkt>
 8008ee2:	4603      	mov	r3, r0
 8008ee4:	e005      	b.n	8008ef2 <tcpip_input+0x32>
  } else
#endif /* LWIP_ETHERNET */
  return tcpip_inpkt(p, inp, ip_input);
 8008ee6:	4a06      	ldr	r2, [pc, #24]	; (8008f00 <tcpip_input+0x40>)
 8008ee8:	6839      	ldr	r1, [r7, #0]
 8008eea:	6878      	ldr	r0, [r7, #4]
 8008eec:	f7ff ffa4 	bl	8008e38 <tcpip_inpkt>
 8008ef0:	4603      	mov	r3, r0
}
 8008ef2:	4618      	mov	r0, r3
 8008ef4:	3708      	adds	r7, #8
 8008ef6:	46bd      	mov	sp, r7
 8008ef8:	bd80      	pop	{r7, pc}
 8008efa:	bf00      	nop
 8008efc:	08012b4d 	.word	0x08012b4d
 8008f00:	08011b11 	.word	0x08011b11

08008f04 <tcpip_callback_with_block>:
 * @param block 1 to block until the request is posted, 0 to non-blocking mode
 * @return ERR_OK if the function was called, another err_t if not
 */
err_t
tcpip_callback_with_block(tcpip_callback_fn function, void *ctx, u8_t block)
{
 8008f04:	b580      	push	{r7, lr}
 8008f06:	b086      	sub	sp, #24
 8008f08:	af00      	add	r7, sp, #0
 8008f0a:	60f8      	str	r0, [r7, #12]
 8008f0c:	60b9      	str	r1, [r7, #8]
 8008f0e:	4613      	mov	r3, r2
 8008f10:	71fb      	strb	r3, [r7, #7]
  struct tcpip_msg *msg;

  LWIP_ASSERT("Invalid mbox", sys_mbox_valid_val(mbox));
 8008f12:	481d      	ldr	r0, [pc, #116]	; (8008f88 <tcpip_callback_with_block+0x84>)
 8008f14:	f009 ffb0 	bl	8012e78 <sys_mbox_valid>
 8008f18:	4603      	mov	r3, r0
 8008f1a:	2b00      	cmp	r3, #0
 8008f1c:	d105      	bne.n	8008f2a <tcpip_callback_with_block+0x26>
 8008f1e:	4b1b      	ldr	r3, [pc, #108]	; (8008f8c <tcpip_callback_with_block+0x88>)
 8008f20:	22ee      	movs	r2, #238	; 0xee
 8008f22:	491b      	ldr	r1, [pc, #108]	; (8008f90 <tcpip_callback_with_block+0x8c>)
 8008f24:	481b      	ldr	r0, [pc, #108]	; (8008f94 <tcpip_callback_with_block+0x90>)
 8008f26:	f00c fe55 	bl	8015bd4 <printf_>

  msg = (struct tcpip_msg *)memp_malloc(MEMP_TCPIP_MSG_API);
 8008f2a:	2008      	movs	r0, #8
 8008f2c:	f000 fca0 	bl	8009870 <memp_malloc>
 8008f30:	6178      	str	r0, [r7, #20]
  if (msg == NULL) {
 8008f32:	697b      	ldr	r3, [r7, #20]
 8008f34:	2b00      	cmp	r3, #0
 8008f36:	d102      	bne.n	8008f3e <tcpip_callback_with_block+0x3a>
    return ERR_MEM;
 8008f38:	f04f 33ff 	mov.w	r3, #4294967295
 8008f3c:	e01f      	b.n	8008f7e <tcpip_callback_with_block+0x7a>
  }

  msg->type = TCPIP_MSG_CALLBACK;
 8008f3e:	697b      	ldr	r3, [r7, #20]
 8008f40:	2203      	movs	r2, #3
 8008f42:	701a      	strb	r2, [r3, #0]
  msg->msg.cb.function = function;
 8008f44:	697b      	ldr	r3, [r7, #20]
 8008f46:	68fa      	ldr	r2, [r7, #12]
 8008f48:	605a      	str	r2, [r3, #4]
  msg->msg.cb.ctx = ctx;
 8008f4a:	697b      	ldr	r3, [r7, #20]
 8008f4c:	68ba      	ldr	r2, [r7, #8]
 8008f4e:	609a      	str	r2, [r3, #8]
  if (block) {
 8008f50:	79fb      	ldrb	r3, [r7, #7]
 8008f52:	2b00      	cmp	r3, #0
 8008f54:	d004      	beq.n	8008f60 <tcpip_callback_with_block+0x5c>
    sys_mbox_post(&mbox, msg);
 8008f56:	6979      	ldr	r1, [r7, #20]
 8008f58:	480b      	ldr	r0, [pc, #44]	; (8008f88 <tcpip_callback_with_block+0x84>)
 8008f5a:	f009 ff03 	bl	8012d64 <sys_mbox_post>
 8008f5e:	e00d      	b.n	8008f7c <tcpip_callback_with_block+0x78>
  } else {
    if (sys_mbox_trypost(&mbox, msg) != ERR_OK) {
 8008f60:	6979      	ldr	r1, [r7, #20]
 8008f62:	4809      	ldr	r0, [pc, #36]	; (8008f88 <tcpip_callback_with_block+0x84>)
 8008f64:	f009 ff13 	bl	8012d8e <sys_mbox_trypost>
 8008f68:	4603      	mov	r3, r0
 8008f6a:	2b00      	cmp	r3, #0
 8008f6c:	d006      	beq.n	8008f7c <tcpip_callback_with_block+0x78>
      memp_free(MEMP_TCPIP_MSG_API, msg);
 8008f6e:	6979      	ldr	r1, [r7, #20]
 8008f70:	2008      	movs	r0, #8
 8008f72:	f000 fcf3 	bl	800995c <memp_free>
      return ERR_MEM;
 8008f76:	f04f 33ff 	mov.w	r3, #4294967295
 8008f7a:	e000      	b.n	8008f7e <tcpip_callback_with_block+0x7a>
    }
  }
  return ERR_OK;
 8008f7c:	2300      	movs	r3, #0
}
 8008f7e:	4618      	mov	r0, r3
 8008f80:	3718      	adds	r7, #24
 8008f82:	46bd      	mov	sp, r7
 8008f84:	bd80      	pop	{r7, pc}
 8008f86:	bf00      	nop
 8008f88:	240085c0 	.word	0x240085c0
 8008f8c:	0801a174 	.word	0x0801a174
 8008f90:	0801a1ec 	.word	0x0801a1ec
 8008f94:	0801a1c4 	.word	0x0801a1c4

08008f98 <tcpip_send_msg_wait_sem>:
 * @param sem semaphore to wait on
 * @return ERR_OK if the function was called, another err_t if not
 */
err_t
tcpip_send_msg_wait_sem(tcpip_callback_fn fn, void *apimsg, sys_sem_t* sem)
{
 8008f98:	b580      	push	{r7, lr}
 8008f9a:	b084      	sub	sp, #16
 8008f9c:	af00      	add	r7, sp, #0
 8008f9e:	60f8      	str	r0, [r7, #12]
 8008fa0:	60b9      	str	r1, [r7, #8]
 8008fa2:	607a      	str	r2, [r7, #4]
#if LWIP_TCPIP_CORE_LOCKING
  LWIP_UNUSED_ARG(sem);
  LOCK_TCPIP_CORE();
 8008fa4:	4806      	ldr	r0, [pc, #24]	; (8008fc0 <tcpip_send_msg_wait_sem+0x28>)
 8008fa6:	f00a f83d 	bl	8013024 <sys_mutex_lock>
  fn(apimsg);
 8008faa:	68fb      	ldr	r3, [r7, #12]
 8008fac:	68b8      	ldr	r0, [r7, #8]
 8008fae:	4798      	blx	r3
  UNLOCK_TCPIP_CORE();
 8008fb0:	4803      	ldr	r0, [pc, #12]	; (8008fc0 <tcpip_send_msg_wait_sem+0x28>)
 8008fb2:	f00a f846 	bl	8013042 <sys_mutex_unlock>
  return ERR_OK;
 8008fb6:	2300      	movs	r3, #0
  sys_mbox_post(&mbox, &TCPIP_MSG_VAR_REF(msg));
  sys_arch_sem_wait(sem, 0);
  TCPIP_MSG_VAR_FREE(msg);
  return ERR_OK;
#endif /* LWIP_TCPIP_CORE_LOCKING */
}
 8008fb8:	4618      	mov	r0, r3
 8008fba:	3710      	adds	r7, #16
 8008fbc:	46bd      	mov	sp, r7
 8008fbe:	bd80      	pop	{r7, pc}
 8008fc0:	240087a8 	.word	0x240087a8

08008fc4 <tcpip_init>:
 * @param initfunc a function to call when tcpip_thread is running and finished initializing
 * @param arg argument to pass to initfunc
 */
void
tcpip_init(tcpip_init_done_fn initfunc, void *arg)
{
 8008fc4:	b580      	push	{r7, lr}
 8008fc6:	b084      	sub	sp, #16
 8008fc8:	af02      	add	r7, sp, #8
 8008fca:	6078      	str	r0, [r7, #4]
 8008fcc:	6039      	str	r1, [r7, #0]
  lwip_init();
 8008fce:	f000 f86a 	bl	80090a6 <lwip_init>

  tcpip_init_done = initfunc;
 8008fd2:	4a17      	ldr	r2, [pc, #92]	; (8009030 <tcpip_init+0x6c>)
 8008fd4:	687b      	ldr	r3, [r7, #4]
 8008fd6:	6013      	str	r3, [r2, #0]
  tcpip_init_done_arg = arg;
 8008fd8:	4a16      	ldr	r2, [pc, #88]	; (8009034 <tcpip_init+0x70>)
 8008fda:	683b      	ldr	r3, [r7, #0]
 8008fdc:	6013      	str	r3, [r2, #0]
  if (sys_mbox_new(&mbox, TCPIP_MBOX_SIZE) != ERR_OK) {
 8008fde:	2106      	movs	r1, #6
 8008fe0:	4815      	ldr	r0, [pc, #84]	; (8009038 <tcpip_init+0x74>)
 8008fe2:	f009 fe8f 	bl	8012d04 <sys_mbox_new>
 8008fe6:	4603      	mov	r3, r0
 8008fe8:	2b00      	cmp	r3, #0
 8008fea:	d006      	beq.n	8008ffa <tcpip_init+0x36>
    LWIP_ASSERT("failed to create tcpip_thread mbox", 0);
 8008fec:	4b13      	ldr	r3, [pc, #76]	; (800903c <tcpip_init+0x78>)
 8008fee:	f240 12d5 	movw	r2, #469	; 0x1d5
 8008ff2:	4913      	ldr	r1, [pc, #76]	; (8009040 <tcpip_init+0x7c>)
 8008ff4:	4813      	ldr	r0, [pc, #76]	; (8009044 <tcpip_init+0x80>)
 8008ff6:	f00c fded 	bl	8015bd4 <printf_>
  }
#if LWIP_TCPIP_CORE_LOCKING
  if (sys_mutex_new(&lock_tcpip_core) != ERR_OK) {
 8008ffa:	4813      	ldr	r0, [pc, #76]	; (8009048 <tcpip_init+0x84>)
 8008ffc:	f009 fff8 	bl	8012ff0 <sys_mutex_new>
 8009000:	4603      	mov	r3, r0
 8009002:	2b00      	cmp	r3, #0
 8009004:	d006      	beq.n	8009014 <tcpip_init+0x50>
    LWIP_ASSERT("failed to create lock_tcpip_core", 0);
 8009006:	4b0d      	ldr	r3, [pc, #52]	; (800903c <tcpip_init+0x78>)
 8009008:	f240 12d9 	movw	r2, #473	; 0x1d9
 800900c:	490f      	ldr	r1, [pc, #60]	; (800904c <tcpip_init+0x88>)
 800900e:	480d      	ldr	r0, [pc, #52]	; (8009044 <tcpip_init+0x80>)
 8009010:	f00c fde0 	bl	8015bd4 <printf_>
  }
#endif /* LWIP_TCPIP_CORE_LOCKING */

  sys_thread_new(TCPIP_THREAD_NAME, tcpip_thread, NULL, TCPIP_THREAD_STACKSIZE, TCPIP_THREAD_PRIO);
 8009014:	2306      	movs	r3, #6
 8009016:	9300      	str	r3, [sp, #0]
 8009018:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800901c:	2200      	movs	r2, #0
 800901e:	490c      	ldr	r1, [pc, #48]	; (8009050 <tcpip_init+0x8c>)
 8009020:	480c      	ldr	r0, [pc, #48]	; (8009054 <tcpip_init+0x90>)
 8009022:	f00a f81b 	bl	801305c <sys_thread_new>
}
 8009026:	bf00      	nop
 8009028:	3708      	adds	r7, #8
 800902a:	46bd      	mov	sp, r7
 800902c:	bd80      	pop	{r7, pc}
 800902e:	bf00      	nop
 8009030:	240085b8 	.word	0x240085b8
 8009034:	240085bc 	.word	0x240085bc
 8009038:	240085c0 	.word	0x240085c0
 800903c:	0801a174 	.word	0x0801a174
 8009040:	0801a1fc 	.word	0x0801a1fc
 8009044:	0801a1c4 	.word	0x0801a1c4
 8009048:	240087a8 	.word	0x240087a8
 800904c:	0801a220 	.word	0x0801a220
 8009050:	08008d6d 	.word	0x08008d6d
 8009054:	0801a244 	.word	0x0801a244

08009058 <lwip_htons>:
 * @param n u16_t in host byte order
 * @return n in network byte order
 */
u16_t
lwip_htons(u16_t n)
{
 8009058:	b480      	push	{r7}
 800905a:	b083      	sub	sp, #12
 800905c:	af00      	add	r7, sp, #0
 800905e:	4603      	mov	r3, r0
 8009060:	80fb      	strh	r3, [r7, #6]
  return (u16_t)PP_HTONS(n);
 8009062:	88fb      	ldrh	r3, [r7, #6]
 8009064:	ba5b      	rev16	r3, r3
 8009066:	b29b      	uxth	r3, r3
}
 8009068:	4618      	mov	r0, r3
 800906a:	370c      	adds	r7, #12
 800906c:	46bd      	mov	sp, r7
 800906e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009072:	4770      	bx	lr

08009074 <lwip_htonl>:
 * @param n u32_t in host byte order
 * @return n in network byte order
 */
u32_t
lwip_htonl(u32_t n)
{
 8009074:	b480      	push	{r7}
 8009076:	b083      	sub	sp, #12
 8009078:	af00      	add	r7, sp, #0
 800907a:	6078      	str	r0, [r7, #4]
  return (u32_t)PP_HTONL(n);
 800907c:	687b      	ldr	r3, [r7, #4]
 800907e:	061a      	lsls	r2, r3, #24
 8009080:	687b      	ldr	r3, [r7, #4]
 8009082:	021b      	lsls	r3, r3, #8
 8009084:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8009088:	431a      	orrs	r2, r3
 800908a:	687b      	ldr	r3, [r7, #4]
 800908c:	0a1b      	lsrs	r3, r3, #8
 800908e:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8009092:	431a      	orrs	r2, r3
 8009094:	687b      	ldr	r3, [r7, #4]
 8009096:	0e1b      	lsrs	r3, r3, #24
 8009098:	4313      	orrs	r3, r2
}
 800909a:	4618      	mov	r0, r3
 800909c:	370c      	adds	r7, #12
 800909e:	46bd      	mov	sp, r7
 80090a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090a4:	4770      	bx	lr

080090a6 <lwip_init>:
 * Initialize all modules.
 * Use this in NO_SYS mode. Use tcpip_init() otherwise.
 */
void
lwip_init(void)
{
 80090a6:	b580      	push	{r7, lr}
 80090a8:	b082      	sub	sp, #8
 80090aa:	af00      	add	r7, sp, #0
#ifndef LWIP_SKIP_CONST_CHECK
  int a = 0;
 80090ac:	2300      	movs	r3, #0
 80090ae:	607b      	str	r3, [r7, #4]
#endif

  /* Modules initialization */
  stats_init();
#if !NO_SYS
  sys_init();
 80090b0:	f009 ff90 	bl	8012fd4 <sys_init>
#endif /* !NO_SYS */
  mem_init();
 80090b4:	f000 f8a6 	bl	8009204 <mem_init>
  memp_init();
 80090b8:	f000 fb6c 	bl	8009794 <memp_init>
  pbuf_init();
  netif_init();
 80090bc:	f000 fc78 	bl	80099b0 <netif_init>
#endif /* LWIP_IPV4 */
#if LWIP_RAW
  raw_init();
#endif /* LWIP_RAW */
#if LWIP_UDP
  udp_init();
 80090c0:	f006 fff0 	bl	80100a4 <udp_init>
#endif /* LWIP_UDP */
#if LWIP_TCP
  tcp_init();
 80090c4:	f001 fc7a 	bl	800a9bc <tcp_init>
#if PPP_SUPPORT
  ppp_init();
#endif
 
#if LWIP_TIMERS
  sys_timeouts_init();
 80090c8:	f006 fe82 	bl	800fdd0 <sys_timeouts_init>
#endif /* LWIP_TIMERS */
}
 80090cc:	bf00      	nop
 80090ce:	3708      	adds	r7, #8
 80090d0:	46bd      	mov	sp, r7
 80090d2:	bd80      	pop	{r7, pc}

080090d4 <plug_holes>:
 * This assumes access to the heap is protected by the calling function
 * already.
 */
static void
plug_holes(struct mem *mem)
{
 80090d4:	b580      	push	{r7, lr}
 80090d6:	b084      	sub	sp, #16
 80090d8:	af00      	add	r7, sp, #0
 80090da:	6078      	str	r0, [r7, #4]
  struct mem *nmem;
  struct mem *pmem;

  LWIP_ASSERT("plug_holes: mem >= ram", (u8_t *)mem >= ram);
 80090dc:	4b40      	ldr	r3, [pc, #256]	; (80091e0 <plug_holes+0x10c>)
 80090de:	681b      	ldr	r3, [r3, #0]
 80090e0:	687a      	ldr	r2, [r7, #4]
 80090e2:	429a      	cmp	r2, r3
 80090e4:	d206      	bcs.n	80090f4 <plug_holes+0x20>
 80090e6:	4b3f      	ldr	r3, [pc, #252]	; (80091e4 <plug_holes+0x110>)
 80090e8:	f240 125d 	movw	r2, #349	; 0x15d
 80090ec:	493e      	ldr	r1, [pc, #248]	; (80091e8 <plug_holes+0x114>)
 80090ee:	483f      	ldr	r0, [pc, #252]	; (80091ec <plug_holes+0x118>)
 80090f0:	f00c fd70 	bl	8015bd4 <printf_>
  LWIP_ASSERT("plug_holes: mem < ram_end", (u8_t *)mem < (u8_t *)ram_end);
 80090f4:	4b3e      	ldr	r3, [pc, #248]	; (80091f0 <plug_holes+0x11c>)
 80090f6:	681b      	ldr	r3, [r3, #0]
 80090f8:	687a      	ldr	r2, [r7, #4]
 80090fa:	429a      	cmp	r2, r3
 80090fc:	d306      	bcc.n	800910c <plug_holes+0x38>
 80090fe:	4b39      	ldr	r3, [pc, #228]	; (80091e4 <plug_holes+0x110>)
 8009100:	f44f 72af 	mov.w	r2, #350	; 0x15e
 8009104:	493b      	ldr	r1, [pc, #236]	; (80091f4 <plug_holes+0x120>)
 8009106:	4839      	ldr	r0, [pc, #228]	; (80091ec <plug_holes+0x118>)
 8009108:	f00c fd64 	bl	8015bd4 <printf_>
  LWIP_ASSERT("plug_holes: mem->used == 0", mem->used == 0);
 800910c:	687b      	ldr	r3, [r7, #4]
 800910e:	791b      	ldrb	r3, [r3, #4]
 8009110:	2b00      	cmp	r3, #0
 8009112:	d006      	beq.n	8009122 <plug_holes+0x4e>
 8009114:	4b33      	ldr	r3, [pc, #204]	; (80091e4 <plug_holes+0x110>)
 8009116:	f240 125f 	movw	r2, #351	; 0x15f
 800911a:	4937      	ldr	r1, [pc, #220]	; (80091f8 <plug_holes+0x124>)
 800911c:	4833      	ldr	r0, [pc, #204]	; (80091ec <plug_holes+0x118>)
 800911e:	f00c fd59 	bl	8015bd4 <printf_>

  /* plug hole forward */
  LWIP_ASSERT("plug_holes: mem->next <= MEM_SIZE_ALIGNED", mem->next <= MEM_SIZE_ALIGNED);
 8009122:	687b      	ldr	r3, [r7, #4]
 8009124:	881b      	ldrh	r3, [r3, #0]
 8009126:	f5b3 5f20 	cmp.w	r3, #10240	; 0x2800
 800912a:	d906      	bls.n	800913a <plug_holes+0x66>
 800912c:	4b2d      	ldr	r3, [pc, #180]	; (80091e4 <plug_holes+0x110>)
 800912e:	f44f 72b1 	mov.w	r2, #354	; 0x162
 8009132:	4932      	ldr	r1, [pc, #200]	; (80091fc <plug_holes+0x128>)
 8009134:	482d      	ldr	r0, [pc, #180]	; (80091ec <plug_holes+0x118>)
 8009136:	f00c fd4d 	bl	8015bd4 <printf_>

  nmem = (struct mem *)(void *)&ram[mem->next];
 800913a:	4b29      	ldr	r3, [pc, #164]	; (80091e0 <plug_holes+0x10c>)
 800913c:	681b      	ldr	r3, [r3, #0]
 800913e:	687a      	ldr	r2, [r7, #4]
 8009140:	8812      	ldrh	r2, [r2, #0]
 8009142:	4413      	add	r3, r2
 8009144:	60fb      	str	r3, [r7, #12]
  if (mem != nmem && nmem->used == 0 && (u8_t *)nmem != (u8_t *)ram_end) {
 8009146:	687a      	ldr	r2, [r7, #4]
 8009148:	68fb      	ldr	r3, [r7, #12]
 800914a:	429a      	cmp	r2, r3
 800914c:	d01f      	beq.n	800918e <plug_holes+0xba>
 800914e:	68fb      	ldr	r3, [r7, #12]
 8009150:	791b      	ldrb	r3, [r3, #4]
 8009152:	2b00      	cmp	r3, #0
 8009154:	d11b      	bne.n	800918e <plug_holes+0xba>
 8009156:	4b26      	ldr	r3, [pc, #152]	; (80091f0 <plug_holes+0x11c>)
 8009158:	681b      	ldr	r3, [r3, #0]
 800915a:	68fa      	ldr	r2, [r7, #12]
 800915c:	429a      	cmp	r2, r3
 800915e:	d016      	beq.n	800918e <plug_holes+0xba>
    /* if mem->next is unused and not end of ram, combine mem and mem->next */
    if (lfree == nmem) {
 8009160:	4b27      	ldr	r3, [pc, #156]	; (8009200 <plug_holes+0x12c>)
 8009162:	681b      	ldr	r3, [r3, #0]
 8009164:	68fa      	ldr	r2, [r7, #12]
 8009166:	429a      	cmp	r2, r3
 8009168:	d102      	bne.n	8009170 <plug_holes+0x9c>
      lfree = mem;
 800916a:	4a25      	ldr	r2, [pc, #148]	; (8009200 <plug_holes+0x12c>)
 800916c:	687b      	ldr	r3, [r7, #4]
 800916e:	6013      	str	r3, [r2, #0]
    }
    mem->next = nmem->next;
 8009170:	68fb      	ldr	r3, [r7, #12]
 8009172:	881a      	ldrh	r2, [r3, #0]
 8009174:	687b      	ldr	r3, [r7, #4]
 8009176:	801a      	strh	r2, [r3, #0]
    ((struct mem *)(void *)&ram[nmem->next])->prev = (mem_size_t)((u8_t *)mem - ram);
 8009178:	687b      	ldr	r3, [r7, #4]
 800917a:	4a19      	ldr	r2, [pc, #100]	; (80091e0 <plug_holes+0x10c>)
 800917c:	6812      	ldr	r2, [r2, #0]
 800917e:	1a99      	subs	r1, r3, r2
 8009180:	4b17      	ldr	r3, [pc, #92]	; (80091e0 <plug_holes+0x10c>)
 8009182:	681b      	ldr	r3, [r3, #0]
 8009184:	68fa      	ldr	r2, [r7, #12]
 8009186:	8812      	ldrh	r2, [r2, #0]
 8009188:	4413      	add	r3, r2
 800918a:	b28a      	uxth	r2, r1
 800918c:	805a      	strh	r2, [r3, #2]
  }

  /* plug hole backward */
  pmem = (struct mem *)(void *)&ram[mem->prev];
 800918e:	4b14      	ldr	r3, [pc, #80]	; (80091e0 <plug_holes+0x10c>)
 8009190:	681b      	ldr	r3, [r3, #0]
 8009192:	687a      	ldr	r2, [r7, #4]
 8009194:	8852      	ldrh	r2, [r2, #2]
 8009196:	4413      	add	r3, r2
 8009198:	60bb      	str	r3, [r7, #8]
  if (pmem != mem && pmem->used == 0) {
 800919a:	68ba      	ldr	r2, [r7, #8]
 800919c:	687b      	ldr	r3, [r7, #4]
 800919e:	429a      	cmp	r2, r3
 80091a0:	d01a      	beq.n	80091d8 <plug_holes+0x104>
 80091a2:	68bb      	ldr	r3, [r7, #8]
 80091a4:	791b      	ldrb	r3, [r3, #4]
 80091a6:	2b00      	cmp	r3, #0
 80091a8:	d116      	bne.n	80091d8 <plug_holes+0x104>
    /* if mem->prev is unused, combine mem and mem->prev */
    if (lfree == mem) {
 80091aa:	4b15      	ldr	r3, [pc, #84]	; (8009200 <plug_holes+0x12c>)
 80091ac:	681b      	ldr	r3, [r3, #0]
 80091ae:	687a      	ldr	r2, [r7, #4]
 80091b0:	429a      	cmp	r2, r3
 80091b2:	d102      	bne.n	80091ba <plug_holes+0xe6>
      lfree = pmem;
 80091b4:	4a12      	ldr	r2, [pc, #72]	; (8009200 <plug_holes+0x12c>)
 80091b6:	68bb      	ldr	r3, [r7, #8]
 80091b8:	6013      	str	r3, [r2, #0]
    }
    pmem->next = mem->next;
 80091ba:	687b      	ldr	r3, [r7, #4]
 80091bc:	881a      	ldrh	r2, [r3, #0]
 80091be:	68bb      	ldr	r3, [r7, #8]
 80091c0:	801a      	strh	r2, [r3, #0]
    ((struct mem *)(void *)&ram[mem->next])->prev = (mem_size_t)((u8_t *)pmem - ram);
 80091c2:	68bb      	ldr	r3, [r7, #8]
 80091c4:	4a06      	ldr	r2, [pc, #24]	; (80091e0 <plug_holes+0x10c>)
 80091c6:	6812      	ldr	r2, [r2, #0]
 80091c8:	1a99      	subs	r1, r3, r2
 80091ca:	4b05      	ldr	r3, [pc, #20]	; (80091e0 <plug_holes+0x10c>)
 80091cc:	681b      	ldr	r3, [r3, #0]
 80091ce:	687a      	ldr	r2, [r7, #4]
 80091d0:	8812      	ldrh	r2, [r2, #0]
 80091d2:	4413      	add	r3, r2
 80091d4:	b28a      	uxth	r2, r1
 80091d6:	805a      	strh	r2, [r3, #2]
  }
}
 80091d8:	bf00      	nop
 80091da:	3710      	adds	r7, #16
 80091dc:	46bd      	mov	sp, r7
 80091de:	bd80      	pop	{r7, pc}
 80091e0:	240085c4 	.word	0x240085c4
 80091e4:	0801a254 	.word	0x0801a254
 80091e8:	0801a284 	.word	0x0801a284
 80091ec:	0801a29c 	.word	0x0801a29c
 80091f0:	240085c8 	.word	0x240085c8
 80091f4:	0801a2c4 	.word	0x0801a2c4
 80091f8:	0801a2e0 	.word	0x0801a2e0
 80091fc:	0801a2fc 	.word	0x0801a2fc
 8009200:	240085cc 	.word	0x240085cc

08009204 <mem_init>:
/**
 * Zero the heap and initialize start, end and lowest-free
 */
void
mem_init(void)
{
 8009204:	b580      	push	{r7, lr}
 8009206:	b082      	sub	sp, #8
 8009208:	af00      	add	r7, sp, #0

  LWIP_ASSERT("Sanity check alignment",
    (SIZEOF_STRUCT_MEM & (MEM_ALIGNMENT-1)) == 0);

  /* align the heap */
  ram = (u8_t *)LWIP_MEM_ALIGN(LWIP_RAM_HEAP_POINTER);
 800920a:	4b1c      	ldr	r3, [pc, #112]	; (800927c <mem_init+0x78>)
 800920c:	4a1c      	ldr	r2, [pc, #112]	; (8009280 <mem_init+0x7c>)
 800920e:	601a      	str	r2, [r3, #0]
  /* initialize the start of the heap */
  mem = (struct mem *)(void *)ram;
 8009210:	4b1a      	ldr	r3, [pc, #104]	; (800927c <mem_init+0x78>)
 8009212:	681b      	ldr	r3, [r3, #0]
 8009214:	607b      	str	r3, [r7, #4]
  mem->next = MEM_SIZE_ALIGNED;
 8009216:	687b      	ldr	r3, [r7, #4]
 8009218:	f44f 5220 	mov.w	r2, #10240	; 0x2800
 800921c:	801a      	strh	r2, [r3, #0]
  mem->prev = 0;
 800921e:	687b      	ldr	r3, [r7, #4]
 8009220:	2200      	movs	r2, #0
 8009222:	805a      	strh	r2, [r3, #2]
  mem->used = 0;
 8009224:	687b      	ldr	r3, [r7, #4]
 8009226:	2200      	movs	r2, #0
 8009228:	711a      	strb	r2, [r3, #4]
  /* initialize the end of the heap */
  ram_end = (struct mem *)(void *)&ram[MEM_SIZE_ALIGNED];
 800922a:	4b14      	ldr	r3, [pc, #80]	; (800927c <mem_init+0x78>)
 800922c:	681b      	ldr	r3, [r3, #0]
 800922e:	f503 5320 	add.w	r3, r3, #10240	; 0x2800
 8009232:	4a14      	ldr	r2, [pc, #80]	; (8009284 <mem_init+0x80>)
 8009234:	6013      	str	r3, [r2, #0]
  ram_end->used = 1;
 8009236:	4b13      	ldr	r3, [pc, #76]	; (8009284 <mem_init+0x80>)
 8009238:	681b      	ldr	r3, [r3, #0]
 800923a:	2201      	movs	r2, #1
 800923c:	711a      	strb	r2, [r3, #4]
  ram_end->next = MEM_SIZE_ALIGNED;
 800923e:	4b11      	ldr	r3, [pc, #68]	; (8009284 <mem_init+0x80>)
 8009240:	681b      	ldr	r3, [r3, #0]
 8009242:	f44f 5220 	mov.w	r2, #10240	; 0x2800
 8009246:	801a      	strh	r2, [r3, #0]
  ram_end->prev = MEM_SIZE_ALIGNED;
 8009248:	4b0e      	ldr	r3, [pc, #56]	; (8009284 <mem_init+0x80>)
 800924a:	681b      	ldr	r3, [r3, #0]
 800924c:	f44f 5220 	mov.w	r2, #10240	; 0x2800
 8009250:	805a      	strh	r2, [r3, #2]

  /* initialize the lowest-free pointer to the start of the heap */
  lfree = (struct mem *)(void *)ram;
 8009252:	4b0a      	ldr	r3, [pc, #40]	; (800927c <mem_init+0x78>)
 8009254:	681b      	ldr	r3, [r3, #0]
 8009256:	4a0c      	ldr	r2, [pc, #48]	; (8009288 <mem_init+0x84>)
 8009258:	6013      	str	r3, [r2, #0]

  MEM_STATS_AVAIL(avail, MEM_SIZE_ALIGNED);

  if (sys_mutex_new(&mem_mutex) != ERR_OK) {
 800925a:	480c      	ldr	r0, [pc, #48]	; (800928c <mem_init+0x88>)
 800925c:	f009 fec8 	bl	8012ff0 <sys_mutex_new>
 8009260:	4603      	mov	r3, r0
 8009262:	2b00      	cmp	r3, #0
 8009264:	d006      	beq.n	8009274 <mem_init+0x70>
    LWIP_ASSERT("failed to create mem_mutex", 0);
 8009266:	4b0a      	ldr	r3, [pc, #40]	; (8009290 <mem_init+0x8c>)
 8009268:	f44f 72cc 	mov.w	r2, #408	; 0x198
 800926c:	4909      	ldr	r1, [pc, #36]	; (8009294 <mem_init+0x90>)
 800926e:	480a      	ldr	r0, [pc, #40]	; (8009298 <mem_init+0x94>)
 8009270:	f00c fcb0 	bl	8015bd4 <printf_>
  }
}
 8009274:	bf00      	nop
 8009276:	3708      	adds	r7, #8
 8009278:	46bd      	mov	sp, r7
 800927a:	bd80      	pop	{r7, pc}
 800927c:	240085c4 	.word	0x240085c4
 8009280:	30044000 	.word	0x30044000
 8009284:	240085c8 	.word	0x240085c8
 8009288:	240085cc 	.word	0x240085cc
 800928c:	240085d0 	.word	0x240085d0
 8009290:	0801a254 	.word	0x0801a254
 8009294:	0801a328 	.word	0x0801a328
 8009298:	0801a29c 	.word	0x0801a29c

0800929c <mem_free>:
 * @param rmem is the data portion of a struct mem as returned by a previous
 *             call to mem_malloc()
 */
void
mem_free(void *rmem)
{
 800929c:	b580      	push	{r7, lr}
 800929e:	b084      	sub	sp, #16
 80092a0:	af00      	add	r7, sp, #0
 80092a2:	6078      	str	r0, [r7, #4]
  struct mem *mem;
  LWIP_MEM_FREE_DECL_PROTECT();

  if (rmem == NULL) {
 80092a4:	687b      	ldr	r3, [r7, #4]
 80092a6:	2b00      	cmp	r3, #0
 80092a8:	d050      	beq.n	800934c <mem_free+0xb0>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("mem_free(p == NULL) was called.\n"));
    return;
  }
  LWIP_ASSERT("mem_free: sanity check alignment", (((mem_ptr_t)rmem) & (MEM_ALIGNMENT-1)) == 0);
 80092aa:	687b      	ldr	r3, [r7, #4]
 80092ac:	f003 0303 	and.w	r3, r3, #3
 80092b0:	2b00      	cmp	r3, #0
 80092b2:	d006      	beq.n	80092c2 <mem_free+0x26>
 80092b4:	4b27      	ldr	r3, [pc, #156]	; (8009354 <mem_free+0xb8>)
 80092b6:	f44f 72d6 	mov.w	r2, #428	; 0x1ac
 80092ba:	4927      	ldr	r1, [pc, #156]	; (8009358 <mem_free+0xbc>)
 80092bc:	4827      	ldr	r0, [pc, #156]	; (800935c <mem_free+0xc0>)
 80092be:	f00c fc89 	bl	8015bd4 <printf_>

  LWIP_ASSERT("mem_free: legal memory", (u8_t *)rmem >= (u8_t *)ram &&
 80092c2:	4b27      	ldr	r3, [pc, #156]	; (8009360 <mem_free+0xc4>)
 80092c4:	681b      	ldr	r3, [r3, #0]
 80092c6:	687a      	ldr	r2, [r7, #4]
 80092c8:	429a      	cmp	r2, r3
 80092ca:	d304      	bcc.n	80092d6 <mem_free+0x3a>
 80092cc:	4b25      	ldr	r3, [pc, #148]	; (8009364 <mem_free+0xc8>)
 80092ce:	681b      	ldr	r3, [r3, #0]
 80092d0:	687a      	ldr	r2, [r7, #4]
 80092d2:	429a      	cmp	r2, r3
 80092d4:	d306      	bcc.n	80092e4 <mem_free+0x48>
 80092d6:	4b1f      	ldr	r3, [pc, #124]	; (8009354 <mem_free+0xb8>)
 80092d8:	f240 12af 	movw	r2, #431	; 0x1af
 80092dc:	4922      	ldr	r1, [pc, #136]	; (8009368 <mem_free+0xcc>)
 80092de:	481f      	ldr	r0, [pc, #124]	; (800935c <mem_free+0xc0>)
 80092e0:	f00c fc78 	bl	8015bd4 <printf_>
    (u8_t *)rmem < (u8_t *)ram_end);

  if ((u8_t *)rmem < (u8_t *)ram || (u8_t *)rmem >= (u8_t *)ram_end) {
 80092e4:	4b1e      	ldr	r3, [pc, #120]	; (8009360 <mem_free+0xc4>)
 80092e6:	681b      	ldr	r3, [r3, #0]
 80092e8:	687a      	ldr	r2, [r7, #4]
 80092ea:	429a      	cmp	r2, r3
 80092ec:	d304      	bcc.n	80092f8 <mem_free+0x5c>
 80092ee:	4b1d      	ldr	r3, [pc, #116]	; (8009364 <mem_free+0xc8>)
 80092f0:	681b      	ldr	r3, [r3, #0]
 80092f2:	687a      	ldr	r2, [r7, #4]
 80092f4:	429a      	cmp	r2, r3
 80092f6:	d306      	bcc.n	8009306 <mem_free+0x6a>
    SYS_ARCH_DECL_PROTECT(lev);
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory\n"));
    /* protect mem stats from concurrent access */
    SYS_ARCH_PROTECT(lev);
 80092f8:	f009 fece 	bl	8013098 <sys_arch_protect>
 80092fc:	60b8      	str	r0, [r7, #8]
    MEM_STATS_INC(illegal);
    SYS_ARCH_UNPROTECT(lev);
 80092fe:	68b8      	ldr	r0, [r7, #8]
 8009300:	f009 fed8 	bl	80130b4 <sys_arch_unprotect>
    return;
 8009304:	e023      	b.n	800934e <mem_free+0xb2>
  }
  /* protect the heap from concurrent access */
  LWIP_MEM_FREE_PROTECT();
 8009306:	4819      	ldr	r0, [pc, #100]	; (800936c <mem_free+0xd0>)
 8009308:	f009 fe8c 	bl	8013024 <sys_mutex_lock>
  /* Get the corresponding struct mem ... */
  /* cast through void* to get rid of alignment warnings */
  mem = (struct mem *)(void *)((u8_t *)rmem - SIZEOF_STRUCT_MEM);
 800930c:	687b      	ldr	r3, [r7, #4]
 800930e:	3b08      	subs	r3, #8
 8009310:	60fb      	str	r3, [r7, #12]
  /* ... which has to be in a used state ... */
  LWIP_ASSERT("mem_free: mem->used", mem->used);
 8009312:	68fb      	ldr	r3, [r7, #12]
 8009314:	791b      	ldrb	r3, [r3, #4]
 8009316:	2b00      	cmp	r3, #0
 8009318:	d106      	bne.n	8009328 <mem_free+0x8c>
 800931a:	4b0e      	ldr	r3, [pc, #56]	; (8009354 <mem_free+0xb8>)
 800931c:	f44f 72e0 	mov.w	r2, #448	; 0x1c0
 8009320:	4913      	ldr	r1, [pc, #76]	; (8009370 <mem_free+0xd4>)
 8009322:	480e      	ldr	r0, [pc, #56]	; (800935c <mem_free+0xc0>)
 8009324:	f00c fc56 	bl	8015bd4 <printf_>
  /* ... and is now unused. */
  mem->used = 0;
 8009328:	68fb      	ldr	r3, [r7, #12]
 800932a:	2200      	movs	r2, #0
 800932c:	711a      	strb	r2, [r3, #4]

  if (mem < lfree) {
 800932e:	4b11      	ldr	r3, [pc, #68]	; (8009374 <mem_free+0xd8>)
 8009330:	681b      	ldr	r3, [r3, #0]
 8009332:	68fa      	ldr	r2, [r7, #12]
 8009334:	429a      	cmp	r2, r3
 8009336:	d202      	bcs.n	800933e <mem_free+0xa2>
    /* the newly freed struct is now the lowest */
    lfree = mem;
 8009338:	4a0e      	ldr	r2, [pc, #56]	; (8009374 <mem_free+0xd8>)
 800933a:	68fb      	ldr	r3, [r7, #12]
 800933c:	6013      	str	r3, [r2, #0]
  }

  MEM_STATS_DEC_USED(used, mem->next - (mem_size_t)(((u8_t *)mem - ram)));

  /* finally, see if prev or next are free also */
  plug_holes(mem);
 800933e:	68f8      	ldr	r0, [r7, #12]
 8009340:	f7ff fec8 	bl	80090d4 <plug_holes>
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
 8009344:	4809      	ldr	r0, [pc, #36]	; (800936c <mem_free+0xd0>)
 8009346:	f009 fe7c 	bl	8013042 <sys_mutex_unlock>
 800934a:	e000      	b.n	800934e <mem_free+0xb2>
    return;
 800934c:	bf00      	nop
}
 800934e:	3710      	adds	r7, #16
 8009350:	46bd      	mov	sp, r7
 8009352:	bd80      	pop	{r7, pc}
 8009354:	0801a254 	.word	0x0801a254
 8009358:	0801a344 	.word	0x0801a344
 800935c:	0801a29c 	.word	0x0801a29c
 8009360:	240085c4 	.word	0x240085c4
 8009364:	240085c8 	.word	0x240085c8
 8009368:	0801a368 	.word	0x0801a368
 800936c:	240085d0 	.word	0x240085d0
 8009370:	0801a380 	.word	0x0801a380
 8009374:	240085cc 	.word	0x240085cc

08009378 <mem_trim>:
 *         or NULL if newsize is > old size, in which case rmem is NOT touched
 *         or freed!
 */
void *
mem_trim(void *rmem, mem_size_t newsize)
{
 8009378:	b580      	push	{r7, lr}
 800937a:	b088      	sub	sp, #32
 800937c:	af00      	add	r7, sp, #0
 800937e:	6078      	str	r0, [r7, #4]
 8009380:	460b      	mov	r3, r1
 8009382:	807b      	strh	r3, [r7, #2]
  /* use the FREE_PROTECT here: it protects with sem OR SYS_ARCH_PROTECT */
  LWIP_MEM_FREE_DECL_PROTECT();

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  newsize = LWIP_MEM_ALIGN_SIZE(newsize);
 8009384:	887b      	ldrh	r3, [r7, #2]
 8009386:	3303      	adds	r3, #3
 8009388:	b29b      	uxth	r3, r3
 800938a:	f023 0303 	bic.w	r3, r3, #3
 800938e:	807b      	strh	r3, [r7, #2]

  if (newsize < MIN_SIZE_ALIGNED) {
 8009390:	887b      	ldrh	r3, [r7, #2]
 8009392:	2b0b      	cmp	r3, #11
 8009394:	d801      	bhi.n	800939a <mem_trim+0x22>
    /* every data block must be at least MIN_SIZE_ALIGNED long */
    newsize = MIN_SIZE_ALIGNED;
 8009396:	230c      	movs	r3, #12
 8009398:	807b      	strh	r3, [r7, #2]
  }

  if (newsize > MEM_SIZE_ALIGNED) {
 800939a:	887b      	ldrh	r3, [r7, #2]
 800939c:	f5b3 5f20 	cmp.w	r3, #10240	; 0x2800
 80093a0:	d901      	bls.n	80093a6 <mem_trim+0x2e>
    return NULL;
 80093a2:	2300      	movs	r3, #0
 80093a4:	e0bd      	b.n	8009522 <mem_trim+0x1aa>
  }

  LWIP_ASSERT("mem_trim: legal memory", (u8_t *)rmem >= (u8_t *)ram &&
 80093a6:	4b61      	ldr	r3, [pc, #388]	; (800952c <mem_trim+0x1b4>)
 80093a8:	681b      	ldr	r3, [r3, #0]
 80093aa:	687a      	ldr	r2, [r7, #4]
 80093ac:	429a      	cmp	r2, r3
 80093ae:	d304      	bcc.n	80093ba <mem_trim+0x42>
 80093b0:	4b5f      	ldr	r3, [pc, #380]	; (8009530 <mem_trim+0x1b8>)
 80093b2:	681b      	ldr	r3, [r3, #0]
 80093b4:	687a      	ldr	r2, [r7, #4]
 80093b6:	429a      	cmp	r2, r3
 80093b8:	d306      	bcc.n	80093c8 <mem_trim+0x50>
 80093ba:	4b5e      	ldr	r3, [pc, #376]	; (8009534 <mem_trim+0x1bc>)
 80093bc:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 80093c0:	495d      	ldr	r1, [pc, #372]	; (8009538 <mem_trim+0x1c0>)
 80093c2:	485e      	ldr	r0, [pc, #376]	; (800953c <mem_trim+0x1c4>)
 80093c4:	f00c fc06 	bl	8015bd4 <printf_>
   (u8_t *)rmem < (u8_t *)ram_end);

  if ((u8_t *)rmem < (u8_t *)ram || (u8_t *)rmem >= (u8_t *)ram_end) {
 80093c8:	4b58      	ldr	r3, [pc, #352]	; (800952c <mem_trim+0x1b4>)
 80093ca:	681b      	ldr	r3, [r3, #0]
 80093cc:	687a      	ldr	r2, [r7, #4]
 80093ce:	429a      	cmp	r2, r3
 80093d0:	d304      	bcc.n	80093dc <mem_trim+0x64>
 80093d2:	4b57      	ldr	r3, [pc, #348]	; (8009530 <mem_trim+0x1b8>)
 80093d4:	681b      	ldr	r3, [r3, #0]
 80093d6:	687a      	ldr	r2, [r7, #4]
 80093d8:	429a      	cmp	r2, r3
 80093da:	d307      	bcc.n	80093ec <mem_trim+0x74>
    SYS_ARCH_DECL_PROTECT(lev);
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_trim: illegal memory\n"));
    /* protect mem stats from concurrent access */
    SYS_ARCH_PROTECT(lev);
 80093dc:	f009 fe5c 	bl	8013098 <sys_arch_protect>
 80093e0:	60f8      	str	r0, [r7, #12]
    MEM_STATS_INC(illegal);
    SYS_ARCH_UNPROTECT(lev);
 80093e2:	68f8      	ldr	r0, [r7, #12]
 80093e4:	f009 fe66 	bl	80130b4 <sys_arch_unprotect>
    return rmem;
 80093e8:	687b      	ldr	r3, [r7, #4]
 80093ea:	e09a      	b.n	8009522 <mem_trim+0x1aa>
  }
  /* Get the corresponding struct mem ... */
  /* cast through void* to get rid of alignment warnings */
  mem = (struct mem *)(void *)((u8_t *)rmem - SIZEOF_STRUCT_MEM);
 80093ec:	687b      	ldr	r3, [r7, #4]
 80093ee:	3b08      	subs	r3, #8
 80093f0:	61fb      	str	r3, [r7, #28]
  /* ... and its offset pointer */
  ptr = (mem_size_t)((u8_t *)mem - ram);
 80093f2:	69fb      	ldr	r3, [r7, #28]
 80093f4:	4a4d      	ldr	r2, [pc, #308]	; (800952c <mem_trim+0x1b4>)
 80093f6:	6812      	ldr	r2, [r2, #0]
 80093f8:	1a9b      	subs	r3, r3, r2
 80093fa:	837b      	strh	r3, [r7, #26]

  size = mem->next - ptr - SIZEOF_STRUCT_MEM;
 80093fc:	69fb      	ldr	r3, [r7, #28]
 80093fe:	881a      	ldrh	r2, [r3, #0]
 8009400:	8b7b      	ldrh	r3, [r7, #26]
 8009402:	1ad3      	subs	r3, r2, r3
 8009404:	b29b      	uxth	r3, r3
 8009406:	3b08      	subs	r3, #8
 8009408:	833b      	strh	r3, [r7, #24]
  LWIP_ASSERT("mem_trim can only shrink memory", newsize <= size);
 800940a:	887a      	ldrh	r2, [r7, #2]
 800940c:	8b3b      	ldrh	r3, [r7, #24]
 800940e:	429a      	cmp	r2, r3
 8009410:	d906      	bls.n	8009420 <mem_trim+0xa8>
 8009412:	4b48      	ldr	r3, [pc, #288]	; (8009534 <mem_trim+0x1bc>)
 8009414:	f240 2206 	movw	r2, #518	; 0x206
 8009418:	4949      	ldr	r1, [pc, #292]	; (8009540 <mem_trim+0x1c8>)
 800941a:	4848      	ldr	r0, [pc, #288]	; (800953c <mem_trim+0x1c4>)
 800941c:	f00c fbda 	bl	8015bd4 <printf_>
  if (newsize > size) {
 8009420:	887a      	ldrh	r2, [r7, #2]
 8009422:	8b3b      	ldrh	r3, [r7, #24]
 8009424:	429a      	cmp	r2, r3
 8009426:	d901      	bls.n	800942c <mem_trim+0xb4>
    /* not supported */
    return NULL;
 8009428:	2300      	movs	r3, #0
 800942a:	e07a      	b.n	8009522 <mem_trim+0x1aa>
  }
  if (newsize == size) {
 800942c:	887a      	ldrh	r2, [r7, #2]
 800942e:	8b3b      	ldrh	r3, [r7, #24]
 8009430:	429a      	cmp	r2, r3
 8009432:	d101      	bne.n	8009438 <mem_trim+0xc0>
    /* No change in size, simply return */
    return rmem;
 8009434:	687b      	ldr	r3, [r7, #4]
 8009436:	e074      	b.n	8009522 <mem_trim+0x1aa>
  }

  /* protect the heap from concurrent access */
  LWIP_MEM_FREE_PROTECT();
 8009438:	4842      	ldr	r0, [pc, #264]	; (8009544 <mem_trim+0x1cc>)
 800943a:	f009 fdf3 	bl	8013024 <sys_mutex_lock>

  mem2 = (struct mem *)(void *)&ram[mem->next];
 800943e:	4b3b      	ldr	r3, [pc, #236]	; (800952c <mem_trim+0x1b4>)
 8009440:	681b      	ldr	r3, [r3, #0]
 8009442:	69fa      	ldr	r2, [r7, #28]
 8009444:	8812      	ldrh	r2, [r2, #0]
 8009446:	4413      	add	r3, r2
 8009448:	617b      	str	r3, [r7, #20]
  if (mem2->used == 0) {
 800944a:	697b      	ldr	r3, [r7, #20]
 800944c:	791b      	ldrb	r3, [r3, #4]
 800944e:	2b00      	cmp	r3, #0
 8009450:	d131      	bne.n	80094b6 <mem_trim+0x13e>
    /* The next struct is unused, we can simply move it at little */
    mem_size_t next;
    /* remember the old next pointer */
    next = mem2->next;
 8009452:	697b      	ldr	r3, [r7, #20]
 8009454:	881b      	ldrh	r3, [r3, #0]
 8009456:	823b      	strh	r3, [r7, #16]
    /* create new struct mem which is moved directly after the shrinked mem */
    ptr2 = ptr + SIZEOF_STRUCT_MEM + newsize;
 8009458:	8b7a      	ldrh	r2, [r7, #26]
 800945a:	887b      	ldrh	r3, [r7, #2]
 800945c:	4413      	add	r3, r2
 800945e:	b29b      	uxth	r3, r3
 8009460:	3308      	adds	r3, #8
 8009462:	827b      	strh	r3, [r7, #18]
    if (lfree == mem2) {
 8009464:	4b38      	ldr	r3, [pc, #224]	; (8009548 <mem_trim+0x1d0>)
 8009466:	681b      	ldr	r3, [r3, #0]
 8009468:	697a      	ldr	r2, [r7, #20]
 800946a:	429a      	cmp	r2, r3
 800946c:	d105      	bne.n	800947a <mem_trim+0x102>
      lfree = (struct mem *)(void *)&ram[ptr2];
 800946e:	4b2f      	ldr	r3, [pc, #188]	; (800952c <mem_trim+0x1b4>)
 8009470:	681a      	ldr	r2, [r3, #0]
 8009472:	8a7b      	ldrh	r3, [r7, #18]
 8009474:	4413      	add	r3, r2
 8009476:	4a34      	ldr	r2, [pc, #208]	; (8009548 <mem_trim+0x1d0>)
 8009478:	6013      	str	r3, [r2, #0]
    }
    mem2 = (struct mem *)(void *)&ram[ptr2];
 800947a:	4b2c      	ldr	r3, [pc, #176]	; (800952c <mem_trim+0x1b4>)
 800947c:	681a      	ldr	r2, [r3, #0]
 800947e:	8a7b      	ldrh	r3, [r7, #18]
 8009480:	4413      	add	r3, r2
 8009482:	617b      	str	r3, [r7, #20]
    mem2->used = 0;
 8009484:	697b      	ldr	r3, [r7, #20]
 8009486:	2200      	movs	r2, #0
 8009488:	711a      	strb	r2, [r3, #4]
    /* restore the next pointer */
    mem2->next = next;
 800948a:	697b      	ldr	r3, [r7, #20]
 800948c:	8a3a      	ldrh	r2, [r7, #16]
 800948e:	801a      	strh	r2, [r3, #0]
    /* link it back to mem */
    mem2->prev = ptr;
 8009490:	697b      	ldr	r3, [r7, #20]
 8009492:	8b7a      	ldrh	r2, [r7, #26]
 8009494:	805a      	strh	r2, [r3, #2]
    /* link mem to it */
    mem->next = ptr2;
 8009496:	69fb      	ldr	r3, [r7, #28]
 8009498:	8a7a      	ldrh	r2, [r7, #18]
 800949a:	801a      	strh	r2, [r3, #0]
    /* last thing to restore linked list: as we have moved mem2,
     * let 'mem2->next->prev' point to mem2 again. but only if mem2->next is not
     * the end of the heap */
    if (mem2->next != MEM_SIZE_ALIGNED) {
 800949c:	697b      	ldr	r3, [r7, #20]
 800949e:	881b      	ldrh	r3, [r3, #0]
 80094a0:	f5b3 5f20 	cmp.w	r3, #10240	; 0x2800
 80094a4:	d039      	beq.n	800951a <mem_trim+0x1a2>
      ((struct mem *)(void *)&ram[mem2->next])->prev = ptr2;
 80094a6:	4b21      	ldr	r3, [pc, #132]	; (800952c <mem_trim+0x1b4>)
 80094a8:	681b      	ldr	r3, [r3, #0]
 80094aa:	697a      	ldr	r2, [r7, #20]
 80094ac:	8812      	ldrh	r2, [r2, #0]
 80094ae:	4413      	add	r3, r2
 80094b0:	8a7a      	ldrh	r2, [r7, #18]
 80094b2:	805a      	strh	r2, [r3, #2]
 80094b4:	e031      	b.n	800951a <mem_trim+0x1a2>
    }
    MEM_STATS_DEC_USED(used, (size - newsize));
    /* no need to plug holes, we've already done that */
  } else if (newsize + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED <= size) {
 80094b6:	887b      	ldrh	r3, [r7, #2]
 80094b8:	f103 0214 	add.w	r2, r3, #20
 80094bc:	8b3b      	ldrh	r3, [r7, #24]
 80094be:	429a      	cmp	r2, r3
 80094c0:	d82b      	bhi.n	800951a <mem_trim+0x1a2>
     * Old size ('size') must be big enough to contain at least 'newsize' plus a struct mem
     * ('SIZEOF_STRUCT_MEM') with some data ('MIN_SIZE_ALIGNED').
     * @todo we could leave out MIN_SIZE_ALIGNED. We would create an empty
     *       region that couldn't hold data, but when mem->next gets freed,
     *       the 2 regions would be combined, resulting in more free memory */
    ptr2 = ptr + SIZEOF_STRUCT_MEM + newsize;
 80094c2:	8b7a      	ldrh	r2, [r7, #26]
 80094c4:	887b      	ldrh	r3, [r7, #2]
 80094c6:	4413      	add	r3, r2
 80094c8:	b29b      	uxth	r3, r3
 80094ca:	3308      	adds	r3, #8
 80094cc:	827b      	strh	r3, [r7, #18]
    mem2 = (struct mem *)(void *)&ram[ptr2];
 80094ce:	4b17      	ldr	r3, [pc, #92]	; (800952c <mem_trim+0x1b4>)
 80094d0:	681a      	ldr	r2, [r3, #0]
 80094d2:	8a7b      	ldrh	r3, [r7, #18]
 80094d4:	4413      	add	r3, r2
 80094d6:	617b      	str	r3, [r7, #20]
    if (mem2 < lfree) {
 80094d8:	4b1b      	ldr	r3, [pc, #108]	; (8009548 <mem_trim+0x1d0>)
 80094da:	681b      	ldr	r3, [r3, #0]
 80094dc:	697a      	ldr	r2, [r7, #20]
 80094de:	429a      	cmp	r2, r3
 80094e0:	d202      	bcs.n	80094e8 <mem_trim+0x170>
      lfree = mem2;
 80094e2:	4a19      	ldr	r2, [pc, #100]	; (8009548 <mem_trim+0x1d0>)
 80094e4:	697b      	ldr	r3, [r7, #20]
 80094e6:	6013      	str	r3, [r2, #0]
    }
    mem2->used = 0;
 80094e8:	697b      	ldr	r3, [r7, #20]
 80094ea:	2200      	movs	r2, #0
 80094ec:	711a      	strb	r2, [r3, #4]
    mem2->next = mem->next;
 80094ee:	69fb      	ldr	r3, [r7, #28]
 80094f0:	881a      	ldrh	r2, [r3, #0]
 80094f2:	697b      	ldr	r3, [r7, #20]
 80094f4:	801a      	strh	r2, [r3, #0]
    mem2->prev = ptr;
 80094f6:	697b      	ldr	r3, [r7, #20]
 80094f8:	8b7a      	ldrh	r2, [r7, #26]
 80094fa:	805a      	strh	r2, [r3, #2]
    mem->next = ptr2;
 80094fc:	69fb      	ldr	r3, [r7, #28]
 80094fe:	8a7a      	ldrh	r2, [r7, #18]
 8009500:	801a      	strh	r2, [r3, #0]
    if (mem2->next != MEM_SIZE_ALIGNED) {
 8009502:	697b      	ldr	r3, [r7, #20]
 8009504:	881b      	ldrh	r3, [r3, #0]
 8009506:	f5b3 5f20 	cmp.w	r3, #10240	; 0x2800
 800950a:	d006      	beq.n	800951a <mem_trim+0x1a2>
      ((struct mem *)(void *)&ram[mem2->next])->prev = ptr2;
 800950c:	4b07      	ldr	r3, [pc, #28]	; (800952c <mem_trim+0x1b4>)
 800950e:	681b      	ldr	r3, [r3, #0]
 8009510:	697a      	ldr	r2, [r7, #20]
 8009512:	8812      	ldrh	r2, [r2, #0]
 8009514:	4413      	add	r3, r2
 8009516:	8a7a      	ldrh	r2, [r7, #18]
 8009518:	805a      	strh	r2, [r3, #2]
    -> the remaining space stays unused since it is too small
  } */
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
 800951a:	480a      	ldr	r0, [pc, #40]	; (8009544 <mem_trim+0x1cc>)
 800951c:	f009 fd91 	bl	8013042 <sys_mutex_unlock>
  return rmem;
 8009520:	687b      	ldr	r3, [r7, #4]
}
 8009522:	4618      	mov	r0, r3
 8009524:	3720      	adds	r7, #32
 8009526:	46bd      	mov	sp, r7
 8009528:	bd80      	pop	{r7, pc}
 800952a:	bf00      	nop
 800952c:	240085c4 	.word	0x240085c4
 8009530:	240085c8 	.word	0x240085c8
 8009534:	0801a254 	.word	0x0801a254
 8009538:	0801a394 	.word	0x0801a394
 800953c:	0801a29c 	.word	0x0801a29c
 8009540:	0801a3ac 	.word	0x0801a3ac
 8009544:	240085d0 	.word	0x240085d0
 8009548:	240085cc 	.word	0x240085cc

0800954c <mem_malloc>:
 *
 * Note that the returned value will always be aligned (as defined by MEM_ALIGNMENT).
 */
void *
mem_malloc(mem_size_t size)
{
 800954c:	b580      	push	{r7, lr}
 800954e:	b088      	sub	sp, #32
 8009550:	af00      	add	r7, sp, #0
 8009552:	4603      	mov	r3, r0
 8009554:	80fb      	strh	r3, [r7, #6]
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  u8_t local_mem_free_count = 0;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_ALLOC_DECL_PROTECT();

  if (size == 0) {
 8009556:	88fb      	ldrh	r3, [r7, #6]
 8009558:	2b00      	cmp	r3, #0
 800955a:	d101      	bne.n	8009560 <mem_malloc+0x14>
    return NULL;
 800955c:	2300      	movs	r3, #0
 800955e:	e0d1      	b.n	8009704 <mem_malloc+0x1b8>
  }

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  size = LWIP_MEM_ALIGN_SIZE(size);
 8009560:	88fb      	ldrh	r3, [r7, #6]
 8009562:	3303      	adds	r3, #3
 8009564:	b29b      	uxth	r3, r3
 8009566:	f023 0303 	bic.w	r3, r3, #3
 800956a:	80fb      	strh	r3, [r7, #6]

  if (size < MIN_SIZE_ALIGNED) {
 800956c:	88fb      	ldrh	r3, [r7, #6]
 800956e:	2b0b      	cmp	r3, #11
 8009570:	d801      	bhi.n	8009576 <mem_malloc+0x2a>
    /* every data block must be at least MIN_SIZE_ALIGNED long */
    size = MIN_SIZE_ALIGNED;
 8009572:	230c      	movs	r3, #12
 8009574:	80fb      	strh	r3, [r7, #6]
  }

  if (size > MEM_SIZE_ALIGNED) {
 8009576:	88fb      	ldrh	r3, [r7, #6]
 8009578:	f5b3 5f20 	cmp.w	r3, #10240	; 0x2800
 800957c:	d901      	bls.n	8009582 <mem_malloc+0x36>
    return NULL;
 800957e:	2300      	movs	r3, #0
 8009580:	e0c0      	b.n	8009704 <mem_malloc+0x1b8>
  }

  /* protect the heap from concurrent access */
  sys_mutex_lock(&mem_mutex);
 8009582:	4862      	ldr	r0, [pc, #392]	; (800970c <mem_malloc+0x1c0>)
 8009584:	f009 fd4e 	bl	8013024 <sys_mutex_lock>
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

    /* Scan through the heap searching for a free block that is big enough,
     * beginning with the lowest free block.
     */
    for (ptr = (mem_size_t)((u8_t *)lfree - ram); ptr < MEM_SIZE_ALIGNED - size;
 8009588:	4b61      	ldr	r3, [pc, #388]	; (8009710 <mem_malloc+0x1c4>)
 800958a:	681b      	ldr	r3, [r3, #0]
 800958c:	461a      	mov	r2, r3
 800958e:	4b61      	ldr	r3, [pc, #388]	; (8009714 <mem_malloc+0x1c8>)
 8009590:	681b      	ldr	r3, [r3, #0]
 8009592:	1ad3      	subs	r3, r2, r3
 8009594:	83fb      	strh	r3, [r7, #30]
 8009596:	e0aa      	b.n	80096ee <mem_malloc+0x1a2>
         ptr = ((struct mem *)(void *)&ram[ptr])->next) {
      mem = (struct mem *)(void *)&ram[ptr];
 8009598:	4b5e      	ldr	r3, [pc, #376]	; (8009714 <mem_malloc+0x1c8>)
 800959a:	681a      	ldr	r2, [r3, #0]
 800959c:	8bfb      	ldrh	r3, [r7, #30]
 800959e:	4413      	add	r3, r2
 80095a0:	617b      	str	r3, [r7, #20]
        local_mem_free_count = 1;
        break;
      }
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

      if ((!mem->used) &&
 80095a2:	697b      	ldr	r3, [r7, #20]
 80095a4:	791b      	ldrb	r3, [r3, #4]
 80095a6:	2b00      	cmp	r3, #0
 80095a8:	f040 809b 	bne.w	80096e2 <mem_malloc+0x196>
          (mem->next - (ptr + SIZEOF_STRUCT_MEM)) >= size) {
 80095ac:	697b      	ldr	r3, [r7, #20]
 80095ae:	881b      	ldrh	r3, [r3, #0]
 80095b0:	461a      	mov	r2, r3
 80095b2:	8bfb      	ldrh	r3, [r7, #30]
 80095b4:	1ad3      	subs	r3, r2, r3
 80095b6:	f1a3 0208 	sub.w	r2, r3, #8
 80095ba:	88fb      	ldrh	r3, [r7, #6]
      if ((!mem->used) &&
 80095bc:	429a      	cmp	r2, r3
 80095be:	f0c0 8090 	bcc.w	80096e2 <mem_malloc+0x196>
        /* mem is not used and at least perfect fit is possible:
         * mem->next - (ptr + SIZEOF_STRUCT_MEM) gives us the 'user data size' of mem */

        if (mem->next - (ptr + SIZEOF_STRUCT_MEM) >= (size + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED)) {
 80095c2:	697b      	ldr	r3, [r7, #20]
 80095c4:	881b      	ldrh	r3, [r3, #0]
 80095c6:	461a      	mov	r2, r3
 80095c8:	8bfb      	ldrh	r3, [r7, #30]
 80095ca:	1ad3      	subs	r3, r2, r3
 80095cc:	f1a3 0208 	sub.w	r2, r3, #8
 80095d0:	88fb      	ldrh	r3, [r7, #6]
 80095d2:	3314      	adds	r3, #20
 80095d4:	429a      	cmp	r2, r3
 80095d6:	d327      	bcc.n	8009628 <mem_malloc+0xdc>
           * struct mem would fit in but no data between mem2 and mem2->next
           * @todo we could leave out MIN_SIZE_ALIGNED. We would create an empty
           *       region that couldn't hold data, but when mem->next gets freed,
           *       the 2 regions would be combined, resulting in more free memory
           */
          ptr2 = ptr + SIZEOF_STRUCT_MEM + size;
 80095d8:	8bfa      	ldrh	r2, [r7, #30]
 80095da:	88fb      	ldrh	r3, [r7, #6]
 80095dc:	4413      	add	r3, r2
 80095de:	b29b      	uxth	r3, r3
 80095e0:	3308      	adds	r3, #8
 80095e2:	827b      	strh	r3, [r7, #18]
          /* create mem2 struct */
          mem2 = (struct mem *)(void *)&ram[ptr2];
 80095e4:	4b4b      	ldr	r3, [pc, #300]	; (8009714 <mem_malloc+0x1c8>)
 80095e6:	681a      	ldr	r2, [r3, #0]
 80095e8:	8a7b      	ldrh	r3, [r7, #18]
 80095ea:	4413      	add	r3, r2
 80095ec:	60fb      	str	r3, [r7, #12]
          mem2->used = 0;
 80095ee:	68fb      	ldr	r3, [r7, #12]
 80095f0:	2200      	movs	r2, #0
 80095f2:	711a      	strb	r2, [r3, #4]
          mem2->next = mem->next;
 80095f4:	697b      	ldr	r3, [r7, #20]
 80095f6:	881a      	ldrh	r2, [r3, #0]
 80095f8:	68fb      	ldr	r3, [r7, #12]
 80095fa:	801a      	strh	r2, [r3, #0]
          mem2->prev = ptr;
 80095fc:	68fb      	ldr	r3, [r7, #12]
 80095fe:	8bfa      	ldrh	r2, [r7, #30]
 8009600:	805a      	strh	r2, [r3, #2]
          /* and insert it between mem and mem->next */
          mem->next = ptr2;
 8009602:	697b      	ldr	r3, [r7, #20]
 8009604:	8a7a      	ldrh	r2, [r7, #18]
 8009606:	801a      	strh	r2, [r3, #0]
          mem->used = 1;
 8009608:	697b      	ldr	r3, [r7, #20]
 800960a:	2201      	movs	r2, #1
 800960c:	711a      	strb	r2, [r3, #4]

          if (mem2->next != MEM_SIZE_ALIGNED) {
 800960e:	68fb      	ldr	r3, [r7, #12]
 8009610:	881b      	ldrh	r3, [r3, #0]
 8009612:	f5b3 5f20 	cmp.w	r3, #10240	; 0x2800
 8009616:	d00a      	beq.n	800962e <mem_malloc+0xe2>
            ((struct mem *)(void *)&ram[mem2->next])->prev = ptr2;
 8009618:	4b3e      	ldr	r3, [pc, #248]	; (8009714 <mem_malloc+0x1c8>)
 800961a:	681b      	ldr	r3, [r3, #0]
 800961c:	68fa      	ldr	r2, [r7, #12]
 800961e:	8812      	ldrh	r2, [r2, #0]
 8009620:	4413      	add	r3, r2
 8009622:	8a7a      	ldrh	r2, [r7, #18]
 8009624:	805a      	strh	r2, [r3, #2]
 8009626:	e002      	b.n	800962e <mem_malloc+0xe2>
           * take care of this).
           * -> near fit or exact fit: do not split, no mem2 creation
           * also can't move mem->next directly behind mem, since mem->next
           * will always be used at this point!
           */
          mem->used = 1;
 8009628:	697b      	ldr	r3, [r7, #20]
 800962a:	2201      	movs	r2, #1
 800962c:	711a      	strb	r2, [r3, #4]
          MEM_STATS_INC_USED(used, mem->next - (mem_size_t)((u8_t *)mem - ram));
        }
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
mem_malloc_adjust_lfree:
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
        if (mem == lfree) {
 800962e:	4b38      	ldr	r3, [pc, #224]	; (8009710 <mem_malloc+0x1c4>)
 8009630:	681b      	ldr	r3, [r3, #0]
 8009632:	697a      	ldr	r2, [r7, #20]
 8009634:	429a      	cmp	r2, r3
 8009636:	d127      	bne.n	8009688 <mem_malloc+0x13c>
          struct mem *cur = lfree;
 8009638:	4b35      	ldr	r3, [pc, #212]	; (8009710 <mem_malloc+0x1c4>)
 800963a:	681b      	ldr	r3, [r3, #0]
 800963c:	61bb      	str	r3, [r7, #24]
          /* Find next free block after mem and update lowest free pointer */
          while (cur->used && cur != ram_end) {
 800963e:	e005      	b.n	800964c <mem_malloc+0x100>
              /* If mem_free or mem_trim have run, we have to restart since they
                 could have altered our current struct mem or lfree. */
              goto mem_malloc_adjust_lfree;
            }
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
            cur = (struct mem *)(void *)&ram[cur->next];
 8009640:	4b34      	ldr	r3, [pc, #208]	; (8009714 <mem_malloc+0x1c8>)
 8009642:	681b      	ldr	r3, [r3, #0]
 8009644:	69ba      	ldr	r2, [r7, #24]
 8009646:	8812      	ldrh	r2, [r2, #0]
 8009648:	4413      	add	r3, r2
 800964a:	61bb      	str	r3, [r7, #24]
          while (cur->used && cur != ram_end) {
 800964c:	69bb      	ldr	r3, [r7, #24]
 800964e:	791b      	ldrb	r3, [r3, #4]
 8009650:	2b00      	cmp	r3, #0
 8009652:	d004      	beq.n	800965e <mem_malloc+0x112>
 8009654:	4b30      	ldr	r3, [pc, #192]	; (8009718 <mem_malloc+0x1cc>)
 8009656:	681b      	ldr	r3, [r3, #0]
 8009658:	69ba      	ldr	r2, [r7, #24]
 800965a:	429a      	cmp	r2, r3
 800965c:	d1f0      	bne.n	8009640 <mem_malloc+0xf4>
          }
          lfree = cur;
 800965e:	4a2c      	ldr	r2, [pc, #176]	; (8009710 <mem_malloc+0x1c4>)
 8009660:	69bb      	ldr	r3, [r7, #24]
 8009662:	6013      	str	r3, [r2, #0]
          LWIP_ASSERT("mem_malloc: !lfree->used", ((lfree == ram_end) || (!lfree->used)));
 8009664:	4b2a      	ldr	r3, [pc, #168]	; (8009710 <mem_malloc+0x1c4>)
 8009666:	681a      	ldr	r2, [r3, #0]
 8009668:	4b2b      	ldr	r3, [pc, #172]	; (8009718 <mem_malloc+0x1cc>)
 800966a:	681b      	ldr	r3, [r3, #0]
 800966c:	429a      	cmp	r2, r3
 800966e:	d00b      	beq.n	8009688 <mem_malloc+0x13c>
 8009670:	4b27      	ldr	r3, [pc, #156]	; (8009710 <mem_malloc+0x1c4>)
 8009672:	681b      	ldr	r3, [r3, #0]
 8009674:	791b      	ldrb	r3, [r3, #4]
 8009676:	2b00      	cmp	r3, #0
 8009678:	d006      	beq.n	8009688 <mem_malloc+0x13c>
 800967a:	4b28      	ldr	r3, [pc, #160]	; (800971c <mem_malloc+0x1d0>)
 800967c:	f240 22cf 	movw	r2, #719	; 0x2cf
 8009680:	4927      	ldr	r1, [pc, #156]	; (8009720 <mem_malloc+0x1d4>)
 8009682:	4828      	ldr	r0, [pc, #160]	; (8009724 <mem_malloc+0x1d8>)
 8009684:	f00c faa6 	bl	8015bd4 <printf_>
        }
        LWIP_MEM_ALLOC_UNPROTECT();
        sys_mutex_unlock(&mem_mutex);
 8009688:	4820      	ldr	r0, [pc, #128]	; (800970c <mem_malloc+0x1c0>)
 800968a:	f009 fcda 	bl	8013042 <sys_mutex_unlock>
        LWIP_ASSERT("mem_malloc: allocated memory not above ram_end.",
 800968e:	88fa      	ldrh	r2, [r7, #6]
 8009690:	697b      	ldr	r3, [r7, #20]
 8009692:	4413      	add	r3, r2
 8009694:	3308      	adds	r3, #8
 8009696:	4a20      	ldr	r2, [pc, #128]	; (8009718 <mem_malloc+0x1cc>)
 8009698:	6812      	ldr	r2, [r2, #0]
 800969a:	4293      	cmp	r3, r2
 800969c:	d906      	bls.n	80096ac <mem_malloc+0x160>
 800969e:	4b1f      	ldr	r3, [pc, #124]	; (800971c <mem_malloc+0x1d0>)
 80096a0:	f44f 7235 	mov.w	r2, #724	; 0x2d4
 80096a4:	4920      	ldr	r1, [pc, #128]	; (8009728 <mem_malloc+0x1dc>)
 80096a6:	481f      	ldr	r0, [pc, #124]	; (8009724 <mem_malloc+0x1d8>)
 80096a8:	f00c fa94 	bl	8015bd4 <printf_>
         (mem_ptr_t)mem + SIZEOF_STRUCT_MEM + size <= (mem_ptr_t)ram_end);
        LWIP_ASSERT("mem_malloc: allocated memory properly aligned.",
 80096ac:	697b      	ldr	r3, [r7, #20]
 80096ae:	f003 0303 	and.w	r3, r3, #3
 80096b2:	2b00      	cmp	r3, #0
 80096b4:	d006      	beq.n	80096c4 <mem_malloc+0x178>
 80096b6:	4b19      	ldr	r3, [pc, #100]	; (800971c <mem_malloc+0x1d0>)
 80096b8:	f240 22d6 	movw	r2, #726	; 0x2d6
 80096bc:	491b      	ldr	r1, [pc, #108]	; (800972c <mem_malloc+0x1e0>)
 80096be:	4819      	ldr	r0, [pc, #100]	; (8009724 <mem_malloc+0x1d8>)
 80096c0:	f00c fa88 	bl	8015bd4 <printf_>
         ((mem_ptr_t)mem + SIZEOF_STRUCT_MEM) % MEM_ALIGNMENT == 0);
        LWIP_ASSERT("mem_malloc: sanity check alignment",
 80096c4:	697b      	ldr	r3, [r7, #20]
 80096c6:	f003 0303 	and.w	r3, r3, #3
 80096ca:	2b00      	cmp	r3, #0
 80096cc:	d006      	beq.n	80096dc <mem_malloc+0x190>
 80096ce:	4b13      	ldr	r3, [pc, #76]	; (800971c <mem_malloc+0x1d0>)
 80096d0:	f44f 7236 	mov.w	r2, #728	; 0x2d8
 80096d4:	4916      	ldr	r1, [pc, #88]	; (8009730 <mem_malloc+0x1e4>)
 80096d6:	4813      	ldr	r0, [pc, #76]	; (8009724 <mem_malloc+0x1d8>)
 80096d8:	f00c fa7c 	bl	8015bd4 <printf_>
          (((mem_ptr_t)mem) & (MEM_ALIGNMENT-1)) == 0);

        return (u8_t *)mem + SIZEOF_STRUCT_MEM;
 80096dc:	697b      	ldr	r3, [r7, #20]
 80096de:	3308      	adds	r3, #8
 80096e0:	e010      	b.n	8009704 <mem_malloc+0x1b8>
         ptr = ((struct mem *)(void *)&ram[ptr])->next) {
 80096e2:	4b0c      	ldr	r3, [pc, #48]	; (8009714 <mem_malloc+0x1c8>)
 80096e4:	681a      	ldr	r2, [r3, #0]
 80096e6:	8bfb      	ldrh	r3, [r7, #30]
 80096e8:	4413      	add	r3, r2
 80096ea:	881b      	ldrh	r3, [r3, #0]
 80096ec:	83fb      	strh	r3, [r7, #30]
    for (ptr = (mem_size_t)((u8_t *)lfree - ram); ptr < MEM_SIZE_ALIGNED - size;
 80096ee:	8bfa      	ldrh	r2, [r7, #30]
 80096f0:	88fb      	ldrh	r3, [r7, #6]
 80096f2:	f5c3 5320 	rsb	r3, r3, #10240	; 0x2800
 80096f6:	429a      	cmp	r2, r3
 80096f8:	f4ff af4e 	bcc.w	8009598 <mem_malloc+0x4c>
  } while (local_mem_free_count != 0);
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("mem_malloc: could not allocate %"S16_F" bytes\n", (s16_t)size));
  MEM_STATS_INC(err);
  LWIP_MEM_ALLOC_UNPROTECT();
  sys_mutex_unlock(&mem_mutex);
 80096fc:	4803      	ldr	r0, [pc, #12]	; (800970c <mem_malloc+0x1c0>)
 80096fe:	f009 fca0 	bl	8013042 <sys_mutex_unlock>
  return NULL;
 8009702:	2300      	movs	r3, #0
}
 8009704:	4618      	mov	r0, r3
 8009706:	3720      	adds	r7, #32
 8009708:	46bd      	mov	sp, r7
 800970a:	bd80      	pop	{r7, pc}
 800970c:	240085d0 	.word	0x240085d0
 8009710:	240085cc 	.word	0x240085cc
 8009714:	240085c4 	.word	0x240085c4
 8009718:	240085c8 	.word	0x240085c8
 800971c:	0801a254 	.word	0x0801a254
 8009720:	0801a3cc 	.word	0x0801a3cc
 8009724:	0801a29c 	.word	0x0801a29c
 8009728:	0801a3e8 	.word	0x0801a3e8
 800972c:	0801a418 	.word	0x0801a418
 8009730:	0801a448 	.word	0x0801a448

08009734 <memp_init_pool>:
 *
 * @param desc pool to initialize
 */
void
memp_init_pool(const struct memp_desc *desc)
{
 8009734:	b480      	push	{r7}
 8009736:	b085      	sub	sp, #20
 8009738:	af00      	add	r7, sp, #0
 800973a:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(desc);
#else
  int i;
  struct memp *memp;

  *desc->tab = NULL;
 800973c:	687b      	ldr	r3, [r7, #4]
 800973e:	689b      	ldr	r3, [r3, #8]
 8009740:	2200      	movs	r2, #0
 8009742:	601a      	str	r2, [r3, #0]
  memp = (struct memp*)LWIP_MEM_ALIGN(desc->base);
 8009744:	687b      	ldr	r3, [r7, #4]
 8009746:	685b      	ldr	r3, [r3, #4]
 8009748:	3303      	adds	r3, #3
 800974a:	f023 0303 	bic.w	r3, r3, #3
 800974e:	60bb      	str	r3, [r7, #8]
  /* create a linked list of memp elements */
  for (i = 0; i < desc->num; ++i) {
 8009750:	2300      	movs	r3, #0
 8009752:	60fb      	str	r3, [r7, #12]
 8009754:	e011      	b.n	800977a <memp_init_pool+0x46>
    memp->next = *desc->tab;
 8009756:	687b      	ldr	r3, [r7, #4]
 8009758:	689b      	ldr	r3, [r3, #8]
 800975a:	681a      	ldr	r2, [r3, #0]
 800975c:	68bb      	ldr	r3, [r7, #8]
 800975e:	601a      	str	r2, [r3, #0]
    *desc->tab = memp;
 8009760:	687b      	ldr	r3, [r7, #4]
 8009762:	689b      	ldr	r3, [r3, #8]
 8009764:	68ba      	ldr	r2, [r7, #8]
 8009766:	601a      	str	r2, [r3, #0]
#if MEMP_OVERFLOW_CHECK
    memp_overflow_init_element(memp, desc);
#endif /* MEMP_OVERFLOW_CHECK */
   /* cast through void* to get rid of alignment warnings */
   memp = (struct memp *)(void *)((u8_t *)memp + MEMP_SIZE + desc->size
 8009768:	687b      	ldr	r3, [r7, #4]
 800976a:	881b      	ldrh	r3, [r3, #0]
 800976c:	461a      	mov	r2, r3
 800976e:	68bb      	ldr	r3, [r7, #8]
 8009770:	4413      	add	r3, r2
 8009772:	60bb      	str	r3, [r7, #8]
  for (i = 0; i < desc->num; ++i) {
 8009774:	68fb      	ldr	r3, [r7, #12]
 8009776:	3301      	adds	r3, #1
 8009778:	60fb      	str	r3, [r7, #12]
 800977a:	687b      	ldr	r3, [r7, #4]
 800977c:	885b      	ldrh	r3, [r3, #2]
 800977e:	461a      	mov	r2, r3
 8009780:	68fb      	ldr	r3, [r7, #12]
 8009782:	4293      	cmp	r3, r2
 8009784:	dbe7      	blt.n	8009756 <memp_init_pool+0x22>
#endif /* !MEMP_MEM_MALLOC */

#if MEMP_STATS && (defined(LWIP_DEBUG) || LWIP_STATS_DISPLAY)
  desc->stats->name  = desc->desc;
#endif /* MEMP_STATS && (defined(LWIP_DEBUG) || LWIP_STATS_DISPLAY) */
}
 8009786:	bf00      	nop
 8009788:	3714      	adds	r7, #20
 800978a:	46bd      	mov	sp, r7
 800978c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009790:	4770      	bx	lr
	...

08009794 <memp_init>:
 *
 * Carves out memp_memory into linked lists for each pool-type.
 */
void
memp_init(void)
{
 8009794:	b580      	push	{r7, lr}
 8009796:	b082      	sub	sp, #8
 8009798:	af00      	add	r7, sp, #0
  u16_t i;

  /* for every pool: */
  for (i = 0; i < LWIP_ARRAYSIZE(memp_pools); i++) {
 800979a:	2300      	movs	r3, #0
 800979c:	80fb      	strh	r3, [r7, #6]
 800979e:	e009      	b.n	80097b4 <memp_init+0x20>
    memp_init_pool(memp_pools[i]);
 80097a0:	88fb      	ldrh	r3, [r7, #6]
 80097a2:	4a08      	ldr	r2, [pc, #32]	; (80097c4 <memp_init+0x30>)
 80097a4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80097a8:	4618      	mov	r0, r3
 80097aa:	f7ff ffc3 	bl	8009734 <memp_init_pool>
  for (i = 0; i < LWIP_ARRAYSIZE(memp_pools); i++) {
 80097ae:	88fb      	ldrh	r3, [r7, #6]
 80097b0:	3301      	adds	r3, #1
 80097b2:	80fb      	strh	r3, [r7, #6]
 80097b4:	88fb      	ldrh	r3, [r7, #6]
 80097b6:	2b0c      	cmp	r3, #12
 80097b8:	d9f2      	bls.n	80097a0 <memp_init+0xc>

#if MEMP_OVERFLOW_CHECK >= 2
  /* check everything a first time to see if it worked */
  memp_overflow_check_all();
#endif /* MEMP_OVERFLOW_CHECK >= 2 */
}
 80097ba:	bf00      	nop
 80097bc:	3708      	adds	r7, #8
 80097be:	46bd      	mov	sp, r7
 80097c0:	bd80      	pop	{r7, pc}
 80097c2:	bf00      	nop
 80097c4:	0801c0ec 	.word	0x0801c0ec

080097c8 <do_memp_malloc_pool>:
#if !MEMP_OVERFLOW_CHECK
do_memp_malloc_pool(const struct memp_desc *desc)
#else
do_memp_malloc_pool_fn(const struct memp_desc *desc, const char* file, const int line)
#endif
{
 80097c8:	b580      	push	{r7, lr}
 80097ca:	b084      	sub	sp, #16
 80097cc:	af00      	add	r7, sp, #0
 80097ce:	6078      	str	r0, [r7, #4]

#if MEMP_MEM_MALLOC
  memp = (struct memp *)mem_malloc(MEMP_SIZE + MEMP_ALIGN_SIZE(desc->size));
  SYS_ARCH_PROTECT(old_level);
#else /* MEMP_MEM_MALLOC */
  SYS_ARCH_PROTECT(old_level);
 80097d0:	f009 fc62 	bl	8013098 <sys_arch_protect>
 80097d4:	60f8      	str	r0, [r7, #12]

  memp = *desc->tab;
 80097d6:	687b      	ldr	r3, [r7, #4]
 80097d8:	689b      	ldr	r3, [r3, #8]
 80097da:	681b      	ldr	r3, [r3, #0]
 80097dc:	60bb      	str	r3, [r7, #8]
#endif /* MEMP_MEM_MALLOC */

  if (memp != NULL) {
 80097de:	68bb      	ldr	r3, [r7, #8]
 80097e0:	2b00      	cmp	r3, #0
 80097e2:	d015      	beq.n	8009810 <do_memp_malloc_pool+0x48>
#if MEMP_OVERFLOW_CHECK == 1
    memp_overflow_check_element_overflow(memp, desc);
    memp_overflow_check_element_underflow(memp, desc);
#endif /* MEMP_OVERFLOW_CHECK */

    *desc->tab = memp->next;
 80097e4:	687b      	ldr	r3, [r7, #4]
 80097e6:	689b      	ldr	r3, [r3, #8]
 80097e8:	68ba      	ldr	r2, [r7, #8]
 80097ea:	6812      	ldr	r2, [r2, #0]
 80097ec:	601a      	str	r2, [r3, #0]
    memp->line = line;
#if MEMP_MEM_MALLOC
    memp_overflow_init_element(memp, desc);
#endif /* MEMP_MEM_MALLOC */
#endif /* MEMP_OVERFLOW_CHECK */
    LWIP_ASSERT("memp_malloc: memp properly aligned",
 80097ee:	68bb      	ldr	r3, [r7, #8]
 80097f0:	f003 0303 	and.w	r3, r3, #3
 80097f4:	2b00      	cmp	r3, #0
 80097f6:	d006      	beq.n	8009806 <do_memp_malloc_pool+0x3e>
 80097f8:	4b09      	ldr	r3, [pc, #36]	; (8009820 <do_memp_malloc_pool+0x58>)
 80097fa:	f240 1249 	movw	r2, #329	; 0x149
 80097fe:	4909      	ldr	r1, [pc, #36]	; (8009824 <do_memp_malloc_pool+0x5c>)
 8009800:	4809      	ldr	r0, [pc, #36]	; (8009828 <do_memp_malloc_pool+0x60>)
 8009802:	f00c f9e7 	bl	8015bd4 <printf_>
    desc->stats->used++;
    if (desc->stats->used > desc->stats->max) {
      desc->stats->max = desc->stats->used;
    }
#endif
    SYS_ARCH_UNPROTECT(old_level);
 8009806:	68f8      	ldr	r0, [r7, #12]
 8009808:	f009 fc54 	bl	80130b4 <sys_arch_unprotect>
    /* cast through u8_t* to get rid of alignment warnings */
    return ((u8_t*)memp + MEMP_SIZE);
 800980c:	68bb      	ldr	r3, [r7, #8]
 800980e:	e003      	b.n	8009818 <do_memp_malloc_pool+0x50>
#if MEMP_STATS
    desc->stats->err++;
#endif
  }

  SYS_ARCH_UNPROTECT(old_level);
 8009810:	68f8      	ldr	r0, [r7, #12]
 8009812:	f009 fc4f 	bl	80130b4 <sys_arch_unprotect>
  return NULL;
 8009816:	2300      	movs	r3, #0
}
 8009818:	4618      	mov	r0, r3
 800981a:	3710      	adds	r7, #16
 800981c:	46bd      	mov	sp, r7
 800981e:	bd80      	pop	{r7, pc}
 8009820:	0801a46c 	.word	0x0801a46c
 8009824:	0801a49c 	.word	0x0801a49c
 8009828:	0801a4c0 	.word	0x0801a4c0

0800982c <memp_malloc_pool>:
#if !MEMP_OVERFLOW_CHECK
memp_malloc_pool(const struct memp_desc *desc)
#else
memp_malloc_pool_fn(const struct memp_desc *desc, const char* file, const int line)
#endif
{
 800982c:	b580      	push	{r7, lr}
 800982e:	b082      	sub	sp, #8
 8009830:	af00      	add	r7, sp, #0
 8009832:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("invalid pool desc", desc != NULL);
 8009834:	687b      	ldr	r3, [r7, #4]
 8009836:	2b00      	cmp	r3, #0
 8009838:	d106      	bne.n	8009848 <memp_malloc_pool+0x1c>
 800983a:	4b0a      	ldr	r3, [pc, #40]	; (8009864 <memp_malloc_pool+0x38>)
 800983c:	f44f 72b6 	mov.w	r2, #364	; 0x16c
 8009840:	4909      	ldr	r1, [pc, #36]	; (8009868 <memp_malloc_pool+0x3c>)
 8009842:	480a      	ldr	r0, [pc, #40]	; (800986c <memp_malloc_pool+0x40>)
 8009844:	f00c f9c6 	bl	8015bd4 <printf_>
  if (desc == NULL) {
 8009848:	687b      	ldr	r3, [r7, #4]
 800984a:	2b00      	cmp	r3, #0
 800984c:	d101      	bne.n	8009852 <memp_malloc_pool+0x26>
    return NULL;
 800984e:	2300      	movs	r3, #0
 8009850:	e003      	b.n	800985a <memp_malloc_pool+0x2e>
  }

#if !MEMP_OVERFLOW_CHECK
  return do_memp_malloc_pool(desc);
 8009852:	6878      	ldr	r0, [r7, #4]
 8009854:	f7ff ffb8 	bl	80097c8 <do_memp_malloc_pool>
 8009858:	4603      	mov	r3, r0
#else
  return do_memp_malloc_pool_fn(desc, file, line);
#endif
}
 800985a:	4618      	mov	r0, r3
 800985c:	3708      	adds	r7, #8
 800985e:	46bd      	mov	sp, r7
 8009860:	bd80      	pop	{r7, pc}
 8009862:	bf00      	nop
 8009864:	0801a46c 	.word	0x0801a46c
 8009868:	0801a4e8 	.word	0x0801a4e8
 800986c:	0801a4c0 	.word	0x0801a4c0

08009870 <memp_malloc>:
#if !MEMP_OVERFLOW_CHECK
memp_malloc(memp_t type)
#else
memp_malloc_fn(memp_t type, const char* file, const int line)
#endif
{
 8009870:	b580      	push	{r7, lr}
 8009872:	b084      	sub	sp, #16
 8009874:	af00      	add	r7, sp, #0
 8009876:	4603      	mov	r3, r0
 8009878:	71fb      	strb	r3, [r7, #7]
  void *memp;
  LWIP_ERROR("memp_malloc: type < MEMP_MAX", (type < MEMP_MAX), return NULL;);
 800987a:	79fb      	ldrb	r3, [r7, #7]
 800987c:	2b0c      	cmp	r3, #12
 800987e:	d908      	bls.n	8009892 <memp_malloc+0x22>
 8009880:	4b0a      	ldr	r3, [pc, #40]	; (80098ac <memp_malloc+0x3c>)
 8009882:	f240 1287 	movw	r2, #391	; 0x187
 8009886:	490a      	ldr	r1, [pc, #40]	; (80098b0 <memp_malloc+0x40>)
 8009888:	480a      	ldr	r0, [pc, #40]	; (80098b4 <memp_malloc+0x44>)
 800988a:	f00c f9a3 	bl	8015bd4 <printf_>
 800988e:	2300      	movs	r3, #0
 8009890:	e008      	b.n	80098a4 <memp_malloc+0x34>
#if MEMP_OVERFLOW_CHECK >= 2
  memp_overflow_check_all();
#endif /* MEMP_OVERFLOW_CHECK >= 2 */

#if !MEMP_OVERFLOW_CHECK
  memp = do_memp_malloc_pool(memp_pools[type]);
 8009892:	79fb      	ldrb	r3, [r7, #7]
 8009894:	4a08      	ldr	r2, [pc, #32]	; (80098b8 <memp_malloc+0x48>)
 8009896:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800989a:	4618      	mov	r0, r3
 800989c:	f7ff ff94 	bl	80097c8 <do_memp_malloc_pool>
 80098a0:	60f8      	str	r0, [r7, #12]
#else
  memp = do_memp_malloc_pool_fn(memp_pools[type], file, line);
#endif

  return memp;
 80098a2:	68fb      	ldr	r3, [r7, #12]
}
 80098a4:	4618      	mov	r0, r3
 80098a6:	3710      	adds	r7, #16
 80098a8:	46bd      	mov	sp, r7
 80098aa:	bd80      	pop	{r7, pc}
 80098ac:	0801a46c 	.word	0x0801a46c
 80098b0:	0801a4fc 	.word	0x0801a4fc
 80098b4:	0801a4c0 	.word	0x0801a4c0
 80098b8:	0801c0ec 	.word	0x0801c0ec

080098bc <do_memp_free_pool>:

static void
do_memp_free_pool(const struct memp_desc* desc, void *mem)
{
 80098bc:	b580      	push	{r7, lr}
 80098be:	b084      	sub	sp, #16
 80098c0:	af00      	add	r7, sp, #0
 80098c2:	6078      	str	r0, [r7, #4]
 80098c4:	6039      	str	r1, [r7, #0]
  struct memp *memp;
  SYS_ARCH_DECL_PROTECT(old_level);

  LWIP_ASSERT("memp_free: mem properly aligned",
 80098c6:	683b      	ldr	r3, [r7, #0]
 80098c8:	f003 0303 	and.w	r3, r3, #3
 80098cc:	2b00      	cmp	r3, #0
 80098ce:	d006      	beq.n	80098de <do_memp_free_pool+0x22>
 80098d0:	4b0d      	ldr	r3, [pc, #52]	; (8009908 <do_memp_free_pool+0x4c>)
 80098d2:	f240 129d 	movw	r2, #413	; 0x19d
 80098d6:	490d      	ldr	r1, [pc, #52]	; (800990c <do_memp_free_pool+0x50>)
 80098d8:	480d      	ldr	r0, [pc, #52]	; (8009910 <do_memp_free_pool+0x54>)
 80098da:	f00c f97b 	bl	8015bd4 <printf_>
                ((mem_ptr_t)mem % MEM_ALIGNMENT) == 0);

  /* cast through void* to get rid of alignment warnings */
  memp = (struct memp *)(void *)((u8_t*)mem - MEMP_SIZE);
 80098de:	683b      	ldr	r3, [r7, #0]
 80098e0:	60fb      	str	r3, [r7, #12]

  SYS_ARCH_PROTECT(old_level);
 80098e2:	f009 fbd9 	bl	8013098 <sys_arch_protect>
 80098e6:	60b8      	str	r0, [r7, #8]
#if MEMP_MEM_MALLOC
  LWIP_UNUSED_ARG(desc);
  SYS_ARCH_UNPROTECT(old_level);
  mem_free(memp);
#else /* MEMP_MEM_MALLOC */
  memp->next = *desc->tab;
 80098e8:	687b      	ldr	r3, [r7, #4]
 80098ea:	689b      	ldr	r3, [r3, #8]
 80098ec:	681a      	ldr	r2, [r3, #0]
 80098ee:	68fb      	ldr	r3, [r7, #12]
 80098f0:	601a      	str	r2, [r3, #0]
  *desc->tab = memp;
 80098f2:	687b      	ldr	r3, [r7, #4]
 80098f4:	689b      	ldr	r3, [r3, #8]
 80098f6:	68fa      	ldr	r2, [r7, #12]
 80098f8:	601a      	str	r2, [r3, #0]

#if MEMP_SANITY_CHECK
  LWIP_ASSERT("memp sanity", memp_sanity(desc));
#endif /* MEMP_SANITY_CHECK */

  SYS_ARCH_UNPROTECT(old_level);
 80098fa:	68b8      	ldr	r0, [r7, #8]
 80098fc:	f009 fbda 	bl	80130b4 <sys_arch_unprotect>
#endif /* !MEMP_MEM_MALLOC */
}
 8009900:	bf00      	nop
 8009902:	3710      	adds	r7, #16
 8009904:	46bd      	mov	sp, r7
 8009906:	bd80      	pop	{r7, pc}
 8009908:	0801a46c 	.word	0x0801a46c
 800990c:	0801a51c 	.word	0x0801a51c
 8009910:	0801a4c0 	.word	0x0801a4c0

08009914 <memp_free_pool>:
 * @param desc the pool where to put mem
 * @param mem the memp element to free
 */
void
memp_free_pool(const struct memp_desc* desc, void *mem)
{
 8009914:	b580      	push	{r7, lr}
 8009916:	b082      	sub	sp, #8
 8009918:	af00      	add	r7, sp, #0
 800991a:	6078      	str	r0, [r7, #4]
 800991c:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT("invalid pool desc", desc != NULL);
 800991e:	687b      	ldr	r3, [r7, #4]
 8009920:	2b00      	cmp	r3, #0
 8009922:	d106      	bne.n	8009932 <memp_free_pool+0x1e>
 8009924:	4b0a      	ldr	r3, [pc, #40]	; (8009950 <memp_free_pool+0x3c>)
 8009926:	f44f 72e3 	mov.w	r2, #454	; 0x1c6
 800992a:	490a      	ldr	r1, [pc, #40]	; (8009954 <memp_free_pool+0x40>)
 800992c:	480a      	ldr	r0, [pc, #40]	; (8009958 <memp_free_pool+0x44>)
 800992e:	f00c f951 	bl	8015bd4 <printf_>
  if ((desc == NULL) || (mem == NULL)) {
 8009932:	687b      	ldr	r3, [r7, #4]
 8009934:	2b00      	cmp	r3, #0
 8009936:	d007      	beq.n	8009948 <memp_free_pool+0x34>
 8009938:	683b      	ldr	r3, [r7, #0]
 800993a:	2b00      	cmp	r3, #0
 800993c:	d004      	beq.n	8009948 <memp_free_pool+0x34>
    return;
  }

  do_memp_free_pool(desc, mem);
 800993e:	6839      	ldr	r1, [r7, #0]
 8009940:	6878      	ldr	r0, [r7, #4]
 8009942:	f7ff ffbb 	bl	80098bc <do_memp_free_pool>
 8009946:	e000      	b.n	800994a <memp_free_pool+0x36>
    return;
 8009948:	bf00      	nop
}
 800994a:	3708      	adds	r7, #8
 800994c:	46bd      	mov	sp, r7
 800994e:	bd80      	pop	{r7, pc}
 8009950:	0801a46c 	.word	0x0801a46c
 8009954:	0801a4e8 	.word	0x0801a4e8
 8009958:	0801a4c0 	.word	0x0801a4c0

0800995c <memp_free>:
 * @param type the pool where to put mem
 * @param mem the memp element to free
 */
void
memp_free(memp_t type, void *mem)
{
 800995c:	b580      	push	{r7, lr}
 800995e:	b082      	sub	sp, #8
 8009960:	af00      	add	r7, sp, #0
 8009962:	4603      	mov	r3, r0
 8009964:	6039      	str	r1, [r7, #0]
 8009966:	71fb      	strb	r3, [r7, #7]
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  struct memp *old_first;
#endif

  LWIP_ERROR("memp_free: type < MEMP_MAX", (type < MEMP_MAX), return;);
 8009968:	79fb      	ldrb	r3, [r7, #7]
 800996a:	2b0c      	cmp	r3, #12
 800996c:	d907      	bls.n	800997e <memp_free+0x22>
 800996e:	4b0c      	ldr	r3, [pc, #48]	; (80099a0 <memp_free+0x44>)
 8009970:	f240 12db 	movw	r2, #475	; 0x1db
 8009974:	490b      	ldr	r1, [pc, #44]	; (80099a4 <memp_free+0x48>)
 8009976:	480c      	ldr	r0, [pc, #48]	; (80099a8 <memp_free+0x4c>)
 8009978:	f00c f92c 	bl	8015bd4 <printf_>
 800997c:	e00c      	b.n	8009998 <memp_free+0x3c>

  if (mem == NULL) {
 800997e:	683b      	ldr	r3, [r7, #0]
 8009980:	2b00      	cmp	r3, #0
 8009982:	d008      	beq.n	8009996 <memp_free+0x3a>

#ifdef LWIP_HOOK_MEMP_AVAILABLE
  old_first = *memp_pools[type]->tab;
#endif

  do_memp_free_pool(memp_pools[type], mem);
 8009984:	79fb      	ldrb	r3, [r7, #7]
 8009986:	4a09      	ldr	r2, [pc, #36]	; (80099ac <memp_free+0x50>)
 8009988:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800998c:	6839      	ldr	r1, [r7, #0]
 800998e:	4618      	mov	r0, r3
 8009990:	f7ff ff94 	bl	80098bc <do_memp_free_pool>
 8009994:	e000      	b.n	8009998 <memp_free+0x3c>
    return;
 8009996:	bf00      	nop
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  if (old_first == NULL) {
    LWIP_HOOK_MEMP_AVAILABLE(type);
  }
#endif
}
 8009998:	3708      	adds	r7, #8
 800999a:	46bd      	mov	sp, r7
 800999c:	bd80      	pop	{r7, pc}
 800999e:	bf00      	nop
 80099a0:	0801a46c 	.word	0x0801a46c
 80099a4:	0801a53c 	.word	0x0801a53c
 80099a8:	0801a4c0 	.word	0x0801a4c0
 80099ac:	0801c0ec 	.word	0x0801c0ec

080099b0 <netif_init>:
}
#endif /* LWIP_HAVE_LOOPIF */

void
netif_init(void)
{
 80099b0:	b480      	push	{r7}
 80099b2:	af00      	add	r7, sp, #0

  netif_set_link_up(&loop_netif);
  netif_set_up(&loop_netif);

#endif /* LWIP_HAVE_LOOPIF */
}
 80099b4:	bf00      	nop
 80099b6:	46bd      	mov	sp, r7
 80099b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099bc:	4770      	bx	lr
	...

080099c0 <netif_add>:
netif_add(struct netif *netif,
#if LWIP_IPV4
          const ip4_addr_t *ipaddr, const ip4_addr_t *netmask, const ip4_addr_t *gw,
#endif /* LWIP_IPV4 */
          void *state, netif_init_fn init, netif_input_fn input)
{
 80099c0:	b580      	push	{r7, lr}
 80099c2:	b084      	sub	sp, #16
 80099c4:	af00      	add	r7, sp, #0
 80099c6:	60f8      	str	r0, [r7, #12]
 80099c8:	60b9      	str	r1, [r7, #8]
 80099ca:	607a      	str	r2, [r7, #4]
 80099cc:	603b      	str	r3, [r7, #0]
#if LWIP_IPV6
  s8_t i;
#endif

  LWIP_ASSERT("No init function given", init != NULL);
 80099ce:	69fb      	ldr	r3, [r7, #28]
 80099d0:	2b00      	cmp	r3, #0
 80099d2:	d105      	bne.n	80099e0 <netif_add+0x20>
 80099d4:	4b21      	ldr	r3, [pc, #132]	; (8009a5c <netif_add+0x9c>)
 80099d6:	22fb      	movs	r2, #251	; 0xfb
 80099d8:	4921      	ldr	r1, [pc, #132]	; (8009a60 <netif_add+0xa0>)
 80099da:	4822      	ldr	r0, [pc, #136]	; (8009a64 <netif_add+0xa4>)
 80099dc:	f00c f8fa 	bl	8015bd4 <printf_>

  /* reset new interface configuration state */
#if LWIP_IPV4
  ip_addr_set_zero_ip4(&netif->ip_addr);
 80099e0:	68fb      	ldr	r3, [r7, #12]
 80099e2:	2200      	movs	r2, #0
 80099e4:	605a      	str	r2, [r3, #4]
  ip_addr_set_zero_ip4(&netif->netmask);
 80099e6:	68fb      	ldr	r3, [r7, #12]
 80099e8:	2200      	movs	r2, #0
 80099ea:	609a      	str	r2, [r3, #8]
  ip_addr_set_zero_ip4(&netif->gw);
 80099ec:	68fb      	ldr	r3, [r7, #12]
 80099ee:	2200      	movs	r2, #0
 80099f0:	60da      	str	r2, [r3, #12]
    netif->ip6_addr_state[i] = IP6_ADDR_INVALID;
  }
  netif->output_ip6 = netif_null_output_ip6;
#endif /* LWIP_IPV6 */
  NETIF_SET_CHECKSUM_CTRL(netif, NETIF_CHECKSUM_ENABLE_ALL);
  netif->flags = 0;
 80099f2:	68fb      	ldr	r3, [r7, #12]
 80099f4:	2200      	movs	r2, #0
 80099f6:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
#if LWIP_IPV6_AUTOCONFIG
  /* IPv6 address autoconfiguration not enabled by default */
  netif->ip6_autoconfig_enabled = 0;
#endif /* LWIP_IPV6_AUTOCONFIG */
#if LWIP_IPV6_SEND_ROUTER_SOLICIT
  netif->rs_count = LWIP_ND6_MAX_MULTICAST_SOLICIT;
 80099fa:	68fb      	ldr	r3, [r7, #12]
 80099fc:	2203      	movs	r2, #3
 80099fe:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
#endif /* LWIP_IPV6_SEND_ROUTER_SOLICIT */
#if LWIP_NETIF_STATUS_CALLBACK
  netif->status_callback = NULL;
#endif /* LWIP_NETIF_STATUS_CALLBACK */
#if LWIP_NETIF_LINK_CALLBACK
  netif->link_callback = NULL;
 8009a02:	68fb      	ldr	r3, [r7, #12]
 8009a04:	2200      	movs	r2, #0
 8009a06:	61da      	str	r2, [r3, #28]
  netif->loop_first = NULL;
  netif->loop_last = NULL;
#endif /* ENABLE_LOOPBACK */

  /* remember netif specific state information data */
  netif->state = state;
 8009a08:	68fb      	ldr	r3, [r7, #12]
 8009a0a:	69ba      	ldr	r2, [r7, #24]
 8009a0c:	621a      	str	r2, [r3, #32]
  netif->num = netif_num++;
 8009a0e:	4b16      	ldr	r3, [pc, #88]	; (8009a68 <netif_add+0xa8>)
 8009a10:	781b      	ldrb	r3, [r3, #0]
 8009a12:	1c5a      	adds	r2, r3, #1
 8009a14:	b2d1      	uxtb	r1, r2
 8009a16:	4a14      	ldr	r2, [pc, #80]	; (8009a68 <netif_add+0xa8>)
 8009a18:	7011      	strb	r1, [r2, #0]
 8009a1a:	68fa      	ldr	r2, [r7, #12]
 8009a1c:	f882 3032 	strb.w	r3, [r2, #50]	; 0x32
  netif->input = input;
 8009a20:	68fb      	ldr	r3, [r7, #12]
 8009a22:	6a3a      	ldr	r2, [r7, #32]
 8009a24:	611a      	str	r2, [r3, #16]
#if ENABLE_LOOPBACK && LWIP_LOOPBACK_MAX_PBUFS
  netif->loop_cnt_current = 0;
#endif /* ENABLE_LOOPBACK && LWIP_LOOPBACK_MAX_PBUFS */

#if LWIP_IPV4
  netif_set_addr(netif, ipaddr, netmask, gw);
 8009a26:	683b      	ldr	r3, [r7, #0]
 8009a28:	687a      	ldr	r2, [r7, #4]
 8009a2a:	68b9      	ldr	r1, [r7, #8]
 8009a2c:	68f8      	ldr	r0, [r7, #12]
 8009a2e:	f000 f81f 	bl	8009a70 <netif_set_addr>
#endif /* LWIP_IPV4 */

  /* call user specified initialization function for netif */
  if (init(netif) != ERR_OK) {
 8009a32:	69fb      	ldr	r3, [r7, #28]
 8009a34:	68f8      	ldr	r0, [r7, #12]
 8009a36:	4798      	blx	r3
 8009a38:	4603      	mov	r3, r0
 8009a3a:	2b00      	cmp	r3, #0
 8009a3c:	d001      	beq.n	8009a42 <netif_add+0x82>
    return NULL;
 8009a3e:	2300      	movs	r3, #0
 8009a40:	e007      	b.n	8009a52 <netif_add+0x92>
  }

  /* add this netif to the list */
  netif->next = netif_list;
 8009a42:	4b0a      	ldr	r3, [pc, #40]	; (8009a6c <netif_add+0xac>)
 8009a44:	681a      	ldr	r2, [r3, #0]
 8009a46:	68fb      	ldr	r3, [r7, #12]
 8009a48:	601a      	str	r2, [r3, #0]
  netif_list = netif;
 8009a4a:	4a08      	ldr	r2, [pc, #32]	; (8009a6c <netif_add+0xac>)
 8009a4c:	68fb      	ldr	r3, [r7, #12]
 8009a4e:	6013      	str	r3, [r2, #0]
  ip4_addr_debug_print(NETIF_DEBUG, netmask);
  LWIP_DEBUGF(NETIF_DEBUG, (" gw "));
  ip4_addr_debug_print(NETIF_DEBUG, gw);
#endif /* LWIP_IPV4 */
  LWIP_DEBUGF(NETIF_DEBUG, ("\n"));
  return netif;
 8009a50:	68fb      	ldr	r3, [r7, #12]
}
 8009a52:	4618      	mov	r0, r3
 8009a54:	3710      	adds	r7, #16
 8009a56:	46bd      	mov	sp, r7
 8009a58:	bd80      	pop	{r7, pc}
 8009a5a:	bf00      	nop
 8009a5c:	0801a558 	.word	0x0801a558
 8009a60:	0801a58c 	.word	0x0801a58c
 8009a64:	0801a5a4 	.word	0x0801a5a4
 8009a68:	24008608 	.word	0x24008608
 8009a6c:	2400f2d8 	.word	0x2400f2d8

08009a70 <netif_set_addr>:
 * @param gw the new default gateway
 */
void
netif_set_addr(struct netif *netif, const ip4_addr_t *ipaddr, const ip4_addr_t *netmask,
    const ip4_addr_t *gw)
{
 8009a70:	b580      	push	{r7, lr}
 8009a72:	b084      	sub	sp, #16
 8009a74:	af00      	add	r7, sp, #0
 8009a76:	60f8      	str	r0, [r7, #12]
 8009a78:	60b9      	str	r1, [r7, #8]
 8009a7a:	607a      	str	r2, [r7, #4]
 8009a7c:	603b      	str	r3, [r7, #0]
  if (ip4_addr_isany(ipaddr)) {
 8009a7e:	68bb      	ldr	r3, [r7, #8]
 8009a80:	2b00      	cmp	r3, #0
 8009a82:	d003      	beq.n	8009a8c <netif_set_addr+0x1c>
 8009a84:	68bb      	ldr	r3, [r7, #8]
 8009a86:	681b      	ldr	r3, [r3, #0]
 8009a88:	2b00      	cmp	r3, #0
 8009a8a:	d10c      	bne.n	8009aa6 <netif_set_addr+0x36>
    /* when removing an address, we have to remove it *before* changing netmask/gw
       to ensure that tcp RST segment can be sent correctly */
    netif_set_ipaddr(netif, ipaddr);
 8009a8c:	68b9      	ldr	r1, [r7, #8]
 8009a8e:	68f8      	ldr	r0, [r7, #12]
 8009a90:	f000 f81a 	bl	8009ac8 <netif_set_ipaddr>
    netif_set_netmask(netif, netmask);
 8009a94:	6879      	ldr	r1, [r7, #4]
 8009a96:	68f8      	ldr	r0, [r7, #12]
 8009a98:	f000 f862 	bl	8009b60 <netif_set_netmask>
    netif_set_gw(netif, gw);
 8009a9c:	6839      	ldr	r1, [r7, #0]
 8009a9e:	68f8      	ldr	r0, [r7, #12]
 8009aa0:	f000 f84a 	bl	8009b38 <netif_set_gw>
 8009aa4:	e00b      	b.n	8009abe <netif_set_addr+0x4e>
  } else {
    netif_set_netmask(netif, netmask);
 8009aa6:	6879      	ldr	r1, [r7, #4]
 8009aa8:	68f8      	ldr	r0, [r7, #12]
 8009aaa:	f000 f859 	bl	8009b60 <netif_set_netmask>
    netif_set_gw(netif, gw);
 8009aae:	6839      	ldr	r1, [r7, #0]
 8009ab0:	68f8      	ldr	r0, [r7, #12]
 8009ab2:	f000 f841 	bl	8009b38 <netif_set_gw>
    /* set ipaddr last to ensure netmask/gw have been set when status callback is called */
    netif_set_ipaddr(netif, ipaddr);
 8009ab6:	68b9      	ldr	r1, [r7, #8]
 8009ab8:	68f8      	ldr	r0, [r7, #12]
 8009aba:	f000 f805 	bl	8009ac8 <netif_set_ipaddr>
  }
}
 8009abe:	bf00      	nop
 8009ac0:	3710      	adds	r7, #16
 8009ac2:	46bd      	mov	sp, r7
 8009ac4:	bd80      	pop	{r7, pc}
	...

08009ac8 <netif_set_ipaddr>:
 * @note call netif_set_addr() if you also want to change netmask and
 * default gateway
 */
void
netif_set_ipaddr(struct netif *netif, const ip4_addr_t *ipaddr)
{
 8009ac8:	b580      	push	{r7, lr}
 8009aca:	b084      	sub	sp, #16
 8009acc:	af00      	add	r7, sp, #0
 8009ace:	6078      	str	r0, [r7, #4]
 8009ad0:	6039      	str	r1, [r7, #0]
  ip_addr_t new_addr;
  *ip_2_ip4(&new_addr) = (ipaddr ? *ipaddr : *IP4_ADDR_ANY4);
 8009ad2:	683b      	ldr	r3, [r7, #0]
 8009ad4:	2b00      	cmp	r3, #0
 8009ad6:	d003      	beq.n	8009ae0 <netif_set_ipaddr+0x18>
 8009ad8:	683b      	ldr	r3, [r7, #0]
 8009ada:	681b      	ldr	r3, [r3, #0]
 8009adc:	60fb      	str	r3, [r7, #12]
 8009ade:	e002      	b.n	8009ae6 <netif_set_ipaddr+0x1e>
 8009ae0:	4b14      	ldr	r3, [pc, #80]	; (8009b34 <netif_set_ipaddr+0x6c>)
 8009ae2:	681b      	ldr	r3, [r3, #0]
 8009ae4:	60fb      	str	r3, [r7, #12]
  IP_SET_TYPE_VAL(new_addr, IPADDR_TYPE_V4);

  /* address is actually being changed? */
  if (ip4_addr_cmp(ip_2_ip4(&new_addr), netif_ip4_addr(netif)) == 0) {
 8009ae6:	68fa      	ldr	r2, [r7, #12]
 8009ae8:	687b      	ldr	r3, [r7, #4]
 8009aea:	3304      	adds	r3, #4
 8009aec:	681b      	ldr	r3, [r3, #0]
 8009aee:	429a      	cmp	r2, r3
 8009af0:	d01c      	beq.n	8009b2c <netif_set_ipaddr+0x64>
    LWIP_DEBUGF(NETIF_DEBUG | LWIP_DBG_STATE, ("netif_set_ipaddr: netif address being changed\n"));
#if LWIP_TCP
    tcp_netif_ip_addr_changed(netif_ip_addr4(netif), &new_addr);
 8009af2:	687b      	ldr	r3, [r7, #4]
 8009af4:	3304      	adds	r3, #4
 8009af6:	f107 020c 	add.w	r2, r7, #12
 8009afa:	4611      	mov	r1, r2
 8009afc:	4618      	mov	r0, r3
 8009afe:	f002 fb2f 	bl	800c160 <tcp_netif_ip_addr_changed>
#endif /* LWIP_TCP */
#if LWIP_UDP
    udp_netif_ip_addr_changed(netif_ip_addr4(netif), &new_addr);
 8009b02:	687b      	ldr	r3, [r7, #4]
 8009b04:	3304      	adds	r3, #4
 8009b06:	f107 020c 	add.w	r2, r7, #12
 8009b0a:	4611      	mov	r1, r2
 8009b0c:	4618      	mov	r0, r3
 8009b0e:	f006 fe8b 	bl	8010828 <udp_netif_ip_addr_changed>
#endif /* LWIP_RAW */

    mib2_remove_ip4(netif);
    mib2_remove_route_ip4(0, netif);
    /* set new IP address to netif */
    ip4_addr_set(ip_2_ip4(&netif->ip_addr), ipaddr);
 8009b12:	683b      	ldr	r3, [r7, #0]
 8009b14:	2b00      	cmp	r3, #0
 8009b16:	d002      	beq.n	8009b1e <netif_set_ipaddr+0x56>
 8009b18:	683b      	ldr	r3, [r7, #0]
 8009b1a:	681b      	ldr	r3, [r3, #0]
 8009b1c:	e000      	b.n	8009b20 <netif_set_ipaddr+0x58>
 8009b1e:	2300      	movs	r3, #0
 8009b20:	687a      	ldr	r2, [r7, #4]
 8009b22:	6053      	str	r3, [r2, #4]
    IP_SET_TYPE_VAL(netif->ip_addr, IPADDR_TYPE_V4);
    mib2_add_ip4(netif);
    mib2_add_route_ip4(0, netif);

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4);
 8009b24:	2101      	movs	r1, #1
 8009b26:	6878      	ldr	r0, [r7, #4]
 8009b28:	f000 f861 	bl	8009bee <netif_issue_reports>
    netif->name[0], netif->name[1],
    ip4_addr1_16(netif_ip4_addr(netif)),
    ip4_addr2_16(netif_ip4_addr(netif)),
    ip4_addr3_16(netif_ip4_addr(netif)),
    ip4_addr4_16(netif_ip4_addr(netif))));
}
 8009b2c:	bf00      	nop
 8009b2e:	3710      	adds	r7, #16
 8009b30:	46bd      	mov	sp, r7
 8009b32:	bd80      	pop	{r7, pc}
 8009b34:	0801c160 	.word	0x0801c160

08009b38 <netif_set_gw>:
 *
 * @note call netif_set_addr() if you also want to change ip address and netmask
 */
void
netif_set_gw(struct netif *netif, const ip4_addr_t *gw)
{
 8009b38:	b480      	push	{r7}
 8009b3a:	b083      	sub	sp, #12
 8009b3c:	af00      	add	r7, sp, #0
 8009b3e:	6078      	str	r0, [r7, #4]
 8009b40:	6039      	str	r1, [r7, #0]
  ip4_addr_set(ip_2_ip4(&netif->gw), gw);
 8009b42:	683b      	ldr	r3, [r7, #0]
 8009b44:	2b00      	cmp	r3, #0
 8009b46:	d002      	beq.n	8009b4e <netif_set_gw+0x16>
 8009b48:	683b      	ldr	r3, [r7, #0]
 8009b4a:	681b      	ldr	r3, [r3, #0]
 8009b4c:	e000      	b.n	8009b50 <netif_set_gw+0x18>
 8009b4e:	2300      	movs	r3, #0
 8009b50:	687a      	ldr	r2, [r7, #4]
 8009b52:	60d3      	str	r3, [r2, #12]
    netif->name[0], netif->name[1],
    ip4_addr1_16(netif_ip4_gw(netif)),
    ip4_addr2_16(netif_ip4_gw(netif)),
    ip4_addr3_16(netif_ip4_gw(netif)),
    ip4_addr4_16(netif_ip4_gw(netif))));
}
 8009b54:	bf00      	nop
 8009b56:	370c      	adds	r7, #12
 8009b58:	46bd      	mov	sp, r7
 8009b5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b5e:	4770      	bx	lr

08009b60 <netif_set_netmask>:
 * @note call netif_set_addr() if you also want to change ip address and
 * default gateway
 */
void
netif_set_netmask(struct netif *netif, const ip4_addr_t *netmask)
{
 8009b60:	b480      	push	{r7}
 8009b62:	b083      	sub	sp, #12
 8009b64:	af00      	add	r7, sp, #0
 8009b66:	6078      	str	r0, [r7, #4]
 8009b68:	6039      	str	r1, [r7, #0]
  mib2_remove_route_ip4(0, netif);
  /* set new netmask to netif */
  ip4_addr_set(ip_2_ip4(&netif->netmask), netmask);
 8009b6a:	683b      	ldr	r3, [r7, #0]
 8009b6c:	2b00      	cmp	r3, #0
 8009b6e:	d002      	beq.n	8009b76 <netif_set_netmask+0x16>
 8009b70:	683b      	ldr	r3, [r7, #0]
 8009b72:	681b      	ldr	r3, [r3, #0]
 8009b74:	e000      	b.n	8009b78 <netif_set_netmask+0x18>
 8009b76:	2300      	movs	r3, #0
 8009b78:	687a      	ldr	r2, [r7, #4]
 8009b7a:	6093      	str	r3, [r2, #8]
    netif->name[0], netif->name[1],
    ip4_addr1_16(netif_ip4_netmask(netif)),
    ip4_addr2_16(netif_ip4_netmask(netif)),
    ip4_addr3_16(netif_ip4_netmask(netif)),
    ip4_addr4_16(netif_ip4_netmask(netif))));
}
 8009b7c:	bf00      	nop
 8009b7e:	370c      	adds	r7, #12
 8009b80:	46bd      	mov	sp, r7
 8009b82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b86:	4770      	bx	lr

08009b88 <netif_set_default>:
 *
 * @param netif the default network interface
 */
void
netif_set_default(struct netif *netif)
{
 8009b88:	b480      	push	{r7}
 8009b8a:	b083      	sub	sp, #12
 8009b8c:	af00      	add	r7, sp, #0
 8009b8e:	6078      	str	r0, [r7, #4]
    mib2_remove_route_ip4(1, netif);
  } else {
    /* install default route */
    mib2_add_route_ip4(1, netif);
  }
  netif_default = netif;
 8009b90:	4a04      	ldr	r2, [pc, #16]	; (8009ba4 <netif_set_default+0x1c>)
 8009b92:	687b      	ldr	r3, [r7, #4]
 8009b94:	6013      	str	r3, [r2, #0]
  LWIP_DEBUGF(NETIF_DEBUG, ("netif: setting default interface %c%c\n",
           netif ? netif->name[0] : '\'', netif ? netif->name[1] : '\''));
}
 8009b96:	bf00      	nop
 8009b98:	370c      	adds	r7, #12
 8009b9a:	46bd      	mov	sp, r7
 8009b9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ba0:	4770      	bx	lr
 8009ba2:	bf00      	nop
 8009ba4:	2400f2dc 	.word	0x2400f2dc

08009ba8 <netif_set_up>:
 * Bring an interface up, available for processing
 * traffic.
 */
void
netif_set_up(struct netif *netif)
{
 8009ba8:	b580      	push	{r7, lr}
 8009baa:	b082      	sub	sp, #8
 8009bac:	af00      	add	r7, sp, #0
 8009bae:	6078      	str	r0, [r7, #4]
  if (!(netif->flags & NETIF_FLAG_UP)) {
 8009bb0:	687b      	ldr	r3, [r7, #4]
 8009bb2:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 8009bb6:	f003 0301 	and.w	r3, r3, #1
 8009bba:	2b00      	cmp	r3, #0
 8009bbc:	d113      	bne.n	8009be6 <netif_set_up+0x3e>
    netif->flags |= NETIF_FLAG_UP;
 8009bbe:	687b      	ldr	r3, [r7, #4]
 8009bc0:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 8009bc4:	f043 0301 	orr.w	r3, r3, #1
 8009bc8:	b2da      	uxtb	r2, r3
 8009bca:	687b      	ldr	r3, [r7, #4]
 8009bcc:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f

    MIB2_COPY_SYSUPTIME_TO(&netif->ts);

    NETIF_STATUS_CALLBACK(netif);

    if (netif->flags & NETIF_FLAG_LINK_UP) {
 8009bd0:	687b      	ldr	r3, [r7, #4]
 8009bd2:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 8009bd6:	f003 0304 	and.w	r3, r3, #4
 8009bda:	2b00      	cmp	r3, #0
 8009bdc:	d003      	beq.n	8009be6 <netif_set_up+0x3e>
      netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4|NETIF_REPORT_TYPE_IPV6);
 8009bde:	2103      	movs	r1, #3
 8009be0:	6878      	ldr	r0, [r7, #4]
 8009be2:	f000 f804 	bl	8009bee <netif_issue_reports>
    }
  }
}
 8009be6:	bf00      	nop
 8009be8:	3708      	adds	r7, #8
 8009bea:	46bd      	mov	sp, r7
 8009bec:	bd80      	pop	{r7, pc}

08009bee <netif_issue_reports>:

/** Send ARP/IGMP/MLD/RS events, e.g. on link-up/netif-up or addr-change
 */
static void
netif_issue_reports(struct netif* netif, u8_t report_type)
{
 8009bee:	b580      	push	{r7, lr}
 8009bf0:	b082      	sub	sp, #8
 8009bf2:	af00      	add	r7, sp, #0
 8009bf4:	6078      	str	r0, [r7, #4]
 8009bf6:	460b      	mov	r3, r1
 8009bf8:	70fb      	strb	r3, [r7, #3]
#if LWIP_IPV4
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
 8009bfa:	78fb      	ldrb	r3, [r7, #3]
 8009bfc:	f003 0301 	and.w	r3, r3, #1
 8009c00:	2b00      	cmp	r3, #0
 8009c02:	d011      	beq.n	8009c28 <netif_issue_reports+0x3a>
      !ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 8009c04:	687b      	ldr	r3, [r7, #4]
 8009c06:	3304      	adds	r3, #4
 8009c08:	681b      	ldr	r3, [r3, #0]
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
 8009c0a:	2b00      	cmp	r3, #0
 8009c0c:	d00c      	beq.n	8009c28 <netif_issue_reports+0x3a>
#if LWIP_ARP
    /* For Ethernet network interfaces, we would like to send a "gratuitous ARP" */
    if (netif->flags & (NETIF_FLAG_ETHARP)) {
 8009c0e:	687b      	ldr	r3, [r7, #4]
 8009c10:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 8009c14:	f003 0308 	and.w	r3, r3, #8
 8009c18:	2b00      	cmp	r3, #0
 8009c1a:	d005      	beq.n	8009c28 <netif_issue_reports+0x3a>
      etharp_gratuitous(netif);
 8009c1c:	687b      	ldr	r3, [r7, #4]
 8009c1e:	3304      	adds	r3, #4
 8009c20:	4619      	mov	r1, r3
 8009c22:	6878      	ldr	r0, [r7, #4]
 8009c24:	f007 fd6a 	bl	80116fc <etharp_request>
    /* Send Router Solicitation messages. */
    netif->rs_count = LWIP_ND6_MAX_MULTICAST_SOLICIT;
#endif /* LWIP_IPV6_SEND_ROUTER_SOLICIT */
  }
#endif /* LWIP_IPV6 */
}
 8009c28:	bf00      	nop
 8009c2a:	3708      	adds	r7, #8
 8009c2c:	46bd      	mov	sp, r7
 8009c2e:	bd80      	pop	{r7, pc}

08009c30 <netif_set_down>:
 * @ingroup netif
 * Bring an interface down, disabling any traffic processing.
 */
void
netif_set_down(struct netif *netif)
{
 8009c30:	b580      	push	{r7, lr}
 8009c32:	b082      	sub	sp, #8
 8009c34:	af00      	add	r7, sp, #0
 8009c36:	6078      	str	r0, [r7, #4]
  if (netif->flags & NETIF_FLAG_UP) {
 8009c38:	687b      	ldr	r3, [r7, #4]
 8009c3a:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 8009c3e:	f003 0301 	and.w	r3, r3, #1
 8009c42:	2b00      	cmp	r3, #0
 8009c44:	d012      	beq.n	8009c6c <netif_set_down+0x3c>
    netif->flags &= ~NETIF_FLAG_UP;
 8009c46:	687b      	ldr	r3, [r7, #4]
 8009c48:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 8009c4c:	f023 0301 	bic.w	r3, r3, #1
 8009c50:	b2da      	uxtb	r2, r3
 8009c52:	687b      	ldr	r3, [r7, #4]
 8009c54:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
    MIB2_COPY_SYSUPTIME_TO(&netif->ts);

#if LWIP_IPV4 && LWIP_ARP
    if (netif->flags & NETIF_FLAG_ETHARP) {
 8009c58:	687b      	ldr	r3, [r7, #4]
 8009c5a:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 8009c5e:	f003 0308 	and.w	r3, r3, #8
 8009c62:	2b00      	cmp	r3, #0
 8009c64:	d002      	beq.n	8009c6c <netif_set_down+0x3c>
      etharp_cleanup_netif(netif);
 8009c66:	6878      	ldr	r0, [r7, #4]
 8009c68:	f007 f8f2 	bl	8010e50 <etharp_cleanup_netif>
    nd6_cleanup_netif(netif);
#endif /* LWIP_IPV6 */

    NETIF_STATUS_CALLBACK(netif);
  }
}
 8009c6c:	bf00      	nop
 8009c6e:	3708      	adds	r7, #8
 8009c70:	46bd      	mov	sp, r7
 8009c72:	bd80      	pop	{r7, pc}

08009c74 <netif_set_link_up>:
 * @ingroup netif
 * Called by a driver when its link goes up
 */
void
netif_set_link_up(struct netif *netif)
{
 8009c74:	b580      	push	{r7, lr}
 8009c76:	b082      	sub	sp, #8
 8009c78:	af00      	add	r7, sp, #0
 8009c7a:	6078      	str	r0, [r7, #4]
  if (!(netif->flags & NETIF_FLAG_LINK_UP)) {
 8009c7c:	687b      	ldr	r3, [r7, #4]
 8009c7e:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 8009c82:	f003 0304 	and.w	r3, r3, #4
 8009c86:	2b00      	cmp	r3, #0
 8009c88:	d11b      	bne.n	8009cc2 <netif_set_link_up+0x4e>
    netif->flags |= NETIF_FLAG_LINK_UP;
 8009c8a:	687b      	ldr	r3, [r7, #4]
 8009c8c:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 8009c90:	f043 0304 	orr.w	r3, r3, #4
 8009c94:	b2da      	uxtb	r2, r3
 8009c96:	687b      	ldr	r3, [r7, #4]
 8009c98:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f

#if LWIP_AUTOIP
    autoip_network_changed(netif);
#endif /* LWIP_AUTOIP */

    if (netif->flags & NETIF_FLAG_UP) {
 8009c9c:	687b      	ldr	r3, [r7, #4]
 8009c9e:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 8009ca2:	f003 0301 	and.w	r3, r3, #1
 8009ca6:	2b00      	cmp	r3, #0
 8009ca8:	d003      	beq.n	8009cb2 <netif_set_link_up+0x3e>
      netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4|NETIF_REPORT_TYPE_IPV6);
 8009caa:	2103      	movs	r1, #3
 8009cac:	6878      	ldr	r0, [r7, #4]
 8009cae:	f7ff ff9e 	bl	8009bee <netif_issue_reports>
    }
    NETIF_LINK_CALLBACK(netif);
 8009cb2:	687b      	ldr	r3, [r7, #4]
 8009cb4:	69db      	ldr	r3, [r3, #28]
 8009cb6:	2b00      	cmp	r3, #0
 8009cb8:	d003      	beq.n	8009cc2 <netif_set_link_up+0x4e>
 8009cba:	687b      	ldr	r3, [r7, #4]
 8009cbc:	69db      	ldr	r3, [r3, #28]
 8009cbe:	6878      	ldr	r0, [r7, #4]
 8009cc0:	4798      	blx	r3
  }
}
 8009cc2:	bf00      	nop
 8009cc4:	3708      	adds	r7, #8
 8009cc6:	46bd      	mov	sp, r7
 8009cc8:	bd80      	pop	{r7, pc}

08009cca <netif_set_link_down>:
 * @ingroup netif
 * Called by a driver when its link goes down
 */
void
netif_set_link_down(struct netif *netif )
{
 8009cca:	b580      	push	{r7, lr}
 8009ccc:	b082      	sub	sp, #8
 8009cce:	af00      	add	r7, sp, #0
 8009cd0:	6078      	str	r0, [r7, #4]
  if (netif->flags & NETIF_FLAG_LINK_UP) {
 8009cd2:	687b      	ldr	r3, [r7, #4]
 8009cd4:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 8009cd8:	f003 0304 	and.w	r3, r3, #4
 8009cdc:	2b00      	cmp	r3, #0
 8009cde:	d010      	beq.n	8009d02 <netif_set_link_down+0x38>
    netif->flags &= ~NETIF_FLAG_LINK_UP;
 8009ce0:	687b      	ldr	r3, [r7, #4]
 8009ce2:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 8009ce6:	f023 0304 	bic.w	r3, r3, #4
 8009cea:	b2da      	uxtb	r2, r3
 8009cec:	687b      	ldr	r3, [r7, #4]
 8009cee:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
    NETIF_LINK_CALLBACK(netif);
 8009cf2:	687b      	ldr	r3, [r7, #4]
 8009cf4:	69db      	ldr	r3, [r3, #28]
 8009cf6:	2b00      	cmp	r3, #0
 8009cf8:	d003      	beq.n	8009d02 <netif_set_link_down+0x38>
 8009cfa:	687b      	ldr	r3, [r7, #4]
 8009cfc:	69db      	ldr	r3, [r3, #28]
 8009cfe:	6878      	ldr	r0, [r7, #4]
 8009d00:	4798      	blx	r3
  }
}
 8009d02:	bf00      	nop
 8009d04:	3708      	adds	r7, #8
 8009d06:	46bd      	mov	sp, r7
 8009d08:	bd80      	pop	{r7, pc}
	...

08009d0c <pbuf_free_ooseq>:
#if !NO_SYS
static
#endif /* !NO_SYS */
void
pbuf_free_ooseq(void)
{
 8009d0c:	b580      	push	{r7, lr}
 8009d0e:	b082      	sub	sp, #8
 8009d10:	af00      	add	r7, sp, #0
  struct tcp_pcb* pcb;
  SYS_ARCH_SET(pbuf_free_ooseq_pending, 0);
 8009d12:	f009 f9c1 	bl	8013098 <sys_arch_protect>
 8009d16:	6038      	str	r0, [r7, #0]
 8009d18:	4b0f      	ldr	r3, [pc, #60]	; (8009d58 <pbuf_free_ooseq+0x4c>)
 8009d1a:	2200      	movs	r2, #0
 8009d1c:	701a      	strb	r2, [r3, #0]
 8009d1e:	6838      	ldr	r0, [r7, #0]
 8009d20:	f009 f9c8 	bl	80130b4 <sys_arch_unprotect>

  for (pcb = tcp_active_pcbs; NULL != pcb; pcb = pcb->next) {
 8009d24:	4b0d      	ldr	r3, [pc, #52]	; (8009d5c <pbuf_free_ooseq+0x50>)
 8009d26:	681b      	ldr	r3, [r3, #0]
 8009d28:	607b      	str	r3, [r7, #4]
 8009d2a:	e00f      	b.n	8009d4c <pbuf_free_ooseq+0x40>
    if (NULL != pcb->ooseq) {
 8009d2c:	687b      	ldr	r3, [r7, #4]
 8009d2e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009d30:	2b00      	cmp	r3, #0
 8009d32:	d008      	beq.n	8009d46 <pbuf_free_ooseq+0x3a>
      /** Free the ooseq pbufs of one PCB only */
      LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free_ooseq: freeing out-of-sequence pbufs\n"));
      tcp_segs_free(pcb->ooseq);
 8009d34:	687b      	ldr	r3, [r7, #4]
 8009d36:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009d38:	4618      	mov	r0, r3
 8009d3a:	f001 fe8d 	bl	800ba58 <tcp_segs_free>
      pcb->ooseq = NULL;
 8009d3e:	687b      	ldr	r3, [r7, #4]
 8009d40:	2200      	movs	r2, #0
 8009d42:	671a      	str	r2, [r3, #112]	; 0x70
      return;
 8009d44:	e005      	b.n	8009d52 <pbuf_free_ooseq+0x46>
  for (pcb = tcp_active_pcbs; NULL != pcb; pcb = pcb->next) {
 8009d46:	687b      	ldr	r3, [r7, #4]
 8009d48:	68db      	ldr	r3, [r3, #12]
 8009d4a:	607b      	str	r3, [r7, #4]
 8009d4c:	687b      	ldr	r3, [r7, #4]
 8009d4e:	2b00      	cmp	r3, #0
 8009d50:	d1ec      	bne.n	8009d2c <pbuf_free_ooseq+0x20>
    }
  }
}
 8009d52:	3708      	adds	r7, #8
 8009d54:	46bd      	mov	sp, r7
 8009d56:	bd80      	pop	{r7, pc}
 8009d58:	2400f2e0 	.word	0x2400f2e0
 8009d5c:	2400f2e8 	.word	0x2400f2e8

08009d60 <pbuf_free_ooseq_callback>:
/**
 * Just a callback function for tcpip_callback() that calls pbuf_free_ooseq().
 */
static void
pbuf_free_ooseq_callback(void *arg)
{
 8009d60:	b580      	push	{r7, lr}
 8009d62:	b082      	sub	sp, #8
 8009d64:	af00      	add	r7, sp, #0
 8009d66:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(arg);
  pbuf_free_ooseq();
 8009d68:	f7ff ffd0 	bl	8009d0c <pbuf_free_ooseq>
}
 8009d6c:	bf00      	nop
 8009d6e:	3708      	adds	r7, #8
 8009d70:	46bd      	mov	sp, r7
 8009d72:	bd80      	pop	{r7, pc}

08009d74 <pbuf_pool_is_empty>:
#endif /* !NO_SYS */

/** Queue a call to pbuf_free_ooseq if not already queued. */
static void
pbuf_pool_is_empty(void)
{
 8009d74:	b580      	push	{r7, lr}
 8009d76:	b082      	sub	sp, #8
 8009d78:	af00      	add	r7, sp, #0
#ifndef PBUF_POOL_FREE_OOSEQ_QUEUE_CALL
  SYS_ARCH_SET(pbuf_free_ooseq_pending, 1);
#else /* PBUF_POOL_FREE_OOSEQ_QUEUE_CALL */
  u8_t queued;
  SYS_ARCH_DECL_PROTECT(old_level);
  SYS_ARCH_PROTECT(old_level);
 8009d7a:	f009 f98d 	bl	8013098 <sys_arch_protect>
 8009d7e:	6078      	str	r0, [r7, #4]
  queued = pbuf_free_ooseq_pending;
 8009d80:	4b10      	ldr	r3, [pc, #64]	; (8009dc4 <pbuf_pool_is_empty+0x50>)
 8009d82:	781b      	ldrb	r3, [r3, #0]
 8009d84:	70fb      	strb	r3, [r7, #3]
  pbuf_free_ooseq_pending = 1;
 8009d86:	4b0f      	ldr	r3, [pc, #60]	; (8009dc4 <pbuf_pool_is_empty+0x50>)
 8009d88:	2201      	movs	r2, #1
 8009d8a:	701a      	strb	r2, [r3, #0]
  SYS_ARCH_UNPROTECT(old_level);
 8009d8c:	6878      	ldr	r0, [r7, #4]
 8009d8e:	f009 f991 	bl	80130b4 <sys_arch_unprotect>

  if (!queued) {
 8009d92:	78fb      	ldrb	r3, [r7, #3]
 8009d94:	2b00      	cmp	r3, #0
 8009d96:	d110      	bne.n	8009dba <pbuf_pool_is_empty+0x46>
    /* queue a call to pbuf_free_ooseq if not already queued */
    PBUF_POOL_FREE_OOSEQ_QUEUE_CALL();
 8009d98:	2200      	movs	r2, #0
 8009d9a:	2100      	movs	r1, #0
 8009d9c:	480a      	ldr	r0, [pc, #40]	; (8009dc8 <pbuf_pool_is_empty+0x54>)
 8009d9e:	f7ff f8b1 	bl	8008f04 <tcpip_callback_with_block>
 8009da2:	4603      	mov	r3, r0
 8009da4:	2b00      	cmp	r3, #0
 8009da6:	d008      	beq.n	8009dba <pbuf_pool_is_empty+0x46>
 8009da8:	f009 f976 	bl	8013098 <sys_arch_protect>
 8009dac:	6078      	str	r0, [r7, #4]
 8009dae:	4b05      	ldr	r3, [pc, #20]	; (8009dc4 <pbuf_pool_is_empty+0x50>)
 8009db0:	2200      	movs	r2, #0
 8009db2:	701a      	strb	r2, [r3, #0]
 8009db4:	6878      	ldr	r0, [r7, #4]
 8009db6:	f009 f97d 	bl	80130b4 <sys_arch_unprotect>
  }
#endif /* PBUF_POOL_FREE_OOSEQ_QUEUE_CALL */
}
 8009dba:	bf00      	nop
 8009dbc:	3708      	adds	r7, #8
 8009dbe:	46bd      	mov	sp, r7
 8009dc0:	bd80      	pop	{r7, pc}
 8009dc2:	bf00      	nop
 8009dc4:	2400f2e0 	.word	0x2400f2e0
 8009dc8:	08009d61 	.word	0x08009d61

08009dcc <pbuf_alloc>:
 * @return the allocated pbuf. If multiple pbufs where allocated, this
 * is the first pbuf of a pbuf chain.
 */
struct pbuf *
pbuf_alloc(pbuf_layer layer, u16_t length, pbuf_type type)
{
 8009dcc:	b580      	push	{r7, lr}
 8009dce:	b088      	sub	sp, #32
 8009dd0:	af00      	add	r7, sp, #0
 8009dd2:	4603      	mov	r3, r0
 8009dd4:	71fb      	strb	r3, [r7, #7]
 8009dd6:	460b      	mov	r3, r1
 8009dd8:	80bb      	strh	r3, [r7, #4]
 8009dda:	4613      	mov	r3, r2
 8009ddc:	71bb      	strb	r3, [r7, #6]
  u16_t offset;
  s32_t rem_len; /* remaining length */
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc(length=%"U16_F")\n", length));

  /* determine header offset */
  switch (layer) {
 8009dde:	79fb      	ldrb	r3, [r7, #7]
 8009de0:	2b04      	cmp	r3, #4
 8009de2:	d81c      	bhi.n	8009e1e <pbuf_alloc+0x52>
 8009de4:	a201      	add	r2, pc, #4	; (adr r2, 8009dec <pbuf_alloc+0x20>)
 8009de6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009dea:	bf00      	nop
 8009dec:	08009e01 	.word	0x08009e01
 8009df0:	08009e07 	.word	0x08009e07
 8009df4:	08009e0d 	.word	0x08009e0d
 8009df8:	08009e13 	.word	0x08009e13
 8009dfc:	08009e19 	.word	0x08009e19
  case PBUF_TRANSPORT:
    /* add room for transport (often TCP) layer header */
    offset = PBUF_LINK_ENCAPSULATION_HLEN + PBUF_LINK_HLEN + PBUF_IP_HLEN + PBUF_TRANSPORT_HLEN;
 8009e00:	2336      	movs	r3, #54	; 0x36
 8009e02:	82fb      	strh	r3, [r7, #22]
    break;
 8009e04:	e014      	b.n	8009e30 <pbuf_alloc+0x64>
  case PBUF_IP:
    /* add room for IP layer header */
    offset = PBUF_LINK_ENCAPSULATION_HLEN + PBUF_LINK_HLEN + PBUF_IP_HLEN;
 8009e06:	2322      	movs	r3, #34	; 0x22
 8009e08:	82fb      	strh	r3, [r7, #22]
    break;
 8009e0a:	e011      	b.n	8009e30 <pbuf_alloc+0x64>
  case PBUF_LINK:
    /* add room for link layer header */
    offset = PBUF_LINK_ENCAPSULATION_HLEN + PBUF_LINK_HLEN;
 8009e0c:	230e      	movs	r3, #14
 8009e0e:	82fb      	strh	r3, [r7, #22]
    break;
 8009e10:	e00e      	b.n	8009e30 <pbuf_alloc+0x64>
  case PBUF_RAW_TX:
    /* add room for encapsulating link layer headers (e.g. 802.11) */
    offset = PBUF_LINK_ENCAPSULATION_HLEN;
 8009e12:	2300      	movs	r3, #0
 8009e14:	82fb      	strh	r3, [r7, #22]
    break;
 8009e16:	e00b      	b.n	8009e30 <pbuf_alloc+0x64>
  case PBUF_RAW:
    /* no offset (e.g. RX buffers or chain successors) */
    offset = 0;
 8009e18:	2300      	movs	r3, #0
 8009e1a:	82fb      	strh	r3, [r7, #22]
    break;
 8009e1c:	e008      	b.n	8009e30 <pbuf_alloc+0x64>
  default:
    LWIP_ASSERT("pbuf_alloc: bad pbuf layer", 0);
 8009e1e:	4ba5      	ldr	r3, [pc, #660]	; (800a0b4 <pbuf_alloc+0x2e8>)
 8009e20:	f44f 728b 	mov.w	r2, #278	; 0x116
 8009e24:	49a4      	ldr	r1, [pc, #656]	; (800a0b8 <pbuf_alloc+0x2ec>)
 8009e26:	48a5      	ldr	r0, [pc, #660]	; (800a0bc <pbuf_alloc+0x2f0>)
 8009e28:	f00b fed4 	bl	8015bd4 <printf_>
    return NULL;
 8009e2c:	2300      	movs	r3, #0
 8009e2e:	e15d      	b.n	800a0ec <pbuf_alloc+0x320>
  }

  switch (type) {
 8009e30:	79bb      	ldrb	r3, [r7, #6]
 8009e32:	2b03      	cmp	r3, #3
 8009e34:	f200 8134 	bhi.w	800a0a0 <pbuf_alloc+0x2d4>
 8009e38:	a201      	add	r2, pc, #4	; (adr r2, 8009e40 <pbuf_alloc+0x74>)
 8009e3a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009e3e:	bf00      	nop
 8009e40:	08009fe1 	.word	0x08009fe1
 8009e44:	0800a06d 	.word	0x0800a06d
 8009e48:	0800a06d 	.word	0x0800a06d
 8009e4c:	08009e51 	.word	0x08009e51
  case PBUF_POOL:
    /* allocate head of pbuf chain into p */
    p = (struct pbuf *)memp_malloc(MEMP_PBUF_POOL);
 8009e50:	200c      	movs	r0, #12
 8009e52:	f7ff fd0d 	bl	8009870 <memp_malloc>
 8009e56:	61f8      	str	r0, [r7, #28]
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc: allocated pbuf %p\n", (void *)p));
    if (p == NULL) {
 8009e58:	69fb      	ldr	r3, [r7, #28]
 8009e5a:	2b00      	cmp	r3, #0
 8009e5c:	d103      	bne.n	8009e66 <pbuf_alloc+0x9a>
      PBUF_POOL_IS_EMPTY();
 8009e5e:	f7ff ff89 	bl	8009d74 <pbuf_pool_is_empty>
      return NULL;
 8009e62:	2300      	movs	r3, #0
 8009e64:	e142      	b.n	800a0ec <pbuf_alloc+0x320>
    }
    p->type = type;
 8009e66:	69fb      	ldr	r3, [r7, #28]
 8009e68:	79ba      	ldrb	r2, [r7, #6]
 8009e6a:	731a      	strb	r2, [r3, #12]
    p->next = NULL;
 8009e6c:	69fb      	ldr	r3, [r7, #28]
 8009e6e:	2200      	movs	r2, #0
 8009e70:	601a      	str	r2, [r3, #0]

    /* make the payload pointer point 'offset' bytes into pbuf data memory */
    p->payload = LWIP_MEM_ALIGN((void *)((u8_t *)p + (SIZEOF_STRUCT_PBUF + offset)));
 8009e72:	8afb      	ldrh	r3, [r7, #22]
 8009e74:	3310      	adds	r3, #16
 8009e76:	69fa      	ldr	r2, [r7, #28]
 8009e78:	4413      	add	r3, r2
 8009e7a:	3303      	adds	r3, #3
 8009e7c:	f023 0303 	bic.w	r3, r3, #3
 8009e80:	461a      	mov	r2, r3
 8009e82:	69fb      	ldr	r3, [r7, #28]
 8009e84:	605a      	str	r2, [r3, #4]
    LWIP_ASSERT("pbuf_alloc: pbuf p->payload properly aligned",
 8009e86:	69fb      	ldr	r3, [r7, #28]
 8009e88:	685b      	ldr	r3, [r3, #4]
 8009e8a:	f003 0303 	and.w	r3, r3, #3
 8009e8e:	2b00      	cmp	r3, #0
 8009e90:	d006      	beq.n	8009ea0 <pbuf_alloc+0xd4>
 8009e92:	4b88      	ldr	r3, [pc, #544]	; (800a0b4 <pbuf_alloc+0x2e8>)
 8009e94:	f240 1229 	movw	r2, #297	; 0x129
 8009e98:	4989      	ldr	r1, [pc, #548]	; (800a0c0 <pbuf_alloc+0x2f4>)
 8009e9a:	4888      	ldr	r0, [pc, #544]	; (800a0bc <pbuf_alloc+0x2f0>)
 8009e9c:	f00b fe9a 	bl	8015bd4 <printf_>
            ((mem_ptr_t)p->payload % MEM_ALIGNMENT) == 0);
    /* the total length of the pbuf chain is the requested size */
    p->tot_len = length;
 8009ea0:	69fb      	ldr	r3, [r7, #28]
 8009ea2:	88ba      	ldrh	r2, [r7, #4]
 8009ea4:	811a      	strh	r2, [r3, #8]
    /* set the length of the first pbuf in the chain */
    p->len = LWIP_MIN(length, PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset));
 8009ea6:	8afb      	ldrh	r3, [r7, #22]
 8009ea8:	3303      	adds	r3, #3
 8009eaa:	f023 0303 	bic.w	r3, r3, #3
 8009eae:	f5c3 62bf 	rsb	r2, r3, #1528	; 0x5f8
 8009eb2:	88bb      	ldrh	r3, [r7, #4]
 8009eb4:	4293      	cmp	r3, r2
 8009eb6:	bf28      	it	cs
 8009eb8:	4613      	movcs	r3, r2
 8009eba:	b29a      	uxth	r2, r3
 8009ebc:	69fb      	ldr	r3, [r7, #28]
 8009ebe:	815a      	strh	r2, [r3, #10]
    LWIP_ASSERT("check p->payload + p->len does not overflow pbuf",
 8009ec0:	69fb      	ldr	r3, [r7, #28]
 8009ec2:	685b      	ldr	r3, [r3, #4]
 8009ec4:	69fa      	ldr	r2, [r7, #28]
 8009ec6:	8952      	ldrh	r2, [r2, #10]
 8009ec8:	441a      	add	r2, r3
 8009eca:	69fb      	ldr	r3, [r7, #28]
 8009ecc:	f503 63c1 	add.w	r3, r3, #1544	; 0x608
 8009ed0:	429a      	cmp	r2, r3
 8009ed2:	d906      	bls.n	8009ee2 <pbuf_alloc+0x116>
 8009ed4:	4b77      	ldr	r3, [pc, #476]	; (800a0b4 <pbuf_alloc+0x2e8>)
 8009ed6:	f44f 7298 	mov.w	r2, #304	; 0x130
 8009eda:	497a      	ldr	r1, [pc, #488]	; (800a0c4 <pbuf_alloc+0x2f8>)
 8009edc:	4877      	ldr	r0, [pc, #476]	; (800a0bc <pbuf_alloc+0x2f0>)
 8009ede:	f00b fe79 	bl	8015bd4 <printf_>
                ((u8_t*)p->payload + p->len <=
                 (u8_t*)p + SIZEOF_STRUCT_PBUF + PBUF_POOL_BUFSIZE_ALIGNED));
    LWIP_ASSERT("PBUF_POOL_BUFSIZE must be bigger than MEM_ALIGNMENT",
 8009ee2:	8afb      	ldrh	r3, [r7, #22]
 8009ee4:	3303      	adds	r3, #3
 8009ee6:	f023 0303 	bic.w	r3, r3, #3
 8009eea:	f5b3 6fbf 	cmp.w	r3, #1528	; 0x5f8
 8009eee:	d106      	bne.n	8009efe <pbuf_alloc+0x132>
 8009ef0:	4b70      	ldr	r3, [pc, #448]	; (800a0b4 <pbuf_alloc+0x2e8>)
 8009ef2:	f44f 7299 	mov.w	r2, #306	; 0x132
 8009ef6:	4974      	ldr	r1, [pc, #464]	; (800a0c8 <pbuf_alloc+0x2fc>)
 8009ef8:	4870      	ldr	r0, [pc, #448]	; (800a0bc <pbuf_alloc+0x2f0>)
 8009efa:	f00b fe6b 	bl	8015bd4 <printf_>
      (PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)) > 0 );
    /* set reference count (needed here in case we fail) */
    p->ref = 1;
 8009efe:	69fb      	ldr	r3, [r7, #28]
 8009f00:	2201      	movs	r2, #1
 8009f02:	81da      	strh	r2, [r3, #14]

    /* now allocate the tail of the pbuf chain */

    /* remember first pbuf for linkage in next iteration */
    r = p;
 8009f04:	69fb      	ldr	r3, [r7, #28]
 8009f06:	61bb      	str	r3, [r7, #24]
    /* remaining length to be allocated */
    rem_len = length - p->len;
 8009f08:	88bb      	ldrh	r3, [r7, #4]
 8009f0a:	69fa      	ldr	r2, [r7, #28]
 8009f0c:	8952      	ldrh	r2, [r2, #10]
 8009f0e:	1a9b      	subs	r3, r3, r2
 8009f10:	613b      	str	r3, [r7, #16]
    /* any remaining pbufs to be allocated? */
    while (rem_len > 0) {
 8009f12:	e061      	b.n	8009fd8 <pbuf_alloc+0x20c>
      q = (struct pbuf *)memp_malloc(MEMP_PBUF_POOL);
 8009f14:	200c      	movs	r0, #12
 8009f16:	f7ff fcab 	bl	8009870 <memp_malloc>
 8009f1a:	60f8      	str	r0, [r7, #12]
      if (q == NULL) {
 8009f1c:	68fb      	ldr	r3, [r7, #12]
 8009f1e:	2b00      	cmp	r3, #0
 8009f20:	d106      	bne.n	8009f30 <pbuf_alloc+0x164>
        PBUF_POOL_IS_EMPTY();
 8009f22:	f7ff ff27 	bl	8009d74 <pbuf_pool_is_empty>
        /* free chain so far allocated */
        pbuf_free(p);
 8009f26:	69f8      	ldr	r0, [r7, #28]
 8009f28:	f000 fac2 	bl	800a4b0 <pbuf_free>
        /* bail out unsuccessfully */
        return NULL;
 8009f2c:	2300      	movs	r3, #0
 8009f2e:	e0dd      	b.n	800a0ec <pbuf_alloc+0x320>
      }
      q->type = type;
 8009f30:	68fb      	ldr	r3, [r7, #12]
 8009f32:	79ba      	ldrb	r2, [r7, #6]
 8009f34:	731a      	strb	r2, [r3, #12]
      q->flags = 0;
 8009f36:	68fb      	ldr	r3, [r7, #12]
 8009f38:	2200      	movs	r2, #0
 8009f3a:	735a      	strb	r2, [r3, #13]
      q->next = NULL;
 8009f3c:	68fb      	ldr	r3, [r7, #12]
 8009f3e:	2200      	movs	r2, #0
 8009f40:	601a      	str	r2, [r3, #0]
      /* make previous pbuf point to this pbuf */
      r->next = q;
 8009f42:	69bb      	ldr	r3, [r7, #24]
 8009f44:	68fa      	ldr	r2, [r7, #12]
 8009f46:	601a      	str	r2, [r3, #0]
      /* set total length of this pbuf and next in chain */
      LWIP_ASSERT("rem_len < max_u16_t", rem_len < 0xffff);
 8009f48:	693b      	ldr	r3, [r7, #16]
 8009f4a:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8009f4e:	4293      	cmp	r3, r2
 8009f50:	dd06      	ble.n	8009f60 <pbuf_alloc+0x194>
 8009f52:	4b58      	ldr	r3, [pc, #352]	; (800a0b4 <pbuf_alloc+0x2e8>)
 8009f54:	f44f 72a6 	mov.w	r2, #332	; 0x14c
 8009f58:	495c      	ldr	r1, [pc, #368]	; (800a0cc <pbuf_alloc+0x300>)
 8009f5a:	4858      	ldr	r0, [pc, #352]	; (800a0bc <pbuf_alloc+0x2f0>)
 8009f5c:	f00b fe3a 	bl	8015bd4 <printf_>
      q->tot_len = (u16_t)rem_len;
 8009f60:	693b      	ldr	r3, [r7, #16]
 8009f62:	b29a      	uxth	r2, r3
 8009f64:	68fb      	ldr	r3, [r7, #12]
 8009f66:	811a      	strh	r2, [r3, #8]
      /* this pbuf length is pool size, unless smaller sized tail */
      q->len = LWIP_MIN((u16_t)rem_len, PBUF_POOL_BUFSIZE_ALIGNED);
 8009f68:	693b      	ldr	r3, [r7, #16]
 8009f6a:	b29b      	uxth	r3, r3
 8009f6c:	f5b3 6fbf 	cmp.w	r3, #1528	; 0x5f8
 8009f70:	bf28      	it	cs
 8009f72:	f44f 63bf 	movcs.w	r3, #1528	; 0x5f8
 8009f76:	b29a      	uxth	r2, r3
 8009f78:	68fb      	ldr	r3, [r7, #12]
 8009f7a:	815a      	strh	r2, [r3, #10]
      q->payload = (void *)((u8_t *)q + SIZEOF_STRUCT_PBUF);
 8009f7c:	68fb      	ldr	r3, [r7, #12]
 8009f7e:	f103 0210 	add.w	r2, r3, #16
 8009f82:	68fb      	ldr	r3, [r7, #12]
 8009f84:	605a      	str	r2, [r3, #4]
      LWIP_ASSERT("pbuf_alloc: pbuf q->payload properly aligned",
 8009f86:	68fb      	ldr	r3, [r7, #12]
 8009f88:	685b      	ldr	r3, [r3, #4]
 8009f8a:	f003 0303 	and.w	r3, r3, #3
 8009f8e:	2b00      	cmp	r3, #0
 8009f90:	d006      	beq.n	8009fa0 <pbuf_alloc+0x1d4>
 8009f92:	4b48      	ldr	r3, [pc, #288]	; (800a0b4 <pbuf_alloc+0x2e8>)
 8009f94:	f44f 72a9 	mov.w	r2, #338	; 0x152
 8009f98:	494d      	ldr	r1, [pc, #308]	; (800a0d0 <pbuf_alloc+0x304>)
 8009f9a:	4848      	ldr	r0, [pc, #288]	; (800a0bc <pbuf_alloc+0x2f0>)
 8009f9c:	f00b fe1a 	bl	8015bd4 <printf_>
              ((mem_ptr_t)q->payload % MEM_ALIGNMENT) == 0);
      LWIP_ASSERT("check p->payload + p->len does not overflow pbuf",
 8009fa0:	69fb      	ldr	r3, [r7, #28]
 8009fa2:	685b      	ldr	r3, [r3, #4]
 8009fa4:	69fa      	ldr	r2, [r7, #28]
 8009fa6:	8952      	ldrh	r2, [r2, #10]
 8009fa8:	441a      	add	r2, r3
 8009faa:	69fb      	ldr	r3, [r7, #28]
 8009fac:	f503 63c1 	add.w	r3, r3, #1544	; 0x608
 8009fb0:	429a      	cmp	r2, r3
 8009fb2:	d906      	bls.n	8009fc2 <pbuf_alloc+0x1f6>
 8009fb4:	4b3f      	ldr	r3, [pc, #252]	; (800a0b4 <pbuf_alloc+0x2e8>)
 8009fb6:	f240 1255 	movw	r2, #341	; 0x155
 8009fba:	4942      	ldr	r1, [pc, #264]	; (800a0c4 <pbuf_alloc+0x2f8>)
 8009fbc:	483f      	ldr	r0, [pc, #252]	; (800a0bc <pbuf_alloc+0x2f0>)
 8009fbe:	f00b fe09 	bl	8015bd4 <printf_>
                  ((u8_t*)p->payload + p->len <=
                   (u8_t*)p + SIZEOF_STRUCT_PBUF + PBUF_POOL_BUFSIZE_ALIGNED));
      q->ref = 1;
 8009fc2:	68fb      	ldr	r3, [r7, #12]
 8009fc4:	2201      	movs	r2, #1
 8009fc6:	81da      	strh	r2, [r3, #14]
      /* calculate remaining length to be allocated */
      rem_len -= q->len;
 8009fc8:	68fb      	ldr	r3, [r7, #12]
 8009fca:	895b      	ldrh	r3, [r3, #10]
 8009fcc:	461a      	mov	r2, r3
 8009fce:	693b      	ldr	r3, [r7, #16]
 8009fd0:	1a9b      	subs	r3, r3, r2
 8009fd2:	613b      	str	r3, [r7, #16]
      /* remember this pbuf for linkage in next iteration */
      r = q;
 8009fd4:	68fb      	ldr	r3, [r7, #12]
 8009fd6:	61bb      	str	r3, [r7, #24]
    while (rem_len > 0) {
 8009fd8:	693b      	ldr	r3, [r7, #16]
 8009fda:	2b00      	cmp	r3, #0
 8009fdc:	dc9a      	bgt.n	8009f14 <pbuf_alloc+0x148>
    }
    /* end of chain */
    /*r->next = NULL;*/

    break;
 8009fde:	e07e      	b.n	800a0de <pbuf_alloc+0x312>
  case PBUF_RAM:
    {
      mem_size_t alloc_len = LWIP_MEM_ALIGN_SIZE(SIZEOF_STRUCT_PBUF + offset) + LWIP_MEM_ALIGN_SIZE(length);
 8009fe0:	8afb      	ldrh	r3, [r7, #22]
 8009fe2:	3313      	adds	r3, #19
 8009fe4:	b29b      	uxth	r3, r3
 8009fe6:	f023 0303 	bic.w	r3, r3, #3
 8009fea:	b29a      	uxth	r2, r3
 8009fec:	88bb      	ldrh	r3, [r7, #4]
 8009fee:	3303      	adds	r3, #3
 8009ff0:	b29b      	uxth	r3, r3
 8009ff2:	f023 0303 	bic.w	r3, r3, #3
 8009ff6:	b29b      	uxth	r3, r3
 8009ff8:	4413      	add	r3, r2
 8009ffa:	817b      	strh	r3, [r7, #10]
      
      /* bug #50040: Check for integer overflow when calculating alloc_len */
      if (alloc_len < LWIP_MEM_ALIGN_SIZE(length)) {
 8009ffc:	897a      	ldrh	r2, [r7, #10]
 8009ffe:	88bb      	ldrh	r3, [r7, #4]
 800a000:	3303      	adds	r3, #3
 800a002:	f023 0303 	bic.w	r3, r3, #3
 800a006:	429a      	cmp	r2, r3
 800a008:	d201      	bcs.n	800a00e <pbuf_alloc+0x242>
        return NULL;
 800a00a:	2300      	movs	r3, #0
 800a00c:	e06e      	b.n	800a0ec <pbuf_alloc+0x320>
      }
    
      /* If pbuf is to be allocated in RAM, allocate memory for it. */
      p = (struct pbuf*)mem_malloc(alloc_len);
 800a00e:	897b      	ldrh	r3, [r7, #10]
 800a010:	4618      	mov	r0, r3
 800a012:	f7ff fa9b 	bl	800954c <mem_malloc>
 800a016:	61f8      	str	r0, [r7, #28]
    }

    if (p == NULL) {
 800a018:	69fb      	ldr	r3, [r7, #28]
 800a01a:	2b00      	cmp	r3, #0
 800a01c:	d101      	bne.n	800a022 <pbuf_alloc+0x256>
      return NULL;
 800a01e:	2300      	movs	r3, #0
 800a020:	e064      	b.n	800a0ec <pbuf_alloc+0x320>
    }
    /* Set up internal structure of the pbuf. */
    p->payload = LWIP_MEM_ALIGN((void *)((u8_t *)p + SIZEOF_STRUCT_PBUF + offset));
 800a022:	8afb      	ldrh	r3, [r7, #22]
 800a024:	3310      	adds	r3, #16
 800a026:	69fa      	ldr	r2, [r7, #28]
 800a028:	4413      	add	r3, r2
 800a02a:	3303      	adds	r3, #3
 800a02c:	f023 0303 	bic.w	r3, r3, #3
 800a030:	461a      	mov	r2, r3
 800a032:	69fb      	ldr	r3, [r7, #28]
 800a034:	605a      	str	r2, [r3, #4]
    p->len = p->tot_len = length;
 800a036:	69fb      	ldr	r3, [r7, #28]
 800a038:	88ba      	ldrh	r2, [r7, #4]
 800a03a:	811a      	strh	r2, [r3, #8]
 800a03c:	69fb      	ldr	r3, [r7, #28]
 800a03e:	891a      	ldrh	r2, [r3, #8]
 800a040:	69fb      	ldr	r3, [r7, #28]
 800a042:	815a      	strh	r2, [r3, #10]
    p->next = NULL;
 800a044:	69fb      	ldr	r3, [r7, #28]
 800a046:	2200      	movs	r2, #0
 800a048:	601a      	str	r2, [r3, #0]
    p->type = type;
 800a04a:	69fb      	ldr	r3, [r7, #28]
 800a04c:	79ba      	ldrb	r2, [r7, #6]
 800a04e:	731a      	strb	r2, [r3, #12]

    LWIP_ASSERT("pbuf_alloc: pbuf->payload properly aligned",
 800a050:	69fb      	ldr	r3, [r7, #28]
 800a052:	685b      	ldr	r3, [r3, #4]
 800a054:	f003 0303 	and.w	r3, r3, #3
 800a058:	2b00      	cmp	r3, #0
 800a05a:	d03f      	beq.n	800a0dc <pbuf_alloc+0x310>
 800a05c:	4b15      	ldr	r3, [pc, #84]	; (800a0b4 <pbuf_alloc+0x2e8>)
 800a05e:	f240 1277 	movw	r2, #375	; 0x177
 800a062:	491c      	ldr	r1, [pc, #112]	; (800a0d4 <pbuf_alloc+0x308>)
 800a064:	4815      	ldr	r0, [pc, #84]	; (800a0bc <pbuf_alloc+0x2f0>)
 800a066:	f00b fdb5 	bl	8015bd4 <printf_>
           ((mem_ptr_t)p->payload % MEM_ALIGNMENT) == 0);
    break;
 800a06a:	e037      	b.n	800a0dc <pbuf_alloc+0x310>
  /* pbuf references existing (non-volatile static constant) ROM payload? */
  case PBUF_ROM:
  /* pbuf references existing (externally allocated) RAM payload? */
  case PBUF_REF:
    /* only allocate memory for the pbuf structure */
    p = (struct pbuf *)memp_malloc(MEMP_PBUF);
 800a06c:	200b      	movs	r0, #11
 800a06e:	f7ff fbff 	bl	8009870 <memp_malloc>
 800a072:	61f8      	str	r0, [r7, #28]
    if (p == NULL) {
 800a074:	69fb      	ldr	r3, [r7, #28]
 800a076:	2b00      	cmp	r3, #0
 800a078:	d101      	bne.n	800a07e <pbuf_alloc+0x2b2>
      LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                  ("pbuf_alloc: Could not allocate MEMP_PBUF for PBUF_%s.\n",
                  (type == PBUF_ROM) ? "ROM" : "REF"));
      return NULL;
 800a07a:	2300      	movs	r3, #0
 800a07c:	e036      	b.n	800a0ec <pbuf_alloc+0x320>
    }
    /* caller must set this field properly, afterwards */
    p->payload = NULL;
 800a07e:	69fb      	ldr	r3, [r7, #28]
 800a080:	2200      	movs	r2, #0
 800a082:	605a      	str	r2, [r3, #4]
    p->len = p->tot_len = length;
 800a084:	69fb      	ldr	r3, [r7, #28]
 800a086:	88ba      	ldrh	r2, [r7, #4]
 800a088:	811a      	strh	r2, [r3, #8]
 800a08a:	69fb      	ldr	r3, [r7, #28]
 800a08c:	891a      	ldrh	r2, [r3, #8]
 800a08e:	69fb      	ldr	r3, [r7, #28]
 800a090:	815a      	strh	r2, [r3, #10]
    p->next = NULL;
 800a092:	69fb      	ldr	r3, [r7, #28]
 800a094:	2200      	movs	r2, #0
 800a096:	601a      	str	r2, [r3, #0]
    p->type = type;
 800a098:	69fb      	ldr	r3, [r7, #28]
 800a09a:	79ba      	ldrb	r2, [r7, #6]
 800a09c:	731a      	strb	r2, [r3, #12]
    break;
 800a09e:	e01e      	b.n	800a0de <pbuf_alloc+0x312>
  default:
    LWIP_ASSERT("pbuf_alloc: erroneous type", 0);
 800a0a0:	4b04      	ldr	r3, [pc, #16]	; (800a0b4 <pbuf_alloc+0x2e8>)
 800a0a2:	f44f 72c6 	mov.w	r2, #396	; 0x18c
 800a0a6:	490c      	ldr	r1, [pc, #48]	; (800a0d8 <pbuf_alloc+0x30c>)
 800a0a8:	4804      	ldr	r0, [pc, #16]	; (800a0bc <pbuf_alloc+0x2f0>)
 800a0aa:	f00b fd93 	bl	8015bd4 <printf_>
    return NULL;
 800a0ae:	2300      	movs	r3, #0
 800a0b0:	e01c      	b.n	800a0ec <pbuf_alloc+0x320>
 800a0b2:	bf00      	nop
 800a0b4:	0801a5cc 	.word	0x0801a5cc
 800a0b8:	0801a5fc 	.word	0x0801a5fc
 800a0bc:	0801a618 	.word	0x0801a618
 800a0c0:	0801a640 	.word	0x0801a640
 800a0c4:	0801a670 	.word	0x0801a670
 800a0c8:	0801a6a4 	.word	0x0801a6a4
 800a0cc:	0801a6d8 	.word	0x0801a6d8
 800a0d0:	0801a6ec 	.word	0x0801a6ec
 800a0d4:	0801a71c 	.word	0x0801a71c
 800a0d8:	0801a748 	.word	0x0801a748
    break;
 800a0dc:	bf00      	nop
  }
  /* set reference count */
  p->ref = 1;
 800a0de:	69fb      	ldr	r3, [r7, #28]
 800a0e0:	2201      	movs	r2, #1
 800a0e2:	81da      	strh	r2, [r3, #14]
  /* set flags */
  p->flags = 0;
 800a0e4:	69fb      	ldr	r3, [r7, #28]
 800a0e6:	2200      	movs	r2, #0
 800a0e8:	735a      	strb	r2, [r3, #13]
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc(length=%"U16_F") == %p\n", length, (void *)p));
  return p;
 800a0ea:	69fb      	ldr	r3, [r7, #28]
}
 800a0ec:	4618      	mov	r0, r3
 800a0ee:	3720      	adds	r7, #32
 800a0f0:	46bd      	mov	sp, r7
 800a0f2:	bd80      	pop	{r7, pc}

0800a0f4 <pbuf_alloced_custom>:
 *        big enough to hold 'length' plus the header size
 */
struct pbuf*
pbuf_alloced_custom(pbuf_layer l, u16_t length, pbuf_type type, struct pbuf_custom *p,
                    void *payload_mem, u16_t payload_mem_len)
{
 800a0f4:	b580      	push	{r7, lr}
 800a0f6:	b084      	sub	sp, #16
 800a0f8:	af00      	add	r7, sp, #0
 800a0fa:	603b      	str	r3, [r7, #0]
 800a0fc:	4603      	mov	r3, r0
 800a0fe:	71fb      	strb	r3, [r7, #7]
 800a100:	460b      	mov	r3, r1
 800a102:	80bb      	strh	r3, [r7, #4]
 800a104:	4613      	mov	r3, r2
 800a106:	71bb      	strb	r3, [r7, #6]
  u16_t offset;
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloced_custom(length=%"U16_F")\n", length));

  /* determine header offset */
  switch (l) {
 800a108:	79fb      	ldrb	r3, [r7, #7]
 800a10a:	2b04      	cmp	r3, #4
 800a10c:	d81b      	bhi.n	800a146 <pbuf_alloced_custom+0x52>
 800a10e:	a201      	add	r2, pc, #4	; (adr r2, 800a114 <pbuf_alloced_custom+0x20>)
 800a110:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a114:	0800a129 	.word	0x0800a129
 800a118:	0800a12f 	.word	0x0800a12f
 800a11c:	0800a135 	.word	0x0800a135
 800a120:	0800a13b 	.word	0x0800a13b
 800a124:	0800a141 	.word	0x0800a141
  case PBUF_TRANSPORT:
    /* add room for transport (often TCP) layer header */
    offset = PBUF_LINK_ENCAPSULATION_HLEN + PBUF_LINK_HLEN + PBUF_IP_HLEN + PBUF_TRANSPORT_HLEN;
 800a128:	2336      	movs	r3, #54	; 0x36
 800a12a:	81fb      	strh	r3, [r7, #14]
    break;
 800a12c:	e014      	b.n	800a158 <pbuf_alloced_custom+0x64>
  case PBUF_IP:
    /* add room for IP layer header */
    offset = PBUF_LINK_ENCAPSULATION_HLEN + PBUF_LINK_HLEN + PBUF_IP_HLEN;
 800a12e:	2322      	movs	r3, #34	; 0x22
 800a130:	81fb      	strh	r3, [r7, #14]
    break;
 800a132:	e011      	b.n	800a158 <pbuf_alloced_custom+0x64>
  case PBUF_LINK:
    /* add room for link layer header */
    offset = PBUF_LINK_ENCAPSULATION_HLEN + PBUF_LINK_HLEN;
 800a134:	230e      	movs	r3, #14
 800a136:	81fb      	strh	r3, [r7, #14]
    break;
 800a138:	e00e      	b.n	800a158 <pbuf_alloced_custom+0x64>
  case PBUF_RAW_TX:
    /* add room for encapsulating link layer headers (e.g. 802.11) */
    offset = PBUF_LINK_ENCAPSULATION_HLEN;
 800a13a:	2300      	movs	r3, #0
 800a13c:	81fb      	strh	r3, [r7, #14]
    break;
 800a13e:	e00b      	b.n	800a158 <pbuf_alloced_custom+0x64>
  case PBUF_RAW:
    offset = 0;
 800a140:	2300      	movs	r3, #0
 800a142:	81fb      	strh	r3, [r7, #14]
    break;
 800a144:	e008      	b.n	800a158 <pbuf_alloced_custom+0x64>
  default:
    LWIP_ASSERT("pbuf_alloced_custom: bad pbuf layer", 0);
 800a146:	4b1d      	ldr	r3, [pc, #116]	; (800a1bc <pbuf_alloced_custom+0xc8>)
 800a148:	f240 12c5 	movw	r2, #453	; 0x1c5
 800a14c:	491c      	ldr	r1, [pc, #112]	; (800a1c0 <pbuf_alloced_custom+0xcc>)
 800a14e:	481d      	ldr	r0, [pc, #116]	; (800a1c4 <pbuf_alloced_custom+0xd0>)
 800a150:	f00b fd40 	bl	8015bd4 <printf_>
    return NULL;
 800a154:	2300      	movs	r3, #0
 800a156:	e02d      	b.n	800a1b4 <pbuf_alloced_custom+0xc0>
  }

  if (LWIP_MEM_ALIGN_SIZE(offset) + length > payload_mem_len) {
 800a158:	89fb      	ldrh	r3, [r7, #14]
 800a15a:	3303      	adds	r3, #3
 800a15c:	f023 0203 	bic.w	r2, r3, #3
 800a160:	88bb      	ldrh	r3, [r7, #4]
 800a162:	441a      	add	r2, r3
 800a164:	8bbb      	ldrh	r3, [r7, #28]
 800a166:	429a      	cmp	r2, r3
 800a168:	d901      	bls.n	800a16e <pbuf_alloced_custom+0x7a>
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_WARNING, ("pbuf_alloced_custom(length=%"U16_F") buffer too short\n", length));
    return NULL;
 800a16a:	2300      	movs	r3, #0
 800a16c:	e022      	b.n	800a1b4 <pbuf_alloced_custom+0xc0>
  }

  p->pbuf.next = NULL;
 800a16e:	683b      	ldr	r3, [r7, #0]
 800a170:	2200      	movs	r2, #0
 800a172:	601a      	str	r2, [r3, #0]
  if (payload_mem != NULL) {
 800a174:	69bb      	ldr	r3, [r7, #24]
 800a176:	2b00      	cmp	r3, #0
 800a178:	d008      	beq.n	800a18c <pbuf_alloced_custom+0x98>
    p->pbuf.payload = (u8_t *)payload_mem + LWIP_MEM_ALIGN_SIZE(offset);
 800a17a:	89fb      	ldrh	r3, [r7, #14]
 800a17c:	3303      	adds	r3, #3
 800a17e:	f023 0303 	bic.w	r3, r3, #3
 800a182:	69ba      	ldr	r2, [r7, #24]
 800a184:	441a      	add	r2, r3
 800a186:	683b      	ldr	r3, [r7, #0]
 800a188:	605a      	str	r2, [r3, #4]
 800a18a:	e002      	b.n	800a192 <pbuf_alloced_custom+0x9e>
  } else {
    p->pbuf.payload = NULL;
 800a18c:	683b      	ldr	r3, [r7, #0]
 800a18e:	2200      	movs	r2, #0
 800a190:	605a      	str	r2, [r3, #4]
  }
  p->pbuf.flags = PBUF_FLAG_IS_CUSTOM;
 800a192:	683b      	ldr	r3, [r7, #0]
 800a194:	2202      	movs	r2, #2
 800a196:	735a      	strb	r2, [r3, #13]
  p->pbuf.len = p->pbuf.tot_len = length;
 800a198:	683b      	ldr	r3, [r7, #0]
 800a19a:	88ba      	ldrh	r2, [r7, #4]
 800a19c:	811a      	strh	r2, [r3, #8]
 800a19e:	683b      	ldr	r3, [r7, #0]
 800a1a0:	891a      	ldrh	r2, [r3, #8]
 800a1a2:	683b      	ldr	r3, [r7, #0]
 800a1a4:	815a      	strh	r2, [r3, #10]
  p->pbuf.type = type;
 800a1a6:	683b      	ldr	r3, [r7, #0]
 800a1a8:	79ba      	ldrb	r2, [r7, #6]
 800a1aa:	731a      	strb	r2, [r3, #12]
  p->pbuf.ref = 1;
 800a1ac:	683b      	ldr	r3, [r7, #0]
 800a1ae:	2201      	movs	r2, #1
 800a1b0:	81da      	strh	r2, [r3, #14]
  return &p->pbuf;
 800a1b2:	683b      	ldr	r3, [r7, #0]
}
 800a1b4:	4618      	mov	r0, r3
 800a1b6:	3710      	adds	r7, #16
 800a1b8:	46bd      	mov	sp, r7
 800a1ba:	bd80      	pop	{r7, pc}
 800a1bc:	0801a5cc 	.word	0x0801a5cc
 800a1c0:	0801a764 	.word	0x0801a764
 800a1c4:	0801a618 	.word	0x0801a618

0800a1c8 <pbuf_realloc>:
 *
 * @note Despite its name, pbuf_realloc cannot grow the size of a pbuf (chain).
 */
void
pbuf_realloc(struct pbuf *p, u16_t new_len)
{
 800a1c8:	b580      	push	{r7, lr}
 800a1ca:	b086      	sub	sp, #24
 800a1cc:	af00      	add	r7, sp, #0
 800a1ce:	6078      	str	r0, [r7, #4]
 800a1d0:	460b      	mov	r3, r1
 800a1d2:	807b      	strh	r3, [r7, #2]
  struct pbuf *q;
  u16_t rem_len; /* remaining length */
  s32_t grow;

  LWIP_ASSERT("pbuf_realloc: p != NULL", p != NULL);
 800a1d4:	687b      	ldr	r3, [r7, #4]
 800a1d6:	2b00      	cmp	r3, #0
 800a1d8:	d106      	bne.n	800a1e8 <pbuf_realloc+0x20>
 800a1da:	4b4b      	ldr	r3, [pc, #300]	; (800a308 <pbuf_realloc+0x140>)
 800a1dc:	f240 12f3 	movw	r2, #499	; 0x1f3
 800a1e0:	494a      	ldr	r1, [pc, #296]	; (800a30c <pbuf_realloc+0x144>)
 800a1e2:	484b      	ldr	r0, [pc, #300]	; (800a310 <pbuf_realloc+0x148>)
 800a1e4:	f00b fcf6 	bl	8015bd4 <printf_>
  LWIP_ASSERT("pbuf_realloc: sane p->type", p->type == PBUF_POOL ||
 800a1e8:	687b      	ldr	r3, [r7, #4]
 800a1ea:	7b1b      	ldrb	r3, [r3, #12]
 800a1ec:	2b03      	cmp	r3, #3
 800a1ee:	d012      	beq.n	800a216 <pbuf_realloc+0x4e>
 800a1f0:	687b      	ldr	r3, [r7, #4]
 800a1f2:	7b1b      	ldrb	r3, [r3, #12]
 800a1f4:	2b01      	cmp	r3, #1
 800a1f6:	d00e      	beq.n	800a216 <pbuf_realloc+0x4e>
 800a1f8:	687b      	ldr	r3, [r7, #4]
 800a1fa:	7b1b      	ldrb	r3, [r3, #12]
 800a1fc:	2b00      	cmp	r3, #0
 800a1fe:	d00a      	beq.n	800a216 <pbuf_realloc+0x4e>
 800a200:	687b      	ldr	r3, [r7, #4]
 800a202:	7b1b      	ldrb	r3, [r3, #12]
 800a204:	2b02      	cmp	r3, #2
 800a206:	d006      	beq.n	800a216 <pbuf_realloc+0x4e>
 800a208:	4b3f      	ldr	r3, [pc, #252]	; (800a308 <pbuf_realloc+0x140>)
 800a20a:	f240 12f7 	movw	r2, #503	; 0x1f7
 800a20e:	4941      	ldr	r1, [pc, #260]	; (800a314 <pbuf_realloc+0x14c>)
 800a210:	483f      	ldr	r0, [pc, #252]	; (800a310 <pbuf_realloc+0x148>)
 800a212:	f00b fcdf 	bl	8015bd4 <printf_>
              p->type == PBUF_ROM ||
              p->type == PBUF_RAM ||
              p->type == PBUF_REF);

  /* desired length larger than current length? */
  if (new_len >= p->tot_len) {
 800a216:	687b      	ldr	r3, [r7, #4]
 800a218:	891b      	ldrh	r3, [r3, #8]
 800a21a:	887a      	ldrh	r2, [r7, #2]
 800a21c:	429a      	cmp	r2, r3
 800a21e:	d26f      	bcs.n	800a300 <pbuf_realloc+0x138>
    return;
  }

  /* the pbuf chain grows by (new_len - p->tot_len) bytes
   * (which may be negative in case of shrinking) */
  grow = new_len - p->tot_len;
 800a220:	887b      	ldrh	r3, [r7, #2]
 800a222:	687a      	ldr	r2, [r7, #4]
 800a224:	8912      	ldrh	r2, [r2, #8]
 800a226:	1a9b      	subs	r3, r3, r2
 800a228:	60fb      	str	r3, [r7, #12]

  /* first, step over any pbufs that should remain in the chain */
  rem_len = new_len;
 800a22a:	887b      	ldrh	r3, [r7, #2]
 800a22c:	827b      	strh	r3, [r7, #18]
  q = p;
 800a22e:	687b      	ldr	r3, [r7, #4]
 800a230:	617b      	str	r3, [r7, #20]
  /* should this pbuf be kept? */
  while (rem_len > q->len) {
 800a232:	e025      	b.n	800a280 <pbuf_realloc+0xb8>
    /* decrease remaining length by pbuf length */
    rem_len -= q->len;
 800a234:	697b      	ldr	r3, [r7, #20]
 800a236:	895b      	ldrh	r3, [r3, #10]
 800a238:	8a7a      	ldrh	r2, [r7, #18]
 800a23a:	1ad3      	subs	r3, r2, r3
 800a23c:	827b      	strh	r3, [r7, #18]
    /* decrease total length indicator */
    LWIP_ASSERT("grow < max_u16_t", grow < 0xffff);
 800a23e:	68fb      	ldr	r3, [r7, #12]
 800a240:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 800a244:	4293      	cmp	r3, r2
 800a246:	dd06      	ble.n	800a256 <pbuf_realloc+0x8e>
 800a248:	4b2f      	ldr	r3, [pc, #188]	; (800a308 <pbuf_realloc+0x140>)
 800a24a:	f240 220b 	movw	r2, #523	; 0x20b
 800a24e:	4932      	ldr	r1, [pc, #200]	; (800a318 <pbuf_realloc+0x150>)
 800a250:	482f      	ldr	r0, [pc, #188]	; (800a310 <pbuf_realloc+0x148>)
 800a252:	f00b fcbf 	bl	8015bd4 <printf_>
    q->tot_len += (u16_t)grow;
 800a256:	697b      	ldr	r3, [r7, #20]
 800a258:	891a      	ldrh	r2, [r3, #8]
 800a25a:	68fb      	ldr	r3, [r7, #12]
 800a25c:	b29b      	uxth	r3, r3
 800a25e:	4413      	add	r3, r2
 800a260:	b29a      	uxth	r2, r3
 800a262:	697b      	ldr	r3, [r7, #20]
 800a264:	811a      	strh	r2, [r3, #8]
    /* proceed to next pbuf in chain */
    q = q->next;
 800a266:	697b      	ldr	r3, [r7, #20]
 800a268:	681b      	ldr	r3, [r3, #0]
 800a26a:	617b      	str	r3, [r7, #20]
    LWIP_ASSERT("pbuf_realloc: q != NULL", q != NULL);
 800a26c:	697b      	ldr	r3, [r7, #20]
 800a26e:	2b00      	cmp	r3, #0
 800a270:	d106      	bne.n	800a280 <pbuf_realloc+0xb8>
 800a272:	4b25      	ldr	r3, [pc, #148]	; (800a308 <pbuf_realloc+0x140>)
 800a274:	f240 220f 	movw	r2, #527	; 0x20f
 800a278:	4928      	ldr	r1, [pc, #160]	; (800a31c <pbuf_realloc+0x154>)
 800a27a:	4825      	ldr	r0, [pc, #148]	; (800a310 <pbuf_realloc+0x148>)
 800a27c:	f00b fcaa 	bl	8015bd4 <printf_>
  while (rem_len > q->len) {
 800a280:	697b      	ldr	r3, [r7, #20]
 800a282:	895b      	ldrh	r3, [r3, #10]
 800a284:	8a7a      	ldrh	r2, [r7, #18]
 800a286:	429a      	cmp	r2, r3
 800a288:	d8d4      	bhi.n	800a234 <pbuf_realloc+0x6c>
  /* we have now reached the new last pbuf (in q) */
  /* rem_len == desired length for pbuf q */

  /* shrink allocated memory for PBUF_RAM */
  /* (other types merely adjust their length fields */
  if ((q->type == PBUF_RAM) && (rem_len != q->len)
 800a28a:	697b      	ldr	r3, [r7, #20]
 800a28c:	7b1b      	ldrb	r3, [r3, #12]
 800a28e:	2b00      	cmp	r3, #0
 800a290:	d122      	bne.n	800a2d8 <pbuf_realloc+0x110>
 800a292:	697b      	ldr	r3, [r7, #20]
 800a294:	895b      	ldrh	r3, [r3, #10]
 800a296:	8a7a      	ldrh	r2, [r7, #18]
 800a298:	429a      	cmp	r2, r3
 800a29a:	d01d      	beq.n	800a2d8 <pbuf_realloc+0x110>
#if LWIP_SUPPORT_CUSTOM_PBUF
      && ((q->flags & PBUF_FLAG_IS_CUSTOM) == 0)
 800a29c:	697b      	ldr	r3, [r7, #20]
 800a29e:	7b5b      	ldrb	r3, [r3, #13]
 800a2a0:	f003 0302 	and.w	r3, r3, #2
 800a2a4:	2b00      	cmp	r3, #0
 800a2a6:	d117      	bne.n	800a2d8 <pbuf_realloc+0x110>
#endif /* LWIP_SUPPORT_CUSTOM_PBUF */
     ) {
    /* reallocate and adjust the length of the pbuf that will be split */
    q = (struct pbuf *)mem_trim(q, (u16_t)((u8_t *)q->payload - (u8_t *)q) + rem_len);
 800a2a8:	697b      	ldr	r3, [r7, #20]
 800a2aa:	685b      	ldr	r3, [r3, #4]
 800a2ac:	461a      	mov	r2, r3
 800a2ae:	697b      	ldr	r3, [r7, #20]
 800a2b0:	1ad3      	subs	r3, r2, r3
 800a2b2:	b29a      	uxth	r2, r3
 800a2b4:	8a7b      	ldrh	r3, [r7, #18]
 800a2b6:	4413      	add	r3, r2
 800a2b8:	b29b      	uxth	r3, r3
 800a2ba:	4619      	mov	r1, r3
 800a2bc:	6978      	ldr	r0, [r7, #20]
 800a2be:	f7ff f85b 	bl	8009378 <mem_trim>
 800a2c2:	6178      	str	r0, [r7, #20]
    LWIP_ASSERT("mem_trim returned q == NULL", q != NULL);
 800a2c4:	697b      	ldr	r3, [r7, #20]
 800a2c6:	2b00      	cmp	r3, #0
 800a2c8:	d106      	bne.n	800a2d8 <pbuf_realloc+0x110>
 800a2ca:	4b0f      	ldr	r3, [pc, #60]	; (800a308 <pbuf_realloc+0x140>)
 800a2cc:	f240 221d 	movw	r2, #541	; 0x21d
 800a2d0:	4913      	ldr	r1, [pc, #76]	; (800a320 <pbuf_realloc+0x158>)
 800a2d2:	480f      	ldr	r0, [pc, #60]	; (800a310 <pbuf_realloc+0x148>)
 800a2d4:	f00b fc7e 	bl	8015bd4 <printf_>
  }
  /* adjust length fields for new last pbuf */
  q->len = rem_len;
 800a2d8:	697b      	ldr	r3, [r7, #20]
 800a2da:	8a7a      	ldrh	r2, [r7, #18]
 800a2dc:	815a      	strh	r2, [r3, #10]
  q->tot_len = q->len;
 800a2de:	697b      	ldr	r3, [r7, #20]
 800a2e0:	895a      	ldrh	r2, [r3, #10]
 800a2e2:	697b      	ldr	r3, [r7, #20]
 800a2e4:	811a      	strh	r2, [r3, #8]

  /* any remaining pbufs in chain? */
  if (q->next != NULL) {
 800a2e6:	697b      	ldr	r3, [r7, #20]
 800a2e8:	681b      	ldr	r3, [r3, #0]
 800a2ea:	2b00      	cmp	r3, #0
 800a2ec:	d004      	beq.n	800a2f8 <pbuf_realloc+0x130>
    /* free remaining pbufs in chain */
    pbuf_free(q->next);
 800a2ee:	697b      	ldr	r3, [r7, #20]
 800a2f0:	681b      	ldr	r3, [r3, #0]
 800a2f2:	4618      	mov	r0, r3
 800a2f4:	f000 f8dc 	bl	800a4b0 <pbuf_free>
  }
  /* q is last packet in chain */
  q->next = NULL;
 800a2f8:	697b      	ldr	r3, [r7, #20]
 800a2fa:	2200      	movs	r2, #0
 800a2fc:	601a      	str	r2, [r3, #0]
 800a2fe:	e000      	b.n	800a302 <pbuf_realloc+0x13a>
    return;
 800a300:	bf00      	nop

}
 800a302:	3718      	adds	r7, #24
 800a304:	46bd      	mov	sp, r7
 800a306:	bd80      	pop	{r7, pc}
 800a308:	0801a5cc 	.word	0x0801a5cc
 800a30c:	0801a788 	.word	0x0801a788
 800a310:	0801a618 	.word	0x0801a618
 800a314:	0801a7a0 	.word	0x0801a7a0
 800a318:	0801a7bc 	.word	0x0801a7bc
 800a31c:	0801a7d0 	.word	0x0801a7d0
 800a320:	0801a7e8 	.word	0x0801a7e8

0800a324 <pbuf_header_impl>:
 * @return non-zero on failure, zero on success.
 *
 */
static u8_t
pbuf_header_impl(struct pbuf *p, s16_t header_size_increment, u8_t force)
{
 800a324:	b580      	push	{r7, lr}
 800a326:	b084      	sub	sp, #16
 800a328:	af00      	add	r7, sp, #0
 800a32a:	6078      	str	r0, [r7, #4]
 800a32c:	460b      	mov	r3, r1
 800a32e:	807b      	strh	r3, [r7, #2]
 800a330:	4613      	mov	r3, r2
 800a332:	707b      	strb	r3, [r7, #1]
  u16_t type;
  void *payload;
  u16_t increment_magnitude;

  LWIP_ASSERT("p != NULL", p != NULL);
 800a334:	687b      	ldr	r3, [r7, #4]
 800a336:	2b00      	cmp	r3, #0
 800a338:	d106      	bne.n	800a348 <pbuf_header_impl+0x24>
 800a33a:	4b46      	ldr	r3, [pc, #280]	; (800a454 <pbuf_header_impl+0x130>)
 800a33c:	f240 223f 	movw	r2, #575	; 0x23f
 800a340:	4945      	ldr	r1, [pc, #276]	; (800a458 <pbuf_header_impl+0x134>)
 800a342:	4846      	ldr	r0, [pc, #280]	; (800a45c <pbuf_header_impl+0x138>)
 800a344:	f00b fc46 	bl	8015bd4 <printf_>
  if ((header_size_increment == 0) || (p == NULL)) {
 800a348:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800a34c:	2b00      	cmp	r3, #0
 800a34e:	d002      	beq.n	800a356 <pbuf_header_impl+0x32>
 800a350:	687b      	ldr	r3, [r7, #4]
 800a352:	2b00      	cmp	r3, #0
 800a354:	d101      	bne.n	800a35a <pbuf_header_impl+0x36>
    return 0;
 800a356:	2300      	movs	r3, #0
 800a358:	e078      	b.n	800a44c <pbuf_header_impl+0x128>
  }

  if (header_size_increment < 0) {
 800a35a:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800a35e:	2b00      	cmp	r3, #0
 800a360:	da10      	bge.n	800a384 <pbuf_header_impl+0x60>
    increment_magnitude = (u16_t)-header_size_increment;
 800a362:	887b      	ldrh	r3, [r7, #2]
 800a364:	425b      	negs	r3, r3
 800a366:	81fb      	strh	r3, [r7, #14]
    /* Check that we aren't going to move off the end of the pbuf */
    LWIP_ERROR("increment_magnitude <= p->len", (increment_magnitude <= p->len), return 1;);
 800a368:	687b      	ldr	r3, [r7, #4]
 800a36a:	895b      	ldrh	r3, [r3, #10]
 800a36c:	89fa      	ldrh	r2, [r7, #14]
 800a36e:	429a      	cmp	r2, r3
 800a370:	d90a      	bls.n	800a388 <pbuf_header_impl+0x64>
 800a372:	4b38      	ldr	r3, [pc, #224]	; (800a454 <pbuf_header_impl+0x130>)
 800a374:	f240 2247 	movw	r2, #583	; 0x247
 800a378:	4939      	ldr	r1, [pc, #228]	; (800a460 <pbuf_header_impl+0x13c>)
 800a37a:	4838      	ldr	r0, [pc, #224]	; (800a45c <pbuf_header_impl+0x138>)
 800a37c:	f00b fc2a 	bl	8015bd4 <printf_>
 800a380:	2301      	movs	r3, #1
 800a382:	e063      	b.n	800a44c <pbuf_header_impl+0x128>
  } else {
    increment_magnitude = (u16_t)header_size_increment;
 800a384:	887b      	ldrh	r3, [r7, #2]
 800a386:	81fb      	strh	r3, [r7, #14]
    LWIP_ASSERT("p->payload - increment_magnitude >= p + SIZEOF_STRUCT_PBUF",
                (u8_t *)p->payload - increment_magnitude >= (u8_t *)p + SIZEOF_STRUCT_PBUF);
#endif
  }

  type = p->type;
 800a388:	687b      	ldr	r3, [r7, #4]
 800a38a:	7b1b      	ldrb	r3, [r3, #12]
 800a38c:	81bb      	strh	r3, [r7, #12]
  /* remember current payload pointer */
  payload = p->payload;
 800a38e:	687b      	ldr	r3, [r7, #4]
 800a390:	685b      	ldr	r3, [r3, #4]
 800a392:	60bb      	str	r3, [r7, #8]

  /* pbuf types containing payloads? */
  if (type == PBUF_RAM || type == PBUF_POOL) {
 800a394:	89bb      	ldrh	r3, [r7, #12]
 800a396:	2b00      	cmp	r3, #0
 800a398:	d002      	beq.n	800a3a0 <pbuf_header_impl+0x7c>
 800a39a:	89bb      	ldrh	r3, [r7, #12]
 800a39c:	2b03      	cmp	r3, #3
 800a39e:	d112      	bne.n	800a3c6 <pbuf_header_impl+0xa2>
    /* set new payload pointer */
    p->payload = (u8_t *)p->payload - header_size_increment;
 800a3a0:	687b      	ldr	r3, [r7, #4]
 800a3a2:	685a      	ldr	r2, [r3, #4]
 800a3a4:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800a3a8:	425b      	negs	r3, r3
 800a3aa:	441a      	add	r2, r3
 800a3ac:	687b      	ldr	r3, [r7, #4]
 800a3ae:	605a      	str	r2, [r3, #4]
    /* boundary check fails? */
    if ((u8_t *)p->payload < (u8_t *)p + SIZEOF_STRUCT_PBUF) {
 800a3b0:	687b      	ldr	r3, [r7, #4]
 800a3b2:	685a      	ldr	r2, [r3, #4]
 800a3b4:	687b      	ldr	r3, [r7, #4]
 800a3b6:	3310      	adds	r3, #16
 800a3b8:	429a      	cmp	r2, r3
 800a3ba:	d238      	bcs.n	800a42e <pbuf_header_impl+0x10a>
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE,
        ("pbuf_header: failed as %p < %p (not enough space for new header size)\n",
        (void *)p->payload, (void *)((u8_t *)p + SIZEOF_STRUCT_PBUF)));
      /* restore old payload pointer */
      p->payload = payload;
 800a3bc:	687b      	ldr	r3, [r7, #4]
 800a3be:	68ba      	ldr	r2, [r7, #8]
 800a3c0:	605a      	str	r2, [r3, #4]
      /* bail out unsuccessfully */
      return 1;
 800a3c2:	2301      	movs	r3, #1
 800a3c4:	e042      	b.n	800a44c <pbuf_header_impl+0x128>
    }
  /* pbuf types referring to external payloads? */
  } else if (type == PBUF_REF || type == PBUF_ROM) {
 800a3c6:	89bb      	ldrh	r3, [r7, #12]
 800a3c8:	2b02      	cmp	r3, #2
 800a3ca:	d002      	beq.n	800a3d2 <pbuf_header_impl+0xae>
 800a3cc:	89bb      	ldrh	r3, [r7, #12]
 800a3ce:	2b01      	cmp	r3, #1
 800a3d0:	d124      	bne.n	800a41c <pbuf_header_impl+0xf8>
    /* hide a header in the payload? */
    if ((header_size_increment < 0) && (increment_magnitude <= p->len)) {
 800a3d2:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800a3d6:	2b00      	cmp	r3, #0
 800a3d8:	da0d      	bge.n	800a3f6 <pbuf_header_impl+0xd2>
 800a3da:	687b      	ldr	r3, [r7, #4]
 800a3dc:	895b      	ldrh	r3, [r3, #10]
 800a3de:	89fa      	ldrh	r2, [r7, #14]
 800a3e0:	429a      	cmp	r2, r3
 800a3e2:	d808      	bhi.n	800a3f6 <pbuf_header_impl+0xd2>
      /* increase payload pointer */
      p->payload = (u8_t *)p->payload - header_size_increment;
 800a3e4:	687b      	ldr	r3, [r7, #4]
 800a3e6:	685a      	ldr	r2, [r3, #4]
 800a3e8:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800a3ec:	425b      	negs	r3, r3
 800a3ee:	441a      	add	r2, r3
 800a3f0:	687b      	ldr	r3, [r7, #4]
 800a3f2:	605a      	str	r2, [r3, #4]
 800a3f4:	e011      	b.n	800a41a <pbuf_header_impl+0xf6>
    } else if ((header_size_increment > 0) && force) {
 800a3f6:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800a3fa:	2b00      	cmp	r3, #0
 800a3fc:	dd0b      	ble.n	800a416 <pbuf_header_impl+0xf2>
 800a3fe:	787b      	ldrb	r3, [r7, #1]
 800a400:	2b00      	cmp	r3, #0
 800a402:	d008      	beq.n	800a416 <pbuf_header_impl+0xf2>
      p->payload = (u8_t *)p->payload - header_size_increment;
 800a404:	687b      	ldr	r3, [r7, #4]
 800a406:	685a      	ldr	r2, [r3, #4]
 800a408:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800a40c:	425b      	negs	r3, r3
 800a40e:	441a      	add	r2, r3
 800a410:	687b      	ldr	r3, [r7, #4]
 800a412:	605a      	str	r2, [r3, #4]
 800a414:	e001      	b.n	800a41a <pbuf_header_impl+0xf6>
    } else {
      /* cannot expand payload to front (yet!)
       * bail out unsuccessfully */
      return 1;
 800a416:	2301      	movs	r3, #1
 800a418:	e018      	b.n	800a44c <pbuf_header_impl+0x128>
    if ((header_size_increment < 0) && (increment_magnitude <= p->len)) {
 800a41a:	e008      	b.n	800a42e <pbuf_header_impl+0x10a>
    }
  } else {
    /* Unknown type */
    LWIP_ASSERT("bad pbuf type", 0);
 800a41c:	4b0d      	ldr	r3, [pc, #52]	; (800a454 <pbuf_header_impl+0x130>)
 800a41e:	f240 2277 	movw	r2, #631	; 0x277
 800a422:	4910      	ldr	r1, [pc, #64]	; (800a464 <pbuf_header_impl+0x140>)
 800a424:	480d      	ldr	r0, [pc, #52]	; (800a45c <pbuf_header_impl+0x138>)
 800a426:	f00b fbd5 	bl	8015bd4 <printf_>
    return 1;
 800a42a:	2301      	movs	r3, #1
 800a42c:	e00e      	b.n	800a44c <pbuf_header_impl+0x128>
  }
  /* modify pbuf length fields */
  p->len += header_size_increment;
 800a42e:	687b      	ldr	r3, [r7, #4]
 800a430:	895a      	ldrh	r2, [r3, #10]
 800a432:	887b      	ldrh	r3, [r7, #2]
 800a434:	4413      	add	r3, r2
 800a436:	b29a      	uxth	r2, r3
 800a438:	687b      	ldr	r3, [r7, #4]
 800a43a:	815a      	strh	r2, [r3, #10]
  p->tot_len += header_size_increment;
 800a43c:	687b      	ldr	r3, [r7, #4]
 800a43e:	891a      	ldrh	r2, [r3, #8]
 800a440:	887b      	ldrh	r3, [r7, #2]
 800a442:	4413      	add	r3, r2
 800a444:	b29a      	uxth	r2, r3
 800a446:	687b      	ldr	r3, [r7, #4]
 800a448:	811a      	strh	r2, [r3, #8]

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_header: old %p new %p (%"S16_F")\n",
    (void *)payload, (void *)p->payload, header_size_increment));

  return 0;
 800a44a:	2300      	movs	r3, #0
}
 800a44c:	4618      	mov	r0, r3
 800a44e:	3710      	adds	r7, #16
 800a450:	46bd      	mov	sp, r7
 800a452:	bd80      	pop	{r7, pc}
 800a454:	0801a5cc 	.word	0x0801a5cc
 800a458:	0801a804 	.word	0x0801a804
 800a45c:	0801a618 	.word	0x0801a618
 800a460:	0801a810 	.word	0x0801a810
 800a464:	0801a830 	.word	0x0801a830

0800a468 <pbuf_header>:
 * @return non-zero on failure, zero on success.
 *
 */
u8_t
pbuf_header(struct pbuf *p, s16_t header_size_increment)
{
 800a468:	b580      	push	{r7, lr}
 800a46a:	b082      	sub	sp, #8
 800a46c:	af00      	add	r7, sp, #0
 800a46e:	6078      	str	r0, [r7, #4]
 800a470:	460b      	mov	r3, r1
 800a472:	807b      	strh	r3, [r7, #2]
   return pbuf_header_impl(p, header_size_increment, 0);
 800a474:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800a478:	2200      	movs	r2, #0
 800a47a:	4619      	mov	r1, r3
 800a47c:	6878      	ldr	r0, [r7, #4]
 800a47e:	f7ff ff51 	bl	800a324 <pbuf_header_impl>
 800a482:	4603      	mov	r3, r0
}
 800a484:	4618      	mov	r0, r3
 800a486:	3708      	adds	r7, #8
 800a488:	46bd      	mov	sp, r7
 800a48a:	bd80      	pop	{r7, pc}

0800a48c <pbuf_header_force>:
 * Same as pbuf_header but does not check if 'header_size > 0' is allowed.
 * This is used internally only, to allow PBUF_REF for RX.
 */
u8_t
pbuf_header_force(struct pbuf *p, s16_t header_size_increment)
{
 800a48c:	b580      	push	{r7, lr}
 800a48e:	b082      	sub	sp, #8
 800a490:	af00      	add	r7, sp, #0
 800a492:	6078      	str	r0, [r7, #4]
 800a494:	460b      	mov	r3, r1
 800a496:	807b      	strh	r3, [r7, #2]
   return pbuf_header_impl(p, header_size_increment, 1);
 800a498:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800a49c:	2201      	movs	r2, #1
 800a49e:	4619      	mov	r1, r3
 800a4a0:	6878      	ldr	r0, [r7, #4]
 800a4a2:	f7ff ff3f 	bl	800a324 <pbuf_header_impl>
 800a4a6:	4603      	mov	r3, r0
}
 800a4a8:	4618      	mov	r0, r3
 800a4aa:	3708      	adds	r7, #8
 800a4ac:	46bd      	mov	sp, r7
 800a4ae:	bd80      	pop	{r7, pc}

0800a4b0 <pbuf_free>:
 * 1->1->1 becomes .......
 *
 */
u8_t
pbuf_free(struct pbuf *p)
{
 800a4b0:	b580      	push	{r7, lr}
 800a4b2:	b088      	sub	sp, #32
 800a4b4:	af00      	add	r7, sp, #0
 800a4b6:	6078      	str	r0, [r7, #4]
  u16_t type;
  struct pbuf *q;
  u8_t count;

  if (p == NULL) {
 800a4b8:	687b      	ldr	r3, [r7, #4]
 800a4ba:	2b00      	cmp	r3, #0
 800a4bc:	d10b      	bne.n	800a4d6 <pbuf_free+0x26>
    LWIP_ASSERT("p != NULL", p != NULL);
 800a4be:	687b      	ldr	r3, [r7, #4]
 800a4c0:	2b00      	cmp	r3, #0
 800a4c2:	d106      	bne.n	800a4d2 <pbuf_free+0x22>
 800a4c4:	4b41      	ldr	r3, [pc, #260]	; (800a5cc <pbuf_free+0x11c>)
 800a4c6:	f240 22d2 	movw	r2, #722	; 0x2d2
 800a4ca:	4941      	ldr	r1, [pc, #260]	; (800a5d0 <pbuf_free+0x120>)
 800a4cc:	4841      	ldr	r0, [pc, #260]	; (800a5d4 <pbuf_free+0x124>)
 800a4ce:	f00b fb81 	bl	8015bd4 <printf_>
    /* if assertions are disabled, proceed with debug output */
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
      ("pbuf_free(p == NULL) was called.\n"));
    return 0;
 800a4d2:	2300      	movs	r3, #0
 800a4d4:	e076      	b.n	800a5c4 <pbuf_free+0x114>
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free(%p)\n", (void *)p));

  PERF_START;

  LWIP_ASSERT("pbuf_free: sane type",
 800a4d6:	687b      	ldr	r3, [r7, #4]
 800a4d8:	7b1b      	ldrb	r3, [r3, #12]
 800a4da:	2b00      	cmp	r3, #0
 800a4dc:	d012      	beq.n	800a504 <pbuf_free+0x54>
 800a4de:	687b      	ldr	r3, [r7, #4]
 800a4e0:	7b1b      	ldrb	r3, [r3, #12]
 800a4e2:	2b01      	cmp	r3, #1
 800a4e4:	d00e      	beq.n	800a504 <pbuf_free+0x54>
 800a4e6:	687b      	ldr	r3, [r7, #4]
 800a4e8:	7b1b      	ldrb	r3, [r3, #12]
 800a4ea:	2b02      	cmp	r3, #2
 800a4ec:	d00a      	beq.n	800a504 <pbuf_free+0x54>
 800a4ee:	687b      	ldr	r3, [r7, #4]
 800a4f0:	7b1b      	ldrb	r3, [r3, #12]
 800a4f2:	2b03      	cmp	r3, #3
 800a4f4:	d006      	beq.n	800a504 <pbuf_free+0x54>
 800a4f6:	4b35      	ldr	r3, [pc, #212]	; (800a5cc <pbuf_free+0x11c>)
 800a4f8:	f240 22de 	movw	r2, #734	; 0x2de
 800a4fc:	4936      	ldr	r1, [pc, #216]	; (800a5d8 <pbuf_free+0x128>)
 800a4fe:	4835      	ldr	r0, [pc, #212]	; (800a5d4 <pbuf_free+0x124>)
 800a500:	f00b fb68 	bl	8015bd4 <printf_>
    p->type == PBUF_RAM || p->type == PBUF_ROM ||
    p->type == PBUF_REF || p->type == PBUF_POOL);

  count = 0;
 800a504:	2300      	movs	r3, #0
 800a506:	77fb      	strb	r3, [r7, #31]
  /* de-allocate all consecutive pbufs from the head of the chain that
   * obtain a zero reference count after decrementing*/
  while (p != NULL) {
 800a508:	e058      	b.n	800a5bc <pbuf_free+0x10c>
    u16_t ref;
    SYS_ARCH_DECL_PROTECT(old_level);
    /* Since decrementing ref cannot be guaranteed to be a single machine operation
     * we must protect it. We put the new ref into a local variable to prevent
     * further protection. */
    SYS_ARCH_PROTECT(old_level);
 800a50a:	f008 fdc5 	bl	8013098 <sys_arch_protect>
 800a50e:	61b8      	str	r0, [r7, #24]
    /* all pbufs in a chain are referenced at least once */
    LWIP_ASSERT("pbuf_free: p->ref > 0", p->ref > 0);
 800a510:	687b      	ldr	r3, [r7, #4]
 800a512:	89db      	ldrh	r3, [r3, #14]
 800a514:	2b00      	cmp	r3, #0
 800a516:	d106      	bne.n	800a526 <pbuf_free+0x76>
 800a518:	4b2c      	ldr	r3, [pc, #176]	; (800a5cc <pbuf_free+0x11c>)
 800a51a:	f240 22eb 	movw	r2, #747	; 0x2eb
 800a51e:	492f      	ldr	r1, [pc, #188]	; (800a5dc <pbuf_free+0x12c>)
 800a520:	482c      	ldr	r0, [pc, #176]	; (800a5d4 <pbuf_free+0x124>)
 800a522:	f00b fb57 	bl	8015bd4 <printf_>
    /* decrease reference count (number of pointers to pbuf) */
    ref = --(p->ref);
 800a526:	687b      	ldr	r3, [r7, #4]
 800a528:	89db      	ldrh	r3, [r3, #14]
 800a52a:	3b01      	subs	r3, #1
 800a52c:	b29a      	uxth	r2, r3
 800a52e:	687b      	ldr	r3, [r7, #4]
 800a530:	81da      	strh	r2, [r3, #14]
 800a532:	687b      	ldr	r3, [r7, #4]
 800a534:	89db      	ldrh	r3, [r3, #14]
 800a536:	82fb      	strh	r3, [r7, #22]
    SYS_ARCH_UNPROTECT(old_level);
 800a538:	69b8      	ldr	r0, [r7, #24]
 800a53a:	f008 fdbb 	bl	80130b4 <sys_arch_unprotect>
    /* this pbuf is no longer referenced to? */
    if (ref == 0) {
 800a53e:	8afb      	ldrh	r3, [r7, #22]
 800a540:	2b00      	cmp	r3, #0
 800a542:	d139      	bne.n	800a5b8 <pbuf_free+0x108>
      /* remember next pbuf in chain for next iteration */
      q = p->next;
 800a544:	687b      	ldr	r3, [r7, #4]
 800a546:	681b      	ldr	r3, [r3, #0]
 800a548:	613b      	str	r3, [r7, #16]
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free: deallocating %p\n", (void *)p));
      type = p->type;
 800a54a:	687b      	ldr	r3, [r7, #4]
 800a54c:	7b1b      	ldrb	r3, [r3, #12]
 800a54e:	81fb      	strh	r3, [r7, #14]
#if LWIP_SUPPORT_CUSTOM_PBUF
      /* is this a custom pbuf? */
      if ((p->flags & PBUF_FLAG_IS_CUSTOM) != 0) {
 800a550:	687b      	ldr	r3, [r7, #4]
 800a552:	7b5b      	ldrb	r3, [r3, #13]
 800a554:	f003 0302 	and.w	r3, r3, #2
 800a558:	2b00      	cmp	r3, #0
 800a55a:	d011      	beq.n	800a580 <pbuf_free+0xd0>
        struct pbuf_custom *pc = (struct pbuf_custom*)p;
 800a55c:	687b      	ldr	r3, [r7, #4]
 800a55e:	60bb      	str	r3, [r7, #8]
        LWIP_ASSERT("pc->custom_free_function != NULL", pc->custom_free_function != NULL);
 800a560:	68bb      	ldr	r3, [r7, #8]
 800a562:	691b      	ldr	r3, [r3, #16]
 800a564:	2b00      	cmp	r3, #0
 800a566:	d106      	bne.n	800a576 <pbuf_free+0xc6>
 800a568:	4b18      	ldr	r3, [pc, #96]	; (800a5cc <pbuf_free+0x11c>)
 800a56a:	f240 22f9 	movw	r2, #761	; 0x2f9
 800a56e:	491c      	ldr	r1, [pc, #112]	; (800a5e0 <pbuf_free+0x130>)
 800a570:	4818      	ldr	r0, [pc, #96]	; (800a5d4 <pbuf_free+0x124>)
 800a572:	f00b fb2f 	bl	8015bd4 <printf_>
        pc->custom_free_function(p);
 800a576:	68bb      	ldr	r3, [r7, #8]
 800a578:	691b      	ldr	r3, [r3, #16]
 800a57a:	6878      	ldr	r0, [r7, #4]
 800a57c:	4798      	blx	r3
 800a57e:	e015      	b.n	800a5ac <pbuf_free+0xfc>
      } else
#endif /* LWIP_SUPPORT_CUSTOM_PBUF */
      {
        /* is this a pbuf from the pool? */
        if (type == PBUF_POOL) {
 800a580:	89fb      	ldrh	r3, [r7, #14]
 800a582:	2b03      	cmp	r3, #3
 800a584:	d104      	bne.n	800a590 <pbuf_free+0xe0>
          memp_free(MEMP_PBUF_POOL, p);
 800a586:	6879      	ldr	r1, [r7, #4]
 800a588:	200c      	movs	r0, #12
 800a58a:	f7ff f9e7 	bl	800995c <memp_free>
 800a58e:	e00d      	b.n	800a5ac <pbuf_free+0xfc>
        /* is this a ROM or RAM referencing pbuf? */
        } else if (type == PBUF_ROM || type == PBUF_REF) {
 800a590:	89fb      	ldrh	r3, [r7, #14]
 800a592:	2b01      	cmp	r3, #1
 800a594:	d002      	beq.n	800a59c <pbuf_free+0xec>
 800a596:	89fb      	ldrh	r3, [r7, #14]
 800a598:	2b02      	cmp	r3, #2
 800a59a:	d104      	bne.n	800a5a6 <pbuf_free+0xf6>
          memp_free(MEMP_PBUF, p);
 800a59c:	6879      	ldr	r1, [r7, #4]
 800a59e:	200b      	movs	r0, #11
 800a5a0:	f7ff f9dc 	bl	800995c <memp_free>
 800a5a4:	e002      	b.n	800a5ac <pbuf_free+0xfc>
        /* type == PBUF_RAM */
        } else {
          mem_free(p);
 800a5a6:	6878      	ldr	r0, [r7, #4]
 800a5a8:	f7fe fe78 	bl	800929c <mem_free>
        }
      }
      count++;
 800a5ac:	7ffb      	ldrb	r3, [r7, #31]
 800a5ae:	3301      	adds	r3, #1
 800a5b0:	77fb      	strb	r3, [r7, #31]
      /* proceed to next pbuf */
      p = q;
 800a5b2:	693b      	ldr	r3, [r7, #16]
 800a5b4:	607b      	str	r3, [r7, #4]
 800a5b6:	e001      	b.n	800a5bc <pbuf_free+0x10c>
    /* p->ref > 0, this pbuf is still referenced to */
    /* (and so the remaining pbufs in chain as well) */
    } else {
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free: %p has ref %"U16_F", ending here.\n", (void *)p, ref));
      /* stop walking through the chain */
      p = NULL;
 800a5b8:	2300      	movs	r3, #0
 800a5ba:	607b      	str	r3, [r7, #4]
  while (p != NULL) {
 800a5bc:	687b      	ldr	r3, [r7, #4]
 800a5be:	2b00      	cmp	r3, #0
 800a5c0:	d1a3      	bne.n	800a50a <pbuf_free+0x5a>
    }
  }
  PERF_STOP("pbuf_free");
  /* return number of de-allocated pbufs */
  return count;
 800a5c2:	7ffb      	ldrb	r3, [r7, #31]
}
 800a5c4:	4618      	mov	r0, r3
 800a5c6:	3720      	adds	r7, #32
 800a5c8:	46bd      	mov	sp, r7
 800a5ca:	bd80      	pop	{r7, pc}
 800a5cc:	0801a5cc 	.word	0x0801a5cc
 800a5d0:	0801a804 	.word	0x0801a804
 800a5d4:	0801a618 	.word	0x0801a618
 800a5d8:	0801a840 	.word	0x0801a840
 800a5dc:	0801a858 	.word	0x0801a858
 800a5e0:	0801a870 	.word	0x0801a870

0800a5e4 <pbuf_clen>:
 * @param p first pbuf of chain
 * @return the number of pbufs in a chain
 */
u16_t
pbuf_clen(const struct pbuf *p)
{
 800a5e4:	b480      	push	{r7}
 800a5e6:	b085      	sub	sp, #20
 800a5e8:	af00      	add	r7, sp, #0
 800a5ea:	6078      	str	r0, [r7, #4]
  u16_t len;

  len = 0;
 800a5ec:	2300      	movs	r3, #0
 800a5ee:	81fb      	strh	r3, [r7, #14]
  while (p != NULL) {
 800a5f0:	e005      	b.n	800a5fe <pbuf_clen+0x1a>
    ++len;
 800a5f2:	89fb      	ldrh	r3, [r7, #14]
 800a5f4:	3301      	adds	r3, #1
 800a5f6:	81fb      	strh	r3, [r7, #14]
    p = p->next;
 800a5f8:	687b      	ldr	r3, [r7, #4]
 800a5fa:	681b      	ldr	r3, [r3, #0]
 800a5fc:	607b      	str	r3, [r7, #4]
  while (p != NULL) {
 800a5fe:	687b      	ldr	r3, [r7, #4]
 800a600:	2b00      	cmp	r3, #0
 800a602:	d1f6      	bne.n	800a5f2 <pbuf_clen+0xe>
  }
  return len;
 800a604:	89fb      	ldrh	r3, [r7, #14]
}
 800a606:	4618      	mov	r0, r3
 800a608:	3714      	adds	r7, #20
 800a60a:	46bd      	mov	sp, r7
 800a60c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a610:	4770      	bx	lr
	...

0800a614 <pbuf_ref>:
 * @param p pbuf to increase reference counter of
 *
 */
void
pbuf_ref(struct pbuf *p)
{
 800a614:	b580      	push	{r7, lr}
 800a616:	b084      	sub	sp, #16
 800a618:	af00      	add	r7, sp, #0
 800a61a:	6078      	str	r0, [r7, #4]
  /* pbuf given? */
  if (p != NULL) {
 800a61c:	687b      	ldr	r3, [r7, #4]
 800a61e:	2b00      	cmp	r3, #0
 800a620:	d016      	beq.n	800a650 <pbuf_ref+0x3c>
    SYS_ARCH_INC(p->ref, 1);
 800a622:	f008 fd39 	bl	8013098 <sys_arch_protect>
 800a626:	60f8      	str	r0, [r7, #12]
 800a628:	687b      	ldr	r3, [r7, #4]
 800a62a:	89db      	ldrh	r3, [r3, #14]
 800a62c:	3301      	adds	r3, #1
 800a62e:	b29a      	uxth	r2, r3
 800a630:	687b      	ldr	r3, [r7, #4]
 800a632:	81da      	strh	r2, [r3, #14]
 800a634:	68f8      	ldr	r0, [r7, #12]
 800a636:	f008 fd3d 	bl	80130b4 <sys_arch_unprotect>
    LWIP_ASSERT("pbuf ref overflow", p->ref > 0);
 800a63a:	687b      	ldr	r3, [r7, #4]
 800a63c:	89db      	ldrh	r3, [r3, #14]
 800a63e:	2b00      	cmp	r3, #0
 800a640:	d106      	bne.n	800a650 <pbuf_ref+0x3c>
 800a642:	4b05      	ldr	r3, [pc, #20]	; (800a658 <pbuf_ref+0x44>)
 800a644:	f240 3239 	movw	r2, #825	; 0x339
 800a648:	4904      	ldr	r1, [pc, #16]	; (800a65c <pbuf_ref+0x48>)
 800a64a:	4805      	ldr	r0, [pc, #20]	; (800a660 <pbuf_ref+0x4c>)
 800a64c:	f00b fac2 	bl	8015bd4 <printf_>
  }
}
 800a650:	bf00      	nop
 800a652:	3710      	adds	r7, #16
 800a654:	46bd      	mov	sp, r7
 800a656:	bd80      	pop	{r7, pc}
 800a658:	0801a5cc 	.word	0x0801a5cc
 800a65c:	0801a894 	.word	0x0801a894
 800a660:	0801a618 	.word	0x0801a618

0800a664 <pbuf_cat>:
 *
 * @see pbuf_chain()
 */
void
pbuf_cat(struct pbuf *h, struct pbuf *t)
{
 800a664:	b580      	push	{r7, lr}
 800a666:	b084      	sub	sp, #16
 800a668:	af00      	add	r7, sp, #0
 800a66a:	6078      	str	r0, [r7, #4]
 800a66c:	6039      	str	r1, [r7, #0]
  struct pbuf *p;

  LWIP_ERROR("(h != NULL) && (t != NULL) (programmer violates API)",
 800a66e:	687b      	ldr	r3, [r7, #4]
 800a670:	2b00      	cmp	r3, #0
 800a672:	d002      	beq.n	800a67a <pbuf_cat+0x16>
 800a674:	683b      	ldr	r3, [r7, #0]
 800a676:	2b00      	cmp	r3, #0
 800a678:	d107      	bne.n	800a68a <pbuf_cat+0x26>
 800a67a:	4b20      	ldr	r3, [pc, #128]	; (800a6fc <pbuf_cat+0x98>)
 800a67c:	f240 324d 	movw	r2, #845	; 0x34d
 800a680:	491f      	ldr	r1, [pc, #124]	; (800a700 <pbuf_cat+0x9c>)
 800a682:	4820      	ldr	r0, [pc, #128]	; (800a704 <pbuf_cat+0xa0>)
 800a684:	f00b faa6 	bl	8015bd4 <printf_>
 800a688:	e034      	b.n	800a6f4 <pbuf_cat+0x90>
             ((h != NULL) && (t != NULL)), return;);

  /* proceed to last pbuf of chain */
  for (p = h; p->next != NULL; p = p->next) {
 800a68a:	687b      	ldr	r3, [r7, #4]
 800a68c:	60fb      	str	r3, [r7, #12]
 800a68e:	e00a      	b.n	800a6a6 <pbuf_cat+0x42>
    /* add total length of second chain to all totals of first chain */
    p->tot_len += t->tot_len;
 800a690:	68fb      	ldr	r3, [r7, #12]
 800a692:	891a      	ldrh	r2, [r3, #8]
 800a694:	683b      	ldr	r3, [r7, #0]
 800a696:	891b      	ldrh	r3, [r3, #8]
 800a698:	4413      	add	r3, r2
 800a69a:	b29a      	uxth	r2, r3
 800a69c:	68fb      	ldr	r3, [r7, #12]
 800a69e:	811a      	strh	r2, [r3, #8]
  for (p = h; p->next != NULL; p = p->next) {
 800a6a0:	68fb      	ldr	r3, [r7, #12]
 800a6a2:	681b      	ldr	r3, [r3, #0]
 800a6a4:	60fb      	str	r3, [r7, #12]
 800a6a6:	68fb      	ldr	r3, [r7, #12]
 800a6a8:	681b      	ldr	r3, [r3, #0]
 800a6aa:	2b00      	cmp	r3, #0
 800a6ac:	d1f0      	bne.n	800a690 <pbuf_cat+0x2c>
  }
  /* { p is last pbuf of first h chain, p->next == NULL } */
  LWIP_ASSERT("p->tot_len == p->len (of last pbuf in chain)", p->tot_len == p->len);
 800a6ae:	68fb      	ldr	r3, [r7, #12]
 800a6b0:	891a      	ldrh	r2, [r3, #8]
 800a6b2:	68fb      	ldr	r3, [r7, #12]
 800a6b4:	895b      	ldrh	r3, [r3, #10]
 800a6b6:	429a      	cmp	r2, r3
 800a6b8:	d006      	beq.n	800a6c8 <pbuf_cat+0x64>
 800a6ba:	4b10      	ldr	r3, [pc, #64]	; (800a6fc <pbuf_cat+0x98>)
 800a6bc:	f240 3255 	movw	r2, #853	; 0x355
 800a6c0:	4911      	ldr	r1, [pc, #68]	; (800a708 <pbuf_cat+0xa4>)
 800a6c2:	4810      	ldr	r0, [pc, #64]	; (800a704 <pbuf_cat+0xa0>)
 800a6c4:	f00b fa86 	bl	8015bd4 <printf_>
  LWIP_ASSERT("p->next == NULL", p->next == NULL);
 800a6c8:	68fb      	ldr	r3, [r7, #12]
 800a6ca:	681b      	ldr	r3, [r3, #0]
 800a6cc:	2b00      	cmp	r3, #0
 800a6ce:	d006      	beq.n	800a6de <pbuf_cat+0x7a>
 800a6d0:	4b0a      	ldr	r3, [pc, #40]	; (800a6fc <pbuf_cat+0x98>)
 800a6d2:	f240 3256 	movw	r2, #854	; 0x356
 800a6d6:	490d      	ldr	r1, [pc, #52]	; (800a70c <pbuf_cat+0xa8>)
 800a6d8:	480a      	ldr	r0, [pc, #40]	; (800a704 <pbuf_cat+0xa0>)
 800a6da:	f00b fa7b 	bl	8015bd4 <printf_>
  /* add total length of second chain to last pbuf total of first chain */
  p->tot_len += t->tot_len;
 800a6de:	68fb      	ldr	r3, [r7, #12]
 800a6e0:	891a      	ldrh	r2, [r3, #8]
 800a6e2:	683b      	ldr	r3, [r7, #0]
 800a6e4:	891b      	ldrh	r3, [r3, #8]
 800a6e6:	4413      	add	r3, r2
 800a6e8:	b29a      	uxth	r2, r3
 800a6ea:	68fb      	ldr	r3, [r7, #12]
 800a6ec:	811a      	strh	r2, [r3, #8]
  /* chain last pbuf of head (p) with first of tail (t) */
  p->next = t;
 800a6ee:	68fb      	ldr	r3, [r7, #12]
 800a6f0:	683a      	ldr	r2, [r7, #0]
 800a6f2:	601a      	str	r2, [r3, #0]
  /* p->next now references t, but the caller will drop its reference to t,
   * so netto there is no change to the reference count of t.
   */
}
 800a6f4:	3710      	adds	r7, #16
 800a6f6:	46bd      	mov	sp, r7
 800a6f8:	bd80      	pop	{r7, pc}
 800a6fa:	bf00      	nop
 800a6fc:	0801a5cc 	.word	0x0801a5cc
 800a700:	0801a8a8 	.word	0x0801a8a8
 800a704:	0801a618 	.word	0x0801a618
 800a708:	0801a8e0 	.word	0x0801a8e0
 800a70c:	0801a910 	.word	0x0801a910

0800a710 <pbuf_chain>:
 * The ->ref field of the first pbuf of the tail chain is adjusted.
 *
 */
void
pbuf_chain(struct pbuf *h, struct pbuf *t)
{
 800a710:	b580      	push	{r7, lr}
 800a712:	b082      	sub	sp, #8
 800a714:	af00      	add	r7, sp, #0
 800a716:	6078      	str	r0, [r7, #4]
 800a718:	6039      	str	r1, [r7, #0]
  pbuf_cat(h, t);
 800a71a:	6839      	ldr	r1, [r7, #0]
 800a71c:	6878      	ldr	r0, [r7, #4]
 800a71e:	f7ff ffa1 	bl	800a664 <pbuf_cat>
  /* t is now referenced by h */
  pbuf_ref(t);
 800a722:	6838      	ldr	r0, [r7, #0]
 800a724:	f7ff ff76 	bl	800a614 <pbuf_ref>
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_chain: %p references %p\n", (void *)h, (void *)t));
}
 800a728:	bf00      	nop
 800a72a:	3708      	adds	r7, #8
 800a72c:	46bd      	mov	sp, r7
 800a72e:	bd80      	pop	{r7, pc}

0800a730 <pbuf_copy>:
 *         ERR_ARG if one of the pbufs is NULL or p_to is not big
 *                 enough to hold p_from
 */
err_t
pbuf_copy(struct pbuf *p_to, const struct pbuf *p_from)
{
 800a730:	b580      	push	{r7, lr}
 800a732:	b084      	sub	sp, #16
 800a734:	af00      	add	r7, sp, #0
 800a736:	6078      	str	r0, [r7, #4]
 800a738:	6039      	str	r1, [r7, #0]
  u16_t offset_to=0, offset_from=0, len;
 800a73a:	2300      	movs	r3, #0
 800a73c:	81fb      	strh	r3, [r7, #14]
 800a73e:	2300      	movs	r3, #0
 800a740:	81bb      	strh	r3, [r7, #12]

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy(%p, %p)\n",
    (const void*)p_to, (const void*)p_from));

  /* is the target big enough to hold the source? */
  LWIP_ERROR("pbuf_copy: target not big enough to hold source", ((p_to != NULL) &&
 800a742:	687b      	ldr	r3, [r7, #4]
 800a744:	2b00      	cmp	r3, #0
 800a746:	d008      	beq.n	800a75a <pbuf_copy+0x2a>
 800a748:	683b      	ldr	r3, [r7, #0]
 800a74a:	2b00      	cmp	r3, #0
 800a74c:	d005      	beq.n	800a75a <pbuf_copy+0x2a>
 800a74e:	687b      	ldr	r3, [r7, #4]
 800a750:	891a      	ldrh	r2, [r3, #8]
 800a752:	683b      	ldr	r3, [r7, #0]
 800a754:	891b      	ldrh	r3, [r3, #8]
 800a756:	429a      	cmp	r2, r3
 800a758:	d209      	bcs.n	800a76e <pbuf_copy+0x3e>
 800a75a:	4b54      	ldr	r3, [pc, #336]	; (800a8ac <pbuf_copy+0x17c>)
 800a75c:	f240 32bd 	movw	r2, #957	; 0x3bd
 800a760:	4953      	ldr	r1, [pc, #332]	; (800a8b0 <pbuf_copy+0x180>)
 800a762:	4854      	ldr	r0, [pc, #336]	; (800a8b4 <pbuf_copy+0x184>)
 800a764:	f00b fa36 	bl	8015bd4 <printf_>
 800a768:	f06f 030f 	mvn.w	r3, #15
 800a76c:	e099      	b.n	800a8a2 <pbuf_copy+0x172>

  /* iterate through pbuf chain */
  do
  {
    /* copy one part of the original chain */
    if ((p_to->len - offset_to) >= (p_from->len - offset_from)) {
 800a76e:	687b      	ldr	r3, [r7, #4]
 800a770:	895b      	ldrh	r3, [r3, #10]
 800a772:	461a      	mov	r2, r3
 800a774:	89fb      	ldrh	r3, [r7, #14]
 800a776:	1ad2      	subs	r2, r2, r3
 800a778:	683b      	ldr	r3, [r7, #0]
 800a77a:	895b      	ldrh	r3, [r3, #10]
 800a77c:	4619      	mov	r1, r3
 800a77e:	89bb      	ldrh	r3, [r7, #12]
 800a780:	1acb      	subs	r3, r1, r3
 800a782:	429a      	cmp	r2, r3
 800a784:	db05      	blt.n	800a792 <pbuf_copy+0x62>
      /* complete current p_from fits into current p_to */
      len = p_from->len - offset_from;
 800a786:	683b      	ldr	r3, [r7, #0]
 800a788:	895a      	ldrh	r2, [r3, #10]
 800a78a:	89bb      	ldrh	r3, [r7, #12]
 800a78c:	1ad3      	subs	r3, r2, r3
 800a78e:	817b      	strh	r3, [r7, #10]
 800a790:	e004      	b.n	800a79c <pbuf_copy+0x6c>
    } else {
      /* current p_from does not fit into current p_to */
      len = p_to->len - offset_to;
 800a792:	687b      	ldr	r3, [r7, #4]
 800a794:	895a      	ldrh	r2, [r3, #10]
 800a796:	89fb      	ldrh	r3, [r7, #14]
 800a798:	1ad3      	subs	r3, r2, r3
 800a79a:	817b      	strh	r3, [r7, #10]
    }
    MEMCPY((u8_t*)p_to->payload + offset_to, (u8_t*)p_from->payload + offset_from, len);
 800a79c:	687b      	ldr	r3, [r7, #4]
 800a79e:	685a      	ldr	r2, [r3, #4]
 800a7a0:	89fb      	ldrh	r3, [r7, #14]
 800a7a2:	18d0      	adds	r0, r2, r3
 800a7a4:	683b      	ldr	r3, [r7, #0]
 800a7a6:	685a      	ldr	r2, [r3, #4]
 800a7a8:	89bb      	ldrh	r3, [r7, #12]
 800a7aa:	4413      	add	r3, r2
 800a7ac:	897a      	ldrh	r2, [r7, #10]
 800a7ae:	4619      	mov	r1, r3
 800a7b0:	f00b fa81 	bl	8015cb6 <memcpy>
    offset_to += len;
 800a7b4:	89fa      	ldrh	r2, [r7, #14]
 800a7b6:	897b      	ldrh	r3, [r7, #10]
 800a7b8:	4413      	add	r3, r2
 800a7ba:	81fb      	strh	r3, [r7, #14]
    offset_from += len;
 800a7bc:	89ba      	ldrh	r2, [r7, #12]
 800a7be:	897b      	ldrh	r3, [r7, #10]
 800a7c0:	4413      	add	r3, r2
 800a7c2:	81bb      	strh	r3, [r7, #12]
    LWIP_ASSERT("offset_to <= p_to->len", offset_to <= p_to->len);
 800a7c4:	687b      	ldr	r3, [r7, #4]
 800a7c6:	895b      	ldrh	r3, [r3, #10]
 800a7c8:	89fa      	ldrh	r2, [r7, #14]
 800a7ca:	429a      	cmp	r2, r3
 800a7cc:	d906      	bls.n	800a7dc <pbuf_copy+0xac>
 800a7ce:	4b37      	ldr	r3, [pc, #220]	; (800a8ac <pbuf_copy+0x17c>)
 800a7d0:	f240 32cd 	movw	r2, #973	; 0x3cd
 800a7d4:	4938      	ldr	r1, [pc, #224]	; (800a8b8 <pbuf_copy+0x188>)
 800a7d6:	4837      	ldr	r0, [pc, #220]	; (800a8b4 <pbuf_copy+0x184>)
 800a7d8:	f00b f9fc 	bl	8015bd4 <printf_>
    LWIP_ASSERT("offset_from <= p_from->len", offset_from <= p_from->len);
 800a7dc:	683b      	ldr	r3, [r7, #0]
 800a7de:	895b      	ldrh	r3, [r3, #10]
 800a7e0:	89ba      	ldrh	r2, [r7, #12]
 800a7e2:	429a      	cmp	r2, r3
 800a7e4:	d906      	bls.n	800a7f4 <pbuf_copy+0xc4>
 800a7e6:	4b31      	ldr	r3, [pc, #196]	; (800a8ac <pbuf_copy+0x17c>)
 800a7e8:	f240 32ce 	movw	r2, #974	; 0x3ce
 800a7ec:	4933      	ldr	r1, [pc, #204]	; (800a8bc <pbuf_copy+0x18c>)
 800a7ee:	4831      	ldr	r0, [pc, #196]	; (800a8b4 <pbuf_copy+0x184>)
 800a7f0:	f00b f9f0 	bl	8015bd4 <printf_>
    if (offset_from >= p_from->len) {
 800a7f4:	683b      	ldr	r3, [r7, #0]
 800a7f6:	895b      	ldrh	r3, [r3, #10]
 800a7f8:	89ba      	ldrh	r2, [r7, #12]
 800a7fa:	429a      	cmp	r2, r3
 800a7fc:	d304      	bcc.n	800a808 <pbuf_copy+0xd8>
      /* on to next p_from (if any) */
      offset_from = 0;
 800a7fe:	2300      	movs	r3, #0
 800a800:	81bb      	strh	r3, [r7, #12]
      p_from = p_from->next;
 800a802:	683b      	ldr	r3, [r7, #0]
 800a804:	681b      	ldr	r3, [r3, #0]
 800a806:	603b      	str	r3, [r7, #0]
    }
    if (offset_to == p_to->len) {
 800a808:	687b      	ldr	r3, [r7, #4]
 800a80a:	895b      	ldrh	r3, [r3, #10]
 800a80c:	89fa      	ldrh	r2, [r7, #14]
 800a80e:	429a      	cmp	r2, r3
 800a810:	d114      	bne.n	800a83c <pbuf_copy+0x10c>
      /* on to next p_to (if any) */
      offset_to = 0;
 800a812:	2300      	movs	r3, #0
 800a814:	81fb      	strh	r3, [r7, #14]
      p_to = p_to->next;
 800a816:	687b      	ldr	r3, [r7, #4]
 800a818:	681b      	ldr	r3, [r3, #0]
 800a81a:	607b      	str	r3, [r7, #4]
      LWIP_ERROR("p_to != NULL", (p_to != NULL) || (p_from == NULL) , return ERR_ARG;);
 800a81c:	687b      	ldr	r3, [r7, #4]
 800a81e:	2b00      	cmp	r3, #0
 800a820:	d10c      	bne.n	800a83c <pbuf_copy+0x10c>
 800a822:	683b      	ldr	r3, [r7, #0]
 800a824:	2b00      	cmp	r3, #0
 800a826:	d009      	beq.n	800a83c <pbuf_copy+0x10c>
 800a828:	4b20      	ldr	r3, [pc, #128]	; (800a8ac <pbuf_copy+0x17c>)
 800a82a:	f44f 7276 	mov.w	r2, #984	; 0x3d8
 800a82e:	4924      	ldr	r1, [pc, #144]	; (800a8c0 <pbuf_copy+0x190>)
 800a830:	4820      	ldr	r0, [pc, #128]	; (800a8b4 <pbuf_copy+0x184>)
 800a832:	f00b f9cf 	bl	8015bd4 <printf_>
 800a836:	f06f 030f 	mvn.w	r3, #15
 800a83a:	e032      	b.n	800a8a2 <pbuf_copy+0x172>
    }

    if ((p_from != NULL) && (p_from->len == p_from->tot_len)) {
 800a83c:	683b      	ldr	r3, [r7, #0]
 800a83e:	2b00      	cmp	r3, #0
 800a840:	d013      	beq.n	800a86a <pbuf_copy+0x13a>
 800a842:	683b      	ldr	r3, [r7, #0]
 800a844:	895a      	ldrh	r2, [r3, #10]
 800a846:	683b      	ldr	r3, [r7, #0]
 800a848:	891b      	ldrh	r3, [r3, #8]
 800a84a:	429a      	cmp	r2, r3
 800a84c:	d10d      	bne.n	800a86a <pbuf_copy+0x13a>
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 800a84e:	683b      	ldr	r3, [r7, #0]
 800a850:	681b      	ldr	r3, [r3, #0]
 800a852:	2b00      	cmp	r3, #0
 800a854:	d009      	beq.n	800a86a <pbuf_copy+0x13a>
 800a856:	4b15      	ldr	r3, [pc, #84]	; (800a8ac <pbuf_copy+0x17c>)
 800a858:	f240 32de 	movw	r2, #990	; 0x3de
 800a85c:	4919      	ldr	r1, [pc, #100]	; (800a8c4 <pbuf_copy+0x194>)
 800a85e:	4815      	ldr	r0, [pc, #84]	; (800a8b4 <pbuf_copy+0x184>)
 800a860:	f00b f9b8 	bl	8015bd4 <printf_>
 800a864:	f06f 0305 	mvn.w	r3, #5
 800a868:	e01b      	b.n	800a8a2 <pbuf_copy+0x172>
                 (p_from->next == NULL), return ERR_VAL;);
    }
    if ((p_to != NULL) && (p_to->len == p_to->tot_len)) {
 800a86a:	687b      	ldr	r3, [r7, #4]
 800a86c:	2b00      	cmp	r3, #0
 800a86e:	d013      	beq.n	800a898 <pbuf_copy+0x168>
 800a870:	687b      	ldr	r3, [r7, #4]
 800a872:	895a      	ldrh	r2, [r3, #10]
 800a874:	687b      	ldr	r3, [r7, #4]
 800a876:	891b      	ldrh	r3, [r3, #8]
 800a878:	429a      	cmp	r2, r3
 800a87a:	d10d      	bne.n	800a898 <pbuf_copy+0x168>
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 800a87c:	687b      	ldr	r3, [r7, #4]
 800a87e:	681b      	ldr	r3, [r3, #0]
 800a880:	2b00      	cmp	r3, #0
 800a882:	d009      	beq.n	800a898 <pbuf_copy+0x168>
 800a884:	4b09      	ldr	r3, [pc, #36]	; (800a8ac <pbuf_copy+0x17c>)
 800a886:	f240 32e3 	movw	r2, #995	; 0x3e3
 800a88a:	490e      	ldr	r1, [pc, #56]	; (800a8c4 <pbuf_copy+0x194>)
 800a88c:	4809      	ldr	r0, [pc, #36]	; (800a8b4 <pbuf_copy+0x184>)
 800a88e:	f00b f9a1 	bl	8015bd4 <printf_>
 800a892:	f06f 0305 	mvn.w	r3, #5
 800a896:	e004      	b.n	800a8a2 <pbuf_copy+0x172>
                  (p_to->next == NULL), return ERR_VAL;);
    }
  } while (p_from);
 800a898:	683b      	ldr	r3, [r7, #0]
 800a89a:	2b00      	cmp	r3, #0
 800a89c:	f47f af67 	bne.w	800a76e <pbuf_copy+0x3e>
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy: end of chain reached.\n"));
  return ERR_OK;
 800a8a0:	2300      	movs	r3, #0
}
 800a8a2:	4618      	mov	r0, r3
 800a8a4:	3710      	adds	r7, #16
 800a8a6:	46bd      	mov	sp, r7
 800a8a8:	bd80      	pop	{r7, pc}
 800a8aa:	bf00      	nop
 800a8ac:	0801a5cc 	.word	0x0801a5cc
 800a8b0:	0801a95c 	.word	0x0801a95c
 800a8b4:	0801a618 	.word	0x0801a618
 800a8b8:	0801a98c 	.word	0x0801a98c
 800a8bc:	0801a9a4 	.word	0x0801a9a4
 800a8c0:	0801a9c0 	.word	0x0801a9c0
 800a8c4:	0801a9d0 	.word	0x0801a9d0

0800a8c8 <pbuf_copy_partial>:
 * @param offset offset into the packet buffer from where to begin copying len bytes
 * @return the number of bytes copied, or 0 on failure
 */
u16_t
pbuf_copy_partial(const struct pbuf *buf, void *dataptr, u16_t len, u16_t offset)
{
 800a8c8:	b580      	push	{r7, lr}
 800a8ca:	b088      	sub	sp, #32
 800a8cc:	af00      	add	r7, sp, #0
 800a8ce:	60f8      	str	r0, [r7, #12]
 800a8d0:	60b9      	str	r1, [r7, #8]
 800a8d2:	4611      	mov	r1, r2
 800a8d4:	461a      	mov	r2, r3
 800a8d6:	460b      	mov	r3, r1
 800a8d8:	80fb      	strh	r3, [r7, #6]
 800a8da:	4613      	mov	r3, r2
 800a8dc:	80bb      	strh	r3, [r7, #4]
  const struct pbuf *p;
  u16_t left;
  u16_t buf_copy_len;
  u16_t copied_total = 0;
 800a8de:	2300      	movs	r3, #0
 800a8e0:	82fb      	strh	r3, [r7, #22]

  LWIP_ERROR("pbuf_copy_partial: invalid buf", (buf != NULL), return 0;);
 800a8e2:	68fb      	ldr	r3, [r7, #12]
 800a8e4:	2b00      	cmp	r3, #0
 800a8e6:	d108      	bne.n	800a8fa <pbuf_copy_partial+0x32>
 800a8e8:	4b30      	ldr	r3, [pc, #192]	; (800a9ac <pbuf_copy_partial+0xe4>)
 800a8ea:	f240 32fe 	movw	r2, #1022	; 0x3fe
 800a8ee:	4930      	ldr	r1, [pc, #192]	; (800a9b0 <pbuf_copy_partial+0xe8>)
 800a8f0:	4830      	ldr	r0, [pc, #192]	; (800a9b4 <pbuf_copy_partial+0xec>)
 800a8f2:	f00b f96f 	bl	8015bd4 <printf_>
 800a8f6:	2300      	movs	r3, #0
 800a8f8:	e054      	b.n	800a9a4 <pbuf_copy_partial+0xdc>
  LWIP_ERROR("pbuf_copy_partial: invalid dataptr", (dataptr != NULL), return 0;);
 800a8fa:	68bb      	ldr	r3, [r7, #8]
 800a8fc:	2b00      	cmp	r3, #0
 800a8fe:	d108      	bne.n	800a912 <pbuf_copy_partial+0x4a>
 800a900:	4b2a      	ldr	r3, [pc, #168]	; (800a9ac <pbuf_copy_partial+0xe4>)
 800a902:	f240 32ff 	movw	r2, #1023	; 0x3ff
 800a906:	492c      	ldr	r1, [pc, #176]	; (800a9b8 <pbuf_copy_partial+0xf0>)
 800a908:	482a      	ldr	r0, [pc, #168]	; (800a9b4 <pbuf_copy_partial+0xec>)
 800a90a:	f00b f963 	bl	8015bd4 <printf_>
 800a90e:	2300      	movs	r3, #0
 800a910:	e048      	b.n	800a9a4 <pbuf_copy_partial+0xdc>

  left = 0;
 800a912:	2300      	movs	r3, #0
 800a914:	837b      	strh	r3, [r7, #26]

  if ((buf == NULL) || (dataptr == NULL)) {
 800a916:	68fb      	ldr	r3, [r7, #12]
 800a918:	2b00      	cmp	r3, #0
 800a91a:	d002      	beq.n	800a922 <pbuf_copy_partial+0x5a>
 800a91c:	68bb      	ldr	r3, [r7, #8]
 800a91e:	2b00      	cmp	r3, #0
 800a920:	d101      	bne.n	800a926 <pbuf_copy_partial+0x5e>
    return 0;
 800a922:	2300      	movs	r3, #0
 800a924:	e03e      	b.n	800a9a4 <pbuf_copy_partial+0xdc>
  }

  /* Note some systems use byte copy if dataptr or one of the pbuf payload pointers are unaligned. */
  for (p = buf; len != 0 && p != NULL; p = p->next) {
 800a926:	68fb      	ldr	r3, [r7, #12]
 800a928:	61fb      	str	r3, [r7, #28]
 800a92a:	e034      	b.n	800a996 <pbuf_copy_partial+0xce>
    if ((offset != 0) && (offset >= p->len)) {
 800a92c:	88bb      	ldrh	r3, [r7, #4]
 800a92e:	2b00      	cmp	r3, #0
 800a930:	d00a      	beq.n	800a948 <pbuf_copy_partial+0x80>
 800a932:	69fb      	ldr	r3, [r7, #28]
 800a934:	895b      	ldrh	r3, [r3, #10]
 800a936:	88ba      	ldrh	r2, [r7, #4]
 800a938:	429a      	cmp	r2, r3
 800a93a:	d305      	bcc.n	800a948 <pbuf_copy_partial+0x80>
      /* don't copy from this buffer -> on to the next */
      offset -= p->len;
 800a93c:	69fb      	ldr	r3, [r7, #28]
 800a93e:	895b      	ldrh	r3, [r3, #10]
 800a940:	88ba      	ldrh	r2, [r7, #4]
 800a942:	1ad3      	subs	r3, r2, r3
 800a944:	80bb      	strh	r3, [r7, #4]
 800a946:	e023      	b.n	800a990 <pbuf_copy_partial+0xc8>
    } else {
      /* copy from this buffer. maybe only partially. */
      buf_copy_len = p->len - offset;
 800a948:	69fb      	ldr	r3, [r7, #28]
 800a94a:	895a      	ldrh	r2, [r3, #10]
 800a94c:	88bb      	ldrh	r3, [r7, #4]
 800a94e:	1ad3      	subs	r3, r2, r3
 800a950:	833b      	strh	r3, [r7, #24]
      if (buf_copy_len > len) {
 800a952:	8b3a      	ldrh	r2, [r7, #24]
 800a954:	88fb      	ldrh	r3, [r7, #6]
 800a956:	429a      	cmp	r2, r3
 800a958:	d901      	bls.n	800a95e <pbuf_copy_partial+0x96>
        buf_copy_len = len;
 800a95a:	88fb      	ldrh	r3, [r7, #6]
 800a95c:	833b      	strh	r3, [r7, #24]
      }
      /* copy the necessary parts of the buffer */
      MEMCPY(&((char*)dataptr)[left], &((char*)p->payload)[offset], buf_copy_len);
 800a95e:	8b7b      	ldrh	r3, [r7, #26]
 800a960:	68ba      	ldr	r2, [r7, #8]
 800a962:	18d0      	adds	r0, r2, r3
 800a964:	69fb      	ldr	r3, [r7, #28]
 800a966:	685a      	ldr	r2, [r3, #4]
 800a968:	88bb      	ldrh	r3, [r7, #4]
 800a96a:	4413      	add	r3, r2
 800a96c:	8b3a      	ldrh	r2, [r7, #24]
 800a96e:	4619      	mov	r1, r3
 800a970:	f00b f9a1 	bl	8015cb6 <memcpy>
      copied_total += buf_copy_len;
 800a974:	8afa      	ldrh	r2, [r7, #22]
 800a976:	8b3b      	ldrh	r3, [r7, #24]
 800a978:	4413      	add	r3, r2
 800a97a:	82fb      	strh	r3, [r7, #22]
      left += buf_copy_len;
 800a97c:	8b7a      	ldrh	r2, [r7, #26]
 800a97e:	8b3b      	ldrh	r3, [r7, #24]
 800a980:	4413      	add	r3, r2
 800a982:	837b      	strh	r3, [r7, #26]
      len -= buf_copy_len;
 800a984:	88fa      	ldrh	r2, [r7, #6]
 800a986:	8b3b      	ldrh	r3, [r7, #24]
 800a988:	1ad3      	subs	r3, r2, r3
 800a98a:	80fb      	strh	r3, [r7, #6]
      offset = 0;
 800a98c:	2300      	movs	r3, #0
 800a98e:	80bb      	strh	r3, [r7, #4]
  for (p = buf; len != 0 && p != NULL; p = p->next) {
 800a990:	69fb      	ldr	r3, [r7, #28]
 800a992:	681b      	ldr	r3, [r3, #0]
 800a994:	61fb      	str	r3, [r7, #28]
 800a996:	88fb      	ldrh	r3, [r7, #6]
 800a998:	2b00      	cmp	r3, #0
 800a99a:	d002      	beq.n	800a9a2 <pbuf_copy_partial+0xda>
 800a99c:	69fb      	ldr	r3, [r7, #28]
 800a99e:	2b00      	cmp	r3, #0
 800a9a0:	d1c4      	bne.n	800a92c <pbuf_copy_partial+0x64>
    }
  }
  return copied_total;
 800a9a2:	8afb      	ldrh	r3, [r7, #22]
}
 800a9a4:	4618      	mov	r0, r3
 800a9a6:	3720      	adds	r7, #32
 800a9a8:	46bd      	mov	sp, r7
 800a9aa:	bd80      	pop	{r7, pc}
 800a9ac:	0801a5cc 	.word	0x0801a5cc
 800a9b0:	0801a9fc 	.word	0x0801a9fc
 800a9b4:	0801a618 	.word	0x0801a618
 800a9b8:	0801aa1c 	.word	0x0801aa1c

0800a9bc <tcp_init>:
/**
 * Initialize this module.
 */
void
tcp_init(void)
{
 800a9bc:	b480      	push	{r7}
 800a9be:	af00      	add	r7, sp, #0
#if LWIP_RANDOMIZE_INITIAL_LOCAL_PORTS && defined(LWIP_RAND)
  tcp_port = TCP_ENSURE_LOCAL_PORT_RANGE(LWIP_RAND());
#endif /* LWIP_RANDOMIZE_INITIAL_LOCAL_PORTS && defined(LWIP_RAND) */
}
 800a9c0:	bf00      	nop
 800a9c2:	46bd      	mov	sp, r7
 800a9c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a9c8:	4770      	bx	lr
	...

0800a9cc <tcp_tmr>:
/**
 * Called periodically to dispatch TCP timers.
 */
void
tcp_tmr(void)
{
 800a9cc:	b580      	push	{r7, lr}
 800a9ce:	af00      	add	r7, sp, #0
  /* Call tcp_fasttmr() every 250 ms */
  tcp_fasttmr();
 800a9d0:	f000 ff74 	bl	800b8bc <tcp_fasttmr>

  if (++tcp_timer & 1) {
 800a9d4:	4b07      	ldr	r3, [pc, #28]	; (800a9f4 <tcp_tmr+0x28>)
 800a9d6:	781b      	ldrb	r3, [r3, #0]
 800a9d8:	3301      	adds	r3, #1
 800a9da:	b2da      	uxtb	r2, r3
 800a9dc:	4b05      	ldr	r3, [pc, #20]	; (800a9f4 <tcp_tmr+0x28>)
 800a9de:	701a      	strb	r2, [r3, #0]
 800a9e0:	4b04      	ldr	r3, [pc, #16]	; (800a9f4 <tcp_tmr+0x28>)
 800a9e2:	781b      	ldrb	r3, [r3, #0]
 800a9e4:	f003 0301 	and.w	r3, r3, #1
 800a9e8:	2b00      	cmp	r3, #0
 800a9ea:	d001      	beq.n	800a9f0 <tcp_tmr+0x24>
    /* Call tcp_slowtmr() every 500 ms, i.e., every other timer
       tcp_tmr() is called. */
    tcp_slowtmr();
 800a9ec:	f000 fca6 	bl	800b33c <tcp_slowtmr>
  }
}
 800a9f0:	bf00      	nop
 800a9f2:	bd80      	pop	{r7, pc}
 800a9f4:	24008609 	.word	0x24008609

0800a9f8 <tcp_remove_listener>:
/** Called when a listen pcb is closed. Iterates one pcb list and removes the
 * closed listener pcb from pcb->listener if matching.
 */
static void
tcp_remove_listener(struct tcp_pcb *list, struct tcp_pcb_listen *lpcb)
{
 800a9f8:	b480      	push	{r7}
 800a9fa:	b085      	sub	sp, #20
 800a9fc:	af00      	add	r7, sp, #0
 800a9fe:	6078      	str	r0, [r7, #4]
 800aa00:	6039      	str	r1, [r7, #0]
   struct tcp_pcb *pcb;
   for (pcb = list; pcb != NULL; pcb = pcb->next) {
 800aa02:	687b      	ldr	r3, [r7, #4]
 800aa04:	60fb      	str	r3, [r7, #12]
 800aa06:	e00a      	b.n	800aa1e <tcp_remove_listener+0x26>
      if (pcb->listener == lpcb) {
 800aa08:	68fb      	ldr	r3, [r7, #12]
 800aa0a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800aa0c:	683a      	ldr	r2, [r7, #0]
 800aa0e:	429a      	cmp	r2, r3
 800aa10:	d102      	bne.n	800aa18 <tcp_remove_listener+0x20>
         pcb->listener = NULL;
 800aa12:	68fb      	ldr	r3, [r7, #12]
 800aa14:	2200      	movs	r2, #0
 800aa16:	679a      	str	r2, [r3, #120]	; 0x78
   for (pcb = list; pcb != NULL; pcb = pcb->next) {
 800aa18:	68fb      	ldr	r3, [r7, #12]
 800aa1a:	68db      	ldr	r3, [r3, #12]
 800aa1c:	60fb      	str	r3, [r7, #12]
 800aa1e:	68fb      	ldr	r3, [r7, #12]
 800aa20:	2b00      	cmp	r3, #0
 800aa22:	d1f1      	bne.n	800aa08 <tcp_remove_listener+0x10>
      }
   }
}
 800aa24:	bf00      	nop
 800aa26:	3714      	adds	r7, #20
 800aa28:	46bd      	mov	sp, r7
 800aa2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa2e:	4770      	bx	lr

0800aa30 <tcp_listen_closed>:
/** Called when a listen pcb is closed. Iterates all pcb lists and removes the
 * closed listener pcb from pcb->listener if matching.
 */
static void
tcp_listen_closed(struct tcp_pcb *pcb)
{
 800aa30:	b580      	push	{r7, lr}
 800aa32:	b084      	sub	sp, #16
 800aa34:	af00      	add	r7, sp, #0
 800aa36:	6078      	str	r0, [r7, #4]
#if LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG
  size_t i;
  LWIP_ASSERT("pcb != NULL", pcb != NULL);
 800aa38:	687b      	ldr	r3, [r7, #4]
 800aa3a:	2b00      	cmp	r3, #0
 800aa3c:	d105      	bne.n	800aa4a <tcp_listen_closed+0x1a>
 800aa3e:	4b13      	ldr	r3, [pc, #76]	; (800aa8c <tcp_listen_closed+0x5c>)
 800aa40:	22c0      	movs	r2, #192	; 0xc0
 800aa42:	4913      	ldr	r1, [pc, #76]	; (800aa90 <tcp_listen_closed+0x60>)
 800aa44:	4813      	ldr	r0, [pc, #76]	; (800aa94 <tcp_listen_closed+0x64>)
 800aa46:	f00b f8c5 	bl	8015bd4 <printf_>
  LWIP_ASSERT("pcb->state == LISTEN", pcb->state == LISTEN);
 800aa4a:	687b      	ldr	r3, [r7, #4]
 800aa4c:	7d1b      	ldrb	r3, [r3, #20]
 800aa4e:	2b01      	cmp	r3, #1
 800aa50:	d005      	beq.n	800aa5e <tcp_listen_closed+0x2e>
 800aa52:	4b0e      	ldr	r3, [pc, #56]	; (800aa8c <tcp_listen_closed+0x5c>)
 800aa54:	22c1      	movs	r2, #193	; 0xc1
 800aa56:	4910      	ldr	r1, [pc, #64]	; (800aa98 <tcp_listen_closed+0x68>)
 800aa58:	480e      	ldr	r0, [pc, #56]	; (800aa94 <tcp_listen_closed+0x64>)
 800aa5a:	f00b f8bb 	bl	8015bd4 <printf_>
  for (i = 1; i < LWIP_ARRAYSIZE(tcp_pcb_lists); i++) {
 800aa5e:	2301      	movs	r3, #1
 800aa60:	60fb      	str	r3, [r7, #12]
 800aa62:	e00b      	b.n	800aa7c <tcp_listen_closed+0x4c>
    tcp_remove_listener(*tcp_pcb_lists[i], (struct tcp_pcb_listen*)pcb);
 800aa64:	4a0d      	ldr	r2, [pc, #52]	; (800aa9c <tcp_listen_closed+0x6c>)
 800aa66:	68fb      	ldr	r3, [r7, #12]
 800aa68:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800aa6c:	681b      	ldr	r3, [r3, #0]
 800aa6e:	6879      	ldr	r1, [r7, #4]
 800aa70:	4618      	mov	r0, r3
 800aa72:	f7ff ffc1 	bl	800a9f8 <tcp_remove_listener>
  for (i = 1; i < LWIP_ARRAYSIZE(tcp_pcb_lists); i++) {
 800aa76:	68fb      	ldr	r3, [r7, #12]
 800aa78:	3301      	adds	r3, #1
 800aa7a:	60fb      	str	r3, [r7, #12]
 800aa7c:	68fb      	ldr	r3, [r7, #12]
 800aa7e:	2b03      	cmp	r3, #3
 800aa80:	d9f0      	bls.n	800aa64 <tcp_listen_closed+0x34>
  }
#endif
  LWIP_UNUSED_ARG(pcb);
}
 800aa82:	bf00      	nop
 800aa84:	3710      	adds	r7, #16
 800aa86:	46bd      	mov	sp, r7
 800aa88:	bd80      	pop	{r7, pc}
 800aa8a:	bf00      	nop
 800aa8c:	0801ab50 	.word	0x0801ab50
 800aa90:	0801ab80 	.word	0x0801ab80
 800aa94:	0801ab8c 	.word	0x0801ab8c
 800aa98:	0801abb4 	.word	0x0801abb4
 800aa9c:	0801c138 	.word	0x0801c138

0800aaa0 <tcp_close_shutdown>:
 * @return ERR_OK if connection has been closed
 *         another err_t if closing failed and pcb is not freed
 */
static err_t
tcp_close_shutdown(struct tcp_pcb *pcb, u8_t rst_on_unacked_data)
{
 800aaa0:	b5b0      	push	{r4, r5, r7, lr}
 800aaa2:	b086      	sub	sp, #24
 800aaa4:	af02      	add	r7, sp, #8
 800aaa6:	6078      	str	r0, [r7, #4]
 800aaa8:	460b      	mov	r3, r1
 800aaaa:	70fb      	strb	r3, [r7, #3]
  if (rst_on_unacked_data && ((pcb->state == ESTABLISHED) || (pcb->state == CLOSE_WAIT))) {
 800aaac:	78fb      	ldrb	r3, [r7, #3]
 800aaae:	2b00      	cmp	r3, #0
 800aab0:	d076      	beq.n	800aba0 <tcp_close_shutdown+0x100>
 800aab2:	687b      	ldr	r3, [r7, #4]
 800aab4:	7d1b      	ldrb	r3, [r3, #20]
 800aab6:	2b04      	cmp	r3, #4
 800aab8:	d003      	beq.n	800aac2 <tcp_close_shutdown+0x22>
 800aaba:	687b      	ldr	r3, [r7, #4]
 800aabc:	7d1b      	ldrb	r3, [r3, #20]
 800aabe:	2b07      	cmp	r3, #7
 800aac0:	d16e      	bne.n	800aba0 <tcp_close_shutdown+0x100>
    if ((pcb->refused_data != NULL) || (pcb->rcv_wnd != TCP_WND_MAX(pcb))) {
 800aac2:	687b      	ldr	r3, [r7, #4]
 800aac4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800aac6:	2b00      	cmp	r3, #0
 800aac8:	d105      	bne.n	800aad6 <tcp_close_shutdown+0x36>
 800aaca:	687b      	ldr	r3, [r7, #4]
 800aacc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800aace:	f241 62d0 	movw	r2, #5840	; 0x16d0
 800aad2:	4293      	cmp	r3, r2
 800aad4:	d064      	beq.n	800aba0 <tcp_close_shutdown+0x100>
      /* Not all data received by application, send RST to tell the remote
         side about this. */
      LWIP_ASSERT("pcb->flags & TF_RXCLOSED", pcb->flags & TF_RXCLOSED);
 800aad6:	687b      	ldr	r3, [r7, #4]
 800aad8:	7e9b      	ldrb	r3, [r3, #26]
 800aada:	f003 0310 	and.w	r3, r3, #16
 800aade:	2b00      	cmp	r3, #0
 800aae0:	d106      	bne.n	800aaf0 <tcp_close_shutdown+0x50>
 800aae2:	4b5a      	ldr	r3, [pc, #360]	; (800ac4c <tcp_close_shutdown+0x1ac>)
 800aae4:	f240 120f 	movw	r2, #271	; 0x10f
 800aae8:	4959      	ldr	r1, [pc, #356]	; (800ac50 <tcp_close_shutdown+0x1b0>)
 800aaea:	485a      	ldr	r0, [pc, #360]	; (800ac54 <tcp_close_shutdown+0x1b4>)
 800aaec:	f00b f872 	bl	8015bd4 <printf_>

      /* don't call tcp_abort here: we must not deallocate the pcb since
         that might not be expected when calling tcp_close */
      tcp_rst(pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
 800aaf0:	687b      	ldr	r3, [r7, #4]
 800aaf2:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 800aaf4:	687b      	ldr	r3, [r7, #4]
 800aaf6:	6a59      	ldr	r1, [r3, #36]	; 0x24
 800aaf8:	687c      	ldr	r4, [r7, #4]
 800aafa:	687b      	ldr	r3, [r7, #4]
 800aafc:	1d1d      	adds	r5, r3, #4
 800aafe:	687b      	ldr	r3, [r7, #4]
 800ab00:	8adb      	ldrh	r3, [r3, #22]
 800ab02:	687a      	ldr	r2, [r7, #4]
 800ab04:	8b12      	ldrh	r2, [r2, #24]
 800ab06:	9201      	str	r2, [sp, #4]
 800ab08:	9300      	str	r3, [sp, #0]
 800ab0a:	462b      	mov	r3, r5
 800ab0c:	4622      	mov	r2, r4
 800ab0e:	f004 fed7 	bl	800f8c0 <tcp_rst>
               pcb->local_port, pcb->remote_port);

      tcp_pcb_purge(pcb);
 800ab12:	6878      	ldr	r0, [r7, #4]
 800ab14:	f001 fa08 	bl	800bf28 <tcp_pcb_purge>
      TCP_RMV_ACTIVE(pcb);
 800ab18:	4b4f      	ldr	r3, [pc, #316]	; (800ac58 <tcp_close_shutdown+0x1b8>)
 800ab1a:	681b      	ldr	r3, [r3, #0]
 800ab1c:	687a      	ldr	r2, [r7, #4]
 800ab1e:	429a      	cmp	r2, r3
 800ab20:	d105      	bne.n	800ab2e <tcp_close_shutdown+0x8e>
 800ab22:	4b4d      	ldr	r3, [pc, #308]	; (800ac58 <tcp_close_shutdown+0x1b8>)
 800ab24:	681b      	ldr	r3, [r3, #0]
 800ab26:	68db      	ldr	r3, [r3, #12]
 800ab28:	4a4b      	ldr	r2, [pc, #300]	; (800ac58 <tcp_close_shutdown+0x1b8>)
 800ab2a:	6013      	str	r3, [r2, #0]
 800ab2c:	e013      	b.n	800ab56 <tcp_close_shutdown+0xb6>
 800ab2e:	4b4a      	ldr	r3, [pc, #296]	; (800ac58 <tcp_close_shutdown+0x1b8>)
 800ab30:	681b      	ldr	r3, [r3, #0]
 800ab32:	60fb      	str	r3, [r7, #12]
 800ab34:	e00c      	b.n	800ab50 <tcp_close_shutdown+0xb0>
 800ab36:	68fb      	ldr	r3, [r7, #12]
 800ab38:	68db      	ldr	r3, [r3, #12]
 800ab3a:	687a      	ldr	r2, [r7, #4]
 800ab3c:	429a      	cmp	r2, r3
 800ab3e:	d104      	bne.n	800ab4a <tcp_close_shutdown+0xaa>
 800ab40:	687b      	ldr	r3, [r7, #4]
 800ab42:	68da      	ldr	r2, [r3, #12]
 800ab44:	68fb      	ldr	r3, [r7, #12]
 800ab46:	60da      	str	r2, [r3, #12]
 800ab48:	e005      	b.n	800ab56 <tcp_close_shutdown+0xb6>
 800ab4a:	68fb      	ldr	r3, [r7, #12]
 800ab4c:	68db      	ldr	r3, [r3, #12]
 800ab4e:	60fb      	str	r3, [r7, #12]
 800ab50:	68fb      	ldr	r3, [r7, #12]
 800ab52:	2b00      	cmp	r3, #0
 800ab54:	d1ef      	bne.n	800ab36 <tcp_close_shutdown+0x96>
 800ab56:	687b      	ldr	r3, [r7, #4]
 800ab58:	2200      	movs	r2, #0
 800ab5a:	60da      	str	r2, [r3, #12]
 800ab5c:	4b3f      	ldr	r3, [pc, #252]	; (800ac5c <tcp_close_shutdown+0x1bc>)
 800ab5e:	2201      	movs	r2, #1
 800ab60:	701a      	strb	r2, [r3, #0]
      if (pcb->state == ESTABLISHED) {
 800ab62:	687b      	ldr	r3, [r7, #4]
 800ab64:	7d1b      	ldrb	r3, [r3, #20]
 800ab66:	2b04      	cmp	r3, #4
 800ab68:	d10c      	bne.n	800ab84 <tcp_close_shutdown+0xe4>
        /* move to TIME_WAIT since we close actively */
        pcb->state = TIME_WAIT;
 800ab6a:	687b      	ldr	r3, [r7, #4]
 800ab6c:	220a      	movs	r2, #10
 800ab6e:	751a      	strb	r2, [r3, #20]
        TCP_REG(&tcp_tw_pcbs, pcb);
 800ab70:	4b3b      	ldr	r3, [pc, #236]	; (800ac60 <tcp_close_shutdown+0x1c0>)
 800ab72:	681a      	ldr	r2, [r3, #0]
 800ab74:	687b      	ldr	r3, [r7, #4]
 800ab76:	60da      	str	r2, [r3, #12]
 800ab78:	4a39      	ldr	r2, [pc, #228]	; (800ac60 <tcp_close_shutdown+0x1c0>)
 800ab7a:	687b      	ldr	r3, [r7, #4]
 800ab7c:	6013      	str	r3, [r2, #0]
 800ab7e:	f005 f8f1 	bl	800fd64 <tcp_timer_needed>
 800ab82:	e00b      	b.n	800ab9c <tcp_close_shutdown+0xfc>
      } else {
        /* CLOSE_WAIT: deallocate the pcb since we already sent a RST for it */
        if (tcp_input_pcb == pcb) {
 800ab84:	4b37      	ldr	r3, [pc, #220]	; (800ac64 <tcp_close_shutdown+0x1c4>)
 800ab86:	681b      	ldr	r3, [r3, #0]
 800ab88:	687a      	ldr	r2, [r7, #4]
 800ab8a:	429a      	cmp	r2, r3
 800ab8c:	d102      	bne.n	800ab94 <tcp_close_shutdown+0xf4>
          /* prevent using a deallocated pcb: free it from tcp_input later */
          tcp_trigger_input_pcb_close();
 800ab8e:	f003 fd2f 	bl	800e5f0 <tcp_trigger_input_pcb_close>
 800ab92:	e003      	b.n	800ab9c <tcp_close_shutdown+0xfc>
        } else {
          memp_free(MEMP_TCP_PCB, pcb);
 800ab94:	6879      	ldr	r1, [r7, #4]
 800ab96:	2001      	movs	r0, #1
 800ab98:	f7fe fee0 	bl	800995c <memp_free>
        }
      }
      return ERR_OK;
 800ab9c:	2300      	movs	r3, #0
 800ab9e:	e050      	b.n	800ac42 <tcp_close_shutdown+0x1a2>
    }
  }

  /* - states which free the pcb are handled here,
     - states which send FIN and change state are handled in tcp_close_shutdown_fin() */
  switch (pcb->state) {
 800aba0:	687b      	ldr	r3, [r7, #4]
 800aba2:	7d1b      	ldrb	r3, [r3, #20]
 800aba4:	2b01      	cmp	r3, #1
 800aba6:	d02e      	beq.n	800ac06 <tcp_close_shutdown+0x166>
 800aba8:	2b02      	cmp	r3, #2
 800abaa:	d038      	beq.n	800ac1e <tcp_close_shutdown+0x17e>
 800abac:	2b00      	cmp	r3, #0
 800abae:	d142      	bne.n	800ac36 <tcp_close_shutdown+0x196>
     * and the user needs some way to free it should the need arise.
     * Calling tcp_close() with a pcb that has already been closed, (i.e. twice)
     * or for a pcb that has been used and then entered the CLOSED state
     * is erroneous, but this should never happen as the pcb has in those cases
     * been freed, and so any remaining handles are bogus. */
    if (pcb->local_port != 0) {
 800abb0:	687b      	ldr	r3, [r7, #4]
 800abb2:	8adb      	ldrh	r3, [r3, #22]
 800abb4:	2b00      	cmp	r3, #0
 800abb6:	d021      	beq.n	800abfc <tcp_close_shutdown+0x15c>
      TCP_RMV(&tcp_bound_pcbs, pcb);
 800abb8:	4b2b      	ldr	r3, [pc, #172]	; (800ac68 <tcp_close_shutdown+0x1c8>)
 800abba:	681b      	ldr	r3, [r3, #0]
 800abbc:	687a      	ldr	r2, [r7, #4]
 800abbe:	429a      	cmp	r2, r3
 800abc0:	d105      	bne.n	800abce <tcp_close_shutdown+0x12e>
 800abc2:	4b29      	ldr	r3, [pc, #164]	; (800ac68 <tcp_close_shutdown+0x1c8>)
 800abc4:	681b      	ldr	r3, [r3, #0]
 800abc6:	68db      	ldr	r3, [r3, #12]
 800abc8:	4a27      	ldr	r2, [pc, #156]	; (800ac68 <tcp_close_shutdown+0x1c8>)
 800abca:	6013      	str	r3, [r2, #0]
 800abcc:	e013      	b.n	800abf6 <tcp_close_shutdown+0x156>
 800abce:	4b26      	ldr	r3, [pc, #152]	; (800ac68 <tcp_close_shutdown+0x1c8>)
 800abd0:	681b      	ldr	r3, [r3, #0]
 800abd2:	60bb      	str	r3, [r7, #8]
 800abd4:	e00c      	b.n	800abf0 <tcp_close_shutdown+0x150>
 800abd6:	68bb      	ldr	r3, [r7, #8]
 800abd8:	68db      	ldr	r3, [r3, #12]
 800abda:	687a      	ldr	r2, [r7, #4]
 800abdc:	429a      	cmp	r2, r3
 800abde:	d104      	bne.n	800abea <tcp_close_shutdown+0x14a>
 800abe0:	687b      	ldr	r3, [r7, #4]
 800abe2:	68da      	ldr	r2, [r3, #12]
 800abe4:	68bb      	ldr	r3, [r7, #8]
 800abe6:	60da      	str	r2, [r3, #12]
 800abe8:	e005      	b.n	800abf6 <tcp_close_shutdown+0x156>
 800abea:	68bb      	ldr	r3, [r7, #8]
 800abec:	68db      	ldr	r3, [r3, #12]
 800abee:	60bb      	str	r3, [r7, #8]
 800abf0:	68bb      	ldr	r3, [r7, #8]
 800abf2:	2b00      	cmp	r3, #0
 800abf4:	d1ef      	bne.n	800abd6 <tcp_close_shutdown+0x136>
 800abf6:	687b      	ldr	r3, [r7, #4]
 800abf8:	2200      	movs	r2, #0
 800abfa:	60da      	str	r2, [r3, #12]
    }
    memp_free(MEMP_TCP_PCB, pcb);
 800abfc:	6879      	ldr	r1, [r7, #4]
 800abfe:	2001      	movs	r0, #1
 800ac00:	f7fe feac 	bl	800995c <memp_free>
    break;
 800ac04:	e01c      	b.n	800ac40 <tcp_close_shutdown+0x1a0>
  case LISTEN:
    tcp_listen_closed(pcb);
 800ac06:	6878      	ldr	r0, [r7, #4]
 800ac08:	f7ff ff12 	bl	800aa30 <tcp_listen_closed>
    tcp_pcb_remove(&tcp_listen_pcbs.pcbs, pcb);
 800ac0c:	6879      	ldr	r1, [r7, #4]
 800ac0e:	4817      	ldr	r0, [pc, #92]	; (800ac6c <tcp_close_shutdown+0x1cc>)
 800ac10:	f001 f9cc 	bl	800bfac <tcp_pcb_remove>
    memp_free(MEMP_TCP_PCB_LISTEN, pcb);
 800ac14:	6879      	ldr	r1, [r7, #4]
 800ac16:	2002      	movs	r0, #2
 800ac18:	f7fe fea0 	bl	800995c <memp_free>
    break;
 800ac1c:	e010      	b.n	800ac40 <tcp_close_shutdown+0x1a0>
  case SYN_SENT:
    TCP_PCB_REMOVE_ACTIVE(pcb);
 800ac1e:	6879      	ldr	r1, [r7, #4]
 800ac20:	480d      	ldr	r0, [pc, #52]	; (800ac58 <tcp_close_shutdown+0x1b8>)
 800ac22:	f001 f9c3 	bl	800bfac <tcp_pcb_remove>
 800ac26:	4b0d      	ldr	r3, [pc, #52]	; (800ac5c <tcp_close_shutdown+0x1bc>)
 800ac28:	2201      	movs	r2, #1
 800ac2a:	701a      	strb	r2, [r3, #0]
    memp_free(MEMP_TCP_PCB, pcb);
 800ac2c:	6879      	ldr	r1, [r7, #4]
 800ac2e:	2001      	movs	r0, #1
 800ac30:	f7fe fe94 	bl	800995c <memp_free>
    MIB2_STATS_INC(mib2.tcpattemptfails);
    break;
 800ac34:	e004      	b.n	800ac40 <tcp_close_shutdown+0x1a0>
  default:
    return tcp_close_shutdown_fin(pcb);
 800ac36:	6878      	ldr	r0, [r7, #4]
 800ac38:	f000 f81a 	bl	800ac70 <tcp_close_shutdown_fin>
 800ac3c:	4603      	mov	r3, r0
 800ac3e:	e000      	b.n	800ac42 <tcp_close_shutdown+0x1a2>
  }
  return ERR_OK;
 800ac40:	2300      	movs	r3, #0
}
 800ac42:	4618      	mov	r0, r3
 800ac44:	3710      	adds	r7, #16
 800ac46:	46bd      	mov	sp, r7
 800ac48:	bdb0      	pop	{r4, r5, r7, pc}
 800ac4a:	bf00      	nop
 800ac4c:	0801ab50 	.word	0x0801ab50
 800ac50:	0801abcc 	.word	0x0801abcc
 800ac54:	0801ab8c 	.word	0x0801ab8c
 800ac58:	2400f2e8 	.word	0x2400f2e8
 800ac5c:	2400f2e4 	.word	0x2400f2e4
 800ac60:	2400f2f8 	.word	0x2400f2f8
 800ac64:	2400f2fc 	.word	0x2400f2fc
 800ac68:	2400f2f4 	.word	0x2400f2f4
 800ac6c:	2400f2f0 	.word	0x2400f2f0

0800ac70 <tcp_close_shutdown_fin>:

static err_t
tcp_close_shutdown_fin(struct tcp_pcb *pcb)
{
 800ac70:	b580      	push	{r7, lr}
 800ac72:	b084      	sub	sp, #16
 800ac74:	af00      	add	r7, sp, #0
 800ac76:	6078      	str	r0, [r7, #4]
  err_t err;
  LWIP_ASSERT("pcb != NULL", pcb != NULL);
 800ac78:	687b      	ldr	r3, [r7, #4]
 800ac7a:	2b00      	cmp	r3, #0
 800ac7c:	d106      	bne.n	800ac8c <tcp_close_shutdown_fin+0x1c>
 800ac7e:	4b2c      	ldr	r3, [pc, #176]	; (800ad30 <tcp_close_shutdown_fin+0xc0>)
 800ac80:	f240 124d 	movw	r2, #333	; 0x14d
 800ac84:	492b      	ldr	r1, [pc, #172]	; (800ad34 <tcp_close_shutdown_fin+0xc4>)
 800ac86:	482c      	ldr	r0, [pc, #176]	; (800ad38 <tcp_close_shutdown_fin+0xc8>)
 800ac88:	f00a ffa4 	bl	8015bd4 <printf_>

  switch (pcb->state) {
 800ac8c:	687b      	ldr	r3, [r7, #4]
 800ac8e:	7d1b      	ldrb	r3, [r3, #20]
 800ac90:	2b04      	cmp	r3, #4
 800ac92:	d010      	beq.n	800acb6 <tcp_close_shutdown_fin+0x46>
 800ac94:	2b07      	cmp	r3, #7
 800ac96:	d01b      	beq.n	800acd0 <tcp_close_shutdown_fin+0x60>
 800ac98:	2b03      	cmp	r3, #3
 800ac9a:	d126      	bne.n	800acea <tcp_close_shutdown_fin+0x7a>
  case SYN_RCVD:
    err = tcp_send_fin(pcb);
 800ac9c:	6878      	ldr	r0, [r7, #4]
 800ac9e:	f003 fd33 	bl	800e708 <tcp_send_fin>
 800aca2:	4603      	mov	r3, r0
 800aca4:	73fb      	strb	r3, [r7, #15]
    if (err == ERR_OK) {
 800aca6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800acaa:	2b00      	cmp	r3, #0
 800acac:	d11f      	bne.n	800acee <tcp_close_shutdown_fin+0x7e>
      tcp_backlog_accepted(pcb);
      MIB2_STATS_INC(mib2.tcpattemptfails);
      pcb->state = FIN_WAIT_1;
 800acae:	687b      	ldr	r3, [r7, #4]
 800acb0:	2205      	movs	r2, #5
 800acb2:	751a      	strb	r2, [r3, #20]
    }
    break;
 800acb4:	e01b      	b.n	800acee <tcp_close_shutdown_fin+0x7e>
  case ESTABLISHED:
    err = tcp_send_fin(pcb);
 800acb6:	6878      	ldr	r0, [r7, #4]
 800acb8:	f003 fd26 	bl	800e708 <tcp_send_fin>
 800acbc:	4603      	mov	r3, r0
 800acbe:	73fb      	strb	r3, [r7, #15]
    if (err == ERR_OK) {
 800acc0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800acc4:	2b00      	cmp	r3, #0
 800acc6:	d114      	bne.n	800acf2 <tcp_close_shutdown_fin+0x82>
      MIB2_STATS_INC(mib2.tcpestabresets);
      pcb->state = FIN_WAIT_1;
 800acc8:	687b      	ldr	r3, [r7, #4]
 800acca:	2205      	movs	r2, #5
 800accc:	751a      	strb	r2, [r3, #20]
    }
    break;
 800acce:	e010      	b.n	800acf2 <tcp_close_shutdown_fin+0x82>
  case CLOSE_WAIT:
    err = tcp_send_fin(pcb);
 800acd0:	6878      	ldr	r0, [r7, #4]
 800acd2:	f003 fd19 	bl	800e708 <tcp_send_fin>
 800acd6:	4603      	mov	r3, r0
 800acd8:	73fb      	strb	r3, [r7, #15]
    if (err == ERR_OK) {
 800acda:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800acde:	2b00      	cmp	r3, #0
 800ace0:	d109      	bne.n	800acf6 <tcp_close_shutdown_fin+0x86>
      MIB2_STATS_INC(mib2.tcpestabresets);
      pcb->state = LAST_ACK;
 800ace2:	687b      	ldr	r3, [r7, #4]
 800ace4:	2209      	movs	r2, #9
 800ace6:	751a      	strb	r2, [r3, #20]
    }
    break;
 800ace8:	e005      	b.n	800acf6 <tcp_close_shutdown_fin+0x86>
  default:
    /* Has already been closed, do nothing. */
    return ERR_OK;
 800acea:	2300      	movs	r3, #0
 800acec:	e01c      	b.n	800ad28 <tcp_close_shutdown_fin+0xb8>
    break;
 800acee:	bf00      	nop
 800acf0:	e002      	b.n	800acf8 <tcp_close_shutdown_fin+0x88>
    break;
 800acf2:	bf00      	nop
 800acf4:	e000      	b.n	800acf8 <tcp_close_shutdown_fin+0x88>
    break;
 800acf6:	bf00      	nop
  }

  if (err == ERR_OK) {
 800acf8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800acfc:	2b00      	cmp	r3, #0
 800acfe:	d103      	bne.n	800ad08 <tcp_close_shutdown_fin+0x98>
    /* To ensure all data has been sent when tcp_close returns, we have
       to make sure tcp_output doesn't fail.
       Since we don't really have to ensure all data has been sent when tcp_close
       returns (unsent data is sent from tcp timer functions, also), we don't care
       for the return value of tcp_output for now. */
    tcp_output(pcb);
 800ad00:	6878      	ldr	r0, [r7, #4]
 800ad02:	f004 fb53 	bl	800f3ac <tcp_output>
 800ad06:	e00d      	b.n	800ad24 <tcp_close_shutdown_fin+0xb4>
  } else if (err == ERR_MEM) {
 800ad08:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800ad0c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ad10:	d108      	bne.n	800ad24 <tcp_close_shutdown_fin+0xb4>
    /* Mark this pcb for closing. Closing is retried from tcp_tmr. */
    pcb->flags |= TF_CLOSEPEND;
 800ad12:	687b      	ldr	r3, [r7, #4]
 800ad14:	7e9b      	ldrb	r3, [r3, #26]
 800ad16:	f043 0308 	orr.w	r3, r3, #8
 800ad1a:	b2da      	uxtb	r2, r3
 800ad1c:	687b      	ldr	r3, [r7, #4]
 800ad1e:	769a      	strb	r2, [r3, #26]
    /* We have to return ERR_OK from here to indicate to the callers that this
       pcb should not be used any more as it will be freed soon via tcp_tmr.
       This is OK here since sending FIN does not guarantee a time frime for
       actually freeing the pcb, either (it is left in closure states for
       remote ACK or timeout) */
    return ERR_OK;
 800ad20:	2300      	movs	r3, #0
 800ad22:	e001      	b.n	800ad28 <tcp_close_shutdown_fin+0xb8>
  }
  return err;
 800ad24:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800ad28:	4618      	mov	r0, r3
 800ad2a:	3710      	adds	r7, #16
 800ad2c:	46bd      	mov	sp, r7
 800ad2e:	bd80      	pop	{r7, pc}
 800ad30:	0801ab50 	.word	0x0801ab50
 800ad34:	0801ab80 	.word	0x0801ab80
 800ad38:	0801ab8c 	.word	0x0801ab8c

0800ad3c <tcp_close>:
 * @return ERR_OK if connection has been closed
 *         another err_t if closing failed and pcb is not freed
 */
err_t
tcp_close(struct tcp_pcb *pcb)
{
 800ad3c:	b580      	push	{r7, lr}
 800ad3e:	b082      	sub	sp, #8
 800ad40:	af00      	add	r7, sp, #0
 800ad42:	6078      	str	r0, [r7, #4]
  LWIP_DEBUGF(TCP_DEBUG, ("tcp_close: closing in "));
  tcp_debug_print_state(pcb->state);

  if (pcb->state != LISTEN) {
 800ad44:	687b      	ldr	r3, [r7, #4]
 800ad46:	7d1b      	ldrb	r3, [r3, #20]
 800ad48:	2b01      	cmp	r3, #1
 800ad4a:	d006      	beq.n	800ad5a <tcp_close+0x1e>
    /* Set a flag not to receive any more data... */
    pcb->flags |= TF_RXCLOSED;
 800ad4c:	687b      	ldr	r3, [r7, #4]
 800ad4e:	7e9b      	ldrb	r3, [r3, #26]
 800ad50:	f043 0310 	orr.w	r3, r3, #16
 800ad54:	b2da      	uxtb	r2, r3
 800ad56:	687b      	ldr	r3, [r7, #4]
 800ad58:	769a      	strb	r2, [r3, #26]
  }
  /* ... and close */
  return tcp_close_shutdown(pcb, 1);
 800ad5a:	2101      	movs	r1, #1
 800ad5c:	6878      	ldr	r0, [r7, #4]
 800ad5e:	f7ff fe9f 	bl	800aaa0 <tcp_close_shutdown>
 800ad62:	4603      	mov	r3, r0
}
 800ad64:	4618      	mov	r0, r3
 800ad66:	3708      	adds	r7, #8
 800ad68:	46bd      	mov	sp, r7
 800ad6a:	bd80      	pop	{r7, pc}

0800ad6c <tcp_shutdown>:
 * @return ERR_OK if shutdown succeeded (or the PCB has already been shut down)
 *         another err_t on error.
 */
err_t
tcp_shutdown(struct tcp_pcb *pcb, int shut_rx, int shut_tx)
{
 800ad6c:	b580      	push	{r7, lr}
 800ad6e:	b084      	sub	sp, #16
 800ad70:	af00      	add	r7, sp, #0
 800ad72:	60f8      	str	r0, [r7, #12]
 800ad74:	60b9      	str	r1, [r7, #8]
 800ad76:	607a      	str	r2, [r7, #4]
  if (pcb->state == LISTEN) {
 800ad78:	68fb      	ldr	r3, [r7, #12]
 800ad7a:	7d1b      	ldrb	r3, [r3, #20]
 800ad7c:	2b01      	cmp	r3, #1
 800ad7e:	d102      	bne.n	800ad86 <tcp_shutdown+0x1a>
    return ERR_CONN;
 800ad80:	f06f 030a 	mvn.w	r3, #10
 800ad84:	e035      	b.n	800adf2 <tcp_shutdown+0x86>
  }
  if (shut_rx) {
 800ad86:	68bb      	ldr	r3, [r7, #8]
 800ad88:	2b00      	cmp	r3, #0
 800ad8a:	d01b      	beq.n	800adc4 <tcp_shutdown+0x58>
    /* shut down the receive side: set a flag not to receive any more data... */
    pcb->flags |= TF_RXCLOSED;
 800ad8c:	68fb      	ldr	r3, [r7, #12]
 800ad8e:	7e9b      	ldrb	r3, [r3, #26]
 800ad90:	f043 0310 	orr.w	r3, r3, #16
 800ad94:	b2da      	uxtb	r2, r3
 800ad96:	68fb      	ldr	r3, [r7, #12]
 800ad98:	769a      	strb	r2, [r3, #26]
    if (shut_tx) {
 800ad9a:	687b      	ldr	r3, [r7, #4]
 800ad9c:	2b00      	cmp	r3, #0
 800ad9e:	d005      	beq.n	800adac <tcp_shutdown+0x40>
      /* shutting down the tx AND rx side is the same as closing for the raw API */
      return tcp_close_shutdown(pcb, 1);
 800ada0:	2101      	movs	r1, #1
 800ada2:	68f8      	ldr	r0, [r7, #12]
 800ada4:	f7ff fe7c 	bl	800aaa0 <tcp_close_shutdown>
 800ada8:	4603      	mov	r3, r0
 800adaa:	e022      	b.n	800adf2 <tcp_shutdown+0x86>
    }
    /* ... and free buffered data */
    if (pcb->refused_data != NULL) {
 800adac:	68fb      	ldr	r3, [r7, #12]
 800adae:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800adb0:	2b00      	cmp	r3, #0
 800adb2:	d007      	beq.n	800adc4 <tcp_shutdown+0x58>
      pbuf_free(pcb->refused_data);
 800adb4:	68fb      	ldr	r3, [r7, #12]
 800adb6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800adb8:	4618      	mov	r0, r3
 800adba:	f7ff fb79 	bl	800a4b0 <pbuf_free>
      pcb->refused_data = NULL;
 800adbe:	68fb      	ldr	r3, [r7, #12]
 800adc0:	2200      	movs	r2, #0
 800adc2:	675a      	str	r2, [r3, #116]	; 0x74
    }
  }
  if (shut_tx) {
 800adc4:	687b      	ldr	r3, [r7, #4]
 800adc6:	2b00      	cmp	r3, #0
 800adc8:	d012      	beq.n	800adf0 <tcp_shutdown+0x84>
    /* This can't happen twice since if it succeeds, the pcb's state is changed.
       Only close in these states as the others directly deallocate the PCB */
    switch (pcb->state) {
 800adca:	68fb      	ldr	r3, [r7, #12]
 800adcc:	7d1b      	ldrb	r3, [r3, #20]
 800adce:	2b03      	cmp	r3, #3
 800add0:	db0b      	blt.n	800adea <tcp_shutdown+0x7e>
 800add2:	2b04      	cmp	r3, #4
 800add4:	dd01      	ble.n	800adda <tcp_shutdown+0x6e>
 800add6:	2b07      	cmp	r3, #7
 800add8:	d107      	bne.n	800adea <tcp_shutdown+0x7e>
    case SYN_RCVD:
    case ESTABLISHED:
    case CLOSE_WAIT:
      return tcp_close_shutdown(pcb, (u8_t)shut_rx);
 800adda:	68bb      	ldr	r3, [r7, #8]
 800addc:	b2db      	uxtb	r3, r3
 800adde:	4619      	mov	r1, r3
 800ade0:	68f8      	ldr	r0, [r7, #12]
 800ade2:	f7ff fe5d 	bl	800aaa0 <tcp_close_shutdown>
 800ade6:	4603      	mov	r3, r0
 800ade8:	e003      	b.n	800adf2 <tcp_shutdown+0x86>
    default:
      /* Not (yet?) connected, cannot shutdown the TX side as that would bring us
        into CLOSED state, where the PCB is deallocated. */
      return ERR_CONN;
 800adea:	f06f 030a 	mvn.w	r3, #10
 800adee:	e000      	b.n	800adf2 <tcp_shutdown+0x86>
    }
  }
  return ERR_OK;
 800adf0:	2300      	movs	r3, #0
}
 800adf2:	4618      	mov	r0, r3
 800adf4:	3710      	adds	r7, #16
 800adf6:	46bd      	mov	sp, r7
 800adf8:	bd80      	pop	{r7, pc}
	...

0800adfc <tcp_abandon>:
 * @param pcb the tcp_pcb to abort
 * @param reset boolean to indicate whether a reset should be sent
 */
void
tcp_abandon(struct tcp_pcb *pcb, int reset)
{
 800adfc:	b580      	push	{r7, lr}
 800adfe:	b08c      	sub	sp, #48	; 0x30
 800ae00:	af02      	add	r7, sp, #8
 800ae02:	6078      	str	r0, [r7, #4]
 800ae04:	6039      	str	r1, [r7, #0]
  tcp_err_fn errf;
#endif /* LWIP_CALLBACK_API */
  void *errf_arg;

  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_abort/tcp_abandon for listen-pcbs",
 800ae06:	687b      	ldr	r3, [r7, #4]
 800ae08:	7d1b      	ldrb	r3, [r3, #20]
 800ae0a:	2b01      	cmp	r3, #1
 800ae0c:	d106      	bne.n	800ae1c <tcp_abandon+0x20>
 800ae0e:	4b4d      	ldr	r3, [pc, #308]	; (800af44 <tcp_abandon+0x148>)
 800ae10:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 800ae14:	494c      	ldr	r1, [pc, #304]	; (800af48 <tcp_abandon+0x14c>)
 800ae16:	484d      	ldr	r0, [pc, #308]	; (800af4c <tcp_abandon+0x150>)
 800ae18:	f00a fedc 	bl	8015bd4 <printf_>
    pcb->state != LISTEN);
  /* Figure out on which TCP PCB list we are, and remove us. If we
     are in an active state, call the receive function associated with
     the PCB with a NULL argument, and send an RST to the remote end. */
  if (pcb->state == TIME_WAIT) {
 800ae1c:	687b      	ldr	r3, [r7, #4]
 800ae1e:	7d1b      	ldrb	r3, [r3, #20]
 800ae20:	2b0a      	cmp	r3, #10
 800ae22:	d108      	bne.n	800ae36 <tcp_abandon+0x3a>
    tcp_pcb_remove(&tcp_tw_pcbs, pcb);
 800ae24:	6879      	ldr	r1, [r7, #4]
 800ae26:	484a      	ldr	r0, [pc, #296]	; (800af50 <tcp_abandon+0x154>)
 800ae28:	f001 f8c0 	bl	800bfac <tcp_pcb_remove>
    memp_free(MEMP_TCP_PCB, pcb);
 800ae2c:	6879      	ldr	r1, [r7, #4]
 800ae2e:	2001      	movs	r0, #1
 800ae30:	f7fe fd94 	bl	800995c <memp_free>
    }
    last_state = pcb->state;
    memp_free(MEMP_TCP_PCB, pcb);
    TCP_EVENT_ERR(last_state, errf, errf_arg, ERR_ABRT);
  }
}
 800ae34:	e081      	b.n	800af3a <tcp_abandon+0x13e>
    int send_rst = 0;
 800ae36:	2300      	movs	r3, #0
 800ae38:	627b      	str	r3, [r7, #36]	; 0x24
    u16_t local_port = 0;
 800ae3a:	2300      	movs	r3, #0
 800ae3c:	847b      	strh	r3, [r7, #34]	; 0x22
    seqno = pcb->snd_nxt;
 800ae3e:	687b      	ldr	r3, [r7, #4]
 800ae40:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800ae42:	61bb      	str	r3, [r7, #24]
    ackno = pcb->rcv_nxt;
 800ae44:	687b      	ldr	r3, [r7, #4]
 800ae46:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ae48:	617b      	str	r3, [r7, #20]
    errf = pcb->errf;
 800ae4a:	687b      	ldr	r3, [r7, #4]
 800ae4c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800ae50:	613b      	str	r3, [r7, #16]
    errf_arg = pcb->callback_arg;
 800ae52:	687b      	ldr	r3, [r7, #4]
 800ae54:	691b      	ldr	r3, [r3, #16]
 800ae56:	60fb      	str	r3, [r7, #12]
    if (pcb->state == CLOSED) {
 800ae58:	687b      	ldr	r3, [r7, #4]
 800ae5a:	7d1b      	ldrb	r3, [r3, #20]
 800ae5c:	2b00      	cmp	r3, #0
 800ae5e:	d126      	bne.n	800aeae <tcp_abandon+0xb2>
      if (pcb->local_port != 0) {
 800ae60:	687b      	ldr	r3, [r7, #4]
 800ae62:	8adb      	ldrh	r3, [r3, #22]
 800ae64:	2b00      	cmp	r3, #0
 800ae66:	d02e      	beq.n	800aec6 <tcp_abandon+0xca>
        TCP_RMV(&tcp_bound_pcbs, pcb);
 800ae68:	4b3a      	ldr	r3, [pc, #232]	; (800af54 <tcp_abandon+0x158>)
 800ae6a:	681b      	ldr	r3, [r3, #0]
 800ae6c:	687a      	ldr	r2, [r7, #4]
 800ae6e:	429a      	cmp	r2, r3
 800ae70:	d105      	bne.n	800ae7e <tcp_abandon+0x82>
 800ae72:	4b38      	ldr	r3, [pc, #224]	; (800af54 <tcp_abandon+0x158>)
 800ae74:	681b      	ldr	r3, [r3, #0]
 800ae76:	68db      	ldr	r3, [r3, #12]
 800ae78:	4a36      	ldr	r2, [pc, #216]	; (800af54 <tcp_abandon+0x158>)
 800ae7a:	6013      	str	r3, [r2, #0]
 800ae7c:	e013      	b.n	800aea6 <tcp_abandon+0xaa>
 800ae7e:	4b35      	ldr	r3, [pc, #212]	; (800af54 <tcp_abandon+0x158>)
 800ae80:	681b      	ldr	r3, [r3, #0]
 800ae82:	61fb      	str	r3, [r7, #28]
 800ae84:	e00c      	b.n	800aea0 <tcp_abandon+0xa4>
 800ae86:	69fb      	ldr	r3, [r7, #28]
 800ae88:	68db      	ldr	r3, [r3, #12]
 800ae8a:	687a      	ldr	r2, [r7, #4]
 800ae8c:	429a      	cmp	r2, r3
 800ae8e:	d104      	bne.n	800ae9a <tcp_abandon+0x9e>
 800ae90:	687b      	ldr	r3, [r7, #4]
 800ae92:	68da      	ldr	r2, [r3, #12]
 800ae94:	69fb      	ldr	r3, [r7, #28]
 800ae96:	60da      	str	r2, [r3, #12]
 800ae98:	e005      	b.n	800aea6 <tcp_abandon+0xaa>
 800ae9a:	69fb      	ldr	r3, [r7, #28]
 800ae9c:	68db      	ldr	r3, [r3, #12]
 800ae9e:	61fb      	str	r3, [r7, #28]
 800aea0:	69fb      	ldr	r3, [r7, #28]
 800aea2:	2b00      	cmp	r3, #0
 800aea4:	d1ef      	bne.n	800ae86 <tcp_abandon+0x8a>
 800aea6:	687b      	ldr	r3, [r7, #4]
 800aea8:	2200      	movs	r2, #0
 800aeaa:	60da      	str	r2, [r3, #12]
 800aeac:	e00b      	b.n	800aec6 <tcp_abandon+0xca>
      send_rst = reset;
 800aeae:	683b      	ldr	r3, [r7, #0]
 800aeb0:	627b      	str	r3, [r7, #36]	; 0x24
      local_port = pcb->local_port;
 800aeb2:	687b      	ldr	r3, [r7, #4]
 800aeb4:	8adb      	ldrh	r3, [r3, #22]
 800aeb6:	847b      	strh	r3, [r7, #34]	; 0x22
      TCP_PCB_REMOVE_ACTIVE(pcb);
 800aeb8:	6879      	ldr	r1, [r7, #4]
 800aeba:	4827      	ldr	r0, [pc, #156]	; (800af58 <tcp_abandon+0x15c>)
 800aebc:	f001 f876 	bl	800bfac <tcp_pcb_remove>
 800aec0:	4b26      	ldr	r3, [pc, #152]	; (800af5c <tcp_abandon+0x160>)
 800aec2:	2201      	movs	r2, #1
 800aec4:	701a      	strb	r2, [r3, #0]
    if (pcb->unacked != NULL) {
 800aec6:	687b      	ldr	r3, [r7, #4]
 800aec8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800aeca:	2b00      	cmp	r3, #0
 800aecc:	d004      	beq.n	800aed8 <tcp_abandon+0xdc>
      tcp_segs_free(pcb->unacked);
 800aece:	687b      	ldr	r3, [r7, #4]
 800aed0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800aed2:	4618      	mov	r0, r3
 800aed4:	f000 fdc0 	bl	800ba58 <tcp_segs_free>
    if (pcb->unsent != NULL) {
 800aed8:	687b      	ldr	r3, [r7, #4]
 800aeda:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800aedc:	2b00      	cmp	r3, #0
 800aede:	d004      	beq.n	800aeea <tcp_abandon+0xee>
      tcp_segs_free(pcb->unsent);
 800aee0:	687b      	ldr	r3, [r7, #4]
 800aee2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800aee4:	4618      	mov	r0, r3
 800aee6:	f000 fdb7 	bl	800ba58 <tcp_segs_free>
    if (pcb->ooseq != NULL) {
 800aeea:	687b      	ldr	r3, [r7, #4]
 800aeec:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800aeee:	2b00      	cmp	r3, #0
 800aef0:	d004      	beq.n	800aefc <tcp_abandon+0x100>
      tcp_segs_free(pcb->ooseq);
 800aef2:	687b      	ldr	r3, [r7, #4]
 800aef4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800aef6:	4618      	mov	r0, r3
 800aef8:	f000 fdae 	bl	800ba58 <tcp_segs_free>
    if (send_rst) {
 800aefc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aefe:	2b00      	cmp	r3, #0
 800af00:	d00c      	beq.n	800af1c <tcp_abandon+0x120>
      tcp_rst(seqno, ackno, &pcb->local_ip, &pcb->remote_ip, local_port, pcb->remote_port);
 800af02:	687a      	ldr	r2, [r7, #4]
 800af04:	687b      	ldr	r3, [r7, #4]
 800af06:	1d19      	adds	r1, r3, #4
 800af08:	687b      	ldr	r3, [r7, #4]
 800af0a:	8b1b      	ldrh	r3, [r3, #24]
 800af0c:	9301      	str	r3, [sp, #4]
 800af0e:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800af10:	9300      	str	r3, [sp, #0]
 800af12:	460b      	mov	r3, r1
 800af14:	6979      	ldr	r1, [r7, #20]
 800af16:	69b8      	ldr	r0, [r7, #24]
 800af18:	f004 fcd2 	bl	800f8c0 <tcp_rst>
    last_state = pcb->state;
 800af1c:	687b      	ldr	r3, [r7, #4]
 800af1e:	7d1b      	ldrb	r3, [r3, #20]
 800af20:	72fb      	strb	r3, [r7, #11]
    memp_free(MEMP_TCP_PCB, pcb);
 800af22:	6879      	ldr	r1, [r7, #4]
 800af24:	2001      	movs	r0, #1
 800af26:	f7fe fd19 	bl	800995c <memp_free>
    TCP_EVENT_ERR(last_state, errf, errf_arg, ERR_ABRT);
 800af2a:	693b      	ldr	r3, [r7, #16]
 800af2c:	2b00      	cmp	r3, #0
 800af2e:	d004      	beq.n	800af3a <tcp_abandon+0x13e>
 800af30:	693b      	ldr	r3, [r7, #16]
 800af32:	f06f 010c 	mvn.w	r1, #12
 800af36:	68f8      	ldr	r0, [r7, #12]
 800af38:	4798      	blx	r3
}
 800af3a:	bf00      	nop
 800af3c:	3728      	adds	r7, #40	; 0x28
 800af3e:	46bd      	mov	sp, r7
 800af40:	bd80      	pop	{r7, pc}
 800af42:	bf00      	nop
 800af44:	0801ab50 	.word	0x0801ab50
 800af48:	0801abe8 	.word	0x0801abe8
 800af4c:	0801ab8c 	.word	0x0801ab8c
 800af50:	2400f2f8 	.word	0x2400f2f8
 800af54:	2400f2f4 	.word	0x2400f2f4
 800af58:	2400f2e8 	.word	0x2400f2e8
 800af5c:	2400f2e4 	.word	0x2400f2e4

0800af60 <tcp_abort>:
 *
 * @param pcb the tcp pcb to abort
 */
void
tcp_abort(struct tcp_pcb *pcb)
{
 800af60:	b580      	push	{r7, lr}
 800af62:	b082      	sub	sp, #8
 800af64:	af00      	add	r7, sp, #0
 800af66:	6078      	str	r0, [r7, #4]
  tcp_abandon(pcb, 1);
 800af68:	2101      	movs	r1, #1
 800af6a:	6878      	ldr	r0, [r7, #4]
 800af6c:	f7ff ff46 	bl	800adfc <tcp_abandon>
}
 800af70:	bf00      	nop
 800af72:	3708      	adds	r7, #8
 800af74:	46bd      	mov	sp, r7
 800af76:	bd80      	pop	{r7, pc}

0800af78 <tcp_update_rcv_ann_wnd>:
 * Returns how much extra window would be advertised if we sent an
 * update now.
 */
u32_t
tcp_update_rcv_ann_wnd(struct tcp_pcb *pcb)
{
 800af78:	b580      	push	{r7, lr}
 800af7a:	b084      	sub	sp, #16
 800af7c:	af00      	add	r7, sp, #0
 800af7e:	6078      	str	r0, [r7, #4]
  u32_t new_right_edge = pcb->rcv_nxt + pcb->rcv_wnd;
 800af80:	687b      	ldr	r3, [r7, #4]
 800af82:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800af84:	687a      	ldr	r2, [r7, #4]
 800af86:	8d12      	ldrh	r2, [r2, #40]	; 0x28
 800af88:	4413      	add	r3, r2
 800af8a:	60fb      	str	r3, [r7, #12]

  if (TCP_SEQ_GEQ(new_right_edge, pcb->rcv_ann_right_edge + LWIP_MIN((TCP_WND / 2), pcb->mss))) {
 800af8c:	687b      	ldr	r3, [r7, #4]
 800af8e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800af90:	687a      	ldr	r2, [r7, #4]
 800af92:	8e52      	ldrh	r2, [r2, #50]	; 0x32
 800af94:	f640 3168 	movw	r1, #2920	; 0xb68
 800af98:	428a      	cmp	r2, r1
 800af9a:	bf28      	it	cs
 800af9c:	460a      	movcs	r2, r1
 800af9e:	b292      	uxth	r2, r2
 800afa0:	4413      	add	r3, r2
 800afa2:	68fa      	ldr	r2, [r7, #12]
 800afa4:	1ad3      	subs	r3, r2, r3
 800afa6:	2b00      	cmp	r3, #0
 800afa8:	db08      	blt.n	800afbc <tcp_update_rcv_ann_wnd+0x44>
    /* we can advertise more window */
    pcb->rcv_ann_wnd = pcb->rcv_wnd;
 800afaa:	687b      	ldr	r3, [r7, #4]
 800afac:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 800afae:	687b      	ldr	r3, [r7, #4]
 800afb0:	855a      	strh	r2, [r3, #42]	; 0x2a
    return new_right_edge - pcb->rcv_ann_right_edge;
 800afb2:	687b      	ldr	r3, [r7, #4]
 800afb4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800afb6:	68fa      	ldr	r2, [r7, #12]
 800afb8:	1ad3      	subs	r3, r2, r3
 800afba:	e020      	b.n	800affe <tcp_update_rcv_ann_wnd+0x86>
  } else {
    if (TCP_SEQ_GT(pcb->rcv_nxt, pcb->rcv_ann_right_edge)) {
 800afbc:	687b      	ldr	r3, [r7, #4]
 800afbe:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800afc0:	687b      	ldr	r3, [r7, #4]
 800afc2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800afc4:	1ad3      	subs	r3, r2, r3
 800afc6:	2b00      	cmp	r3, #0
 800afc8:	dd03      	ble.n	800afd2 <tcp_update_rcv_ann_wnd+0x5a>
      /* Can happen due to other end sending out of advertised window,
       * but within actual available (but not yet advertised) window */
      pcb->rcv_ann_wnd = 0;
 800afca:	687b      	ldr	r3, [r7, #4]
 800afcc:	2200      	movs	r2, #0
 800afce:	855a      	strh	r2, [r3, #42]	; 0x2a
 800afd0:	e014      	b.n	800affc <tcp_update_rcv_ann_wnd+0x84>
    } else {
      /* keep the right edge of window constant */
      u32_t new_rcv_ann_wnd = pcb->rcv_ann_right_edge - pcb->rcv_nxt;
 800afd2:	687b      	ldr	r3, [r7, #4]
 800afd4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800afd6:	687b      	ldr	r3, [r7, #4]
 800afd8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800afda:	1ad3      	subs	r3, r2, r3
 800afdc:	60bb      	str	r3, [r7, #8]
#if !LWIP_WND_SCALE
      LWIP_ASSERT("new_rcv_ann_wnd <= 0xffff", new_rcv_ann_wnd <= 0xffff);
 800afde:	68bb      	ldr	r3, [r7, #8]
 800afe0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800afe4:	d306      	bcc.n	800aff4 <tcp_update_rcv_ann_wnd+0x7c>
 800afe6:	4b08      	ldr	r3, [pc, #32]	; (800b008 <tcp_update_rcv_ann_wnd+0x90>)
 800afe8:	f44f 7242 	mov.w	r2, #776	; 0x308
 800afec:	4907      	ldr	r1, [pc, #28]	; (800b00c <tcp_update_rcv_ann_wnd+0x94>)
 800afee:	4808      	ldr	r0, [pc, #32]	; (800b010 <tcp_update_rcv_ann_wnd+0x98>)
 800aff0:	f00a fdf0 	bl	8015bd4 <printf_>
#endif
      pcb->rcv_ann_wnd = (tcpwnd_size_t)new_rcv_ann_wnd;
 800aff4:	68bb      	ldr	r3, [r7, #8]
 800aff6:	b29a      	uxth	r2, r3
 800aff8:	687b      	ldr	r3, [r7, #4]
 800affa:	855a      	strh	r2, [r3, #42]	; 0x2a
    }
    return 0;
 800affc:	2300      	movs	r3, #0
  }
}
 800affe:	4618      	mov	r0, r3
 800b000:	3710      	adds	r7, #16
 800b002:	46bd      	mov	sp, r7
 800b004:	bd80      	pop	{r7, pc}
 800b006:	bf00      	nop
 800b008:	0801ab50 	.word	0x0801ab50
 800b00c:	0801ac68 	.word	0x0801ac68
 800b010:	0801ab8c 	.word	0x0801ab8c

0800b014 <tcp_recved>:
 * @param pcb the tcp_pcb for which data is read
 * @param len the amount of bytes that have been read by the application
 */
void
tcp_recved(struct tcp_pcb *pcb, u16_t len)
{
 800b014:	b580      	push	{r7, lr}
 800b016:	b084      	sub	sp, #16
 800b018:	af00      	add	r7, sp, #0
 800b01a:	6078      	str	r0, [r7, #4]
 800b01c:	460b      	mov	r3, r1
 800b01e:	807b      	strh	r3, [r7, #2]
  int wnd_inflation;

  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_recved for listen-pcbs",
 800b020:	687b      	ldr	r3, [r7, #4]
 800b022:	7d1b      	ldrb	r3, [r3, #20]
 800b024:	2b01      	cmp	r3, #1
 800b026:	d106      	bne.n	800b036 <tcp_recved+0x22>
 800b028:	4b24      	ldr	r3, [pc, #144]	; (800b0bc <tcp_recved+0xa8>)
 800b02a:	f44f 7248 	mov.w	r2, #800	; 0x320
 800b02e:	4924      	ldr	r1, [pc, #144]	; (800b0c0 <tcp_recved+0xac>)
 800b030:	4824      	ldr	r0, [pc, #144]	; (800b0c4 <tcp_recved+0xb0>)
 800b032:	f00a fdcf 	bl	8015bd4 <printf_>
    pcb->state != LISTEN);

  pcb->rcv_wnd += len;
 800b036:	687b      	ldr	r3, [r7, #4]
 800b038:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 800b03a:	887b      	ldrh	r3, [r7, #2]
 800b03c:	4413      	add	r3, r2
 800b03e:	b29a      	uxth	r2, r3
 800b040:	687b      	ldr	r3, [r7, #4]
 800b042:	851a      	strh	r2, [r3, #40]	; 0x28
  if (pcb->rcv_wnd > TCP_WND_MAX(pcb)) {
 800b044:	687b      	ldr	r3, [r7, #4]
 800b046:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800b048:	f241 62d0 	movw	r2, #5840	; 0x16d0
 800b04c:	4293      	cmp	r3, r2
 800b04e:	d904      	bls.n	800b05a <tcp_recved+0x46>
    pcb->rcv_wnd = TCP_WND_MAX(pcb);
 800b050:	687b      	ldr	r3, [r7, #4]
 800b052:	f241 62d0 	movw	r2, #5840	; 0x16d0
 800b056:	851a      	strh	r2, [r3, #40]	; 0x28
 800b058:	e017      	b.n	800b08a <tcp_recved+0x76>
  } else if (pcb->rcv_wnd == 0) {
 800b05a:	687b      	ldr	r3, [r7, #4]
 800b05c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800b05e:	2b00      	cmp	r3, #0
 800b060:	d113      	bne.n	800b08a <tcp_recved+0x76>
    /* rcv_wnd overflowed */
    if ((pcb->state == CLOSE_WAIT) || (pcb->state == LAST_ACK)) {
 800b062:	687b      	ldr	r3, [r7, #4]
 800b064:	7d1b      	ldrb	r3, [r3, #20]
 800b066:	2b07      	cmp	r3, #7
 800b068:	d003      	beq.n	800b072 <tcp_recved+0x5e>
 800b06a:	687b      	ldr	r3, [r7, #4]
 800b06c:	7d1b      	ldrb	r3, [r3, #20]
 800b06e:	2b09      	cmp	r3, #9
 800b070:	d104      	bne.n	800b07c <tcp_recved+0x68>
      /* In passive close, we allow this, since the FIN bit is added to rcv_wnd
         by the stack itself, since it is not mandatory for an application
         to call tcp_recved() for the FIN bit, but e.g. the netconn API does so. */
      pcb->rcv_wnd = TCP_WND_MAX(pcb);
 800b072:	687b      	ldr	r3, [r7, #4]
 800b074:	f241 62d0 	movw	r2, #5840	; 0x16d0
 800b078:	851a      	strh	r2, [r3, #40]	; 0x28
 800b07a:	e006      	b.n	800b08a <tcp_recved+0x76>
    } else {
      LWIP_ASSERT("tcp_recved: len wrapped rcv_wnd\n", 0);
 800b07c:	4b0f      	ldr	r3, [pc, #60]	; (800b0bc <tcp_recved+0xa8>)
 800b07e:	f240 322d 	movw	r2, #813	; 0x32d
 800b082:	4911      	ldr	r1, [pc, #68]	; (800b0c8 <tcp_recved+0xb4>)
 800b084:	480f      	ldr	r0, [pc, #60]	; (800b0c4 <tcp_recved+0xb0>)
 800b086:	f00a fda5 	bl	8015bd4 <printf_>
    }
  }

  wnd_inflation = tcp_update_rcv_ann_wnd(pcb);
 800b08a:	6878      	ldr	r0, [r7, #4]
 800b08c:	f7ff ff74 	bl	800af78 <tcp_update_rcv_ann_wnd>
 800b090:	4603      	mov	r3, r0
 800b092:	60fb      	str	r3, [r7, #12]

  /* If the change in the right edge of window is significant (default
   * watermark is TCP_WND/4), then send an explicit update now.
   * Otherwise wait for a packet to be sent in the normal course of
   * events (or more window to be available later) */
  if (wnd_inflation >= TCP_WND_UPDATE_THRESHOLD) {
 800b094:	68fb      	ldr	r3, [r7, #12]
 800b096:	f240 52b3 	movw	r2, #1459	; 0x5b3
 800b09a:	4293      	cmp	r3, r2
 800b09c:	dd09      	ble.n	800b0b2 <tcp_recved+0x9e>
    tcp_ack_now(pcb);
 800b09e:	687b      	ldr	r3, [r7, #4]
 800b0a0:	7e9b      	ldrb	r3, [r3, #26]
 800b0a2:	f043 0302 	orr.w	r3, r3, #2
 800b0a6:	b2da      	uxtb	r2, r3
 800b0a8:	687b      	ldr	r3, [r7, #4]
 800b0aa:	769a      	strb	r2, [r3, #26]
    tcp_output(pcb);
 800b0ac:	6878      	ldr	r0, [r7, #4]
 800b0ae:	f004 f97d 	bl	800f3ac <tcp_output>
  }

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_recved: received %"U16_F" bytes, wnd %"TCPWNDSIZE_F" (%"TCPWNDSIZE_F").\n",
         len, pcb->rcv_wnd, (u16_t)(TCP_WND_MAX(pcb) - pcb->rcv_wnd)));
}
 800b0b2:	bf00      	nop
 800b0b4:	3710      	adds	r7, #16
 800b0b6:	46bd      	mov	sp, r7
 800b0b8:	bd80      	pop	{r7, pc}
 800b0ba:	bf00      	nop
 800b0bc:	0801ab50 	.word	0x0801ab50
 800b0c0:	0801ac84 	.word	0x0801ac84
 800b0c4:	0801ab8c 	.word	0x0801ab8c
 800b0c8:	0801acac 	.word	0x0801acac

0800b0cc <tcp_new_port>:
 *
 * @return a new (free) local TCP port number
 */
static u16_t
tcp_new_port(void)
{
 800b0cc:	b480      	push	{r7}
 800b0ce:	b083      	sub	sp, #12
 800b0d0:	af00      	add	r7, sp, #0
  u8_t i;
  u16_t n = 0;
 800b0d2:	2300      	movs	r3, #0
 800b0d4:	80bb      	strh	r3, [r7, #4]
  struct tcp_pcb *pcb;

again:
  if (tcp_port++ == TCP_LOCAL_PORT_RANGE_END) {
 800b0d6:	4b1d      	ldr	r3, [pc, #116]	; (800b14c <tcp_new_port+0x80>)
 800b0d8:	881b      	ldrh	r3, [r3, #0]
 800b0da:	1c5a      	adds	r2, r3, #1
 800b0dc:	b291      	uxth	r1, r2
 800b0de:	4a1b      	ldr	r2, [pc, #108]	; (800b14c <tcp_new_port+0x80>)
 800b0e0:	8011      	strh	r1, [r2, #0]
 800b0e2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800b0e6:	4293      	cmp	r3, r2
 800b0e8:	d103      	bne.n	800b0f2 <tcp_new_port+0x26>
    tcp_port = TCP_LOCAL_PORT_RANGE_START;
 800b0ea:	4b18      	ldr	r3, [pc, #96]	; (800b14c <tcp_new_port+0x80>)
 800b0ec:	f44f 4240 	mov.w	r2, #49152	; 0xc000
 800b0f0:	801a      	strh	r2, [r3, #0]
  }
  /* Check all PCB lists. */
  for (i = 0; i < NUM_TCP_PCB_LISTS; i++) {
 800b0f2:	2300      	movs	r3, #0
 800b0f4:	71fb      	strb	r3, [r7, #7]
 800b0f6:	e01e      	b.n	800b136 <tcp_new_port+0x6a>
    for (pcb = *tcp_pcb_lists[i]; pcb != NULL; pcb = pcb->next) {
 800b0f8:	79fb      	ldrb	r3, [r7, #7]
 800b0fa:	4a15      	ldr	r2, [pc, #84]	; (800b150 <tcp_new_port+0x84>)
 800b0fc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800b100:	681b      	ldr	r3, [r3, #0]
 800b102:	603b      	str	r3, [r7, #0]
 800b104:	e011      	b.n	800b12a <tcp_new_port+0x5e>
      if (pcb->local_port == tcp_port) {
 800b106:	683b      	ldr	r3, [r7, #0]
 800b108:	8ada      	ldrh	r2, [r3, #22]
 800b10a:	4b10      	ldr	r3, [pc, #64]	; (800b14c <tcp_new_port+0x80>)
 800b10c:	881b      	ldrh	r3, [r3, #0]
 800b10e:	429a      	cmp	r2, r3
 800b110:	d108      	bne.n	800b124 <tcp_new_port+0x58>
        if (++n > (TCP_LOCAL_PORT_RANGE_END - TCP_LOCAL_PORT_RANGE_START)) {
 800b112:	88bb      	ldrh	r3, [r7, #4]
 800b114:	3301      	adds	r3, #1
 800b116:	80bb      	strh	r3, [r7, #4]
 800b118:	88bb      	ldrh	r3, [r7, #4]
 800b11a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800b11e:	d3da      	bcc.n	800b0d6 <tcp_new_port+0xa>
          return 0;
 800b120:	2300      	movs	r3, #0
 800b122:	e00d      	b.n	800b140 <tcp_new_port+0x74>
    for (pcb = *tcp_pcb_lists[i]; pcb != NULL; pcb = pcb->next) {
 800b124:	683b      	ldr	r3, [r7, #0]
 800b126:	68db      	ldr	r3, [r3, #12]
 800b128:	603b      	str	r3, [r7, #0]
 800b12a:	683b      	ldr	r3, [r7, #0]
 800b12c:	2b00      	cmp	r3, #0
 800b12e:	d1ea      	bne.n	800b106 <tcp_new_port+0x3a>
  for (i = 0; i < NUM_TCP_PCB_LISTS; i++) {
 800b130:	79fb      	ldrb	r3, [r7, #7]
 800b132:	3301      	adds	r3, #1
 800b134:	71fb      	strb	r3, [r7, #7]
 800b136:	79fb      	ldrb	r3, [r7, #7]
 800b138:	2b03      	cmp	r3, #3
 800b13a:	d9dd      	bls.n	800b0f8 <tcp_new_port+0x2c>
        }
        goto again;
      }
    }
  }
  return tcp_port;
 800b13c:	4b03      	ldr	r3, [pc, #12]	; (800b14c <tcp_new_port+0x80>)
 800b13e:	881b      	ldrh	r3, [r3, #0]
}
 800b140:	4618      	mov	r0, r3
 800b142:	370c      	adds	r7, #12
 800b144:	46bd      	mov	sp, r7
 800b146:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b14a:	4770      	bx	lr
 800b14c:	2400000c 	.word	0x2400000c
 800b150:	0801c138 	.word	0x0801c138

0800b154 <tcp_connect>:
 *         other err_t values if connect request couldn't be sent
 */
err_t
tcp_connect(struct tcp_pcb *pcb, const ip_addr_t *ipaddr, u16_t port,
      tcp_connected_fn connected)
{
 800b154:	b580      	push	{r7, lr}
 800b156:	b08a      	sub	sp, #40	; 0x28
 800b158:	af00      	add	r7, sp, #0
 800b15a:	60f8      	str	r0, [r7, #12]
 800b15c:	60b9      	str	r1, [r7, #8]
 800b15e:	603b      	str	r3, [r7, #0]
 800b160:	4613      	mov	r3, r2
 800b162:	80fb      	strh	r3, [r7, #6]
  err_t ret;
  u32_t iss;
  u16_t old_local_port;

  if ((pcb == NULL) || (ipaddr == NULL)) {
 800b164:	68fb      	ldr	r3, [r7, #12]
 800b166:	2b00      	cmp	r3, #0
 800b168:	d002      	beq.n	800b170 <tcp_connect+0x1c>
 800b16a:	68bb      	ldr	r3, [r7, #8]
 800b16c:	2b00      	cmp	r3, #0
 800b16e:	d102      	bne.n	800b176 <tcp_connect+0x22>
    return ERR_VAL;
 800b170:	f06f 0305 	mvn.w	r3, #5
 800b174:	e0d1      	b.n	800b31a <tcp_connect+0x1c6>
  }

  LWIP_ERROR("tcp_connect: can only connect from state CLOSED", pcb->state == CLOSED, return ERR_ISCONN);
 800b176:	68fb      	ldr	r3, [r7, #12]
 800b178:	7d1b      	ldrb	r3, [r3, #20]
 800b17a:	2b00      	cmp	r3, #0
 800b17c:	d009      	beq.n	800b192 <tcp_connect+0x3e>
 800b17e:	4b69      	ldr	r3, [pc, #420]	; (800b324 <tcp_connect+0x1d0>)
 800b180:	f44f 725e 	mov.w	r2, #888	; 0x378
 800b184:	4968      	ldr	r1, [pc, #416]	; (800b328 <tcp_connect+0x1d4>)
 800b186:	4869      	ldr	r0, [pc, #420]	; (800b32c <tcp_connect+0x1d8>)
 800b188:	f00a fd24 	bl	8015bd4 <printf_>
 800b18c:	f06f 0309 	mvn.w	r3, #9
 800b190:	e0c3      	b.n	800b31a <tcp_connect+0x1c6>

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_connect to port %"U16_F"\n", port));
  ip_addr_set(&pcb->remote_ip, ipaddr);
 800b192:	68bb      	ldr	r3, [r7, #8]
 800b194:	2b00      	cmp	r3, #0
 800b196:	d002      	beq.n	800b19e <tcp_connect+0x4a>
 800b198:	68bb      	ldr	r3, [r7, #8]
 800b19a:	681b      	ldr	r3, [r3, #0]
 800b19c:	e000      	b.n	800b1a0 <tcp_connect+0x4c>
 800b19e:	2300      	movs	r3, #0
 800b1a0:	68fa      	ldr	r2, [r7, #12]
 800b1a2:	6053      	str	r3, [r2, #4]
  pcb->remote_port = port;
 800b1a4:	68fb      	ldr	r3, [r7, #12]
 800b1a6:	88fa      	ldrh	r2, [r7, #6]
 800b1a8:	831a      	strh	r2, [r3, #24]

  /* check if we have a route to the remote host */
  if (ip_addr_isany(&pcb->local_ip)) {
 800b1aa:	68fb      	ldr	r3, [r7, #12]
 800b1ac:	2b00      	cmp	r3, #0
 800b1ae:	d003      	beq.n	800b1b8 <tcp_connect+0x64>
 800b1b0:	68fb      	ldr	r3, [r7, #12]
 800b1b2:	681b      	ldr	r3, [r3, #0]
 800b1b4:	2b00      	cmp	r3, #0
 800b1b6:	d11a      	bne.n	800b1ee <tcp_connect+0x9a>
    /* no local IP address set, yet. */
    struct netif *netif;
    const ip_addr_t *local_ip;
    ip_route_get_local_ip(&pcb->local_ip, &pcb->remote_ip, netif, local_ip);
 800b1b8:	68fb      	ldr	r3, [r7, #12]
 800b1ba:	3304      	adds	r3, #4
 800b1bc:	4618      	mov	r0, r3
 800b1be:	f006 fc3d 	bl	8011a3c <ip4_route>
 800b1c2:	6238      	str	r0, [r7, #32]
 800b1c4:	6a3b      	ldr	r3, [r7, #32]
 800b1c6:	2b00      	cmp	r3, #0
 800b1c8:	d002      	beq.n	800b1d0 <tcp_connect+0x7c>
 800b1ca:	6a3b      	ldr	r3, [r7, #32]
 800b1cc:	3304      	adds	r3, #4
 800b1ce:	e000      	b.n	800b1d2 <tcp_connect+0x7e>
 800b1d0:	2300      	movs	r3, #0
 800b1d2:	61fb      	str	r3, [r7, #28]
    if ((netif == NULL) || (local_ip == NULL)) {
 800b1d4:	6a3b      	ldr	r3, [r7, #32]
 800b1d6:	2b00      	cmp	r3, #0
 800b1d8:	d002      	beq.n	800b1e0 <tcp_connect+0x8c>
 800b1da:	69fb      	ldr	r3, [r7, #28]
 800b1dc:	2b00      	cmp	r3, #0
 800b1de:	d102      	bne.n	800b1e6 <tcp_connect+0x92>
      /* Don't even try to send a SYN packet if we have no route
         since that will fail. */
      return ERR_RTE;
 800b1e0:	f06f 0303 	mvn.w	r3, #3
 800b1e4:	e099      	b.n	800b31a <tcp_connect+0x1c6>
    }
    /* Use the address as local address of the pcb. */
    ip_addr_copy(pcb->local_ip, *local_ip);
 800b1e6:	69fb      	ldr	r3, [r7, #28]
 800b1e8:	681a      	ldr	r2, [r3, #0]
 800b1ea:	68fb      	ldr	r3, [r7, #12]
 800b1ec:	601a      	str	r2, [r3, #0]
  }

  old_local_port = pcb->local_port;
 800b1ee:	68fb      	ldr	r3, [r7, #12]
 800b1f0:	8adb      	ldrh	r3, [r3, #22]
 800b1f2:	837b      	strh	r3, [r7, #26]
  if (pcb->local_port == 0) {
 800b1f4:	68fb      	ldr	r3, [r7, #12]
 800b1f6:	8adb      	ldrh	r3, [r3, #22]
 800b1f8:	2b00      	cmp	r3, #0
 800b1fa:	d10c      	bne.n	800b216 <tcp_connect+0xc2>
    pcb->local_port = tcp_new_port();
 800b1fc:	f7ff ff66 	bl	800b0cc <tcp_new_port>
 800b200:	4603      	mov	r3, r0
 800b202:	461a      	mov	r2, r3
 800b204:	68fb      	ldr	r3, [r7, #12]
 800b206:	82da      	strh	r2, [r3, #22]
    if (pcb->local_port == 0) {
 800b208:	68fb      	ldr	r3, [r7, #12]
 800b20a:	8adb      	ldrh	r3, [r3, #22]
 800b20c:	2b00      	cmp	r3, #0
 800b20e:	d102      	bne.n	800b216 <tcp_connect+0xc2>
      return ERR_BUF;
 800b210:	f06f 0301 	mvn.w	r3, #1
 800b214:	e081      	b.n	800b31a <tcp_connect+0x1c6>
      }
    }
#endif /* SO_REUSE */
  }

  iss = tcp_next_iss(pcb);
 800b216:	68f8      	ldr	r0, [r7, #12]
 800b218:	f000 ff44 	bl	800c0a4 <tcp_next_iss>
 800b21c:	6178      	str	r0, [r7, #20]
  pcb->rcv_nxt = 0;
 800b21e:	68fb      	ldr	r3, [r7, #12]
 800b220:	2200      	movs	r2, #0
 800b222:	625a      	str	r2, [r3, #36]	; 0x24
  pcb->snd_nxt = iss;
 800b224:	68fb      	ldr	r3, [r7, #12]
 800b226:	697a      	ldr	r2, [r7, #20]
 800b228:	64da      	str	r2, [r3, #76]	; 0x4c
  pcb->lastack = iss - 1;
 800b22a:	697b      	ldr	r3, [r7, #20]
 800b22c:	1e5a      	subs	r2, r3, #1
 800b22e:	68fb      	ldr	r3, [r7, #12]
 800b230:	645a      	str	r2, [r3, #68]	; 0x44
  pcb->snd_wl2 = iss - 1;
 800b232:	697b      	ldr	r3, [r7, #20]
 800b234:	1e5a      	subs	r2, r3, #1
 800b236:	68fb      	ldr	r3, [r7, #12]
 800b238:	655a      	str	r2, [r3, #84]	; 0x54
  pcb->snd_lbb = iss - 1;
 800b23a:	697b      	ldr	r3, [r7, #20]
 800b23c:	1e5a      	subs	r2, r3, #1
 800b23e:	68fb      	ldr	r3, [r7, #12]
 800b240:	659a      	str	r2, [r3, #88]	; 0x58
  /* Start with a window that does not need scaling. When window scaling is
     enabled and used, the window is enlarged when both sides agree on scaling. */
  pcb->rcv_wnd = pcb->rcv_ann_wnd = TCPWND_MIN16(TCP_WND);
 800b242:	68fb      	ldr	r3, [r7, #12]
 800b244:	f241 62d0 	movw	r2, #5840	; 0x16d0
 800b248:	855a      	strh	r2, [r3, #42]	; 0x2a
 800b24a:	68fb      	ldr	r3, [r7, #12]
 800b24c:	8d5a      	ldrh	r2, [r3, #42]	; 0x2a
 800b24e:	68fb      	ldr	r3, [r7, #12]
 800b250:	851a      	strh	r2, [r3, #40]	; 0x28
  pcb->rcv_ann_right_edge = pcb->rcv_nxt;
 800b252:	68fb      	ldr	r3, [r7, #12]
 800b254:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800b256:	68fb      	ldr	r3, [r7, #12]
 800b258:	62da      	str	r2, [r3, #44]	; 0x2c
  pcb->snd_wnd = TCP_WND;
 800b25a:	68fb      	ldr	r3, [r7, #12]
 800b25c:	f241 62d0 	movw	r2, #5840	; 0x16d0
 800b260:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
  /* As initial send MSS, we use TCP_MSS but limit it to 536.
     The send MSS is updated when an MSS option is received. */
  pcb->mss = INITIAL_MSS;
 800b264:	68fb      	ldr	r3, [r7, #12]
 800b266:	f44f 7206 	mov.w	r2, #536	; 0x218
 800b26a:	865a      	strh	r2, [r3, #50]	; 0x32
#if TCP_CALCULATE_EFF_SEND_MSS
  pcb->mss = tcp_eff_send_mss(pcb->mss, &pcb->local_ip, &pcb->remote_ip);
 800b26c:	68fb      	ldr	r3, [r7, #12]
 800b26e:	8e5a      	ldrh	r2, [r3, #50]	; 0x32
 800b270:	68fb      	ldr	r3, [r7, #12]
 800b272:	3304      	adds	r3, #4
 800b274:	4619      	mov	r1, r3
 800b276:	4610      	mov	r0, r2
 800b278:	f000 ff2c 	bl	800c0d4 <tcp_eff_send_mss_impl>
 800b27c:	4603      	mov	r3, r0
 800b27e:	461a      	mov	r2, r3
 800b280:	68fb      	ldr	r3, [r7, #12]
 800b282:	865a      	strh	r2, [r3, #50]	; 0x32
#endif /* TCP_CALCULATE_EFF_SEND_MSS */
  pcb->cwnd = 1;
 800b284:	68fb      	ldr	r3, [r7, #12]
 800b286:	2201      	movs	r2, #1
 800b288:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
#if LWIP_CALLBACK_API
  pcb->connected = connected;
 800b28c:	68fb      	ldr	r3, [r7, #12]
 800b28e:	683a      	ldr	r2, [r7, #0]
 800b290:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
#else /* LWIP_CALLBACK_API */
  LWIP_UNUSED_ARG(connected);
#endif /* LWIP_CALLBACK_API */

  /* Send a SYN together with the MSS option. */
  ret = tcp_enqueue_flags(pcb, TCP_SYN);
 800b294:	2102      	movs	r1, #2
 800b296:	68f8      	ldr	r0, [r7, #12]
 800b298:	f003 ff30 	bl	800f0fc <tcp_enqueue_flags>
 800b29c:	4603      	mov	r3, r0
 800b29e:	74fb      	strb	r3, [r7, #19]
  if (ret == ERR_OK) {
 800b2a0:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800b2a4:	2b00      	cmp	r3, #0
 800b2a6:	d136      	bne.n	800b316 <tcp_connect+0x1c2>
    /* SYN segment was enqueued, changed the pcbs state now */
    pcb->state = SYN_SENT;
 800b2a8:	68fb      	ldr	r3, [r7, #12]
 800b2aa:	2202      	movs	r2, #2
 800b2ac:	751a      	strb	r2, [r3, #20]
    if (old_local_port != 0) {
 800b2ae:	8b7b      	ldrh	r3, [r7, #26]
 800b2b0:	2b00      	cmp	r3, #0
 800b2b2:	d021      	beq.n	800b2f8 <tcp_connect+0x1a4>
      TCP_RMV(&tcp_bound_pcbs, pcb);
 800b2b4:	4b1e      	ldr	r3, [pc, #120]	; (800b330 <tcp_connect+0x1dc>)
 800b2b6:	681b      	ldr	r3, [r3, #0]
 800b2b8:	68fa      	ldr	r2, [r7, #12]
 800b2ba:	429a      	cmp	r2, r3
 800b2bc:	d105      	bne.n	800b2ca <tcp_connect+0x176>
 800b2be:	4b1c      	ldr	r3, [pc, #112]	; (800b330 <tcp_connect+0x1dc>)
 800b2c0:	681b      	ldr	r3, [r3, #0]
 800b2c2:	68db      	ldr	r3, [r3, #12]
 800b2c4:	4a1a      	ldr	r2, [pc, #104]	; (800b330 <tcp_connect+0x1dc>)
 800b2c6:	6013      	str	r3, [r2, #0]
 800b2c8:	e013      	b.n	800b2f2 <tcp_connect+0x19e>
 800b2ca:	4b19      	ldr	r3, [pc, #100]	; (800b330 <tcp_connect+0x1dc>)
 800b2cc:	681b      	ldr	r3, [r3, #0]
 800b2ce:	627b      	str	r3, [r7, #36]	; 0x24
 800b2d0:	e00c      	b.n	800b2ec <tcp_connect+0x198>
 800b2d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b2d4:	68db      	ldr	r3, [r3, #12]
 800b2d6:	68fa      	ldr	r2, [r7, #12]
 800b2d8:	429a      	cmp	r2, r3
 800b2da:	d104      	bne.n	800b2e6 <tcp_connect+0x192>
 800b2dc:	68fb      	ldr	r3, [r7, #12]
 800b2de:	68da      	ldr	r2, [r3, #12]
 800b2e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b2e2:	60da      	str	r2, [r3, #12]
 800b2e4:	e005      	b.n	800b2f2 <tcp_connect+0x19e>
 800b2e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b2e8:	68db      	ldr	r3, [r3, #12]
 800b2ea:	627b      	str	r3, [r7, #36]	; 0x24
 800b2ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b2ee:	2b00      	cmp	r3, #0
 800b2f0:	d1ef      	bne.n	800b2d2 <tcp_connect+0x17e>
 800b2f2:	68fb      	ldr	r3, [r7, #12]
 800b2f4:	2200      	movs	r2, #0
 800b2f6:	60da      	str	r2, [r3, #12]
    }
    TCP_REG_ACTIVE(pcb);
 800b2f8:	4b0e      	ldr	r3, [pc, #56]	; (800b334 <tcp_connect+0x1e0>)
 800b2fa:	681a      	ldr	r2, [r3, #0]
 800b2fc:	68fb      	ldr	r3, [r7, #12]
 800b2fe:	60da      	str	r2, [r3, #12]
 800b300:	4a0c      	ldr	r2, [pc, #48]	; (800b334 <tcp_connect+0x1e0>)
 800b302:	68fb      	ldr	r3, [r7, #12]
 800b304:	6013      	str	r3, [r2, #0]
 800b306:	f004 fd2d 	bl	800fd64 <tcp_timer_needed>
 800b30a:	4b0b      	ldr	r3, [pc, #44]	; (800b338 <tcp_connect+0x1e4>)
 800b30c:	2201      	movs	r2, #1
 800b30e:	701a      	strb	r2, [r3, #0]
    MIB2_STATS_INC(mib2.tcpactiveopens);

    tcp_output(pcb);
 800b310:	68f8      	ldr	r0, [r7, #12]
 800b312:	f004 f84b 	bl	800f3ac <tcp_output>
  }
  return ret;
 800b316:	f997 3013 	ldrsb.w	r3, [r7, #19]
}
 800b31a:	4618      	mov	r0, r3
 800b31c:	3728      	adds	r7, #40	; 0x28
 800b31e:	46bd      	mov	sp, r7
 800b320:	bd80      	pop	{r7, pc}
 800b322:	bf00      	nop
 800b324:	0801ab50 	.word	0x0801ab50
 800b328:	0801acd0 	.word	0x0801acd0
 800b32c:	0801ab8c 	.word	0x0801ab8c
 800b330:	2400f2f4 	.word	0x2400f2f4
 800b334:	2400f2e8 	.word	0x2400f2e8
 800b338:	2400f2e4 	.word	0x2400f2e4

0800b33c <tcp_slowtmr>:
 *
 * Automatically called from tcp_tmr().
 */
void
tcp_slowtmr(void)
{
 800b33c:	b5b0      	push	{r4, r5, r7, lr}
 800b33e:	b08c      	sub	sp, #48	; 0x30
 800b340:	af02      	add	r7, sp, #8
  tcpwnd_size_t eff_wnd;
  u8_t pcb_remove;      /* flag if a PCB should be removed */
  u8_t pcb_reset;       /* flag if a RST should be sent when removing */
  err_t err;

  err = ERR_OK;
 800b342:	2300      	movs	r3, #0
 800b344:	777b      	strb	r3, [r7, #29]

  ++tcp_ticks;
 800b346:	4b96      	ldr	r3, [pc, #600]	; (800b5a0 <tcp_slowtmr+0x264>)
 800b348:	681b      	ldr	r3, [r3, #0]
 800b34a:	3301      	adds	r3, #1
 800b34c:	4a94      	ldr	r2, [pc, #592]	; (800b5a0 <tcp_slowtmr+0x264>)
 800b34e:	6013      	str	r3, [r2, #0]
  ++tcp_timer_ctr;
 800b350:	4b94      	ldr	r3, [pc, #592]	; (800b5a4 <tcp_slowtmr+0x268>)
 800b352:	781b      	ldrb	r3, [r3, #0]
 800b354:	3301      	adds	r3, #1
 800b356:	b2da      	uxtb	r2, r3
 800b358:	4b92      	ldr	r3, [pc, #584]	; (800b5a4 <tcp_slowtmr+0x268>)
 800b35a:	701a      	strb	r2, [r3, #0]

tcp_slowtmr_start:
  /* Steps through all of the active PCBs. */
  prev = NULL;
 800b35c:	2300      	movs	r3, #0
 800b35e:	623b      	str	r3, [r7, #32]
  pcb = tcp_active_pcbs;
 800b360:	4b91      	ldr	r3, [pc, #580]	; (800b5a8 <tcp_slowtmr+0x26c>)
 800b362:	681b      	ldr	r3, [r3, #0]
 800b364:	627b      	str	r3, [r7, #36]	; 0x24
  if (pcb == NULL) {
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: no active pcbs\n"));
  }
  while (pcb != NULL) {
 800b366:	e227      	b.n	800b7b8 <tcp_slowtmr+0x47c>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: processing active pcb\n"));
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != CLOSED\n", pcb->state != CLOSED);
 800b368:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b36a:	7d1b      	ldrb	r3, [r3, #20]
 800b36c:	2b00      	cmp	r3, #0
 800b36e:	d106      	bne.n	800b37e <tcp_slowtmr+0x42>
 800b370:	4b8e      	ldr	r3, [pc, #568]	; (800b5ac <tcp_slowtmr+0x270>)
 800b372:	f44f 727c 	mov.w	r2, #1008	; 0x3f0
 800b376:	498e      	ldr	r1, [pc, #568]	; (800b5b0 <tcp_slowtmr+0x274>)
 800b378:	488e      	ldr	r0, [pc, #568]	; (800b5b4 <tcp_slowtmr+0x278>)
 800b37a:	f00a fc2b 	bl	8015bd4 <printf_>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != LISTEN\n", pcb->state != LISTEN);
 800b37e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b380:	7d1b      	ldrb	r3, [r3, #20]
 800b382:	2b01      	cmp	r3, #1
 800b384:	d106      	bne.n	800b394 <tcp_slowtmr+0x58>
 800b386:	4b89      	ldr	r3, [pc, #548]	; (800b5ac <tcp_slowtmr+0x270>)
 800b388:	f240 32f1 	movw	r2, #1009	; 0x3f1
 800b38c:	498a      	ldr	r1, [pc, #552]	; (800b5b8 <tcp_slowtmr+0x27c>)
 800b38e:	4889      	ldr	r0, [pc, #548]	; (800b5b4 <tcp_slowtmr+0x278>)
 800b390:	f00a fc20 	bl	8015bd4 <printf_>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != TIME-WAIT\n", pcb->state != TIME_WAIT);
 800b394:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b396:	7d1b      	ldrb	r3, [r3, #20]
 800b398:	2b0a      	cmp	r3, #10
 800b39a:	d106      	bne.n	800b3aa <tcp_slowtmr+0x6e>
 800b39c:	4b83      	ldr	r3, [pc, #524]	; (800b5ac <tcp_slowtmr+0x270>)
 800b39e:	f240 32f2 	movw	r2, #1010	; 0x3f2
 800b3a2:	4986      	ldr	r1, [pc, #536]	; (800b5bc <tcp_slowtmr+0x280>)
 800b3a4:	4883      	ldr	r0, [pc, #524]	; (800b5b4 <tcp_slowtmr+0x278>)
 800b3a6:	f00a fc15 	bl	8015bd4 <printf_>
    if (pcb->last_timer == tcp_timer_ctr) {
 800b3aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b3ac:	7f5a      	ldrb	r2, [r3, #29]
 800b3ae:	4b7d      	ldr	r3, [pc, #500]	; (800b5a4 <tcp_slowtmr+0x268>)
 800b3b0:	781b      	ldrb	r3, [r3, #0]
 800b3b2:	429a      	cmp	r2, r3
 800b3b4:	d103      	bne.n	800b3be <tcp_slowtmr+0x82>
      /* skip this pcb, we have already processed it */
      pcb = pcb->next;
 800b3b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b3b8:	68db      	ldr	r3, [r3, #12]
 800b3ba:	627b      	str	r3, [r7, #36]	; 0x24
      continue;
 800b3bc:	e1fc      	b.n	800b7b8 <tcp_slowtmr+0x47c>
    }
    pcb->last_timer = tcp_timer_ctr;
 800b3be:	4b79      	ldr	r3, [pc, #484]	; (800b5a4 <tcp_slowtmr+0x268>)
 800b3c0:	781a      	ldrb	r2, [r3, #0]
 800b3c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b3c4:	775a      	strb	r2, [r3, #29]

    pcb_remove = 0;
 800b3c6:	2300      	movs	r3, #0
 800b3c8:	77fb      	strb	r3, [r7, #31]
    pcb_reset = 0;
 800b3ca:	2300      	movs	r3, #0
 800b3cc:	77bb      	strb	r3, [r7, #30]

    if (pcb->state == SYN_SENT && pcb->nrtx >= TCP_SYNMAXRTX) {
 800b3ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b3d0:	7d1b      	ldrb	r3, [r3, #20]
 800b3d2:	2b02      	cmp	r3, #2
 800b3d4:	d108      	bne.n	800b3e8 <tcp_slowtmr+0xac>
 800b3d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b3d8:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800b3dc:	2b05      	cmp	r3, #5
 800b3de:	d903      	bls.n	800b3e8 <tcp_slowtmr+0xac>
      ++pcb_remove;
 800b3e0:	7ffb      	ldrb	r3, [r7, #31]
 800b3e2:	3301      	adds	r3, #1
 800b3e4:	77fb      	strb	r3, [r7, #31]
 800b3e6:	e0a2      	b.n	800b52e <tcp_slowtmr+0x1f2>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: max SYN retries reached\n"));
    }
    else if (pcb->nrtx >= TCP_MAXRTX) {
 800b3e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b3ea:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800b3ee:	2b0b      	cmp	r3, #11
 800b3f0:	d903      	bls.n	800b3fa <tcp_slowtmr+0xbe>
      ++pcb_remove;
 800b3f2:	7ffb      	ldrb	r3, [r7, #31]
 800b3f4:	3301      	adds	r3, #1
 800b3f6:	77fb      	strb	r3, [r7, #31]
 800b3f8:	e099      	b.n	800b52e <tcp_slowtmr+0x1f2>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: max DATA retries reached\n"));
    } else {
      if (pcb->persist_backoff > 0) {
 800b3fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b3fc:	f893 3095 	ldrb.w	r3, [r3, #149]	; 0x95
 800b400:	2b00      	cmp	r3, #0
 800b402:	d032      	beq.n	800b46a <tcp_slowtmr+0x12e>
        /* If snd_wnd is zero, use persist timer to send 1 byte probes
         * instead of using the standard retransmission mechanism. */
        u8_t backoff_cnt = tcp_persist_backoff[pcb->persist_backoff-1];
 800b404:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b406:	f893 3095 	ldrb.w	r3, [r3, #149]	; 0x95
 800b40a:	3b01      	subs	r3, #1
 800b40c:	4a6c      	ldr	r2, [pc, #432]	; (800b5c0 <tcp_slowtmr+0x284>)
 800b40e:	5cd3      	ldrb	r3, [r2, r3]
 800b410:	74fb      	strb	r3, [r7, #19]
        if (pcb->persist_cnt < backoff_cnt) {
 800b412:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b414:	f893 3094 	ldrb.w	r3, [r3, #148]	; 0x94
 800b418:	7cfa      	ldrb	r2, [r7, #19]
 800b41a:	429a      	cmp	r2, r3
 800b41c:	d907      	bls.n	800b42e <tcp_slowtmr+0xf2>
          pcb->persist_cnt++;
 800b41e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b420:	f893 3094 	ldrb.w	r3, [r3, #148]	; 0x94
 800b424:	3301      	adds	r3, #1
 800b426:	b2da      	uxtb	r2, r3
 800b428:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b42a:	f883 2094 	strb.w	r2, [r3, #148]	; 0x94
        }
        if (pcb->persist_cnt >= backoff_cnt) {
 800b42e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b430:	f893 3094 	ldrb.w	r3, [r3, #148]	; 0x94
 800b434:	7cfa      	ldrb	r2, [r7, #19]
 800b436:	429a      	cmp	r2, r3
 800b438:	d879      	bhi.n	800b52e <tcp_slowtmr+0x1f2>
          if (tcp_zero_window_probe(pcb) == ERR_OK) {
 800b43a:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800b43c:	f004 fbd2 	bl	800fbe4 <tcp_zero_window_probe>
 800b440:	4603      	mov	r3, r0
 800b442:	2b00      	cmp	r3, #0
 800b444:	d173      	bne.n	800b52e <tcp_slowtmr+0x1f2>
            pcb->persist_cnt = 0;
 800b446:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b448:	2200      	movs	r2, #0
 800b44a:	f883 2094 	strb.w	r2, [r3, #148]	; 0x94
            if (pcb->persist_backoff < sizeof(tcp_persist_backoff)) {
 800b44e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b450:	f893 3095 	ldrb.w	r3, [r3, #149]	; 0x95
 800b454:	2b06      	cmp	r3, #6
 800b456:	d86a      	bhi.n	800b52e <tcp_slowtmr+0x1f2>
              pcb->persist_backoff++;
 800b458:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b45a:	f893 3095 	ldrb.w	r3, [r3, #149]	; 0x95
 800b45e:	3301      	adds	r3, #1
 800b460:	b2da      	uxtb	r2, r3
 800b462:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b464:	f883 2095 	strb.w	r2, [r3, #149]	; 0x95
 800b468:	e061      	b.n	800b52e <tcp_slowtmr+0x1f2>
            }
          }
        }
      } else {
        /* Increase the retransmission timer if it is running */
        if (pcb->rtime >= 0) {
 800b46a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b46c:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 800b470:	2b00      	cmp	r3, #0
 800b472:	db08      	blt.n	800b486 <tcp_slowtmr+0x14a>
          ++pcb->rtime;
 800b474:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b476:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 800b47a:	b29b      	uxth	r3, r3
 800b47c:	3301      	adds	r3, #1
 800b47e:	b29b      	uxth	r3, r3
 800b480:	b21a      	sxth	r2, r3
 800b482:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b484:	861a      	strh	r2, [r3, #48]	; 0x30
        }

        if (pcb->unacked != NULL && pcb->rtime >= pcb->rto) {
 800b486:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b488:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800b48a:	2b00      	cmp	r3, #0
 800b48c:	d04f      	beq.n	800b52e <tcp_slowtmr+0x1f2>
 800b48e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b490:	f9b3 2030 	ldrsh.w	r2, [r3, #48]	; 0x30
 800b494:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b496:	f9b3 3040 	ldrsh.w	r3, [r3, #64]	; 0x40
 800b49a:	429a      	cmp	r2, r3
 800b49c:	db47      	blt.n	800b52e <tcp_slowtmr+0x1f2>
                                      " pcb->rto %"S16_F"\n",
                                      pcb->rtime, pcb->rto));

          /* Double retransmission time-out unless we are trying to
           * connect to somebody (i.e., we are in SYN_SENT). */
          if (pcb->state != SYN_SENT) {
 800b49e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b4a0:	7d1b      	ldrb	r3, [r3, #20]
 800b4a2:	2b02      	cmp	r3, #2
 800b4a4:	d018      	beq.n	800b4d8 <tcp_slowtmr+0x19c>
            u8_t backoff_idx = LWIP_MIN(pcb->nrtx, sizeof(tcp_backoff)-1);
 800b4a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b4a8:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800b4ac:	2b0c      	cmp	r3, #12
 800b4ae:	bf28      	it	cs
 800b4b0:	230c      	movcs	r3, #12
 800b4b2:	75fb      	strb	r3, [r7, #23]
            pcb->rto = ((pcb->sa >> 3) + pcb->sv) << tcp_backoff[backoff_idx];
 800b4b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b4b6:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 800b4ba:	10db      	asrs	r3, r3, #3
 800b4bc:	b21b      	sxth	r3, r3
 800b4be:	461a      	mov	r2, r3
 800b4c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b4c2:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 800b4c6:	4413      	add	r3, r2
 800b4c8:	7dfa      	ldrb	r2, [r7, #23]
 800b4ca:	493e      	ldr	r1, [pc, #248]	; (800b5c4 <tcp_slowtmr+0x288>)
 800b4cc:	5c8a      	ldrb	r2, [r1, r2]
 800b4ce:	4093      	lsls	r3, r2
 800b4d0:	b21a      	sxth	r2, r3
 800b4d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b4d4:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
          }

          /* Reset the retransmission timer. */
          pcb->rtime = 0;
 800b4d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b4da:	2200      	movs	r2, #0
 800b4dc:	861a      	strh	r2, [r3, #48]	; 0x30

          /* Reduce congestion window and ssthresh. */
          eff_wnd = LWIP_MIN(pcb->cwnd, pcb->snd_wnd);
 800b4de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b4e0:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 800b4e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b4e6:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 800b4ea:	4293      	cmp	r3, r2
 800b4ec:	bf28      	it	cs
 800b4ee:	4613      	movcs	r3, r2
 800b4f0:	82bb      	strh	r3, [r7, #20]
          pcb->ssthresh = eff_wnd >> 1;
 800b4f2:	8abb      	ldrh	r3, [r7, #20]
 800b4f4:	085b      	lsrs	r3, r3, #1
 800b4f6:	b29a      	uxth	r2, r3
 800b4f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b4fa:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
          if (pcb->ssthresh < (tcpwnd_size_t)(pcb->mss << 1)) {
 800b4fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b500:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 800b504:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b506:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800b508:	005b      	lsls	r3, r3, #1
 800b50a:	b29b      	uxth	r3, r3
 800b50c:	429a      	cmp	r2, r3
 800b50e:	d206      	bcs.n	800b51e <tcp_slowtmr+0x1e2>
            pcb->ssthresh = (pcb->mss << 1);
 800b510:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b512:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800b514:	005b      	lsls	r3, r3, #1
 800b516:	b29a      	uxth	r2, r3
 800b518:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b51a:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
          }
          pcb->cwnd = pcb->mss;
 800b51e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b520:	8e5a      	ldrh	r2, [r3, #50]	; 0x32
 800b522:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b524:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
                                       " ssthresh %"TCPWNDSIZE_F"\n",
                                       pcb->cwnd, pcb->ssthresh));

          /* The following needs to be called AFTER cwnd is set to one
             mss - STJ */
          tcp_rexmit_rto(pcb);
 800b528:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800b52a:	f004 fa3f 	bl	800f9ac <tcp_rexmit_rto>
        }
      }
    }
    /* Check if this PCB has stayed too long in FIN-WAIT-2 */
    if (pcb->state == FIN_WAIT_2) {
 800b52e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b530:	7d1b      	ldrb	r3, [r3, #20]
 800b532:	2b06      	cmp	r3, #6
 800b534:	d10f      	bne.n	800b556 <tcp_slowtmr+0x21a>
      /* If this PCB is in FIN_WAIT_2 because of SHUT_WR don't let it time out. */
      if (pcb->flags & TF_RXCLOSED) {
 800b536:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b538:	7e9b      	ldrb	r3, [r3, #26]
 800b53a:	f003 0310 	and.w	r3, r3, #16
 800b53e:	2b00      	cmp	r3, #0
 800b540:	d009      	beq.n	800b556 <tcp_slowtmr+0x21a>
        /* PCB was fully closed (either through close() or SHUT_RDWR):
           normal FIN-WAIT timeout handling. */
        if ((u32_t)(tcp_ticks - pcb->tmr) >
 800b542:	4b17      	ldr	r3, [pc, #92]	; (800b5a0 <tcp_slowtmr+0x264>)
 800b544:	681a      	ldr	r2, [r3, #0]
 800b546:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b548:	6a1b      	ldr	r3, [r3, #32]
 800b54a:	1ad3      	subs	r3, r2, r3
 800b54c:	2b28      	cmp	r3, #40	; 0x28
 800b54e:	d902      	bls.n	800b556 <tcp_slowtmr+0x21a>
            TCP_FIN_WAIT_TIMEOUT / TCP_SLOW_INTERVAL) {
          ++pcb_remove;
 800b550:	7ffb      	ldrb	r3, [r7, #31]
 800b552:	3301      	adds	r3, #1
 800b554:	77fb      	strb	r3, [r7, #31]
        }
      }
    }

    /* Check if KEEPALIVE should be sent */
    if (ip_get_option(pcb, SOF_KEEPALIVE) &&
 800b556:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b558:	7a1b      	ldrb	r3, [r3, #8]
 800b55a:	f003 0308 	and.w	r3, r3, #8
 800b55e:	2b00      	cmp	r3, #0
 800b560:	d05d      	beq.n	800b61e <tcp_slowtmr+0x2e2>
       ((pcb->state == ESTABLISHED) ||
 800b562:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b564:	7d1b      	ldrb	r3, [r3, #20]
    if (ip_get_option(pcb, SOF_KEEPALIVE) &&
 800b566:	2b04      	cmp	r3, #4
 800b568:	d003      	beq.n	800b572 <tcp_slowtmr+0x236>
        (pcb->state == CLOSE_WAIT))) {
 800b56a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b56c:	7d1b      	ldrb	r3, [r3, #20]
       ((pcb->state == ESTABLISHED) ||
 800b56e:	2b07      	cmp	r3, #7
 800b570:	d155      	bne.n	800b61e <tcp_slowtmr+0x2e2>
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 800b572:	4b0b      	ldr	r3, [pc, #44]	; (800b5a0 <tcp_slowtmr+0x264>)
 800b574:	681a      	ldr	r2, [r3, #0]
 800b576:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b578:	6a1b      	ldr	r3, [r3, #32]
 800b57a:	1ad2      	subs	r2, r2, r3
         (pcb->keep_idle + TCP_KEEP_DUR(pcb)) / TCP_SLOW_INTERVAL)
 800b57c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b57e:	f8d3 1090 	ldr.w	r1, [r3, #144]	; 0x90
 800b582:	4b11      	ldr	r3, [pc, #68]	; (800b5c8 <tcp_slowtmr+0x28c>)
 800b584:	440b      	add	r3, r1
 800b586:	4911      	ldr	r1, [pc, #68]	; (800b5cc <tcp_slowtmr+0x290>)
 800b588:	fba1 1303 	umull	r1, r3, r1, r3
 800b58c:	095b      	lsrs	r3, r3, #5
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 800b58e:	429a      	cmp	r2, r3
 800b590:	d91e      	bls.n	800b5d0 <tcp_slowtmr+0x294>
      {
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: KEEPALIVE timeout. Aborting connection to "));
        ip_addr_debug_print(TCP_DEBUG, &pcb->remote_ip);
        LWIP_DEBUGF(TCP_DEBUG, ("\n"));

        ++pcb_remove;
 800b592:	7ffb      	ldrb	r3, [r7, #31]
 800b594:	3301      	adds	r3, #1
 800b596:	77fb      	strb	r3, [r7, #31]
        ++pcb_reset;
 800b598:	7fbb      	ldrb	r3, [r7, #30]
 800b59a:	3301      	adds	r3, #1
 800b59c:	77bb      	strb	r3, [r7, #30]
 800b59e:	e03e      	b.n	800b61e <tcp_slowtmr+0x2e2>
 800b5a0:	2400f2ec 	.word	0x2400f2ec
 800b5a4:	2400860a 	.word	0x2400860a
 800b5a8:	2400f2e8 	.word	0x2400f2e8
 800b5ac:	0801ab50 	.word	0x0801ab50
 800b5b0:	0801ad00 	.word	0x0801ad00
 800b5b4:	0801ab8c 	.word	0x0801ab8c
 800b5b8:	0801ad2c 	.word	0x0801ad2c
 800b5bc:	0801ad58 	.word	0x0801ad58
 800b5c0:	0801c130 	.word	0x0801c130
 800b5c4:	0801c120 	.word	0x0801c120
 800b5c8:	000a4cb8 	.word	0x000a4cb8
 800b5cc:	10624dd3 	.word	0x10624dd3
      } else if ((u32_t)(tcp_ticks - pcb->tmr) >
 800b5d0:	4b97      	ldr	r3, [pc, #604]	; (800b830 <tcp_slowtmr+0x4f4>)
 800b5d2:	681a      	ldr	r2, [r3, #0]
 800b5d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b5d6:	6a1b      	ldr	r3, [r3, #32]
 800b5d8:	1ad2      	subs	r2, r2, r3
                (pcb->keep_idle + pcb->keep_cnt_sent * TCP_KEEP_INTVL(pcb))
 800b5da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b5dc:	f8d3 1090 	ldr.w	r1, [r3, #144]	; 0x90
 800b5e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b5e2:	f893 3096 	ldrb.w	r3, [r3, #150]	; 0x96
 800b5e6:	4618      	mov	r0, r3
 800b5e8:	4b92      	ldr	r3, [pc, #584]	; (800b834 <tcp_slowtmr+0x4f8>)
 800b5ea:	fb03 f300 	mul.w	r3, r3, r0
 800b5ee:	440b      	add	r3, r1
                / TCP_SLOW_INTERVAL)
 800b5f0:	4991      	ldr	r1, [pc, #580]	; (800b838 <tcp_slowtmr+0x4fc>)
 800b5f2:	fba1 1303 	umull	r1, r3, r1, r3
 800b5f6:	095b      	lsrs	r3, r3, #5
      } else if ((u32_t)(tcp_ticks - pcb->tmr) >
 800b5f8:	429a      	cmp	r2, r3
 800b5fa:	d910      	bls.n	800b61e <tcp_slowtmr+0x2e2>
      {
        err = tcp_keepalive(pcb);
 800b5fc:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800b5fe:	f004 fab4 	bl	800fb6a <tcp_keepalive>
 800b602:	4603      	mov	r3, r0
 800b604:	777b      	strb	r3, [r7, #29]
        if (err == ERR_OK) {
 800b606:	f997 301d 	ldrsb.w	r3, [r7, #29]
 800b60a:	2b00      	cmp	r3, #0
 800b60c:	d107      	bne.n	800b61e <tcp_slowtmr+0x2e2>
          pcb->keep_cnt_sent++;
 800b60e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b610:	f893 3096 	ldrb.w	r3, [r3, #150]	; 0x96
 800b614:	3301      	adds	r3, #1
 800b616:	b2da      	uxtb	r2, r3
 800b618:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b61a:	f883 2096 	strb.w	r2, [r3, #150]	; 0x96

    /* If this PCB has queued out of sequence data, but has been
       inactive for too long, will drop the data (it will eventually
       be retransmitted). */
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL &&
 800b61e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b620:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b622:	2b00      	cmp	r3, #0
 800b624:	d016      	beq.n	800b654 <tcp_slowtmr+0x318>
        (u32_t)tcp_ticks - pcb->tmr >= pcb->rto * TCP_OOSEQ_TIMEOUT) {
 800b626:	4b82      	ldr	r3, [pc, #520]	; (800b830 <tcp_slowtmr+0x4f4>)
 800b628:	681a      	ldr	r2, [r3, #0]
 800b62a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b62c:	6a1b      	ldr	r3, [r3, #32]
 800b62e:	1ad2      	subs	r2, r2, r3
 800b630:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b632:	f9b3 3040 	ldrsh.w	r3, [r3, #64]	; 0x40
 800b636:	4619      	mov	r1, r3
 800b638:	460b      	mov	r3, r1
 800b63a:	005b      	lsls	r3, r3, #1
 800b63c:	440b      	add	r3, r1
 800b63e:	005b      	lsls	r3, r3, #1
    if (pcb->ooseq != NULL &&
 800b640:	429a      	cmp	r2, r3
 800b642:	d307      	bcc.n	800b654 <tcp_slowtmr+0x318>
      tcp_segs_free(pcb->ooseq);
 800b644:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b646:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b648:	4618      	mov	r0, r3
 800b64a:	f000 fa05 	bl	800ba58 <tcp_segs_free>
      pcb->ooseq = NULL;
 800b64e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b650:	2200      	movs	r2, #0
 800b652:	671a      	str	r2, [r3, #112]	; 0x70
      LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_slowtmr: dropping OOSEQ queued data\n"));
    }
#endif /* TCP_QUEUE_OOSEQ */

    /* Check if this PCB has stayed too long in SYN-RCVD */
    if (pcb->state == SYN_RCVD) {
 800b654:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b656:	7d1b      	ldrb	r3, [r3, #20]
 800b658:	2b03      	cmp	r3, #3
 800b65a:	d109      	bne.n	800b670 <tcp_slowtmr+0x334>
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 800b65c:	4b74      	ldr	r3, [pc, #464]	; (800b830 <tcp_slowtmr+0x4f4>)
 800b65e:	681a      	ldr	r2, [r3, #0]
 800b660:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b662:	6a1b      	ldr	r3, [r3, #32]
 800b664:	1ad3      	subs	r3, r2, r3
 800b666:	2b28      	cmp	r3, #40	; 0x28
 800b668:	d902      	bls.n	800b670 <tcp_slowtmr+0x334>
          TCP_SYN_RCVD_TIMEOUT / TCP_SLOW_INTERVAL) {
        ++pcb_remove;
 800b66a:	7ffb      	ldrb	r3, [r7, #31]
 800b66c:	3301      	adds	r3, #1
 800b66e:	77fb      	strb	r3, [r7, #31]
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: removing pcb stuck in SYN-RCVD\n"));
      }
    }

    /* Check if this PCB has stayed too long in LAST-ACK */
    if (pcb->state == LAST_ACK) {
 800b670:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b672:	7d1b      	ldrb	r3, [r3, #20]
 800b674:	2b09      	cmp	r3, #9
 800b676:	d109      	bne.n	800b68c <tcp_slowtmr+0x350>
      if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 800b678:	4b6d      	ldr	r3, [pc, #436]	; (800b830 <tcp_slowtmr+0x4f4>)
 800b67a:	681a      	ldr	r2, [r3, #0]
 800b67c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b67e:	6a1b      	ldr	r3, [r3, #32]
 800b680:	1ad3      	subs	r3, r2, r3
 800b682:	2bf0      	cmp	r3, #240	; 0xf0
 800b684:	d902      	bls.n	800b68c <tcp_slowtmr+0x350>
        ++pcb_remove;
 800b686:	7ffb      	ldrb	r3, [r7, #31]
 800b688:	3301      	adds	r3, #1
 800b68a:	77fb      	strb	r3, [r7, #31]
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: removing pcb stuck in LAST-ACK\n"));
      }
    }

    /* If the PCB should be removed, do it. */
    if (pcb_remove) {
 800b68c:	7ffb      	ldrb	r3, [r7, #31]
 800b68e:	2b00      	cmp	r3, #0
 800b690:	d05d      	beq.n	800b74e <tcp_slowtmr+0x412>
      struct tcp_pcb *pcb2;
#if LWIP_CALLBACK_API
      tcp_err_fn err_fn = pcb->errf;
 800b692:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b694:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800b698:	60fb      	str	r3, [r7, #12]
#endif /* LWIP_CALLBACK_API */
      void *err_arg;
      enum tcp_state last_state;
      tcp_pcb_purge(pcb);
 800b69a:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800b69c:	f000 fc44 	bl	800bf28 <tcp_pcb_purge>
      /* Remove PCB from tcp_active_pcbs list. */
      if (prev != NULL) {
 800b6a0:	6a3b      	ldr	r3, [r7, #32]
 800b6a2:	2b00      	cmp	r3, #0
 800b6a4:	d010      	beq.n	800b6c8 <tcp_slowtmr+0x38c>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_active_pcbs", pcb != tcp_active_pcbs);
 800b6a6:	4b65      	ldr	r3, [pc, #404]	; (800b83c <tcp_slowtmr+0x500>)
 800b6a8:	681b      	ldr	r3, [r3, #0]
 800b6aa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b6ac:	429a      	cmp	r2, r3
 800b6ae:	d106      	bne.n	800b6be <tcp_slowtmr+0x382>
 800b6b0:	4b63      	ldr	r3, [pc, #396]	; (800b840 <tcp_slowtmr+0x504>)
 800b6b2:	f240 4289 	movw	r2, #1161	; 0x489
 800b6b6:	4963      	ldr	r1, [pc, #396]	; (800b844 <tcp_slowtmr+0x508>)
 800b6b8:	4863      	ldr	r0, [pc, #396]	; (800b848 <tcp_slowtmr+0x50c>)
 800b6ba:	f00a fa8b 	bl	8015bd4 <printf_>
        prev->next = pcb->next;
 800b6be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b6c0:	68da      	ldr	r2, [r3, #12]
 800b6c2:	6a3b      	ldr	r3, [r7, #32]
 800b6c4:	60da      	str	r2, [r3, #12]
 800b6c6:	e00f      	b.n	800b6e8 <tcp_slowtmr+0x3ac>
      } else {
        /* This PCB was the first. */
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_active_pcbs", tcp_active_pcbs == pcb);
 800b6c8:	4b5c      	ldr	r3, [pc, #368]	; (800b83c <tcp_slowtmr+0x500>)
 800b6ca:	681b      	ldr	r3, [r3, #0]
 800b6cc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b6ce:	429a      	cmp	r2, r3
 800b6d0:	d006      	beq.n	800b6e0 <tcp_slowtmr+0x3a4>
 800b6d2:	4b5b      	ldr	r3, [pc, #364]	; (800b840 <tcp_slowtmr+0x504>)
 800b6d4:	f240 428d 	movw	r2, #1165	; 0x48d
 800b6d8:	495c      	ldr	r1, [pc, #368]	; (800b84c <tcp_slowtmr+0x510>)
 800b6da:	485b      	ldr	r0, [pc, #364]	; (800b848 <tcp_slowtmr+0x50c>)
 800b6dc:	f00a fa7a 	bl	8015bd4 <printf_>
        tcp_active_pcbs = pcb->next;
 800b6e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b6e2:	68db      	ldr	r3, [r3, #12]
 800b6e4:	4a55      	ldr	r2, [pc, #340]	; (800b83c <tcp_slowtmr+0x500>)
 800b6e6:	6013      	str	r3, [r2, #0]
      }

      if (pcb_reset) {
 800b6e8:	7fbb      	ldrb	r3, [r7, #30]
 800b6ea:	2b00      	cmp	r3, #0
 800b6ec:	d010      	beq.n	800b710 <tcp_slowtmr+0x3d4>
        tcp_rst(pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
 800b6ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b6f0:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 800b6f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b6f4:	6a59      	ldr	r1, [r3, #36]	; 0x24
 800b6f6:	6a7c      	ldr	r4, [r7, #36]	; 0x24
 800b6f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b6fa:	1d1d      	adds	r5, r3, #4
 800b6fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b6fe:	8adb      	ldrh	r3, [r3, #22]
 800b700:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b702:	8b12      	ldrh	r2, [r2, #24]
 800b704:	9201      	str	r2, [sp, #4]
 800b706:	9300      	str	r3, [sp, #0]
 800b708:	462b      	mov	r3, r5
 800b70a:	4622      	mov	r2, r4
 800b70c:	f004 f8d8 	bl	800f8c0 <tcp_rst>
                 pcb->local_port, pcb->remote_port);
      }

      err_arg = pcb->callback_arg;
 800b710:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b712:	691b      	ldr	r3, [r3, #16]
 800b714:	60bb      	str	r3, [r7, #8]
      last_state = pcb->state;
 800b716:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b718:	7d1b      	ldrb	r3, [r3, #20]
 800b71a:	71fb      	strb	r3, [r7, #7]
      pcb2 = pcb;
 800b71c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b71e:	603b      	str	r3, [r7, #0]
      pcb = pcb->next;
 800b720:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b722:	68db      	ldr	r3, [r3, #12]
 800b724:	627b      	str	r3, [r7, #36]	; 0x24
      memp_free(MEMP_TCP_PCB, pcb2);
 800b726:	6839      	ldr	r1, [r7, #0]
 800b728:	2001      	movs	r0, #1
 800b72a:	f7fe f917 	bl	800995c <memp_free>

      tcp_active_pcbs_changed = 0;
 800b72e:	4b48      	ldr	r3, [pc, #288]	; (800b850 <tcp_slowtmr+0x514>)
 800b730:	2200      	movs	r2, #0
 800b732:	701a      	strb	r2, [r3, #0]
      TCP_EVENT_ERR(last_state, err_fn, err_arg, ERR_ABRT);
 800b734:	68fb      	ldr	r3, [r7, #12]
 800b736:	2b00      	cmp	r3, #0
 800b738:	d004      	beq.n	800b744 <tcp_slowtmr+0x408>
 800b73a:	68fb      	ldr	r3, [r7, #12]
 800b73c:	f06f 010c 	mvn.w	r1, #12
 800b740:	68b8      	ldr	r0, [r7, #8]
 800b742:	4798      	blx	r3
      if (tcp_active_pcbs_changed) {
 800b744:	4b42      	ldr	r3, [pc, #264]	; (800b850 <tcp_slowtmr+0x514>)
 800b746:	781b      	ldrb	r3, [r3, #0]
 800b748:	2b00      	cmp	r3, #0
 800b74a:	d035      	beq.n	800b7b8 <tcp_slowtmr+0x47c>
        goto tcp_slowtmr_start;
 800b74c:	e606      	b.n	800b35c <tcp_slowtmr+0x20>
      }
    } else {
      /* get the 'next' element now and work with 'prev' below (in case of abort) */
      prev = pcb;
 800b74e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b750:	623b      	str	r3, [r7, #32]
      pcb = pcb->next;
 800b752:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b754:	68db      	ldr	r3, [r3, #12]
 800b756:	627b      	str	r3, [r7, #36]	; 0x24

      /* We check if we should poll the connection. */
      ++prev->polltmr;
 800b758:	6a3b      	ldr	r3, [r7, #32]
 800b75a:	7edb      	ldrb	r3, [r3, #27]
 800b75c:	3301      	adds	r3, #1
 800b75e:	b2da      	uxtb	r2, r3
 800b760:	6a3b      	ldr	r3, [r7, #32]
 800b762:	76da      	strb	r2, [r3, #27]
      if (prev->polltmr >= prev->pollinterval) {
 800b764:	6a3b      	ldr	r3, [r7, #32]
 800b766:	7eda      	ldrb	r2, [r3, #27]
 800b768:	6a3b      	ldr	r3, [r7, #32]
 800b76a:	7f1b      	ldrb	r3, [r3, #28]
 800b76c:	429a      	cmp	r2, r3
 800b76e:	d323      	bcc.n	800b7b8 <tcp_slowtmr+0x47c>
        prev->polltmr = 0;
 800b770:	6a3b      	ldr	r3, [r7, #32]
 800b772:	2200      	movs	r2, #0
 800b774:	76da      	strb	r2, [r3, #27]
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: polling application\n"));
        tcp_active_pcbs_changed = 0;
 800b776:	4b36      	ldr	r3, [pc, #216]	; (800b850 <tcp_slowtmr+0x514>)
 800b778:	2200      	movs	r2, #0
 800b77a:	701a      	strb	r2, [r3, #0]
        TCP_EVENT_POLL(prev, err);
 800b77c:	6a3b      	ldr	r3, [r7, #32]
 800b77e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b782:	2b00      	cmp	r3, #0
 800b784:	d00a      	beq.n	800b79c <tcp_slowtmr+0x460>
 800b786:	6a3b      	ldr	r3, [r7, #32]
 800b788:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b78c:	6a3a      	ldr	r2, [r7, #32]
 800b78e:	6912      	ldr	r2, [r2, #16]
 800b790:	6a39      	ldr	r1, [r7, #32]
 800b792:	4610      	mov	r0, r2
 800b794:	4798      	blx	r3
 800b796:	4603      	mov	r3, r0
 800b798:	777b      	strb	r3, [r7, #29]
 800b79a:	e001      	b.n	800b7a0 <tcp_slowtmr+0x464>
 800b79c:	2300      	movs	r3, #0
 800b79e:	777b      	strb	r3, [r7, #29]
        if (tcp_active_pcbs_changed) {
 800b7a0:	4b2b      	ldr	r3, [pc, #172]	; (800b850 <tcp_slowtmr+0x514>)
 800b7a2:	781b      	ldrb	r3, [r3, #0]
 800b7a4:	2b00      	cmp	r3, #0
 800b7a6:	d000      	beq.n	800b7aa <tcp_slowtmr+0x46e>
          goto tcp_slowtmr_start;
 800b7a8:	e5d8      	b.n	800b35c <tcp_slowtmr+0x20>
        }
        /* if err == ERR_ABRT, 'prev' is already deallocated */
        if (err == ERR_OK) {
 800b7aa:	f997 301d 	ldrsb.w	r3, [r7, #29]
 800b7ae:	2b00      	cmp	r3, #0
 800b7b0:	d102      	bne.n	800b7b8 <tcp_slowtmr+0x47c>
          tcp_output(prev);
 800b7b2:	6a38      	ldr	r0, [r7, #32]
 800b7b4:	f003 fdfa 	bl	800f3ac <tcp_output>
  while (pcb != NULL) {
 800b7b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b7ba:	2b00      	cmp	r3, #0
 800b7bc:	f47f add4 	bne.w	800b368 <tcp_slowtmr+0x2c>
    }
  }


  /* Steps through all of the TIME-WAIT PCBs. */
  prev = NULL;
 800b7c0:	2300      	movs	r3, #0
 800b7c2:	623b      	str	r3, [r7, #32]
  pcb = tcp_tw_pcbs;
 800b7c4:	4b23      	ldr	r3, [pc, #140]	; (800b854 <tcp_slowtmr+0x518>)
 800b7c6:	681b      	ldr	r3, [r3, #0]
 800b7c8:	627b      	str	r3, [r7, #36]	; 0x24
  while (pcb != NULL) {
 800b7ca:	e068      	b.n	800b89e <tcp_slowtmr+0x562>
    LWIP_ASSERT("tcp_slowtmr: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 800b7cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b7ce:	7d1b      	ldrb	r3, [r3, #20]
 800b7d0:	2b0a      	cmp	r3, #10
 800b7d2:	d006      	beq.n	800b7e2 <tcp_slowtmr+0x4a6>
 800b7d4:	4b1a      	ldr	r3, [pc, #104]	; (800b840 <tcp_slowtmr+0x504>)
 800b7d6:	f240 42bd 	movw	r2, #1213	; 0x4bd
 800b7da:	491f      	ldr	r1, [pc, #124]	; (800b858 <tcp_slowtmr+0x51c>)
 800b7dc:	481a      	ldr	r0, [pc, #104]	; (800b848 <tcp_slowtmr+0x50c>)
 800b7de:	f00a f9f9 	bl	8015bd4 <printf_>
    pcb_remove = 0;
 800b7e2:	2300      	movs	r3, #0
 800b7e4:	77fb      	strb	r3, [r7, #31]

    /* Check if this PCB has stayed long enough in TIME-WAIT */
    if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 800b7e6:	4b12      	ldr	r3, [pc, #72]	; (800b830 <tcp_slowtmr+0x4f4>)
 800b7e8:	681a      	ldr	r2, [r3, #0]
 800b7ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b7ec:	6a1b      	ldr	r3, [r3, #32]
 800b7ee:	1ad3      	subs	r3, r2, r3
 800b7f0:	2bf0      	cmp	r3, #240	; 0xf0
 800b7f2:	d902      	bls.n	800b7fa <tcp_slowtmr+0x4be>
      ++pcb_remove;
 800b7f4:	7ffb      	ldrb	r3, [r7, #31]
 800b7f6:	3301      	adds	r3, #1
 800b7f8:	77fb      	strb	r3, [r7, #31]
    }

    /* If the PCB should be removed, do it. */
    if (pcb_remove) {
 800b7fa:	7ffb      	ldrb	r3, [r7, #31]
 800b7fc:	2b00      	cmp	r3, #0
 800b7fe:	d049      	beq.n	800b894 <tcp_slowtmr+0x558>
      struct tcp_pcb *pcb2;
      tcp_pcb_purge(pcb);
 800b800:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800b802:	f000 fb91 	bl	800bf28 <tcp_pcb_purge>
      /* Remove PCB from tcp_tw_pcbs list. */
      if (prev != NULL) {
 800b806:	6a3b      	ldr	r3, [r7, #32]
 800b808:	2b00      	cmp	r3, #0
 800b80a:	d029      	beq.n	800b860 <tcp_slowtmr+0x524>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_tw_pcbs", pcb != tcp_tw_pcbs);
 800b80c:	4b11      	ldr	r3, [pc, #68]	; (800b854 <tcp_slowtmr+0x518>)
 800b80e:	681b      	ldr	r3, [r3, #0]
 800b810:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b812:	429a      	cmp	r2, r3
 800b814:	d106      	bne.n	800b824 <tcp_slowtmr+0x4e8>
 800b816:	4b0a      	ldr	r3, [pc, #40]	; (800b840 <tcp_slowtmr+0x504>)
 800b818:	f240 42cb 	movw	r2, #1227	; 0x4cb
 800b81c:	490f      	ldr	r1, [pc, #60]	; (800b85c <tcp_slowtmr+0x520>)
 800b81e:	480a      	ldr	r0, [pc, #40]	; (800b848 <tcp_slowtmr+0x50c>)
 800b820:	f00a f9d8 	bl	8015bd4 <printf_>
        prev->next = pcb->next;
 800b824:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b826:	68da      	ldr	r2, [r3, #12]
 800b828:	6a3b      	ldr	r3, [r7, #32]
 800b82a:	60da      	str	r2, [r3, #12]
 800b82c:	e028      	b.n	800b880 <tcp_slowtmr+0x544>
 800b82e:	bf00      	nop
 800b830:	2400f2ec 	.word	0x2400f2ec
 800b834:	000124f8 	.word	0x000124f8
 800b838:	10624dd3 	.word	0x10624dd3
 800b83c:	2400f2e8 	.word	0x2400f2e8
 800b840:	0801ab50 	.word	0x0801ab50
 800b844:	0801ad88 	.word	0x0801ad88
 800b848:	0801ab8c 	.word	0x0801ab8c
 800b84c:	0801adb4 	.word	0x0801adb4
 800b850:	2400f2e4 	.word	0x2400f2e4
 800b854:	2400f2f8 	.word	0x2400f2f8
 800b858:	0801ade0 	.word	0x0801ade0
 800b85c:	0801ae10 	.word	0x0801ae10
      } else {
        /* This PCB was the first. */
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_tw_pcbs", tcp_tw_pcbs == pcb);
 800b860:	4b12      	ldr	r3, [pc, #72]	; (800b8ac <tcp_slowtmr+0x570>)
 800b862:	681b      	ldr	r3, [r3, #0]
 800b864:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b866:	429a      	cmp	r2, r3
 800b868:	d006      	beq.n	800b878 <tcp_slowtmr+0x53c>
 800b86a:	4b11      	ldr	r3, [pc, #68]	; (800b8b0 <tcp_slowtmr+0x574>)
 800b86c:	f240 42cf 	movw	r2, #1231	; 0x4cf
 800b870:	4910      	ldr	r1, [pc, #64]	; (800b8b4 <tcp_slowtmr+0x578>)
 800b872:	4811      	ldr	r0, [pc, #68]	; (800b8b8 <tcp_slowtmr+0x57c>)
 800b874:	f00a f9ae 	bl	8015bd4 <printf_>
        tcp_tw_pcbs = pcb->next;
 800b878:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b87a:	68db      	ldr	r3, [r3, #12]
 800b87c:	4a0b      	ldr	r2, [pc, #44]	; (800b8ac <tcp_slowtmr+0x570>)
 800b87e:	6013      	str	r3, [r2, #0]
      }
      pcb2 = pcb;
 800b880:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b882:	61bb      	str	r3, [r7, #24]
      pcb = pcb->next;
 800b884:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b886:	68db      	ldr	r3, [r3, #12]
 800b888:	627b      	str	r3, [r7, #36]	; 0x24
      memp_free(MEMP_TCP_PCB, pcb2);
 800b88a:	69b9      	ldr	r1, [r7, #24]
 800b88c:	2001      	movs	r0, #1
 800b88e:	f7fe f865 	bl	800995c <memp_free>
 800b892:	e004      	b.n	800b89e <tcp_slowtmr+0x562>
    } else {
      prev = pcb;
 800b894:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b896:	623b      	str	r3, [r7, #32]
      pcb = pcb->next;
 800b898:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b89a:	68db      	ldr	r3, [r3, #12]
 800b89c:	627b      	str	r3, [r7, #36]	; 0x24
  while (pcb != NULL) {
 800b89e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b8a0:	2b00      	cmp	r3, #0
 800b8a2:	d193      	bne.n	800b7cc <tcp_slowtmr+0x490>
    }
  }
}
 800b8a4:	bf00      	nop
 800b8a6:	3728      	adds	r7, #40	; 0x28
 800b8a8:	46bd      	mov	sp, r7
 800b8aa:	bdb0      	pop	{r4, r5, r7, pc}
 800b8ac:	2400f2f8 	.word	0x2400f2f8
 800b8b0:	0801ab50 	.word	0x0801ab50
 800b8b4:	0801ae38 	.word	0x0801ae38
 800b8b8:	0801ab8c 	.word	0x0801ab8c

0800b8bc <tcp_fasttmr>:
 *
 * Automatically called from tcp_tmr().
 */
void
tcp_fasttmr(void)
{
 800b8bc:	b580      	push	{r7, lr}
 800b8be:	b082      	sub	sp, #8
 800b8c0:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb;

  ++tcp_timer_ctr;
 800b8c2:	4b2d      	ldr	r3, [pc, #180]	; (800b978 <tcp_fasttmr+0xbc>)
 800b8c4:	781b      	ldrb	r3, [r3, #0]
 800b8c6:	3301      	adds	r3, #1
 800b8c8:	b2da      	uxtb	r2, r3
 800b8ca:	4b2b      	ldr	r3, [pc, #172]	; (800b978 <tcp_fasttmr+0xbc>)
 800b8cc:	701a      	strb	r2, [r3, #0]

tcp_fasttmr_start:
  pcb = tcp_active_pcbs;
 800b8ce:	4b2b      	ldr	r3, [pc, #172]	; (800b97c <tcp_fasttmr+0xc0>)
 800b8d0:	681b      	ldr	r3, [r3, #0]
 800b8d2:	607b      	str	r3, [r7, #4]

  while (pcb != NULL) {
 800b8d4:	e048      	b.n	800b968 <tcp_fasttmr+0xac>
    if (pcb->last_timer != tcp_timer_ctr) {
 800b8d6:	687b      	ldr	r3, [r7, #4]
 800b8d8:	7f5a      	ldrb	r2, [r3, #29]
 800b8da:	4b27      	ldr	r3, [pc, #156]	; (800b978 <tcp_fasttmr+0xbc>)
 800b8dc:	781b      	ldrb	r3, [r3, #0]
 800b8de:	429a      	cmp	r2, r3
 800b8e0:	d03f      	beq.n	800b962 <tcp_fasttmr+0xa6>
      struct tcp_pcb *next;
      pcb->last_timer = tcp_timer_ctr;
 800b8e2:	4b25      	ldr	r3, [pc, #148]	; (800b978 <tcp_fasttmr+0xbc>)
 800b8e4:	781a      	ldrb	r2, [r3, #0]
 800b8e6:	687b      	ldr	r3, [r7, #4]
 800b8e8:	775a      	strb	r2, [r3, #29]
      /* send delayed ACKs */
      if (pcb->flags & TF_ACK_DELAY) {
 800b8ea:	687b      	ldr	r3, [r7, #4]
 800b8ec:	7e9b      	ldrb	r3, [r3, #26]
 800b8ee:	f003 0301 	and.w	r3, r3, #1
 800b8f2:	2b00      	cmp	r3, #0
 800b8f4:	d010      	beq.n	800b918 <tcp_fasttmr+0x5c>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_fasttmr: delayed ACK\n"));
        tcp_ack_now(pcb);
 800b8f6:	687b      	ldr	r3, [r7, #4]
 800b8f8:	7e9b      	ldrb	r3, [r3, #26]
 800b8fa:	f043 0302 	orr.w	r3, r3, #2
 800b8fe:	b2da      	uxtb	r2, r3
 800b900:	687b      	ldr	r3, [r7, #4]
 800b902:	769a      	strb	r2, [r3, #26]
        tcp_output(pcb);
 800b904:	6878      	ldr	r0, [r7, #4]
 800b906:	f003 fd51 	bl	800f3ac <tcp_output>
        pcb->flags &= ~(TF_ACK_DELAY | TF_ACK_NOW);
 800b90a:	687b      	ldr	r3, [r7, #4]
 800b90c:	7e9b      	ldrb	r3, [r3, #26]
 800b90e:	f023 0303 	bic.w	r3, r3, #3
 800b912:	b2da      	uxtb	r2, r3
 800b914:	687b      	ldr	r3, [r7, #4]
 800b916:	769a      	strb	r2, [r3, #26]
      }
      /* send pending FIN */
      if (pcb->flags & TF_CLOSEPEND) {
 800b918:	687b      	ldr	r3, [r7, #4]
 800b91a:	7e9b      	ldrb	r3, [r3, #26]
 800b91c:	f003 0308 	and.w	r3, r3, #8
 800b920:	2b00      	cmp	r3, #0
 800b922:	d009      	beq.n	800b938 <tcp_fasttmr+0x7c>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_fasttmr: pending FIN\n"));
        pcb->flags &= ~(TF_CLOSEPEND);
 800b924:	687b      	ldr	r3, [r7, #4]
 800b926:	7e9b      	ldrb	r3, [r3, #26]
 800b928:	f023 0308 	bic.w	r3, r3, #8
 800b92c:	b2da      	uxtb	r2, r3
 800b92e:	687b      	ldr	r3, [r7, #4]
 800b930:	769a      	strb	r2, [r3, #26]
        tcp_close_shutdown_fin(pcb);
 800b932:	6878      	ldr	r0, [r7, #4]
 800b934:	f7ff f99c 	bl	800ac70 <tcp_close_shutdown_fin>
      }

      next = pcb->next;
 800b938:	687b      	ldr	r3, [r7, #4]
 800b93a:	68db      	ldr	r3, [r3, #12]
 800b93c:	603b      	str	r3, [r7, #0]

      /* If there is data which was previously "refused" by upper layer */
      if (pcb->refused_data != NULL) {
 800b93e:	687b      	ldr	r3, [r7, #4]
 800b940:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800b942:	2b00      	cmp	r3, #0
 800b944:	d00a      	beq.n	800b95c <tcp_fasttmr+0xa0>
        tcp_active_pcbs_changed = 0;
 800b946:	4b0e      	ldr	r3, [pc, #56]	; (800b980 <tcp_fasttmr+0xc4>)
 800b948:	2200      	movs	r2, #0
 800b94a:	701a      	strb	r2, [r3, #0]
        tcp_process_refused_data(pcb);
 800b94c:	6878      	ldr	r0, [r7, #4]
 800b94e:	f000 f819 	bl	800b984 <tcp_process_refused_data>
        if (tcp_active_pcbs_changed) {
 800b952:	4b0b      	ldr	r3, [pc, #44]	; (800b980 <tcp_fasttmr+0xc4>)
 800b954:	781b      	ldrb	r3, [r3, #0]
 800b956:	2b00      	cmp	r3, #0
 800b958:	d000      	beq.n	800b95c <tcp_fasttmr+0xa0>
          /* application callback has changed the pcb list: restart the loop */
          goto tcp_fasttmr_start;
 800b95a:	e7b8      	b.n	800b8ce <tcp_fasttmr+0x12>
        }
      }
      pcb = next;
 800b95c:	683b      	ldr	r3, [r7, #0]
 800b95e:	607b      	str	r3, [r7, #4]
 800b960:	e002      	b.n	800b968 <tcp_fasttmr+0xac>
    } else {
      pcb = pcb->next;
 800b962:	687b      	ldr	r3, [r7, #4]
 800b964:	68db      	ldr	r3, [r3, #12]
 800b966:	607b      	str	r3, [r7, #4]
  while (pcb != NULL) {
 800b968:	687b      	ldr	r3, [r7, #4]
 800b96a:	2b00      	cmp	r3, #0
 800b96c:	d1b3      	bne.n	800b8d6 <tcp_fasttmr+0x1a>
    }
  }
}
 800b96e:	bf00      	nop
 800b970:	3708      	adds	r7, #8
 800b972:	46bd      	mov	sp, r7
 800b974:	bd80      	pop	{r7, pc}
 800b976:	bf00      	nop
 800b978:	2400860a 	.word	0x2400860a
 800b97c:	2400f2e8 	.word	0x2400f2e8
 800b980:	2400f2e4 	.word	0x2400f2e4

0800b984 <tcp_process_refused_data>:
}

/** Pass pcb->refused_data to the recv callback */
err_t
tcp_process_refused_data(struct tcp_pcb *pcb)
{
 800b984:	b590      	push	{r4, r7, lr}
 800b986:	b085      	sub	sp, #20
 800b988:	af00      	add	r7, sp, #0
 800b98a:	6078      	str	r0, [r7, #4]
  struct pbuf *rest;
  while (pcb->refused_data != NULL)
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
  {
    err_t err;
    u8_t refused_flags = pcb->refused_data->flags;
 800b98c:	687b      	ldr	r3, [r7, #4]
 800b98e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800b990:	7b5b      	ldrb	r3, [r3, #13]
 800b992:	73bb      	strb	r3, [r7, #14]
    /* set pcb->refused_data to NULL in case the callback frees it and then
       closes the pcb */
    struct pbuf *refused_data = pcb->refused_data;
 800b994:	687b      	ldr	r3, [r7, #4]
 800b996:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800b998:	60bb      	str	r3, [r7, #8]
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
    pbuf_split_64k(refused_data, &rest);
    pcb->refused_data = rest;
#else /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
    pcb->refused_data = NULL;
 800b99a:	687b      	ldr	r3, [r7, #4]
 800b99c:	2200      	movs	r2, #0
 800b99e:	675a      	str	r2, [r3, #116]	; 0x74
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
    /* Notify again application with data previously received. */
    LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: notify kept packet\n"));
    TCP_EVENT_RECV(pcb, refused_data, ERR_OK, err);
 800b9a0:	687b      	ldr	r3, [r7, #4]
 800b9a2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800b9a6:	2b00      	cmp	r3, #0
 800b9a8:	d00b      	beq.n	800b9c2 <tcp_process_refused_data+0x3e>
 800b9aa:	687b      	ldr	r3, [r7, #4]
 800b9ac:	f8d3 4080 	ldr.w	r4, [r3, #128]	; 0x80
 800b9b0:	687b      	ldr	r3, [r7, #4]
 800b9b2:	6918      	ldr	r0, [r3, #16]
 800b9b4:	2300      	movs	r3, #0
 800b9b6:	68ba      	ldr	r2, [r7, #8]
 800b9b8:	6879      	ldr	r1, [r7, #4]
 800b9ba:	47a0      	blx	r4
 800b9bc:	4603      	mov	r3, r0
 800b9be:	73fb      	strb	r3, [r7, #15]
 800b9c0:	e007      	b.n	800b9d2 <tcp_process_refused_data+0x4e>
 800b9c2:	2300      	movs	r3, #0
 800b9c4:	68ba      	ldr	r2, [r7, #8]
 800b9c6:	6879      	ldr	r1, [r7, #4]
 800b9c8:	2000      	movs	r0, #0
 800b9ca:	f000 f88d 	bl	800bae8 <tcp_recv_null>
 800b9ce:	4603      	mov	r3, r0
 800b9d0:	73fb      	strb	r3, [r7, #15]
    if (err == ERR_OK) {
 800b9d2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800b9d6:	2b00      	cmp	r3, #0
 800b9d8:	d12b      	bne.n	800ba32 <tcp_process_refused_data+0xae>
      /* did refused_data include a FIN? */
      if (refused_flags & PBUF_FLAG_TCP_FIN
 800b9da:	7bbb      	ldrb	r3, [r7, #14]
 800b9dc:	f003 0320 	and.w	r3, r3, #32
 800b9e0:	2b00      	cmp	r3, #0
 800b9e2:	d034      	beq.n	800ba4e <tcp_process_refused_data+0xca>
          && (rest == NULL)
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
         ) {
        /* correct rcv_wnd as the application won't call tcp_recved()
           for the FIN's seqno */
        if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 800b9e4:	687b      	ldr	r3, [r7, #4]
 800b9e6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800b9e8:	f241 62d0 	movw	r2, #5840	; 0x16d0
 800b9ec:	4293      	cmp	r3, r2
 800b9ee:	d005      	beq.n	800b9fc <tcp_process_refused_data+0x78>
          pcb->rcv_wnd++;
 800b9f0:	687b      	ldr	r3, [r7, #4]
 800b9f2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800b9f4:	3301      	adds	r3, #1
 800b9f6:	b29a      	uxth	r2, r3
 800b9f8:	687b      	ldr	r3, [r7, #4]
 800b9fa:	851a      	strh	r2, [r3, #40]	; 0x28
        }
        TCP_EVENT_CLOSED(pcb, err);
 800b9fc:	687b      	ldr	r3, [r7, #4]
 800b9fe:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800ba02:	2b00      	cmp	r3, #0
 800ba04:	d00b      	beq.n	800ba1e <tcp_process_refused_data+0x9a>
 800ba06:	687b      	ldr	r3, [r7, #4]
 800ba08:	f8d3 4080 	ldr.w	r4, [r3, #128]	; 0x80
 800ba0c:	687b      	ldr	r3, [r7, #4]
 800ba0e:	6918      	ldr	r0, [r3, #16]
 800ba10:	2300      	movs	r3, #0
 800ba12:	2200      	movs	r2, #0
 800ba14:	6879      	ldr	r1, [r7, #4]
 800ba16:	47a0      	blx	r4
 800ba18:	4603      	mov	r3, r0
 800ba1a:	73fb      	strb	r3, [r7, #15]
 800ba1c:	e001      	b.n	800ba22 <tcp_process_refused_data+0x9e>
 800ba1e:	2300      	movs	r3, #0
 800ba20:	73fb      	strb	r3, [r7, #15]
        if (err == ERR_ABRT) {
 800ba22:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800ba26:	f113 0f0d 	cmn.w	r3, #13
 800ba2a:	d110      	bne.n	800ba4e <tcp_process_refused_data+0xca>
          return ERR_ABRT;
 800ba2c:	f06f 030c 	mvn.w	r3, #12
 800ba30:	e00e      	b.n	800ba50 <tcp_process_refused_data+0xcc>
        }
      }
    } else if (err == ERR_ABRT) {
 800ba32:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800ba36:	f113 0f0d 	cmn.w	r3, #13
 800ba3a:	d102      	bne.n	800ba42 <tcp_process_refused_data+0xbe>
      /* if err == ERR_ABRT, 'pcb' is already deallocated */
      /* Drop incoming packets because pcb is "full" (only if the incoming
         segment contains data). */
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: drop incoming packets, because pcb is \"full\"\n"));
      return ERR_ABRT;
 800ba3c:	f06f 030c 	mvn.w	r3, #12
 800ba40:	e006      	b.n	800ba50 <tcp_process_refused_data+0xcc>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
      if (rest != NULL) {
        pbuf_cat(refused_data, rest);
      }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
      pcb->refused_data = refused_data;
 800ba42:	687b      	ldr	r3, [r7, #4]
 800ba44:	68ba      	ldr	r2, [r7, #8]
 800ba46:	675a      	str	r2, [r3, #116]	; 0x74
      return ERR_INPROGRESS;
 800ba48:	f06f 0304 	mvn.w	r3, #4
 800ba4c:	e000      	b.n	800ba50 <tcp_process_refused_data+0xcc>
    }
  }
  return ERR_OK;
 800ba4e:	2300      	movs	r3, #0
}
 800ba50:	4618      	mov	r0, r3
 800ba52:	3714      	adds	r7, #20
 800ba54:	46bd      	mov	sp, r7
 800ba56:	bd90      	pop	{r4, r7, pc}

0800ba58 <tcp_segs_free>:
 *
 * @param seg tcp_seg list of TCP segments to free
 */
void
tcp_segs_free(struct tcp_seg *seg)
{
 800ba58:	b580      	push	{r7, lr}
 800ba5a:	b084      	sub	sp, #16
 800ba5c:	af00      	add	r7, sp, #0
 800ba5e:	6078      	str	r0, [r7, #4]
  while (seg != NULL) {
 800ba60:	e007      	b.n	800ba72 <tcp_segs_free+0x1a>
    struct tcp_seg *next = seg->next;
 800ba62:	687b      	ldr	r3, [r7, #4]
 800ba64:	681b      	ldr	r3, [r3, #0]
 800ba66:	60fb      	str	r3, [r7, #12]
    tcp_seg_free(seg);
 800ba68:	6878      	ldr	r0, [r7, #4]
 800ba6a:	f000 f809 	bl	800ba80 <tcp_seg_free>
    seg = next;
 800ba6e:	68fb      	ldr	r3, [r7, #12]
 800ba70:	607b      	str	r3, [r7, #4]
  while (seg != NULL) {
 800ba72:	687b      	ldr	r3, [r7, #4]
 800ba74:	2b00      	cmp	r3, #0
 800ba76:	d1f4      	bne.n	800ba62 <tcp_segs_free+0xa>
  }
}
 800ba78:	bf00      	nop
 800ba7a:	3710      	adds	r7, #16
 800ba7c:	46bd      	mov	sp, r7
 800ba7e:	bd80      	pop	{r7, pc}

0800ba80 <tcp_seg_free>:
 *
 * @param seg single tcp_seg to free
 */
void
tcp_seg_free(struct tcp_seg *seg)
{
 800ba80:	b580      	push	{r7, lr}
 800ba82:	b082      	sub	sp, #8
 800ba84:	af00      	add	r7, sp, #0
 800ba86:	6078      	str	r0, [r7, #4]
  if (seg != NULL) {
 800ba88:	687b      	ldr	r3, [r7, #4]
 800ba8a:	2b00      	cmp	r3, #0
 800ba8c:	d00c      	beq.n	800baa8 <tcp_seg_free+0x28>
    if (seg->p != NULL) {
 800ba8e:	687b      	ldr	r3, [r7, #4]
 800ba90:	685b      	ldr	r3, [r3, #4]
 800ba92:	2b00      	cmp	r3, #0
 800ba94:	d004      	beq.n	800baa0 <tcp_seg_free+0x20>
      pbuf_free(seg->p);
 800ba96:	687b      	ldr	r3, [r7, #4]
 800ba98:	685b      	ldr	r3, [r3, #4]
 800ba9a:	4618      	mov	r0, r3
 800ba9c:	f7fe fd08 	bl	800a4b0 <pbuf_free>
#if TCP_DEBUG
      seg->p = NULL;
#endif /* TCP_DEBUG */
    }
    memp_free(MEMP_TCP_SEG, seg);
 800baa0:	6879      	ldr	r1, [r7, #4]
 800baa2:	2003      	movs	r0, #3
 800baa4:	f7fd ff5a 	bl	800995c <memp_free>
  }
}
 800baa8:	bf00      	nop
 800baaa:	3708      	adds	r7, #8
 800baac:	46bd      	mov	sp, r7
 800baae:	bd80      	pop	{r7, pc}

0800bab0 <tcp_seg_copy>:
 * @param seg the old tcp_seg
 * @return a copy of seg
 */
struct tcp_seg *
tcp_seg_copy(struct tcp_seg *seg)
{
 800bab0:	b580      	push	{r7, lr}
 800bab2:	b084      	sub	sp, #16
 800bab4:	af00      	add	r7, sp, #0
 800bab6:	6078      	str	r0, [r7, #4]
  struct tcp_seg *cseg;

  cseg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG);
 800bab8:	2003      	movs	r0, #3
 800baba:	f7fd fed9 	bl	8009870 <memp_malloc>
 800babe:	60f8      	str	r0, [r7, #12]
  if (cseg == NULL) {
 800bac0:	68fb      	ldr	r3, [r7, #12]
 800bac2:	2b00      	cmp	r3, #0
 800bac4:	d101      	bne.n	800baca <tcp_seg_copy+0x1a>
    return NULL;
 800bac6:	2300      	movs	r3, #0
 800bac8:	e00a      	b.n	800bae0 <tcp_seg_copy+0x30>
  }
  SMEMCPY((u8_t *)cseg, (const u8_t *)seg, sizeof(struct tcp_seg));
 800baca:	2210      	movs	r2, #16
 800bacc:	6879      	ldr	r1, [r7, #4]
 800bace:	68f8      	ldr	r0, [r7, #12]
 800bad0:	f00a f8f1 	bl	8015cb6 <memcpy>
  pbuf_ref(cseg->p);
 800bad4:	68fb      	ldr	r3, [r7, #12]
 800bad6:	685b      	ldr	r3, [r3, #4]
 800bad8:	4618      	mov	r0, r3
 800bada:	f7fe fd9b 	bl	800a614 <pbuf_ref>
  return cseg;
 800bade:	68fb      	ldr	r3, [r7, #12]
}
 800bae0:	4618      	mov	r0, r3
 800bae2:	3710      	adds	r7, #16
 800bae4:	46bd      	mov	sp, r7
 800bae6:	bd80      	pop	{r7, pc}

0800bae8 <tcp_recv_null>:
 * Default receive callback that is called if the user didn't register
 * a recv callback for the pcb.
 */
err_t
tcp_recv_null(void *arg, struct tcp_pcb *pcb, struct pbuf *p, err_t err)
{
 800bae8:	b580      	push	{r7, lr}
 800baea:	b084      	sub	sp, #16
 800baec:	af00      	add	r7, sp, #0
 800baee:	60f8      	str	r0, [r7, #12]
 800baf0:	60b9      	str	r1, [r7, #8]
 800baf2:	607a      	str	r2, [r7, #4]
 800baf4:	70fb      	strb	r3, [r7, #3]
  LWIP_UNUSED_ARG(arg);
  if (p != NULL) {
 800baf6:	687b      	ldr	r3, [r7, #4]
 800baf8:	2b00      	cmp	r3, #0
 800bafa:	d009      	beq.n	800bb10 <tcp_recv_null+0x28>
    tcp_recved(pcb, p->tot_len);
 800bafc:	687b      	ldr	r3, [r7, #4]
 800bafe:	891b      	ldrh	r3, [r3, #8]
 800bb00:	4619      	mov	r1, r3
 800bb02:	68b8      	ldr	r0, [r7, #8]
 800bb04:	f7ff fa86 	bl	800b014 <tcp_recved>
    pbuf_free(p);
 800bb08:	6878      	ldr	r0, [r7, #4]
 800bb0a:	f7fe fcd1 	bl	800a4b0 <pbuf_free>
 800bb0e:	e008      	b.n	800bb22 <tcp_recv_null+0x3a>
  } else if (err == ERR_OK) {
 800bb10:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800bb14:	2b00      	cmp	r3, #0
 800bb16:	d104      	bne.n	800bb22 <tcp_recv_null+0x3a>
    return tcp_close(pcb);
 800bb18:	68b8      	ldr	r0, [r7, #8]
 800bb1a:	f7ff f90f 	bl	800ad3c <tcp_close>
 800bb1e:	4603      	mov	r3, r0
 800bb20:	e000      	b.n	800bb24 <tcp_recv_null+0x3c>
  }
  return ERR_OK;
 800bb22:	2300      	movs	r3, #0
}
 800bb24:	4618      	mov	r0, r3
 800bb26:	3710      	adds	r7, #16
 800bb28:	46bd      	mov	sp, r7
 800bb2a:	bd80      	pop	{r7, pc}

0800bb2c <tcp_kill_prio>:
 *
 * @param prio minimum priority
 */
static void
tcp_kill_prio(u8_t prio)
{
 800bb2c:	b580      	push	{r7, lr}
 800bb2e:	b086      	sub	sp, #24
 800bb30:	af00      	add	r7, sp, #0
 800bb32:	4603      	mov	r3, r0
 800bb34:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;
  u8_t mprio;

  mprio = LWIP_MIN(TCP_PRIO_MAX, prio);
 800bb36:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800bb3a:	2b00      	cmp	r3, #0
 800bb3c:	db01      	blt.n	800bb42 <tcp_kill_prio+0x16>
 800bb3e:	79fb      	ldrb	r3, [r7, #7]
 800bb40:	e000      	b.n	800bb44 <tcp_kill_prio+0x18>
 800bb42:	237f      	movs	r3, #127	; 0x7f
 800bb44:	72fb      	strb	r3, [r7, #11]

  /* We kill the oldest active connection that has lower priority than prio. */
  inactivity = 0;
 800bb46:	2300      	movs	r3, #0
 800bb48:	60fb      	str	r3, [r7, #12]
  inactive = NULL;
 800bb4a:	2300      	movs	r3, #0
 800bb4c:	613b      	str	r3, [r7, #16]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800bb4e:	4b16      	ldr	r3, [pc, #88]	; (800bba8 <tcp_kill_prio+0x7c>)
 800bb50:	681b      	ldr	r3, [r3, #0]
 800bb52:	617b      	str	r3, [r7, #20]
 800bb54:	e01a      	b.n	800bb8c <tcp_kill_prio+0x60>
    if (pcb->prio <= mprio &&
 800bb56:	697b      	ldr	r3, [r7, #20]
 800bb58:	7d5b      	ldrb	r3, [r3, #21]
 800bb5a:	7afa      	ldrb	r2, [r7, #11]
 800bb5c:	429a      	cmp	r2, r3
 800bb5e:	d312      	bcc.n	800bb86 <tcp_kill_prio+0x5a>
       (u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 800bb60:	4b12      	ldr	r3, [pc, #72]	; (800bbac <tcp_kill_prio+0x80>)
 800bb62:	681a      	ldr	r2, [r3, #0]
 800bb64:	697b      	ldr	r3, [r7, #20]
 800bb66:	6a1b      	ldr	r3, [r3, #32]
 800bb68:	1ad3      	subs	r3, r2, r3
    if (pcb->prio <= mprio &&
 800bb6a:	68fa      	ldr	r2, [r7, #12]
 800bb6c:	429a      	cmp	r2, r3
 800bb6e:	d80a      	bhi.n	800bb86 <tcp_kill_prio+0x5a>
      inactivity = tcp_ticks - pcb->tmr;
 800bb70:	4b0e      	ldr	r3, [pc, #56]	; (800bbac <tcp_kill_prio+0x80>)
 800bb72:	681a      	ldr	r2, [r3, #0]
 800bb74:	697b      	ldr	r3, [r7, #20]
 800bb76:	6a1b      	ldr	r3, [r3, #32]
 800bb78:	1ad3      	subs	r3, r2, r3
 800bb7a:	60fb      	str	r3, [r7, #12]
      inactive = pcb;
 800bb7c:	697b      	ldr	r3, [r7, #20]
 800bb7e:	613b      	str	r3, [r7, #16]
      mprio = pcb->prio;
 800bb80:	697b      	ldr	r3, [r7, #20]
 800bb82:	7d5b      	ldrb	r3, [r3, #21]
 800bb84:	72fb      	strb	r3, [r7, #11]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800bb86:	697b      	ldr	r3, [r7, #20]
 800bb88:	68db      	ldr	r3, [r3, #12]
 800bb8a:	617b      	str	r3, [r7, #20]
 800bb8c:	697b      	ldr	r3, [r7, #20]
 800bb8e:	2b00      	cmp	r3, #0
 800bb90:	d1e1      	bne.n	800bb56 <tcp_kill_prio+0x2a>
    }
  }
  if (inactive != NULL) {
 800bb92:	693b      	ldr	r3, [r7, #16]
 800bb94:	2b00      	cmp	r3, #0
 800bb96:	d002      	beq.n	800bb9e <tcp_kill_prio+0x72>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_prio: killing oldest PCB %p (%"S32_F")\n",
           (void *)inactive, inactivity));
    tcp_abort(inactive);
 800bb98:	6938      	ldr	r0, [r7, #16]
 800bb9a:	f7ff f9e1 	bl	800af60 <tcp_abort>
  }
}
 800bb9e:	bf00      	nop
 800bba0:	3718      	adds	r7, #24
 800bba2:	46bd      	mov	sp, r7
 800bba4:	bd80      	pop	{r7, pc}
 800bba6:	bf00      	nop
 800bba8:	2400f2e8 	.word	0x2400f2e8
 800bbac:	2400f2ec 	.word	0x2400f2ec

0800bbb0 <tcp_kill_state>:
 * Kills the oldest connection that is in specific state.
 * Called from tcp_alloc() for LAST_ACK and CLOSING if no more connections are available.
 */
static void
tcp_kill_state(enum tcp_state state)
{
 800bbb0:	b580      	push	{r7, lr}
 800bbb2:	b086      	sub	sp, #24
 800bbb4:	af00      	add	r7, sp, #0
 800bbb6:	4603      	mov	r3, r0
 800bbb8:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;

  LWIP_ASSERT("invalid state", (state == CLOSING) || (state == LAST_ACK));
 800bbba:	79fb      	ldrb	r3, [r7, #7]
 800bbbc:	2b08      	cmp	r3, #8
 800bbbe:	d009      	beq.n	800bbd4 <tcp_kill_state+0x24>
 800bbc0:	79fb      	ldrb	r3, [r7, #7]
 800bbc2:	2b09      	cmp	r3, #9
 800bbc4:	d006      	beq.n	800bbd4 <tcp_kill_state+0x24>
 800bbc6:	4b1a      	ldr	r3, [pc, #104]	; (800bc30 <tcp_kill_state+0x80>)
 800bbc8:	f240 52dc 	movw	r2, #1500	; 0x5dc
 800bbcc:	4919      	ldr	r1, [pc, #100]	; (800bc34 <tcp_kill_state+0x84>)
 800bbce:	481a      	ldr	r0, [pc, #104]	; (800bc38 <tcp_kill_state+0x88>)
 800bbd0:	f00a f800 	bl	8015bd4 <printf_>

  inactivity = 0;
 800bbd4:	2300      	movs	r3, #0
 800bbd6:	60fb      	str	r3, [r7, #12]
  inactive = NULL;
 800bbd8:	2300      	movs	r3, #0
 800bbda:	613b      	str	r3, [r7, #16]
  /* Go through the list of active pcbs and get the oldest pcb that is in state
     CLOSING/LAST_ACK. */
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800bbdc:	4b17      	ldr	r3, [pc, #92]	; (800bc3c <tcp_kill_state+0x8c>)
 800bbde:	681b      	ldr	r3, [r3, #0]
 800bbe0:	617b      	str	r3, [r7, #20]
 800bbe2:	e017      	b.n	800bc14 <tcp_kill_state+0x64>
    if (pcb->state == state) {
 800bbe4:	697b      	ldr	r3, [r7, #20]
 800bbe6:	7d1b      	ldrb	r3, [r3, #20]
 800bbe8:	79fa      	ldrb	r2, [r7, #7]
 800bbea:	429a      	cmp	r2, r3
 800bbec:	d10f      	bne.n	800bc0e <tcp_kill_state+0x5e>
      if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 800bbee:	4b14      	ldr	r3, [pc, #80]	; (800bc40 <tcp_kill_state+0x90>)
 800bbf0:	681a      	ldr	r2, [r3, #0]
 800bbf2:	697b      	ldr	r3, [r7, #20]
 800bbf4:	6a1b      	ldr	r3, [r3, #32]
 800bbf6:	1ad3      	subs	r3, r2, r3
 800bbf8:	68fa      	ldr	r2, [r7, #12]
 800bbfa:	429a      	cmp	r2, r3
 800bbfc:	d807      	bhi.n	800bc0e <tcp_kill_state+0x5e>
        inactivity = tcp_ticks - pcb->tmr;
 800bbfe:	4b10      	ldr	r3, [pc, #64]	; (800bc40 <tcp_kill_state+0x90>)
 800bc00:	681a      	ldr	r2, [r3, #0]
 800bc02:	697b      	ldr	r3, [r7, #20]
 800bc04:	6a1b      	ldr	r3, [r3, #32]
 800bc06:	1ad3      	subs	r3, r2, r3
 800bc08:	60fb      	str	r3, [r7, #12]
        inactive = pcb;
 800bc0a:	697b      	ldr	r3, [r7, #20]
 800bc0c:	613b      	str	r3, [r7, #16]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800bc0e:	697b      	ldr	r3, [r7, #20]
 800bc10:	68db      	ldr	r3, [r3, #12]
 800bc12:	617b      	str	r3, [r7, #20]
 800bc14:	697b      	ldr	r3, [r7, #20]
 800bc16:	2b00      	cmp	r3, #0
 800bc18:	d1e4      	bne.n	800bbe4 <tcp_kill_state+0x34>
      }
    }
  }
  if (inactive != NULL) {
 800bc1a:	693b      	ldr	r3, [r7, #16]
 800bc1c:	2b00      	cmp	r3, #0
 800bc1e:	d003      	beq.n	800bc28 <tcp_kill_state+0x78>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_closing: killing oldest %s PCB %p (%"S32_F")\n",
           tcp_state_str[state], (void *)inactive, inactivity));
    /* Don't send a RST, since no data is lost. */
    tcp_abandon(inactive, 0);
 800bc20:	2100      	movs	r1, #0
 800bc22:	6938      	ldr	r0, [r7, #16]
 800bc24:	f7ff f8ea 	bl	800adfc <tcp_abandon>
  }
}
 800bc28:	bf00      	nop
 800bc2a:	3718      	adds	r7, #24
 800bc2c:	46bd      	mov	sp, r7
 800bc2e:	bd80      	pop	{r7, pc}
 800bc30:	0801ab50 	.word	0x0801ab50
 800bc34:	0801ae60 	.word	0x0801ae60
 800bc38:	0801ab8c 	.word	0x0801ab8c
 800bc3c:	2400f2e8 	.word	0x2400f2e8
 800bc40:	2400f2ec 	.word	0x2400f2ec

0800bc44 <tcp_kill_timewait>:
 * Kills the oldest connection that is in TIME_WAIT state.
 * Called from tcp_alloc() if no more connections are available.
 */
static void
tcp_kill_timewait(void)
{
 800bc44:	b580      	push	{r7, lr}
 800bc46:	b084      	sub	sp, #16
 800bc48:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;

  inactivity = 0;
 800bc4a:	2300      	movs	r3, #0
 800bc4c:	607b      	str	r3, [r7, #4]
  inactive = NULL;
 800bc4e:	2300      	movs	r3, #0
 800bc50:	60bb      	str	r3, [r7, #8]
  /* Go through the list of TIME_WAIT pcbs and get the oldest pcb. */
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 800bc52:	4b12      	ldr	r3, [pc, #72]	; (800bc9c <tcp_kill_timewait+0x58>)
 800bc54:	681b      	ldr	r3, [r3, #0]
 800bc56:	60fb      	str	r3, [r7, #12]
 800bc58:	e012      	b.n	800bc80 <tcp_kill_timewait+0x3c>
    if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 800bc5a:	4b11      	ldr	r3, [pc, #68]	; (800bca0 <tcp_kill_timewait+0x5c>)
 800bc5c:	681a      	ldr	r2, [r3, #0]
 800bc5e:	68fb      	ldr	r3, [r7, #12]
 800bc60:	6a1b      	ldr	r3, [r3, #32]
 800bc62:	1ad3      	subs	r3, r2, r3
 800bc64:	687a      	ldr	r2, [r7, #4]
 800bc66:	429a      	cmp	r2, r3
 800bc68:	d807      	bhi.n	800bc7a <tcp_kill_timewait+0x36>
      inactivity = tcp_ticks - pcb->tmr;
 800bc6a:	4b0d      	ldr	r3, [pc, #52]	; (800bca0 <tcp_kill_timewait+0x5c>)
 800bc6c:	681a      	ldr	r2, [r3, #0]
 800bc6e:	68fb      	ldr	r3, [r7, #12]
 800bc70:	6a1b      	ldr	r3, [r3, #32]
 800bc72:	1ad3      	subs	r3, r2, r3
 800bc74:	607b      	str	r3, [r7, #4]
      inactive = pcb;
 800bc76:	68fb      	ldr	r3, [r7, #12]
 800bc78:	60bb      	str	r3, [r7, #8]
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 800bc7a:	68fb      	ldr	r3, [r7, #12]
 800bc7c:	68db      	ldr	r3, [r3, #12]
 800bc7e:	60fb      	str	r3, [r7, #12]
 800bc80:	68fb      	ldr	r3, [r7, #12]
 800bc82:	2b00      	cmp	r3, #0
 800bc84:	d1e9      	bne.n	800bc5a <tcp_kill_timewait+0x16>
    }
  }
  if (inactive != NULL) {
 800bc86:	68bb      	ldr	r3, [r7, #8]
 800bc88:	2b00      	cmp	r3, #0
 800bc8a:	d002      	beq.n	800bc92 <tcp_kill_timewait+0x4e>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_timewait: killing oldest TIME-WAIT PCB %p (%"S32_F")\n",
           (void *)inactive, inactivity));
    tcp_abort(inactive);
 800bc8c:	68b8      	ldr	r0, [r7, #8]
 800bc8e:	f7ff f967 	bl	800af60 <tcp_abort>
  }
}
 800bc92:	bf00      	nop
 800bc94:	3710      	adds	r7, #16
 800bc96:	46bd      	mov	sp, r7
 800bc98:	bd80      	pop	{r7, pc}
 800bc9a:	bf00      	nop
 800bc9c:	2400f2f8 	.word	0x2400f2f8
 800bca0:	2400f2ec 	.word	0x2400f2ec

0800bca4 <tcp_alloc>:
 * @param prio priority for the new pcb
 * @return a new tcp_pcb that initially is in state CLOSED
 */
struct tcp_pcb *
tcp_alloc(u8_t prio)
{
 800bca4:	b580      	push	{r7, lr}
 800bca6:	b084      	sub	sp, #16
 800bca8:	af00      	add	r7, sp, #0
 800bcaa:	4603      	mov	r3, r0
 800bcac:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb;

  pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800bcae:	2001      	movs	r0, #1
 800bcb0:	f7fd fdde 	bl	8009870 <memp_malloc>
 800bcb4:	60f8      	str	r0, [r7, #12]
  if (pcb == NULL) {
 800bcb6:	68fb      	ldr	r3, [r7, #12]
 800bcb8:	2b00      	cmp	r3, #0
 800bcba:	d124      	bne.n	800bd06 <tcp_alloc+0x62>
    /* Try killing oldest connection in TIME-WAIT. */
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest TIME-WAIT connection\n"));
    tcp_kill_timewait();
 800bcbc:	f7ff ffc2 	bl	800bc44 <tcp_kill_timewait>
    /* Try to allocate a tcp_pcb again. */
    pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800bcc0:	2001      	movs	r0, #1
 800bcc2:	f7fd fdd5 	bl	8009870 <memp_malloc>
 800bcc6:	60f8      	str	r0, [r7, #12]
    if (pcb == NULL) {
 800bcc8:	68fb      	ldr	r3, [r7, #12]
 800bcca:	2b00      	cmp	r3, #0
 800bccc:	d11b      	bne.n	800bd06 <tcp_alloc+0x62>
      /* Try killing oldest connection in LAST-ACK (these wouldn't go to TIME-WAIT). */
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest LAST-ACK connection\n"));
      tcp_kill_state(LAST_ACK);
 800bcce:	2009      	movs	r0, #9
 800bcd0:	f7ff ff6e 	bl	800bbb0 <tcp_kill_state>
      /* Try to allocate a tcp_pcb again. */
      pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800bcd4:	2001      	movs	r0, #1
 800bcd6:	f7fd fdcb 	bl	8009870 <memp_malloc>
 800bcda:	60f8      	str	r0, [r7, #12]
      if (pcb == NULL) {
 800bcdc:	68fb      	ldr	r3, [r7, #12]
 800bcde:	2b00      	cmp	r3, #0
 800bce0:	d111      	bne.n	800bd06 <tcp_alloc+0x62>
        /* Try killing oldest connection in CLOSING. */
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest CLOSING connection\n"));
        tcp_kill_state(CLOSING);
 800bce2:	2008      	movs	r0, #8
 800bce4:	f7ff ff64 	bl	800bbb0 <tcp_kill_state>
        /* Try to allocate a tcp_pcb again. */
        pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800bce8:	2001      	movs	r0, #1
 800bcea:	f7fd fdc1 	bl	8009870 <memp_malloc>
 800bcee:	60f8      	str	r0, [r7, #12]
        if (pcb == NULL) {
 800bcf0:	68fb      	ldr	r3, [r7, #12]
 800bcf2:	2b00      	cmp	r3, #0
 800bcf4:	d107      	bne.n	800bd06 <tcp_alloc+0x62>
          /* Try killing active connections with lower priority than the new one. */
          LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing connection with prio lower than %d\n", prio));
          tcp_kill_prio(prio);
 800bcf6:	79fb      	ldrb	r3, [r7, #7]
 800bcf8:	4618      	mov	r0, r3
 800bcfa:	f7ff ff17 	bl	800bb2c <tcp_kill_prio>
          /* Try to allocate a tcp_pcb again. */
          pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800bcfe:	2001      	movs	r0, #1
 800bd00:	f7fd fdb6 	bl	8009870 <memp_malloc>
 800bd04:	60f8      	str	r0, [r7, #12]
    if (pcb != NULL) {
      /* adjust err stats: memp_malloc failed above */
      MEMP_STATS_DEC(err, MEMP_TCP_PCB);
    }
  }
  if (pcb != NULL) {
 800bd06:	68fb      	ldr	r3, [r7, #12]
 800bd08:	2b00      	cmp	r3, #0
 800bd0a:	d03f      	beq.n	800bd8c <tcp_alloc+0xe8>
    /* zero out the whole pcb, so there is no need to initialize members to zero */
    memset(pcb, 0, sizeof(struct tcp_pcb));
 800bd0c:	2298      	movs	r2, #152	; 0x98
 800bd0e:	2100      	movs	r1, #0
 800bd10:	68f8      	ldr	r0, [r7, #12]
 800bd12:	f009 ffdb 	bl	8015ccc <memset>
    pcb->prio = prio;
 800bd16:	68fb      	ldr	r3, [r7, #12]
 800bd18:	79fa      	ldrb	r2, [r7, #7]
 800bd1a:	755a      	strb	r2, [r3, #21]
    pcb->snd_buf = TCP_SND_BUF;
 800bd1c:	68fb      	ldr	r3, [r7, #12]
 800bd1e:	f640 3268 	movw	r2, #2920	; 0xb68
 800bd22:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
    /* Start with a window that does not need scaling. When window scaling is
       enabled and used, the window is enlarged when both sides agree on scaling. */
    pcb->rcv_wnd = pcb->rcv_ann_wnd = TCPWND_MIN16(TCP_WND);
 800bd26:	68fb      	ldr	r3, [r7, #12]
 800bd28:	f241 62d0 	movw	r2, #5840	; 0x16d0
 800bd2c:	855a      	strh	r2, [r3, #42]	; 0x2a
 800bd2e:	68fb      	ldr	r3, [r7, #12]
 800bd30:	8d5a      	ldrh	r2, [r3, #42]	; 0x2a
 800bd32:	68fb      	ldr	r3, [r7, #12]
 800bd34:	851a      	strh	r2, [r3, #40]	; 0x28
    pcb->ttl = TCP_TTL;
 800bd36:	68fb      	ldr	r3, [r7, #12]
 800bd38:	22ff      	movs	r2, #255	; 0xff
 800bd3a:	729a      	strb	r2, [r3, #10]
    /* As initial send MSS, we use TCP_MSS but limit it to 536.
       The send MSS is updated when an MSS option is received. */
    pcb->mss = INITIAL_MSS;
 800bd3c:	68fb      	ldr	r3, [r7, #12]
 800bd3e:	f44f 7206 	mov.w	r2, #536	; 0x218
 800bd42:	865a      	strh	r2, [r3, #50]	; 0x32
    pcb->rto = 3000 / TCP_SLOW_INTERVAL;
 800bd44:	68fb      	ldr	r3, [r7, #12]
 800bd46:	2206      	movs	r2, #6
 800bd48:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    pcb->sv = 3000 / TCP_SLOW_INTERVAL;
 800bd4c:	68fb      	ldr	r3, [r7, #12]
 800bd4e:	2206      	movs	r2, #6
 800bd50:	87da      	strh	r2, [r3, #62]	; 0x3e
    pcb->rtime = -1;
 800bd52:	68fb      	ldr	r3, [r7, #12]
 800bd54:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800bd58:	861a      	strh	r2, [r3, #48]	; 0x30
    pcb->cwnd = 1;
 800bd5a:	68fb      	ldr	r3, [r7, #12]
 800bd5c:	2201      	movs	r2, #1
 800bd5e:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
    pcb->tmr = tcp_ticks;
 800bd62:	4b0d      	ldr	r3, [pc, #52]	; (800bd98 <tcp_alloc+0xf4>)
 800bd64:	681a      	ldr	r2, [r3, #0]
 800bd66:	68fb      	ldr	r3, [r7, #12]
 800bd68:	621a      	str	r2, [r3, #32]
    pcb->last_timer = tcp_timer_ctr;
 800bd6a:	4b0c      	ldr	r3, [pc, #48]	; (800bd9c <tcp_alloc+0xf8>)
 800bd6c:	781a      	ldrb	r2, [r3, #0]
 800bd6e:	68fb      	ldr	r3, [r7, #12]
 800bd70:	775a      	strb	r2, [r3, #29]
    of using the largest advertised receive window.  We've seen complications with
    receiving TCPs that use window scaling and/or window auto-tuning where the
    initial advertised window is very small and then grows rapidly once the
    connection is established. To avoid these complications, we set ssthresh to the
    largest effective cwnd (amount of in-flight data) that the sender can have. */
    pcb->ssthresh = TCP_SND_BUF;
 800bd72:	68fb      	ldr	r3, [r7, #12]
 800bd74:	f640 3268 	movw	r2, #2920	; 0xb68
 800bd78:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a

#if LWIP_CALLBACK_API
    pcb->recv = tcp_recv_null;
 800bd7c:	68fb      	ldr	r3, [r7, #12]
 800bd7e:	4a08      	ldr	r2, [pc, #32]	; (800bda0 <tcp_alloc+0xfc>)
 800bd80:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
#endif /* LWIP_CALLBACK_API */

    /* Init KEEPALIVE timer */
    pcb->keep_idle  = TCP_KEEPIDLE_DEFAULT;
 800bd84:	68fb      	ldr	r3, [r7, #12]
 800bd86:	4a07      	ldr	r2, [pc, #28]	; (800bda4 <tcp_alloc+0x100>)
 800bd88:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
#if LWIP_TCP_KEEPALIVE
    pcb->keep_intvl = TCP_KEEPINTVL_DEFAULT;
    pcb->keep_cnt   = TCP_KEEPCNT_DEFAULT;
#endif /* LWIP_TCP_KEEPALIVE */
  }
  return pcb;
 800bd8c:	68fb      	ldr	r3, [r7, #12]
}
 800bd8e:	4618      	mov	r0, r3
 800bd90:	3710      	adds	r7, #16
 800bd92:	46bd      	mov	sp, r7
 800bd94:	bd80      	pop	{r7, pc}
 800bd96:	bf00      	nop
 800bd98:	2400f2ec 	.word	0x2400f2ec
 800bd9c:	2400860a 	.word	0x2400860a
 800bda0:	0800bae9 	.word	0x0800bae9
 800bda4:	006ddd00 	.word	0x006ddd00

0800bda8 <tcp_new_ip_type>:
 * supply @ref IPADDR_TYPE_ANY as argument and bind to @ref IP_ANY_TYPE.
 * @return a new tcp_pcb that initially is in state CLOSED
 */
struct tcp_pcb *
tcp_new_ip_type(u8_t type)
{
 800bda8:	b580      	push	{r7, lr}
 800bdaa:	b084      	sub	sp, #16
 800bdac:	af00      	add	r7, sp, #0
 800bdae:	4603      	mov	r3, r0
 800bdb0:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb * pcb;
  pcb = tcp_alloc(TCP_PRIO_NORMAL);
 800bdb2:	2040      	movs	r0, #64	; 0x40
 800bdb4:	f7ff ff76 	bl	800bca4 <tcp_alloc>
 800bdb8:	60f8      	str	r0, [r7, #12]
    IP_SET_TYPE_VAL(pcb->remote_ip, type);
  }
#else
  LWIP_UNUSED_ARG(type);
#endif /* LWIP_IPV4 && LWIP_IPV6 */
  return pcb;
 800bdba:	68fb      	ldr	r3, [r7, #12]
}
 800bdbc:	4618      	mov	r0, r3
 800bdbe:	3710      	adds	r7, #16
 800bdc0:	46bd      	mov	sp, r7
 800bdc2:	bd80      	pop	{r7, pc}

0800bdc4 <tcp_arg>:
 * @param pcb tcp_pcb to set the callback argument
 * @param arg void pointer argument to pass to callback functions
 */
void
tcp_arg(struct tcp_pcb *pcb, void *arg)
{
 800bdc4:	b480      	push	{r7}
 800bdc6:	b083      	sub	sp, #12
 800bdc8:	af00      	add	r7, sp, #0
 800bdca:	6078      	str	r0, [r7, #4]
 800bdcc:	6039      	str	r1, [r7, #0]
  /* This function is allowed to be called for both listen pcbs and
     connection pcbs. */
  if (pcb != NULL) {
 800bdce:	687b      	ldr	r3, [r7, #4]
 800bdd0:	2b00      	cmp	r3, #0
 800bdd2:	d002      	beq.n	800bdda <tcp_arg+0x16>
    pcb->callback_arg = arg;
 800bdd4:	687b      	ldr	r3, [r7, #4]
 800bdd6:	683a      	ldr	r2, [r7, #0]
 800bdd8:	611a      	str	r2, [r3, #16]
  }
}
 800bdda:	bf00      	nop
 800bddc:	370c      	adds	r7, #12
 800bdde:	46bd      	mov	sp, r7
 800bde0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bde4:	4770      	bx	lr
	...

0800bde8 <tcp_recv>:
 * @param pcb tcp_pcb to set the recv callback
 * @param recv callback function to call for this pcb when data is received
 */
void
tcp_recv(struct tcp_pcb *pcb, tcp_recv_fn recv)
{
 800bde8:	b580      	push	{r7, lr}
 800bdea:	b082      	sub	sp, #8
 800bdec:	af00      	add	r7, sp, #0
 800bdee:	6078      	str	r0, [r7, #4]
 800bdf0:	6039      	str	r1, [r7, #0]
  if (pcb != NULL) {
 800bdf2:	687b      	ldr	r3, [r7, #4]
 800bdf4:	2b00      	cmp	r3, #0
 800bdf6:	d00e      	beq.n	800be16 <tcp_recv+0x2e>
    LWIP_ASSERT("invalid socket state for recv callback", pcb->state != LISTEN);
 800bdf8:	687b      	ldr	r3, [r7, #4]
 800bdfa:	7d1b      	ldrb	r3, [r3, #20]
 800bdfc:	2b01      	cmp	r3, #1
 800bdfe:	d106      	bne.n	800be0e <tcp_recv+0x26>
 800be00:	4b07      	ldr	r3, [pc, #28]	; (800be20 <tcp_recv+0x38>)
 800be02:	f240 62bb 	movw	r2, #1723	; 0x6bb
 800be06:	4907      	ldr	r1, [pc, #28]	; (800be24 <tcp_recv+0x3c>)
 800be08:	4807      	ldr	r0, [pc, #28]	; (800be28 <tcp_recv+0x40>)
 800be0a:	f009 fee3 	bl	8015bd4 <printf_>
    pcb->recv = recv;
 800be0e:	687b      	ldr	r3, [r7, #4]
 800be10:	683a      	ldr	r2, [r7, #0]
 800be12:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  }
}
 800be16:	bf00      	nop
 800be18:	3708      	adds	r7, #8
 800be1a:	46bd      	mov	sp, r7
 800be1c:	bd80      	pop	{r7, pc}
 800be1e:	bf00      	nop
 800be20:	0801ab50 	.word	0x0801ab50
 800be24:	0801ae70 	.word	0x0801ae70
 800be28:	0801ab8c 	.word	0x0801ab8c

0800be2c <tcp_sent>:
 * @param pcb tcp_pcb to set the sent callback
 * @param sent callback function to call for this pcb when data is successfully sent
 */
void
tcp_sent(struct tcp_pcb *pcb, tcp_sent_fn sent)
{
 800be2c:	b580      	push	{r7, lr}
 800be2e:	b082      	sub	sp, #8
 800be30:	af00      	add	r7, sp, #0
 800be32:	6078      	str	r0, [r7, #4]
 800be34:	6039      	str	r1, [r7, #0]
  if (pcb != NULL) {
 800be36:	687b      	ldr	r3, [r7, #4]
 800be38:	2b00      	cmp	r3, #0
 800be3a:	d00d      	beq.n	800be58 <tcp_sent+0x2c>
    LWIP_ASSERT("invalid socket state for sent callback", pcb->state != LISTEN);
 800be3c:	687b      	ldr	r3, [r7, #4]
 800be3e:	7d1b      	ldrb	r3, [r3, #20]
 800be40:	2b01      	cmp	r3, #1
 800be42:	d106      	bne.n	800be52 <tcp_sent+0x26>
 800be44:	4b06      	ldr	r3, [pc, #24]	; (800be60 <tcp_sent+0x34>)
 800be46:	f240 62cc 	movw	r2, #1740	; 0x6cc
 800be4a:	4906      	ldr	r1, [pc, #24]	; (800be64 <tcp_sent+0x38>)
 800be4c:	4806      	ldr	r0, [pc, #24]	; (800be68 <tcp_sent+0x3c>)
 800be4e:	f009 fec1 	bl	8015bd4 <printf_>
    pcb->sent = sent;
 800be52:	687b      	ldr	r3, [r7, #4]
 800be54:	683a      	ldr	r2, [r7, #0]
 800be56:	67da      	str	r2, [r3, #124]	; 0x7c
  }
}
 800be58:	bf00      	nop
 800be5a:	3708      	adds	r7, #8
 800be5c:	46bd      	mov	sp, r7
 800be5e:	bd80      	pop	{r7, pc}
 800be60:	0801ab50 	.word	0x0801ab50
 800be64:	0801ae98 	.word	0x0801ae98
 800be68:	0801ab8c 	.word	0x0801ab8c

0800be6c <tcp_err>:
 * @param err callback function to call for this pcb when a fatal error
 *        has occurred on the connection
 */
void
tcp_err(struct tcp_pcb *pcb, tcp_err_fn err)
{
 800be6c:	b580      	push	{r7, lr}
 800be6e:	b082      	sub	sp, #8
 800be70:	af00      	add	r7, sp, #0
 800be72:	6078      	str	r0, [r7, #4]
 800be74:	6039      	str	r1, [r7, #0]
  if (pcb != NULL) {
 800be76:	687b      	ldr	r3, [r7, #4]
 800be78:	2b00      	cmp	r3, #0
 800be7a:	d00e      	beq.n	800be9a <tcp_err+0x2e>
    LWIP_ASSERT("invalid socket state for err callback", pcb->state != LISTEN);
 800be7c:	687b      	ldr	r3, [r7, #4]
 800be7e:	7d1b      	ldrb	r3, [r3, #20]
 800be80:	2b01      	cmp	r3, #1
 800be82:	d106      	bne.n	800be92 <tcp_err+0x26>
 800be84:	4b07      	ldr	r3, [pc, #28]	; (800bea4 <tcp_err+0x38>)
 800be86:	f44f 62dc 	mov.w	r2, #1760	; 0x6e0
 800be8a:	4907      	ldr	r1, [pc, #28]	; (800bea8 <tcp_err+0x3c>)
 800be8c:	4807      	ldr	r0, [pc, #28]	; (800beac <tcp_err+0x40>)
 800be8e:	f009 fea1 	bl	8015bd4 <printf_>
    pcb->errf = err;
 800be92:	687b      	ldr	r3, [r7, #4]
 800be94:	683a      	ldr	r2, [r7, #0]
 800be96:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  }
}
 800be9a:	bf00      	nop
 800be9c:	3708      	adds	r7, #8
 800be9e:	46bd      	mov	sp, r7
 800bea0:	bd80      	pop	{r7, pc}
 800bea2:	bf00      	nop
 800bea4:	0801ab50 	.word	0x0801ab50
 800bea8:	0801aec0 	.word	0x0801aec0
 800beac:	0801ab8c 	.word	0x0801ab8c

0800beb0 <tcp_accept>:
 * @param accept callback function to call for this pcb when LISTENing
 *        connection has been connected to another host
 */
void
tcp_accept(struct tcp_pcb *pcb, tcp_accept_fn accept)
{
 800beb0:	b480      	push	{r7}
 800beb2:	b085      	sub	sp, #20
 800beb4:	af00      	add	r7, sp, #0
 800beb6:	6078      	str	r0, [r7, #4]
 800beb8:	6039      	str	r1, [r7, #0]
  if ((pcb != NULL) && (pcb->state == LISTEN)) {
 800beba:	687b      	ldr	r3, [r7, #4]
 800bebc:	2b00      	cmp	r3, #0
 800bebe:	d008      	beq.n	800bed2 <tcp_accept+0x22>
 800bec0:	687b      	ldr	r3, [r7, #4]
 800bec2:	7d1b      	ldrb	r3, [r3, #20]
 800bec4:	2b01      	cmp	r3, #1
 800bec6:	d104      	bne.n	800bed2 <tcp_accept+0x22>
    struct tcp_pcb_listen *lpcb = (struct tcp_pcb_listen*)pcb;
 800bec8:	687b      	ldr	r3, [r7, #4]
 800beca:	60fb      	str	r3, [r7, #12]
    lpcb->accept = accept;
 800becc:	68fb      	ldr	r3, [r7, #12]
 800bece:	683a      	ldr	r2, [r7, #0]
 800bed0:	619a      	str	r2, [r3, #24]
  }
}
 800bed2:	bf00      	nop
 800bed4:	3714      	adds	r7, #20
 800bed6:	46bd      	mov	sp, r7
 800bed8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bedc:	4770      	bx	lr
	...

0800bee0 <tcp_poll>:
 * timer interval, which is called twice a second.
 *
 */
void
tcp_poll(struct tcp_pcb *pcb, tcp_poll_fn poll, u8_t interval)
{
 800bee0:	b580      	push	{r7, lr}
 800bee2:	b084      	sub	sp, #16
 800bee4:	af00      	add	r7, sp, #0
 800bee6:	60f8      	str	r0, [r7, #12]
 800bee8:	60b9      	str	r1, [r7, #8]
 800beea:	4613      	mov	r3, r2
 800beec:	71fb      	strb	r3, [r7, #7]
  LWIP_ASSERT("invalid socket state for poll", pcb->state != LISTEN);
 800beee:	68fb      	ldr	r3, [r7, #12]
 800bef0:	7d1b      	ldrb	r3, [r3, #20]
 800bef2:	2b01      	cmp	r3, #1
 800bef4:	d106      	bne.n	800bf04 <tcp_poll+0x24>
 800bef6:	4b09      	ldr	r3, [pc, #36]	; (800bf1c <tcp_poll+0x3c>)
 800bef8:	f240 7203 	movw	r2, #1795	; 0x703
 800befc:	4908      	ldr	r1, [pc, #32]	; (800bf20 <tcp_poll+0x40>)
 800befe:	4809      	ldr	r0, [pc, #36]	; (800bf24 <tcp_poll+0x44>)
 800bf00:	f009 fe68 	bl	8015bd4 <printf_>
#if LWIP_CALLBACK_API
  pcb->poll = poll;
 800bf04:	68fb      	ldr	r3, [r7, #12]
 800bf06:	68ba      	ldr	r2, [r7, #8]
 800bf08:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
#else /* LWIP_CALLBACK_API */
  LWIP_UNUSED_ARG(poll);
#endif /* LWIP_CALLBACK_API */
  pcb->pollinterval = interval;
 800bf0c:	68fb      	ldr	r3, [r7, #12]
 800bf0e:	79fa      	ldrb	r2, [r7, #7]
 800bf10:	771a      	strb	r2, [r3, #28]
}
 800bf12:	bf00      	nop
 800bf14:	3710      	adds	r7, #16
 800bf16:	46bd      	mov	sp, r7
 800bf18:	bd80      	pop	{r7, pc}
 800bf1a:	bf00      	nop
 800bf1c:	0801ab50 	.word	0x0801ab50
 800bf20:	0801aee8 	.word	0x0801aee8
 800bf24:	0801ab8c 	.word	0x0801ab8c

0800bf28 <tcp_pcb_purge>:
 *
 * @param pcb tcp_pcb to purge. The pcb itself is not deallocated!
 */
void
tcp_pcb_purge(struct tcp_pcb *pcb)
{
 800bf28:	b580      	push	{r7, lr}
 800bf2a:	b082      	sub	sp, #8
 800bf2c:	af00      	add	r7, sp, #0
 800bf2e:	6078      	str	r0, [r7, #4]
  if (pcb->state != CLOSED &&
 800bf30:	687b      	ldr	r3, [r7, #4]
 800bf32:	7d1b      	ldrb	r3, [r3, #20]
 800bf34:	2b00      	cmp	r3, #0
 800bf36:	d034      	beq.n	800bfa2 <tcp_pcb_purge+0x7a>
     pcb->state != TIME_WAIT &&
 800bf38:	687b      	ldr	r3, [r7, #4]
 800bf3a:	7d1b      	ldrb	r3, [r3, #20]
  if (pcb->state != CLOSED &&
 800bf3c:	2b0a      	cmp	r3, #10
 800bf3e:	d030      	beq.n	800bfa2 <tcp_pcb_purge+0x7a>
     pcb->state != LISTEN) {
 800bf40:	687b      	ldr	r3, [r7, #4]
 800bf42:	7d1b      	ldrb	r3, [r3, #20]
     pcb->state != TIME_WAIT &&
 800bf44:	2b01      	cmp	r3, #1
 800bf46:	d02c      	beq.n	800bfa2 <tcp_pcb_purge+0x7a>

    LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge\n"));

    tcp_backlog_accepted(pcb);

    if (pcb->refused_data != NULL) {
 800bf48:	687b      	ldr	r3, [r7, #4]
 800bf4a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800bf4c:	2b00      	cmp	r3, #0
 800bf4e:	d007      	beq.n	800bf60 <tcp_pcb_purge+0x38>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->refused_data\n"));
      pbuf_free(pcb->refused_data);
 800bf50:	687b      	ldr	r3, [r7, #4]
 800bf52:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800bf54:	4618      	mov	r0, r3
 800bf56:	f7fe faab 	bl	800a4b0 <pbuf_free>
      pcb->refused_data = NULL;
 800bf5a:	687b      	ldr	r3, [r7, #4]
 800bf5c:	2200      	movs	r2, #0
 800bf5e:	675a      	str	r2, [r3, #116]	; 0x74
    }
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL) {
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->ooseq\n"));
    }
    tcp_segs_free(pcb->ooseq);
 800bf60:	687b      	ldr	r3, [r7, #4]
 800bf62:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800bf64:	4618      	mov	r0, r3
 800bf66:	f7ff fd77 	bl	800ba58 <tcp_segs_free>
    pcb->ooseq = NULL;
 800bf6a:	687b      	ldr	r3, [r7, #4]
 800bf6c:	2200      	movs	r2, #0
 800bf6e:	671a      	str	r2, [r3, #112]	; 0x70
#endif /* TCP_QUEUE_OOSEQ */

    /* Stop the retransmission timer as it will expect data on unacked
       queue if it fires */
    pcb->rtime = -1;
 800bf70:	687b      	ldr	r3, [r7, #4]
 800bf72:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800bf76:	861a      	strh	r2, [r3, #48]	; 0x30

    tcp_segs_free(pcb->unsent);
 800bf78:	687b      	ldr	r3, [r7, #4]
 800bf7a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800bf7c:	4618      	mov	r0, r3
 800bf7e:	f7ff fd6b 	bl	800ba58 <tcp_segs_free>
    tcp_segs_free(pcb->unacked);
 800bf82:	687b      	ldr	r3, [r7, #4]
 800bf84:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800bf86:	4618      	mov	r0, r3
 800bf88:	f7ff fd66 	bl	800ba58 <tcp_segs_free>
    pcb->unacked = pcb->unsent = NULL;
 800bf8c:	687b      	ldr	r3, [r7, #4]
 800bf8e:	2200      	movs	r2, #0
 800bf90:	669a      	str	r2, [r3, #104]	; 0x68
 800bf92:	687b      	ldr	r3, [r7, #4]
 800bf94:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 800bf96:	687b      	ldr	r3, [r7, #4]
 800bf98:	66da      	str	r2, [r3, #108]	; 0x6c
#if TCP_OVERSIZE
    pcb->unsent_oversize = 0;
 800bf9a:	687b      	ldr	r3, [r7, #4]
 800bf9c:	2200      	movs	r2, #0
 800bf9e:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
#endif /* TCP_OVERSIZE */
  }
}
 800bfa2:	bf00      	nop
 800bfa4:	3708      	adds	r7, #8
 800bfa6:	46bd      	mov	sp, r7
 800bfa8:	bd80      	pop	{r7, pc}
	...

0800bfac <tcp_pcb_remove>:
 * @param pcblist PCB list to purge.
 * @param pcb tcp_pcb to purge. The pcb itself is NOT deallocated!
 */
void
tcp_pcb_remove(struct tcp_pcb **pcblist, struct tcp_pcb *pcb)
{
 800bfac:	b580      	push	{r7, lr}
 800bfae:	b084      	sub	sp, #16
 800bfb0:	af00      	add	r7, sp, #0
 800bfb2:	6078      	str	r0, [r7, #4]
 800bfb4:	6039      	str	r1, [r7, #0]
  TCP_RMV(pcblist, pcb);
 800bfb6:	687b      	ldr	r3, [r7, #4]
 800bfb8:	681b      	ldr	r3, [r3, #0]
 800bfba:	683a      	ldr	r2, [r7, #0]
 800bfbc:	429a      	cmp	r2, r3
 800bfbe:	d105      	bne.n	800bfcc <tcp_pcb_remove+0x20>
 800bfc0:	687b      	ldr	r3, [r7, #4]
 800bfc2:	681b      	ldr	r3, [r3, #0]
 800bfc4:	68da      	ldr	r2, [r3, #12]
 800bfc6:	687b      	ldr	r3, [r7, #4]
 800bfc8:	601a      	str	r2, [r3, #0]
 800bfca:	e013      	b.n	800bff4 <tcp_pcb_remove+0x48>
 800bfcc:	687b      	ldr	r3, [r7, #4]
 800bfce:	681b      	ldr	r3, [r3, #0]
 800bfd0:	60fb      	str	r3, [r7, #12]
 800bfd2:	e00c      	b.n	800bfee <tcp_pcb_remove+0x42>
 800bfd4:	68fb      	ldr	r3, [r7, #12]
 800bfd6:	68db      	ldr	r3, [r3, #12]
 800bfd8:	683a      	ldr	r2, [r7, #0]
 800bfda:	429a      	cmp	r2, r3
 800bfdc:	d104      	bne.n	800bfe8 <tcp_pcb_remove+0x3c>
 800bfde:	683b      	ldr	r3, [r7, #0]
 800bfe0:	68da      	ldr	r2, [r3, #12]
 800bfe2:	68fb      	ldr	r3, [r7, #12]
 800bfe4:	60da      	str	r2, [r3, #12]
 800bfe6:	e005      	b.n	800bff4 <tcp_pcb_remove+0x48>
 800bfe8:	68fb      	ldr	r3, [r7, #12]
 800bfea:	68db      	ldr	r3, [r3, #12]
 800bfec:	60fb      	str	r3, [r7, #12]
 800bfee:	68fb      	ldr	r3, [r7, #12]
 800bff0:	2b00      	cmp	r3, #0
 800bff2:	d1ef      	bne.n	800bfd4 <tcp_pcb_remove+0x28>
 800bff4:	683b      	ldr	r3, [r7, #0]
 800bff6:	2200      	movs	r2, #0
 800bff8:	60da      	str	r2, [r3, #12]

  tcp_pcb_purge(pcb);
 800bffa:	6838      	ldr	r0, [r7, #0]
 800bffc:	f7ff ff94 	bl	800bf28 <tcp_pcb_purge>

  /* if there is an outstanding delayed ACKs, send it */
  if (pcb->state != TIME_WAIT &&
 800c000:	683b      	ldr	r3, [r7, #0]
 800c002:	7d1b      	ldrb	r3, [r3, #20]
 800c004:	2b0a      	cmp	r3, #10
 800c006:	d013      	beq.n	800c030 <tcp_pcb_remove+0x84>
     pcb->state != LISTEN &&
 800c008:	683b      	ldr	r3, [r7, #0]
 800c00a:	7d1b      	ldrb	r3, [r3, #20]
  if (pcb->state != TIME_WAIT &&
 800c00c:	2b01      	cmp	r3, #1
 800c00e:	d00f      	beq.n	800c030 <tcp_pcb_remove+0x84>
     pcb->flags & TF_ACK_DELAY) {
 800c010:	683b      	ldr	r3, [r7, #0]
 800c012:	7e9b      	ldrb	r3, [r3, #26]
 800c014:	f003 0301 	and.w	r3, r3, #1
     pcb->state != LISTEN &&
 800c018:	2b00      	cmp	r3, #0
 800c01a:	d009      	beq.n	800c030 <tcp_pcb_remove+0x84>
    pcb->flags |= TF_ACK_NOW;
 800c01c:	683b      	ldr	r3, [r7, #0]
 800c01e:	7e9b      	ldrb	r3, [r3, #26]
 800c020:	f043 0302 	orr.w	r3, r3, #2
 800c024:	b2da      	uxtb	r2, r3
 800c026:	683b      	ldr	r3, [r7, #0]
 800c028:	769a      	strb	r2, [r3, #26]
    tcp_output(pcb);
 800c02a:	6838      	ldr	r0, [r7, #0]
 800c02c:	f003 f9be 	bl	800f3ac <tcp_output>
  }

  if (pcb->state != LISTEN) {
 800c030:	683b      	ldr	r3, [r7, #0]
 800c032:	7d1b      	ldrb	r3, [r3, #20]
 800c034:	2b01      	cmp	r3, #1
 800c036:	d020      	beq.n	800c07a <tcp_pcb_remove+0xce>
    LWIP_ASSERT("unsent segments leaking", pcb->unsent == NULL);
 800c038:	683b      	ldr	r3, [r7, #0]
 800c03a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800c03c:	2b00      	cmp	r3, #0
 800c03e:	d006      	beq.n	800c04e <tcp_pcb_remove+0xa2>
 800c040:	4b13      	ldr	r3, [pc, #76]	; (800c090 <tcp_pcb_remove+0xe4>)
 800c042:	f240 7253 	movw	r2, #1875	; 0x753
 800c046:	4913      	ldr	r1, [pc, #76]	; (800c094 <tcp_pcb_remove+0xe8>)
 800c048:	4813      	ldr	r0, [pc, #76]	; (800c098 <tcp_pcb_remove+0xec>)
 800c04a:	f009 fdc3 	bl	8015bd4 <printf_>
    LWIP_ASSERT("unacked segments leaking", pcb->unacked == NULL);
 800c04e:	683b      	ldr	r3, [r7, #0]
 800c050:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800c052:	2b00      	cmp	r3, #0
 800c054:	d006      	beq.n	800c064 <tcp_pcb_remove+0xb8>
 800c056:	4b0e      	ldr	r3, [pc, #56]	; (800c090 <tcp_pcb_remove+0xe4>)
 800c058:	f240 7254 	movw	r2, #1876	; 0x754
 800c05c:	490f      	ldr	r1, [pc, #60]	; (800c09c <tcp_pcb_remove+0xf0>)
 800c05e:	480e      	ldr	r0, [pc, #56]	; (800c098 <tcp_pcb_remove+0xec>)
 800c060:	f009 fdb8 	bl	8015bd4 <printf_>
#if TCP_QUEUE_OOSEQ
    LWIP_ASSERT("ooseq segments leaking", pcb->ooseq == NULL);
 800c064:	683b      	ldr	r3, [r7, #0]
 800c066:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c068:	2b00      	cmp	r3, #0
 800c06a:	d006      	beq.n	800c07a <tcp_pcb_remove+0xce>
 800c06c:	4b08      	ldr	r3, [pc, #32]	; (800c090 <tcp_pcb_remove+0xe4>)
 800c06e:	f240 7256 	movw	r2, #1878	; 0x756
 800c072:	490b      	ldr	r1, [pc, #44]	; (800c0a0 <tcp_pcb_remove+0xf4>)
 800c074:	4808      	ldr	r0, [pc, #32]	; (800c098 <tcp_pcb_remove+0xec>)
 800c076:	f009 fdad 	bl	8015bd4 <printf_>
#endif /* TCP_QUEUE_OOSEQ */
  }

  pcb->state = CLOSED;
 800c07a:	683b      	ldr	r3, [r7, #0]
 800c07c:	2200      	movs	r2, #0
 800c07e:	751a      	strb	r2, [r3, #20]
  /* reset the local port to prevent the pcb from being 'bound' */
  pcb->local_port = 0;
 800c080:	683b      	ldr	r3, [r7, #0]
 800c082:	2200      	movs	r2, #0
 800c084:	82da      	strh	r2, [r3, #22]

  LWIP_ASSERT("tcp_pcb_remove: tcp_pcbs_sane()", tcp_pcbs_sane());
}
 800c086:	bf00      	nop
 800c088:	3710      	adds	r7, #16
 800c08a:	46bd      	mov	sp, r7
 800c08c:	bd80      	pop	{r7, pc}
 800c08e:	bf00      	nop
 800c090:	0801ab50 	.word	0x0801ab50
 800c094:	0801af08 	.word	0x0801af08
 800c098:	0801ab8c 	.word	0x0801ab8c
 800c09c:	0801af20 	.word	0x0801af20
 800c0a0:	0801af3c 	.word	0x0801af3c

0800c0a4 <tcp_next_iss>:
 *
 * @return u32_t pseudo random sequence number
 */
u32_t
tcp_next_iss(struct tcp_pcb *pcb)
{
 800c0a4:	b480      	push	{r7}
 800c0a6:	b083      	sub	sp, #12
 800c0a8:	af00      	add	r7, sp, #0
 800c0aa:	6078      	str	r0, [r7, #4]
#else /* LWIP_HOOK_TCP_ISN */
  static u32_t iss = 6510;

  LWIP_UNUSED_ARG(pcb);

  iss += tcp_ticks;       /* XXX */
 800c0ac:	4b07      	ldr	r3, [pc, #28]	; (800c0cc <tcp_next_iss+0x28>)
 800c0ae:	681a      	ldr	r2, [r3, #0]
 800c0b0:	4b07      	ldr	r3, [pc, #28]	; (800c0d0 <tcp_next_iss+0x2c>)
 800c0b2:	681b      	ldr	r3, [r3, #0]
 800c0b4:	4413      	add	r3, r2
 800c0b6:	4a05      	ldr	r2, [pc, #20]	; (800c0cc <tcp_next_iss+0x28>)
 800c0b8:	6013      	str	r3, [r2, #0]
  return iss;
 800c0ba:	4b04      	ldr	r3, [pc, #16]	; (800c0cc <tcp_next_iss+0x28>)
 800c0bc:	681b      	ldr	r3, [r3, #0]
#endif /* LWIP_HOOK_TCP_ISN */
}
 800c0be:	4618      	mov	r0, r3
 800c0c0:	370c      	adds	r7, #12
 800c0c2:	46bd      	mov	sp, r7
 800c0c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c0c8:	4770      	bx	lr
 800c0ca:	bf00      	nop
 800c0cc:	24000010 	.word	0x24000010
 800c0d0:	2400f2ec 	.word	0x2400f2ec

0800c0d4 <tcp_eff_send_mss_impl>:
tcp_eff_send_mss_impl(u16_t sendmss, const ip_addr_t *dest
#if LWIP_IPV6 || LWIP_IPV4_SRC_ROUTING
                     , const ip_addr_t *src
#endif /* LWIP_IPV6 || LWIP_IPV4_SRC_ROUTING */
                     )
{
 800c0d4:	b580      	push	{r7, lr}
 800c0d6:	b084      	sub	sp, #16
 800c0d8:	af00      	add	r7, sp, #0
 800c0da:	4603      	mov	r3, r0
 800c0dc:	6039      	str	r1, [r7, #0]
 800c0de:	80fb      	strh	r3, [r7, #6]
  u16_t mss_s;
  struct netif *outif;
  s16_t mtu;

  outif = ip_route(src, dest);
 800c0e0:	6838      	ldr	r0, [r7, #0]
 800c0e2:	f005 fcab 	bl	8011a3c <ip4_route>
 800c0e6:	60f8      	str	r0, [r7, #12]
  else
#endif /* LWIP_IPV4 */
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
  {
    if (outif == NULL) {
 800c0e8:	68fb      	ldr	r3, [r7, #12]
 800c0ea:	2b00      	cmp	r3, #0
 800c0ec:	d101      	bne.n	800c0f2 <tcp_eff_send_mss_impl+0x1e>
      return sendmss;
 800c0ee:	88fb      	ldrh	r3, [r7, #6]
 800c0f0:	e010      	b.n	800c114 <tcp_eff_send_mss_impl+0x40>
    }
    mtu = outif->mtu;
 800c0f2:	68fb      	ldr	r3, [r7, #12]
 800c0f4:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800c0f6:	817b      	strh	r3, [r7, #10]
  }
#endif /* LWIP_IPV4 */

  if (mtu != 0) {
 800c0f8:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 800c0fc:	2b00      	cmp	r3, #0
 800c0fe:	d008      	beq.n	800c112 <tcp_eff_send_mss_impl+0x3e>
    else
#endif /* LWIP_IPV4 */
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
    {
      mss_s = mtu - IP_HLEN - TCP_HLEN;
 800c100:	897b      	ldrh	r3, [r7, #10]
 800c102:	3b28      	subs	r3, #40	; 0x28
 800c104:	813b      	strh	r3, [r7, #8]
#endif /* LWIP_IPV4 */
    /* RFC 1122, chap 4.2.2.6:
     * Eff.snd.MSS = min(SendMSS+20, MMS_S) - TCPhdrsize - IPoptionsize
     * We correct for TCP options in tcp_write(), and don't support IP options.
     */
    sendmss = LWIP_MIN(sendmss, mss_s);
 800c106:	893a      	ldrh	r2, [r7, #8]
 800c108:	88fb      	ldrh	r3, [r7, #6]
 800c10a:	4293      	cmp	r3, r2
 800c10c:	bf28      	it	cs
 800c10e:	4613      	movcs	r3, r2
 800c110:	80fb      	strh	r3, [r7, #6]
  }
  return sendmss;
 800c112:	88fb      	ldrh	r3, [r7, #6]
}
 800c114:	4618      	mov	r0, r3
 800c116:	3710      	adds	r7, #16
 800c118:	46bd      	mov	sp, r7
 800c11a:	bd80      	pop	{r7, pc}

0800c11c <tcp_netif_ip_addr_changed_pcblist>:
#endif /* TCP_CALCULATE_EFF_SEND_MSS */

/** Helper function for tcp_netif_ip_addr_changed() that iterates a pcb list */
static void
tcp_netif_ip_addr_changed_pcblist(const ip_addr_t* old_addr, struct tcp_pcb* pcb_list)
{
 800c11c:	b580      	push	{r7, lr}
 800c11e:	b084      	sub	sp, #16
 800c120:	af00      	add	r7, sp, #0
 800c122:	6078      	str	r0, [r7, #4]
 800c124:	6039      	str	r1, [r7, #0]
  struct tcp_pcb *pcb;
  pcb = pcb_list;
 800c126:	683b      	ldr	r3, [r7, #0]
 800c128:	60fb      	str	r3, [r7, #12]
  while (pcb != NULL) {
 800c12a:	e011      	b.n	800c150 <tcp_netif_ip_addr_changed_pcblist+0x34>
    /* PCB bound to current local interface address? */
    if (ip_addr_cmp(&pcb->local_ip, old_addr)
 800c12c:	68fb      	ldr	r3, [r7, #12]
 800c12e:	681a      	ldr	r2, [r3, #0]
 800c130:	687b      	ldr	r3, [r7, #4]
 800c132:	681b      	ldr	r3, [r3, #0]
 800c134:	429a      	cmp	r2, r3
 800c136:	d108      	bne.n	800c14a <tcp_netif_ip_addr_changed_pcblist+0x2e>
      /* connections to link-local addresses must persist (RFC3927 ch. 1.9) */
      && (!IP_IS_V4_VAL(pcb->local_ip) || !ip4_addr_islinklocal(ip_2_ip4(&pcb->local_ip)))
#endif /* LWIP_AUTOIP */
      ) {
      /* this connection must be aborted */
      struct tcp_pcb *next = pcb->next;
 800c138:	68fb      	ldr	r3, [r7, #12]
 800c13a:	68db      	ldr	r3, [r3, #12]
 800c13c:	60bb      	str	r3, [r7, #8]
      LWIP_DEBUGF(NETIF_DEBUG | LWIP_DBG_STATE, ("netif_set_ipaddr: aborting TCP pcb %p\n", (void *)pcb));
      tcp_abort(pcb);
 800c13e:	68f8      	ldr	r0, [r7, #12]
 800c140:	f7fe ff0e 	bl	800af60 <tcp_abort>
      pcb = next;
 800c144:	68bb      	ldr	r3, [r7, #8]
 800c146:	60fb      	str	r3, [r7, #12]
 800c148:	e002      	b.n	800c150 <tcp_netif_ip_addr_changed_pcblist+0x34>
    } else {
      pcb = pcb->next;
 800c14a:	68fb      	ldr	r3, [r7, #12]
 800c14c:	68db      	ldr	r3, [r3, #12]
 800c14e:	60fb      	str	r3, [r7, #12]
  while (pcb != NULL) {
 800c150:	68fb      	ldr	r3, [r7, #12]
 800c152:	2b00      	cmp	r3, #0
 800c154:	d1ea      	bne.n	800c12c <tcp_netif_ip_addr_changed_pcblist+0x10>
    }
  }
}
 800c156:	bf00      	nop
 800c158:	3710      	adds	r7, #16
 800c15a:	46bd      	mov	sp, r7
 800c15c:	bd80      	pop	{r7, pc}
	...

0800c160 <tcp_netif_ip_addr_changed>:
 * @param old_addr IP address of the netif before change
 * @param new_addr IP address of the netif after change or NULL if netif has been removed
 */
void
tcp_netif_ip_addr_changed(const ip_addr_t* old_addr, const ip_addr_t* new_addr)
{
 800c160:	b580      	push	{r7, lr}
 800c162:	b084      	sub	sp, #16
 800c164:	af00      	add	r7, sp, #0
 800c166:	6078      	str	r0, [r7, #4]
 800c168:	6039      	str	r1, [r7, #0]
  struct tcp_pcb_listen *lpcb, *next;

  if (!ip_addr_isany(old_addr)) {
 800c16a:	687b      	ldr	r3, [r7, #4]
 800c16c:	2b00      	cmp	r3, #0
 800c16e:	d02c      	beq.n	800c1ca <tcp_netif_ip_addr_changed+0x6a>
 800c170:	687b      	ldr	r3, [r7, #4]
 800c172:	681b      	ldr	r3, [r3, #0]
 800c174:	2b00      	cmp	r3, #0
 800c176:	d028      	beq.n	800c1ca <tcp_netif_ip_addr_changed+0x6a>
    tcp_netif_ip_addr_changed_pcblist(old_addr, tcp_active_pcbs);
 800c178:	4b16      	ldr	r3, [pc, #88]	; (800c1d4 <tcp_netif_ip_addr_changed+0x74>)
 800c17a:	681b      	ldr	r3, [r3, #0]
 800c17c:	4619      	mov	r1, r3
 800c17e:	6878      	ldr	r0, [r7, #4]
 800c180:	f7ff ffcc 	bl	800c11c <tcp_netif_ip_addr_changed_pcblist>
    tcp_netif_ip_addr_changed_pcblist(old_addr, tcp_bound_pcbs);
 800c184:	4b14      	ldr	r3, [pc, #80]	; (800c1d8 <tcp_netif_ip_addr_changed+0x78>)
 800c186:	681b      	ldr	r3, [r3, #0]
 800c188:	4619      	mov	r1, r3
 800c18a:	6878      	ldr	r0, [r7, #4]
 800c18c:	f7ff ffc6 	bl	800c11c <tcp_netif_ip_addr_changed_pcblist>

    if (!ip_addr_isany(new_addr)) {
 800c190:	683b      	ldr	r3, [r7, #0]
 800c192:	2b00      	cmp	r3, #0
 800c194:	d019      	beq.n	800c1ca <tcp_netif_ip_addr_changed+0x6a>
 800c196:	683b      	ldr	r3, [r7, #0]
 800c198:	681b      	ldr	r3, [r3, #0]
 800c19a:	2b00      	cmp	r3, #0
 800c19c:	d015      	beq.n	800c1ca <tcp_netif_ip_addr_changed+0x6a>
      /* PCB bound to current local interface address? */
      for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = next) {
 800c19e:	4b0f      	ldr	r3, [pc, #60]	; (800c1dc <tcp_netif_ip_addr_changed+0x7c>)
 800c1a0:	681b      	ldr	r3, [r3, #0]
 800c1a2:	60fb      	str	r3, [r7, #12]
 800c1a4:	e00e      	b.n	800c1c4 <tcp_netif_ip_addr_changed+0x64>
        next = lpcb->next;
 800c1a6:	68fb      	ldr	r3, [r7, #12]
 800c1a8:	68db      	ldr	r3, [r3, #12]
 800c1aa:	60bb      	str	r3, [r7, #8]
        /* PCB bound to current local interface address? */
        if (ip_addr_cmp(&lpcb->local_ip, old_addr)) {
 800c1ac:	68fb      	ldr	r3, [r7, #12]
 800c1ae:	681a      	ldr	r2, [r3, #0]
 800c1b0:	687b      	ldr	r3, [r7, #4]
 800c1b2:	681b      	ldr	r3, [r3, #0]
 800c1b4:	429a      	cmp	r2, r3
 800c1b6:	d103      	bne.n	800c1c0 <tcp_netif_ip_addr_changed+0x60>
          /* The PCB is listening to the old ipaddr and
            * is set to listen to the new one instead */
          ip_addr_copy(lpcb->local_ip, *new_addr);
 800c1b8:	683b      	ldr	r3, [r7, #0]
 800c1ba:	681a      	ldr	r2, [r3, #0]
 800c1bc:	68fb      	ldr	r3, [r7, #12]
 800c1be:	601a      	str	r2, [r3, #0]
      for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = next) {
 800c1c0:	68bb      	ldr	r3, [r7, #8]
 800c1c2:	60fb      	str	r3, [r7, #12]
 800c1c4:	68fb      	ldr	r3, [r7, #12]
 800c1c6:	2b00      	cmp	r3, #0
 800c1c8:	d1ed      	bne.n	800c1a6 <tcp_netif_ip_addr_changed+0x46>
        }
      }
    }
  }
}
 800c1ca:	bf00      	nop
 800c1cc:	3710      	adds	r7, #16
 800c1ce:	46bd      	mov	sp, r7
 800c1d0:	bd80      	pop	{r7, pc}
 800c1d2:	bf00      	nop
 800c1d4:	2400f2e8 	.word	0x2400f2e8
 800c1d8:	2400f2f4 	.word	0x2400f2f4
 800c1dc:	2400f2f0 	.word	0x2400f2f0

0800c1e0 <tcp_input>:
 * @param p received TCP segment to process (p->payload pointing to the TCP header)
 * @param inp network interface on which this segment was received
 */
void
tcp_input(struct pbuf *p, struct netif *inp)
{
 800c1e0:	b590      	push	{r4, r7, lr}
 800c1e2:	b08b      	sub	sp, #44	; 0x2c
 800c1e4:	af02      	add	r7, sp, #8
 800c1e6:	6078      	str	r0, [r7, #4]
 800c1e8:	6039      	str	r1, [r7, #0]
  PERF_START;

  TCP_STATS_INC(tcp.recv);
  MIB2_STATS_INC(mib2.tcpinsegs);

  tcphdr = (struct tcp_hdr *)p->payload;
 800c1ea:	687b      	ldr	r3, [r7, #4]
 800c1ec:	685b      	ldr	r3, [r3, #4]
 800c1ee:	4a82      	ldr	r2, [pc, #520]	; (800c3f8 <tcp_input+0x218>)
 800c1f0:	6013      	str	r3, [r2, #0]
#if TCP_INPUT_DEBUG
  tcp_debug_print(tcphdr);
#endif

  /* Check that TCP header fits in payload */
  if (p->len < TCP_HLEN) {
 800c1f2:	687b      	ldr	r3, [r7, #4]
 800c1f4:	895b      	ldrh	r3, [r3, #10]
 800c1f6:	2b13      	cmp	r3, #19
 800c1f8:	f240 838b 	bls.w	800c912 <tcp_input+0x732>
    TCP_STATS_INC(tcp.lenerr);
    goto dropped;
  }

  /* Don't even process incoming broadcasts/multicasts. */
  if (ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif()) ||
 800c1fc:	4b7f      	ldr	r3, [pc, #508]	; (800c3fc <tcp_input+0x21c>)
 800c1fe:	695a      	ldr	r2, [r3, #20]
 800c200:	4b7e      	ldr	r3, [pc, #504]	; (800c3fc <tcp_input+0x21c>)
 800c202:	681b      	ldr	r3, [r3, #0]
 800c204:	4619      	mov	r1, r3
 800c206:	4610      	mov	r0, r2
 800c208:	f005 fe92 	bl	8011f30 <ip4_addr_isbroadcast_u32>
 800c20c:	4603      	mov	r3, r0
 800c20e:	2b00      	cmp	r3, #0
 800c210:	f040 8381 	bne.w	800c916 <tcp_input+0x736>
      ip_addr_ismulticast(ip_current_dest_addr())) {
 800c214:	4b79      	ldr	r3, [pc, #484]	; (800c3fc <tcp_input+0x21c>)
 800c216:	695b      	ldr	r3, [r3, #20]
 800c218:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
  if (ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif()) ||
 800c21c:	2be0      	cmp	r3, #224	; 0xe0
 800c21e:	f000 837a 	beq.w	800c916 <tcp_input+0x736>
    }
  }
#endif /* CHECKSUM_CHECK_TCP */

  /* sanity-check header length */
  hdrlen_bytes = TCPH_HDRLEN(tcphdr) * 4;
 800c222:	4b75      	ldr	r3, [pc, #468]	; (800c3f8 <tcp_input+0x218>)
 800c224:	681b      	ldr	r3, [r3, #0]
 800c226:	899b      	ldrh	r3, [r3, #12]
 800c228:	b29b      	uxth	r3, r3
 800c22a:	4618      	mov	r0, r3
 800c22c:	f7fc ff14 	bl	8009058 <lwip_htons>
 800c230:	4603      	mov	r3, r0
 800c232:	0b1b      	lsrs	r3, r3, #12
 800c234:	b29b      	uxth	r3, r3
 800c236:	b2db      	uxtb	r3, r3
 800c238:	009b      	lsls	r3, r3, #2
 800c23a:	74bb      	strb	r3, [r7, #18]
  if ((hdrlen_bytes < TCP_HLEN) || (hdrlen_bytes > p->tot_len)) {
 800c23c:	7cbb      	ldrb	r3, [r7, #18]
 800c23e:	2b13      	cmp	r3, #19
 800c240:	f240 8369 	bls.w	800c916 <tcp_input+0x736>
 800c244:	7cbb      	ldrb	r3, [r7, #18]
 800c246:	b29a      	uxth	r2, r3
 800c248:	687b      	ldr	r3, [r7, #4]
 800c24a:	891b      	ldrh	r3, [r3, #8]
 800c24c:	429a      	cmp	r2, r3
 800c24e:	f200 8362 	bhi.w	800c916 <tcp_input+0x736>
    goto dropped;
  }

  /* Move the payload pointer in the pbuf so that it points to the
     TCP data instead of the TCP header. */
  tcphdr_optlen = hdrlen_bytes - TCP_HLEN;
 800c252:	7cbb      	ldrb	r3, [r7, #18]
 800c254:	b29b      	uxth	r3, r3
 800c256:	3b14      	subs	r3, #20
 800c258:	b29a      	uxth	r2, r3
 800c25a:	4b69      	ldr	r3, [pc, #420]	; (800c400 <tcp_input+0x220>)
 800c25c:	801a      	strh	r2, [r3, #0]
  tcphdr_opt2 = NULL;
 800c25e:	4b69      	ldr	r3, [pc, #420]	; (800c404 <tcp_input+0x224>)
 800c260:	2200      	movs	r2, #0
 800c262:	601a      	str	r2, [r3, #0]
  if (p->len >= hdrlen_bytes) {
 800c264:	687b      	ldr	r3, [r7, #4]
 800c266:	895a      	ldrh	r2, [r3, #10]
 800c268:	7cbb      	ldrb	r3, [r7, #18]
 800c26a:	b29b      	uxth	r3, r3
 800c26c:	429a      	cmp	r2, r3
 800c26e:	d30d      	bcc.n	800c28c <tcp_input+0xac>
    /* all options are in the first pbuf */
    tcphdr_opt1len = tcphdr_optlen;
 800c270:	4b63      	ldr	r3, [pc, #396]	; (800c400 <tcp_input+0x220>)
 800c272:	881a      	ldrh	r2, [r3, #0]
 800c274:	4b64      	ldr	r3, [pc, #400]	; (800c408 <tcp_input+0x228>)
 800c276:	801a      	strh	r2, [r3, #0]
    pbuf_header(p, -(s16_t)hdrlen_bytes); /* cannot fail */
 800c278:	7cbb      	ldrb	r3, [r7, #18]
 800c27a:	b29b      	uxth	r3, r3
 800c27c:	425b      	negs	r3, r3
 800c27e:	b29b      	uxth	r3, r3
 800c280:	b21b      	sxth	r3, r3
 800c282:	4619      	mov	r1, r3
 800c284:	6878      	ldr	r0, [r7, #4]
 800c286:	f7fe f8ef 	bl	800a468 <pbuf_header>
 800c28a:	e055      	b.n	800c338 <tcp_input+0x158>
  } else {
    u16_t opt2len;
    /* TCP header fits into first pbuf, options don't - data is in the next pbuf */
    /* there must be a next pbuf, due to hdrlen_bytes sanity check above */
    LWIP_ASSERT("p->next != NULL", p->next != NULL);
 800c28c:	687b      	ldr	r3, [r7, #4]
 800c28e:	681b      	ldr	r3, [r3, #0]
 800c290:	2b00      	cmp	r3, #0
 800c292:	d105      	bne.n	800c2a0 <tcp_input+0xc0>
 800c294:	4b5d      	ldr	r3, [pc, #372]	; (800c40c <tcp_input+0x22c>)
 800c296:	22b2      	movs	r2, #178	; 0xb2
 800c298:	495d      	ldr	r1, [pc, #372]	; (800c410 <tcp_input+0x230>)
 800c29a:	485e      	ldr	r0, [pc, #376]	; (800c414 <tcp_input+0x234>)
 800c29c:	f009 fc9a 	bl	8015bd4 <printf_>

    /* advance over the TCP header (cannot fail) */
    pbuf_header(p, -TCP_HLEN);
 800c2a0:	f06f 0113 	mvn.w	r1, #19
 800c2a4:	6878      	ldr	r0, [r7, #4]
 800c2a6:	f7fe f8df 	bl	800a468 <pbuf_header>

    /* determine how long the first and second parts of the options are */
    tcphdr_opt1len = p->len;
 800c2aa:	687b      	ldr	r3, [r7, #4]
 800c2ac:	895a      	ldrh	r2, [r3, #10]
 800c2ae:	4b56      	ldr	r3, [pc, #344]	; (800c408 <tcp_input+0x228>)
 800c2b0:	801a      	strh	r2, [r3, #0]
    opt2len = tcphdr_optlen - tcphdr_opt1len;
 800c2b2:	4b53      	ldr	r3, [pc, #332]	; (800c400 <tcp_input+0x220>)
 800c2b4:	881a      	ldrh	r2, [r3, #0]
 800c2b6:	4b54      	ldr	r3, [pc, #336]	; (800c408 <tcp_input+0x228>)
 800c2b8:	881b      	ldrh	r3, [r3, #0]
 800c2ba:	1ad3      	subs	r3, r2, r3
 800c2bc:	823b      	strh	r3, [r7, #16]

    /* options continue in the next pbuf: set p to zero length and hide the
        options in the next pbuf (adjusting p->tot_len) */
    pbuf_header(p, -(s16_t)tcphdr_opt1len);
 800c2be:	4b52      	ldr	r3, [pc, #328]	; (800c408 <tcp_input+0x228>)
 800c2c0:	881b      	ldrh	r3, [r3, #0]
 800c2c2:	425b      	negs	r3, r3
 800c2c4:	b29b      	uxth	r3, r3
 800c2c6:	b21b      	sxth	r3, r3
 800c2c8:	4619      	mov	r1, r3
 800c2ca:	6878      	ldr	r0, [r7, #4]
 800c2cc:	f7fe f8cc 	bl	800a468 <pbuf_header>

    /* check that the options fit in the second pbuf */
    if (opt2len > p->next->len) {
 800c2d0:	687b      	ldr	r3, [r7, #4]
 800c2d2:	681b      	ldr	r3, [r3, #0]
 800c2d4:	895b      	ldrh	r3, [r3, #10]
 800c2d6:	8a3a      	ldrh	r2, [r7, #16]
 800c2d8:	429a      	cmp	r2, r3
 800c2da:	f200 831e 	bhi.w	800c91a <tcp_input+0x73a>
      TCP_STATS_INC(tcp.lenerr);
      goto dropped;
    }

    /* remember the pointer to the second part of the options */
    tcphdr_opt2 = (u8_t*)p->next->payload;
 800c2de:	687b      	ldr	r3, [r7, #4]
 800c2e0:	681b      	ldr	r3, [r3, #0]
 800c2e2:	685b      	ldr	r3, [r3, #4]
 800c2e4:	4a47      	ldr	r2, [pc, #284]	; (800c404 <tcp_input+0x224>)
 800c2e6:	6013      	str	r3, [r2, #0]

    /* advance p->next to point after the options, and manually
        adjust p->tot_len to keep it consistent with the changed p->next */
    pbuf_header(p->next, -(s16_t)opt2len);
 800c2e8:	687b      	ldr	r3, [r7, #4]
 800c2ea:	681a      	ldr	r2, [r3, #0]
 800c2ec:	8a3b      	ldrh	r3, [r7, #16]
 800c2ee:	425b      	negs	r3, r3
 800c2f0:	b29b      	uxth	r3, r3
 800c2f2:	b21b      	sxth	r3, r3
 800c2f4:	4619      	mov	r1, r3
 800c2f6:	4610      	mov	r0, r2
 800c2f8:	f7fe f8b6 	bl	800a468 <pbuf_header>
    p->tot_len -= opt2len;
 800c2fc:	687b      	ldr	r3, [r7, #4]
 800c2fe:	891a      	ldrh	r2, [r3, #8]
 800c300:	8a3b      	ldrh	r3, [r7, #16]
 800c302:	1ad3      	subs	r3, r2, r3
 800c304:	b29a      	uxth	r2, r3
 800c306:	687b      	ldr	r3, [r7, #4]
 800c308:	811a      	strh	r2, [r3, #8]

    LWIP_ASSERT("p->len == 0", p->len == 0);
 800c30a:	687b      	ldr	r3, [r7, #4]
 800c30c:	895b      	ldrh	r3, [r3, #10]
 800c30e:	2b00      	cmp	r3, #0
 800c310:	d005      	beq.n	800c31e <tcp_input+0x13e>
 800c312:	4b3e      	ldr	r3, [pc, #248]	; (800c40c <tcp_input+0x22c>)
 800c314:	22cf      	movs	r2, #207	; 0xcf
 800c316:	4940      	ldr	r1, [pc, #256]	; (800c418 <tcp_input+0x238>)
 800c318:	483e      	ldr	r0, [pc, #248]	; (800c414 <tcp_input+0x234>)
 800c31a:	f009 fc5b 	bl	8015bd4 <printf_>
    LWIP_ASSERT("p->tot_len == p->next->tot_len", p->tot_len == p->next->tot_len);
 800c31e:	687b      	ldr	r3, [r7, #4]
 800c320:	891a      	ldrh	r2, [r3, #8]
 800c322:	687b      	ldr	r3, [r7, #4]
 800c324:	681b      	ldr	r3, [r3, #0]
 800c326:	891b      	ldrh	r3, [r3, #8]
 800c328:	429a      	cmp	r2, r3
 800c32a:	d005      	beq.n	800c338 <tcp_input+0x158>
 800c32c:	4b37      	ldr	r3, [pc, #220]	; (800c40c <tcp_input+0x22c>)
 800c32e:	22d0      	movs	r2, #208	; 0xd0
 800c330:	493a      	ldr	r1, [pc, #232]	; (800c41c <tcp_input+0x23c>)
 800c332:	4838      	ldr	r0, [pc, #224]	; (800c414 <tcp_input+0x234>)
 800c334:	f009 fc4e 	bl	8015bd4 <printf_>
  }

  /* Convert fields in TCP header to host byte order. */
  tcphdr->src = lwip_ntohs(tcphdr->src);
 800c338:	4b2f      	ldr	r3, [pc, #188]	; (800c3f8 <tcp_input+0x218>)
 800c33a:	681b      	ldr	r3, [r3, #0]
 800c33c:	881b      	ldrh	r3, [r3, #0]
 800c33e:	b29a      	uxth	r2, r3
 800c340:	4b2d      	ldr	r3, [pc, #180]	; (800c3f8 <tcp_input+0x218>)
 800c342:	681c      	ldr	r4, [r3, #0]
 800c344:	4610      	mov	r0, r2
 800c346:	f7fc fe87 	bl	8009058 <lwip_htons>
 800c34a:	4603      	mov	r3, r0
 800c34c:	8023      	strh	r3, [r4, #0]
  tcphdr->dest = lwip_ntohs(tcphdr->dest);
 800c34e:	4b2a      	ldr	r3, [pc, #168]	; (800c3f8 <tcp_input+0x218>)
 800c350:	681b      	ldr	r3, [r3, #0]
 800c352:	885b      	ldrh	r3, [r3, #2]
 800c354:	b29a      	uxth	r2, r3
 800c356:	4b28      	ldr	r3, [pc, #160]	; (800c3f8 <tcp_input+0x218>)
 800c358:	681c      	ldr	r4, [r3, #0]
 800c35a:	4610      	mov	r0, r2
 800c35c:	f7fc fe7c 	bl	8009058 <lwip_htons>
 800c360:	4603      	mov	r3, r0
 800c362:	8063      	strh	r3, [r4, #2]
  seqno = tcphdr->seqno = lwip_ntohl(tcphdr->seqno);
 800c364:	4b24      	ldr	r3, [pc, #144]	; (800c3f8 <tcp_input+0x218>)
 800c366:	681b      	ldr	r3, [r3, #0]
 800c368:	685a      	ldr	r2, [r3, #4]
 800c36a:	4b23      	ldr	r3, [pc, #140]	; (800c3f8 <tcp_input+0x218>)
 800c36c:	681c      	ldr	r4, [r3, #0]
 800c36e:	4610      	mov	r0, r2
 800c370:	f7fc fe80 	bl	8009074 <lwip_htonl>
 800c374:	4603      	mov	r3, r0
 800c376:	6063      	str	r3, [r4, #4]
 800c378:	6863      	ldr	r3, [r4, #4]
 800c37a:	4a29      	ldr	r2, [pc, #164]	; (800c420 <tcp_input+0x240>)
 800c37c:	6013      	str	r3, [r2, #0]
  ackno = tcphdr->ackno = lwip_ntohl(tcphdr->ackno);
 800c37e:	4b1e      	ldr	r3, [pc, #120]	; (800c3f8 <tcp_input+0x218>)
 800c380:	681b      	ldr	r3, [r3, #0]
 800c382:	689a      	ldr	r2, [r3, #8]
 800c384:	4b1c      	ldr	r3, [pc, #112]	; (800c3f8 <tcp_input+0x218>)
 800c386:	681c      	ldr	r4, [r3, #0]
 800c388:	4610      	mov	r0, r2
 800c38a:	f7fc fe73 	bl	8009074 <lwip_htonl>
 800c38e:	4603      	mov	r3, r0
 800c390:	60a3      	str	r3, [r4, #8]
 800c392:	68a3      	ldr	r3, [r4, #8]
 800c394:	4a23      	ldr	r2, [pc, #140]	; (800c424 <tcp_input+0x244>)
 800c396:	6013      	str	r3, [r2, #0]
  tcphdr->wnd = lwip_ntohs(tcphdr->wnd);
 800c398:	4b17      	ldr	r3, [pc, #92]	; (800c3f8 <tcp_input+0x218>)
 800c39a:	681b      	ldr	r3, [r3, #0]
 800c39c:	89db      	ldrh	r3, [r3, #14]
 800c39e:	b29a      	uxth	r2, r3
 800c3a0:	4b15      	ldr	r3, [pc, #84]	; (800c3f8 <tcp_input+0x218>)
 800c3a2:	681c      	ldr	r4, [r3, #0]
 800c3a4:	4610      	mov	r0, r2
 800c3a6:	f7fc fe57 	bl	8009058 <lwip_htons>
 800c3aa:	4603      	mov	r3, r0
 800c3ac:	81e3      	strh	r3, [r4, #14]

  flags = TCPH_FLAGS(tcphdr);
 800c3ae:	4b12      	ldr	r3, [pc, #72]	; (800c3f8 <tcp_input+0x218>)
 800c3b0:	681b      	ldr	r3, [r3, #0]
 800c3b2:	899b      	ldrh	r3, [r3, #12]
 800c3b4:	b29b      	uxth	r3, r3
 800c3b6:	4618      	mov	r0, r3
 800c3b8:	f7fc fe4e 	bl	8009058 <lwip_htons>
 800c3bc:	4603      	mov	r3, r0
 800c3be:	b2db      	uxtb	r3, r3
 800c3c0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800c3c4:	b2da      	uxtb	r2, r3
 800c3c6:	4b18      	ldr	r3, [pc, #96]	; (800c428 <tcp_input+0x248>)
 800c3c8:	701a      	strb	r2, [r3, #0]
  tcplen = p->tot_len + ((flags & (TCP_FIN | TCP_SYN)) ? 1 : 0);
 800c3ca:	687b      	ldr	r3, [r7, #4]
 800c3cc:	891a      	ldrh	r2, [r3, #8]
 800c3ce:	4b16      	ldr	r3, [pc, #88]	; (800c428 <tcp_input+0x248>)
 800c3d0:	781b      	ldrb	r3, [r3, #0]
 800c3d2:	f003 0303 	and.w	r3, r3, #3
 800c3d6:	2b00      	cmp	r3, #0
 800c3d8:	bf14      	ite	ne
 800c3da:	2301      	movne	r3, #1
 800c3dc:	2300      	moveq	r3, #0
 800c3de:	b2db      	uxtb	r3, r3
 800c3e0:	b29b      	uxth	r3, r3
 800c3e2:	4413      	add	r3, r2
 800c3e4:	b29a      	uxth	r2, r3
 800c3e6:	4b11      	ldr	r3, [pc, #68]	; (800c42c <tcp_input+0x24c>)
 800c3e8:	801a      	strh	r2, [r3, #0]

  /* Demultiplex an incoming segment. First, we check if it is destined
     for an active connection. */
  prev = NULL;
 800c3ea:	2300      	movs	r3, #0
 800c3ec:	61bb      	str	r3, [r7, #24]

  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800c3ee:	4b10      	ldr	r3, [pc, #64]	; (800c430 <tcp_input+0x250>)
 800c3f0:	681b      	ldr	r3, [r3, #0]
 800c3f2:	61fb      	str	r3, [r7, #28]
 800c3f4:	e082      	b.n	800c4fc <tcp_input+0x31c>
 800c3f6:	bf00      	nop
 800c3f8:	2400861c 	.word	0x2400861c
 800c3fc:	240087ac 	.word	0x240087ac
 800c400:	24008620 	.word	0x24008620
 800c404:	24008624 	.word	0x24008624
 800c408:	24008622 	.word	0x24008622
 800c40c:	0801af54 	.word	0x0801af54
 800c410:	0801af88 	.word	0x0801af88
 800c414:	0801af98 	.word	0x0801af98
 800c418:	0801afc0 	.word	0x0801afc0
 800c41c:	0801afcc 	.word	0x0801afcc
 800c420:	2400862c 	.word	0x2400862c
 800c424:	24008630 	.word	0x24008630
 800c428:	24008638 	.word	0x24008638
 800c42c:	24008636 	.word	0x24008636
 800c430:	2400f2e8 	.word	0x2400f2e8
    LWIP_ASSERT("tcp_input: active pcb->state != CLOSED", pcb->state != CLOSED);
 800c434:	69fb      	ldr	r3, [r7, #28]
 800c436:	7d1b      	ldrb	r3, [r3, #20]
 800c438:	2b00      	cmp	r3, #0
 800c43a:	d105      	bne.n	800c448 <tcp_input+0x268>
 800c43c:	4b8f      	ldr	r3, [pc, #572]	; (800c67c <tcp_input+0x49c>)
 800c43e:	22e2      	movs	r2, #226	; 0xe2
 800c440:	498f      	ldr	r1, [pc, #572]	; (800c680 <tcp_input+0x4a0>)
 800c442:	4890      	ldr	r0, [pc, #576]	; (800c684 <tcp_input+0x4a4>)
 800c444:	f009 fbc6 	bl	8015bd4 <printf_>
    LWIP_ASSERT("tcp_input: active pcb->state != TIME-WAIT", pcb->state != TIME_WAIT);
 800c448:	69fb      	ldr	r3, [r7, #28]
 800c44a:	7d1b      	ldrb	r3, [r3, #20]
 800c44c:	2b0a      	cmp	r3, #10
 800c44e:	d105      	bne.n	800c45c <tcp_input+0x27c>
 800c450:	4b8a      	ldr	r3, [pc, #552]	; (800c67c <tcp_input+0x49c>)
 800c452:	22e3      	movs	r2, #227	; 0xe3
 800c454:	498c      	ldr	r1, [pc, #560]	; (800c688 <tcp_input+0x4a8>)
 800c456:	488b      	ldr	r0, [pc, #556]	; (800c684 <tcp_input+0x4a4>)
 800c458:	f009 fbbc 	bl	8015bd4 <printf_>
    LWIP_ASSERT("tcp_input: active pcb->state != LISTEN", pcb->state != LISTEN);
 800c45c:	69fb      	ldr	r3, [r7, #28]
 800c45e:	7d1b      	ldrb	r3, [r3, #20]
 800c460:	2b01      	cmp	r3, #1
 800c462:	d105      	bne.n	800c470 <tcp_input+0x290>
 800c464:	4b85      	ldr	r3, [pc, #532]	; (800c67c <tcp_input+0x49c>)
 800c466:	22e4      	movs	r2, #228	; 0xe4
 800c468:	4988      	ldr	r1, [pc, #544]	; (800c68c <tcp_input+0x4ac>)
 800c46a:	4886      	ldr	r0, [pc, #536]	; (800c684 <tcp_input+0x4a4>)
 800c46c:	f009 fbb2 	bl	8015bd4 <printf_>
    if (pcb->remote_port == tcphdr->src &&
 800c470:	69fb      	ldr	r3, [r7, #28]
 800c472:	8b1a      	ldrh	r2, [r3, #24]
 800c474:	4b86      	ldr	r3, [pc, #536]	; (800c690 <tcp_input+0x4b0>)
 800c476:	681b      	ldr	r3, [r3, #0]
 800c478:	881b      	ldrh	r3, [r3, #0]
 800c47a:	b29b      	uxth	r3, r3
 800c47c:	429a      	cmp	r2, r3
 800c47e:	d138      	bne.n	800c4f2 <tcp_input+0x312>
        pcb->local_port == tcphdr->dest &&
 800c480:	69fb      	ldr	r3, [r7, #28]
 800c482:	8ada      	ldrh	r2, [r3, #22]
 800c484:	4b82      	ldr	r3, [pc, #520]	; (800c690 <tcp_input+0x4b0>)
 800c486:	681b      	ldr	r3, [r3, #0]
 800c488:	885b      	ldrh	r3, [r3, #2]
 800c48a:	b29b      	uxth	r3, r3
    if (pcb->remote_port == tcphdr->src &&
 800c48c:	429a      	cmp	r2, r3
 800c48e:	d130      	bne.n	800c4f2 <tcp_input+0x312>
        ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 800c490:	69fb      	ldr	r3, [r7, #28]
 800c492:	685a      	ldr	r2, [r3, #4]
 800c494:	4b7f      	ldr	r3, [pc, #508]	; (800c694 <tcp_input+0x4b4>)
 800c496:	691b      	ldr	r3, [r3, #16]
        pcb->local_port == tcphdr->dest &&
 800c498:	429a      	cmp	r2, r3
 800c49a:	d12a      	bne.n	800c4f2 <tcp_input+0x312>
        ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 800c49c:	69fb      	ldr	r3, [r7, #28]
 800c49e:	681a      	ldr	r2, [r3, #0]
 800c4a0:	4b7c      	ldr	r3, [pc, #496]	; (800c694 <tcp_input+0x4b4>)
 800c4a2:	695b      	ldr	r3, [r3, #20]
        ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 800c4a4:	429a      	cmp	r2, r3
 800c4a6:	d124      	bne.n	800c4f2 <tcp_input+0x312>
      /* Move this PCB to the front of the list so that subsequent
         lookups will be faster (we exploit locality in TCP segment
         arrivals). */
      LWIP_ASSERT("tcp_input: pcb->next != pcb (before cache)", pcb->next != pcb);
 800c4a8:	69fb      	ldr	r3, [r7, #28]
 800c4aa:	68db      	ldr	r3, [r3, #12]
 800c4ac:	69fa      	ldr	r2, [r7, #28]
 800c4ae:	429a      	cmp	r2, r3
 800c4b0:	d105      	bne.n	800c4be <tcp_input+0x2de>
 800c4b2:	4b72      	ldr	r3, [pc, #456]	; (800c67c <tcp_input+0x49c>)
 800c4b4:	22ec      	movs	r2, #236	; 0xec
 800c4b6:	4978      	ldr	r1, [pc, #480]	; (800c698 <tcp_input+0x4b8>)
 800c4b8:	4872      	ldr	r0, [pc, #456]	; (800c684 <tcp_input+0x4a4>)
 800c4ba:	f009 fb8b 	bl	8015bd4 <printf_>
      if (prev != NULL) {
 800c4be:	69bb      	ldr	r3, [r7, #24]
 800c4c0:	2b00      	cmp	r3, #0
 800c4c2:	d00a      	beq.n	800c4da <tcp_input+0x2fa>
        prev->next = pcb->next;
 800c4c4:	69fb      	ldr	r3, [r7, #28]
 800c4c6:	68da      	ldr	r2, [r3, #12]
 800c4c8:	69bb      	ldr	r3, [r7, #24]
 800c4ca:	60da      	str	r2, [r3, #12]
        pcb->next = tcp_active_pcbs;
 800c4cc:	4b73      	ldr	r3, [pc, #460]	; (800c69c <tcp_input+0x4bc>)
 800c4ce:	681a      	ldr	r2, [r3, #0]
 800c4d0:	69fb      	ldr	r3, [r7, #28]
 800c4d2:	60da      	str	r2, [r3, #12]
        tcp_active_pcbs = pcb;
 800c4d4:	4a71      	ldr	r2, [pc, #452]	; (800c69c <tcp_input+0x4bc>)
 800c4d6:	69fb      	ldr	r3, [r7, #28]
 800c4d8:	6013      	str	r3, [r2, #0]
      } else {
        TCP_STATS_INC(tcp.cachehit);
      }
      LWIP_ASSERT("tcp_input: pcb->next != pcb (after cache)", pcb->next != pcb);
 800c4da:	69fb      	ldr	r3, [r7, #28]
 800c4dc:	68db      	ldr	r3, [r3, #12]
 800c4de:	69fa      	ldr	r2, [r7, #28]
 800c4e0:	429a      	cmp	r2, r3
 800c4e2:	d10f      	bne.n	800c504 <tcp_input+0x324>
 800c4e4:	4b65      	ldr	r3, [pc, #404]	; (800c67c <tcp_input+0x49c>)
 800c4e6:	22f4      	movs	r2, #244	; 0xf4
 800c4e8:	496d      	ldr	r1, [pc, #436]	; (800c6a0 <tcp_input+0x4c0>)
 800c4ea:	4866      	ldr	r0, [pc, #408]	; (800c684 <tcp_input+0x4a4>)
 800c4ec:	f009 fb72 	bl	8015bd4 <printf_>
      break;
 800c4f0:	e008      	b.n	800c504 <tcp_input+0x324>
    }
    prev = pcb;
 800c4f2:	69fb      	ldr	r3, [r7, #28]
 800c4f4:	61bb      	str	r3, [r7, #24]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800c4f6:	69fb      	ldr	r3, [r7, #28]
 800c4f8:	68db      	ldr	r3, [r3, #12]
 800c4fa:	61fb      	str	r3, [r7, #28]
 800c4fc:	69fb      	ldr	r3, [r7, #28]
 800c4fe:	2b00      	cmp	r3, #0
 800c500:	d198      	bne.n	800c434 <tcp_input+0x254>
 800c502:	e000      	b.n	800c506 <tcp_input+0x326>
      break;
 800c504:	bf00      	nop
  }

  if (pcb == NULL) {
 800c506:	69fb      	ldr	r3, [r7, #28]
 800c508:	2b00      	cmp	r3, #0
 800c50a:	d173      	bne.n	800c5f4 <tcp_input+0x414>
    /* If it did not go to an active connection, we check the connections
       in the TIME-WAIT state. */
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 800c50c:	4b65      	ldr	r3, [pc, #404]	; (800c6a4 <tcp_input+0x4c4>)
 800c50e:	681b      	ldr	r3, [r3, #0]
 800c510:	61fb      	str	r3, [r7, #28]
 800c512:	e02f      	b.n	800c574 <tcp_input+0x394>
      LWIP_ASSERT("tcp_input: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 800c514:	69fb      	ldr	r3, [r7, #28]
 800c516:	7d1b      	ldrb	r3, [r3, #20]
 800c518:	2b0a      	cmp	r3, #10
 800c51a:	d005      	beq.n	800c528 <tcp_input+0x348>
 800c51c:	4b57      	ldr	r3, [pc, #348]	; (800c67c <tcp_input+0x49c>)
 800c51e:	22fe      	movs	r2, #254	; 0xfe
 800c520:	4961      	ldr	r1, [pc, #388]	; (800c6a8 <tcp_input+0x4c8>)
 800c522:	4858      	ldr	r0, [pc, #352]	; (800c684 <tcp_input+0x4a4>)
 800c524:	f009 fb56 	bl	8015bd4 <printf_>
      if (pcb->remote_port == tcphdr->src &&
 800c528:	69fb      	ldr	r3, [r7, #28]
 800c52a:	8b1a      	ldrh	r2, [r3, #24]
 800c52c:	4b58      	ldr	r3, [pc, #352]	; (800c690 <tcp_input+0x4b0>)
 800c52e:	681b      	ldr	r3, [r3, #0]
 800c530:	881b      	ldrh	r3, [r3, #0]
 800c532:	b29b      	uxth	r3, r3
 800c534:	429a      	cmp	r2, r3
 800c536:	d11a      	bne.n	800c56e <tcp_input+0x38e>
          pcb->local_port == tcphdr->dest &&
 800c538:	69fb      	ldr	r3, [r7, #28]
 800c53a:	8ada      	ldrh	r2, [r3, #22]
 800c53c:	4b54      	ldr	r3, [pc, #336]	; (800c690 <tcp_input+0x4b0>)
 800c53e:	681b      	ldr	r3, [r3, #0]
 800c540:	885b      	ldrh	r3, [r3, #2]
 800c542:	b29b      	uxth	r3, r3
      if (pcb->remote_port == tcphdr->src &&
 800c544:	429a      	cmp	r2, r3
 800c546:	d112      	bne.n	800c56e <tcp_input+0x38e>
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 800c548:	69fb      	ldr	r3, [r7, #28]
 800c54a:	685a      	ldr	r2, [r3, #4]
 800c54c:	4b51      	ldr	r3, [pc, #324]	; (800c694 <tcp_input+0x4b4>)
 800c54e:	691b      	ldr	r3, [r3, #16]
          pcb->local_port == tcphdr->dest &&
 800c550:	429a      	cmp	r2, r3
 800c552:	d10c      	bne.n	800c56e <tcp_input+0x38e>
          ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 800c554:	69fb      	ldr	r3, [r7, #28]
 800c556:	681a      	ldr	r2, [r3, #0]
 800c558:	4b4e      	ldr	r3, [pc, #312]	; (800c694 <tcp_input+0x4b4>)
 800c55a:	695b      	ldr	r3, [r3, #20]
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 800c55c:	429a      	cmp	r2, r3
 800c55e:	d106      	bne.n	800c56e <tcp_input+0x38e>
        /* We don't really care enough to move this PCB to the front
           of the list since we are not very likely to receive that
           many segments for connections in TIME-WAIT. */
        LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: packed for TIME_WAITing connection.\n"));
        tcp_timewait_input(pcb);
 800c560:	69f8      	ldr	r0, [r7, #28]
 800c562:	f000 fb15 	bl	800cb90 <tcp_timewait_input>
        pbuf_free(p);
 800c566:	6878      	ldr	r0, [r7, #4]
 800c568:	f7fd ffa2 	bl	800a4b0 <pbuf_free>
        return;
 800c56c:	e1db      	b.n	800c926 <tcp_input+0x746>
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 800c56e:	69fb      	ldr	r3, [r7, #28]
 800c570:	68db      	ldr	r3, [r3, #12]
 800c572:	61fb      	str	r3, [r7, #28]
 800c574:	69fb      	ldr	r3, [r7, #28]
 800c576:	2b00      	cmp	r3, #0
 800c578:	d1cc      	bne.n	800c514 <tcp_input+0x334>
      }
    }

    /* Finally, if we still did not get a match, we check all PCBs that
       are LISTENing for incoming connections. */
    prev = NULL;
 800c57a:	2300      	movs	r3, #0
 800c57c:	61bb      	str	r3, [r7, #24]
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 800c57e:	4b4b      	ldr	r3, [pc, #300]	; (800c6ac <tcp_input+0x4cc>)
 800c580:	681b      	ldr	r3, [r3, #0]
 800c582:	617b      	str	r3, [r7, #20]
 800c584:	e019      	b.n	800c5ba <tcp_input+0x3da>
      if (lpcb->local_port == tcphdr->dest) {
 800c586:	697b      	ldr	r3, [r7, #20]
 800c588:	8ada      	ldrh	r2, [r3, #22]
 800c58a:	4b41      	ldr	r3, [pc, #260]	; (800c690 <tcp_input+0x4b0>)
 800c58c:	681b      	ldr	r3, [r3, #0]
 800c58e:	885b      	ldrh	r3, [r3, #2]
 800c590:	b29b      	uxth	r3, r3
 800c592:	429a      	cmp	r2, r3
 800c594:	d10c      	bne.n	800c5b0 <tcp_input+0x3d0>
          lpcb_prev = prev;
#else /* SO_REUSE */
          break;
#endif /* SO_REUSE */
        } else if (IP_ADDR_PCB_VERSION_MATCH_EXACT(lpcb, ip_current_dest_addr())) {
          if (ip_addr_cmp(&lpcb->local_ip, ip_current_dest_addr())) {
 800c596:	697b      	ldr	r3, [r7, #20]
 800c598:	681a      	ldr	r2, [r3, #0]
 800c59a:	4b3e      	ldr	r3, [pc, #248]	; (800c694 <tcp_input+0x4b4>)
 800c59c:	695b      	ldr	r3, [r3, #20]
 800c59e:	429a      	cmp	r2, r3
 800c5a0:	d00f      	beq.n	800c5c2 <tcp_input+0x3e2>
            /* found an exact match */
            break;
          } else if (ip_addr_isany(&lpcb->local_ip)) {
 800c5a2:	697b      	ldr	r3, [r7, #20]
 800c5a4:	2b00      	cmp	r3, #0
 800c5a6:	d00d      	beq.n	800c5c4 <tcp_input+0x3e4>
 800c5a8:	697b      	ldr	r3, [r7, #20]
 800c5aa:	681b      	ldr	r3, [r3, #0]
 800c5ac:	2b00      	cmp	r3, #0
 800c5ae:	d009      	beq.n	800c5c4 <tcp_input+0x3e4>
            break;
 #endif /* SO_REUSE */
          }
        }
      }
      prev = (struct tcp_pcb *)lpcb;
 800c5b0:	697b      	ldr	r3, [r7, #20]
 800c5b2:	61bb      	str	r3, [r7, #24]
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 800c5b4:	697b      	ldr	r3, [r7, #20]
 800c5b6:	68db      	ldr	r3, [r3, #12]
 800c5b8:	617b      	str	r3, [r7, #20]
 800c5ba:	697b      	ldr	r3, [r7, #20]
 800c5bc:	2b00      	cmp	r3, #0
 800c5be:	d1e2      	bne.n	800c586 <tcp_input+0x3a6>
 800c5c0:	e000      	b.n	800c5c4 <tcp_input+0x3e4>
            break;
 800c5c2:	bf00      	nop
      /* only pass to ANY if no specific local IP has been found */
      lpcb = lpcb_any;
      prev = lpcb_prev;
    }
#endif /* SO_REUSE */
    if (lpcb != NULL) {
 800c5c4:	697b      	ldr	r3, [r7, #20]
 800c5c6:	2b00      	cmp	r3, #0
 800c5c8:	d014      	beq.n	800c5f4 <tcp_input+0x414>
      /* Move this PCB to the front of the list so that subsequent
         lookups will be faster (we exploit locality in TCP segment
         arrivals). */
      if (prev != NULL) {
 800c5ca:	69bb      	ldr	r3, [r7, #24]
 800c5cc:	2b00      	cmp	r3, #0
 800c5ce:	d00a      	beq.n	800c5e6 <tcp_input+0x406>
        ((struct tcp_pcb_listen *)prev)->next = lpcb->next;
 800c5d0:	697b      	ldr	r3, [r7, #20]
 800c5d2:	68da      	ldr	r2, [r3, #12]
 800c5d4:	69bb      	ldr	r3, [r7, #24]
 800c5d6:	60da      	str	r2, [r3, #12]
              /* our successor is the remainder of the listening list */
        lpcb->next = tcp_listen_pcbs.listen_pcbs;
 800c5d8:	4b34      	ldr	r3, [pc, #208]	; (800c6ac <tcp_input+0x4cc>)
 800c5da:	681a      	ldr	r2, [r3, #0]
 800c5dc:	697b      	ldr	r3, [r7, #20]
 800c5de:	60da      	str	r2, [r3, #12]
              /* put this listening pcb at the head of the listening list */
        tcp_listen_pcbs.listen_pcbs = lpcb;
 800c5e0:	4a32      	ldr	r2, [pc, #200]	; (800c6ac <tcp_input+0x4cc>)
 800c5e2:	697b      	ldr	r3, [r7, #20]
 800c5e4:	6013      	str	r3, [r2, #0]
      } else {
        TCP_STATS_INC(tcp.cachehit);
      }

      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: packed for LISTENing connection.\n"));
      tcp_listen_input(lpcb);
 800c5e6:	6978      	ldr	r0, [r7, #20]
 800c5e8:	f000 f9f0 	bl	800c9cc <tcp_listen_input>
      pbuf_free(p);
 800c5ec:	6878      	ldr	r0, [r7, #4]
 800c5ee:	f7fd ff5f 	bl	800a4b0 <pbuf_free>
      return;
 800c5f2:	e198      	b.n	800c926 <tcp_input+0x746>
  tcp_debug_print_flags(TCPH_FLAGS(tcphdr));
  LWIP_DEBUGF(TCP_INPUT_DEBUG, ("-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n"));
#endif /* TCP_INPUT_DEBUG */


  if (pcb != NULL) {
 800c5f4:	69fb      	ldr	r3, [r7, #28]
 800c5f6:	2b00      	cmp	r3, #0
 800c5f8:	f000 8165 	beq.w	800c8c6 <tcp_input+0x6e6>
#if TCP_INPUT_DEBUG
    tcp_debug_print_state(pcb->state);
#endif /* TCP_INPUT_DEBUG */

    /* Set up a tcp_seg structure. */
    inseg.next = NULL;
 800c5fc:	4b2c      	ldr	r3, [pc, #176]	; (800c6b0 <tcp_input+0x4d0>)
 800c5fe:	2200      	movs	r2, #0
 800c600:	601a      	str	r2, [r3, #0]
    inseg.len = p->tot_len;
 800c602:	687b      	ldr	r3, [r7, #4]
 800c604:	891a      	ldrh	r2, [r3, #8]
 800c606:	4b2a      	ldr	r3, [pc, #168]	; (800c6b0 <tcp_input+0x4d0>)
 800c608:	811a      	strh	r2, [r3, #8]
    inseg.p = p;
 800c60a:	4a29      	ldr	r2, [pc, #164]	; (800c6b0 <tcp_input+0x4d0>)
 800c60c:	687b      	ldr	r3, [r7, #4]
 800c60e:	6053      	str	r3, [r2, #4]
    inseg.tcphdr = tcphdr;
 800c610:	4b1f      	ldr	r3, [pc, #124]	; (800c690 <tcp_input+0x4b0>)
 800c612:	681b      	ldr	r3, [r3, #0]
 800c614:	4a26      	ldr	r2, [pc, #152]	; (800c6b0 <tcp_input+0x4d0>)
 800c616:	60d3      	str	r3, [r2, #12]

    recv_data = NULL;
 800c618:	4b26      	ldr	r3, [pc, #152]	; (800c6b4 <tcp_input+0x4d4>)
 800c61a:	2200      	movs	r2, #0
 800c61c:	601a      	str	r2, [r3, #0]
    recv_flags = 0;
 800c61e:	4b26      	ldr	r3, [pc, #152]	; (800c6b8 <tcp_input+0x4d8>)
 800c620:	2200      	movs	r2, #0
 800c622:	701a      	strb	r2, [r3, #0]
    recv_acked = 0;
 800c624:	4b25      	ldr	r3, [pc, #148]	; (800c6bc <tcp_input+0x4dc>)
 800c626:	2200      	movs	r2, #0
 800c628:	801a      	strh	r2, [r3, #0]

    if (flags & TCP_PSH) {
 800c62a:	4b25      	ldr	r3, [pc, #148]	; (800c6c0 <tcp_input+0x4e0>)
 800c62c:	781b      	ldrb	r3, [r3, #0]
 800c62e:	f003 0308 	and.w	r3, r3, #8
 800c632:	2b00      	cmp	r3, #0
 800c634:	d006      	beq.n	800c644 <tcp_input+0x464>
      p->flags |= PBUF_FLAG_PUSH;
 800c636:	687b      	ldr	r3, [r7, #4]
 800c638:	7b5b      	ldrb	r3, [r3, #13]
 800c63a:	f043 0301 	orr.w	r3, r3, #1
 800c63e:	b2da      	uxtb	r2, r3
 800c640:	687b      	ldr	r3, [r7, #4]
 800c642:	735a      	strb	r2, [r3, #13]
    }

    /* If there is data which was previously "refused" by upper layer */
    if (pcb->refused_data != NULL) {
 800c644:	69fb      	ldr	r3, [r7, #28]
 800c646:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800c648:	2b00      	cmp	r3, #0
 800c64a:	d03d      	beq.n	800c6c8 <tcp_input+0x4e8>
      if ((tcp_process_refused_data(pcb) == ERR_ABRT) ||
 800c64c:	69f8      	ldr	r0, [r7, #28]
 800c64e:	f7ff f999 	bl	800b984 <tcp_process_refused_data>
 800c652:	4603      	mov	r3, r0
 800c654:	f113 0f0d 	cmn.w	r3, #13
 800c658:	d007      	beq.n	800c66a <tcp_input+0x48a>
        ((pcb->refused_data != NULL) && (tcplen > 0))) {
 800c65a:	69fb      	ldr	r3, [r7, #28]
 800c65c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
      if ((tcp_process_refused_data(pcb) == ERR_ABRT) ||
 800c65e:	2b00      	cmp	r3, #0
 800c660:	d032      	beq.n	800c6c8 <tcp_input+0x4e8>
        ((pcb->refused_data != NULL) && (tcplen > 0))) {
 800c662:	4b18      	ldr	r3, [pc, #96]	; (800c6c4 <tcp_input+0x4e4>)
 800c664:	881b      	ldrh	r3, [r3, #0]
 800c666:	2b00      	cmp	r3, #0
 800c668:	d02e      	beq.n	800c6c8 <tcp_input+0x4e8>
        /* pcb has been aborted or refused data is still refused and the new
           segment contains data */
        if (pcb->rcv_ann_wnd == 0) {
 800c66a:	69fb      	ldr	r3, [r7, #28]
 800c66c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800c66e:	2b00      	cmp	r3, #0
 800c670:	f040 8109 	bne.w	800c886 <tcp_input+0x6a6>
          /* this is a zero-window probe, we respond to it with current RCV.NXT
          and drop the data segment */
          tcp_send_empty_ack(pcb);
 800c674:	69f8      	ldr	r0, [r7, #28]
 800c676:	f002 fe3d 	bl	800f2f4 <tcp_send_empty_ack>
        }
        TCP_STATS_INC(tcp.drop);
        MIB2_STATS_INC(mib2.tcpinerrs);
        goto aborted;
 800c67a:	e104      	b.n	800c886 <tcp_input+0x6a6>
 800c67c:	0801af54 	.word	0x0801af54
 800c680:	0801afec 	.word	0x0801afec
 800c684:	0801af98 	.word	0x0801af98
 800c688:	0801b014 	.word	0x0801b014
 800c68c:	0801b040 	.word	0x0801b040
 800c690:	2400861c 	.word	0x2400861c
 800c694:	240087ac 	.word	0x240087ac
 800c698:	0801b068 	.word	0x0801b068
 800c69c:	2400f2e8 	.word	0x2400f2e8
 800c6a0:	0801b094 	.word	0x0801b094
 800c6a4:	2400f2f8 	.word	0x2400f2f8
 800c6a8:	0801b0c0 	.word	0x0801b0c0
 800c6ac:	2400f2f0 	.word	0x2400f2f0
 800c6b0:	2400860c 	.word	0x2400860c
 800c6b4:	2400863c 	.word	0x2400863c
 800c6b8:	24008639 	.word	0x24008639
 800c6bc:	24008634 	.word	0x24008634
 800c6c0:	24008638 	.word	0x24008638
 800c6c4:	24008636 	.word	0x24008636
      }
    }
    tcp_input_pcb = pcb;
 800c6c8:	4a98      	ldr	r2, [pc, #608]	; (800c92c <tcp_input+0x74c>)
 800c6ca:	69fb      	ldr	r3, [r7, #28]
 800c6cc:	6013      	str	r3, [r2, #0]
    err = tcp_process(pcb);
 800c6ce:	69f8      	ldr	r0, [r7, #28]
 800c6d0:	f000 fac6 	bl	800cc60 <tcp_process>
 800c6d4:	4603      	mov	r3, r0
 800c6d6:	74fb      	strb	r3, [r7, #19]
    /* A return value of ERR_ABRT means that tcp_abort() was called
       and that the pcb has been freed. If so, we don't do anything. */
    if (err != ERR_ABRT) {
 800c6d8:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800c6dc:	f113 0f0d 	cmn.w	r3, #13
 800c6e0:	f000 80d3 	beq.w	800c88a <tcp_input+0x6aa>
      if (recv_flags & TF_RESET) {
 800c6e4:	4b92      	ldr	r3, [pc, #584]	; (800c930 <tcp_input+0x750>)
 800c6e6:	781b      	ldrb	r3, [r3, #0]
 800c6e8:	f003 0308 	and.w	r3, r3, #8
 800c6ec:	2b00      	cmp	r3, #0
 800c6ee:	d016      	beq.n	800c71e <tcp_input+0x53e>
        /* TF_RESET means that the connection was reset by the other
           end. We then call the error callback to inform the
           application that the connection is dead before we
           deallocate the PCB. */
        TCP_EVENT_ERR(pcb->state, pcb->errf, pcb->callback_arg, ERR_RST);
 800c6f0:	69fb      	ldr	r3, [r7, #28]
 800c6f2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800c6f6:	2b00      	cmp	r3, #0
 800c6f8:	d008      	beq.n	800c70c <tcp_input+0x52c>
 800c6fa:	69fb      	ldr	r3, [r7, #28]
 800c6fc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800c700:	69fa      	ldr	r2, [r7, #28]
 800c702:	6912      	ldr	r2, [r2, #16]
 800c704:	f06f 010d 	mvn.w	r1, #13
 800c708:	4610      	mov	r0, r2
 800c70a:	4798      	blx	r3
        tcp_pcb_remove(&tcp_active_pcbs, pcb);
 800c70c:	69f9      	ldr	r1, [r7, #28]
 800c70e:	4889      	ldr	r0, [pc, #548]	; (800c934 <tcp_input+0x754>)
 800c710:	f7ff fc4c 	bl	800bfac <tcp_pcb_remove>
        memp_free(MEMP_TCP_PCB, pcb);
 800c714:	69f9      	ldr	r1, [r7, #28]
 800c716:	2001      	movs	r0, #1
 800c718:	f7fd f920 	bl	800995c <memp_free>
 800c71c:	e0c0      	b.n	800c8a0 <tcp_input+0x6c0>
      } else {
        err = ERR_OK;
 800c71e:	2300      	movs	r3, #0
 800c720:	74fb      	strb	r3, [r7, #19]
        /* If the application has registered a "sent" function to be
           called when new send buffer space is available, we call it
           now. */
        if (recv_acked > 0) {
 800c722:	4b85      	ldr	r3, [pc, #532]	; (800c938 <tcp_input+0x758>)
 800c724:	881b      	ldrh	r3, [r3, #0]
 800c726:	2b00      	cmp	r3, #0
 800c728:	d01b      	beq.n	800c762 <tcp_input+0x582>
          while (acked > 0) {
            acked16 = (u16_t)LWIP_MIN(acked, 0xffffu);
            acked -= acked16;
#else
          {
            acked16 = recv_acked;
 800c72a:	4b83      	ldr	r3, [pc, #524]	; (800c938 <tcp_input+0x758>)
 800c72c:	881b      	ldrh	r3, [r3, #0]
 800c72e:	81fb      	strh	r3, [r7, #14]
#endif
            TCP_EVENT_SENT(pcb, (u16_t)acked16, err);
 800c730:	69fb      	ldr	r3, [r7, #28]
 800c732:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800c734:	2b00      	cmp	r3, #0
 800c736:	d009      	beq.n	800c74c <tcp_input+0x56c>
 800c738:	69fb      	ldr	r3, [r7, #28]
 800c73a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800c73c:	69fa      	ldr	r2, [r7, #28]
 800c73e:	6910      	ldr	r0, [r2, #16]
 800c740:	89fa      	ldrh	r2, [r7, #14]
 800c742:	69f9      	ldr	r1, [r7, #28]
 800c744:	4798      	blx	r3
 800c746:	4603      	mov	r3, r0
 800c748:	74fb      	strb	r3, [r7, #19]
 800c74a:	e001      	b.n	800c750 <tcp_input+0x570>
 800c74c:	2300      	movs	r3, #0
 800c74e:	74fb      	strb	r3, [r7, #19]
            if (err == ERR_ABRT) {
 800c750:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800c754:	f113 0f0d 	cmn.w	r3, #13
 800c758:	f000 8099 	beq.w	800c88e <tcp_input+0x6ae>
              goto aborted;
            }
          }
          recv_acked = 0;
 800c75c:	4b76      	ldr	r3, [pc, #472]	; (800c938 <tcp_input+0x758>)
 800c75e:	2200      	movs	r2, #0
 800c760:	801a      	strh	r2, [r3, #0]
        }
        if (tcp_input_delayed_close(pcb)) {
 800c762:	69f8      	ldr	r0, [r7, #28]
 800c764:	f000 f900 	bl	800c968 <tcp_input_delayed_close>
 800c768:	4603      	mov	r3, r0
 800c76a:	2b00      	cmp	r3, #0
 800c76c:	f040 8091 	bne.w	800c892 <tcp_input+0x6b2>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
        while (recv_data != NULL) {
          struct pbuf *rest = NULL;
          pbuf_split_64k(recv_data, &rest);
#else /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
        if (recv_data != NULL) {
 800c770:	4b72      	ldr	r3, [pc, #456]	; (800c93c <tcp_input+0x75c>)
 800c772:	681b      	ldr	r3, [r3, #0]
 800c774:	2b00      	cmp	r3, #0
 800c776:	d041      	beq.n	800c7fc <tcp_input+0x61c>
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */

          LWIP_ASSERT("pcb->refused_data == NULL", pcb->refused_data == NULL);
 800c778:	69fb      	ldr	r3, [r7, #28]
 800c77a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800c77c:	2b00      	cmp	r3, #0
 800c77e:	d006      	beq.n	800c78e <tcp_input+0x5ae>
 800c780:	4b6f      	ldr	r3, [pc, #444]	; (800c940 <tcp_input+0x760>)
 800c782:	f44f 72d2 	mov.w	r2, #420	; 0x1a4
 800c786:	496f      	ldr	r1, [pc, #444]	; (800c944 <tcp_input+0x764>)
 800c788:	486f      	ldr	r0, [pc, #444]	; (800c948 <tcp_input+0x768>)
 800c78a:	f009 fa23 	bl	8015bd4 <printf_>
          if (pcb->flags & TF_RXCLOSED) {
 800c78e:	69fb      	ldr	r3, [r7, #28]
 800c790:	7e9b      	ldrb	r3, [r3, #26]
 800c792:	f003 0310 	and.w	r3, r3, #16
 800c796:	2b00      	cmp	r3, #0
 800c798:	d008      	beq.n	800c7ac <tcp_input+0x5cc>
            /* received data although already closed -> abort (send RST) to
               notify the remote host that not all data has been processed */
            pbuf_free(recv_data);
 800c79a:	4b68      	ldr	r3, [pc, #416]	; (800c93c <tcp_input+0x75c>)
 800c79c:	681b      	ldr	r3, [r3, #0]
 800c79e:	4618      	mov	r0, r3
 800c7a0:	f7fd fe86 	bl	800a4b0 <pbuf_free>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
            if (rest != NULL) {
              pbuf_free(rest);
            }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            tcp_abort(pcb);
 800c7a4:	69f8      	ldr	r0, [r7, #28]
 800c7a6:	f7fe fbdb 	bl	800af60 <tcp_abort>
            goto aborted;
 800c7aa:	e079      	b.n	800c8a0 <tcp_input+0x6c0>
          }

          /* Notify application that data has been received. */
          TCP_EVENT_RECV(pcb, recv_data, ERR_OK, err);
 800c7ac:	69fb      	ldr	r3, [r7, #28]
 800c7ae:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800c7b2:	2b00      	cmp	r3, #0
 800c7b4:	d00c      	beq.n	800c7d0 <tcp_input+0x5f0>
 800c7b6:	69fb      	ldr	r3, [r7, #28]
 800c7b8:	f8d3 4080 	ldr.w	r4, [r3, #128]	; 0x80
 800c7bc:	69fb      	ldr	r3, [r7, #28]
 800c7be:	6918      	ldr	r0, [r3, #16]
 800c7c0:	4b5e      	ldr	r3, [pc, #376]	; (800c93c <tcp_input+0x75c>)
 800c7c2:	681a      	ldr	r2, [r3, #0]
 800c7c4:	2300      	movs	r3, #0
 800c7c6:	69f9      	ldr	r1, [r7, #28]
 800c7c8:	47a0      	blx	r4
 800c7ca:	4603      	mov	r3, r0
 800c7cc:	74fb      	strb	r3, [r7, #19]
 800c7ce:	e008      	b.n	800c7e2 <tcp_input+0x602>
 800c7d0:	4b5a      	ldr	r3, [pc, #360]	; (800c93c <tcp_input+0x75c>)
 800c7d2:	681a      	ldr	r2, [r3, #0]
 800c7d4:	2300      	movs	r3, #0
 800c7d6:	69f9      	ldr	r1, [r7, #28]
 800c7d8:	2000      	movs	r0, #0
 800c7da:	f7ff f985 	bl	800bae8 <tcp_recv_null>
 800c7de:	4603      	mov	r3, r0
 800c7e0:	74fb      	strb	r3, [r7, #19]
          if (err == ERR_ABRT) {
 800c7e2:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800c7e6:	f113 0f0d 	cmn.w	r3, #13
 800c7ea:	d054      	beq.n	800c896 <tcp_input+0x6b6>
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            goto aborted;
          }

          /* If the upper layer can't receive this data, store it */
          if (err != ERR_OK) {
 800c7ec:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800c7f0:	2b00      	cmp	r3, #0
 800c7f2:	d003      	beq.n	800c7fc <tcp_input+0x61c>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
            if (rest != NULL) {
              pbuf_cat(recv_data, rest);
            }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            pcb->refused_data = recv_data;
 800c7f4:	4b51      	ldr	r3, [pc, #324]	; (800c93c <tcp_input+0x75c>)
 800c7f6:	681a      	ldr	r2, [r3, #0]
 800c7f8:	69fb      	ldr	r3, [r7, #28]
 800c7fa:	675a      	str	r2, [r3, #116]	; 0x74
          }
        }

        /* If a FIN segment was received, we call the callback
           function with a NULL buffer to indicate EOF. */
        if (recv_flags & TF_GOT_FIN) {
 800c7fc:	4b4c      	ldr	r3, [pc, #304]	; (800c930 <tcp_input+0x750>)
 800c7fe:	781b      	ldrb	r3, [r3, #0]
 800c800:	f003 0320 	and.w	r3, r3, #32
 800c804:	2b00      	cmp	r3, #0
 800c806:	d031      	beq.n	800c86c <tcp_input+0x68c>
          if (pcb->refused_data != NULL) {
 800c808:	69fb      	ldr	r3, [r7, #28]
 800c80a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800c80c:	2b00      	cmp	r3, #0
 800c80e:	d009      	beq.n	800c824 <tcp_input+0x644>
            /* Delay this if we have refused data. */
            pcb->refused_data->flags |= PBUF_FLAG_TCP_FIN;
 800c810:	69fb      	ldr	r3, [r7, #28]
 800c812:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800c814:	7b5a      	ldrb	r2, [r3, #13]
 800c816:	69fb      	ldr	r3, [r7, #28]
 800c818:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800c81a:	f042 0220 	orr.w	r2, r2, #32
 800c81e:	b2d2      	uxtb	r2, r2
 800c820:	735a      	strb	r2, [r3, #13]
 800c822:	e023      	b.n	800c86c <tcp_input+0x68c>
          } else {
            /* correct rcv_wnd as the application won't call tcp_recved()
               for the FIN's seqno */
            if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 800c824:	69fb      	ldr	r3, [r7, #28]
 800c826:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800c828:	f241 62d0 	movw	r2, #5840	; 0x16d0
 800c82c:	4293      	cmp	r3, r2
 800c82e:	d005      	beq.n	800c83c <tcp_input+0x65c>
              pcb->rcv_wnd++;
 800c830:	69fb      	ldr	r3, [r7, #28]
 800c832:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800c834:	3301      	adds	r3, #1
 800c836:	b29a      	uxth	r2, r3
 800c838:	69fb      	ldr	r3, [r7, #28]
 800c83a:	851a      	strh	r2, [r3, #40]	; 0x28
            }
            TCP_EVENT_CLOSED(pcb, err);
 800c83c:	69fb      	ldr	r3, [r7, #28]
 800c83e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800c842:	2b00      	cmp	r3, #0
 800c844:	d00b      	beq.n	800c85e <tcp_input+0x67e>
 800c846:	69fb      	ldr	r3, [r7, #28]
 800c848:	f8d3 4080 	ldr.w	r4, [r3, #128]	; 0x80
 800c84c:	69fb      	ldr	r3, [r7, #28]
 800c84e:	6918      	ldr	r0, [r3, #16]
 800c850:	2300      	movs	r3, #0
 800c852:	2200      	movs	r2, #0
 800c854:	69f9      	ldr	r1, [r7, #28]
 800c856:	47a0      	blx	r4
 800c858:	4603      	mov	r3, r0
 800c85a:	74fb      	strb	r3, [r7, #19]
 800c85c:	e001      	b.n	800c862 <tcp_input+0x682>
 800c85e:	2300      	movs	r3, #0
 800c860:	74fb      	strb	r3, [r7, #19]
            if (err == ERR_ABRT) {
 800c862:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800c866:	f113 0f0d 	cmn.w	r3, #13
 800c86a:	d016      	beq.n	800c89a <tcp_input+0x6ba>
              goto aborted;
            }
          }
        }

        tcp_input_pcb = NULL;
 800c86c:	4b2f      	ldr	r3, [pc, #188]	; (800c92c <tcp_input+0x74c>)
 800c86e:	2200      	movs	r2, #0
 800c870:	601a      	str	r2, [r3, #0]
        if (tcp_input_delayed_close(pcb)) {
 800c872:	69f8      	ldr	r0, [r7, #28]
 800c874:	f000 f878 	bl	800c968 <tcp_input_delayed_close>
 800c878:	4603      	mov	r3, r0
 800c87a:	2b00      	cmp	r3, #0
 800c87c:	d10f      	bne.n	800c89e <tcp_input+0x6be>
          goto aborted;
        }
        /* Try to send something out. */
        tcp_output(pcb);
 800c87e:	69f8      	ldr	r0, [r7, #28]
 800c880:	f002 fd94 	bl	800f3ac <tcp_output>
 800c884:	e00c      	b.n	800c8a0 <tcp_input+0x6c0>
        goto aborted;
 800c886:	bf00      	nop
 800c888:	e00a      	b.n	800c8a0 <tcp_input+0x6c0>
#endif /* TCP_INPUT_DEBUG */
      }
    }
    /* Jump target if pcb has been aborted in a callback (by calling tcp_abort()).
       Below this line, 'pcb' may not be dereferenced! */
aborted:
 800c88a:	bf00      	nop
 800c88c:	e008      	b.n	800c8a0 <tcp_input+0x6c0>
              goto aborted;
 800c88e:	bf00      	nop
 800c890:	e006      	b.n	800c8a0 <tcp_input+0x6c0>
          goto aborted;
 800c892:	bf00      	nop
 800c894:	e004      	b.n	800c8a0 <tcp_input+0x6c0>
            goto aborted;
 800c896:	bf00      	nop
 800c898:	e002      	b.n	800c8a0 <tcp_input+0x6c0>
              goto aborted;
 800c89a:	bf00      	nop
 800c89c:	e000      	b.n	800c8a0 <tcp_input+0x6c0>
          goto aborted;
 800c89e:	bf00      	nop
    tcp_input_pcb = NULL;
 800c8a0:	4b22      	ldr	r3, [pc, #136]	; (800c92c <tcp_input+0x74c>)
 800c8a2:	2200      	movs	r2, #0
 800c8a4:	601a      	str	r2, [r3, #0]
    recv_data = NULL;
 800c8a6:	4b25      	ldr	r3, [pc, #148]	; (800c93c <tcp_input+0x75c>)
 800c8a8:	2200      	movs	r2, #0
 800c8aa:	601a      	str	r2, [r3, #0]

    /* give up our reference to inseg.p */
    if (inseg.p != NULL)
 800c8ac:	4b27      	ldr	r3, [pc, #156]	; (800c94c <tcp_input+0x76c>)
 800c8ae:	685b      	ldr	r3, [r3, #4]
 800c8b0:	2b00      	cmp	r3, #0
 800c8b2:	d037      	beq.n	800c924 <tcp_input+0x744>
    {
      pbuf_free(inseg.p);
 800c8b4:	4b25      	ldr	r3, [pc, #148]	; (800c94c <tcp_input+0x76c>)
 800c8b6:	685b      	ldr	r3, [r3, #4]
 800c8b8:	4618      	mov	r0, r3
 800c8ba:	f7fd fdf9 	bl	800a4b0 <pbuf_free>
      inseg.p = NULL;
 800c8be:	4b23      	ldr	r3, [pc, #140]	; (800c94c <tcp_input+0x76c>)
 800c8c0:	2200      	movs	r2, #0
 800c8c2:	605a      	str	r2, [r3, #4]
    pbuf_free(p);
  }

  LWIP_ASSERT("tcp_input: tcp_pcbs_sane()", tcp_pcbs_sane());
  PERF_STOP("tcp_input");
  return;
 800c8c4:	e02e      	b.n	800c924 <tcp_input+0x744>
    if (!(TCPH_FLAGS(tcphdr) & TCP_RST)) {
 800c8c6:	4b22      	ldr	r3, [pc, #136]	; (800c950 <tcp_input+0x770>)
 800c8c8:	681b      	ldr	r3, [r3, #0]
 800c8ca:	899b      	ldrh	r3, [r3, #12]
 800c8cc:	b29b      	uxth	r3, r3
 800c8ce:	4618      	mov	r0, r3
 800c8d0:	f7fc fbc2 	bl	8009058 <lwip_htons>
 800c8d4:	4603      	mov	r3, r0
 800c8d6:	f003 0304 	and.w	r3, r3, #4
 800c8da:	2b00      	cmp	r3, #0
 800c8dc:	d115      	bne.n	800c90a <tcp_input+0x72a>
      tcp_rst(ackno, seqno + tcplen, ip_current_dest_addr(),
 800c8de:	4b1d      	ldr	r3, [pc, #116]	; (800c954 <tcp_input+0x774>)
 800c8e0:	6818      	ldr	r0, [r3, #0]
 800c8e2:	4b1d      	ldr	r3, [pc, #116]	; (800c958 <tcp_input+0x778>)
 800c8e4:	881b      	ldrh	r3, [r3, #0]
 800c8e6:	461a      	mov	r2, r3
 800c8e8:	4b1c      	ldr	r3, [pc, #112]	; (800c95c <tcp_input+0x77c>)
 800c8ea:	681b      	ldr	r3, [r3, #0]
 800c8ec:	18d1      	adds	r1, r2, r3
        ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800c8ee:	4b18      	ldr	r3, [pc, #96]	; (800c950 <tcp_input+0x770>)
 800c8f0:	681b      	ldr	r3, [r3, #0]
      tcp_rst(ackno, seqno + tcplen, ip_current_dest_addr(),
 800c8f2:	885b      	ldrh	r3, [r3, #2]
 800c8f4:	b29b      	uxth	r3, r3
        ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800c8f6:	4a16      	ldr	r2, [pc, #88]	; (800c950 <tcp_input+0x770>)
 800c8f8:	6812      	ldr	r2, [r2, #0]
      tcp_rst(ackno, seqno + tcplen, ip_current_dest_addr(),
 800c8fa:	8812      	ldrh	r2, [r2, #0]
 800c8fc:	b292      	uxth	r2, r2
 800c8fe:	9201      	str	r2, [sp, #4]
 800c900:	9300      	str	r3, [sp, #0]
 800c902:	4b17      	ldr	r3, [pc, #92]	; (800c960 <tcp_input+0x780>)
 800c904:	4a17      	ldr	r2, [pc, #92]	; (800c964 <tcp_input+0x784>)
 800c906:	f002 ffdb 	bl	800f8c0 <tcp_rst>
    pbuf_free(p);
 800c90a:	6878      	ldr	r0, [r7, #4]
 800c90c:	f7fd fdd0 	bl	800a4b0 <pbuf_free>
  return;
 800c910:	e008      	b.n	800c924 <tcp_input+0x744>
    goto dropped;
 800c912:	bf00      	nop
 800c914:	e002      	b.n	800c91c <tcp_input+0x73c>
dropped:
 800c916:	bf00      	nop
 800c918:	e000      	b.n	800c91c <tcp_input+0x73c>
      goto dropped;
 800c91a:	bf00      	nop
  TCP_STATS_INC(tcp.drop);
  MIB2_STATS_INC(mib2.tcpinerrs);
  pbuf_free(p);
 800c91c:	6878      	ldr	r0, [r7, #4]
 800c91e:	f7fd fdc7 	bl	800a4b0 <pbuf_free>
 800c922:	e000      	b.n	800c926 <tcp_input+0x746>
  return;
 800c924:	bf00      	nop
}
 800c926:	3724      	adds	r7, #36	; 0x24
 800c928:	46bd      	mov	sp, r7
 800c92a:	bd90      	pop	{r4, r7, pc}
 800c92c:	2400f2fc 	.word	0x2400f2fc
 800c930:	24008639 	.word	0x24008639
 800c934:	2400f2e8 	.word	0x2400f2e8
 800c938:	24008634 	.word	0x24008634
 800c93c:	2400863c 	.word	0x2400863c
 800c940:	0801af54 	.word	0x0801af54
 800c944:	0801b0f0 	.word	0x0801b0f0
 800c948:	0801af98 	.word	0x0801af98
 800c94c:	2400860c 	.word	0x2400860c
 800c950:	2400861c 	.word	0x2400861c
 800c954:	24008630 	.word	0x24008630
 800c958:	24008636 	.word	0x24008636
 800c95c:	2400862c 	.word	0x2400862c
 800c960:	240087bc 	.word	0x240087bc
 800c964:	240087c0 	.word	0x240087c0

0800c968 <tcp_input_delayed_close>:
 * any more.
 * @returns 1 if the pcb has been closed and deallocated, 0 otherwise
 */
static int
tcp_input_delayed_close(struct tcp_pcb *pcb)
{
 800c968:	b580      	push	{r7, lr}
 800c96a:	b082      	sub	sp, #8
 800c96c:	af00      	add	r7, sp, #0
 800c96e:	6078      	str	r0, [r7, #4]
  if (recv_flags & TF_CLOSED) {
 800c970:	4b14      	ldr	r3, [pc, #80]	; (800c9c4 <tcp_input_delayed_close+0x5c>)
 800c972:	781b      	ldrb	r3, [r3, #0]
 800c974:	f003 0310 	and.w	r3, r3, #16
 800c978:	2b00      	cmp	r3, #0
 800c97a:	d01d      	beq.n	800c9b8 <tcp_input_delayed_close+0x50>
    /* The connection has been closed and we will deallocate the
        PCB. */
    if (!(pcb->flags & TF_RXCLOSED)) {
 800c97c:	687b      	ldr	r3, [r7, #4]
 800c97e:	7e9b      	ldrb	r3, [r3, #26]
 800c980:	f003 0310 	and.w	r3, r3, #16
 800c984:	2b00      	cmp	r3, #0
 800c986:	d10d      	bne.n	800c9a4 <tcp_input_delayed_close+0x3c>
      /* Connection closed although the application has only shut down the
          tx side: call the PCB's err callback and indicate the closure to
          ensure the application doesn't continue using the PCB. */
      TCP_EVENT_ERR(pcb->state, pcb->errf, pcb->callback_arg, ERR_CLSD);
 800c988:	687b      	ldr	r3, [r7, #4]
 800c98a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800c98e:	2b00      	cmp	r3, #0
 800c990:	d008      	beq.n	800c9a4 <tcp_input_delayed_close+0x3c>
 800c992:	687b      	ldr	r3, [r7, #4]
 800c994:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800c998:	687a      	ldr	r2, [r7, #4]
 800c99a:	6912      	ldr	r2, [r2, #16]
 800c99c:	f06f 010e 	mvn.w	r1, #14
 800c9a0:	4610      	mov	r0, r2
 800c9a2:	4798      	blx	r3
    }
    tcp_pcb_remove(&tcp_active_pcbs, pcb);
 800c9a4:	6879      	ldr	r1, [r7, #4]
 800c9a6:	4808      	ldr	r0, [pc, #32]	; (800c9c8 <tcp_input_delayed_close+0x60>)
 800c9a8:	f7ff fb00 	bl	800bfac <tcp_pcb_remove>
    memp_free(MEMP_TCP_PCB, pcb);
 800c9ac:	6879      	ldr	r1, [r7, #4]
 800c9ae:	2001      	movs	r0, #1
 800c9b0:	f7fc ffd4 	bl	800995c <memp_free>
    return 1;
 800c9b4:	2301      	movs	r3, #1
 800c9b6:	e000      	b.n	800c9ba <tcp_input_delayed_close+0x52>
  }
  return 0;
 800c9b8:	2300      	movs	r3, #0
}
 800c9ba:	4618      	mov	r0, r3
 800c9bc:	3708      	adds	r7, #8
 800c9be:	46bd      	mov	sp, r7
 800c9c0:	bd80      	pop	{r7, pc}
 800c9c2:	bf00      	nop
 800c9c4:	24008639 	.word	0x24008639
 800c9c8:	2400f2e8 	.word	0x2400f2e8

0800c9cc <tcp_listen_input>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static void
tcp_listen_input(struct tcp_pcb_listen *pcb)
{
 800c9cc:	b580      	push	{r7, lr}
 800c9ce:	b088      	sub	sp, #32
 800c9d0:	af02      	add	r7, sp, #8
 800c9d2:	6078      	str	r0, [r7, #4]
  struct tcp_pcb *npcb;
  u32_t iss;
  err_t rc;

  if (flags & TCP_RST) {
 800c9d4:	4b64      	ldr	r3, [pc, #400]	; (800cb68 <tcp_listen_input+0x19c>)
 800c9d6:	781b      	ldrb	r3, [r3, #0]
 800c9d8:	f003 0304 	and.w	r3, r3, #4
 800c9dc:	2b00      	cmp	r3, #0
 800c9de:	f040 80bc 	bne.w	800cb5a <tcp_listen_input+0x18e>
    return;
  }

  /* In the LISTEN state, we check for incoming SYN segments,
     creates a new PCB, and responds with a SYN|ACK. */
  if (flags & TCP_ACK) {
 800c9e2:	4b61      	ldr	r3, [pc, #388]	; (800cb68 <tcp_listen_input+0x19c>)
 800c9e4:	781b      	ldrb	r3, [r3, #0]
 800c9e6:	f003 0310 	and.w	r3, r3, #16
 800c9ea:	2b00      	cmp	r3, #0
 800c9ec:	d016      	beq.n	800ca1c <tcp_listen_input+0x50>
    /* For incoming segments with the ACK flag set, respond with a
       RST. */
    LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_listen_input: ACK in LISTEN, sending reset\n"));
    tcp_rst(ackno, seqno + tcplen, ip_current_dest_addr(),
 800c9ee:	4b5f      	ldr	r3, [pc, #380]	; (800cb6c <tcp_listen_input+0x1a0>)
 800c9f0:	6818      	ldr	r0, [r3, #0]
 800c9f2:	4b5f      	ldr	r3, [pc, #380]	; (800cb70 <tcp_listen_input+0x1a4>)
 800c9f4:	881b      	ldrh	r3, [r3, #0]
 800c9f6:	461a      	mov	r2, r3
 800c9f8:	4b5e      	ldr	r3, [pc, #376]	; (800cb74 <tcp_listen_input+0x1a8>)
 800c9fa:	681b      	ldr	r3, [r3, #0]
 800c9fc:	18d1      	adds	r1, r2, r3
      ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800c9fe:	4b5e      	ldr	r3, [pc, #376]	; (800cb78 <tcp_listen_input+0x1ac>)
 800ca00:	681b      	ldr	r3, [r3, #0]
    tcp_rst(ackno, seqno + tcplen, ip_current_dest_addr(),
 800ca02:	885b      	ldrh	r3, [r3, #2]
 800ca04:	b29b      	uxth	r3, r3
      ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800ca06:	4a5c      	ldr	r2, [pc, #368]	; (800cb78 <tcp_listen_input+0x1ac>)
 800ca08:	6812      	ldr	r2, [r2, #0]
    tcp_rst(ackno, seqno + tcplen, ip_current_dest_addr(),
 800ca0a:	8812      	ldrh	r2, [r2, #0]
 800ca0c:	b292      	uxth	r2, r2
 800ca0e:	9201      	str	r2, [sp, #4]
 800ca10:	9300      	str	r3, [sp, #0]
 800ca12:	4b5a      	ldr	r3, [pc, #360]	; (800cb7c <tcp_listen_input+0x1b0>)
 800ca14:	4a5a      	ldr	r2, [pc, #360]	; (800cb80 <tcp_listen_input+0x1b4>)
 800ca16:	f002 ff53 	bl	800f8c0 <tcp_rst>
      tcp_abandon(npcb, 0);
      return;
    }
    tcp_output(npcb);
  }
  return;
 800ca1a:	e0a0      	b.n	800cb5e <tcp_listen_input+0x192>
  } else if (flags & TCP_SYN) {
 800ca1c:	4b52      	ldr	r3, [pc, #328]	; (800cb68 <tcp_listen_input+0x19c>)
 800ca1e:	781b      	ldrb	r3, [r3, #0]
 800ca20:	f003 0302 	and.w	r3, r3, #2
 800ca24:	2b00      	cmp	r3, #0
 800ca26:	f000 809a 	beq.w	800cb5e <tcp_listen_input+0x192>
    npcb = tcp_alloc(pcb->prio);
 800ca2a:	687b      	ldr	r3, [r7, #4]
 800ca2c:	7d5b      	ldrb	r3, [r3, #21]
 800ca2e:	4618      	mov	r0, r3
 800ca30:	f7ff f938 	bl	800bca4 <tcp_alloc>
 800ca34:	6178      	str	r0, [r7, #20]
    if (npcb == NULL) {
 800ca36:	697b      	ldr	r3, [r7, #20]
 800ca38:	2b00      	cmp	r3, #0
 800ca3a:	d111      	bne.n	800ca60 <tcp_listen_input+0x94>
      TCP_EVENT_ACCEPT(pcb, NULL, pcb->callback_arg, ERR_MEM, err);
 800ca3c:	687b      	ldr	r3, [r7, #4]
 800ca3e:	699b      	ldr	r3, [r3, #24]
 800ca40:	2b00      	cmp	r3, #0
 800ca42:	d00a      	beq.n	800ca5a <tcp_listen_input+0x8e>
 800ca44:	687b      	ldr	r3, [r7, #4]
 800ca46:	699b      	ldr	r3, [r3, #24]
 800ca48:	687a      	ldr	r2, [r7, #4]
 800ca4a:	6910      	ldr	r0, [r2, #16]
 800ca4c:	f04f 32ff 	mov.w	r2, #4294967295
 800ca50:	2100      	movs	r1, #0
 800ca52:	4798      	blx	r3
 800ca54:	4603      	mov	r3, r0
 800ca56:	73bb      	strb	r3, [r7, #14]
      return;
 800ca58:	e082      	b.n	800cb60 <tcp_listen_input+0x194>
      TCP_EVENT_ACCEPT(pcb, NULL, pcb->callback_arg, ERR_MEM, err);
 800ca5a:	23f0      	movs	r3, #240	; 0xf0
 800ca5c:	73bb      	strb	r3, [r7, #14]
      return;
 800ca5e:	e07f      	b.n	800cb60 <tcp_listen_input+0x194>
    ip_addr_copy(npcb->local_ip, *ip_current_dest_addr());
 800ca60:	4b48      	ldr	r3, [pc, #288]	; (800cb84 <tcp_listen_input+0x1b8>)
 800ca62:	695a      	ldr	r2, [r3, #20]
 800ca64:	697b      	ldr	r3, [r7, #20]
 800ca66:	601a      	str	r2, [r3, #0]
    ip_addr_copy(npcb->remote_ip, *ip_current_src_addr());
 800ca68:	4b46      	ldr	r3, [pc, #280]	; (800cb84 <tcp_listen_input+0x1b8>)
 800ca6a:	691a      	ldr	r2, [r3, #16]
 800ca6c:	697b      	ldr	r3, [r7, #20]
 800ca6e:	605a      	str	r2, [r3, #4]
    npcb->local_port = pcb->local_port;
 800ca70:	687b      	ldr	r3, [r7, #4]
 800ca72:	8ada      	ldrh	r2, [r3, #22]
 800ca74:	697b      	ldr	r3, [r7, #20]
 800ca76:	82da      	strh	r2, [r3, #22]
    npcb->remote_port = tcphdr->src;
 800ca78:	4b3f      	ldr	r3, [pc, #252]	; (800cb78 <tcp_listen_input+0x1ac>)
 800ca7a:	681b      	ldr	r3, [r3, #0]
 800ca7c:	881b      	ldrh	r3, [r3, #0]
 800ca7e:	b29a      	uxth	r2, r3
 800ca80:	697b      	ldr	r3, [r7, #20]
 800ca82:	831a      	strh	r2, [r3, #24]
    npcb->state = SYN_RCVD;
 800ca84:	697b      	ldr	r3, [r7, #20]
 800ca86:	2203      	movs	r2, #3
 800ca88:	751a      	strb	r2, [r3, #20]
    npcb->rcv_nxt = seqno + 1;
 800ca8a:	4b3a      	ldr	r3, [pc, #232]	; (800cb74 <tcp_listen_input+0x1a8>)
 800ca8c:	681b      	ldr	r3, [r3, #0]
 800ca8e:	1c5a      	adds	r2, r3, #1
 800ca90:	697b      	ldr	r3, [r7, #20]
 800ca92:	625a      	str	r2, [r3, #36]	; 0x24
    npcb->rcv_ann_right_edge = npcb->rcv_nxt;
 800ca94:	697b      	ldr	r3, [r7, #20]
 800ca96:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800ca98:	697b      	ldr	r3, [r7, #20]
 800ca9a:	62da      	str	r2, [r3, #44]	; 0x2c
    iss = tcp_next_iss(npcb);
 800ca9c:	6978      	ldr	r0, [r7, #20]
 800ca9e:	f7ff fb01 	bl	800c0a4 <tcp_next_iss>
 800caa2:	6138      	str	r0, [r7, #16]
    npcb->snd_wl2 = iss;
 800caa4:	697b      	ldr	r3, [r7, #20]
 800caa6:	693a      	ldr	r2, [r7, #16]
 800caa8:	655a      	str	r2, [r3, #84]	; 0x54
    npcb->snd_nxt = iss;
 800caaa:	697b      	ldr	r3, [r7, #20]
 800caac:	693a      	ldr	r2, [r7, #16]
 800caae:	64da      	str	r2, [r3, #76]	; 0x4c
    npcb->lastack = iss;
 800cab0:	697b      	ldr	r3, [r7, #20]
 800cab2:	693a      	ldr	r2, [r7, #16]
 800cab4:	645a      	str	r2, [r3, #68]	; 0x44
    npcb->snd_lbb = iss;
 800cab6:	697b      	ldr	r3, [r7, #20]
 800cab8:	693a      	ldr	r2, [r7, #16]
 800caba:	659a      	str	r2, [r3, #88]	; 0x58
    npcb->snd_wl1 = seqno - 1;/* initialise to seqno-1 to force window update */
 800cabc:	4b2d      	ldr	r3, [pc, #180]	; (800cb74 <tcp_listen_input+0x1a8>)
 800cabe:	681b      	ldr	r3, [r3, #0]
 800cac0:	1e5a      	subs	r2, r3, #1
 800cac2:	697b      	ldr	r3, [r7, #20]
 800cac4:	651a      	str	r2, [r3, #80]	; 0x50
    npcb->callback_arg = pcb->callback_arg;
 800cac6:	687b      	ldr	r3, [r7, #4]
 800cac8:	691a      	ldr	r2, [r3, #16]
 800caca:	697b      	ldr	r3, [r7, #20]
 800cacc:	611a      	str	r2, [r3, #16]
    npcb->listener = pcb;
 800cace:	697b      	ldr	r3, [r7, #20]
 800cad0:	687a      	ldr	r2, [r7, #4]
 800cad2:	679a      	str	r2, [r3, #120]	; 0x78
    npcb->so_options = pcb->so_options & SOF_INHERITED;
 800cad4:	687b      	ldr	r3, [r7, #4]
 800cad6:	7a1b      	ldrb	r3, [r3, #8]
 800cad8:	f003 030c 	and.w	r3, r3, #12
 800cadc:	b2da      	uxtb	r2, r3
 800cade:	697b      	ldr	r3, [r7, #20]
 800cae0:	721a      	strb	r2, [r3, #8]
    TCP_REG_ACTIVE(npcb);
 800cae2:	4b29      	ldr	r3, [pc, #164]	; (800cb88 <tcp_listen_input+0x1bc>)
 800cae4:	681a      	ldr	r2, [r3, #0]
 800cae6:	697b      	ldr	r3, [r7, #20]
 800cae8:	60da      	str	r2, [r3, #12]
 800caea:	4a27      	ldr	r2, [pc, #156]	; (800cb88 <tcp_listen_input+0x1bc>)
 800caec:	697b      	ldr	r3, [r7, #20]
 800caee:	6013      	str	r3, [r2, #0]
 800caf0:	f003 f938 	bl	800fd64 <tcp_timer_needed>
 800caf4:	4b25      	ldr	r3, [pc, #148]	; (800cb8c <tcp_listen_input+0x1c0>)
 800caf6:	2201      	movs	r2, #1
 800caf8:	701a      	strb	r2, [r3, #0]
    tcp_parseopt(npcb);
 800cafa:	6978      	ldr	r0, [r7, #20]
 800cafc:	f001 fd14 	bl	800e528 <tcp_parseopt>
    npcb->snd_wnd = tcphdr->wnd;
 800cb00:	4b1d      	ldr	r3, [pc, #116]	; (800cb78 <tcp_listen_input+0x1ac>)
 800cb02:	681b      	ldr	r3, [r3, #0]
 800cb04:	89db      	ldrh	r3, [r3, #14]
 800cb06:	b29a      	uxth	r2, r3
 800cb08:	697b      	ldr	r3, [r7, #20]
 800cb0a:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
    npcb->snd_wnd_max = npcb->snd_wnd;
 800cb0e:	697b      	ldr	r3, [r7, #20]
 800cb10:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 800cb14:	697b      	ldr	r3, [r7, #20]
 800cb16:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
    npcb->mss = tcp_eff_send_mss(npcb->mss, &npcb->local_ip, &npcb->remote_ip);
 800cb1a:	697b      	ldr	r3, [r7, #20]
 800cb1c:	8e5a      	ldrh	r2, [r3, #50]	; 0x32
 800cb1e:	697b      	ldr	r3, [r7, #20]
 800cb20:	3304      	adds	r3, #4
 800cb22:	4619      	mov	r1, r3
 800cb24:	4610      	mov	r0, r2
 800cb26:	f7ff fad5 	bl	800c0d4 <tcp_eff_send_mss_impl>
 800cb2a:	4603      	mov	r3, r0
 800cb2c:	461a      	mov	r2, r3
 800cb2e:	697b      	ldr	r3, [r7, #20]
 800cb30:	865a      	strh	r2, [r3, #50]	; 0x32
    rc = tcp_enqueue_flags(npcb, TCP_SYN | TCP_ACK);
 800cb32:	2112      	movs	r1, #18
 800cb34:	6978      	ldr	r0, [r7, #20]
 800cb36:	f002 fae1 	bl	800f0fc <tcp_enqueue_flags>
 800cb3a:	4603      	mov	r3, r0
 800cb3c:	73fb      	strb	r3, [r7, #15]
    if (rc != ERR_OK) {
 800cb3e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800cb42:	2b00      	cmp	r3, #0
 800cb44:	d004      	beq.n	800cb50 <tcp_listen_input+0x184>
      tcp_abandon(npcb, 0);
 800cb46:	2100      	movs	r1, #0
 800cb48:	6978      	ldr	r0, [r7, #20]
 800cb4a:	f7fe f957 	bl	800adfc <tcp_abandon>
      return;
 800cb4e:	e007      	b.n	800cb60 <tcp_listen_input+0x194>
    tcp_output(npcb);
 800cb50:	6978      	ldr	r0, [r7, #20]
 800cb52:	f002 fc2b 	bl	800f3ac <tcp_output>
  return;
 800cb56:	bf00      	nop
 800cb58:	e001      	b.n	800cb5e <tcp_listen_input+0x192>
    return;
 800cb5a:	bf00      	nop
 800cb5c:	e000      	b.n	800cb60 <tcp_listen_input+0x194>
  return;
 800cb5e:	bf00      	nop
}
 800cb60:	3718      	adds	r7, #24
 800cb62:	46bd      	mov	sp, r7
 800cb64:	bd80      	pop	{r7, pc}
 800cb66:	bf00      	nop
 800cb68:	24008638 	.word	0x24008638
 800cb6c:	24008630 	.word	0x24008630
 800cb70:	24008636 	.word	0x24008636
 800cb74:	2400862c 	.word	0x2400862c
 800cb78:	2400861c 	.word	0x2400861c
 800cb7c:	240087bc 	.word	0x240087bc
 800cb80:	240087c0 	.word	0x240087c0
 800cb84:	240087ac 	.word	0x240087ac
 800cb88:	2400f2e8 	.word	0x2400f2e8
 800cb8c:	2400f2e4 	.word	0x2400f2e4

0800cb90 <tcp_timewait_input>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static void
tcp_timewait_input(struct tcp_pcb *pcb)
{
 800cb90:	b580      	push	{r7, lr}
 800cb92:	b084      	sub	sp, #16
 800cb94:	af02      	add	r7, sp, #8
 800cb96:	6078      	str	r0, [r7, #4]
  /* RFC 1337: in TIME_WAIT, ignore RST and ACK FINs + any 'acceptable' segments */
  /* RFC 793 3.9 Event Processing - Segment Arrives:
   * - first check sequence number - we skip that one in TIME_WAIT (always
   *   acceptable since we only send ACKs)
   * - second check the RST bit (... return) */
  if (flags & TCP_RST) {
 800cb98:	4b29      	ldr	r3, [pc, #164]	; (800cc40 <tcp_timewait_input+0xb0>)
 800cb9a:	781b      	ldrb	r3, [r3, #0]
 800cb9c:	f003 0304 	and.w	r3, r3, #4
 800cba0:	2b00      	cmp	r3, #0
 800cba2:	d147      	bne.n	800cc34 <tcp_timewait_input+0xa4>
    return;
  }
  /* - fourth, check the SYN bit, */
  if (flags & TCP_SYN) {
 800cba4:	4b26      	ldr	r3, [pc, #152]	; (800cc40 <tcp_timewait_input+0xb0>)
 800cba6:	781b      	ldrb	r3, [r3, #0]
 800cba8:	f003 0302 	and.w	r3, r3, #2
 800cbac:	2b00      	cmp	r3, #0
 800cbae:	d027      	beq.n	800cc00 <tcp_timewait_input+0x70>
    /* If an incoming segment is not acceptable, an acknowledgment
       should be sent in reply */
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd)) {
 800cbb0:	4b24      	ldr	r3, [pc, #144]	; (800cc44 <tcp_timewait_input+0xb4>)
 800cbb2:	681a      	ldr	r2, [r3, #0]
 800cbb4:	687b      	ldr	r3, [r7, #4]
 800cbb6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cbb8:	1ad3      	subs	r3, r2, r3
 800cbba:	2b00      	cmp	r3, #0
 800cbbc:	db2a      	blt.n	800cc14 <tcp_timewait_input+0x84>
 800cbbe:	4b21      	ldr	r3, [pc, #132]	; (800cc44 <tcp_timewait_input+0xb4>)
 800cbc0:	681a      	ldr	r2, [r3, #0]
 800cbc2:	687b      	ldr	r3, [r7, #4]
 800cbc4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cbc6:	6879      	ldr	r1, [r7, #4]
 800cbc8:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 800cbca:	440b      	add	r3, r1
 800cbcc:	1ad3      	subs	r3, r2, r3
 800cbce:	2b00      	cmp	r3, #0
 800cbd0:	dc20      	bgt.n	800cc14 <tcp_timewait_input+0x84>
      /* If the SYN is in the window it is an error, send a reset */
      tcp_rst(ackno, seqno + tcplen, ip_current_dest_addr(),
 800cbd2:	4b1d      	ldr	r3, [pc, #116]	; (800cc48 <tcp_timewait_input+0xb8>)
 800cbd4:	6818      	ldr	r0, [r3, #0]
 800cbd6:	4b1d      	ldr	r3, [pc, #116]	; (800cc4c <tcp_timewait_input+0xbc>)
 800cbd8:	881b      	ldrh	r3, [r3, #0]
 800cbda:	461a      	mov	r2, r3
 800cbdc:	4b19      	ldr	r3, [pc, #100]	; (800cc44 <tcp_timewait_input+0xb4>)
 800cbde:	681b      	ldr	r3, [r3, #0]
 800cbe0:	18d1      	adds	r1, r2, r3
        ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800cbe2:	4b1b      	ldr	r3, [pc, #108]	; (800cc50 <tcp_timewait_input+0xc0>)
 800cbe4:	681b      	ldr	r3, [r3, #0]
      tcp_rst(ackno, seqno + tcplen, ip_current_dest_addr(),
 800cbe6:	885b      	ldrh	r3, [r3, #2]
 800cbe8:	b29b      	uxth	r3, r3
        ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800cbea:	4a19      	ldr	r2, [pc, #100]	; (800cc50 <tcp_timewait_input+0xc0>)
 800cbec:	6812      	ldr	r2, [r2, #0]
      tcp_rst(ackno, seqno + tcplen, ip_current_dest_addr(),
 800cbee:	8812      	ldrh	r2, [r2, #0]
 800cbf0:	b292      	uxth	r2, r2
 800cbf2:	9201      	str	r2, [sp, #4]
 800cbf4:	9300      	str	r3, [sp, #0]
 800cbf6:	4b17      	ldr	r3, [pc, #92]	; (800cc54 <tcp_timewait_input+0xc4>)
 800cbf8:	4a17      	ldr	r2, [pc, #92]	; (800cc58 <tcp_timewait_input+0xc8>)
 800cbfa:	f002 fe61 	bl	800f8c0 <tcp_rst>
      return;
 800cbfe:	e01c      	b.n	800cc3a <tcp_timewait_input+0xaa>
    }
  } else if (flags & TCP_FIN) {
 800cc00:	4b0f      	ldr	r3, [pc, #60]	; (800cc40 <tcp_timewait_input+0xb0>)
 800cc02:	781b      	ldrb	r3, [r3, #0]
 800cc04:	f003 0301 	and.w	r3, r3, #1
 800cc08:	2b00      	cmp	r3, #0
 800cc0a:	d003      	beq.n	800cc14 <tcp_timewait_input+0x84>
    /* - eighth, check the FIN bit: Remain in the TIME-WAIT state.
         Restart the 2 MSL time-wait timeout.*/
    pcb->tmr = tcp_ticks;
 800cc0c:	4b13      	ldr	r3, [pc, #76]	; (800cc5c <tcp_timewait_input+0xcc>)
 800cc0e:	681a      	ldr	r2, [r3, #0]
 800cc10:	687b      	ldr	r3, [r7, #4]
 800cc12:	621a      	str	r2, [r3, #32]
  }

  if ((tcplen > 0)) {
 800cc14:	4b0d      	ldr	r3, [pc, #52]	; (800cc4c <tcp_timewait_input+0xbc>)
 800cc16:	881b      	ldrh	r3, [r3, #0]
 800cc18:	2b00      	cmp	r3, #0
 800cc1a:	d00d      	beq.n	800cc38 <tcp_timewait_input+0xa8>
    /* Acknowledge data, FIN or out-of-window SYN */
    pcb->flags |= TF_ACK_NOW;
 800cc1c:	687b      	ldr	r3, [r7, #4]
 800cc1e:	7e9b      	ldrb	r3, [r3, #26]
 800cc20:	f043 0302 	orr.w	r3, r3, #2
 800cc24:	b2da      	uxtb	r2, r3
 800cc26:	687b      	ldr	r3, [r7, #4]
 800cc28:	769a      	strb	r2, [r3, #26]
    tcp_output(pcb);
 800cc2a:	6878      	ldr	r0, [r7, #4]
 800cc2c:	f002 fbbe 	bl	800f3ac <tcp_output>
  }
  return;
 800cc30:	bf00      	nop
 800cc32:	e001      	b.n	800cc38 <tcp_timewait_input+0xa8>
    return;
 800cc34:	bf00      	nop
 800cc36:	e000      	b.n	800cc3a <tcp_timewait_input+0xaa>
  return;
 800cc38:	bf00      	nop
}
 800cc3a:	3708      	adds	r7, #8
 800cc3c:	46bd      	mov	sp, r7
 800cc3e:	bd80      	pop	{r7, pc}
 800cc40:	24008638 	.word	0x24008638
 800cc44:	2400862c 	.word	0x2400862c
 800cc48:	24008630 	.word	0x24008630
 800cc4c:	24008636 	.word	0x24008636
 800cc50:	2400861c 	.word	0x2400861c
 800cc54:	240087bc 	.word	0x240087bc
 800cc58:	240087c0 	.word	0x240087c0
 800cc5c:	2400f2ec 	.word	0x2400f2ec

0800cc60 <tcp_process>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static err_t
tcp_process(struct tcp_pcb *pcb)
{
 800cc60:	b580      	push	{r7, lr}
 800cc62:	b08a      	sub	sp, #40	; 0x28
 800cc64:	af02      	add	r7, sp, #8
 800cc66:	6078      	str	r0, [r7, #4]
  struct tcp_seg *rseg;
  u8_t acceptable = 0;
 800cc68:	2300      	movs	r3, #0
 800cc6a:	76fb      	strb	r3, [r7, #27]
  err_t err;

  err = ERR_OK;
 800cc6c:	2300      	movs	r3, #0
 800cc6e:	76bb      	strb	r3, [r7, #26]

  /* Process incoming RST segments. */
  if (flags & TCP_RST) {
 800cc70:	4ba4      	ldr	r3, [pc, #656]	; (800cf04 <tcp_process+0x2a4>)
 800cc72:	781b      	ldrb	r3, [r3, #0]
 800cc74:	f003 0304 	and.w	r3, r3, #4
 800cc78:	2b00      	cmp	r3, #0
 800cc7a:	d04e      	beq.n	800cd1a <tcp_process+0xba>
    /* First, determine if the reset is acceptable. */
    if (pcb->state == SYN_SENT) {
 800cc7c:	687b      	ldr	r3, [r7, #4]
 800cc7e:	7d1b      	ldrb	r3, [r3, #20]
 800cc80:	2b02      	cmp	r3, #2
 800cc82:	d108      	bne.n	800cc96 <tcp_process+0x36>
      /* "In the SYN-SENT state (a RST received in response to an initial SYN),
          the RST is acceptable if the ACK field acknowledges the SYN." */
      if (ackno == pcb->snd_nxt) {
 800cc84:	687b      	ldr	r3, [r7, #4]
 800cc86:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800cc88:	4b9f      	ldr	r3, [pc, #636]	; (800cf08 <tcp_process+0x2a8>)
 800cc8a:	681b      	ldr	r3, [r3, #0]
 800cc8c:	429a      	cmp	r2, r3
 800cc8e:	d123      	bne.n	800ccd8 <tcp_process+0x78>
        acceptable = 1;
 800cc90:	2301      	movs	r3, #1
 800cc92:	76fb      	strb	r3, [r7, #27]
 800cc94:	e020      	b.n	800ccd8 <tcp_process+0x78>
      }
    } else {
      /* "In all states except SYN-SENT, all reset (RST) segments are validated
          by checking their SEQ-fields." */
      if (seqno == pcb->rcv_nxt) {
 800cc96:	687b      	ldr	r3, [r7, #4]
 800cc98:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800cc9a:	4b9c      	ldr	r3, [pc, #624]	; (800cf0c <tcp_process+0x2ac>)
 800cc9c:	681b      	ldr	r3, [r3, #0]
 800cc9e:	429a      	cmp	r2, r3
 800cca0:	d102      	bne.n	800cca8 <tcp_process+0x48>
        acceptable = 1;
 800cca2:	2301      	movs	r3, #1
 800cca4:	76fb      	strb	r3, [r7, #27]
 800cca6:	e017      	b.n	800ccd8 <tcp_process+0x78>
      } else  if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 800cca8:	4b98      	ldr	r3, [pc, #608]	; (800cf0c <tcp_process+0x2ac>)
 800ccaa:	681a      	ldr	r2, [r3, #0]
 800ccac:	687b      	ldr	r3, [r7, #4]
 800ccae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ccb0:	1ad3      	subs	r3, r2, r3
 800ccb2:	2b00      	cmp	r3, #0
 800ccb4:	db10      	blt.n	800ccd8 <tcp_process+0x78>
 800ccb6:	4b95      	ldr	r3, [pc, #596]	; (800cf0c <tcp_process+0x2ac>)
 800ccb8:	681a      	ldr	r2, [r3, #0]
 800ccba:	687b      	ldr	r3, [r7, #4]
 800ccbc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ccbe:	6879      	ldr	r1, [r7, #4]
 800ccc0:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 800ccc2:	440b      	add	r3, r1
 800ccc4:	1ad3      	subs	r3, r2, r3
 800ccc6:	2b00      	cmp	r3, #0
 800ccc8:	dc06      	bgt.n	800ccd8 <tcp_process+0x78>
                                  pcb->rcv_nxt + pcb->rcv_wnd)) {
        /* If the sequence number is inside the window, we only send an ACK
           and wait for a re-send with matching sequence number.
           This violates RFC 793, but is required to protection against
           CVE-2004-0230 (RST spoofing attack). */
        tcp_ack_now(pcb);
 800ccca:	687b      	ldr	r3, [r7, #4]
 800cccc:	7e9b      	ldrb	r3, [r3, #26]
 800ccce:	f043 0302 	orr.w	r3, r3, #2
 800ccd2:	b2da      	uxtb	r2, r3
 800ccd4:	687b      	ldr	r3, [r7, #4]
 800ccd6:	769a      	strb	r2, [r3, #26]
      }
    }

    if (acceptable) {
 800ccd8:	7efb      	ldrb	r3, [r7, #27]
 800ccda:	2b00      	cmp	r3, #0
 800ccdc:	d01b      	beq.n	800cd16 <tcp_process+0xb6>
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_process: Connection RESET\n"));
      LWIP_ASSERT("tcp_input: pcb->state != CLOSED", pcb->state != CLOSED);
 800ccde:	687b      	ldr	r3, [r7, #4]
 800cce0:	7d1b      	ldrb	r3, [r3, #20]
 800cce2:	2b00      	cmp	r3, #0
 800cce4:	d106      	bne.n	800ccf4 <tcp_process+0x94>
 800cce6:	4b8a      	ldr	r3, [pc, #552]	; (800cf10 <tcp_process+0x2b0>)
 800cce8:	f240 22e7 	movw	r2, #743	; 0x2e7
 800ccec:	4989      	ldr	r1, [pc, #548]	; (800cf14 <tcp_process+0x2b4>)
 800ccee:	488a      	ldr	r0, [pc, #552]	; (800cf18 <tcp_process+0x2b8>)
 800ccf0:	f008 ff70 	bl	8015bd4 <printf_>
      recv_flags |= TF_RESET;
 800ccf4:	4b89      	ldr	r3, [pc, #548]	; (800cf1c <tcp_process+0x2bc>)
 800ccf6:	781b      	ldrb	r3, [r3, #0]
 800ccf8:	f043 0308 	orr.w	r3, r3, #8
 800ccfc:	b2da      	uxtb	r2, r3
 800ccfe:	4b87      	ldr	r3, [pc, #540]	; (800cf1c <tcp_process+0x2bc>)
 800cd00:	701a      	strb	r2, [r3, #0]
      pcb->flags &= ~TF_ACK_DELAY;
 800cd02:	687b      	ldr	r3, [r7, #4]
 800cd04:	7e9b      	ldrb	r3, [r3, #26]
 800cd06:	f023 0301 	bic.w	r3, r3, #1
 800cd0a:	b2da      	uxtb	r2, r3
 800cd0c:	687b      	ldr	r3, [r7, #4]
 800cd0e:	769a      	strb	r2, [r3, #26]
      return ERR_RST;
 800cd10:	f06f 030d 	mvn.w	r3, #13
 800cd14:	e34d      	b.n	800d3b2 <tcp_process+0x752>
    } else {
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_process: unacceptable reset seqno %"U32_F" rcv_nxt %"U32_F"\n",
       seqno, pcb->rcv_nxt));
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_process: unacceptable reset seqno %"U32_F" rcv_nxt %"U32_F"\n",
       seqno, pcb->rcv_nxt));
      return ERR_OK;
 800cd16:	2300      	movs	r3, #0
 800cd18:	e34b      	b.n	800d3b2 <tcp_process+0x752>
    }
  }

  if ((flags & TCP_SYN) && (pcb->state != SYN_SENT && pcb->state != SYN_RCVD)) {
 800cd1a:	4b7a      	ldr	r3, [pc, #488]	; (800cf04 <tcp_process+0x2a4>)
 800cd1c:	781b      	ldrb	r3, [r3, #0]
 800cd1e:	f003 0302 	and.w	r3, r3, #2
 800cd22:	2b00      	cmp	r3, #0
 800cd24:	d010      	beq.n	800cd48 <tcp_process+0xe8>
 800cd26:	687b      	ldr	r3, [r7, #4]
 800cd28:	7d1b      	ldrb	r3, [r3, #20]
 800cd2a:	2b02      	cmp	r3, #2
 800cd2c:	d00c      	beq.n	800cd48 <tcp_process+0xe8>
 800cd2e:	687b      	ldr	r3, [r7, #4]
 800cd30:	7d1b      	ldrb	r3, [r3, #20]
 800cd32:	2b03      	cmp	r3, #3
 800cd34:	d008      	beq.n	800cd48 <tcp_process+0xe8>
    /* Cope with new connection attempt after remote end crashed */
    tcp_ack_now(pcb);
 800cd36:	687b      	ldr	r3, [r7, #4]
 800cd38:	7e9b      	ldrb	r3, [r3, #26]
 800cd3a:	f043 0302 	orr.w	r3, r3, #2
 800cd3e:	b2da      	uxtb	r2, r3
 800cd40:	687b      	ldr	r3, [r7, #4]
 800cd42:	769a      	strb	r2, [r3, #26]
    return ERR_OK;
 800cd44:	2300      	movs	r3, #0
 800cd46:	e334      	b.n	800d3b2 <tcp_process+0x752>
  }

  if ((pcb->flags & TF_RXCLOSED) == 0) {
 800cd48:	687b      	ldr	r3, [r7, #4]
 800cd4a:	7e9b      	ldrb	r3, [r3, #26]
 800cd4c:	f003 0310 	and.w	r3, r3, #16
 800cd50:	2b00      	cmp	r3, #0
 800cd52:	d103      	bne.n	800cd5c <tcp_process+0xfc>
    /* Update the PCB (in)activity timer unless rx is closed (see tcp_shutdown) */
    pcb->tmr = tcp_ticks;
 800cd54:	4b72      	ldr	r3, [pc, #456]	; (800cf20 <tcp_process+0x2c0>)
 800cd56:	681a      	ldr	r2, [r3, #0]
 800cd58:	687b      	ldr	r3, [r7, #4]
 800cd5a:	621a      	str	r2, [r3, #32]
  }
  pcb->keep_cnt_sent = 0;
 800cd5c:	687b      	ldr	r3, [r7, #4]
 800cd5e:	2200      	movs	r2, #0
 800cd60:	f883 2096 	strb.w	r2, [r3, #150]	; 0x96

  tcp_parseopt(pcb);
 800cd64:	6878      	ldr	r0, [r7, #4]
 800cd66:	f001 fbdf 	bl	800e528 <tcp_parseopt>

  /* Do different things depending on the TCP state. */
  switch (pcb->state) {
 800cd6a:	687b      	ldr	r3, [r7, #4]
 800cd6c:	7d1b      	ldrb	r3, [r3, #20]
 800cd6e:	3b02      	subs	r3, #2
 800cd70:	2b07      	cmp	r3, #7
 800cd72:	f200 830e 	bhi.w	800d392 <tcp_process+0x732>
 800cd76:	a201      	add	r2, pc, #4	; (adr r2, 800cd7c <tcp_process+0x11c>)
 800cd78:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800cd7c:	0800cd9d 	.word	0x0800cd9d
 800cd80:	0800cf95 	.word	0x0800cf95
 800cd84:	0800d0ed 	.word	0x0800d0ed
 800cd88:	0800d117 	.word	0x0800d117
 800cd8c:	0800d241 	.word	0x0800d241
 800cd90:	0800d0ed 	.word	0x0800d0ed
 800cd94:	0800d2cd 	.word	0x0800d2cd
 800cd98:	0800d35d 	.word	0x0800d35d
  case SYN_SENT:
    LWIP_DEBUGF(TCP_INPUT_DEBUG, ("SYN-SENT: ackno %"U32_F" pcb->snd_nxt %"U32_F" unacked %"U32_F"\n", ackno,
     pcb->snd_nxt, lwip_ntohl(pcb->unacked->tcphdr->seqno)));
    /* received SYN ACK with expected sequence number? */
    if ((flags & TCP_ACK) && (flags & TCP_SYN)
 800cd9c:	4b59      	ldr	r3, [pc, #356]	; (800cf04 <tcp_process+0x2a4>)
 800cd9e:	781b      	ldrb	r3, [r3, #0]
 800cda0:	f003 0310 	and.w	r3, r3, #16
 800cda4:	2b00      	cmp	r3, #0
 800cda6:	f000 80cb 	beq.w	800cf40 <tcp_process+0x2e0>
 800cdaa:	4b56      	ldr	r3, [pc, #344]	; (800cf04 <tcp_process+0x2a4>)
 800cdac:	781b      	ldrb	r3, [r3, #0]
 800cdae:	f003 0302 	and.w	r3, r3, #2
 800cdb2:	2b00      	cmp	r3, #0
 800cdb4:	f000 80c4 	beq.w	800cf40 <tcp_process+0x2e0>
        && (ackno == pcb->lastack + 1)) {
 800cdb8:	687b      	ldr	r3, [r7, #4]
 800cdba:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800cdbc:	1c5a      	adds	r2, r3, #1
 800cdbe:	4b52      	ldr	r3, [pc, #328]	; (800cf08 <tcp_process+0x2a8>)
 800cdc0:	681b      	ldr	r3, [r3, #0]
 800cdc2:	429a      	cmp	r2, r3
 800cdc4:	f040 80bc 	bne.w	800cf40 <tcp_process+0x2e0>
      pcb->rcv_nxt = seqno + 1;
 800cdc8:	4b50      	ldr	r3, [pc, #320]	; (800cf0c <tcp_process+0x2ac>)
 800cdca:	681b      	ldr	r3, [r3, #0]
 800cdcc:	1c5a      	adds	r2, r3, #1
 800cdce:	687b      	ldr	r3, [r7, #4]
 800cdd0:	625a      	str	r2, [r3, #36]	; 0x24
      pcb->rcv_ann_right_edge = pcb->rcv_nxt;
 800cdd2:	687b      	ldr	r3, [r7, #4]
 800cdd4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800cdd6:	687b      	ldr	r3, [r7, #4]
 800cdd8:	62da      	str	r2, [r3, #44]	; 0x2c
      pcb->lastack = ackno;
 800cdda:	4b4b      	ldr	r3, [pc, #300]	; (800cf08 <tcp_process+0x2a8>)
 800cddc:	681a      	ldr	r2, [r3, #0]
 800cdde:	687b      	ldr	r3, [r7, #4]
 800cde0:	645a      	str	r2, [r3, #68]	; 0x44
      pcb->snd_wnd = tcphdr->wnd;
 800cde2:	4b50      	ldr	r3, [pc, #320]	; (800cf24 <tcp_process+0x2c4>)
 800cde4:	681b      	ldr	r3, [r3, #0]
 800cde6:	89db      	ldrh	r3, [r3, #14]
 800cde8:	b29a      	uxth	r2, r3
 800cdea:	687b      	ldr	r3, [r7, #4]
 800cdec:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
      pcb->snd_wnd_max = pcb->snd_wnd;
 800cdf0:	687b      	ldr	r3, [r7, #4]
 800cdf2:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 800cdf6:	687b      	ldr	r3, [r7, #4]
 800cdf8:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
      pcb->snd_wl1 = seqno - 1; /* initialise to seqno - 1 to force window update */
 800cdfc:	4b43      	ldr	r3, [pc, #268]	; (800cf0c <tcp_process+0x2ac>)
 800cdfe:	681b      	ldr	r3, [r3, #0]
 800ce00:	1e5a      	subs	r2, r3, #1
 800ce02:	687b      	ldr	r3, [r7, #4]
 800ce04:	651a      	str	r2, [r3, #80]	; 0x50
      pcb->state = ESTABLISHED;
 800ce06:	687b      	ldr	r3, [r7, #4]
 800ce08:	2204      	movs	r2, #4
 800ce0a:	751a      	strb	r2, [r3, #20]

#if TCP_CALCULATE_EFF_SEND_MSS
      pcb->mss = tcp_eff_send_mss(pcb->mss, &pcb->local_ip, &pcb->remote_ip);
 800ce0c:	687b      	ldr	r3, [r7, #4]
 800ce0e:	8e5a      	ldrh	r2, [r3, #50]	; 0x32
 800ce10:	687b      	ldr	r3, [r7, #4]
 800ce12:	3304      	adds	r3, #4
 800ce14:	4619      	mov	r1, r3
 800ce16:	4610      	mov	r0, r2
 800ce18:	f7ff f95c 	bl	800c0d4 <tcp_eff_send_mss_impl>
 800ce1c:	4603      	mov	r3, r0
 800ce1e:	461a      	mov	r2, r3
 800ce20:	687b      	ldr	r3, [r7, #4]
 800ce22:	865a      	strh	r2, [r3, #50]	; 0x32
#endif /* TCP_CALCULATE_EFF_SEND_MSS */

      pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 800ce24:	687b      	ldr	r3, [r7, #4]
 800ce26:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800ce28:	005b      	lsls	r3, r3, #1
 800ce2a:	f241 121c 	movw	r2, #4380	; 0x111c
 800ce2e:	429a      	cmp	r2, r3
 800ce30:	bf38      	it	cc
 800ce32:	461a      	movcc	r2, r3
 800ce34:	687b      	ldr	r3, [r7, #4]
 800ce36:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800ce38:	009b      	lsls	r3, r3, #2
 800ce3a:	4293      	cmp	r3, r2
 800ce3c:	bf28      	it	cs
 800ce3e:	4613      	movcs	r3, r2
 800ce40:	b29a      	uxth	r2, r3
 800ce42:	687b      	ldr	r3, [r7, #4]
 800ce44:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
      LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_process (SENT): cwnd %"TCPWNDSIZE_F
                                   " ssthresh %"TCPWNDSIZE_F"\n",
                                   pcb->cwnd, pcb->ssthresh));
      LWIP_ASSERT("pcb->snd_queuelen > 0", (pcb->snd_queuelen > 0));
 800ce48:	687b      	ldr	r3, [r7, #4]
 800ce4a:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800ce4e:	2b00      	cmp	r3, #0
 800ce50:	d106      	bne.n	800ce60 <tcp_process+0x200>
 800ce52:	4b2f      	ldr	r3, [pc, #188]	; (800cf10 <tcp_process+0x2b0>)
 800ce54:	f240 321a 	movw	r2, #794	; 0x31a
 800ce58:	4933      	ldr	r1, [pc, #204]	; (800cf28 <tcp_process+0x2c8>)
 800ce5a:	482f      	ldr	r0, [pc, #188]	; (800cf18 <tcp_process+0x2b8>)
 800ce5c:	f008 feba 	bl	8015bd4 <printf_>
      --pcb->snd_queuelen;
 800ce60:	687b      	ldr	r3, [r7, #4]
 800ce62:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800ce66:	3b01      	subs	r3, #1
 800ce68:	b29a      	uxth	r2, r3
 800ce6a:	687b      	ldr	r3, [r7, #4]
 800ce6c:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
      LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_process: SYN-SENT --queuelen %"TCPWNDSIZE_F"\n", (tcpwnd_size_t)pcb->snd_queuelen));
      rseg = pcb->unacked;
 800ce70:	687b      	ldr	r3, [r7, #4]
 800ce72:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800ce74:	61fb      	str	r3, [r7, #28]
      if (rseg == NULL) {
 800ce76:	69fb      	ldr	r3, [r7, #28]
 800ce78:	2b00      	cmp	r3, #0
 800ce7a:	d111      	bne.n	800cea0 <tcp_process+0x240>
        /* might happen if tcp_output fails in tcp_rexmit_rto()
           in which case the segment is on the unsent list */
        rseg = pcb->unsent;
 800ce7c:	687b      	ldr	r3, [r7, #4]
 800ce7e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800ce80:	61fb      	str	r3, [r7, #28]
        LWIP_ASSERT("no segment to free", rseg != NULL);
 800ce82:	69fb      	ldr	r3, [r7, #28]
 800ce84:	2b00      	cmp	r3, #0
 800ce86:	d106      	bne.n	800ce96 <tcp_process+0x236>
 800ce88:	4b21      	ldr	r3, [pc, #132]	; (800cf10 <tcp_process+0x2b0>)
 800ce8a:	f240 3222 	movw	r2, #802	; 0x322
 800ce8e:	4927      	ldr	r1, [pc, #156]	; (800cf2c <tcp_process+0x2cc>)
 800ce90:	4821      	ldr	r0, [pc, #132]	; (800cf18 <tcp_process+0x2b8>)
 800ce92:	f008 fe9f 	bl	8015bd4 <printf_>
        pcb->unsent = rseg->next;
 800ce96:	69fb      	ldr	r3, [r7, #28]
 800ce98:	681a      	ldr	r2, [r3, #0]
 800ce9a:	687b      	ldr	r3, [r7, #4]
 800ce9c:	669a      	str	r2, [r3, #104]	; 0x68
 800ce9e:	e003      	b.n	800cea8 <tcp_process+0x248>
      } else {
        pcb->unacked = rseg->next;
 800cea0:	69fb      	ldr	r3, [r7, #28]
 800cea2:	681a      	ldr	r2, [r3, #0]
 800cea4:	687b      	ldr	r3, [r7, #4]
 800cea6:	66da      	str	r2, [r3, #108]	; 0x6c
      }
      tcp_seg_free(rseg);
 800cea8:	69f8      	ldr	r0, [r7, #28]
 800ceaa:	f7fe fde9 	bl	800ba80 <tcp_seg_free>

      /* If there's nothing left to acknowledge, stop the retransmit
         timer, otherwise reset it to start again */
      if (pcb->unacked == NULL) {
 800ceae:	687b      	ldr	r3, [r7, #4]
 800ceb0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800ceb2:	2b00      	cmp	r3, #0
 800ceb4:	d104      	bne.n	800cec0 <tcp_process+0x260>
        pcb->rtime = -1;
 800ceb6:	687b      	ldr	r3, [r7, #4]
 800ceb8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800cebc:	861a      	strh	r2, [r3, #48]	; 0x30
 800cebe:	e006      	b.n	800cece <tcp_process+0x26e>
      } else {
        pcb->rtime = 0;
 800cec0:	687b      	ldr	r3, [r7, #4]
 800cec2:	2200      	movs	r2, #0
 800cec4:	861a      	strh	r2, [r3, #48]	; 0x30
        pcb->nrtx = 0;
 800cec6:	687b      	ldr	r3, [r7, #4]
 800cec8:	2200      	movs	r2, #0
 800ceca:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      }

      /* Call the user specified function to call when successfully
       * connected. */
      TCP_EVENT_CONNECTED(pcb, ERR_OK, err);
 800cece:	687b      	ldr	r3, [r7, #4]
 800ced0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800ced4:	2b00      	cmp	r3, #0
 800ced6:	d00a      	beq.n	800ceee <tcp_process+0x28e>
 800ced8:	687b      	ldr	r3, [r7, #4]
 800ceda:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800cede:	687a      	ldr	r2, [r7, #4]
 800cee0:	6910      	ldr	r0, [r2, #16]
 800cee2:	2200      	movs	r2, #0
 800cee4:	6879      	ldr	r1, [r7, #4]
 800cee6:	4798      	blx	r3
 800cee8:	4603      	mov	r3, r0
 800ceea:	76bb      	strb	r3, [r7, #26]
 800ceec:	e001      	b.n	800cef2 <tcp_process+0x292>
 800ceee:	2300      	movs	r3, #0
 800cef0:	76bb      	strb	r3, [r7, #26]
      if (err == ERR_ABRT) {
 800cef2:	f997 301a 	ldrsb.w	r3, [r7, #26]
 800cef6:	f113 0f0d 	cmn.w	r3, #13
 800cefa:	d119      	bne.n	800cf30 <tcp_process+0x2d0>
        return ERR_ABRT;
 800cefc:	f06f 030c 	mvn.w	r3, #12
 800cf00:	e257      	b.n	800d3b2 <tcp_process+0x752>
 800cf02:	bf00      	nop
 800cf04:	24008638 	.word	0x24008638
 800cf08:	24008630 	.word	0x24008630
 800cf0c:	2400862c 	.word	0x2400862c
 800cf10:	0801af54 	.word	0x0801af54
 800cf14:	0801b10c 	.word	0x0801b10c
 800cf18:	0801af98 	.word	0x0801af98
 800cf1c:	24008639 	.word	0x24008639
 800cf20:	2400f2ec 	.word	0x2400f2ec
 800cf24:	2400861c 	.word	0x2400861c
 800cf28:	0801b12c 	.word	0x0801b12c
 800cf2c:	0801b144 	.word	0x0801b144
      }
      tcp_ack_now(pcb);
 800cf30:	687b      	ldr	r3, [r7, #4]
 800cf32:	7e9b      	ldrb	r3, [r3, #26]
 800cf34:	f043 0302 	orr.w	r3, r3, #2
 800cf38:	b2da      	uxtb	r2, r3
 800cf3a:	687b      	ldr	r3, [r7, #4]
 800cf3c:	769a      	strb	r2, [r3, #26]
      if (pcb->nrtx < TCP_SYNMAXRTX) {
        pcb->rtime = 0;
        tcp_rexmit_rto(pcb);
      }
    }
    break;
 800cf3e:	e22a      	b.n	800d396 <tcp_process+0x736>
    else if (flags & TCP_ACK) {
 800cf40:	4b9f      	ldr	r3, [pc, #636]	; (800d1c0 <tcp_process+0x560>)
 800cf42:	781b      	ldrb	r3, [r3, #0]
 800cf44:	f003 0310 	and.w	r3, r3, #16
 800cf48:	2b00      	cmp	r3, #0
 800cf4a:	f000 8224 	beq.w	800d396 <tcp_process+0x736>
      tcp_rst(ackno, seqno + tcplen, ip_current_dest_addr(),
 800cf4e:	4b9d      	ldr	r3, [pc, #628]	; (800d1c4 <tcp_process+0x564>)
 800cf50:	6818      	ldr	r0, [r3, #0]
 800cf52:	4b9d      	ldr	r3, [pc, #628]	; (800d1c8 <tcp_process+0x568>)
 800cf54:	881b      	ldrh	r3, [r3, #0]
 800cf56:	461a      	mov	r2, r3
 800cf58:	4b9c      	ldr	r3, [pc, #624]	; (800d1cc <tcp_process+0x56c>)
 800cf5a:	681b      	ldr	r3, [r3, #0]
 800cf5c:	18d1      	adds	r1, r2, r3
        ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800cf5e:	4b9c      	ldr	r3, [pc, #624]	; (800d1d0 <tcp_process+0x570>)
 800cf60:	681b      	ldr	r3, [r3, #0]
      tcp_rst(ackno, seqno + tcplen, ip_current_dest_addr(),
 800cf62:	885b      	ldrh	r3, [r3, #2]
 800cf64:	b29b      	uxth	r3, r3
        ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800cf66:	4a9a      	ldr	r2, [pc, #616]	; (800d1d0 <tcp_process+0x570>)
 800cf68:	6812      	ldr	r2, [r2, #0]
      tcp_rst(ackno, seqno + tcplen, ip_current_dest_addr(),
 800cf6a:	8812      	ldrh	r2, [r2, #0]
 800cf6c:	b292      	uxth	r2, r2
 800cf6e:	9201      	str	r2, [sp, #4]
 800cf70:	9300      	str	r3, [sp, #0]
 800cf72:	4b98      	ldr	r3, [pc, #608]	; (800d1d4 <tcp_process+0x574>)
 800cf74:	4a98      	ldr	r2, [pc, #608]	; (800d1d8 <tcp_process+0x578>)
 800cf76:	f002 fca3 	bl	800f8c0 <tcp_rst>
      if (pcb->nrtx < TCP_SYNMAXRTX) {
 800cf7a:	687b      	ldr	r3, [r7, #4]
 800cf7c:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800cf80:	2b05      	cmp	r3, #5
 800cf82:	f200 8208 	bhi.w	800d396 <tcp_process+0x736>
        pcb->rtime = 0;
 800cf86:	687b      	ldr	r3, [r7, #4]
 800cf88:	2200      	movs	r2, #0
 800cf8a:	861a      	strh	r2, [r3, #48]	; 0x30
        tcp_rexmit_rto(pcb);
 800cf8c:	6878      	ldr	r0, [r7, #4]
 800cf8e:	f002 fd0d 	bl	800f9ac <tcp_rexmit_rto>
    break;
 800cf92:	e200      	b.n	800d396 <tcp_process+0x736>
  case SYN_RCVD:
    if (flags & TCP_ACK) {
 800cf94:	4b8a      	ldr	r3, [pc, #552]	; (800d1c0 <tcp_process+0x560>)
 800cf96:	781b      	ldrb	r3, [r3, #0]
 800cf98:	f003 0310 	and.w	r3, r3, #16
 800cf9c:	2b00      	cmp	r3, #0
 800cf9e:	f000 8091 	beq.w	800d0c4 <tcp_process+0x464>
      /* expected ACK number? */
      if (TCP_SEQ_BETWEEN(ackno, pcb->lastack+1, pcb->snd_nxt)) {
 800cfa2:	4b88      	ldr	r3, [pc, #544]	; (800d1c4 <tcp_process+0x564>)
 800cfa4:	681a      	ldr	r2, [r3, #0]
 800cfa6:	687b      	ldr	r3, [r7, #4]
 800cfa8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800cfaa:	1ad3      	subs	r3, r2, r3
 800cfac:	3b01      	subs	r3, #1
 800cfae:	2b00      	cmp	r3, #0
 800cfb0:	db71      	blt.n	800d096 <tcp_process+0x436>
 800cfb2:	4b84      	ldr	r3, [pc, #528]	; (800d1c4 <tcp_process+0x564>)
 800cfb4:	681a      	ldr	r2, [r3, #0]
 800cfb6:	687b      	ldr	r3, [r7, #4]
 800cfb8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800cfba:	1ad3      	subs	r3, r2, r3
 800cfbc:	2b00      	cmp	r3, #0
 800cfbe:	dc6a      	bgt.n	800d096 <tcp_process+0x436>
        pcb->state = ESTABLISHED;
 800cfc0:	687b      	ldr	r3, [r7, #4]
 800cfc2:	2204      	movs	r2, #4
 800cfc4:	751a      	strb	r2, [r3, #20]
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection established %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
#if LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG
#if LWIP_CALLBACK_API
        LWIP_ASSERT("pcb->listener->accept != NULL",
 800cfc6:	687b      	ldr	r3, [r7, #4]
 800cfc8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800cfca:	2b00      	cmp	r3, #0
 800cfcc:	d00b      	beq.n	800cfe6 <tcp_process+0x386>
 800cfce:	687b      	ldr	r3, [r7, #4]
 800cfd0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800cfd2:	699b      	ldr	r3, [r3, #24]
 800cfd4:	2b00      	cmp	r3, #0
 800cfd6:	d106      	bne.n	800cfe6 <tcp_process+0x386>
 800cfd8:	4b80      	ldr	r3, [pc, #512]	; (800d1dc <tcp_process+0x57c>)
 800cfda:	f240 3251 	movw	r2, #849	; 0x351
 800cfde:	4980      	ldr	r1, [pc, #512]	; (800d1e0 <tcp_process+0x580>)
 800cfe0:	4880      	ldr	r0, [pc, #512]	; (800d1e4 <tcp_process+0x584>)
 800cfe2:	f008 fdf7 	bl	8015bd4 <printf_>
          (pcb->listener == NULL) || (pcb->listener->accept != NULL));
#endif
        if (pcb->listener == NULL) {
 800cfe6:	687b      	ldr	r3, [r7, #4]
 800cfe8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800cfea:	2b00      	cmp	r3, #0
 800cfec:	d102      	bne.n	800cff4 <tcp_process+0x394>
          /* listen pcb might be closed by now */
          err = ERR_VAL;
 800cfee:	23fa      	movs	r3, #250	; 0xfa
 800cff0:	76bb      	strb	r3, [r7, #26]
 800cff2:	e011      	b.n	800d018 <tcp_process+0x3b8>
        } else
#endif /* LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG */
        {
          tcp_backlog_accepted(pcb);
          /* Call the accept function. */
          TCP_EVENT_ACCEPT(pcb->listener, pcb, pcb->callback_arg, ERR_OK, err);
 800cff4:	687b      	ldr	r3, [r7, #4]
 800cff6:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800cff8:	699b      	ldr	r3, [r3, #24]
 800cffa:	2b00      	cmp	r3, #0
 800cffc:	d00a      	beq.n	800d014 <tcp_process+0x3b4>
 800cffe:	687b      	ldr	r3, [r7, #4]
 800d000:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800d002:	699b      	ldr	r3, [r3, #24]
 800d004:	687a      	ldr	r2, [r7, #4]
 800d006:	6910      	ldr	r0, [r2, #16]
 800d008:	2200      	movs	r2, #0
 800d00a:	6879      	ldr	r1, [r7, #4]
 800d00c:	4798      	blx	r3
 800d00e:	4603      	mov	r3, r0
 800d010:	76bb      	strb	r3, [r7, #26]
 800d012:	e001      	b.n	800d018 <tcp_process+0x3b8>
 800d014:	23f0      	movs	r3, #240	; 0xf0
 800d016:	76bb      	strb	r3, [r7, #26]
        }
        if (err != ERR_OK) {
 800d018:	f997 301a 	ldrsb.w	r3, [r7, #26]
 800d01c:	2b00      	cmp	r3, #0
 800d01e:	d00a      	beq.n	800d036 <tcp_process+0x3d6>
          /* If the accept function returns with an error, we abort
           * the connection. */
          /* Already aborted? */
          if (err != ERR_ABRT) {
 800d020:	f997 301a 	ldrsb.w	r3, [r7, #26]
 800d024:	f113 0f0d 	cmn.w	r3, #13
 800d028:	d002      	beq.n	800d030 <tcp_process+0x3d0>
            tcp_abort(pcb);
 800d02a:	6878      	ldr	r0, [r7, #4]
 800d02c:	f7fd ff98 	bl	800af60 <tcp_abort>
          }
          return ERR_ABRT;
 800d030:	f06f 030c 	mvn.w	r3, #12
 800d034:	e1bd      	b.n	800d3b2 <tcp_process+0x752>
        }
        /* If there was any data contained within this ACK,
         * we'd better pass it on to the application as well. */
        tcp_receive(pcb);
 800d036:	6878      	ldr	r0, [r7, #4]
 800d038:	f000 fa42 	bl	800d4c0 <tcp_receive>

        /* Prevent ACK for SYN to generate a sent event */
        if (recv_acked != 0) {
 800d03c:	4b6a      	ldr	r3, [pc, #424]	; (800d1e8 <tcp_process+0x588>)
 800d03e:	881b      	ldrh	r3, [r3, #0]
 800d040:	2b00      	cmp	r3, #0
 800d042:	d005      	beq.n	800d050 <tcp_process+0x3f0>
          recv_acked--;
 800d044:	4b68      	ldr	r3, [pc, #416]	; (800d1e8 <tcp_process+0x588>)
 800d046:	881b      	ldrh	r3, [r3, #0]
 800d048:	3b01      	subs	r3, #1
 800d04a:	b29a      	uxth	r2, r3
 800d04c:	4b66      	ldr	r3, [pc, #408]	; (800d1e8 <tcp_process+0x588>)
 800d04e:	801a      	strh	r2, [r3, #0]
        }

        pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 800d050:	687b      	ldr	r3, [r7, #4]
 800d052:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800d054:	005b      	lsls	r3, r3, #1
 800d056:	f241 121c 	movw	r2, #4380	; 0x111c
 800d05a:	429a      	cmp	r2, r3
 800d05c:	bf38      	it	cc
 800d05e:	461a      	movcc	r2, r3
 800d060:	687b      	ldr	r3, [r7, #4]
 800d062:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800d064:	009b      	lsls	r3, r3, #2
 800d066:	4293      	cmp	r3, r2
 800d068:	bf28      	it	cs
 800d06a:	4613      	movcs	r3, r2
 800d06c:	b29a      	uxth	r2, r3
 800d06e:	687b      	ldr	r3, [r7, #4]
 800d070:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
        LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_process (SYN_RCVD): cwnd %"TCPWNDSIZE_F
                                     " ssthresh %"TCPWNDSIZE_F"\n",
                                     pcb->cwnd, pcb->ssthresh));

        if (recv_flags & TF_GOT_FIN) {
 800d074:	4b5d      	ldr	r3, [pc, #372]	; (800d1ec <tcp_process+0x58c>)
 800d076:	781b      	ldrb	r3, [r3, #0]
 800d078:	f003 0320 	and.w	r3, r3, #32
 800d07c:	2b00      	cmp	r3, #0
 800d07e:	d034      	beq.n	800d0ea <tcp_process+0x48a>
          tcp_ack_now(pcb);
 800d080:	687b      	ldr	r3, [r7, #4]
 800d082:	7e9b      	ldrb	r3, [r3, #26]
 800d084:	f043 0302 	orr.w	r3, r3, #2
 800d088:	b2da      	uxtb	r2, r3
 800d08a:	687b      	ldr	r3, [r7, #4]
 800d08c:	769a      	strb	r2, [r3, #26]
          pcb->state = CLOSE_WAIT;
 800d08e:	687b      	ldr	r3, [r7, #4]
 800d090:	2207      	movs	r2, #7
 800d092:	751a      	strb	r2, [r3, #20]
        if (recv_flags & TF_GOT_FIN) {
 800d094:	e029      	b.n	800d0ea <tcp_process+0x48a>
        }
      } else {
        /* incorrect ACK number, send RST */
        tcp_rst(ackno, seqno + tcplen, ip_current_dest_addr(),
 800d096:	4b4b      	ldr	r3, [pc, #300]	; (800d1c4 <tcp_process+0x564>)
 800d098:	6818      	ldr	r0, [r3, #0]
 800d09a:	4b4b      	ldr	r3, [pc, #300]	; (800d1c8 <tcp_process+0x568>)
 800d09c:	881b      	ldrh	r3, [r3, #0]
 800d09e:	461a      	mov	r2, r3
 800d0a0:	4b4a      	ldr	r3, [pc, #296]	; (800d1cc <tcp_process+0x56c>)
 800d0a2:	681b      	ldr	r3, [r3, #0]
 800d0a4:	18d1      	adds	r1, r2, r3
          ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800d0a6:	4b4a      	ldr	r3, [pc, #296]	; (800d1d0 <tcp_process+0x570>)
 800d0a8:	681b      	ldr	r3, [r3, #0]
        tcp_rst(ackno, seqno + tcplen, ip_current_dest_addr(),
 800d0aa:	885b      	ldrh	r3, [r3, #2]
 800d0ac:	b29b      	uxth	r3, r3
          ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800d0ae:	4a48      	ldr	r2, [pc, #288]	; (800d1d0 <tcp_process+0x570>)
 800d0b0:	6812      	ldr	r2, [r2, #0]
        tcp_rst(ackno, seqno + tcplen, ip_current_dest_addr(),
 800d0b2:	8812      	ldrh	r2, [r2, #0]
 800d0b4:	b292      	uxth	r2, r2
 800d0b6:	9201      	str	r2, [sp, #4]
 800d0b8:	9300      	str	r3, [sp, #0]
 800d0ba:	4b46      	ldr	r3, [pc, #280]	; (800d1d4 <tcp_process+0x574>)
 800d0bc:	4a46      	ldr	r2, [pc, #280]	; (800d1d8 <tcp_process+0x578>)
 800d0be:	f002 fbff 	bl	800f8c0 <tcp_rst>
      }
    } else if ((flags & TCP_SYN) && (seqno == pcb->rcv_nxt - 1)) {
      /* Looks like another copy of the SYN - retransmit our SYN-ACK */
      tcp_rexmit(pcb);
    }
    break;
 800d0c2:	e16a      	b.n	800d39a <tcp_process+0x73a>
    } else if ((flags & TCP_SYN) && (seqno == pcb->rcv_nxt - 1)) {
 800d0c4:	4b3e      	ldr	r3, [pc, #248]	; (800d1c0 <tcp_process+0x560>)
 800d0c6:	781b      	ldrb	r3, [r3, #0]
 800d0c8:	f003 0302 	and.w	r3, r3, #2
 800d0cc:	2b00      	cmp	r3, #0
 800d0ce:	f000 8164 	beq.w	800d39a <tcp_process+0x73a>
 800d0d2:	687b      	ldr	r3, [r7, #4]
 800d0d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d0d6:	1e5a      	subs	r2, r3, #1
 800d0d8:	4b3c      	ldr	r3, [pc, #240]	; (800d1cc <tcp_process+0x56c>)
 800d0da:	681b      	ldr	r3, [r3, #0]
 800d0dc:	429a      	cmp	r2, r3
 800d0de:	f040 815c 	bne.w	800d39a <tcp_process+0x73a>
      tcp_rexmit(pcb);
 800d0e2:	6878      	ldr	r0, [r7, #4]
 800d0e4:	f002 fc98 	bl	800fa18 <tcp_rexmit>
    break;
 800d0e8:	e157      	b.n	800d39a <tcp_process+0x73a>
 800d0ea:	e156      	b.n	800d39a <tcp_process+0x73a>
  case CLOSE_WAIT:
    /* FALLTHROUGH */
  case ESTABLISHED:
    tcp_receive(pcb);
 800d0ec:	6878      	ldr	r0, [r7, #4]
 800d0ee:	f000 f9e7 	bl	800d4c0 <tcp_receive>
    if (recv_flags & TF_GOT_FIN) { /* passive close */
 800d0f2:	4b3e      	ldr	r3, [pc, #248]	; (800d1ec <tcp_process+0x58c>)
 800d0f4:	781b      	ldrb	r3, [r3, #0]
 800d0f6:	f003 0320 	and.w	r3, r3, #32
 800d0fa:	2b00      	cmp	r3, #0
 800d0fc:	f000 814f 	beq.w	800d39e <tcp_process+0x73e>
      tcp_ack_now(pcb);
 800d100:	687b      	ldr	r3, [r7, #4]
 800d102:	7e9b      	ldrb	r3, [r3, #26]
 800d104:	f043 0302 	orr.w	r3, r3, #2
 800d108:	b2da      	uxtb	r2, r3
 800d10a:	687b      	ldr	r3, [r7, #4]
 800d10c:	769a      	strb	r2, [r3, #26]
      pcb->state = CLOSE_WAIT;
 800d10e:	687b      	ldr	r3, [r7, #4]
 800d110:	2207      	movs	r2, #7
 800d112:	751a      	strb	r2, [r3, #20]
    }
    break;
 800d114:	e143      	b.n	800d39e <tcp_process+0x73e>
  case FIN_WAIT_1:
    tcp_receive(pcb);
 800d116:	6878      	ldr	r0, [r7, #4]
 800d118:	f000 f9d2 	bl	800d4c0 <tcp_receive>
    if (recv_flags & TF_GOT_FIN) {
 800d11c:	4b33      	ldr	r3, [pc, #204]	; (800d1ec <tcp_process+0x58c>)
 800d11e:	781b      	ldrb	r3, [r3, #0]
 800d120:	f003 0320 	and.w	r3, r3, #32
 800d124:	2b00      	cmp	r3, #0
 800d126:	d074      	beq.n	800d212 <tcp_process+0x5b2>
      if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 800d128:	4b25      	ldr	r3, [pc, #148]	; (800d1c0 <tcp_process+0x560>)
 800d12a:	781b      	ldrb	r3, [r3, #0]
 800d12c:	f003 0310 	and.w	r3, r3, #16
 800d130:	2b00      	cmp	r3, #0
 800d132:	d063      	beq.n	800d1fc <tcp_process+0x59c>
 800d134:	687b      	ldr	r3, [r7, #4]
 800d136:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800d138:	4b22      	ldr	r3, [pc, #136]	; (800d1c4 <tcp_process+0x564>)
 800d13a:	681b      	ldr	r3, [r3, #0]
 800d13c:	429a      	cmp	r2, r3
 800d13e:	d15d      	bne.n	800d1fc <tcp_process+0x59c>
          pcb->unsent == NULL) {
 800d140:	687b      	ldr	r3, [r7, #4]
 800d142:	6e9b      	ldr	r3, [r3, #104]	; 0x68
      if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 800d144:	2b00      	cmp	r3, #0
 800d146:	d159      	bne.n	800d1fc <tcp_process+0x59c>
        LWIP_DEBUGF(TCP_DEBUG,
          ("TCP connection closed: FIN_WAIT_1 %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        tcp_ack_now(pcb);
 800d148:	687b      	ldr	r3, [r7, #4]
 800d14a:	7e9b      	ldrb	r3, [r3, #26]
 800d14c:	f043 0302 	orr.w	r3, r3, #2
 800d150:	b2da      	uxtb	r2, r3
 800d152:	687b      	ldr	r3, [r7, #4]
 800d154:	769a      	strb	r2, [r3, #26]
        tcp_pcb_purge(pcb);
 800d156:	6878      	ldr	r0, [r7, #4]
 800d158:	f7fe fee6 	bl	800bf28 <tcp_pcb_purge>
        TCP_RMV_ACTIVE(pcb);
 800d15c:	4b24      	ldr	r3, [pc, #144]	; (800d1f0 <tcp_process+0x590>)
 800d15e:	681b      	ldr	r3, [r3, #0]
 800d160:	687a      	ldr	r2, [r7, #4]
 800d162:	429a      	cmp	r2, r3
 800d164:	d105      	bne.n	800d172 <tcp_process+0x512>
 800d166:	4b22      	ldr	r3, [pc, #136]	; (800d1f0 <tcp_process+0x590>)
 800d168:	681b      	ldr	r3, [r3, #0]
 800d16a:	68db      	ldr	r3, [r3, #12]
 800d16c:	4a20      	ldr	r2, [pc, #128]	; (800d1f0 <tcp_process+0x590>)
 800d16e:	6013      	str	r3, [r2, #0]
 800d170:	e013      	b.n	800d19a <tcp_process+0x53a>
 800d172:	4b1f      	ldr	r3, [pc, #124]	; (800d1f0 <tcp_process+0x590>)
 800d174:	681b      	ldr	r3, [r3, #0]
 800d176:	617b      	str	r3, [r7, #20]
 800d178:	e00c      	b.n	800d194 <tcp_process+0x534>
 800d17a:	697b      	ldr	r3, [r7, #20]
 800d17c:	68db      	ldr	r3, [r3, #12]
 800d17e:	687a      	ldr	r2, [r7, #4]
 800d180:	429a      	cmp	r2, r3
 800d182:	d104      	bne.n	800d18e <tcp_process+0x52e>
 800d184:	687b      	ldr	r3, [r7, #4]
 800d186:	68da      	ldr	r2, [r3, #12]
 800d188:	697b      	ldr	r3, [r7, #20]
 800d18a:	60da      	str	r2, [r3, #12]
 800d18c:	e005      	b.n	800d19a <tcp_process+0x53a>
 800d18e:	697b      	ldr	r3, [r7, #20]
 800d190:	68db      	ldr	r3, [r3, #12]
 800d192:	617b      	str	r3, [r7, #20]
 800d194:	697b      	ldr	r3, [r7, #20]
 800d196:	2b00      	cmp	r3, #0
 800d198:	d1ef      	bne.n	800d17a <tcp_process+0x51a>
 800d19a:	687b      	ldr	r3, [r7, #4]
 800d19c:	2200      	movs	r2, #0
 800d19e:	60da      	str	r2, [r3, #12]
 800d1a0:	4b14      	ldr	r3, [pc, #80]	; (800d1f4 <tcp_process+0x594>)
 800d1a2:	2201      	movs	r2, #1
 800d1a4:	701a      	strb	r2, [r3, #0]
        pcb->state = TIME_WAIT;
 800d1a6:	687b      	ldr	r3, [r7, #4]
 800d1a8:	220a      	movs	r2, #10
 800d1aa:	751a      	strb	r2, [r3, #20]
        TCP_REG(&tcp_tw_pcbs, pcb);
 800d1ac:	4b12      	ldr	r3, [pc, #72]	; (800d1f8 <tcp_process+0x598>)
 800d1ae:	681a      	ldr	r2, [r3, #0]
 800d1b0:	687b      	ldr	r3, [r7, #4]
 800d1b2:	60da      	str	r2, [r3, #12]
 800d1b4:	4a10      	ldr	r2, [pc, #64]	; (800d1f8 <tcp_process+0x598>)
 800d1b6:	687b      	ldr	r3, [r7, #4]
 800d1b8:	6013      	str	r3, [r2, #0]
 800d1ba:	f002 fdd3 	bl	800fd64 <tcp_timer_needed>
      }
    } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
               pcb->unsent == NULL) {
      pcb->state = FIN_WAIT_2;
    }
    break;
 800d1be:	e0f0      	b.n	800d3a2 <tcp_process+0x742>
 800d1c0:	24008638 	.word	0x24008638
 800d1c4:	24008630 	.word	0x24008630
 800d1c8:	24008636 	.word	0x24008636
 800d1cc:	2400862c 	.word	0x2400862c
 800d1d0:	2400861c 	.word	0x2400861c
 800d1d4:	240087bc 	.word	0x240087bc
 800d1d8:	240087c0 	.word	0x240087c0
 800d1dc:	0801af54 	.word	0x0801af54
 800d1e0:	0801b158 	.word	0x0801b158
 800d1e4:	0801af98 	.word	0x0801af98
 800d1e8:	24008634 	.word	0x24008634
 800d1ec:	24008639 	.word	0x24008639
 800d1f0:	2400f2e8 	.word	0x2400f2e8
 800d1f4:	2400f2e4 	.word	0x2400f2e4
 800d1f8:	2400f2f8 	.word	0x2400f2f8
        tcp_ack_now(pcb);
 800d1fc:	687b      	ldr	r3, [r7, #4]
 800d1fe:	7e9b      	ldrb	r3, [r3, #26]
 800d200:	f043 0302 	orr.w	r3, r3, #2
 800d204:	b2da      	uxtb	r2, r3
 800d206:	687b      	ldr	r3, [r7, #4]
 800d208:	769a      	strb	r2, [r3, #26]
        pcb->state = CLOSING;
 800d20a:	687b      	ldr	r3, [r7, #4]
 800d20c:	2208      	movs	r2, #8
 800d20e:	751a      	strb	r2, [r3, #20]
    break;
 800d210:	e0c7      	b.n	800d3a2 <tcp_process+0x742>
    } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 800d212:	4b6a      	ldr	r3, [pc, #424]	; (800d3bc <tcp_process+0x75c>)
 800d214:	781b      	ldrb	r3, [r3, #0]
 800d216:	f003 0310 	and.w	r3, r3, #16
 800d21a:	2b00      	cmp	r3, #0
 800d21c:	f000 80c1 	beq.w	800d3a2 <tcp_process+0x742>
 800d220:	687b      	ldr	r3, [r7, #4]
 800d222:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800d224:	4b66      	ldr	r3, [pc, #408]	; (800d3c0 <tcp_process+0x760>)
 800d226:	681b      	ldr	r3, [r3, #0]
 800d228:	429a      	cmp	r2, r3
 800d22a:	f040 80ba 	bne.w	800d3a2 <tcp_process+0x742>
               pcb->unsent == NULL) {
 800d22e:	687b      	ldr	r3, [r7, #4]
 800d230:	6e9b      	ldr	r3, [r3, #104]	; 0x68
    } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 800d232:	2b00      	cmp	r3, #0
 800d234:	f040 80b5 	bne.w	800d3a2 <tcp_process+0x742>
      pcb->state = FIN_WAIT_2;
 800d238:	687b      	ldr	r3, [r7, #4]
 800d23a:	2206      	movs	r2, #6
 800d23c:	751a      	strb	r2, [r3, #20]
    break;
 800d23e:	e0b0      	b.n	800d3a2 <tcp_process+0x742>
  case FIN_WAIT_2:
    tcp_receive(pcb);
 800d240:	6878      	ldr	r0, [r7, #4]
 800d242:	f000 f93d 	bl	800d4c0 <tcp_receive>
    if (recv_flags & TF_GOT_FIN) {
 800d246:	4b5f      	ldr	r3, [pc, #380]	; (800d3c4 <tcp_process+0x764>)
 800d248:	781b      	ldrb	r3, [r3, #0]
 800d24a:	f003 0320 	and.w	r3, r3, #32
 800d24e:	2b00      	cmp	r3, #0
 800d250:	f000 80a9 	beq.w	800d3a6 <tcp_process+0x746>
      LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: FIN_WAIT_2 %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
      tcp_ack_now(pcb);
 800d254:	687b      	ldr	r3, [r7, #4]
 800d256:	7e9b      	ldrb	r3, [r3, #26]
 800d258:	f043 0302 	orr.w	r3, r3, #2
 800d25c:	b2da      	uxtb	r2, r3
 800d25e:	687b      	ldr	r3, [r7, #4]
 800d260:	769a      	strb	r2, [r3, #26]
      tcp_pcb_purge(pcb);
 800d262:	6878      	ldr	r0, [r7, #4]
 800d264:	f7fe fe60 	bl	800bf28 <tcp_pcb_purge>
      TCP_RMV_ACTIVE(pcb);
 800d268:	4b57      	ldr	r3, [pc, #348]	; (800d3c8 <tcp_process+0x768>)
 800d26a:	681b      	ldr	r3, [r3, #0]
 800d26c:	687a      	ldr	r2, [r7, #4]
 800d26e:	429a      	cmp	r2, r3
 800d270:	d105      	bne.n	800d27e <tcp_process+0x61e>
 800d272:	4b55      	ldr	r3, [pc, #340]	; (800d3c8 <tcp_process+0x768>)
 800d274:	681b      	ldr	r3, [r3, #0]
 800d276:	68db      	ldr	r3, [r3, #12]
 800d278:	4a53      	ldr	r2, [pc, #332]	; (800d3c8 <tcp_process+0x768>)
 800d27a:	6013      	str	r3, [r2, #0]
 800d27c:	e013      	b.n	800d2a6 <tcp_process+0x646>
 800d27e:	4b52      	ldr	r3, [pc, #328]	; (800d3c8 <tcp_process+0x768>)
 800d280:	681b      	ldr	r3, [r3, #0]
 800d282:	613b      	str	r3, [r7, #16]
 800d284:	e00c      	b.n	800d2a0 <tcp_process+0x640>
 800d286:	693b      	ldr	r3, [r7, #16]
 800d288:	68db      	ldr	r3, [r3, #12]
 800d28a:	687a      	ldr	r2, [r7, #4]
 800d28c:	429a      	cmp	r2, r3
 800d28e:	d104      	bne.n	800d29a <tcp_process+0x63a>
 800d290:	687b      	ldr	r3, [r7, #4]
 800d292:	68da      	ldr	r2, [r3, #12]
 800d294:	693b      	ldr	r3, [r7, #16]
 800d296:	60da      	str	r2, [r3, #12]
 800d298:	e005      	b.n	800d2a6 <tcp_process+0x646>
 800d29a:	693b      	ldr	r3, [r7, #16]
 800d29c:	68db      	ldr	r3, [r3, #12]
 800d29e:	613b      	str	r3, [r7, #16]
 800d2a0:	693b      	ldr	r3, [r7, #16]
 800d2a2:	2b00      	cmp	r3, #0
 800d2a4:	d1ef      	bne.n	800d286 <tcp_process+0x626>
 800d2a6:	687b      	ldr	r3, [r7, #4]
 800d2a8:	2200      	movs	r2, #0
 800d2aa:	60da      	str	r2, [r3, #12]
 800d2ac:	4b47      	ldr	r3, [pc, #284]	; (800d3cc <tcp_process+0x76c>)
 800d2ae:	2201      	movs	r2, #1
 800d2b0:	701a      	strb	r2, [r3, #0]
      pcb->state = TIME_WAIT;
 800d2b2:	687b      	ldr	r3, [r7, #4]
 800d2b4:	220a      	movs	r2, #10
 800d2b6:	751a      	strb	r2, [r3, #20]
      TCP_REG(&tcp_tw_pcbs, pcb);
 800d2b8:	4b45      	ldr	r3, [pc, #276]	; (800d3d0 <tcp_process+0x770>)
 800d2ba:	681a      	ldr	r2, [r3, #0]
 800d2bc:	687b      	ldr	r3, [r7, #4]
 800d2be:	60da      	str	r2, [r3, #12]
 800d2c0:	4a43      	ldr	r2, [pc, #268]	; (800d3d0 <tcp_process+0x770>)
 800d2c2:	687b      	ldr	r3, [r7, #4]
 800d2c4:	6013      	str	r3, [r2, #0]
 800d2c6:	f002 fd4d 	bl	800fd64 <tcp_timer_needed>
    }
    break;
 800d2ca:	e06c      	b.n	800d3a6 <tcp_process+0x746>
  case CLOSING:
    tcp_receive(pcb);
 800d2cc:	6878      	ldr	r0, [r7, #4]
 800d2ce:	f000 f8f7 	bl	800d4c0 <tcp_receive>
    if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
 800d2d2:	4b3a      	ldr	r3, [pc, #232]	; (800d3bc <tcp_process+0x75c>)
 800d2d4:	781b      	ldrb	r3, [r3, #0]
 800d2d6:	f003 0310 	and.w	r3, r3, #16
 800d2da:	2b00      	cmp	r3, #0
 800d2dc:	d065      	beq.n	800d3aa <tcp_process+0x74a>
 800d2de:	687b      	ldr	r3, [r7, #4]
 800d2e0:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800d2e2:	4b37      	ldr	r3, [pc, #220]	; (800d3c0 <tcp_process+0x760>)
 800d2e4:	681b      	ldr	r3, [r3, #0]
 800d2e6:	429a      	cmp	r2, r3
 800d2e8:	d15f      	bne.n	800d3aa <tcp_process+0x74a>
 800d2ea:	687b      	ldr	r3, [r7, #4]
 800d2ec:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800d2ee:	2b00      	cmp	r3, #0
 800d2f0:	d15b      	bne.n	800d3aa <tcp_process+0x74a>
      LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: CLOSING %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
      tcp_pcb_purge(pcb);
 800d2f2:	6878      	ldr	r0, [r7, #4]
 800d2f4:	f7fe fe18 	bl	800bf28 <tcp_pcb_purge>
      TCP_RMV_ACTIVE(pcb);
 800d2f8:	4b33      	ldr	r3, [pc, #204]	; (800d3c8 <tcp_process+0x768>)
 800d2fa:	681b      	ldr	r3, [r3, #0]
 800d2fc:	687a      	ldr	r2, [r7, #4]
 800d2fe:	429a      	cmp	r2, r3
 800d300:	d105      	bne.n	800d30e <tcp_process+0x6ae>
 800d302:	4b31      	ldr	r3, [pc, #196]	; (800d3c8 <tcp_process+0x768>)
 800d304:	681b      	ldr	r3, [r3, #0]
 800d306:	68db      	ldr	r3, [r3, #12]
 800d308:	4a2f      	ldr	r2, [pc, #188]	; (800d3c8 <tcp_process+0x768>)
 800d30a:	6013      	str	r3, [r2, #0]
 800d30c:	e013      	b.n	800d336 <tcp_process+0x6d6>
 800d30e:	4b2e      	ldr	r3, [pc, #184]	; (800d3c8 <tcp_process+0x768>)
 800d310:	681b      	ldr	r3, [r3, #0]
 800d312:	60fb      	str	r3, [r7, #12]
 800d314:	e00c      	b.n	800d330 <tcp_process+0x6d0>
 800d316:	68fb      	ldr	r3, [r7, #12]
 800d318:	68db      	ldr	r3, [r3, #12]
 800d31a:	687a      	ldr	r2, [r7, #4]
 800d31c:	429a      	cmp	r2, r3
 800d31e:	d104      	bne.n	800d32a <tcp_process+0x6ca>
 800d320:	687b      	ldr	r3, [r7, #4]
 800d322:	68da      	ldr	r2, [r3, #12]
 800d324:	68fb      	ldr	r3, [r7, #12]
 800d326:	60da      	str	r2, [r3, #12]
 800d328:	e005      	b.n	800d336 <tcp_process+0x6d6>
 800d32a:	68fb      	ldr	r3, [r7, #12]
 800d32c:	68db      	ldr	r3, [r3, #12]
 800d32e:	60fb      	str	r3, [r7, #12]
 800d330:	68fb      	ldr	r3, [r7, #12]
 800d332:	2b00      	cmp	r3, #0
 800d334:	d1ef      	bne.n	800d316 <tcp_process+0x6b6>
 800d336:	687b      	ldr	r3, [r7, #4]
 800d338:	2200      	movs	r2, #0
 800d33a:	60da      	str	r2, [r3, #12]
 800d33c:	4b23      	ldr	r3, [pc, #140]	; (800d3cc <tcp_process+0x76c>)
 800d33e:	2201      	movs	r2, #1
 800d340:	701a      	strb	r2, [r3, #0]
      pcb->state = TIME_WAIT;
 800d342:	687b      	ldr	r3, [r7, #4]
 800d344:	220a      	movs	r2, #10
 800d346:	751a      	strb	r2, [r3, #20]
      TCP_REG(&tcp_tw_pcbs, pcb);
 800d348:	4b21      	ldr	r3, [pc, #132]	; (800d3d0 <tcp_process+0x770>)
 800d34a:	681a      	ldr	r2, [r3, #0]
 800d34c:	687b      	ldr	r3, [r7, #4]
 800d34e:	60da      	str	r2, [r3, #12]
 800d350:	4a1f      	ldr	r2, [pc, #124]	; (800d3d0 <tcp_process+0x770>)
 800d352:	687b      	ldr	r3, [r7, #4]
 800d354:	6013      	str	r3, [r2, #0]
 800d356:	f002 fd05 	bl	800fd64 <tcp_timer_needed>
    }
    break;
 800d35a:	e026      	b.n	800d3aa <tcp_process+0x74a>
  case LAST_ACK:
    tcp_receive(pcb);
 800d35c:	6878      	ldr	r0, [r7, #4]
 800d35e:	f000 f8af 	bl	800d4c0 <tcp_receive>
    if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
 800d362:	4b16      	ldr	r3, [pc, #88]	; (800d3bc <tcp_process+0x75c>)
 800d364:	781b      	ldrb	r3, [r3, #0]
 800d366:	f003 0310 	and.w	r3, r3, #16
 800d36a:	2b00      	cmp	r3, #0
 800d36c:	d01f      	beq.n	800d3ae <tcp_process+0x74e>
 800d36e:	687b      	ldr	r3, [r7, #4]
 800d370:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800d372:	4b13      	ldr	r3, [pc, #76]	; (800d3c0 <tcp_process+0x760>)
 800d374:	681b      	ldr	r3, [r3, #0]
 800d376:	429a      	cmp	r2, r3
 800d378:	d119      	bne.n	800d3ae <tcp_process+0x74e>
 800d37a:	687b      	ldr	r3, [r7, #4]
 800d37c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800d37e:	2b00      	cmp	r3, #0
 800d380:	d115      	bne.n	800d3ae <tcp_process+0x74e>
      LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: LAST_ACK %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
      /* bugfix #21699: don't set pcb->state to CLOSED here or we risk leaking segments */
      recv_flags |= TF_CLOSED;
 800d382:	4b10      	ldr	r3, [pc, #64]	; (800d3c4 <tcp_process+0x764>)
 800d384:	781b      	ldrb	r3, [r3, #0]
 800d386:	f043 0310 	orr.w	r3, r3, #16
 800d38a:	b2da      	uxtb	r2, r3
 800d38c:	4b0d      	ldr	r3, [pc, #52]	; (800d3c4 <tcp_process+0x764>)
 800d38e:	701a      	strb	r2, [r3, #0]
    }
    break;
 800d390:	e00d      	b.n	800d3ae <tcp_process+0x74e>
  default:
    break;
 800d392:	bf00      	nop
 800d394:	e00c      	b.n	800d3b0 <tcp_process+0x750>
    break;
 800d396:	bf00      	nop
 800d398:	e00a      	b.n	800d3b0 <tcp_process+0x750>
    break;
 800d39a:	bf00      	nop
 800d39c:	e008      	b.n	800d3b0 <tcp_process+0x750>
    break;
 800d39e:	bf00      	nop
 800d3a0:	e006      	b.n	800d3b0 <tcp_process+0x750>
    break;
 800d3a2:	bf00      	nop
 800d3a4:	e004      	b.n	800d3b0 <tcp_process+0x750>
    break;
 800d3a6:	bf00      	nop
 800d3a8:	e002      	b.n	800d3b0 <tcp_process+0x750>
    break;
 800d3aa:	bf00      	nop
 800d3ac:	e000      	b.n	800d3b0 <tcp_process+0x750>
    break;
 800d3ae:	bf00      	nop
  }
  return ERR_OK;
 800d3b0:	2300      	movs	r3, #0
}
 800d3b2:	4618      	mov	r0, r3
 800d3b4:	3720      	adds	r7, #32
 800d3b6:	46bd      	mov	sp, r7
 800d3b8:	bd80      	pop	{r7, pc}
 800d3ba:	bf00      	nop
 800d3bc:	24008638 	.word	0x24008638
 800d3c0:	24008630 	.word	0x24008630
 800d3c4:	24008639 	.word	0x24008639
 800d3c8:	2400f2e8 	.word	0x2400f2e8
 800d3cc:	2400f2e4 	.word	0x2400f2e4
 800d3d0:	2400f2f8 	.word	0x2400f2f8

0800d3d4 <tcp_oos_insert_segment>:
 *
 * Called from tcp_receive()
 */
static void
tcp_oos_insert_segment(struct tcp_seg *cseg, struct tcp_seg *next)
{
 800d3d4:	b590      	push	{r4, r7, lr}
 800d3d6:	b085      	sub	sp, #20
 800d3d8:	af00      	add	r7, sp, #0
 800d3da:	6078      	str	r0, [r7, #4]
 800d3dc:	6039      	str	r1, [r7, #0]
  struct tcp_seg *old_seg;

  if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
 800d3de:	687b      	ldr	r3, [r7, #4]
 800d3e0:	68db      	ldr	r3, [r3, #12]
 800d3e2:	899b      	ldrh	r3, [r3, #12]
 800d3e4:	b29b      	uxth	r3, r3
 800d3e6:	4618      	mov	r0, r3
 800d3e8:	f7fb fe36 	bl	8009058 <lwip_htons>
 800d3ec:	4603      	mov	r3, r0
 800d3ee:	f003 0301 	and.w	r3, r3, #1
 800d3f2:	2b00      	cmp	r3, #0
 800d3f4:	d027      	beq.n	800d446 <tcp_oos_insert_segment+0x72>
    /* received segment overlaps all following segments */
    tcp_segs_free(next);
 800d3f6:	6838      	ldr	r0, [r7, #0]
 800d3f8:	f7fe fb2e 	bl	800ba58 <tcp_segs_free>
    next = NULL;
 800d3fc:	2300      	movs	r3, #0
 800d3fe:	603b      	str	r3, [r7, #0]
 800d400:	e055      	b.n	800d4ae <tcp_oos_insert_segment+0xda>
       oos queue may have segments with FIN flag */
    while (next &&
           TCP_SEQ_GEQ((seqno + cseg->len),
                      (next->tcphdr->seqno + next->len))) {
      /* cseg with FIN already processed */
      if (TCPH_FLAGS(next->tcphdr) & TCP_FIN) {
 800d402:	683b      	ldr	r3, [r7, #0]
 800d404:	68db      	ldr	r3, [r3, #12]
 800d406:	899b      	ldrh	r3, [r3, #12]
 800d408:	b29b      	uxth	r3, r3
 800d40a:	4618      	mov	r0, r3
 800d40c:	f7fb fe24 	bl	8009058 <lwip_htons>
 800d410:	4603      	mov	r3, r0
 800d412:	f003 0301 	and.w	r3, r3, #1
 800d416:	2b00      	cmp	r3, #0
 800d418:	d00d      	beq.n	800d436 <tcp_oos_insert_segment+0x62>
        TCPH_SET_FLAG(cseg->tcphdr, TCP_FIN);
 800d41a:	687b      	ldr	r3, [r7, #4]
 800d41c:	68db      	ldr	r3, [r3, #12]
 800d41e:	899b      	ldrh	r3, [r3, #12]
 800d420:	b29c      	uxth	r4, r3
 800d422:	2001      	movs	r0, #1
 800d424:	f7fb fe18 	bl	8009058 <lwip_htons>
 800d428:	4603      	mov	r3, r0
 800d42a:	461a      	mov	r2, r3
 800d42c:	687b      	ldr	r3, [r7, #4]
 800d42e:	68db      	ldr	r3, [r3, #12]
 800d430:	4322      	orrs	r2, r4
 800d432:	b292      	uxth	r2, r2
 800d434:	819a      	strh	r2, [r3, #12]
      }
      old_seg = next;
 800d436:	683b      	ldr	r3, [r7, #0]
 800d438:	60fb      	str	r3, [r7, #12]
      next = next->next;
 800d43a:	683b      	ldr	r3, [r7, #0]
 800d43c:	681b      	ldr	r3, [r3, #0]
 800d43e:	603b      	str	r3, [r7, #0]
      tcp_seg_free(old_seg);
 800d440:	68f8      	ldr	r0, [r7, #12]
 800d442:	f7fe fb1d 	bl	800ba80 <tcp_seg_free>
    while (next &&
 800d446:	683b      	ldr	r3, [r7, #0]
 800d448:	2b00      	cmp	r3, #0
 800d44a:	d00e      	beq.n	800d46a <tcp_oos_insert_segment+0x96>
           TCP_SEQ_GEQ((seqno + cseg->len),
 800d44c:	687b      	ldr	r3, [r7, #4]
 800d44e:	891b      	ldrh	r3, [r3, #8]
 800d450:	461a      	mov	r2, r3
 800d452:	4b1a      	ldr	r3, [pc, #104]	; (800d4bc <tcp_oos_insert_segment+0xe8>)
 800d454:	681b      	ldr	r3, [r3, #0]
 800d456:	441a      	add	r2, r3
 800d458:	683b      	ldr	r3, [r7, #0]
 800d45a:	68db      	ldr	r3, [r3, #12]
 800d45c:	685b      	ldr	r3, [r3, #4]
 800d45e:	6839      	ldr	r1, [r7, #0]
 800d460:	8909      	ldrh	r1, [r1, #8]
 800d462:	440b      	add	r3, r1
 800d464:	1ad3      	subs	r3, r2, r3
    while (next &&
 800d466:	2b00      	cmp	r3, #0
 800d468:	dacb      	bge.n	800d402 <tcp_oos_insert_segment+0x2e>
    }
    if (next &&
 800d46a:	683b      	ldr	r3, [r7, #0]
 800d46c:	2b00      	cmp	r3, #0
 800d46e:	d01e      	beq.n	800d4ae <tcp_oos_insert_segment+0xda>
        TCP_SEQ_GT(seqno + cseg->len, next->tcphdr->seqno)) {
 800d470:	687b      	ldr	r3, [r7, #4]
 800d472:	891b      	ldrh	r3, [r3, #8]
 800d474:	461a      	mov	r2, r3
 800d476:	4b11      	ldr	r3, [pc, #68]	; (800d4bc <tcp_oos_insert_segment+0xe8>)
 800d478:	681b      	ldr	r3, [r3, #0]
 800d47a:	441a      	add	r2, r3
 800d47c:	683b      	ldr	r3, [r7, #0]
 800d47e:	68db      	ldr	r3, [r3, #12]
 800d480:	685b      	ldr	r3, [r3, #4]
 800d482:	1ad3      	subs	r3, r2, r3
    if (next &&
 800d484:	2b00      	cmp	r3, #0
 800d486:	dd12      	ble.n	800d4ae <tcp_oos_insert_segment+0xda>
      /* We need to trim the incoming segment. */
      cseg->len = (u16_t)(next->tcphdr->seqno - seqno);
 800d488:	683b      	ldr	r3, [r7, #0]
 800d48a:	68db      	ldr	r3, [r3, #12]
 800d48c:	685b      	ldr	r3, [r3, #4]
 800d48e:	b29a      	uxth	r2, r3
 800d490:	4b0a      	ldr	r3, [pc, #40]	; (800d4bc <tcp_oos_insert_segment+0xe8>)
 800d492:	681b      	ldr	r3, [r3, #0]
 800d494:	b29b      	uxth	r3, r3
 800d496:	1ad3      	subs	r3, r2, r3
 800d498:	b29a      	uxth	r2, r3
 800d49a:	687b      	ldr	r3, [r7, #4]
 800d49c:	811a      	strh	r2, [r3, #8]
      pbuf_realloc(cseg->p, cseg->len);
 800d49e:	687b      	ldr	r3, [r7, #4]
 800d4a0:	685a      	ldr	r2, [r3, #4]
 800d4a2:	687b      	ldr	r3, [r7, #4]
 800d4a4:	891b      	ldrh	r3, [r3, #8]
 800d4a6:	4619      	mov	r1, r3
 800d4a8:	4610      	mov	r0, r2
 800d4aa:	f7fc fe8d 	bl	800a1c8 <pbuf_realloc>
    }
  }
  cseg->next = next;
 800d4ae:	687b      	ldr	r3, [r7, #4]
 800d4b0:	683a      	ldr	r2, [r7, #0]
 800d4b2:	601a      	str	r2, [r3, #0]
}
 800d4b4:	bf00      	nop
 800d4b6:	3714      	adds	r7, #20
 800d4b8:	46bd      	mov	sp, r7
 800d4ba:	bd90      	pop	{r4, r7, pc}
 800d4bc:	2400862c 	.word	0x2400862c

0800d4c0 <tcp_receive>:
 *
 * Called from tcp_process().
 */
static void
tcp_receive(struct tcp_pcb *pcb)
{
 800d4c0:	b5f0      	push	{r4, r5, r6, r7, lr}
 800d4c2:	b08d      	sub	sp, #52	; 0x34
 800d4c4:	af00      	add	r7, sp, #0
 800d4c6:	6078      	str	r0, [r7, #4]
#endif /* TCP_QUEUE_OOSEQ */
  s32_t off;
  s16_t m;
  u32_t right_wnd_edge;
  u16_t new_tot_len;
  int found_dupack = 0;
 800d4c8:	2300      	movs	r3, #0
 800d4ca:	61fb      	str	r3, [r7, #28]
#if TCP_OOSEQ_MAX_BYTES || TCP_OOSEQ_MAX_PBUFS
  u32_t ooseq_blen;
  u16_t ooseq_qlen;
#endif /* TCP_OOSEQ_MAX_BYTES || TCP_OOSEQ_MAX_PBUFS */

  LWIP_ASSERT("tcp_receive: wrong state", pcb->state >= ESTABLISHED);
 800d4cc:	687b      	ldr	r3, [r7, #4]
 800d4ce:	7d1b      	ldrb	r3, [r3, #20]
 800d4d0:	2b03      	cmp	r3, #3
 800d4d2:	d806      	bhi.n	800d4e2 <tcp_receive+0x22>
 800d4d4:	4ba6      	ldr	r3, [pc, #664]	; (800d770 <tcp_receive+0x2b0>)
 800d4d6:	f44f 6281 	mov.w	r2, #1032	; 0x408
 800d4da:	49a6      	ldr	r1, [pc, #664]	; (800d774 <tcp_receive+0x2b4>)
 800d4dc:	48a6      	ldr	r0, [pc, #664]	; (800d778 <tcp_receive+0x2b8>)
 800d4de:	f008 fb79 	bl	8015bd4 <printf_>

  if (flags & TCP_ACK) {
 800d4e2:	4ba6      	ldr	r3, [pc, #664]	; (800d77c <tcp_receive+0x2bc>)
 800d4e4:	781b      	ldrb	r3, [r3, #0]
 800d4e6:	f003 0310 	and.w	r3, r3, #16
 800d4ea:	2b00      	cmp	r3, #0
 800d4ec:	f000 82bf 	beq.w	800da6e <tcp_receive+0x5ae>
    right_wnd_edge = pcb->snd_wnd + pcb->snd_wl2;
 800d4f0:	687b      	ldr	r3, [r7, #4]
 800d4f2:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800d4f6:	461a      	mov	r2, r3
 800d4f8:	687b      	ldr	r3, [r7, #4]
 800d4fa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800d4fc:	4413      	add	r3, r2
 800d4fe:	617b      	str	r3, [r7, #20]

    /* Update window. */
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 800d500:	687b      	ldr	r3, [r7, #4]
 800d502:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800d504:	4b9e      	ldr	r3, [pc, #632]	; (800d780 <tcp_receive+0x2c0>)
 800d506:	681b      	ldr	r3, [r3, #0]
 800d508:	1ad3      	subs	r3, r2, r3
 800d50a:	2b00      	cmp	r3, #0
 800d50c:	db1b      	blt.n	800d546 <tcp_receive+0x86>
       (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 800d50e:	687b      	ldr	r3, [r7, #4]
 800d510:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800d512:	4b9b      	ldr	r3, [pc, #620]	; (800d780 <tcp_receive+0x2c0>)
 800d514:	681b      	ldr	r3, [r3, #0]
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 800d516:	429a      	cmp	r2, r3
 800d518:	d106      	bne.n	800d528 <tcp_receive+0x68>
       (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 800d51a:	687b      	ldr	r3, [r7, #4]
 800d51c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800d51e:	4b99      	ldr	r3, [pc, #612]	; (800d784 <tcp_receive+0x2c4>)
 800d520:	681b      	ldr	r3, [r3, #0]
 800d522:	1ad3      	subs	r3, r2, r3
 800d524:	2b00      	cmp	r3, #0
 800d526:	db0e      	blt.n	800d546 <tcp_receive+0x86>
       (pcb->snd_wl2 == ackno && (u32_t)SND_WND_SCALE(pcb, tcphdr->wnd) > pcb->snd_wnd)) {
 800d528:	687b      	ldr	r3, [r7, #4]
 800d52a:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800d52c:	4b95      	ldr	r3, [pc, #596]	; (800d784 <tcp_receive+0x2c4>)
 800d52e:	681b      	ldr	r3, [r3, #0]
       (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 800d530:	429a      	cmp	r2, r3
 800d532:	d141      	bne.n	800d5b8 <tcp_receive+0xf8>
       (pcb->snd_wl2 == ackno && (u32_t)SND_WND_SCALE(pcb, tcphdr->wnd) > pcb->snd_wnd)) {
 800d534:	4b94      	ldr	r3, [pc, #592]	; (800d788 <tcp_receive+0x2c8>)
 800d536:	681b      	ldr	r3, [r3, #0]
 800d538:	89db      	ldrh	r3, [r3, #14]
 800d53a:	b29a      	uxth	r2, r3
 800d53c:	687b      	ldr	r3, [r7, #4]
 800d53e:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800d542:	429a      	cmp	r2, r3
 800d544:	d938      	bls.n	800d5b8 <tcp_receive+0xf8>
      pcb->snd_wnd = SND_WND_SCALE(pcb, tcphdr->wnd);
 800d546:	4b90      	ldr	r3, [pc, #576]	; (800d788 <tcp_receive+0x2c8>)
 800d548:	681b      	ldr	r3, [r3, #0]
 800d54a:	89db      	ldrh	r3, [r3, #14]
 800d54c:	b29a      	uxth	r2, r3
 800d54e:	687b      	ldr	r3, [r7, #4]
 800d550:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
      /* keep track of the biggest window announced by the remote host to calculate
         the maximum segment size */
      if (pcb->snd_wnd_max < pcb->snd_wnd) {
 800d554:	687b      	ldr	r3, [r7, #4]
 800d556:	f8b3 205e 	ldrh.w	r2, [r3, #94]	; 0x5e
 800d55a:	687b      	ldr	r3, [r7, #4]
 800d55c:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800d560:	429a      	cmp	r2, r3
 800d562:	d205      	bcs.n	800d570 <tcp_receive+0xb0>
        pcb->snd_wnd_max = pcb->snd_wnd;
 800d564:	687b      	ldr	r3, [r7, #4]
 800d566:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 800d56a:	687b      	ldr	r3, [r7, #4]
 800d56c:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
      }
      pcb->snd_wl1 = seqno;
 800d570:	4b83      	ldr	r3, [pc, #524]	; (800d780 <tcp_receive+0x2c0>)
 800d572:	681a      	ldr	r2, [r3, #0]
 800d574:	687b      	ldr	r3, [r7, #4]
 800d576:	651a      	str	r2, [r3, #80]	; 0x50
      pcb->snd_wl2 = ackno;
 800d578:	4b82      	ldr	r3, [pc, #520]	; (800d784 <tcp_receive+0x2c4>)
 800d57a:	681a      	ldr	r2, [r3, #0]
 800d57c:	687b      	ldr	r3, [r7, #4]
 800d57e:	655a      	str	r2, [r3, #84]	; 0x54
      if (pcb->snd_wnd == 0) {
 800d580:	687b      	ldr	r3, [r7, #4]
 800d582:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800d586:	2b00      	cmp	r3, #0
 800d588:	d10d      	bne.n	800d5a6 <tcp_receive+0xe6>
        if (pcb->persist_backoff == 0) {
 800d58a:	687b      	ldr	r3, [r7, #4]
 800d58c:	f893 3095 	ldrb.w	r3, [r3, #149]	; 0x95
 800d590:	2b00      	cmp	r3, #0
 800d592:	d111      	bne.n	800d5b8 <tcp_receive+0xf8>
          /* start persist timer */
          pcb->persist_cnt = 0;
 800d594:	687b      	ldr	r3, [r7, #4]
 800d596:	2200      	movs	r2, #0
 800d598:	f883 2094 	strb.w	r2, [r3, #148]	; 0x94
          pcb->persist_backoff = 1;
 800d59c:	687b      	ldr	r3, [r7, #4]
 800d59e:	2201      	movs	r2, #1
 800d5a0:	f883 2095 	strb.w	r2, [r3, #149]	; 0x95
 800d5a4:	e008      	b.n	800d5b8 <tcp_receive+0xf8>
        }
      } else if (pcb->persist_backoff > 0) {
 800d5a6:	687b      	ldr	r3, [r7, #4]
 800d5a8:	f893 3095 	ldrb.w	r3, [r3, #149]	; 0x95
 800d5ac:	2b00      	cmp	r3, #0
 800d5ae:	d003      	beq.n	800d5b8 <tcp_receive+0xf8>
        /* stop persist timer */
          pcb->persist_backoff = 0;
 800d5b0:	687b      	ldr	r3, [r7, #4]
 800d5b2:	2200      	movs	r2, #0
 800d5b4:	f883 2095 	strb.w	r2, [r3, #149]	; 0x95
     * If it only passes 1, should reset dupack counter
     *
     */

    /* Clause 1 */
    if (TCP_SEQ_LEQ(ackno, pcb->lastack)) {
 800d5b8:	4b72      	ldr	r3, [pc, #456]	; (800d784 <tcp_receive+0x2c4>)
 800d5ba:	681a      	ldr	r2, [r3, #0]
 800d5bc:	687b      	ldr	r3, [r7, #4]
 800d5be:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800d5c0:	1ad3      	subs	r3, r2, r3
 800d5c2:	2b00      	cmp	r3, #0
 800d5c4:	dc53      	bgt.n	800d66e <tcp_receive+0x1ae>
      /* Clause 2 */
      if (tcplen == 0) {
 800d5c6:	4b71      	ldr	r3, [pc, #452]	; (800d78c <tcp_receive+0x2cc>)
 800d5c8:	881b      	ldrh	r3, [r3, #0]
 800d5ca:	2b00      	cmp	r3, #0
 800d5cc:	d146      	bne.n	800d65c <tcp_receive+0x19c>
        /* Clause 3 */
        if (pcb->snd_wl2 + pcb->snd_wnd == right_wnd_edge) {
 800d5ce:	687b      	ldr	r3, [r7, #4]
 800d5d0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800d5d2:	687a      	ldr	r2, [r7, #4]
 800d5d4:	f8b2 205c 	ldrh.w	r2, [r2, #92]	; 0x5c
 800d5d8:	4413      	add	r3, r2
 800d5da:	697a      	ldr	r2, [r7, #20]
 800d5dc:	429a      	cmp	r2, r3
 800d5de:	d13d      	bne.n	800d65c <tcp_receive+0x19c>
          /* Clause 4 */
          if (pcb->rtime >= 0) {
 800d5e0:	687b      	ldr	r3, [r7, #4]
 800d5e2:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 800d5e6:	2b00      	cmp	r3, #0
 800d5e8:	db38      	blt.n	800d65c <tcp_receive+0x19c>
            /* Clause 5 */
            if (pcb->lastack == ackno) {
 800d5ea:	687b      	ldr	r3, [r7, #4]
 800d5ec:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800d5ee:	4b65      	ldr	r3, [pc, #404]	; (800d784 <tcp_receive+0x2c4>)
 800d5f0:	681b      	ldr	r3, [r3, #0]
 800d5f2:	429a      	cmp	r2, r3
 800d5f4:	d132      	bne.n	800d65c <tcp_receive+0x19c>
              found_dupack = 1;
 800d5f6:	2301      	movs	r3, #1
 800d5f8:	61fb      	str	r3, [r7, #28]
              if ((u8_t)(pcb->dupacks + 1) > pcb->dupacks) {
 800d5fa:	687b      	ldr	r3, [r7, #4]
 800d5fc:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800d600:	2bff      	cmp	r3, #255	; 0xff
 800d602:	d007      	beq.n	800d614 <tcp_receive+0x154>
                ++pcb->dupacks;
 800d604:	687b      	ldr	r3, [r7, #4]
 800d606:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800d60a:	3301      	adds	r3, #1
 800d60c:	b2da      	uxtb	r2, r3
 800d60e:	687b      	ldr	r3, [r7, #4]
 800d610:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
              }
              if (pcb->dupacks > 3) {
 800d614:	687b      	ldr	r3, [r7, #4]
 800d616:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800d61a:	2b03      	cmp	r3, #3
 800d61c:	d916      	bls.n	800d64c <tcp_receive+0x18c>
                /* Inflate the congestion window, but not if it means that
                   the value overflows. */
                if ((tcpwnd_size_t)(pcb->cwnd + pcb->mss) > pcb->cwnd) {
 800d61e:	687b      	ldr	r3, [r7, #4]
 800d620:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800d624:	687b      	ldr	r3, [r7, #4]
 800d626:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800d628:	4413      	add	r3, r2
 800d62a:	b29a      	uxth	r2, r3
 800d62c:	687b      	ldr	r3, [r7, #4]
 800d62e:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 800d632:	429a      	cmp	r2, r3
 800d634:	d912      	bls.n	800d65c <tcp_receive+0x19c>
                  pcb->cwnd += pcb->mss;
 800d636:	687b      	ldr	r3, [r7, #4]
 800d638:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800d63c:	687b      	ldr	r3, [r7, #4]
 800d63e:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800d640:	4413      	add	r3, r2
 800d642:	b29a      	uxth	r2, r3
 800d644:	687b      	ldr	r3, [r7, #4]
 800d646:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 800d64a:	e007      	b.n	800d65c <tcp_receive+0x19c>
                }
              } else if (pcb->dupacks == 3) {
 800d64c:	687b      	ldr	r3, [r7, #4]
 800d64e:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800d652:	2b03      	cmp	r3, #3
 800d654:	d102      	bne.n	800d65c <tcp_receive+0x19c>
                /* Do fast retransmit */
                tcp_rexmit_fast(pcb);
 800d656:	6878      	ldr	r0, [r7, #4]
 800d658:	f002 fa2e 	bl	800fab8 <tcp_rexmit_fast>
          }
        }
      }
      /* If Clause (1) or more is true, but not a duplicate ack, reset
       * count of consecutive duplicate acks */
      if (!found_dupack) {
 800d65c:	69fb      	ldr	r3, [r7, #28]
 800d65e:	2b00      	cmp	r3, #0
 800d660:	f040 8169 	bne.w	800d936 <tcp_receive+0x476>
        pcb->dupacks = 0;
 800d664:	687b      	ldr	r3, [r7, #4]
 800d666:	2200      	movs	r2, #0
 800d668:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800d66c:	e163      	b.n	800d936 <tcp_receive+0x476>
      }
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack+1, pcb->snd_nxt)) {
 800d66e:	4b45      	ldr	r3, [pc, #276]	; (800d784 <tcp_receive+0x2c4>)
 800d670:	681a      	ldr	r2, [r3, #0]
 800d672:	687b      	ldr	r3, [r7, #4]
 800d674:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800d676:	1ad3      	subs	r3, r2, r3
 800d678:	3b01      	subs	r3, #1
 800d67a:	2b00      	cmp	r3, #0
 800d67c:	f2c0 8107 	blt.w	800d88e <tcp_receive+0x3ce>
 800d680:	4b40      	ldr	r3, [pc, #256]	; (800d784 <tcp_receive+0x2c4>)
 800d682:	681a      	ldr	r2, [r3, #0]
 800d684:	687b      	ldr	r3, [r7, #4]
 800d686:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800d688:	1ad3      	subs	r3, r2, r3
 800d68a:	2b00      	cmp	r3, #0
 800d68c:	f300 80ff 	bgt.w	800d88e <tcp_receive+0x3ce>
      /* We come here when the ACK acknowledges new data. */

      /* Reset the "IN Fast Retransmit" flag, since we are no longer
         in fast retransmit. Also reset the congestion window to the
         slow start threshold. */
      if (pcb->flags & TF_INFR) {
 800d690:	687b      	ldr	r3, [r7, #4]
 800d692:	7e9b      	ldrb	r3, [r3, #26]
 800d694:	f003 0304 	and.w	r3, r3, #4
 800d698:	2b00      	cmp	r3, #0
 800d69a:	d00c      	beq.n	800d6b6 <tcp_receive+0x1f6>
        pcb->flags &= ~TF_INFR;
 800d69c:	687b      	ldr	r3, [r7, #4]
 800d69e:	7e9b      	ldrb	r3, [r3, #26]
 800d6a0:	f023 0304 	bic.w	r3, r3, #4
 800d6a4:	b2da      	uxtb	r2, r3
 800d6a6:	687b      	ldr	r3, [r7, #4]
 800d6a8:	769a      	strb	r2, [r3, #26]
        pcb->cwnd = pcb->ssthresh;
 800d6aa:	687b      	ldr	r3, [r7, #4]
 800d6ac:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 800d6b0:	687b      	ldr	r3, [r7, #4]
 800d6b2:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
      }

      /* Reset the number of retransmissions. */
      pcb->nrtx = 0;
 800d6b6:	687b      	ldr	r3, [r7, #4]
 800d6b8:	2200      	movs	r2, #0
 800d6ba:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Reset the retransmission time-out. */
      pcb->rto = (pcb->sa >> 3) + pcb->sv;
 800d6be:	687b      	ldr	r3, [r7, #4]
 800d6c0:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 800d6c4:	10db      	asrs	r3, r3, #3
 800d6c6:	b21b      	sxth	r3, r3
 800d6c8:	b29a      	uxth	r2, r3
 800d6ca:	687b      	ldr	r3, [r7, #4]
 800d6cc:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 800d6d0:	b29b      	uxth	r3, r3
 800d6d2:	4413      	add	r3, r2
 800d6d4:	b29b      	uxth	r3, r3
 800d6d6:	b21a      	sxth	r2, r3
 800d6d8:	687b      	ldr	r3, [r7, #4]
 800d6da:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

      /* Reset the fast retransmit variables. */
      pcb->dupacks = 0;
 800d6de:	687b      	ldr	r3, [r7, #4]
 800d6e0:	2200      	movs	r2, #0
 800d6e2:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
      pcb->lastack = ackno;
 800d6e6:	4b27      	ldr	r3, [pc, #156]	; (800d784 <tcp_receive+0x2c4>)
 800d6e8:	681a      	ldr	r2, [r3, #0]
 800d6ea:	687b      	ldr	r3, [r7, #4]
 800d6ec:	645a      	str	r2, [r3, #68]	; 0x44

      /* Update the congestion control variables (cwnd and
         ssthresh). */
      if (pcb->state >= ESTABLISHED) {
 800d6ee:	687b      	ldr	r3, [r7, #4]
 800d6f0:	7d1b      	ldrb	r3, [r3, #20]
 800d6f2:	2b03      	cmp	r3, #3
 800d6f4:	f240 8094 	bls.w	800d820 <tcp_receive+0x360>
        if (pcb->cwnd < pcb->ssthresh) {
 800d6f8:	687b      	ldr	r3, [r7, #4]
 800d6fa:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800d6fe:	687b      	ldr	r3, [r7, #4]
 800d700:	f8b3 304a 	ldrh.w	r3, [r3, #74]	; 0x4a
 800d704:	429a      	cmp	r2, r3
 800d706:	d216      	bcs.n	800d736 <tcp_receive+0x276>
          if ((tcpwnd_size_t)(pcb->cwnd + pcb->mss) > pcb->cwnd) {
 800d708:	687b      	ldr	r3, [r7, #4]
 800d70a:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800d70e:	687b      	ldr	r3, [r7, #4]
 800d710:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800d712:	4413      	add	r3, r2
 800d714:	b29a      	uxth	r2, r3
 800d716:	687b      	ldr	r3, [r7, #4]
 800d718:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 800d71c:	429a      	cmp	r2, r3
 800d71e:	d97f      	bls.n	800d820 <tcp_receive+0x360>
            pcb->cwnd += pcb->mss;
 800d720:	687b      	ldr	r3, [r7, #4]
 800d722:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800d726:	687b      	ldr	r3, [r7, #4]
 800d728:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800d72a:	4413      	add	r3, r2
 800d72c:	b29a      	uxth	r2, r3
 800d72e:	687b      	ldr	r3, [r7, #4]
 800d730:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 800d734:	e074      	b.n	800d820 <tcp_receive+0x360>
          }
          LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_receive: slow start cwnd %"TCPWNDSIZE_F"\n", pcb->cwnd));
        } else {
          tcpwnd_size_t new_cwnd = (pcb->cwnd + pcb->mss * pcb->mss / pcb->cwnd);
 800d736:	687b      	ldr	r3, [r7, #4]
 800d738:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800d73c:	687b      	ldr	r3, [r7, #4]
 800d73e:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800d740:	4619      	mov	r1, r3
 800d742:	687b      	ldr	r3, [r7, #4]
 800d744:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800d746:	fb03 f301 	mul.w	r3, r3, r1
 800d74a:	6879      	ldr	r1, [r7, #4]
 800d74c:	f8b1 1048 	ldrh.w	r1, [r1, #72]	; 0x48
 800d750:	fb93 f3f1 	sdiv	r3, r3, r1
 800d754:	b29b      	uxth	r3, r3
 800d756:	4413      	add	r3, r2
 800d758:	827b      	strh	r3, [r7, #18]
          if (new_cwnd > pcb->cwnd) {
 800d75a:	687b      	ldr	r3, [r7, #4]
 800d75c:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 800d760:	8a7a      	ldrh	r2, [r7, #18]
 800d762:	429a      	cmp	r2, r3
 800d764:	d95c      	bls.n	800d820 <tcp_receive+0x360>
            pcb->cwnd = new_cwnd;
 800d766:	687b      	ldr	r3, [r7, #4]
 800d768:	8a7a      	ldrh	r2, [r7, #18]
 800d76a:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
                                    pcb->unacked != NULL?
                                    lwip_ntohl(pcb->unacked->tcphdr->seqno) + TCP_TCPLEN(pcb->unacked): 0));

      /* Remove segment from the unacknowledged list if the incoming
         ACK acknowledges them. */
      while (pcb->unacked != NULL &&
 800d76e:	e057      	b.n	800d820 <tcp_receive+0x360>
 800d770:	0801af54 	.word	0x0801af54
 800d774:	0801b178 	.word	0x0801b178
 800d778:	0801af98 	.word	0x0801af98
 800d77c:	24008638 	.word	0x24008638
 800d780:	2400862c 	.word	0x2400862c
 800d784:	24008630 	.word	0x24008630
 800d788:	2400861c 	.word	0x2400861c
 800d78c:	24008636 	.word	0x24008636
        LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: removing %"U32_F":%"U32_F" from pcb->unacked\n",
                                      lwip_ntohl(pcb->unacked->tcphdr->seqno),
                                      lwip_ntohl(pcb->unacked->tcphdr->seqno) +
                                      TCP_TCPLEN(pcb->unacked)));

        next = pcb->unacked;
 800d790:	687b      	ldr	r3, [r7, #4]
 800d792:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800d794:	62fb      	str	r3, [r7, #44]	; 0x2c
        pcb->unacked = pcb->unacked->next;
 800d796:	687b      	ldr	r3, [r7, #4]
 800d798:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800d79a:	681a      	ldr	r2, [r3, #0]
 800d79c:	687b      	ldr	r3, [r7, #4]
 800d79e:	66da      	str	r2, [r3, #108]	; 0x6c

        LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_receive: queuelen %"TCPWNDSIZE_F" ... ", (tcpwnd_size_t)pcb->snd_queuelen));
        LWIP_ASSERT("pcb->snd_queuelen >= pbuf_clen(next->p)", (pcb->snd_queuelen >= pbuf_clen(next->p)));
 800d7a0:	687b      	ldr	r3, [r7, #4]
 800d7a2:	f8b3 4062 	ldrh.w	r4, [r3, #98]	; 0x62
 800d7a6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d7a8:	685b      	ldr	r3, [r3, #4]
 800d7aa:	4618      	mov	r0, r3
 800d7ac:	f7fc ff1a 	bl	800a5e4 <pbuf_clen>
 800d7b0:	4603      	mov	r3, r0
 800d7b2:	429c      	cmp	r4, r3
 800d7b4:	d206      	bcs.n	800d7c4 <tcp_receive+0x304>
 800d7b6:	4b70      	ldr	r3, [pc, #448]	; (800d978 <tcp_receive+0x4b8>)
 800d7b8:	f240 429e 	movw	r2, #1182	; 0x49e
 800d7bc:	496f      	ldr	r1, [pc, #444]	; (800d97c <tcp_receive+0x4bc>)
 800d7be:	4870      	ldr	r0, [pc, #448]	; (800d980 <tcp_receive+0x4c0>)
 800d7c0:	f008 fa08 	bl	8015bd4 <printf_>

        pcb->snd_queuelen -= pbuf_clen(next->p);
 800d7c4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d7c6:	685b      	ldr	r3, [r3, #4]
 800d7c8:	4618      	mov	r0, r3
 800d7ca:	f7fc ff0b 	bl	800a5e4 <pbuf_clen>
 800d7ce:	4603      	mov	r3, r0
 800d7d0:	461a      	mov	r2, r3
 800d7d2:	687b      	ldr	r3, [r7, #4]
 800d7d4:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800d7d8:	1a9b      	subs	r3, r3, r2
 800d7da:	b29a      	uxth	r2, r3
 800d7dc:	687b      	ldr	r3, [r7, #4]
 800d7de:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
        recv_acked += next->len;
 800d7e2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d7e4:	891a      	ldrh	r2, [r3, #8]
 800d7e6:	4b67      	ldr	r3, [pc, #412]	; (800d984 <tcp_receive+0x4c4>)
 800d7e8:	881b      	ldrh	r3, [r3, #0]
 800d7ea:	4413      	add	r3, r2
 800d7ec:	b29a      	uxth	r2, r3
 800d7ee:	4b65      	ldr	r3, [pc, #404]	; (800d984 <tcp_receive+0x4c4>)
 800d7f0:	801a      	strh	r2, [r3, #0]
        tcp_seg_free(next);
 800d7f2:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800d7f4:	f7fe f944 	bl	800ba80 <tcp_seg_free>

        LWIP_DEBUGF(TCP_QLEN_DEBUG, ("%"TCPWNDSIZE_F" (after freeing unacked)\n", (tcpwnd_size_t)pcb->snd_queuelen));
        if (pcb->snd_queuelen != 0) {
 800d7f8:	687b      	ldr	r3, [r7, #4]
 800d7fa:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800d7fe:	2b00      	cmp	r3, #0
 800d800:	d00e      	beq.n	800d820 <tcp_receive+0x360>
          LWIP_ASSERT("tcp_receive: valid queue length", pcb->unacked != NULL ||
 800d802:	687b      	ldr	r3, [r7, #4]
 800d804:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800d806:	2b00      	cmp	r3, #0
 800d808:	d10a      	bne.n	800d820 <tcp_receive+0x360>
 800d80a:	687b      	ldr	r3, [r7, #4]
 800d80c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800d80e:	2b00      	cmp	r3, #0
 800d810:	d106      	bne.n	800d820 <tcp_receive+0x360>
 800d812:	4b59      	ldr	r3, [pc, #356]	; (800d978 <tcp_receive+0x4b8>)
 800d814:	f240 42a7 	movw	r2, #1191	; 0x4a7
 800d818:	495b      	ldr	r1, [pc, #364]	; (800d988 <tcp_receive+0x4c8>)
 800d81a:	4859      	ldr	r0, [pc, #356]	; (800d980 <tcp_receive+0x4c0>)
 800d81c:	f008 f9da 	bl	8015bd4 <printf_>
      while (pcb->unacked != NULL &&
 800d820:	687b      	ldr	r3, [r7, #4]
 800d822:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800d824:	2b00      	cmp	r3, #0
 800d826:	d022      	beq.n	800d86e <tcp_receive+0x3ae>
             TCP_SEQ_LEQ(lwip_ntohl(pcb->unacked->tcphdr->seqno) +
 800d828:	687b      	ldr	r3, [r7, #4]
 800d82a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800d82c:	68db      	ldr	r3, [r3, #12]
 800d82e:	685b      	ldr	r3, [r3, #4]
 800d830:	4618      	mov	r0, r3
 800d832:	f7fb fc1f 	bl	8009074 <lwip_htonl>
 800d836:	4604      	mov	r4, r0
 800d838:	687b      	ldr	r3, [r7, #4]
 800d83a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800d83c:	891b      	ldrh	r3, [r3, #8]
 800d83e:	461d      	mov	r5, r3
 800d840:	687b      	ldr	r3, [r7, #4]
 800d842:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800d844:	68db      	ldr	r3, [r3, #12]
 800d846:	899b      	ldrh	r3, [r3, #12]
 800d848:	b29b      	uxth	r3, r3
 800d84a:	4618      	mov	r0, r3
 800d84c:	f7fb fc04 	bl	8009058 <lwip_htons>
 800d850:	4603      	mov	r3, r0
 800d852:	f003 0303 	and.w	r3, r3, #3
 800d856:	2b00      	cmp	r3, #0
 800d858:	d001      	beq.n	800d85e <tcp_receive+0x39e>
 800d85a:	2301      	movs	r3, #1
 800d85c:	e000      	b.n	800d860 <tcp_receive+0x3a0>
 800d85e:	2300      	movs	r3, #0
 800d860:	442b      	add	r3, r5
 800d862:	18e2      	adds	r2, r4, r3
 800d864:	4b49      	ldr	r3, [pc, #292]	; (800d98c <tcp_receive+0x4cc>)
 800d866:	681b      	ldr	r3, [r3, #0]
 800d868:	1ad3      	subs	r3, r2, r3
      while (pcb->unacked != NULL &&
 800d86a:	2b00      	cmp	r3, #0
 800d86c:	dd90      	ble.n	800d790 <tcp_receive+0x2d0>
        }
      }

      /* If there's nothing left to acknowledge, stop the retransmit
         timer, otherwise reset it to start again */
      if (pcb->unacked == NULL) {
 800d86e:	687b      	ldr	r3, [r7, #4]
 800d870:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800d872:	2b00      	cmp	r3, #0
 800d874:	d104      	bne.n	800d880 <tcp_receive+0x3c0>
        pcb->rtime = -1;
 800d876:	687b      	ldr	r3, [r7, #4]
 800d878:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800d87c:	861a      	strh	r2, [r3, #48]	; 0x30
 800d87e:	e002      	b.n	800d886 <tcp_receive+0x3c6>
      } else {
        pcb->rtime = 0;
 800d880:	687b      	ldr	r3, [r7, #4]
 800d882:	2200      	movs	r2, #0
 800d884:	861a      	strh	r2, [r3, #48]	; 0x30
      }

      pcb->polltmr = 0;
 800d886:	687b      	ldr	r3, [r7, #4]
 800d888:	2200      	movs	r2, #0
 800d88a:	76da      	strb	r2, [r3, #27]
 800d88c:	e002      	b.n	800d894 <tcp_receive+0x3d4>
        nd6_reachability_hint(ip6_current_src_addr());
      }
#endif /* LWIP_IPV6 && LWIP_ND6_TCP_REACHABILITY_HINTS*/
    } else {
      /* Out of sequence ACK, didn't really ack anything */
      tcp_send_empty_ack(pcb);
 800d88e:	6878      	ldr	r0, [r7, #4]
 800d890:	f001 fd30 	bl	800f2f4 <tcp_send_empty_ack>
       on the list are acknowledged by the ACK. This may seem
       strange since an "unsent" segment shouldn't be acked. The
       rationale is that lwIP puts all outstanding segments on the
       ->unsent list after a retransmission, so these segments may
       in fact have been sent once. */
    while (pcb->unsent != NULL &&
 800d894:	e04f      	b.n	800d936 <tcp_receive+0x476>
                           TCP_TCPLEN(pcb->unsent), pcb->snd_nxt)) {
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: removing %"U32_F":%"U32_F" from pcb->unsent\n",
                                    lwip_ntohl(pcb->unsent->tcphdr->seqno), lwip_ntohl(pcb->unsent->tcphdr->seqno) +
                                    TCP_TCPLEN(pcb->unsent)));

      next = pcb->unsent;
 800d896:	687b      	ldr	r3, [r7, #4]
 800d898:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800d89a:	62fb      	str	r3, [r7, #44]	; 0x2c
      pcb->unsent = pcb->unsent->next;
 800d89c:	687b      	ldr	r3, [r7, #4]
 800d89e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800d8a0:	681a      	ldr	r2, [r3, #0]
 800d8a2:	687b      	ldr	r3, [r7, #4]
 800d8a4:	669a      	str	r2, [r3, #104]	; 0x68
#if TCP_OVERSIZE
      if (pcb->unsent == NULL) {
 800d8a6:	687b      	ldr	r3, [r7, #4]
 800d8a8:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800d8aa:	2b00      	cmp	r3, #0
 800d8ac:	d103      	bne.n	800d8b6 <tcp_receive+0x3f6>
        pcb->unsent_oversize = 0;
 800d8ae:	687b      	ldr	r3, [r7, #4]
 800d8b0:	2200      	movs	r2, #0
 800d8b2:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
      }
#endif /* TCP_OVERSIZE */
      LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_receive: queuelen %"TCPWNDSIZE_F" ... ", (tcpwnd_size_t)pcb->snd_queuelen));
      LWIP_ASSERT("pcb->snd_queuelen >= pbuf_clen(next->p)", (pcb->snd_queuelen >= pbuf_clen(next->p)));
 800d8b6:	687b      	ldr	r3, [r7, #4]
 800d8b8:	f8b3 4062 	ldrh.w	r4, [r3, #98]	; 0x62
 800d8bc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d8be:	685b      	ldr	r3, [r3, #4]
 800d8c0:	4618      	mov	r0, r3
 800d8c2:	f7fc fe8f 	bl	800a5e4 <pbuf_clen>
 800d8c6:	4603      	mov	r3, r0
 800d8c8:	429c      	cmp	r4, r3
 800d8ca:	d206      	bcs.n	800d8da <tcp_receive+0x41a>
 800d8cc:	4b2a      	ldr	r3, [pc, #168]	; (800d978 <tcp_receive+0x4b8>)
 800d8ce:	f240 42d5 	movw	r2, #1237	; 0x4d5
 800d8d2:	492a      	ldr	r1, [pc, #168]	; (800d97c <tcp_receive+0x4bc>)
 800d8d4:	482a      	ldr	r0, [pc, #168]	; (800d980 <tcp_receive+0x4c0>)
 800d8d6:	f008 f97d 	bl	8015bd4 <printf_>
      /* Prevent ACK for FIN to generate a sent event */
      pcb->snd_queuelen -= pbuf_clen(next->p);
 800d8da:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d8dc:	685b      	ldr	r3, [r3, #4]
 800d8de:	4618      	mov	r0, r3
 800d8e0:	f7fc fe80 	bl	800a5e4 <pbuf_clen>
 800d8e4:	4603      	mov	r3, r0
 800d8e6:	461a      	mov	r2, r3
 800d8e8:	687b      	ldr	r3, [r7, #4]
 800d8ea:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800d8ee:	1a9b      	subs	r3, r3, r2
 800d8f0:	b29a      	uxth	r2, r3
 800d8f2:	687b      	ldr	r3, [r7, #4]
 800d8f4:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
      recv_acked += next->len;
 800d8f8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d8fa:	891a      	ldrh	r2, [r3, #8]
 800d8fc:	4b21      	ldr	r3, [pc, #132]	; (800d984 <tcp_receive+0x4c4>)
 800d8fe:	881b      	ldrh	r3, [r3, #0]
 800d900:	4413      	add	r3, r2
 800d902:	b29a      	uxth	r2, r3
 800d904:	4b1f      	ldr	r3, [pc, #124]	; (800d984 <tcp_receive+0x4c4>)
 800d906:	801a      	strh	r2, [r3, #0]
      tcp_seg_free(next);
 800d908:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800d90a:	f7fe f8b9 	bl	800ba80 <tcp_seg_free>
      LWIP_DEBUGF(TCP_QLEN_DEBUG, ("%"TCPWNDSIZE_F" (after freeing unsent)\n", (tcpwnd_size_t)pcb->snd_queuelen));
      if (pcb->snd_queuelen != 0) {
 800d90e:	687b      	ldr	r3, [r7, #4]
 800d910:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800d914:	2b00      	cmp	r3, #0
 800d916:	d00e      	beq.n	800d936 <tcp_receive+0x476>
        LWIP_ASSERT("tcp_receive: valid queue length",
 800d918:	687b      	ldr	r3, [r7, #4]
 800d91a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800d91c:	2b00      	cmp	r3, #0
 800d91e:	d10a      	bne.n	800d936 <tcp_receive+0x476>
 800d920:	687b      	ldr	r3, [r7, #4]
 800d922:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800d924:	2b00      	cmp	r3, #0
 800d926:	d106      	bne.n	800d936 <tcp_receive+0x476>
 800d928:	4b13      	ldr	r3, [pc, #76]	; (800d978 <tcp_receive+0x4b8>)
 800d92a:	f240 42dd 	movw	r2, #1245	; 0x4dd
 800d92e:	4916      	ldr	r1, [pc, #88]	; (800d988 <tcp_receive+0x4c8>)
 800d930:	4813      	ldr	r0, [pc, #76]	; (800d980 <tcp_receive+0x4c0>)
 800d932:	f008 f94f 	bl	8015bd4 <printf_>
    while (pcb->unsent != NULL &&
 800d936:	687b      	ldr	r3, [r7, #4]
 800d938:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800d93a:	2b00      	cmp	r3, #0
 800d93c:	d036      	beq.n	800d9ac <tcp_receive+0x4ec>
           TCP_SEQ_BETWEEN(ackno, lwip_ntohl(pcb->unsent->tcphdr->seqno) +
 800d93e:	4b13      	ldr	r3, [pc, #76]	; (800d98c <tcp_receive+0x4cc>)
 800d940:	681c      	ldr	r4, [r3, #0]
 800d942:	687b      	ldr	r3, [r7, #4]
 800d944:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800d946:	68db      	ldr	r3, [r3, #12]
 800d948:	685b      	ldr	r3, [r3, #4]
 800d94a:	4618      	mov	r0, r3
 800d94c:	f7fb fb92 	bl	8009074 <lwip_htonl>
 800d950:	4605      	mov	r5, r0
 800d952:	687b      	ldr	r3, [r7, #4]
 800d954:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800d956:	891b      	ldrh	r3, [r3, #8]
 800d958:	461e      	mov	r6, r3
 800d95a:	687b      	ldr	r3, [r7, #4]
 800d95c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800d95e:	68db      	ldr	r3, [r3, #12]
 800d960:	899b      	ldrh	r3, [r3, #12]
 800d962:	b29b      	uxth	r3, r3
 800d964:	4618      	mov	r0, r3
 800d966:	f7fb fb77 	bl	8009058 <lwip_htons>
 800d96a:	4603      	mov	r3, r0
 800d96c:	f003 0303 	and.w	r3, r3, #3
 800d970:	2b00      	cmp	r3, #0
 800d972:	d00d      	beq.n	800d990 <tcp_receive+0x4d0>
 800d974:	2301      	movs	r3, #1
 800d976:	e00c      	b.n	800d992 <tcp_receive+0x4d2>
 800d978:	0801af54 	.word	0x0801af54
 800d97c:	0801b194 	.word	0x0801b194
 800d980:	0801af98 	.word	0x0801af98
 800d984:	24008634 	.word	0x24008634
 800d988:	0801b1bc 	.word	0x0801b1bc
 800d98c:	24008630 	.word	0x24008630
 800d990:	2300      	movs	r3, #0
 800d992:	4433      	add	r3, r6
 800d994:	442b      	add	r3, r5
 800d996:	1ae3      	subs	r3, r4, r3
    while (pcb->unsent != NULL &&
 800d998:	2b00      	cmp	r3, #0
 800d99a:	db07      	blt.n	800d9ac <tcp_receive+0x4ec>
           TCP_SEQ_BETWEEN(ackno, lwip_ntohl(pcb->unsent->tcphdr->seqno) +
 800d99c:	4b8d      	ldr	r3, [pc, #564]	; (800dbd4 <tcp_receive+0x714>)
 800d99e:	681a      	ldr	r2, [r3, #0]
 800d9a0:	687b      	ldr	r3, [r7, #4]
 800d9a2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800d9a4:	1ad3      	subs	r3, r2, r3
 800d9a6:	2b00      	cmp	r3, #0
 800d9a8:	f77f af75 	ble.w	800d896 <tcp_receive+0x3d6>
          pcb->unacked != NULL || pcb->unsent != NULL);
      }
    }
    pcb->snd_buf += recv_acked;
 800d9ac:	687b      	ldr	r3, [r7, #4]
 800d9ae:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 800d9b2:	4b89      	ldr	r3, [pc, #548]	; (800dbd8 <tcp_receive+0x718>)
 800d9b4:	881b      	ldrh	r3, [r3, #0]
 800d9b6:	4413      	add	r3, r2
 800d9b8:	b29a      	uxth	r2, r3
 800d9ba:	687b      	ldr	r3, [r7, #4]
 800d9bc:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
                                pcb->rttest, pcb->rtseq, ackno));

    /* RTT estimation calculations. This is done by checking if the
       incoming segment acknowledges the segment we use to take a
       round-trip time measurement. */
    if (pcb->rttest && TCP_SEQ_LT(pcb->rtseq, ackno)) {
 800d9c0:	687b      	ldr	r3, [r7, #4]
 800d9c2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d9c4:	2b00      	cmp	r3, #0
 800d9c6:	d052      	beq.n	800da6e <tcp_receive+0x5ae>
 800d9c8:	687b      	ldr	r3, [r7, #4]
 800d9ca:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800d9cc:	4b81      	ldr	r3, [pc, #516]	; (800dbd4 <tcp_receive+0x714>)
 800d9ce:	681b      	ldr	r3, [r3, #0]
 800d9d0:	1ad3      	subs	r3, r2, r3
 800d9d2:	2b00      	cmp	r3, #0
 800d9d4:	da4b      	bge.n	800da6e <tcp_receive+0x5ae>
      /* diff between this shouldn't exceed 32K since this are tcp timer ticks
         and a round-trip shouldn't be that long... */
      m = (s16_t)(tcp_ticks - pcb->rttest);
 800d9d6:	4b81      	ldr	r3, [pc, #516]	; (800dbdc <tcp_receive+0x71c>)
 800d9d8:	681b      	ldr	r3, [r3, #0]
 800d9da:	b29a      	uxth	r2, r3
 800d9dc:	687b      	ldr	r3, [r7, #4]
 800d9de:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d9e0:	b29b      	uxth	r3, r3
 800d9e2:	1ad3      	subs	r3, r2, r3
 800d9e4:	b29b      	uxth	r3, r3
 800d9e6:	847b      	strh	r3, [r7, #34]	; 0x22

      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_receive: experienced rtt %"U16_F" ticks (%"U16_F" msec).\n",
                                  m, (u16_t)(m * TCP_SLOW_INTERVAL)));

      /* This is taken directly from VJs original code in his paper */
      m = m - (pcb->sa >> 3);
 800d9e8:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 800d9ea:	687b      	ldr	r3, [r7, #4]
 800d9ec:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 800d9f0:	10db      	asrs	r3, r3, #3
 800d9f2:	b21b      	sxth	r3, r3
 800d9f4:	b29b      	uxth	r3, r3
 800d9f6:	1ad3      	subs	r3, r2, r3
 800d9f8:	b29b      	uxth	r3, r3
 800d9fa:	847b      	strh	r3, [r7, #34]	; 0x22
      pcb->sa += m;
 800d9fc:	687b      	ldr	r3, [r7, #4]
 800d9fe:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 800da02:	b29a      	uxth	r2, r3
 800da04:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800da06:	4413      	add	r3, r2
 800da08:	b29b      	uxth	r3, r3
 800da0a:	b21a      	sxth	r2, r3
 800da0c:	687b      	ldr	r3, [r7, #4]
 800da0e:	879a      	strh	r2, [r3, #60]	; 0x3c
      if (m < 0) {
 800da10:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 800da14:	2b00      	cmp	r3, #0
 800da16:	da03      	bge.n	800da20 <tcp_receive+0x560>
        m = -m;
 800da18:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800da1a:	425b      	negs	r3, r3
 800da1c:	b29b      	uxth	r3, r3
 800da1e:	847b      	strh	r3, [r7, #34]	; 0x22
      }
      m = m - (pcb->sv >> 2);
 800da20:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 800da22:	687b      	ldr	r3, [r7, #4]
 800da24:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 800da28:	109b      	asrs	r3, r3, #2
 800da2a:	b21b      	sxth	r3, r3
 800da2c:	b29b      	uxth	r3, r3
 800da2e:	1ad3      	subs	r3, r2, r3
 800da30:	b29b      	uxth	r3, r3
 800da32:	847b      	strh	r3, [r7, #34]	; 0x22
      pcb->sv += m;
 800da34:	687b      	ldr	r3, [r7, #4]
 800da36:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 800da3a:	b29a      	uxth	r2, r3
 800da3c:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800da3e:	4413      	add	r3, r2
 800da40:	b29b      	uxth	r3, r3
 800da42:	b21a      	sxth	r2, r3
 800da44:	687b      	ldr	r3, [r7, #4]
 800da46:	87da      	strh	r2, [r3, #62]	; 0x3e
      pcb->rto = (pcb->sa >> 3) + pcb->sv;
 800da48:	687b      	ldr	r3, [r7, #4]
 800da4a:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 800da4e:	10db      	asrs	r3, r3, #3
 800da50:	b21b      	sxth	r3, r3
 800da52:	b29a      	uxth	r2, r3
 800da54:	687b      	ldr	r3, [r7, #4]
 800da56:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 800da5a:	b29b      	uxth	r3, r3
 800da5c:	4413      	add	r3, r2
 800da5e:	b29b      	uxth	r3, r3
 800da60:	b21a      	sxth	r2, r3
 800da62:	687b      	ldr	r3, [r7, #4]
 800da64:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_receive: RTO %"U16_F" (%"U16_F" milliseconds)\n",
                                  pcb->rto, (u16_t)(pcb->rto * TCP_SLOW_INTERVAL)));

      pcb->rttest = 0;
 800da68:	687b      	ldr	r3, [r7, #4]
 800da6a:	2200      	movs	r2, #0
 800da6c:	635a      	str	r2, [r3, #52]	; 0x34

  /* If the incoming segment contains data, we must process it
     further unless the pcb already received a FIN.
     (RFC 793, chapter 3.9, "SEGMENT ARRIVES" in states CLOSE-WAIT, CLOSING,
     LAST-ACK and TIME-WAIT: "Ignore the segment text.") */
  if ((tcplen > 0) && (pcb->state < CLOSE_WAIT)) {
 800da6e:	4b5c      	ldr	r3, [pc, #368]	; (800dbe0 <tcp_receive+0x720>)
 800da70:	881b      	ldrh	r3, [r3, #0]
 800da72:	2b00      	cmp	r3, #0
 800da74:	f000 84f1 	beq.w	800e45a <tcp_receive+0xf9a>
 800da78:	687b      	ldr	r3, [r7, #4]
 800da7a:	7d1b      	ldrb	r3, [r3, #20]
 800da7c:	2b06      	cmp	r3, #6
 800da7e:	f200 84ec 	bhi.w	800e45a <tcp_receive+0xf9a>
       this if the sequence number of the incoming segment is less
       than rcv_nxt, and the sequence number plus the length of the
       segment is larger than rcv_nxt. */
    /*    if (TCP_SEQ_LT(seqno, pcb->rcv_nxt)) {
          if (TCP_SEQ_LT(pcb->rcv_nxt, seqno + tcplen)) {*/
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)) {
 800da82:	687b      	ldr	r3, [r7, #4]
 800da84:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800da86:	4b57      	ldr	r3, [pc, #348]	; (800dbe4 <tcp_receive+0x724>)
 800da88:	681b      	ldr	r3, [r3, #0]
 800da8a:	1ad3      	subs	r3, r2, r3
 800da8c:	3b01      	subs	r3, #1
 800da8e:	2b00      	cmp	r3, #0
 800da90:	f2c0 80b8 	blt.w	800dc04 <tcp_receive+0x744>
 800da94:	687b      	ldr	r3, [r7, #4]
 800da96:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800da98:	4b51      	ldr	r3, [pc, #324]	; (800dbe0 <tcp_receive+0x720>)
 800da9a:	881b      	ldrh	r3, [r3, #0]
 800da9c:	4619      	mov	r1, r3
 800da9e:	4b51      	ldr	r3, [pc, #324]	; (800dbe4 <tcp_receive+0x724>)
 800daa0:	681b      	ldr	r3, [r3, #0]
 800daa2:	440b      	add	r3, r1
 800daa4:	1ad3      	subs	r3, r2, r3
 800daa6:	3301      	adds	r3, #1
 800daa8:	2b00      	cmp	r3, #0
 800daaa:	f300 80ab 	bgt.w	800dc04 <tcp_receive+0x744>

         After we are done with adjusting the pbuf pointers we must
         adjust the ->data pointer in the seg and the segment
         length.*/

      struct pbuf *p = inseg.p;
 800daae:	4b4e      	ldr	r3, [pc, #312]	; (800dbe8 <tcp_receive+0x728>)
 800dab0:	685b      	ldr	r3, [r3, #4]
 800dab2:	61bb      	str	r3, [r7, #24]
      off = pcb->rcv_nxt - seqno;
 800dab4:	687b      	ldr	r3, [r7, #4]
 800dab6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800dab8:	4b4a      	ldr	r3, [pc, #296]	; (800dbe4 <tcp_receive+0x724>)
 800daba:	681b      	ldr	r3, [r3, #0]
 800dabc:	1ad3      	subs	r3, r2, r3
 800dabe:	627b      	str	r3, [r7, #36]	; 0x24
      LWIP_ASSERT("inseg.p != NULL", inseg.p);
 800dac0:	4b49      	ldr	r3, [pc, #292]	; (800dbe8 <tcp_receive+0x728>)
 800dac2:	685b      	ldr	r3, [r3, #4]
 800dac4:	2b00      	cmp	r3, #0
 800dac6:	d106      	bne.n	800dad6 <tcp_receive+0x616>
 800dac8:	4b48      	ldr	r3, [pc, #288]	; (800dbec <tcp_receive+0x72c>)
 800daca:	f240 523c 	movw	r2, #1340	; 0x53c
 800dace:	4948      	ldr	r1, [pc, #288]	; (800dbf0 <tcp_receive+0x730>)
 800dad0:	4848      	ldr	r0, [pc, #288]	; (800dbf4 <tcp_receive+0x734>)
 800dad2:	f008 f87f 	bl	8015bd4 <printf_>
      LWIP_ASSERT("insane offset!", (off < 0x7fff));
 800dad6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dad8:	f647 72fe 	movw	r2, #32766	; 0x7ffe
 800dadc:	4293      	cmp	r3, r2
 800dade:	dd06      	ble.n	800daee <tcp_receive+0x62e>
 800dae0:	4b42      	ldr	r3, [pc, #264]	; (800dbec <tcp_receive+0x72c>)
 800dae2:	f240 523d 	movw	r2, #1341	; 0x53d
 800dae6:	4944      	ldr	r1, [pc, #272]	; (800dbf8 <tcp_receive+0x738>)
 800dae8:	4842      	ldr	r0, [pc, #264]	; (800dbf4 <tcp_receive+0x734>)
 800daea:	f008 f873 	bl	8015bd4 <printf_>
      if (inseg.p->len < off) {
 800daee:	4b3e      	ldr	r3, [pc, #248]	; (800dbe8 <tcp_receive+0x728>)
 800daf0:	685b      	ldr	r3, [r3, #4]
 800daf2:	895b      	ldrh	r3, [r3, #10]
 800daf4:	461a      	mov	r2, r3
 800daf6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800daf8:	4293      	cmp	r3, r2
 800dafa:	dd3e      	ble.n	800db7a <tcp_receive+0x6ba>
        LWIP_ASSERT("pbuf too short!", (((s32_t)inseg.p->tot_len) >= off));
 800dafc:	4b3a      	ldr	r3, [pc, #232]	; (800dbe8 <tcp_receive+0x728>)
 800dafe:	685b      	ldr	r3, [r3, #4]
 800db00:	891b      	ldrh	r3, [r3, #8]
 800db02:	461a      	mov	r2, r3
 800db04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800db06:	4293      	cmp	r3, r2
 800db08:	dd06      	ble.n	800db18 <tcp_receive+0x658>
 800db0a:	4b38      	ldr	r3, [pc, #224]	; (800dbec <tcp_receive+0x72c>)
 800db0c:	f240 523f 	movw	r2, #1343	; 0x53f
 800db10:	493a      	ldr	r1, [pc, #232]	; (800dbfc <tcp_receive+0x73c>)
 800db12:	4838      	ldr	r0, [pc, #224]	; (800dbf4 <tcp_receive+0x734>)
 800db14:	f008 f85e 	bl	8015bd4 <printf_>
        new_tot_len = (u16_t)(inseg.p->tot_len - off);
 800db18:	4b33      	ldr	r3, [pc, #204]	; (800dbe8 <tcp_receive+0x728>)
 800db1a:	685b      	ldr	r3, [r3, #4]
 800db1c:	891a      	ldrh	r2, [r3, #8]
 800db1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800db20:	b29b      	uxth	r3, r3
 800db22:	1ad3      	subs	r3, r2, r3
 800db24:	823b      	strh	r3, [r7, #16]
        while (p->len < off) {
 800db26:	e00e      	b.n	800db46 <tcp_receive+0x686>
          off -= p->len;
 800db28:	69bb      	ldr	r3, [r7, #24]
 800db2a:	895b      	ldrh	r3, [r3, #10]
 800db2c:	461a      	mov	r2, r3
 800db2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800db30:	1a9b      	subs	r3, r3, r2
 800db32:	627b      	str	r3, [r7, #36]	; 0x24
          /* KJM following line changed (with addition of new_tot_len var)
             to fix bug #9076
             inseg.p->tot_len -= p->len; */
          p->tot_len = new_tot_len;
 800db34:	69bb      	ldr	r3, [r7, #24]
 800db36:	8a3a      	ldrh	r2, [r7, #16]
 800db38:	811a      	strh	r2, [r3, #8]
          p->len = 0;
 800db3a:	69bb      	ldr	r3, [r7, #24]
 800db3c:	2200      	movs	r2, #0
 800db3e:	815a      	strh	r2, [r3, #10]
          p = p->next;
 800db40:	69bb      	ldr	r3, [r7, #24]
 800db42:	681b      	ldr	r3, [r3, #0]
 800db44:	61bb      	str	r3, [r7, #24]
        while (p->len < off) {
 800db46:	69bb      	ldr	r3, [r7, #24]
 800db48:	895b      	ldrh	r3, [r3, #10]
 800db4a:	461a      	mov	r2, r3
 800db4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800db4e:	4293      	cmp	r3, r2
 800db50:	dcea      	bgt.n	800db28 <tcp_receive+0x668>
        }
        if (pbuf_header(p, (s16_t)-off)) {
 800db52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800db54:	b29b      	uxth	r3, r3
 800db56:	425b      	negs	r3, r3
 800db58:	b29b      	uxth	r3, r3
 800db5a:	b21b      	sxth	r3, r3
 800db5c:	4619      	mov	r1, r3
 800db5e:	69b8      	ldr	r0, [r7, #24]
 800db60:	f7fc fc82 	bl	800a468 <pbuf_header>
 800db64:	4603      	mov	r3, r0
 800db66:	2b00      	cmp	r3, #0
 800db68:	d01c      	beq.n	800dba4 <tcp_receive+0x6e4>
          /* Do we need to cope with this failing?  Assert for now */
          LWIP_ASSERT("pbuf_header failed", 0);
 800db6a:	4b20      	ldr	r3, [pc, #128]	; (800dbec <tcp_receive+0x72c>)
 800db6c:	f240 524c 	movw	r2, #1356	; 0x54c
 800db70:	4923      	ldr	r1, [pc, #140]	; (800dc00 <tcp_receive+0x740>)
 800db72:	4820      	ldr	r0, [pc, #128]	; (800dbf4 <tcp_receive+0x734>)
 800db74:	f008 f82e 	bl	8015bd4 <printf_>
 800db78:	e014      	b.n	800dba4 <tcp_receive+0x6e4>
        }
      } else {
        if (pbuf_header(inseg.p, (s16_t)-off)) {
 800db7a:	4b1b      	ldr	r3, [pc, #108]	; (800dbe8 <tcp_receive+0x728>)
 800db7c:	685b      	ldr	r3, [r3, #4]
 800db7e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800db80:	b292      	uxth	r2, r2
 800db82:	4252      	negs	r2, r2
 800db84:	b292      	uxth	r2, r2
 800db86:	b212      	sxth	r2, r2
 800db88:	4611      	mov	r1, r2
 800db8a:	4618      	mov	r0, r3
 800db8c:	f7fc fc6c 	bl	800a468 <pbuf_header>
 800db90:	4603      	mov	r3, r0
 800db92:	2b00      	cmp	r3, #0
 800db94:	d006      	beq.n	800dba4 <tcp_receive+0x6e4>
          /* Do we need to cope with this failing?  Assert for now */
          LWIP_ASSERT("pbuf_header failed", 0);
 800db96:	4b15      	ldr	r3, [pc, #84]	; (800dbec <tcp_receive+0x72c>)
 800db98:	f240 5251 	movw	r2, #1361	; 0x551
 800db9c:	4918      	ldr	r1, [pc, #96]	; (800dc00 <tcp_receive+0x740>)
 800db9e:	4815      	ldr	r0, [pc, #84]	; (800dbf4 <tcp_receive+0x734>)
 800dba0:	f008 f818 	bl	8015bd4 <printf_>
        }
      }
      inseg.len -= (u16_t)(pcb->rcv_nxt - seqno);
 800dba4:	4b10      	ldr	r3, [pc, #64]	; (800dbe8 <tcp_receive+0x728>)
 800dba6:	891a      	ldrh	r2, [r3, #8]
 800dba8:	4b0e      	ldr	r3, [pc, #56]	; (800dbe4 <tcp_receive+0x724>)
 800dbaa:	681b      	ldr	r3, [r3, #0]
 800dbac:	b299      	uxth	r1, r3
 800dbae:	687b      	ldr	r3, [r7, #4]
 800dbb0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800dbb2:	b29b      	uxth	r3, r3
 800dbb4:	1acb      	subs	r3, r1, r3
 800dbb6:	b29b      	uxth	r3, r3
 800dbb8:	4413      	add	r3, r2
 800dbba:	b29a      	uxth	r2, r3
 800dbbc:	4b0a      	ldr	r3, [pc, #40]	; (800dbe8 <tcp_receive+0x728>)
 800dbbe:	811a      	strh	r2, [r3, #8]
      inseg.tcphdr->seqno = seqno = pcb->rcv_nxt;
 800dbc0:	687b      	ldr	r3, [r7, #4]
 800dbc2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800dbc4:	4a07      	ldr	r2, [pc, #28]	; (800dbe4 <tcp_receive+0x724>)
 800dbc6:	6013      	str	r3, [r2, #0]
 800dbc8:	4b07      	ldr	r3, [pc, #28]	; (800dbe8 <tcp_receive+0x728>)
 800dbca:	68db      	ldr	r3, [r3, #12]
 800dbcc:	4a05      	ldr	r2, [pc, #20]	; (800dbe4 <tcp_receive+0x724>)
 800dbce:	6812      	ldr	r2, [r2, #0]
 800dbd0:	605a      	str	r2, [r3, #4]
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)) {
 800dbd2:	e025      	b.n	800dc20 <tcp_receive+0x760>
 800dbd4:	24008630 	.word	0x24008630
 800dbd8:	24008634 	.word	0x24008634
 800dbdc:	2400f2ec 	.word	0x2400f2ec
 800dbe0:	24008636 	.word	0x24008636
 800dbe4:	2400862c 	.word	0x2400862c
 800dbe8:	2400860c 	.word	0x2400860c
 800dbec:	0801af54 	.word	0x0801af54
 800dbf0:	0801b1dc 	.word	0x0801b1dc
 800dbf4:	0801af98 	.word	0x0801af98
 800dbf8:	0801b1ec 	.word	0x0801b1ec
 800dbfc:	0801b1fc 	.word	0x0801b1fc
 800dc00:	0801b20c 	.word	0x0801b20c
    }
    else {
      if (TCP_SEQ_LT(seqno, pcb->rcv_nxt)) {
 800dc04:	4b87      	ldr	r3, [pc, #540]	; (800de24 <tcp_receive+0x964>)
 800dc06:	681a      	ldr	r2, [r3, #0]
 800dc08:	687b      	ldr	r3, [r7, #4]
 800dc0a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800dc0c:	1ad3      	subs	r3, r2, r3
 800dc0e:	2b00      	cmp	r3, #0
 800dc10:	da06      	bge.n	800dc20 <tcp_receive+0x760>
        /* the whole segment is < rcv_nxt */
        /* must be a duplicate of a packet that has already been correctly handled */

        LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: duplicate seqno %"U32_F"\n", seqno));
        tcp_ack_now(pcb);
 800dc12:	687b      	ldr	r3, [r7, #4]
 800dc14:	7e9b      	ldrb	r3, [r3, #26]
 800dc16:	f043 0302 	orr.w	r3, r3, #2
 800dc1a:	b2da      	uxtb	r2, r3
 800dc1c:	687b      	ldr	r3, [r7, #4]
 800dc1e:	769a      	strb	r2, [r3, #26]
    }

    /* The sequence number must be within the window (above rcv_nxt
       and below rcv_nxt + rcv_wnd) in order to be further
       processed. */
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 800dc20:	4b80      	ldr	r3, [pc, #512]	; (800de24 <tcp_receive+0x964>)
 800dc22:	681a      	ldr	r2, [r3, #0]
 800dc24:	687b      	ldr	r3, [r7, #4]
 800dc26:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800dc28:	1ad3      	subs	r3, r2, r3
 800dc2a:	2b00      	cmp	r3, #0
 800dc2c:	f2c0 8410 	blt.w	800e450 <tcp_receive+0xf90>
 800dc30:	4b7c      	ldr	r3, [pc, #496]	; (800de24 <tcp_receive+0x964>)
 800dc32:	681a      	ldr	r2, [r3, #0]
 800dc34:	687b      	ldr	r3, [r7, #4]
 800dc36:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800dc38:	6879      	ldr	r1, [r7, #4]
 800dc3a:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 800dc3c:	440b      	add	r3, r1
 800dc3e:	1ad3      	subs	r3, r2, r3
 800dc40:	3301      	adds	r3, #1
 800dc42:	2b00      	cmp	r3, #0
 800dc44:	f300 8404 	bgt.w	800e450 <tcp_receive+0xf90>
                        pcb->rcv_nxt + pcb->rcv_wnd - 1)) {
      if (pcb->rcv_nxt == seqno) {
 800dc48:	687b      	ldr	r3, [r7, #4]
 800dc4a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800dc4c:	4b75      	ldr	r3, [pc, #468]	; (800de24 <tcp_receive+0x964>)
 800dc4e:	681b      	ldr	r3, [r3, #0]
 800dc50:	429a      	cmp	r2, r3
 800dc52:	f040 8287 	bne.w	800e164 <tcp_receive+0xca4>
        /* The incoming segment is the next in sequence. We check if
           we have to trim the end of the segment and update rcv_nxt
           and pass the data to the application. */
        tcplen = TCP_TCPLEN(&inseg);
 800dc56:	4b74      	ldr	r3, [pc, #464]	; (800de28 <tcp_receive+0x968>)
 800dc58:	891c      	ldrh	r4, [r3, #8]
 800dc5a:	4b73      	ldr	r3, [pc, #460]	; (800de28 <tcp_receive+0x968>)
 800dc5c:	68db      	ldr	r3, [r3, #12]
 800dc5e:	899b      	ldrh	r3, [r3, #12]
 800dc60:	b29b      	uxth	r3, r3
 800dc62:	4618      	mov	r0, r3
 800dc64:	f7fb f9f8 	bl	8009058 <lwip_htons>
 800dc68:	4603      	mov	r3, r0
 800dc6a:	f003 0303 	and.w	r3, r3, #3
 800dc6e:	2b00      	cmp	r3, #0
 800dc70:	d001      	beq.n	800dc76 <tcp_receive+0x7b6>
 800dc72:	2301      	movs	r3, #1
 800dc74:	e000      	b.n	800dc78 <tcp_receive+0x7b8>
 800dc76:	2300      	movs	r3, #0
 800dc78:	4423      	add	r3, r4
 800dc7a:	b29a      	uxth	r2, r3
 800dc7c:	4b6b      	ldr	r3, [pc, #428]	; (800de2c <tcp_receive+0x96c>)
 800dc7e:	801a      	strh	r2, [r3, #0]

        if (tcplen > pcb->rcv_wnd) {
 800dc80:	687b      	ldr	r3, [r7, #4]
 800dc82:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 800dc84:	4b69      	ldr	r3, [pc, #420]	; (800de2c <tcp_receive+0x96c>)
 800dc86:	881b      	ldrh	r3, [r3, #0]
 800dc88:	429a      	cmp	r2, r3
 800dc8a:	d26e      	bcs.n	800dd6a <tcp_receive+0x8aa>
          LWIP_DEBUGF(TCP_INPUT_DEBUG,
                      ("tcp_receive: other end overran receive window"
                       "seqno %"U32_F" len %"U16_F" right edge %"U32_F"\n",
                       seqno, tcplen, pcb->rcv_nxt + pcb->rcv_wnd));
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 800dc8c:	4b66      	ldr	r3, [pc, #408]	; (800de28 <tcp_receive+0x968>)
 800dc8e:	68db      	ldr	r3, [r3, #12]
 800dc90:	899b      	ldrh	r3, [r3, #12]
 800dc92:	b29b      	uxth	r3, r3
 800dc94:	4618      	mov	r0, r3
 800dc96:	f7fb f9df 	bl	8009058 <lwip_htons>
 800dc9a:	4603      	mov	r3, r0
 800dc9c:	f003 0301 	and.w	r3, r3, #1
 800dca0:	2b00      	cmp	r3, #0
 800dca2:	d01b      	beq.n	800dcdc <tcp_receive+0x81c>
            /* Must remove the FIN from the header as we're trimming
             * that byte of sequence-space from the packet */
            TCPH_FLAGS_SET(inseg.tcphdr, TCPH_FLAGS(inseg.tcphdr) & ~(unsigned int)TCP_FIN);
 800dca4:	4b60      	ldr	r3, [pc, #384]	; (800de28 <tcp_receive+0x968>)
 800dca6:	68db      	ldr	r3, [r3, #12]
 800dca8:	899b      	ldrh	r3, [r3, #12]
 800dcaa:	b29b      	uxth	r3, r3
 800dcac:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 800dcb0:	b29c      	uxth	r4, r3
 800dcb2:	4b5d      	ldr	r3, [pc, #372]	; (800de28 <tcp_receive+0x968>)
 800dcb4:	68db      	ldr	r3, [r3, #12]
 800dcb6:	899b      	ldrh	r3, [r3, #12]
 800dcb8:	b29b      	uxth	r3, r3
 800dcba:	4618      	mov	r0, r3
 800dcbc:	f7fb f9cc 	bl	8009058 <lwip_htons>
 800dcc0:	4603      	mov	r3, r0
 800dcc2:	f003 033e 	and.w	r3, r3, #62	; 0x3e
 800dcc6:	b29b      	uxth	r3, r3
 800dcc8:	4618      	mov	r0, r3
 800dcca:	f7fb f9c5 	bl	8009058 <lwip_htons>
 800dcce:	4603      	mov	r3, r0
 800dcd0:	461a      	mov	r2, r3
 800dcd2:	4b55      	ldr	r3, [pc, #340]	; (800de28 <tcp_receive+0x968>)
 800dcd4:	68db      	ldr	r3, [r3, #12]
 800dcd6:	4322      	orrs	r2, r4
 800dcd8:	b292      	uxth	r2, r2
 800dcda:	819a      	strh	r2, [r3, #12]
          }
          /* Adjust length of segment to fit in the window. */
          TCPWND_CHECK16(pcb->rcv_wnd);
          inseg.len = (u16_t)pcb->rcv_wnd;
 800dcdc:	687b      	ldr	r3, [r7, #4]
 800dcde:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 800dce0:	4b51      	ldr	r3, [pc, #324]	; (800de28 <tcp_receive+0x968>)
 800dce2:	811a      	strh	r2, [r3, #8]
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 800dce4:	4b50      	ldr	r3, [pc, #320]	; (800de28 <tcp_receive+0x968>)
 800dce6:	68db      	ldr	r3, [r3, #12]
 800dce8:	899b      	ldrh	r3, [r3, #12]
 800dcea:	b29b      	uxth	r3, r3
 800dcec:	4618      	mov	r0, r3
 800dcee:	f7fb f9b3 	bl	8009058 <lwip_htons>
 800dcf2:	4603      	mov	r3, r0
 800dcf4:	f003 0302 	and.w	r3, r3, #2
 800dcf8:	2b00      	cmp	r3, #0
 800dcfa:	d005      	beq.n	800dd08 <tcp_receive+0x848>
            inseg.len -= 1;
 800dcfc:	4b4a      	ldr	r3, [pc, #296]	; (800de28 <tcp_receive+0x968>)
 800dcfe:	891b      	ldrh	r3, [r3, #8]
 800dd00:	3b01      	subs	r3, #1
 800dd02:	b29a      	uxth	r2, r3
 800dd04:	4b48      	ldr	r3, [pc, #288]	; (800de28 <tcp_receive+0x968>)
 800dd06:	811a      	strh	r2, [r3, #8]
          }
          pbuf_realloc(inseg.p, inseg.len);
 800dd08:	4b47      	ldr	r3, [pc, #284]	; (800de28 <tcp_receive+0x968>)
 800dd0a:	685a      	ldr	r2, [r3, #4]
 800dd0c:	4b46      	ldr	r3, [pc, #280]	; (800de28 <tcp_receive+0x968>)
 800dd0e:	891b      	ldrh	r3, [r3, #8]
 800dd10:	4619      	mov	r1, r3
 800dd12:	4610      	mov	r0, r2
 800dd14:	f7fc fa58 	bl	800a1c8 <pbuf_realloc>
          tcplen = TCP_TCPLEN(&inseg);
 800dd18:	4b43      	ldr	r3, [pc, #268]	; (800de28 <tcp_receive+0x968>)
 800dd1a:	891c      	ldrh	r4, [r3, #8]
 800dd1c:	4b42      	ldr	r3, [pc, #264]	; (800de28 <tcp_receive+0x968>)
 800dd1e:	68db      	ldr	r3, [r3, #12]
 800dd20:	899b      	ldrh	r3, [r3, #12]
 800dd22:	b29b      	uxth	r3, r3
 800dd24:	4618      	mov	r0, r3
 800dd26:	f7fb f997 	bl	8009058 <lwip_htons>
 800dd2a:	4603      	mov	r3, r0
 800dd2c:	f003 0303 	and.w	r3, r3, #3
 800dd30:	2b00      	cmp	r3, #0
 800dd32:	d001      	beq.n	800dd38 <tcp_receive+0x878>
 800dd34:	2301      	movs	r3, #1
 800dd36:	e000      	b.n	800dd3a <tcp_receive+0x87a>
 800dd38:	2300      	movs	r3, #0
 800dd3a:	4423      	add	r3, r4
 800dd3c:	b29a      	uxth	r2, r3
 800dd3e:	4b3b      	ldr	r3, [pc, #236]	; (800de2c <tcp_receive+0x96c>)
 800dd40:	801a      	strh	r2, [r3, #0]
          LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 800dd42:	4b3a      	ldr	r3, [pc, #232]	; (800de2c <tcp_receive+0x96c>)
 800dd44:	881b      	ldrh	r3, [r3, #0]
 800dd46:	461a      	mov	r2, r3
 800dd48:	4b36      	ldr	r3, [pc, #216]	; (800de24 <tcp_receive+0x964>)
 800dd4a:	681b      	ldr	r3, [r3, #0]
 800dd4c:	441a      	add	r2, r3
 800dd4e:	687b      	ldr	r3, [r7, #4]
 800dd50:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800dd52:	6879      	ldr	r1, [r7, #4]
 800dd54:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 800dd56:	440b      	add	r3, r1
 800dd58:	429a      	cmp	r2, r3
 800dd5a:	d006      	beq.n	800dd6a <tcp_receive+0x8aa>
 800dd5c:	4b34      	ldr	r3, [pc, #208]	; (800de30 <tcp_receive+0x970>)
 800dd5e:	f240 527f 	movw	r2, #1407	; 0x57f
 800dd62:	4934      	ldr	r1, [pc, #208]	; (800de34 <tcp_receive+0x974>)
 800dd64:	4834      	ldr	r0, [pc, #208]	; (800de38 <tcp_receive+0x978>)
 800dd66:	f007 ff35 	bl	8015bd4 <printf_>
        }
#if TCP_QUEUE_OOSEQ
        /* Received in-sequence data, adjust ooseq data if:
           - FIN has been received or
           - inseq overlaps with ooseq */
        if (pcb->ooseq != NULL) {
 800dd6a:	687b      	ldr	r3, [r7, #4]
 800dd6c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800dd6e:	2b00      	cmp	r3, #0
 800dd70:	f000 80e1 	beq.w	800df36 <tcp_receive+0xa76>
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 800dd74:	4b2c      	ldr	r3, [pc, #176]	; (800de28 <tcp_receive+0x968>)
 800dd76:	68db      	ldr	r3, [r3, #12]
 800dd78:	899b      	ldrh	r3, [r3, #12]
 800dd7a:	b29b      	uxth	r3, r3
 800dd7c:	4618      	mov	r0, r3
 800dd7e:	f7fb f96b 	bl	8009058 <lwip_htons>
 800dd82:	4603      	mov	r3, r0
 800dd84:	f003 0301 	and.w	r3, r3, #1
 800dd88:	2b00      	cmp	r3, #0
 800dd8a:	d010      	beq.n	800ddae <tcp_receive+0x8ee>
            LWIP_DEBUGF(TCP_INPUT_DEBUG,
                        ("tcp_receive: received in-order FIN, binning ooseq queue\n"));
            /* Received in-order FIN means anything that was received
             * out of order must now have been received in-order, so
             * bin the ooseq queue */
            while (pcb->ooseq != NULL) {
 800dd8c:	e00a      	b.n	800dda4 <tcp_receive+0x8e4>
              struct tcp_seg *old_ooseq = pcb->ooseq;
 800dd8e:	687b      	ldr	r3, [r7, #4]
 800dd90:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800dd92:	60bb      	str	r3, [r7, #8]
              pcb->ooseq = pcb->ooseq->next;
 800dd94:	687b      	ldr	r3, [r7, #4]
 800dd96:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800dd98:	681a      	ldr	r2, [r3, #0]
 800dd9a:	687b      	ldr	r3, [r7, #4]
 800dd9c:	671a      	str	r2, [r3, #112]	; 0x70
              tcp_seg_free(old_ooseq);
 800dd9e:	68b8      	ldr	r0, [r7, #8]
 800dda0:	f7fd fe6e 	bl	800ba80 <tcp_seg_free>
            while (pcb->ooseq != NULL) {
 800dda4:	687b      	ldr	r3, [r7, #4]
 800dda6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800dda8:	2b00      	cmp	r3, #0
 800ddaa:	d1f0      	bne.n	800dd8e <tcp_receive+0x8ce>
 800ddac:	e0c3      	b.n	800df36 <tcp_receive+0xa76>
            }
          } else {
            next = pcb->ooseq;
 800ddae:	687b      	ldr	r3, [r7, #4]
 800ddb0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ddb2:	62fb      	str	r3, [r7, #44]	; 0x2c
            /* Remove all segments on ooseq that are covered by inseg already.
             * FIN is copied from ooseq to inseg if present. */
            while (next &&
 800ddb4:	e04f      	b.n	800de56 <tcp_receive+0x996>
                   TCP_SEQ_GEQ(seqno + tcplen,
                               next->tcphdr->seqno + next->len)) {
              /* inseg cannot have FIN here (already processed above) */
              if ((TCPH_FLAGS(next->tcphdr) & TCP_FIN) != 0 &&
 800ddb6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ddb8:	68db      	ldr	r3, [r3, #12]
 800ddba:	899b      	ldrh	r3, [r3, #12]
 800ddbc:	b29b      	uxth	r3, r3
 800ddbe:	4618      	mov	r0, r3
 800ddc0:	f7fb f94a 	bl	8009058 <lwip_htons>
 800ddc4:	4603      	mov	r3, r0
 800ddc6:	f003 0301 	and.w	r3, r3, #1
 800ddca:	2b00      	cmp	r3, #0
 800ddcc:	d03b      	beq.n	800de46 <tcp_receive+0x986>
                  (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) == 0) {
 800ddce:	4b16      	ldr	r3, [pc, #88]	; (800de28 <tcp_receive+0x968>)
 800ddd0:	68db      	ldr	r3, [r3, #12]
 800ddd2:	899b      	ldrh	r3, [r3, #12]
 800ddd4:	b29b      	uxth	r3, r3
 800ddd6:	4618      	mov	r0, r3
 800ddd8:	f7fb f93e 	bl	8009058 <lwip_htons>
 800dddc:	4603      	mov	r3, r0
 800ddde:	f003 0302 	and.w	r3, r3, #2
              if ((TCPH_FLAGS(next->tcphdr) & TCP_FIN) != 0 &&
 800dde2:	2b00      	cmp	r3, #0
 800dde4:	d12f      	bne.n	800de46 <tcp_receive+0x986>
                TCPH_SET_FLAG(inseg.tcphdr, TCP_FIN);
 800dde6:	4b10      	ldr	r3, [pc, #64]	; (800de28 <tcp_receive+0x968>)
 800dde8:	68db      	ldr	r3, [r3, #12]
 800ddea:	899b      	ldrh	r3, [r3, #12]
 800ddec:	b29c      	uxth	r4, r3
 800ddee:	2001      	movs	r0, #1
 800ddf0:	f7fb f932 	bl	8009058 <lwip_htons>
 800ddf4:	4603      	mov	r3, r0
 800ddf6:	461a      	mov	r2, r3
 800ddf8:	4b0b      	ldr	r3, [pc, #44]	; (800de28 <tcp_receive+0x968>)
 800ddfa:	68db      	ldr	r3, [r3, #12]
 800ddfc:	4322      	orrs	r2, r4
 800ddfe:	b292      	uxth	r2, r2
 800de00:	819a      	strh	r2, [r3, #12]
                tcplen = TCP_TCPLEN(&inseg);
 800de02:	4b09      	ldr	r3, [pc, #36]	; (800de28 <tcp_receive+0x968>)
 800de04:	891c      	ldrh	r4, [r3, #8]
 800de06:	4b08      	ldr	r3, [pc, #32]	; (800de28 <tcp_receive+0x968>)
 800de08:	68db      	ldr	r3, [r3, #12]
 800de0a:	899b      	ldrh	r3, [r3, #12]
 800de0c:	b29b      	uxth	r3, r3
 800de0e:	4618      	mov	r0, r3
 800de10:	f7fb f922 	bl	8009058 <lwip_htons>
 800de14:	4603      	mov	r3, r0
 800de16:	f003 0303 	and.w	r3, r3, #3
 800de1a:	2b00      	cmp	r3, #0
 800de1c:	d00e      	beq.n	800de3c <tcp_receive+0x97c>
 800de1e:	2301      	movs	r3, #1
 800de20:	e00d      	b.n	800de3e <tcp_receive+0x97e>
 800de22:	bf00      	nop
 800de24:	2400862c 	.word	0x2400862c
 800de28:	2400860c 	.word	0x2400860c
 800de2c:	24008636 	.word	0x24008636
 800de30:	0801af54 	.word	0x0801af54
 800de34:	0801b220 	.word	0x0801b220
 800de38:	0801af98 	.word	0x0801af98
 800de3c:	2300      	movs	r3, #0
 800de3e:	4423      	add	r3, r4
 800de40:	b29a      	uxth	r2, r3
 800de42:	4b95      	ldr	r3, [pc, #596]	; (800e098 <tcp_receive+0xbd8>)
 800de44:	801a      	strh	r2, [r3, #0]
              }
              prev = next;
 800de46:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800de48:	62bb      	str	r3, [r7, #40]	; 0x28
              next = next->next;
 800de4a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800de4c:	681b      	ldr	r3, [r3, #0]
 800de4e:	62fb      	str	r3, [r7, #44]	; 0x2c
              tcp_seg_free(prev);
 800de50:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800de52:	f7fd fe15 	bl	800ba80 <tcp_seg_free>
            while (next &&
 800de56:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800de58:	2b00      	cmp	r3, #0
 800de5a:	d00e      	beq.n	800de7a <tcp_receive+0x9ba>
                   TCP_SEQ_GEQ(seqno + tcplen,
 800de5c:	4b8e      	ldr	r3, [pc, #568]	; (800e098 <tcp_receive+0xbd8>)
 800de5e:	881b      	ldrh	r3, [r3, #0]
 800de60:	461a      	mov	r2, r3
 800de62:	4b8e      	ldr	r3, [pc, #568]	; (800e09c <tcp_receive+0xbdc>)
 800de64:	681b      	ldr	r3, [r3, #0]
 800de66:	441a      	add	r2, r3
 800de68:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800de6a:	68db      	ldr	r3, [r3, #12]
 800de6c:	685b      	ldr	r3, [r3, #4]
 800de6e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800de70:	8909      	ldrh	r1, [r1, #8]
 800de72:	440b      	add	r3, r1
 800de74:	1ad3      	subs	r3, r2, r3
            while (next &&
 800de76:	2b00      	cmp	r3, #0
 800de78:	da9d      	bge.n	800ddb6 <tcp_receive+0x8f6>
            }
            /* Now trim right side of inseg if it overlaps with the first
             * segment on ooseq */
            if (next &&
 800de7a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800de7c:	2b00      	cmp	r3, #0
 800de7e:	d057      	beq.n	800df30 <tcp_receive+0xa70>
                TCP_SEQ_GT(seqno + tcplen,
 800de80:	4b85      	ldr	r3, [pc, #532]	; (800e098 <tcp_receive+0xbd8>)
 800de82:	881b      	ldrh	r3, [r3, #0]
 800de84:	461a      	mov	r2, r3
 800de86:	4b85      	ldr	r3, [pc, #532]	; (800e09c <tcp_receive+0xbdc>)
 800de88:	681b      	ldr	r3, [r3, #0]
 800de8a:	441a      	add	r2, r3
 800de8c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800de8e:	68db      	ldr	r3, [r3, #12]
 800de90:	685b      	ldr	r3, [r3, #4]
 800de92:	1ad3      	subs	r3, r2, r3
            if (next &&
 800de94:	2b00      	cmp	r3, #0
 800de96:	dd4b      	ble.n	800df30 <tcp_receive+0xa70>
                           next->tcphdr->seqno)) {
              /* inseg cannot have FIN here (already processed above) */
              inseg.len = (u16_t)(next->tcphdr->seqno - seqno);
 800de98:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800de9a:	68db      	ldr	r3, [r3, #12]
 800de9c:	685b      	ldr	r3, [r3, #4]
 800de9e:	b29a      	uxth	r2, r3
 800dea0:	4b7e      	ldr	r3, [pc, #504]	; (800e09c <tcp_receive+0xbdc>)
 800dea2:	681b      	ldr	r3, [r3, #0]
 800dea4:	b29b      	uxth	r3, r3
 800dea6:	1ad3      	subs	r3, r2, r3
 800dea8:	b29a      	uxth	r2, r3
 800deaa:	4b7d      	ldr	r3, [pc, #500]	; (800e0a0 <tcp_receive+0xbe0>)
 800deac:	811a      	strh	r2, [r3, #8]
              if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 800deae:	4b7c      	ldr	r3, [pc, #496]	; (800e0a0 <tcp_receive+0xbe0>)
 800deb0:	68db      	ldr	r3, [r3, #12]
 800deb2:	899b      	ldrh	r3, [r3, #12]
 800deb4:	b29b      	uxth	r3, r3
 800deb6:	4618      	mov	r0, r3
 800deb8:	f7fb f8ce 	bl	8009058 <lwip_htons>
 800debc:	4603      	mov	r3, r0
 800debe:	f003 0302 	and.w	r3, r3, #2
 800dec2:	2b00      	cmp	r3, #0
 800dec4:	d005      	beq.n	800ded2 <tcp_receive+0xa12>
                inseg.len -= 1;
 800dec6:	4b76      	ldr	r3, [pc, #472]	; (800e0a0 <tcp_receive+0xbe0>)
 800dec8:	891b      	ldrh	r3, [r3, #8]
 800deca:	3b01      	subs	r3, #1
 800decc:	b29a      	uxth	r2, r3
 800dece:	4b74      	ldr	r3, [pc, #464]	; (800e0a0 <tcp_receive+0xbe0>)
 800ded0:	811a      	strh	r2, [r3, #8]
              }
              pbuf_realloc(inseg.p, inseg.len);
 800ded2:	4b73      	ldr	r3, [pc, #460]	; (800e0a0 <tcp_receive+0xbe0>)
 800ded4:	685a      	ldr	r2, [r3, #4]
 800ded6:	4b72      	ldr	r3, [pc, #456]	; (800e0a0 <tcp_receive+0xbe0>)
 800ded8:	891b      	ldrh	r3, [r3, #8]
 800deda:	4619      	mov	r1, r3
 800dedc:	4610      	mov	r0, r2
 800dede:	f7fc f973 	bl	800a1c8 <pbuf_realloc>
              tcplen = TCP_TCPLEN(&inseg);
 800dee2:	4b6f      	ldr	r3, [pc, #444]	; (800e0a0 <tcp_receive+0xbe0>)
 800dee4:	891c      	ldrh	r4, [r3, #8]
 800dee6:	4b6e      	ldr	r3, [pc, #440]	; (800e0a0 <tcp_receive+0xbe0>)
 800dee8:	68db      	ldr	r3, [r3, #12]
 800deea:	899b      	ldrh	r3, [r3, #12]
 800deec:	b29b      	uxth	r3, r3
 800deee:	4618      	mov	r0, r3
 800def0:	f7fb f8b2 	bl	8009058 <lwip_htons>
 800def4:	4603      	mov	r3, r0
 800def6:	f003 0303 	and.w	r3, r3, #3
 800defa:	2b00      	cmp	r3, #0
 800defc:	d001      	beq.n	800df02 <tcp_receive+0xa42>
 800defe:	2301      	movs	r3, #1
 800df00:	e000      	b.n	800df04 <tcp_receive+0xa44>
 800df02:	2300      	movs	r3, #0
 800df04:	4423      	add	r3, r4
 800df06:	b29a      	uxth	r2, r3
 800df08:	4b63      	ldr	r3, [pc, #396]	; (800e098 <tcp_receive+0xbd8>)
 800df0a:	801a      	strh	r2, [r3, #0]
              LWIP_ASSERT("tcp_receive: segment not trimmed correctly to ooseq queue\n",
 800df0c:	4b62      	ldr	r3, [pc, #392]	; (800e098 <tcp_receive+0xbd8>)
 800df0e:	881b      	ldrh	r3, [r3, #0]
 800df10:	461a      	mov	r2, r3
 800df12:	4b62      	ldr	r3, [pc, #392]	; (800e09c <tcp_receive+0xbdc>)
 800df14:	681b      	ldr	r3, [r3, #0]
 800df16:	441a      	add	r2, r3
 800df18:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800df1a:	68db      	ldr	r3, [r3, #12]
 800df1c:	685b      	ldr	r3, [r3, #4]
 800df1e:	429a      	cmp	r2, r3
 800df20:	d006      	beq.n	800df30 <tcp_receive+0xa70>
 800df22:	4b60      	ldr	r3, [pc, #384]	; (800e0a4 <tcp_receive+0xbe4>)
 800df24:	f240 52af 	movw	r2, #1455	; 0x5af
 800df28:	495f      	ldr	r1, [pc, #380]	; (800e0a8 <tcp_receive+0xbe8>)
 800df2a:	4860      	ldr	r0, [pc, #384]	; (800e0ac <tcp_receive+0xbec>)
 800df2c:	f007 fe52 	bl	8015bd4 <printf_>
                          (seqno + tcplen) == next->tcphdr->seqno);
            }
            pcb->ooseq = next;
 800df30:	687b      	ldr	r3, [r7, #4]
 800df32:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800df34:	671a      	str	r2, [r3, #112]	; 0x70
          }
        }
#endif /* TCP_QUEUE_OOSEQ */

        pcb->rcv_nxt = seqno + tcplen;
 800df36:	4b58      	ldr	r3, [pc, #352]	; (800e098 <tcp_receive+0xbd8>)
 800df38:	881b      	ldrh	r3, [r3, #0]
 800df3a:	461a      	mov	r2, r3
 800df3c:	4b57      	ldr	r3, [pc, #348]	; (800e09c <tcp_receive+0xbdc>)
 800df3e:	681b      	ldr	r3, [r3, #0]
 800df40:	441a      	add	r2, r3
 800df42:	687b      	ldr	r3, [r7, #4]
 800df44:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update the receiver's (our) window. */
        LWIP_ASSERT("tcp_receive: tcplen > rcv_wnd\n", pcb->rcv_wnd >= tcplen);
 800df46:	687b      	ldr	r3, [r7, #4]
 800df48:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 800df4a:	4b53      	ldr	r3, [pc, #332]	; (800e098 <tcp_receive+0xbd8>)
 800df4c:	881b      	ldrh	r3, [r3, #0]
 800df4e:	429a      	cmp	r2, r3
 800df50:	d206      	bcs.n	800df60 <tcp_receive+0xaa0>
 800df52:	4b54      	ldr	r3, [pc, #336]	; (800e0a4 <tcp_receive+0xbe4>)
 800df54:	f240 52b9 	movw	r2, #1465	; 0x5b9
 800df58:	4955      	ldr	r1, [pc, #340]	; (800e0b0 <tcp_receive+0xbf0>)
 800df5a:	4854      	ldr	r0, [pc, #336]	; (800e0ac <tcp_receive+0xbec>)
 800df5c:	f007 fe3a 	bl	8015bd4 <printf_>
        pcb->rcv_wnd -= tcplen;
 800df60:	687b      	ldr	r3, [r7, #4]
 800df62:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 800df64:	4b4c      	ldr	r3, [pc, #304]	; (800e098 <tcp_receive+0xbd8>)
 800df66:	881b      	ldrh	r3, [r3, #0]
 800df68:	1ad3      	subs	r3, r2, r3
 800df6a:	b29a      	uxth	r2, r3
 800df6c:	687b      	ldr	r3, [r7, #4]
 800df6e:	851a      	strh	r2, [r3, #40]	; 0x28

        tcp_update_rcv_ann_wnd(pcb);
 800df70:	6878      	ldr	r0, [r7, #4]
 800df72:	f7fd f801 	bl	800af78 <tcp_update_rcv_ann_wnd>
           chains its data on this pbuf as well.

           If the segment was a FIN, we set the TF_GOT_FIN flag that will
           be used to indicate to the application that the remote side has
           closed its end of the connection. */
        if (inseg.p->tot_len > 0) {
 800df76:	4b4a      	ldr	r3, [pc, #296]	; (800e0a0 <tcp_receive+0xbe0>)
 800df78:	685b      	ldr	r3, [r3, #4]
 800df7a:	891b      	ldrh	r3, [r3, #8]
 800df7c:	2b00      	cmp	r3, #0
 800df7e:	d006      	beq.n	800df8e <tcp_receive+0xace>
          recv_data = inseg.p;
 800df80:	4b47      	ldr	r3, [pc, #284]	; (800e0a0 <tcp_receive+0xbe0>)
 800df82:	685b      	ldr	r3, [r3, #4]
 800df84:	4a4b      	ldr	r2, [pc, #300]	; (800e0b4 <tcp_receive+0xbf4>)
 800df86:	6013      	str	r3, [r2, #0]
          /* Since this pbuf now is the responsibility of the
             application, we delete our reference to it so that we won't
             (mistakingly) deallocate it. */
          inseg.p = NULL;
 800df88:	4b45      	ldr	r3, [pc, #276]	; (800e0a0 <tcp_receive+0xbe0>)
 800df8a:	2200      	movs	r2, #0
 800df8c:	605a      	str	r2, [r3, #4]
        }
        if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 800df8e:	4b44      	ldr	r3, [pc, #272]	; (800e0a0 <tcp_receive+0xbe0>)
 800df90:	68db      	ldr	r3, [r3, #12]
 800df92:	899b      	ldrh	r3, [r3, #12]
 800df94:	b29b      	uxth	r3, r3
 800df96:	4618      	mov	r0, r3
 800df98:	f7fb f85e 	bl	8009058 <lwip_htons>
 800df9c:	4603      	mov	r3, r0
 800df9e:	f003 0301 	and.w	r3, r3, #1
 800dfa2:	2b00      	cmp	r3, #0
 800dfa4:	f000 80b4 	beq.w	800e110 <tcp_receive+0xc50>
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: received FIN.\n"));
          recv_flags |= TF_GOT_FIN;
 800dfa8:	4b43      	ldr	r3, [pc, #268]	; (800e0b8 <tcp_receive+0xbf8>)
 800dfaa:	781b      	ldrb	r3, [r3, #0]
 800dfac:	f043 0320 	orr.w	r3, r3, #32
 800dfb0:	b2da      	uxtb	r2, r3
 800dfb2:	4b41      	ldr	r3, [pc, #260]	; (800e0b8 <tcp_receive+0xbf8>)
 800dfb4:	701a      	strb	r2, [r3, #0]
        }

#if TCP_QUEUE_OOSEQ
        /* We now check if we have segments on the ->ooseq queue that
           are now in sequence. */
        while (pcb->ooseq != NULL &&
 800dfb6:	e0ab      	b.n	800e110 <tcp_receive+0xc50>
               pcb->ooseq->tcphdr->seqno == pcb->rcv_nxt) {

          cseg = pcb->ooseq;
 800dfb8:	687b      	ldr	r3, [r7, #4]
 800dfba:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800dfbc:	60fb      	str	r3, [r7, #12]
          seqno = pcb->ooseq->tcphdr->seqno;
 800dfbe:	687b      	ldr	r3, [r7, #4]
 800dfc0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800dfc2:	68db      	ldr	r3, [r3, #12]
 800dfc4:	685b      	ldr	r3, [r3, #4]
 800dfc6:	4a35      	ldr	r2, [pc, #212]	; (800e09c <tcp_receive+0xbdc>)
 800dfc8:	6013      	str	r3, [r2, #0]

          pcb->rcv_nxt += TCP_TCPLEN(cseg);
 800dfca:	68fb      	ldr	r3, [r7, #12]
 800dfcc:	891b      	ldrh	r3, [r3, #8]
 800dfce:	461c      	mov	r4, r3
 800dfd0:	68fb      	ldr	r3, [r7, #12]
 800dfd2:	68db      	ldr	r3, [r3, #12]
 800dfd4:	899b      	ldrh	r3, [r3, #12]
 800dfd6:	b29b      	uxth	r3, r3
 800dfd8:	4618      	mov	r0, r3
 800dfda:	f7fb f83d 	bl	8009058 <lwip_htons>
 800dfde:	4603      	mov	r3, r0
 800dfe0:	f003 0303 	and.w	r3, r3, #3
 800dfe4:	2b00      	cmp	r3, #0
 800dfe6:	d001      	beq.n	800dfec <tcp_receive+0xb2c>
 800dfe8:	2301      	movs	r3, #1
 800dfea:	e000      	b.n	800dfee <tcp_receive+0xb2e>
 800dfec:	2300      	movs	r3, #0
 800dfee:	191a      	adds	r2, r3, r4
 800dff0:	687b      	ldr	r3, [r7, #4]
 800dff2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800dff4:	441a      	add	r2, r3
 800dff6:	687b      	ldr	r3, [r7, #4]
 800dff8:	625a      	str	r2, [r3, #36]	; 0x24
          LWIP_ASSERT("tcp_receive: ooseq tcplen > rcv_wnd\n",
 800dffa:	687b      	ldr	r3, [r7, #4]
 800dffc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800dffe:	461c      	mov	r4, r3
 800e000:	68fb      	ldr	r3, [r7, #12]
 800e002:	891b      	ldrh	r3, [r3, #8]
 800e004:	461d      	mov	r5, r3
 800e006:	68fb      	ldr	r3, [r7, #12]
 800e008:	68db      	ldr	r3, [r3, #12]
 800e00a:	899b      	ldrh	r3, [r3, #12]
 800e00c:	b29b      	uxth	r3, r3
 800e00e:	4618      	mov	r0, r3
 800e010:	f7fb f822 	bl	8009058 <lwip_htons>
 800e014:	4603      	mov	r3, r0
 800e016:	f003 0303 	and.w	r3, r3, #3
 800e01a:	2b00      	cmp	r3, #0
 800e01c:	d001      	beq.n	800e022 <tcp_receive+0xb62>
 800e01e:	2301      	movs	r3, #1
 800e020:	e000      	b.n	800e024 <tcp_receive+0xb64>
 800e022:	2300      	movs	r3, #0
 800e024:	442b      	add	r3, r5
 800e026:	429c      	cmp	r4, r3
 800e028:	d206      	bcs.n	800e038 <tcp_receive+0xb78>
 800e02a:	4b1e      	ldr	r3, [pc, #120]	; (800e0a4 <tcp_receive+0xbe4>)
 800e02c:	f240 52de 	movw	r2, #1502	; 0x5de
 800e030:	4922      	ldr	r1, [pc, #136]	; (800e0bc <tcp_receive+0xbfc>)
 800e032:	481e      	ldr	r0, [pc, #120]	; (800e0ac <tcp_receive+0xbec>)
 800e034:	f007 fdce 	bl	8015bd4 <printf_>
                      pcb->rcv_wnd >= TCP_TCPLEN(cseg));
          pcb->rcv_wnd -= TCP_TCPLEN(cseg);
 800e038:	68fb      	ldr	r3, [r7, #12]
 800e03a:	891b      	ldrh	r3, [r3, #8]
 800e03c:	461c      	mov	r4, r3
 800e03e:	68fb      	ldr	r3, [r7, #12]
 800e040:	68db      	ldr	r3, [r3, #12]
 800e042:	899b      	ldrh	r3, [r3, #12]
 800e044:	b29b      	uxth	r3, r3
 800e046:	4618      	mov	r0, r3
 800e048:	f7fb f806 	bl	8009058 <lwip_htons>
 800e04c:	4603      	mov	r3, r0
 800e04e:	f003 0303 	and.w	r3, r3, #3
 800e052:	2b00      	cmp	r3, #0
 800e054:	d001      	beq.n	800e05a <tcp_receive+0xb9a>
 800e056:	2301      	movs	r3, #1
 800e058:	e000      	b.n	800e05c <tcp_receive+0xb9c>
 800e05a:	2300      	movs	r3, #0
 800e05c:	1919      	adds	r1, r3, r4
 800e05e:	687b      	ldr	r3, [r7, #4]
 800e060:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 800e062:	b28b      	uxth	r3, r1
 800e064:	1ad3      	subs	r3, r2, r3
 800e066:	b29a      	uxth	r2, r3
 800e068:	687b      	ldr	r3, [r7, #4]
 800e06a:	851a      	strh	r2, [r3, #40]	; 0x28

          tcp_update_rcv_ann_wnd(pcb);
 800e06c:	6878      	ldr	r0, [r7, #4]
 800e06e:	f7fc ff83 	bl	800af78 <tcp_update_rcv_ann_wnd>

          if (cseg->p->tot_len > 0) {
 800e072:	68fb      	ldr	r3, [r7, #12]
 800e074:	685b      	ldr	r3, [r3, #4]
 800e076:	891b      	ldrh	r3, [r3, #8]
 800e078:	2b00      	cmp	r3, #0
 800e07a:	d028      	beq.n	800e0ce <tcp_receive+0xc0e>
            /* Chain this pbuf onto the pbuf that we will pass to
               the application. */
            /* With window scaling, this can overflow recv_data->tot_len, but
               that's not a problem since we explicitly fix that before passing
               recv_data to the application. */
            if (recv_data) {
 800e07c:	4b0d      	ldr	r3, [pc, #52]	; (800e0b4 <tcp_receive+0xbf4>)
 800e07e:	681b      	ldr	r3, [r3, #0]
 800e080:	2b00      	cmp	r3, #0
 800e082:	d01d      	beq.n	800e0c0 <tcp_receive+0xc00>
              pbuf_cat(recv_data, cseg->p);
 800e084:	4b0b      	ldr	r3, [pc, #44]	; (800e0b4 <tcp_receive+0xbf4>)
 800e086:	681a      	ldr	r2, [r3, #0]
 800e088:	68fb      	ldr	r3, [r7, #12]
 800e08a:	685b      	ldr	r3, [r3, #4]
 800e08c:	4619      	mov	r1, r3
 800e08e:	4610      	mov	r0, r2
 800e090:	f7fc fae8 	bl	800a664 <pbuf_cat>
 800e094:	e018      	b.n	800e0c8 <tcp_receive+0xc08>
 800e096:	bf00      	nop
 800e098:	24008636 	.word	0x24008636
 800e09c:	2400862c 	.word	0x2400862c
 800e0a0:	2400860c 	.word	0x2400860c
 800e0a4:	0801af54 	.word	0x0801af54
 800e0a8:	0801b258 	.word	0x0801b258
 800e0ac:	0801af98 	.word	0x0801af98
 800e0b0:	0801b294 	.word	0x0801b294
 800e0b4:	2400863c 	.word	0x2400863c
 800e0b8:	24008639 	.word	0x24008639
 800e0bc:	0801b2b4 	.word	0x0801b2b4
            } else {
              recv_data = cseg->p;
 800e0c0:	68fb      	ldr	r3, [r7, #12]
 800e0c2:	685b      	ldr	r3, [r3, #4]
 800e0c4:	4a71      	ldr	r2, [pc, #452]	; (800e28c <tcp_receive+0xdcc>)
 800e0c6:	6013      	str	r3, [r2, #0]
            }
            cseg->p = NULL;
 800e0c8:	68fb      	ldr	r3, [r7, #12]
 800e0ca:	2200      	movs	r2, #0
 800e0cc:	605a      	str	r2, [r3, #4]
          }
          if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
 800e0ce:	68fb      	ldr	r3, [r7, #12]
 800e0d0:	68db      	ldr	r3, [r3, #12]
 800e0d2:	899b      	ldrh	r3, [r3, #12]
 800e0d4:	b29b      	uxth	r3, r3
 800e0d6:	4618      	mov	r0, r3
 800e0d8:	f7fa ffbe 	bl	8009058 <lwip_htons>
 800e0dc:	4603      	mov	r3, r0
 800e0de:	f003 0301 	and.w	r3, r3, #1
 800e0e2:	2b00      	cmp	r3, #0
 800e0e4:	d00d      	beq.n	800e102 <tcp_receive+0xc42>
            LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: dequeued FIN.\n"));
            recv_flags |= TF_GOT_FIN;
 800e0e6:	4b6a      	ldr	r3, [pc, #424]	; (800e290 <tcp_receive+0xdd0>)
 800e0e8:	781b      	ldrb	r3, [r3, #0]
 800e0ea:	f043 0320 	orr.w	r3, r3, #32
 800e0ee:	b2da      	uxtb	r2, r3
 800e0f0:	4b67      	ldr	r3, [pc, #412]	; (800e290 <tcp_receive+0xdd0>)
 800e0f2:	701a      	strb	r2, [r3, #0]
            if (pcb->state == ESTABLISHED) { /* force passive close or we can move to active close */
 800e0f4:	687b      	ldr	r3, [r7, #4]
 800e0f6:	7d1b      	ldrb	r3, [r3, #20]
 800e0f8:	2b04      	cmp	r3, #4
 800e0fa:	d102      	bne.n	800e102 <tcp_receive+0xc42>
              pcb->state = CLOSE_WAIT;
 800e0fc:	687b      	ldr	r3, [r7, #4]
 800e0fe:	2207      	movs	r2, #7
 800e100:	751a      	strb	r2, [r3, #20]
            }
          }

          pcb->ooseq = cseg->next;
 800e102:	68fb      	ldr	r3, [r7, #12]
 800e104:	681a      	ldr	r2, [r3, #0]
 800e106:	687b      	ldr	r3, [r7, #4]
 800e108:	671a      	str	r2, [r3, #112]	; 0x70
          tcp_seg_free(cseg);
 800e10a:	68f8      	ldr	r0, [r7, #12]
 800e10c:	f7fd fcb8 	bl	800ba80 <tcp_seg_free>
        while (pcb->ooseq != NULL &&
 800e110:	687b      	ldr	r3, [r7, #4]
 800e112:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800e114:	2b00      	cmp	r3, #0
 800e116:	d008      	beq.n	800e12a <tcp_receive+0xc6a>
               pcb->ooseq->tcphdr->seqno == pcb->rcv_nxt) {
 800e118:	687b      	ldr	r3, [r7, #4]
 800e11a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800e11c:	68db      	ldr	r3, [r3, #12]
 800e11e:	685a      	ldr	r2, [r3, #4]
 800e120:	687b      	ldr	r3, [r7, #4]
 800e122:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        while (pcb->ooseq != NULL &&
 800e124:	429a      	cmp	r2, r3
 800e126:	f43f af47 	beq.w	800dfb8 <tcp_receive+0xaf8>
        }
#endif /* TCP_QUEUE_OOSEQ */


        /* Acknowledge the segment(s). */
        tcp_ack(pcb);
 800e12a:	687b      	ldr	r3, [r7, #4]
 800e12c:	7e9b      	ldrb	r3, [r3, #26]
 800e12e:	f003 0301 	and.w	r3, r3, #1
 800e132:	2b00      	cmp	r3, #0
 800e134:	d00e      	beq.n	800e154 <tcp_receive+0xc94>
 800e136:	687b      	ldr	r3, [r7, #4]
 800e138:	7e9b      	ldrb	r3, [r3, #26]
 800e13a:	f023 0301 	bic.w	r3, r3, #1
 800e13e:	b2da      	uxtb	r2, r3
 800e140:	687b      	ldr	r3, [r7, #4]
 800e142:	769a      	strb	r2, [r3, #26]
 800e144:	687b      	ldr	r3, [r7, #4]
 800e146:	7e9b      	ldrb	r3, [r3, #26]
 800e148:	f043 0302 	orr.w	r3, r3, #2
 800e14c:	b2da      	uxtb	r2, r3
 800e14e:	687b      	ldr	r3, [r7, #4]
 800e150:	769a      	strb	r2, [r3, #26]
      if (pcb->rcv_nxt == seqno) {
 800e152:	e181      	b.n	800e458 <tcp_receive+0xf98>
        tcp_ack(pcb);
 800e154:	687b      	ldr	r3, [r7, #4]
 800e156:	7e9b      	ldrb	r3, [r3, #26]
 800e158:	f043 0301 	orr.w	r3, r3, #1
 800e15c:	b2da      	uxtb	r2, r3
 800e15e:	687b      	ldr	r3, [r7, #4]
 800e160:	769a      	strb	r2, [r3, #26]
      if (pcb->rcv_nxt == seqno) {
 800e162:	e179      	b.n	800e458 <tcp_receive+0xf98>
        }
#endif /* LWIP_IPV6 && LWIP_ND6_TCP_REACHABILITY_HINTS*/

      } else {
        /* We get here if the incoming segment is out-of-sequence. */
        tcp_send_empty_ack(pcb);
 800e164:	6878      	ldr	r0, [r7, #4]
 800e166:	f001 f8c5 	bl	800f2f4 <tcp_send_empty_ack>
#if TCP_QUEUE_OOSEQ
        /* We queue the segment on the ->ooseq queue. */
        if (pcb->ooseq == NULL) {
 800e16a:	687b      	ldr	r3, [r7, #4]
 800e16c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800e16e:	2b00      	cmp	r3, #0
 800e170:	d106      	bne.n	800e180 <tcp_receive+0xcc0>
          pcb->ooseq = tcp_seg_copy(&inseg);
 800e172:	4848      	ldr	r0, [pc, #288]	; (800e294 <tcp_receive+0xdd4>)
 800e174:	f7fd fc9c 	bl	800bab0 <tcp_seg_copy>
 800e178:	4602      	mov	r2, r0
 800e17a:	687b      	ldr	r3, [r7, #4]
 800e17c:	671a      	str	r2, [r3, #112]	; 0x70
      if (pcb->rcv_nxt == seqno) {
 800e17e:	e16b      	b.n	800e458 <tcp_receive+0xf98>

             If the incoming segment has the same sequence number as a
             segment on the ->ooseq queue, we discard the segment that
             contains less data. */

          prev = NULL;
 800e180:	2300      	movs	r3, #0
 800e182:	62bb      	str	r3, [r7, #40]	; 0x28
          for (next = pcb->ooseq; next != NULL; next = next->next) {
 800e184:	687b      	ldr	r3, [r7, #4]
 800e186:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800e188:	62fb      	str	r3, [r7, #44]	; 0x2c
 800e18a:	e150      	b.n	800e42e <tcp_receive+0xf6e>
            if (seqno == next->tcphdr->seqno) {
 800e18c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e18e:	68db      	ldr	r3, [r3, #12]
 800e190:	685a      	ldr	r2, [r3, #4]
 800e192:	4b41      	ldr	r3, [pc, #260]	; (800e298 <tcp_receive+0xdd8>)
 800e194:	681b      	ldr	r3, [r3, #0]
 800e196:	429a      	cmp	r2, r3
 800e198:	d11d      	bne.n	800e1d6 <tcp_receive+0xd16>
              /* The sequence number of the incoming segment is the
                 same as the sequence number of the segment on
                 ->ooseq. We check the lengths to see which one to
                 discard. */
              if (inseg.len > next->len) {
 800e19a:	4b3e      	ldr	r3, [pc, #248]	; (800e294 <tcp_receive+0xdd4>)
 800e19c:	891a      	ldrh	r2, [r3, #8]
 800e19e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e1a0:	891b      	ldrh	r3, [r3, #8]
 800e1a2:	429a      	cmp	r2, r3
 800e1a4:	f240 8148 	bls.w	800e438 <tcp_receive+0xf78>
                /* The incoming segment is larger than the old
                   segment. We replace some segments with the new
                   one. */
                cseg = tcp_seg_copy(&inseg);
 800e1a8:	483a      	ldr	r0, [pc, #232]	; (800e294 <tcp_receive+0xdd4>)
 800e1aa:	f7fd fc81 	bl	800bab0 <tcp_seg_copy>
 800e1ae:	60f8      	str	r0, [r7, #12]
                if (cseg != NULL) {
 800e1b0:	68fb      	ldr	r3, [r7, #12]
 800e1b2:	2b00      	cmp	r3, #0
 800e1b4:	f000 8142 	beq.w	800e43c <tcp_receive+0xf7c>
                  if (prev != NULL) {
 800e1b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e1ba:	2b00      	cmp	r3, #0
 800e1bc:	d003      	beq.n	800e1c6 <tcp_receive+0xd06>
                    prev->next = cseg;
 800e1be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e1c0:	68fa      	ldr	r2, [r7, #12]
 800e1c2:	601a      	str	r2, [r3, #0]
 800e1c4:	e002      	b.n	800e1cc <tcp_receive+0xd0c>
                  } else {
                    pcb->ooseq = cseg;
 800e1c6:	687b      	ldr	r3, [r7, #4]
 800e1c8:	68fa      	ldr	r2, [r7, #12]
 800e1ca:	671a      	str	r2, [r3, #112]	; 0x70
                  }
                  tcp_oos_insert_segment(cseg, next);
 800e1cc:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800e1ce:	68f8      	ldr	r0, [r7, #12]
 800e1d0:	f7ff f900 	bl	800d3d4 <tcp_oos_insert_segment>
                }
                break;
 800e1d4:	e132      	b.n	800e43c <tcp_receive+0xf7c>
                   segment was smaller than the old one; in either
                   case, we ditch the incoming segment. */
                break;
              }
            } else {
              if (prev == NULL) {
 800e1d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e1d8:	2b00      	cmp	r3, #0
 800e1da:	d117      	bne.n	800e20c <tcp_receive+0xd4c>
                if (TCP_SEQ_LT(seqno, next->tcphdr->seqno)) {
 800e1dc:	4b2e      	ldr	r3, [pc, #184]	; (800e298 <tcp_receive+0xdd8>)
 800e1de:	681a      	ldr	r2, [r3, #0]
 800e1e0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e1e2:	68db      	ldr	r3, [r3, #12]
 800e1e4:	685b      	ldr	r3, [r3, #4]
 800e1e6:	1ad3      	subs	r3, r2, r3
 800e1e8:	2b00      	cmp	r3, #0
 800e1ea:	da57      	bge.n	800e29c <tcp_receive+0xddc>
                  /* The sequence number of the incoming segment is lower
                     than the sequence number of the first segment on the
                     queue. We put the incoming segment first on the
                     queue. */
                  cseg = tcp_seg_copy(&inseg);
 800e1ec:	4829      	ldr	r0, [pc, #164]	; (800e294 <tcp_receive+0xdd4>)
 800e1ee:	f7fd fc5f 	bl	800bab0 <tcp_seg_copy>
 800e1f2:	60f8      	str	r0, [r7, #12]
                  if (cseg != NULL) {
 800e1f4:	68fb      	ldr	r3, [r7, #12]
 800e1f6:	2b00      	cmp	r3, #0
 800e1f8:	f000 8122 	beq.w	800e440 <tcp_receive+0xf80>
                    pcb->ooseq = cseg;
 800e1fc:	687b      	ldr	r3, [r7, #4]
 800e1fe:	68fa      	ldr	r2, [r7, #12]
 800e200:	671a      	str	r2, [r3, #112]	; 0x70
                    tcp_oos_insert_segment(cseg, next);
 800e202:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800e204:	68f8      	ldr	r0, [r7, #12]
 800e206:	f7ff f8e5 	bl	800d3d4 <tcp_oos_insert_segment>
                  }
                  break;
 800e20a:	e119      	b.n	800e440 <tcp_receive+0xf80>
                }
              } else {
                /*if (TCP_SEQ_LT(prev->tcphdr->seqno, seqno) &&
                  TCP_SEQ_LT(seqno, next->tcphdr->seqno)) {*/
                if (TCP_SEQ_BETWEEN(seqno, prev->tcphdr->seqno+1, next->tcphdr->seqno-1)) {
 800e20c:	4b22      	ldr	r3, [pc, #136]	; (800e298 <tcp_receive+0xdd8>)
 800e20e:	681a      	ldr	r2, [r3, #0]
 800e210:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e212:	68db      	ldr	r3, [r3, #12]
 800e214:	685b      	ldr	r3, [r3, #4]
 800e216:	1ad3      	subs	r3, r2, r3
 800e218:	3b01      	subs	r3, #1
 800e21a:	2b00      	cmp	r3, #0
 800e21c:	db3e      	blt.n	800e29c <tcp_receive+0xddc>
 800e21e:	4b1e      	ldr	r3, [pc, #120]	; (800e298 <tcp_receive+0xdd8>)
 800e220:	681a      	ldr	r2, [r3, #0]
 800e222:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e224:	68db      	ldr	r3, [r3, #12]
 800e226:	685b      	ldr	r3, [r3, #4]
 800e228:	1ad3      	subs	r3, r2, r3
 800e22a:	3301      	adds	r3, #1
 800e22c:	2b00      	cmp	r3, #0
 800e22e:	dc35      	bgt.n	800e29c <tcp_receive+0xddc>
                  /* The sequence number of the incoming segment is in
                     between the sequence numbers of the previous and
                     the next segment on ->ooseq. We trim trim the previous
                     segment, delete next segments that included in received segment
                     and trim received, if needed. */
                  cseg = tcp_seg_copy(&inseg);
 800e230:	4818      	ldr	r0, [pc, #96]	; (800e294 <tcp_receive+0xdd4>)
 800e232:	f7fd fc3d 	bl	800bab0 <tcp_seg_copy>
 800e236:	60f8      	str	r0, [r7, #12]
                  if (cseg != NULL) {
 800e238:	68fb      	ldr	r3, [r7, #12]
 800e23a:	2b00      	cmp	r3, #0
 800e23c:	f000 8102 	beq.w	800e444 <tcp_receive+0xf84>
                    if (TCP_SEQ_GT(prev->tcphdr->seqno + prev->len, seqno)) {
 800e240:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e242:	68db      	ldr	r3, [r3, #12]
 800e244:	685b      	ldr	r3, [r3, #4]
 800e246:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800e248:	8912      	ldrh	r2, [r2, #8]
 800e24a:	441a      	add	r2, r3
 800e24c:	4b12      	ldr	r3, [pc, #72]	; (800e298 <tcp_receive+0xdd8>)
 800e24e:	681b      	ldr	r3, [r3, #0]
 800e250:	1ad3      	subs	r3, r2, r3
 800e252:	2b00      	cmp	r3, #0
 800e254:	dd12      	ble.n	800e27c <tcp_receive+0xdbc>
                      /* We need to trim the prev segment. */
                      prev->len = (u16_t)(seqno - prev->tcphdr->seqno);
 800e256:	4b10      	ldr	r3, [pc, #64]	; (800e298 <tcp_receive+0xdd8>)
 800e258:	681b      	ldr	r3, [r3, #0]
 800e25a:	b29a      	uxth	r2, r3
 800e25c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e25e:	68db      	ldr	r3, [r3, #12]
 800e260:	685b      	ldr	r3, [r3, #4]
 800e262:	b29b      	uxth	r3, r3
 800e264:	1ad3      	subs	r3, r2, r3
 800e266:	b29a      	uxth	r2, r3
 800e268:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e26a:	811a      	strh	r2, [r3, #8]
                      pbuf_realloc(prev->p, prev->len);
 800e26c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e26e:	685a      	ldr	r2, [r3, #4]
 800e270:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e272:	891b      	ldrh	r3, [r3, #8]
 800e274:	4619      	mov	r1, r3
 800e276:	4610      	mov	r0, r2
 800e278:	f7fb ffa6 	bl	800a1c8 <pbuf_realloc>
                    }
                    prev->next = cseg;
 800e27c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e27e:	68fa      	ldr	r2, [r7, #12]
 800e280:	601a      	str	r2, [r3, #0]
                    tcp_oos_insert_segment(cseg, next);
 800e282:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800e284:	68f8      	ldr	r0, [r7, #12]
 800e286:	f7ff f8a5 	bl	800d3d4 <tcp_oos_insert_segment>
                  }
                  break;
 800e28a:	e0db      	b.n	800e444 <tcp_receive+0xf84>
 800e28c:	2400863c 	.word	0x2400863c
 800e290:	24008639 	.word	0x24008639
 800e294:	2400860c 	.word	0x2400860c
 800e298:	2400862c 	.word	0x2400862c
                }
              }
              /* If the "next" segment is the last segment on the
                 ooseq queue, we add the incoming segment to the end
                 of the list. */
              if (next->next == NULL &&
 800e29c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e29e:	681b      	ldr	r3, [r3, #0]
 800e2a0:	2b00      	cmp	r3, #0
 800e2a2:	f040 80bf 	bne.w	800e424 <tcp_receive+0xf64>
                  TCP_SEQ_GT(seqno, next->tcphdr->seqno)) {
 800e2a6:	4b7c      	ldr	r3, [pc, #496]	; (800e498 <tcp_receive+0xfd8>)
 800e2a8:	681a      	ldr	r2, [r3, #0]
 800e2aa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e2ac:	68db      	ldr	r3, [r3, #12]
 800e2ae:	685b      	ldr	r3, [r3, #4]
 800e2b0:	1ad3      	subs	r3, r2, r3
              if (next->next == NULL &&
 800e2b2:	2b00      	cmp	r3, #0
 800e2b4:	f340 80b6 	ble.w	800e424 <tcp_receive+0xf64>
                if (TCPH_FLAGS(next->tcphdr) & TCP_FIN) {
 800e2b8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e2ba:	68db      	ldr	r3, [r3, #12]
 800e2bc:	899b      	ldrh	r3, [r3, #12]
 800e2be:	b29b      	uxth	r3, r3
 800e2c0:	4618      	mov	r0, r3
 800e2c2:	f7fa fec9 	bl	8009058 <lwip_htons>
 800e2c6:	4603      	mov	r3, r0
 800e2c8:	f003 0301 	and.w	r3, r3, #1
 800e2cc:	2b00      	cmp	r3, #0
 800e2ce:	f040 80bb 	bne.w	800e448 <tcp_receive+0xf88>
                  /* segment "next" already contains all data */
                  break;
                }
                next->next = tcp_seg_copy(&inseg);
 800e2d2:	4872      	ldr	r0, [pc, #456]	; (800e49c <tcp_receive+0xfdc>)
 800e2d4:	f7fd fbec 	bl	800bab0 <tcp_seg_copy>
 800e2d8:	4602      	mov	r2, r0
 800e2da:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e2dc:	601a      	str	r2, [r3, #0]
                if (next->next != NULL) {
 800e2de:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e2e0:	681b      	ldr	r3, [r3, #0]
 800e2e2:	2b00      	cmp	r3, #0
 800e2e4:	f000 80b2 	beq.w	800e44c <tcp_receive+0xf8c>
                  if (TCP_SEQ_GT(next->tcphdr->seqno + next->len, seqno)) {
 800e2e8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e2ea:	68db      	ldr	r3, [r3, #12]
 800e2ec:	685b      	ldr	r3, [r3, #4]
 800e2ee:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800e2f0:	8912      	ldrh	r2, [r2, #8]
 800e2f2:	441a      	add	r2, r3
 800e2f4:	4b68      	ldr	r3, [pc, #416]	; (800e498 <tcp_receive+0xfd8>)
 800e2f6:	681b      	ldr	r3, [r3, #0]
 800e2f8:	1ad3      	subs	r3, r2, r3
 800e2fa:	2b00      	cmp	r3, #0
 800e2fc:	dd12      	ble.n	800e324 <tcp_receive+0xe64>
                    /* We need to trim the last segment. */
                    next->len = (u16_t)(seqno - next->tcphdr->seqno);
 800e2fe:	4b66      	ldr	r3, [pc, #408]	; (800e498 <tcp_receive+0xfd8>)
 800e300:	681b      	ldr	r3, [r3, #0]
 800e302:	b29a      	uxth	r2, r3
 800e304:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e306:	68db      	ldr	r3, [r3, #12]
 800e308:	685b      	ldr	r3, [r3, #4]
 800e30a:	b29b      	uxth	r3, r3
 800e30c:	1ad3      	subs	r3, r2, r3
 800e30e:	b29a      	uxth	r2, r3
 800e310:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e312:	811a      	strh	r2, [r3, #8]
                    pbuf_realloc(next->p, next->len);
 800e314:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e316:	685a      	ldr	r2, [r3, #4]
 800e318:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e31a:	891b      	ldrh	r3, [r3, #8]
 800e31c:	4619      	mov	r1, r3
 800e31e:	4610      	mov	r0, r2
 800e320:	f7fb ff52 	bl	800a1c8 <pbuf_realloc>
                  }
                  /* check if the remote side overruns our receive window */
                  if (TCP_SEQ_GT((u32_t)tcplen + seqno, pcb->rcv_nxt + (u32_t)pcb->rcv_wnd)) {
 800e324:	4b5e      	ldr	r3, [pc, #376]	; (800e4a0 <tcp_receive+0xfe0>)
 800e326:	881b      	ldrh	r3, [r3, #0]
 800e328:	461a      	mov	r2, r3
 800e32a:	4b5b      	ldr	r3, [pc, #364]	; (800e498 <tcp_receive+0xfd8>)
 800e32c:	681b      	ldr	r3, [r3, #0]
 800e32e:	441a      	add	r2, r3
 800e330:	687b      	ldr	r3, [r7, #4]
 800e332:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e334:	6879      	ldr	r1, [r7, #4]
 800e336:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 800e338:	440b      	add	r3, r1
 800e33a:	1ad3      	subs	r3, r2, r3
 800e33c:	2b00      	cmp	r3, #0
 800e33e:	f340 8085 	ble.w	800e44c <tcp_receive+0xf8c>
                    LWIP_DEBUGF(TCP_INPUT_DEBUG,
                                ("tcp_receive: other end overran receive window"
                                 "seqno %"U32_F" len %"U16_F" right edge %"U32_F"\n",
                                 seqno, tcplen, pcb->rcv_nxt + pcb->rcv_wnd));
                    if (TCPH_FLAGS(next->next->tcphdr) & TCP_FIN) {
 800e342:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e344:	681b      	ldr	r3, [r3, #0]
 800e346:	68db      	ldr	r3, [r3, #12]
 800e348:	899b      	ldrh	r3, [r3, #12]
 800e34a:	b29b      	uxth	r3, r3
 800e34c:	4618      	mov	r0, r3
 800e34e:	f7fa fe83 	bl	8009058 <lwip_htons>
 800e352:	4603      	mov	r3, r0
 800e354:	f003 0301 	and.w	r3, r3, #1
 800e358:	2b00      	cmp	r3, #0
 800e35a:	d01e      	beq.n	800e39a <tcp_receive+0xeda>
                      /* Must remove the FIN from the header as we're trimming
                       * that byte of sequence-space from the packet */
                      TCPH_FLAGS_SET(next->next->tcphdr, TCPH_FLAGS(next->next->tcphdr) & ~TCP_FIN);
 800e35c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e35e:	681b      	ldr	r3, [r3, #0]
 800e360:	68db      	ldr	r3, [r3, #12]
 800e362:	899b      	ldrh	r3, [r3, #12]
 800e364:	b29b      	uxth	r3, r3
 800e366:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 800e36a:	b29c      	uxth	r4, r3
 800e36c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e36e:	681b      	ldr	r3, [r3, #0]
 800e370:	68db      	ldr	r3, [r3, #12]
 800e372:	899b      	ldrh	r3, [r3, #12]
 800e374:	b29b      	uxth	r3, r3
 800e376:	4618      	mov	r0, r3
 800e378:	f7fa fe6e 	bl	8009058 <lwip_htons>
 800e37c:	4603      	mov	r3, r0
 800e37e:	f003 033e 	and.w	r3, r3, #62	; 0x3e
 800e382:	b29b      	uxth	r3, r3
 800e384:	4618      	mov	r0, r3
 800e386:	f7fa fe67 	bl	8009058 <lwip_htons>
 800e38a:	4603      	mov	r3, r0
 800e38c:	461a      	mov	r2, r3
 800e38e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e390:	681b      	ldr	r3, [r3, #0]
 800e392:	68db      	ldr	r3, [r3, #12]
 800e394:	4322      	orrs	r2, r4
 800e396:	b292      	uxth	r2, r2
 800e398:	819a      	strh	r2, [r3, #12]
                    }
                    /* Adjust length of segment to fit in the window. */
                    next->next->len = (u16_t)(pcb->rcv_nxt + pcb->rcv_wnd - seqno);
 800e39a:	687b      	ldr	r3, [r7, #4]
 800e39c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e39e:	b29a      	uxth	r2, r3
 800e3a0:	687b      	ldr	r3, [r7, #4]
 800e3a2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800e3a4:	4413      	add	r3, r2
 800e3a6:	b299      	uxth	r1, r3
 800e3a8:	4b3b      	ldr	r3, [pc, #236]	; (800e498 <tcp_receive+0xfd8>)
 800e3aa:	681b      	ldr	r3, [r3, #0]
 800e3ac:	b29a      	uxth	r2, r3
 800e3ae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e3b0:	681b      	ldr	r3, [r3, #0]
 800e3b2:	1a8a      	subs	r2, r1, r2
 800e3b4:	b292      	uxth	r2, r2
 800e3b6:	811a      	strh	r2, [r3, #8]
                    pbuf_realloc(next->next->p, next->next->len);
 800e3b8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e3ba:	681b      	ldr	r3, [r3, #0]
 800e3bc:	685a      	ldr	r2, [r3, #4]
 800e3be:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e3c0:	681b      	ldr	r3, [r3, #0]
 800e3c2:	891b      	ldrh	r3, [r3, #8]
 800e3c4:	4619      	mov	r1, r3
 800e3c6:	4610      	mov	r0, r2
 800e3c8:	f7fb fefe 	bl	800a1c8 <pbuf_realloc>
                    tcplen = TCP_TCPLEN(next->next);
 800e3cc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e3ce:	681b      	ldr	r3, [r3, #0]
 800e3d0:	891c      	ldrh	r4, [r3, #8]
 800e3d2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e3d4:	681b      	ldr	r3, [r3, #0]
 800e3d6:	68db      	ldr	r3, [r3, #12]
 800e3d8:	899b      	ldrh	r3, [r3, #12]
 800e3da:	b29b      	uxth	r3, r3
 800e3dc:	4618      	mov	r0, r3
 800e3de:	f7fa fe3b 	bl	8009058 <lwip_htons>
 800e3e2:	4603      	mov	r3, r0
 800e3e4:	f003 0303 	and.w	r3, r3, #3
 800e3e8:	2b00      	cmp	r3, #0
 800e3ea:	d001      	beq.n	800e3f0 <tcp_receive+0xf30>
 800e3ec:	2301      	movs	r3, #1
 800e3ee:	e000      	b.n	800e3f2 <tcp_receive+0xf32>
 800e3f0:	2300      	movs	r3, #0
 800e3f2:	4423      	add	r3, r4
 800e3f4:	b29a      	uxth	r2, r3
 800e3f6:	4b2a      	ldr	r3, [pc, #168]	; (800e4a0 <tcp_receive+0xfe0>)
 800e3f8:	801a      	strh	r2, [r3, #0]
                    LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 800e3fa:	4b29      	ldr	r3, [pc, #164]	; (800e4a0 <tcp_receive+0xfe0>)
 800e3fc:	881b      	ldrh	r3, [r3, #0]
 800e3fe:	461a      	mov	r2, r3
 800e400:	4b25      	ldr	r3, [pc, #148]	; (800e498 <tcp_receive+0xfd8>)
 800e402:	681b      	ldr	r3, [r3, #0]
 800e404:	441a      	add	r2, r3
 800e406:	687b      	ldr	r3, [r7, #4]
 800e408:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e40a:	6879      	ldr	r1, [r7, #4]
 800e40c:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 800e40e:	440b      	add	r3, r1
 800e410:	429a      	cmp	r2, r3
 800e412:	d01b      	beq.n	800e44c <tcp_receive+0xf8c>
 800e414:	4b23      	ldr	r3, [pc, #140]	; (800e4a4 <tcp_receive+0xfe4>)
 800e416:	f240 627b 	movw	r2, #1659	; 0x67b
 800e41a:	4923      	ldr	r1, [pc, #140]	; (800e4a8 <tcp_receive+0xfe8>)
 800e41c:	4823      	ldr	r0, [pc, #140]	; (800e4ac <tcp_receive+0xfec>)
 800e41e:	f007 fbd9 	bl	8015bd4 <printf_>
                                (seqno + tcplen) == (pcb->rcv_nxt + pcb->rcv_wnd));
                  }
                }
                break;
 800e422:	e013      	b.n	800e44c <tcp_receive+0xf8c>
              }
            }
            prev = next;
 800e424:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e426:	62bb      	str	r3, [r7, #40]	; 0x28
          for (next = pcb->ooseq; next != NULL; next = next->next) {
 800e428:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e42a:	681b      	ldr	r3, [r3, #0]
 800e42c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800e42e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e430:	2b00      	cmp	r3, #0
 800e432:	f47f aeab 	bne.w	800e18c <tcp_receive+0xccc>
      if (pcb->rcv_nxt == seqno) {
 800e436:	e00f      	b.n	800e458 <tcp_receive+0xf98>
                break;
 800e438:	bf00      	nop
 800e43a:	e00d      	b.n	800e458 <tcp_receive+0xf98>
                break;
 800e43c:	bf00      	nop
 800e43e:	e00b      	b.n	800e458 <tcp_receive+0xf98>
                  break;
 800e440:	bf00      	nop
 800e442:	e009      	b.n	800e458 <tcp_receive+0xf98>
                  break;
 800e444:	bf00      	nop
 800e446:	e007      	b.n	800e458 <tcp_receive+0xf98>
                  break;
 800e448:	bf00      	nop
 800e44a:	e005      	b.n	800e458 <tcp_receive+0xf98>
                break;
 800e44c:	bf00      	nop
      if (pcb->rcv_nxt == seqno) {
 800e44e:	e003      	b.n	800e458 <tcp_receive+0xf98>
#endif /* TCP_OOSEQ_MAX_BYTES || TCP_OOSEQ_MAX_PBUFS */
#endif /* TCP_QUEUE_OOSEQ */
      }
    } else {
      /* The incoming segment is not within the window. */
      tcp_send_empty_ack(pcb);
 800e450:	6878      	ldr	r0, [r7, #4]
 800e452:	f000 ff4f 	bl	800f2f4 <tcp_send_empty_ack>
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 800e456:	e01a      	b.n	800e48e <tcp_receive+0xfce>
 800e458:	e019      	b.n	800e48e <tcp_receive+0xfce>
    }
  } else {
    /* Segments with length 0 is taken care of here. Segments that
       fall out of the window are ACKed. */
    if (!TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd - 1)) {
 800e45a:	4b0f      	ldr	r3, [pc, #60]	; (800e498 <tcp_receive+0xfd8>)
 800e45c:	681a      	ldr	r2, [r3, #0]
 800e45e:	687b      	ldr	r3, [r7, #4]
 800e460:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e462:	1ad3      	subs	r3, r2, r3
 800e464:	2b00      	cmp	r3, #0
 800e466:	db0a      	blt.n	800e47e <tcp_receive+0xfbe>
 800e468:	4b0b      	ldr	r3, [pc, #44]	; (800e498 <tcp_receive+0xfd8>)
 800e46a:	681a      	ldr	r2, [r3, #0]
 800e46c:	687b      	ldr	r3, [r7, #4]
 800e46e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e470:	6879      	ldr	r1, [r7, #4]
 800e472:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 800e474:	440b      	add	r3, r1
 800e476:	1ad3      	subs	r3, r2, r3
 800e478:	3301      	adds	r3, #1
 800e47a:	2b00      	cmp	r3, #0
 800e47c:	dd07      	ble.n	800e48e <tcp_receive+0xfce>
      tcp_ack_now(pcb);
 800e47e:	687b      	ldr	r3, [r7, #4]
 800e480:	7e9b      	ldrb	r3, [r3, #26]
 800e482:	f043 0302 	orr.w	r3, r3, #2
 800e486:	b2da      	uxtb	r2, r3
 800e488:	687b      	ldr	r3, [r7, #4]
 800e48a:	769a      	strb	r2, [r3, #26]
    }
  }
}
 800e48c:	e7ff      	b.n	800e48e <tcp_receive+0xfce>
 800e48e:	bf00      	nop
 800e490:	3734      	adds	r7, #52	; 0x34
 800e492:	46bd      	mov	sp, r7
 800e494:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800e496:	bf00      	nop
 800e498:	2400862c 	.word	0x2400862c
 800e49c:	2400860c 	.word	0x2400860c
 800e4a0:	24008636 	.word	0x24008636
 800e4a4:	0801af54 	.word	0x0801af54
 800e4a8:	0801b220 	.word	0x0801b220
 800e4ac:	0801af98 	.word	0x0801af98

0800e4b0 <tcp_getoptbyte>:

static u8_t
tcp_getoptbyte(void)
{
 800e4b0:	b480      	push	{r7}
 800e4b2:	b083      	sub	sp, #12
 800e4b4:	af00      	add	r7, sp, #0
  if ((tcphdr_opt2 == NULL) || (tcp_optidx < tcphdr_opt1len)) {
 800e4b6:	4b18      	ldr	r3, [pc, #96]	; (800e518 <tcp_getoptbyte+0x68>)
 800e4b8:	681b      	ldr	r3, [r3, #0]
 800e4ba:	2b00      	cmp	r3, #0
 800e4bc:	d005      	beq.n	800e4ca <tcp_getoptbyte+0x1a>
 800e4be:	4b17      	ldr	r3, [pc, #92]	; (800e51c <tcp_getoptbyte+0x6c>)
 800e4c0:	881a      	ldrh	r2, [r3, #0]
 800e4c2:	4b17      	ldr	r3, [pc, #92]	; (800e520 <tcp_getoptbyte+0x70>)
 800e4c4:	881b      	ldrh	r3, [r3, #0]
 800e4c6:	429a      	cmp	r2, r3
 800e4c8:	d20e      	bcs.n	800e4e8 <tcp_getoptbyte+0x38>
    u8_t* opts = (u8_t *)tcphdr + TCP_HLEN;
 800e4ca:	4b16      	ldr	r3, [pc, #88]	; (800e524 <tcp_getoptbyte+0x74>)
 800e4cc:	681b      	ldr	r3, [r3, #0]
 800e4ce:	3314      	adds	r3, #20
 800e4d0:	603b      	str	r3, [r7, #0]
    return opts[tcp_optidx++];
 800e4d2:	4b12      	ldr	r3, [pc, #72]	; (800e51c <tcp_getoptbyte+0x6c>)
 800e4d4:	881b      	ldrh	r3, [r3, #0]
 800e4d6:	1c5a      	adds	r2, r3, #1
 800e4d8:	b291      	uxth	r1, r2
 800e4da:	4a10      	ldr	r2, [pc, #64]	; (800e51c <tcp_getoptbyte+0x6c>)
 800e4dc:	8011      	strh	r1, [r2, #0]
 800e4de:	461a      	mov	r2, r3
 800e4e0:	683b      	ldr	r3, [r7, #0]
 800e4e2:	4413      	add	r3, r2
 800e4e4:	781b      	ldrb	r3, [r3, #0]
 800e4e6:	e010      	b.n	800e50a <tcp_getoptbyte+0x5a>
  } else {
    u8_t idx = (u8_t)(tcp_optidx++ - tcphdr_opt1len);
 800e4e8:	4b0c      	ldr	r3, [pc, #48]	; (800e51c <tcp_getoptbyte+0x6c>)
 800e4ea:	881b      	ldrh	r3, [r3, #0]
 800e4ec:	1c5a      	adds	r2, r3, #1
 800e4ee:	b291      	uxth	r1, r2
 800e4f0:	4a0a      	ldr	r2, [pc, #40]	; (800e51c <tcp_getoptbyte+0x6c>)
 800e4f2:	8011      	strh	r1, [r2, #0]
 800e4f4:	b2da      	uxtb	r2, r3
 800e4f6:	4b0a      	ldr	r3, [pc, #40]	; (800e520 <tcp_getoptbyte+0x70>)
 800e4f8:	881b      	ldrh	r3, [r3, #0]
 800e4fa:	b2db      	uxtb	r3, r3
 800e4fc:	1ad3      	subs	r3, r2, r3
 800e4fe:	71fb      	strb	r3, [r7, #7]
    return tcphdr_opt2[idx];
 800e500:	4b05      	ldr	r3, [pc, #20]	; (800e518 <tcp_getoptbyte+0x68>)
 800e502:	681a      	ldr	r2, [r3, #0]
 800e504:	79fb      	ldrb	r3, [r7, #7]
 800e506:	4413      	add	r3, r2
 800e508:	781b      	ldrb	r3, [r3, #0]
  }
}
 800e50a:	4618      	mov	r0, r3
 800e50c:	370c      	adds	r7, #12
 800e50e:	46bd      	mov	sp, r7
 800e510:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e514:	4770      	bx	lr
 800e516:	bf00      	nop
 800e518:	24008624 	.word	0x24008624
 800e51c:	24008628 	.word	0x24008628
 800e520:	24008622 	.word	0x24008622
 800e524:	2400861c 	.word	0x2400861c

0800e528 <tcp_parseopt>:
 *
 * @param pcb the tcp_pcb for which a segment arrived
 */
static void
tcp_parseopt(struct tcp_pcb *pcb)
{
 800e528:	b580      	push	{r7, lr}
 800e52a:	b084      	sub	sp, #16
 800e52c:	af00      	add	r7, sp, #0
 800e52e:	6078      	str	r0, [r7, #4]
#if LWIP_TCP_TIMESTAMPS
  u32_t tsval;
#endif

  /* Parse the TCP MSS option, if present. */
  if (tcphdr_optlen != 0) {
 800e530:	4b2d      	ldr	r3, [pc, #180]	; (800e5e8 <tcp_parseopt+0xc0>)
 800e532:	881b      	ldrh	r3, [r3, #0]
 800e534:	2b00      	cmp	r3, #0
 800e536:	d054      	beq.n	800e5e2 <tcp_parseopt+0xba>
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 800e538:	4b2c      	ldr	r3, [pc, #176]	; (800e5ec <tcp_parseopt+0xc4>)
 800e53a:	2200      	movs	r2, #0
 800e53c:	801a      	strh	r2, [r3, #0]
 800e53e:	e044      	b.n	800e5ca <tcp_parseopt+0xa2>
      u8_t opt = tcp_getoptbyte();
 800e540:	f7ff ffb6 	bl	800e4b0 <tcp_getoptbyte>
 800e544:	4603      	mov	r3, r0
 800e546:	73fb      	strb	r3, [r7, #15]
      switch (opt) {
 800e548:	7bfb      	ldrb	r3, [r7, #15]
 800e54a:	2b01      	cmp	r3, #1
 800e54c:	d03d      	beq.n	800e5ca <tcp_parseopt+0xa2>
 800e54e:	2b02      	cmp	r3, #2
 800e550:	d002      	beq.n	800e558 <tcp_parseopt+0x30>
 800e552:	2b00      	cmp	r3, #0
 800e554:	d040      	beq.n	800e5d8 <tcp_parseopt+0xb0>
 800e556:	e027      	b.n	800e5a8 <tcp_parseopt+0x80>
        /* NOP option. */
        LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: NOP\n"));
        break;
      case LWIP_TCP_OPT_MSS:
        LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: MSS\n"));
        if (tcp_getoptbyte() != LWIP_TCP_OPT_LEN_MSS || (tcp_optidx - 2 + LWIP_TCP_OPT_LEN_MSS) > tcphdr_optlen) {
 800e558:	f7ff ffaa 	bl	800e4b0 <tcp_getoptbyte>
 800e55c:	4603      	mov	r3, r0
 800e55e:	2b04      	cmp	r3, #4
 800e560:	d13c      	bne.n	800e5dc <tcp_parseopt+0xb4>
 800e562:	4b22      	ldr	r3, [pc, #136]	; (800e5ec <tcp_parseopt+0xc4>)
 800e564:	881b      	ldrh	r3, [r3, #0]
 800e566:	3302      	adds	r3, #2
 800e568:	4a1f      	ldr	r2, [pc, #124]	; (800e5e8 <tcp_parseopt+0xc0>)
 800e56a:	8812      	ldrh	r2, [r2, #0]
 800e56c:	4293      	cmp	r3, r2
 800e56e:	dc35      	bgt.n	800e5dc <tcp_parseopt+0xb4>
          /* Bad length */
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: bad length\n"));
          return;
        }
        /* An MSS option with the right option length. */
        mss = (tcp_getoptbyte() << 8);
 800e570:	f7ff ff9e 	bl	800e4b0 <tcp_getoptbyte>
 800e574:	4603      	mov	r3, r0
 800e576:	b29b      	uxth	r3, r3
 800e578:	021b      	lsls	r3, r3, #8
 800e57a:	81bb      	strh	r3, [r7, #12]
        mss |= tcp_getoptbyte();
 800e57c:	f7ff ff98 	bl	800e4b0 <tcp_getoptbyte>
 800e580:	4603      	mov	r3, r0
 800e582:	b29a      	uxth	r2, r3
 800e584:	89bb      	ldrh	r3, [r7, #12]
 800e586:	4313      	orrs	r3, r2
 800e588:	81bb      	strh	r3, [r7, #12]
        /* Limit the mss to the configured TCP_MSS and prevent division by zero */
        pcb->mss = ((mss > TCP_MSS) || (mss == 0)) ? TCP_MSS : mss;
 800e58a:	89bb      	ldrh	r3, [r7, #12]
 800e58c:	f240 52b4 	movw	r2, #1460	; 0x5b4
 800e590:	4293      	cmp	r3, r2
 800e592:	d804      	bhi.n	800e59e <tcp_parseopt+0x76>
 800e594:	89bb      	ldrh	r3, [r7, #12]
 800e596:	2b00      	cmp	r3, #0
 800e598:	d001      	beq.n	800e59e <tcp_parseopt+0x76>
 800e59a:	89ba      	ldrh	r2, [r7, #12]
 800e59c:	e001      	b.n	800e5a2 <tcp_parseopt+0x7a>
 800e59e:	f240 52b4 	movw	r2, #1460	; 0x5b4
 800e5a2:	687b      	ldr	r3, [r7, #4]
 800e5a4:	865a      	strh	r2, [r3, #50]	; 0x32
        break;
 800e5a6:	e010      	b.n	800e5ca <tcp_parseopt+0xa2>
        tcp_optidx += LWIP_TCP_OPT_LEN_TS - 6;
        break;
#endif
      default:
        LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: other\n"));
        data = tcp_getoptbyte();
 800e5a8:	f7ff ff82 	bl	800e4b0 <tcp_getoptbyte>
 800e5ac:	4603      	mov	r3, r0
 800e5ae:	72fb      	strb	r3, [r7, #11]
        if (data < 2) {
 800e5b0:	7afb      	ldrb	r3, [r7, #11]
 800e5b2:	2b01      	cmp	r3, #1
 800e5b4:	d914      	bls.n	800e5e0 <tcp_parseopt+0xb8>
             and we don't process them further. */
          return;
        }
        /* All other options have a length field, so that we easily
           can skip past them. */
        tcp_optidx += data - 2;
 800e5b6:	7afb      	ldrb	r3, [r7, #11]
 800e5b8:	b29a      	uxth	r2, r3
 800e5ba:	4b0c      	ldr	r3, [pc, #48]	; (800e5ec <tcp_parseopt+0xc4>)
 800e5bc:	881b      	ldrh	r3, [r3, #0]
 800e5be:	4413      	add	r3, r2
 800e5c0:	b29b      	uxth	r3, r3
 800e5c2:	3b02      	subs	r3, #2
 800e5c4:	b29a      	uxth	r2, r3
 800e5c6:	4b09      	ldr	r3, [pc, #36]	; (800e5ec <tcp_parseopt+0xc4>)
 800e5c8:	801a      	strh	r2, [r3, #0]
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 800e5ca:	4b08      	ldr	r3, [pc, #32]	; (800e5ec <tcp_parseopt+0xc4>)
 800e5cc:	881a      	ldrh	r2, [r3, #0]
 800e5ce:	4b06      	ldr	r3, [pc, #24]	; (800e5e8 <tcp_parseopt+0xc0>)
 800e5d0:	881b      	ldrh	r3, [r3, #0]
 800e5d2:	429a      	cmp	r2, r3
 800e5d4:	d3b4      	bcc.n	800e540 <tcp_parseopt+0x18>
 800e5d6:	e004      	b.n	800e5e2 <tcp_parseopt+0xba>
        return;
 800e5d8:	bf00      	nop
 800e5da:	e002      	b.n	800e5e2 <tcp_parseopt+0xba>
          return;
 800e5dc:	bf00      	nop
 800e5de:	e000      	b.n	800e5e2 <tcp_parseopt+0xba>
          return;
 800e5e0:	bf00      	nop
      }
    }
  }
}
 800e5e2:	3710      	adds	r7, #16
 800e5e4:	46bd      	mov	sp, r7
 800e5e6:	bd80      	pop	{r7, pc}
 800e5e8:	24008620 	.word	0x24008620
 800e5ec:	24008628 	.word	0x24008628

0800e5f0 <tcp_trigger_input_pcb_close>:

void
tcp_trigger_input_pcb_close(void)
{
 800e5f0:	b480      	push	{r7}
 800e5f2:	af00      	add	r7, sp, #0
  recv_flags |= TF_CLOSED;
 800e5f4:	4b05      	ldr	r3, [pc, #20]	; (800e60c <tcp_trigger_input_pcb_close+0x1c>)
 800e5f6:	781b      	ldrb	r3, [r3, #0]
 800e5f8:	f043 0310 	orr.w	r3, r3, #16
 800e5fc:	b2da      	uxtb	r2, r3
 800e5fe:	4b03      	ldr	r3, [pc, #12]	; (800e60c <tcp_trigger_input_pcb_close+0x1c>)
 800e600:	701a      	strb	r2, [r3, #0]
}
 800e602:	bf00      	nop
 800e604:	46bd      	mov	sp, r7
 800e606:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e60a:	4770      	bx	lr
 800e60c:	24008639 	.word	0x24008639

0800e610 <tcp_output_alloc_header>:
 * @return pbuf with p->payload being the tcp_hdr
 */
static struct pbuf *
tcp_output_alloc_header(struct tcp_pcb *pcb, u16_t optlen, u16_t datalen,
                      u32_t seqno_be /* already in network byte order */)
{
 800e610:	b580      	push	{r7, lr}
 800e612:	b086      	sub	sp, #24
 800e614:	af00      	add	r7, sp, #0
 800e616:	60f8      	str	r0, [r7, #12]
 800e618:	607b      	str	r3, [r7, #4]
 800e61a:	460b      	mov	r3, r1
 800e61c:	817b      	strh	r3, [r7, #10]
 800e61e:	4613      	mov	r3, r2
 800e620:	813b      	strh	r3, [r7, #8]
  struct tcp_hdr *tcphdr;
  struct pbuf *p = pbuf_alloc(PBUF_IP, TCP_HLEN + optlen + datalen, PBUF_RAM);
 800e622:	897a      	ldrh	r2, [r7, #10]
 800e624:	893b      	ldrh	r3, [r7, #8]
 800e626:	4413      	add	r3, r2
 800e628:	b29b      	uxth	r3, r3
 800e62a:	3314      	adds	r3, #20
 800e62c:	b29b      	uxth	r3, r3
 800e62e:	2200      	movs	r2, #0
 800e630:	4619      	mov	r1, r3
 800e632:	2001      	movs	r0, #1
 800e634:	f7fb fbca 	bl	8009dcc <pbuf_alloc>
 800e638:	6178      	str	r0, [r7, #20]
  if (p != NULL) {
 800e63a:	697b      	ldr	r3, [r7, #20]
 800e63c:	2b00      	cmp	r3, #0
 800e63e:	d057      	beq.n	800e6f0 <tcp_output_alloc_header+0xe0>
    LWIP_ASSERT("check that first pbuf can hold struct tcp_hdr",
 800e640:	697b      	ldr	r3, [r7, #20]
 800e642:	895b      	ldrh	r3, [r3, #10]
 800e644:	461a      	mov	r2, r3
 800e646:	897b      	ldrh	r3, [r7, #10]
 800e648:	3314      	adds	r3, #20
 800e64a:	429a      	cmp	r2, r3
 800e64c:	da05      	bge.n	800e65a <tcp_output_alloc_header+0x4a>
 800e64e:	4b2b      	ldr	r3, [pc, #172]	; (800e6fc <tcp_output_alloc_header+0xec>)
 800e650:	2273      	movs	r2, #115	; 0x73
 800e652:	492b      	ldr	r1, [pc, #172]	; (800e700 <tcp_output_alloc_header+0xf0>)
 800e654:	482b      	ldr	r0, [pc, #172]	; (800e704 <tcp_output_alloc_header+0xf4>)
 800e656:	f007 fabd 	bl	8015bd4 <printf_>
                 (p->len >= TCP_HLEN + optlen));
    tcphdr = (struct tcp_hdr *)p->payload;
 800e65a:	697b      	ldr	r3, [r7, #20]
 800e65c:	685b      	ldr	r3, [r3, #4]
 800e65e:	613b      	str	r3, [r7, #16]
    tcphdr->src = lwip_htons(pcb->local_port);
 800e660:	68fb      	ldr	r3, [r7, #12]
 800e662:	8adb      	ldrh	r3, [r3, #22]
 800e664:	4618      	mov	r0, r3
 800e666:	f7fa fcf7 	bl	8009058 <lwip_htons>
 800e66a:	4603      	mov	r3, r0
 800e66c:	461a      	mov	r2, r3
 800e66e:	693b      	ldr	r3, [r7, #16]
 800e670:	801a      	strh	r2, [r3, #0]
    tcphdr->dest = lwip_htons(pcb->remote_port);
 800e672:	68fb      	ldr	r3, [r7, #12]
 800e674:	8b1b      	ldrh	r3, [r3, #24]
 800e676:	4618      	mov	r0, r3
 800e678:	f7fa fcee 	bl	8009058 <lwip_htons>
 800e67c:	4603      	mov	r3, r0
 800e67e:	461a      	mov	r2, r3
 800e680:	693b      	ldr	r3, [r7, #16]
 800e682:	805a      	strh	r2, [r3, #2]
    tcphdr->seqno = seqno_be;
 800e684:	693b      	ldr	r3, [r7, #16]
 800e686:	687a      	ldr	r2, [r7, #4]
 800e688:	605a      	str	r2, [r3, #4]
    tcphdr->ackno = lwip_htonl(pcb->rcv_nxt);
 800e68a:	68fb      	ldr	r3, [r7, #12]
 800e68c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e68e:	4618      	mov	r0, r3
 800e690:	f7fa fcf0 	bl	8009074 <lwip_htonl>
 800e694:	4602      	mov	r2, r0
 800e696:	693b      	ldr	r3, [r7, #16]
 800e698:	609a      	str	r2, [r3, #8]
    TCPH_HDRLEN_FLAGS_SET(tcphdr, (5 + optlen / 4), TCP_ACK);
 800e69a:	897b      	ldrh	r3, [r7, #10]
 800e69c:	089b      	lsrs	r3, r3, #2
 800e69e:	b29b      	uxth	r3, r3
 800e6a0:	3305      	adds	r3, #5
 800e6a2:	b29b      	uxth	r3, r3
 800e6a4:	031b      	lsls	r3, r3, #12
 800e6a6:	b29b      	uxth	r3, r3
 800e6a8:	f043 0310 	orr.w	r3, r3, #16
 800e6ac:	b29b      	uxth	r3, r3
 800e6ae:	4618      	mov	r0, r3
 800e6b0:	f7fa fcd2 	bl	8009058 <lwip_htons>
 800e6b4:	4603      	mov	r3, r0
 800e6b6:	461a      	mov	r2, r3
 800e6b8:	693b      	ldr	r3, [r7, #16]
 800e6ba:	819a      	strh	r2, [r3, #12]
    tcphdr->wnd = lwip_htons(TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
 800e6bc:	68fb      	ldr	r3, [r7, #12]
 800e6be:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800e6c0:	4618      	mov	r0, r3
 800e6c2:	f7fa fcc9 	bl	8009058 <lwip_htons>
 800e6c6:	4603      	mov	r3, r0
 800e6c8:	461a      	mov	r2, r3
 800e6ca:	693b      	ldr	r3, [r7, #16]
 800e6cc:	81da      	strh	r2, [r3, #14]
    tcphdr->chksum = 0;
 800e6ce:	693b      	ldr	r3, [r7, #16]
 800e6d0:	2200      	movs	r2, #0
 800e6d2:	741a      	strb	r2, [r3, #16]
 800e6d4:	2200      	movs	r2, #0
 800e6d6:	745a      	strb	r2, [r3, #17]
    tcphdr->urgp = 0;
 800e6d8:	693b      	ldr	r3, [r7, #16]
 800e6da:	2200      	movs	r2, #0
 800e6dc:	749a      	strb	r2, [r3, #18]
 800e6de:	2200      	movs	r2, #0
 800e6e0:	74da      	strb	r2, [r3, #19]

    /* If we're sending a packet, update the announced right window edge */
    pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 800e6e2:	68fb      	ldr	r3, [r7, #12]
 800e6e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e6e6:	68fa      	ldr	r2, [r7, #12]
 800e6e8:	8d52      	ldrh	r2, [r2, #42]	; 0x2a
 800e6ea:	441a      	add	r2, r3
 800e6ec:	68fb      	ldr	r3, [r7, #12]
 800e6ee:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  return p;
 800e6f0:	697b      	ldr	r3, [r7, #20]
}
 800e6f2:	4618      	mov	r0, r3
 800e6f4:	3718      	adds	r7, #24
 800e6f6:	46bd      	mov	sp, r7
 800e6f8:	bd80      	pop	{r7, pc}
 800e6fa:	bf00      	nop
 800e6fc:	0801b2dc 	.word	0x0801b2dc
 800e700:	0801b310 	.word	0x0801b310
 800e704:	0801b340 	.word	0x0801b340

0800e708 <tcp_send_fin>:
 * @param pcb the tcp_pcb over which to send a segment
 * @return ERR_OK if sent, another err_t otherwise
 */
err_t
tcp_send_fin(struct tcp_pcb *pcb)
{
 800e708:	b590      	push	{r4, r7, lr}
 800e70a:	b085      	sub	sp, #20
 800e70c:	af00      	add	r7, sp, #0
 800e70e:	6078      	str	r0, [r7, #4]
  /* first, try to add the fin to the last unsent segment */
  if (pcb->unsent != NULL) {
 800e710:	687b      	ldr	r3, [r7, #4]
 800e712:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800e714:	2b00      	cmp	r3, #0
 800e716:	d02d      	beq.n	800e774 <tcp_send_fin+0x6c>
    struct tcp_seg *last_unsent;
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 800e718:	687b      	ldr	r3, [r7, #4]
 800e71a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800e71c:	60fb      	str	r3, [r7, #12]
 800e71e:	e002      	b.n	800e726 <tcp_send_fin+0x1e>
         last_unsent = last_unsent->next);
 800e720:	68fb      	ldr	r3, [r7, #12]
 800e722:	681b      	ldr	r3, [r3, #0]
 800e724:	60fb      	str	r3, [r7, #12]
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 800e726:	68fb      	ldr	r3, [r7, #12]
 800e728:	681b      	ldr	r3, [r3, #0]
 800e72a:	2b00      	cmp	r3, #0
 800e72c:	d1f8      	bne.n	800e720 <tcp_send_fin+0x18>

    if ((TCPH_FLAGS(last_unsent->tcphdr) & (TCP_SYN | TCP_FIN | TCP_RST)) == 0) {
 800e72e:	68fb      	ldr	r3, [r7, #12]
 800e730:	68db      	ldr	r3, [r3, #12]
 800e732:	899b      	ldrh	r3, [r3, #12]
 800e734:	b29b      	uxth	r3, r3
 800e736:	4618      	mov	r0, r3
 800e738:	f7fa fc8e 	bl	8009058 <lwip_htons>
 800e73c:	4603      	mov	r3, r0
 800e73e:	f003 0307 	and.w	r3, r3, #7
 800e742:	2b00      	cmp	r3, #0
 800e744:	d116      	bne.n	800e774 <tcp_send_fin+0x6c>
      /* no SYN/FIN/RST flag in the header, we can add the FIN flag */
      TCPH_SET_FLAG(last_unsent->tcphdr, TCP_FIN);
 800e746:	68fb      	ldr	r3, [r7, #12]
 800e748:	68db      	ldr	r3, [r3, #12]
 800e74a:	899b      	ldrh	r3, [r3, #12]
 800e74c:	b29c      	uxth	r4, r3
 800e74e:	2001      	movs	r0, #1
 800e750:	f7fa fc82 	bl	8009058 <lwip_htons>
 800e754:	4603      	mov	r3, r0
 800e756:	461a      	mov	r2, r3
 800e758:	68fb      	ldr	r3, [r7, #12]
 800e75a:	68db      	ldr	r3, [r3, #12]
 800e75c:	4322      	orrs	r2, r4
 800e75e:	b292      	uxth	r2, r2
 800e760:	819a      	strh	r2, [r3, #12]
      pcb->flags |= TF_FIN;
 800e762:	687b      	ldr	r3, [r7, #4]
 800e764:	7e9b      	ldrb	r3, [r3, #26]
 800e766:	f043 0320 	orr.w	r3, r3, #32
 800e76a:	b2da      	uxtb	r2, r3
 800e76c:	687b      	ldr	r3, [r7, #4]
 800e76e:	769a      	strb	r2, [r3, #26]
      return ERR_OK;
 800e770:	2300      	movs	r3, #0
 800e772:	e004      	b.n	800e77e <tcp_send_fin+0x76>
    }
  }
  /* no data, no length, flags, copy=1, no optdata */
  return tcp_enqueue_flags(pcb, TCP_FIN);
 800e774:	2101      	movs	r1, #1
 800e776:	6878      	ldr	r0, [r7, #4]
 800e778:	f000 fcc0 	bl	800f0fc <tcp_enqueue_flags>
 800e77c:	4603      	mov	r3, r0
}
 800e77e:	4618      	mov	r0, r3
 800e780:	3714      	adds	r7, #20
 800e782:	46bd      	mov	sp, r7
 800e784:	bd90      	pop	{r4, r7, pc}
	...

0800e788 <tcp_create_segment>:
 * The TCP header is filled in except ackno and wnd.
 * p is freed on failure.
 */
static struct tcp_seg *
tcp_create_segment(struct tcp_pcb *pcb, struct pbuf *p, u8_t flags, u32_t seqno, u8_t optflags)
{
 800e788:	b590      	push	{r4, r7, lr}
 800e78a:	b087      	sub	sp, #28
 800e78c:	af00      	add	r7, sp, #0
 800e78e:	60f8      	str	r0, [r7, #12]
 800e790:	60b9      	str	r1, [r7, #8]
 800e792:	603b      	str	r3, [r7, #0]
 800e794:	4613      	mov	r3, r2
 800e796:	71fb      	strb	r3, [r7, #7]
  struct tcp_seg *seg;
  u8_t optlen = LWIP_TCP_OPT_LENGTH(optflags);
 800e798:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800e79c:	009b      	lsls	r3, r3, #2
 800e79e:	b2db      	uxtb	r3, r3
 800e7a0:	f003 0304 	and.w	r3, r3, #4
 800e7a4:	75fb      	strb	r3, [r7, #23]

  if ((seg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG)) == NULL) {
 800e7a6:	2003      	movs	r0, #3
 800e7a8:	f7fb f862 	bl	8009870 <memp_malloc>
 800e7ac:	6138      	str	r0, [r7, #16]
 800e7ae:	693b      	ldr	r3, [r7, #16]
 800e7b0:	2b00      	cmp	r3, #0
 800e7b2:	d104      	bne.n	800e7be <tcp_create_segment+0x36>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_create_segment: no memory.\n"));
    pbuf_free(p);
 800e7b4:	68b8      	ldr	r0, [r7, #8]
 800e7b6:	f7fb fe7b 	bl	800a4b0 <pbuf_free>
    return NULL;
 800e7ba:	2300      	movs	r3, #0
 800e7bc:	e061      	b.n	800e882 <tcp_create_segment+0xfa>
  }
  seg->flags = optflags;
 800e7be:	693b      	ldr	r3, [r7, #16]
 800e7c0:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 800e7c4:	729a      	strb	r2, [r3, #10]
  seg->next = NULL;
 800e7c6:	693b      	ldr	r3, [r7, #16]
 800e7c8:	2200      	movs	r2, #0
 800e7ca:	601a      	str	r2, [r3, #0]
  seg->p = p;
 800e7cc:	693b      	ldr	r3, [r7, #16]
 800e7ce:	68ba      	ldr	r2, [r7, #8]
 800e7d0:	605a      	str	r2, [r3, #4]
  LWIP_ASSERT("p->tot_len >= optlen", p->tot_len >= optlen);
 800e7d2:	68bb      	ldr	r3, [r7, #8]
 800e7d4:	891a      	ldrh	r2, [r3, #8]
 800e7d6:	7dfb      	ldrb	r3, [r7, #23]
 800e7d8:	b29b      	uxth	r3, r3
 800e7da:	429a      	cmp	r2, r3
 800e7dc:	d205      	bcs.n	800e7ea <tcp_create_segment+0x62>
 800e7de:	4b2b      	ldr	r3, [pc, #172]	; (800e88c <tcp_create_segment+0x104>)
 800e7e0:	22ba      	movs	r2, #186	; 0xba
 800e7e2:	492b      	ldr	r1, [pc, #172]	; (800e890 <tcp_create_segment+0x108>)
 800e7e4:	482b      	ldr	r0, [pc, #172]	; (800e894 <tcp_create_segment+0x10c>)
 800e7e6:	f007 f9f5 	bl	8015bd4 <printf_>
  seg->len = p->tot_len - optlen;
 800e7ea:	68bb      	ldr	r3, [r7, #8]
 800e7ec:	891a      	ldrh	r2, [r3, #8]
 800e7ee:	7dfb      	ldrb	r3, [r7, #23]
 800e7f0:	b29b      	uxth	r3, r3
 800e7f2:	1ad3      	subs	r3, r2, r3
 800e7f4:	b29a      	uxth	r2, r3
 800e7f6:	693b      	ldr	r3, [r7, #16]
 800e7f8:	811a      	strh	r2, [r3, #8]
  LWIP_ASSERT("invalid optflags passed: TF_SEG_DATA_CHECKSUMMED",
              (optflags & TF_SEG_DATA_CHECKSUMMED) == 0);
#endif /* TCP_CHECKSUM_ON_COPY */

  /* build TCP header */
  if (pbuf_header(p, TCP_HLEN)) {
 800e7fa:	2114      	movs	r1, #20
 800e7fc:	68b8      	ldr	r0, [r7, #8]
 800e7fe:	f7fb fe33 	bl	800a468 <pbuf_header>
 800e802:	4603      	mov	r3, r0
 800e804:	2b00      	cmp	r3, #0
 800e806:	d004      	beq.n	800e812 <tcp_create_segment+0x8a>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_create_segment: no room for TCP header in pbuf.\n"));
    TCP_STATS_INC(tcp.err);
    tcp_seg_free(seg);
 800e808:	6938      	ldr	r0, [r7, #16]
 800e80a:	f7fd f939 	bl	800ba80 <tcp_seg_free>
    return NULL;
 800e80e:	2300      	movs	r3, #0
 800e810:	e037      	b.n	800e882 <tcp_create_segment+0xfa>
  }
  seg->tcphdr = (struct tcp_hdr *)seg->p->payload;
 800e812:	693b      	ldr	r3, [r7, #16]
 800e814:	685b      	ldr	r3, [r3, #4]
 800e816:	685a      	ldr	r2, [r3, #4]
 800e818:	693b      	ldr	r3, [r7, #16]
 800e81a:	60da      	str	r2, [r3, #12]
  seg->tcphdr->src = lwip_htons(pcb->local_port);
 800e81c:	68fb      	ldr	r3, [r7, #12]
 800e81e:	8ada      	ldrh	r2, [r3, #22]
 800e820:	693b      	ldr	r3, [r7, #16]
 800e822:	68dc      	ldr	r4, [r3, #12]
 800e824:	4610      	mov	r0, r2
 800e826:	f7fa fc17 	bl	8009058 <lwip_htons>
 800e82a:	4603      	mov	r3, r0
 800e82c:	8023      	strh	r3, [r4, #0]
  seg->tcphdr->dest = lwip_htons(pcb->remote_port);
 800e82e:	68fb      	ldr	r3, [r7, #12]
 800e830:	8b1a      	ldrh	r2, [r3, #24]
 800e832:	693b      	ldr	r3, [r7, #16]
 800e834:	68dc      	ldr	r4, [r3, #12]
 800e836:	4610      	mov	r0, r2
 800e838:	f7fa fc0e 	bl	8009058 <lwip_htons>
 800e83c:	4603      	mov	r3, r0
 800e83e:	8063      	strh	r3, [r4, #2]
  seg->tcphdr->seqno = lwip_htonl(seqno);
 800e840:	693b      	ldr	r3, [r7, #16]
 800e842:	68dc      	ldr	r4, [r3, #12]
 800e844:	6838      	ldr	r0, [r7, #0]
 800e846:	f7fa fc15 	bl	8009074 <lwip_htonl>
 800e84a:	4603      	mov	r3, r0
 800e84c:	6063      	str	r3, [r4, #4]
  /* ackno is set in tcp_output */
  TCPH_HDRLEN_FLAGS_SET(seg->tcphdr, (5 + optlen / 4), flags);
 800e84e:	7dfb      	ldrb	r3, [r7, #23]
 800e850:	089b      	lsrs	r3, r3, #2
 800e852:	b2db      	uxtb	r3, r3
 800e854:	b29b      	uxth	r3, r3
 800e856:	3305      	adds	r3, #5
 800e858:	b29b      	uxth	r3, r3
 800e85a:	031b      	lsls	r3, r3, #12
 800e85c:	b29a      	uxth	r2, r3
 800e85e:	79fb      	ldrb	r3, [r7, #7]
 800e860:	b29b      	uxth	r3, r3
 800e862:	4313      	orrs	r3, r2
 800e864:	b29a      	uxth	r2, r3
 800e866:	693b      	ldr	r3, [r7, #16]
 800e868:	68dc      	ldr	r4, [r3, #12]
 800e86a:	4610      	mov	r0, r2
 800e86c:	f7fa fbf4 	bl	8009058 <lwip_htons>
 800e870:	4603      	mov	r3, r0
 800e872:	81a3      	strh	r3, [r4, #12]
  /* wnd and chksum are set in tcp_output */
  seg->tcphdr->urgp = 0;
 800e874:	693b      	ldr	r3, [r7, #16]
 800e876:	68db      	ldr	r3, [r3, #12]
 800e878:	2200      	movs	r2, #0
 800e87a:	749a      	strb	r2, [r3, #18]
 800e87c:	2200      	movs	r2, #0
 800e87e:	74da      	strb	r2, [r3, #19]
  return seg;
 800e880:	693b      	ldr	r3, [r7, #16]
}
 800e882:	4618      	mov	r0, r3
 800e884:	371c      	adds	r7, #28
 800e886:	46bd      	mov	sp, r7
 800e888:	bd90      	pop	{r4, r7, pc}
 800e88a:	bf00      	nop
 800e88c:	0801b2dc 	.word	0x0801b2dc
 800e890:	0801b368 	.word	0x0801b368
 800e894:	0801b340 	.word	0x0801b340

0800e898 <tcp_pbuf_prealloc>:
#if TCP_OVERSIZE
static struct pbuf *
tcp_pbuf_prealloc(pbuf_layer layer, u16_t length, u16_t max_length,
                  u16_t *oversize, struct tcp_pcb *pcb, u8_t apiflags,
                  u8_t first_seg)
{
 800e898:	b580      	push	{r7, lr}
 800e89a:	b086      	sub	sp, #24
 800e89c:	af00      	add	r7, sp, #0
 800e89e:	607b      	str	r3, [r7, #4]
 800e8a0:	4603      	mov	r3, r0
 800e8a2:	73fb      	strb	r3, [r7, #15]
 800e8a4:	460b      	mov	r3, r1
 800e8a6:	81bb      	strh	r3, [r7, #12]
 800e8a8:	4613      	mov	r3, r2
 800e8aa:	817b      	strh	r3, [r7, #10]
  struct pbuf *p;
  u16_t alloc = length;
 800e8ac:	89bb      	ldrh	r3, [r7, #12]
 800e8ae:	82fb      	strh	r3, [r7, #22]
  LWIP_UNUSED_ARG(pcb);
  LWIP_UNUSED_ARG(apiflags);
  LWIP_UNUSED_ARG(first_seg);
  alloc = max_length;
#else /* LWIP_NETIF_TX_SINGLE_PBUF */
  if (length < max_length) {
 800e8b0:	89ba      	ldrh	r2, [r7, #12]
 800e8b2:	897b      	ldrh	r3, [r7, #10]
 800e8b4:	429a      	cmp	r2, r3
 800e8b6:	d221      	bcs.n	800e8fc <tcp_pbuf_prealloc+0x64>
     *
     * Did the user set TCP_WRITE_FLAG_MORE?
     *
     * Will the Nagle algorithm defer transmission of this segment?
     */
    if ((apiflags & TCP_WRITE_FLAG_MORE) ||
 800e8b8:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800e8bc:	f003 0302 	and.w	r3, r3, #2
 800e8c0:	2b00      	cmp	r3, #0
 800e8c2:	d111      	bne.n	800e8e8 <tcp_pbuf_prealloc+0x50>
        (!(pcb->flags & TF_NODELAY) &&
 800e8c4:	6a3b      	ldr	r3, [r7, #32]
 800e8c6:	7e9b      	ldrb	r3, [r3, #26]
 800e8c8:	f003 0340 	and.w	r3, r3, #64	; 0x40
    if ((apiflags & TCP_WRITE_FLAG_MORE) ||
 800e8cc:	2b00      	cmp	r3, #0
 800e8ce:	d115      	bne.n	800e8fc <tcp_pbuf_prealloc+0x64>
        (!(pcb->flags & TF_NODELAY) &&
 800e8d0:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800e8d4:	2b00      	cmp	r3, #0
 800e8d6:	d007      	beq.n	800e8e8 <tcp_pbuf_prealloc+0x50>
         (!first_seg ||
          pcb->unsent != NULL ||
 800e8d8:	6a3b      	ldr	r3, [r7, #32]
 800e8da:	6e9b      	ldr	r3, [r3, #104]	; 0x68
         (!first_seg ||
 800e8dc:	2b00      	cmp	r3, #0
 800e8de:	d103      	bne.n	800e8e8 <tcp_pbuf_prealloc+0x50>
          pcb->unacked != NULL))) {
 800e8e0:	6a3b      	ldr	r3, [r7, #32]
 800e8e2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
          pcb->unsent != NULL ||
 800e8e4:	2b00      	cmp	r3, #0
 800e8e6:	d009      	beq.n	800e8fc <tcp_pbuf_prealloc+0x64>
      alloc = LWIP_MIN(max_length, LWIP_MEM_ALIGN_SIZE(TCP_OVERSIZE_CALC_LENGTH(length)));
 800e8e8:	89bb      	ldrh	r3, [r7, #12]
 800e8ea:	f203 53b7 	addw	r3, r3, #1463	; 0x5b7
 800e8ee:	f023 0203 	bic.w	r2, r3, #3
 800e8f2:	897b      	ldrh	r3, [r7, #10]
 800e8f4:	4293      	cmp	r3, r2
 800e8f6:	bf28      	it	cs
 800e8f8:	4613      	movcs	r3, r2
 800e8fa:	82fb      	strh	r3, [r7, #22]
    }
  }
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */
  p = pbuf_alloc(layer, alloc, PBUF_RAM);
 800e8fc:	8af9      	ldrh	r1, [r7, #22]
 800e8fe:	7bfb      	ldrb	r3, [r7, #15]
 800e900:	2200      	movs	r2, #0
 800e902:	4618      	mov	r0, r3
 800e904:	f7fb fa62 	bl	8009dcc <pbuf_alloc>
 800e908:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 800e90a:	693b      	ldr	r3, [r7, #16]
 800e90c:	2b00      	cmp	r3, #0
 800e90e:	d101      	bne.n	800e914 <tcp_pbuf_prealloc+0x7c>
    return NULL;
 800e910:	2300      	movs	r3, #0
 800e912:	e019      	b.n	800e948 <tcp_pbuf_prealloc+0xb0>
  }
  LWIP_ASSERT("need unchained pbuf", p->next == NULL);
 800e914:	693b      	ldr	r3, [r7, #16]
 800e916:	681b      	ldr	r3, [r3, #0]
 800e918:	2b00      	cmp	r3, #0
 800e91a:	d006      	beq.n	800e92a <tcp_pbuf_prealloc+0x92>
 800e91c:	4b0c      	ldr	r3, [pc, #48]	; (800e950 <tcp_pbuf_prealloc+0xb8>)
 800e91e:	f44f 7288 	mov.w	r2, #272	; 0x110
 800e922:	490c      	ldr	r1, [pc, #48]	; (800e954 <tcp_pbuf_prealloc+0xbc>)
 800e924:	480c      	ldr	r0, [pc, #48]	; (800e958 <tcp_pbuf_prealloc+0xc0>)
 800e926:	f007 f955 	bl	8015bd4 <printf_>
  *oversize = p->len - length;
 800e92a:	693b      	ldr	r3, [r7, #16]
 800e92c:	895a      	ldrh	r2, [r3, #10]
 800e92e:	89bb      	ldrh	r3, [r7, #12]
 800e930:	1ad3      	subs	r3, r2, r3
 800e932:	b29a      	uxth	r2, r3
 800e934:	687b      	ldr	r3, [r7, #4]
 800e936:	801a      	strh	r2, [r3, #0]
  /* trim p->len to the currently used size */
  p->len = p->tot_len = length;
 800e938:	693b      	ldr	r3, [r7, #16]
 800e93a:	89ba      	ldrh	r2, [r7, #12]
 800e93c:	811a      	strh	r2, [r3, #8]
 800e93e:	693b      	ldr	r3, [r7, #16]
 800e940:	891a      	ldrh	r2, [r3, #8]
 800e942:	693b      	ldr	r3, [r7, #16]
 800e944:	815a      	strh	r2, [r3, #10]
  return p;
 800e946:	693b      	ldr	r3, [r7, #16]
}
 800e948:	4618      	mov	r0, r3
 800e94a:	3718      	adds	r7, #24
 800e94c:	46bd      	mov	sp, r7
 800e94e:	bd80      	pop	{r7, pc}
 800e950:	0801b2dc 	.word	0x0801b2dc
 800e954:	0801b380 	.word	0x0801b380
 800e958:	0801b340 	.word	0x0801b340

0800e95c <tcp_write_checks>:
 * @param len length of data to send (checked agains snd_buf)
 * @return ERR_OK if tcp_write is allowed to proceed, another err_t otherwise
 */
static err_t
tcp_write_checks(struct tcp_pcb *pcb, u16_t len)
{
 800e95c:	b580      	push	{r7, lr}
 800e95e:	b082      	sub	sp, #8
 800e960:	af00      	add	r7, sp, #0
 800e962:	6078      	str	r0, [r7, #4]
 800e964:	460b      	mov	r3, r1
 800e966:	807b      	strh	r3, [r7, #2]
  /* connection is in invalid state for data transmission? */
  if ((pcb->state != ESTABLISHED) &&
 800e968:	687b      	ldr	r3, [r7, #4]
 800e96a:	7d1b      	ldrb	r3, [r3, #20]
 800e96c:	2b04      	cmp	r3, #4
 800e96e:	d00e      	beq.n	800e98e <tcp_write_checks+0x32>
      (pcb->state != CLOSE_WAIT) &&
 800e970:	687b      	ldr	r3, [r7, #4]
 800e972:	7d1b      	ldrb	r3, [r3, #20]
  if ((pcb->state != ESTABLISHED) &&
 800e974:	2b07      	cmp	r3, #7
 800e976:	d00a      	beq.n	800e98e <tcp_write_checks+0x32>
      (pcb->state != SYN_SENT) &&
 800e978:	687b      	ldr	r3, [r7, #4]
 800e97a:	7d1b      	ldrb	r3, [r3, #20]
      (pcb->state != CLOSE_WAIT) &&
 800e97c:	2b02      	cmp	r3, #2
 800e97e:	d006      	beq.n	800e98e <tcp_write_checks+0x32>
      (pcb->state != SYN_RCVD)) {
 800e980:	687b      	ldr	r3, [r7, #4]
 800e982:	7d1b      	ldrb	r3, [r3, #20]
      (pcb->state != SYN_SENT) &&
 800e984:	2b03      	cmp	r3, #3
 800e986:	d002      	beq.n	800e98e <tcp_write_checks+0x32>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_STATE | LWIP_DBG_LEVEL_SEVERE, ("tcp_write() called in invalid state\n"));
    return ERR_CONN;
 800e988:	f06f 030a 	mvn.w	r3, #10
 800e98c:	e04f      	b.n	800ea2e <tcp_write_checks+0xd2>
  } else if (len == 0) {
 800e98e:	887b      	ldrh	r3, [r7, #2]
 800e990:	2b00      	cmp	r3, #0
 800e992:	d101      	bne.n	800e998 <tcp_write_checks+0x3c>
    return ERR_OK;
 800e994:	2300      	movs	r3, #0
 800e996:	e04a      	b.n	800ea2e <tcp_write_checks+0xd2>
  }

  /* fail on too much data */
  if (len > pcb->snd_buf) {
 800e998:	687b      	ldr	r3, [r7, #4]
 800e99a:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800e99e:	887a      	ldrh	r2, [r7, #2]
 800e9a0:	429a      	cmp	r2, r3
 800e9a2:	d909      	bls.n	800e9b8 <tcp_write_checks+0x5c>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("tcp_write: too much data (len=%"U16_F" > snd_buf=%"TCPWNDSIZE_F")\n",
      len, pcb->snd_buf));
    pcb->flags |= TF_NAGLEMEMERR;
 800e9a4:	687b      	ldr	r3, [r7, #4]
 800e9a6:	7e9b      	ldrb	r3, [r3, #26]
 800e9a8:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800e9ac:	b2da      	uxtb	r2, r3
 800e9ae:	687b      	ldr	r3, [r7, #4]
 800e9b0:	769a      	strb	r2, [r3, #26]
    return ERR_MEM;
 800e9b2:	f04f 33ff 	mov.w	r3, #4294967295
 800e9b6:	e03a      	b.n	800ea2e <tcp_write_checks+0xd2>
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_write: queuelen: %"TCPWNDSIZE_F"\n", (tcpwnd_size_t)pcb->snd_queuelen));

  /* If total number of pbufs on the unsent/unacked queues exceeds the
   * configured maximum, return an error */
  /* check for configured max queuelen and possible overflow */
  if ((pcb->snd_queuelen >= TCP_SND_QUEUELEN) || (pcb->snd_queuelen > TCP_SNDQUEUELEN_OVERFLOW)) {
 800e9b8:	687b      	ldr	r3, [r7, #4]
 800e9ba:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800e9be:	2b08      	cmp	r3, #8
 800e9c0:	d806      	bhi.n	800e9d0 <tcp_write_checks+0x74>
 800e9c2:	687b      	ldr	r3, [r7, #4]
 800e9c4:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800e9c8:	f64f 72fc 	movw	r2, #65532	; 0xfffc
 800e9cc:	4293      	cmp	r3, r2
 800e9ce:	d909      	bls.n	800e9e4 <tcp_write_checks+0x88>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("tcp_write: too long queue %"U16_F" (max %"U16_F")\n",
      pcb->snd_queuelen, (u16_t)TCP_SND_QUEUELEN));
    TCP_STATS_INC(tcp.memerr);
    pcb->flags |= TF_NAGLEMEMERR;
 800e9d0:	687b      	ldr	r3, [r7, #4]
 800e9d2:	7e9b      	ldrb	r3, [r3, #26]
 800e9d4:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800e9d8:	b2da      	uxtb	r2, r3
 800e9da:	687b      	ldr	r3, [r7, #4]
 800e9dc:	769a      	strb	r2, [r3, #26]
    return ERR_MEM;
 800e9de:	f04f 33ff 	mov.w	r3, #4294967295
 800e9e2:	e024      	b.n	800ea2e <tcp_write_checks+0xd2>
  }
  if (pcb->snd_queuelen != 0) {
 800e9e4:	687b      	ldr	r3, [r7, #4]
 800e9e6:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800e9ea:	2b00      	cmp	r3, #0
 800e9ec:	d00f      	beq.n	800ea0e <tcp_write_checks+0xb2>
    LWIP_ASSERT("tcp_write: pbufs on queue => at least one queue non-empty",
 800e9ee:	687b      	ldr	r3, [r7, #4]
 800e9f0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800e9f2:	2b00      	cmp	r3, #0
 800e9f4:	d11a      	bne.n	800ea2c <tcp_write_checks+0xd0>
 800e9f6:	687b      	ldr	r3, [r7, #4]
 800e9f8:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800e9fa:	2b00      	cmp	r3, #0
 800e9fc:	d116      	bne.n	800ea2c <tcp_write_checks+0xd0>
 800e9fe:	4b0e      	ldr	r3, [pc, #56]	; (800ea38 <tcp_write_checks+0xdc>)
 800ea00:	f44f 72ab 	mov.w	r2, #342	; 0x156
 800ea04:	490d      	ldr	r1, [pc, #52]	; (800ea3c <tcp_write_checks+0xe0>)
 800ea06:	480e      	ldr	r0, [pc, #56]	; (800ea40 <tcp_write_checks+0xe4>)
 800ea08:	f007 f8e4 	bl	8015bd4 <printf_>
 800ea0c:	e00e      	b.n	800ea2c <tcp_write_checks+0xd0>
      pcb->unacked != NULL || pcb->unsent != NULL);
  } else {
    LWIP_ASSERT("tcp_write: no pbufs on queue => both queues empty",
 800ea0e:	687b      	ldr	r3, [r7, #4]
 800ea10:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800ea12:	2b00      	cmp	r3, #0
 800ea14:	d103      	bne.n	800ea1e <tcp_write_checks+0xc2>
 800ea16:	687b      	ldr	r3, [r7, #4]
 800ea18:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800ea1a:	2b00      	cmp	r3, #0
 800ea1c:	d006      	beq.n	800ea2c <tcp_write_checks+0xd0>
 800ea1e:	4b06      	ldr	r3, [pc, #24]	; (800ea38 <tcp_write_checks+0xdc>)
 800ea20:	f240 1259 	movw	r2, #345	; 0x159
 800ea24:	4907      	ldr	r1, [pc, #28]	; (800ea44 <tcp_write_checks+0xe8>)
 800ea26:	4806      	ldr	r0, [pc, #24]	; (800ea40 <tcp_write_checks+0xe4>)
 800ea28:	f007 f8d4 	bl	8015bd4 <printf_>
      pcb->unacked == NULL && pcb->unsent == NULL);
  }
  return ERR_OK;
 800ea2c:	2300      	movs	r3, #0
}
 800ea2e:	4618      	mov	r0, r3
 800ea30:	3708      	adds	r7, #8
 800ea32:	46bd      	mov	sp, r7
 800ea34:	bd80      	pop	{r7, pc}
 800ea36:	bf00      	nop
 800ea38:	0801b2dc 	.word	0x0801b2dc
 800ea3c:	0801b394 	.word	0x0801b394
 800ea40:	0801b340 	.word	0x0801b340
 800ea44:	0801b3d0 	.word	0x0801b3d0

0800ea48 <tcp_write>:
 * - TCP_WRITE_FLAG_MORE (0x02) for TCP connection, PSH flag will not be set on last segment sent,
 * @return ERR_OK if enqueued, another err_t on error
 */
err_t
tcp_write(struct tcp_pcb *pcb, const void *arg, u16_t len, u8_t apiflags)
{
 800ea48:	b590      	push	{r4, r7, lr}
 800ea4a:	b09b      	sub	sp, #108	; 0x6c
 800ea4c:	af04      	add	r7, sp, #16
 800ea4e:	60f8      	str	r0, [r7, #12]
 800ea50:	60b9      	str	r1, [r7, #8]
 800ea52:	4611      	mov	r1, r2
 800ea54:	461a      	mov	r2, r3
 800ea56:	460b      	mov	r3, r1
 800ea58:	80fb      	strh	r3, [r7, #6]
 800ea5a:	4613      	mov	r3, r2
 800ea5c:	717b      	strb	r3, [r7, #5]
  struct pbuf *concat_p = NULL;
 800ea5e:	2300      	movs	r3, #0
 800ea60:	657b      	str	r3, [r7, #84]	; 0x54
  struct tcp_seg *last_unsent = NULL, *seg = NULL, *prev_seg = NULL, *queue = NULL;
 800ea62:	2300      	movs	r3, #0
 800ea64:	653b      	str	r3, [r7, #80]	; 0x50
 800ea66:	2300      	movs	r3, #0
 800ea68:	64fb      	str	r3, [r7, #76]	; 0x4c
 800ea6a:	2300      	movs	r3, #0
 800ea6c:	64bb      	str	r3, [r7, #72]	; 0x48
 800ea6e:	2300      	movs	r3, #0
 800ea70:	647b      	str	r3, [r7, #68]	; 0x44
  u16_t pos = 0; /* position in 'arg' data */
 800ea72:	2300      	movs	r3, #0
 800ea74:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
  u16_t queuelen;
  u8_t optlen = 0;
 800ea78:	2300      	movs	r3, #0
 800ea7a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  u8_t optflags = 0;
 800ea7e:	2300      	movs	r3, #0
 800ea80:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
#if TCP_OVERSIZE
  u16_t oversize = 0;
 800ea84:	2300      	movs	r3, #0
 800ea86:	827b      	strh	r3, [r7, #18]
  u16_t oversize_used = 0;
 800ea88:	2300      	movs	r3, #0
 800ea8a:	87fb      	strh	r3, [r7, #62]	; 0x3e
#if TCP_OVERSIZE_DBGCHECK
  u16_t oversize_add = 0;
#endif /* TCP_OVERSIZE_DBGCHECK*/
#endif /* TCP_OVERSIZE */
  u16_t extendlen = 0;
 800ea8c:	2300      	movs	r3, #0
 800ea8e:	87bb      	strh	r3, [r7, #60]	; 0x3c
  u8_t concat_chksum_swapped = 0;
  u16_t concat_chksummed = 0;
#endif /* TCP_CHECKSUM_ON_COPY */
  err_t err;
  /* don't allocate segments bigger than half the maximum window we ever received */
  u16_t mss_local = LWIP_MIN(pcb->mss, TCPWND_MIN16(pcb->snd_wnd_max/2));
 800ea90:	68fb      	ldr	r3, [r7, #12]
 800ea92:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800ea96:	085b      	lsrs	r3, r3, #1
 800ea98:	b29a      	uxth	r2, r3
 800ea9a:	68fb      	ldr	r3, [r7, #12]
 800ea9c:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800ea9e:	4293      	cmp	r3, r2
 800eaa0:	bf28      	it	cs
 800eaa2:	4613      	movcs	r3, r2
 800eaa4:	84bb      	strh	r3, [r7, #36]	; 0x24
  mss_local = mss_local ? mss_local : pcb->mss;
 800eaa6:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800eaa8:	2b00      	cmp	r3, #0
 800eaaa:	d102      	bne.n	800eab2 <tcp_write+0x6a>
 800eaac:	68fb      	ldr	r3, [r7, #12]
 800eaae:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800eab0:	e000      	b.n	800eab4 <tcp_write+0x6c>
 800eab2:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800eab4:	84bb      	strh	r3, [r7, #36]	; 0x24
  apiflags |= TCP_WRITE_FLAG_COPY;
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */

  LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_write(pcb=%p, data=%p, len=%"U16_F", apiflags=%"U16_F")\n",
    (void *)pcb, arg, len, (u16_t)apiflags));
  LWIP_ERROR("tcp_write: arg == NULL (programmer violates API)",
 800eab6:	68bb      	ldr	r3, [r7, #8]
 800eab8:	2b00      	cmp	r3, #0
 800eaba:	d109      	bne.n	800ead0 <tcp_write+0x88>
 800eabc:	4b92      	ldr	r3, [pc, #584]	; (800ed08 <tcp_write+0x2c0>)
 800eabe:	f44f 72c9 	mov.w	r2, #402	; 0x192
 800eac2:	4992      	ldr	r1, [pc, #584]	; (800ed0c <tcp_write+0x2c4>)
 800eac4:	4892      	ldr	r0, [pc, #584]	; (800ed10 <tcp_write+0x2c8>)
 800eac6:	f007 f885 	bl	8015bd4 <printf_>
 800eaca:	f06f 030f 	mvn.w	r3, #15
 800eace:	e30a      	b.n	800f0e6 <tcp_write+0x69e>
             arg != NULL, return ERR_ARG;);

  err = tcp_write_checks(pcb, len);
 800ead0:	88fb      	ldrh	r3, [r7, #6]
 800ead2:	4619      	mov	r1, r3
 800ead4:	68f8      	ldr	r0, [r7, #12]
 800ead6:	f7ff ff41 	bl	800e95c <tcp_write_checks>
 800eada:	4603      	mov	r3, r0
 800eadc:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  if (err != ERR_OK) {
 800eae0:	f997 3023 	ldrsb.w	r3, [r7, #35]	; 0x23
 800eae4:	2b00      	cmp	r3, #0
 800eae6:	d002      	beq.n	800eaee <tcp_write+0xa6>
    return err;
 800eae8:	f997 3023 	ldrsb.w	r3, [r7, #35]	; 0x23
 800eaec:	e2fb      	b.n	800f0e6 <tcp_write+0x69e>
  }
  queuelen = pcb->snd_queuelen;
 800eaee:	68fb      	ldr	r3, [r7, #12]
 800eaf0:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800eaf4:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
   *
   * pos records progress as data is segmented.
   */

  /* Find the tail of the unsent queue. */
  if (pcb->unsent != NULL) {
 800eaf8:	68fb      	ldr	r3, [r7, #12]
 800eafa:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800eafc:	2b00      	cmp	r3, #0
 800eafe:	f000 80f5 	beq.w	800ecec <tcp_write+0x2a4>
    u16_t space;
    u16_t unsent_optlen;

    /* @todo: this could be sped up by keeping last_unsent in the pcb */
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 800eb02:	68fb      	ldr	r3, [r7, #12]
 800eb04:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800eb06:	653b      	str	r3, [r7, #80]	; 0x50
 800eb08:	e002      	b.n	800eb10 <tcp_write+0xc8>
         last_unsent = last_unsent->next);
 800eb0a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800eb0c:	681b      	ldr	r3, [r3, #0]
 800eb0e:	653b      	str	r3, [r7, #80]	; 0x50
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 800eb10:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800eb12:	681b      	ldr	r3, [r3, #0]
 800eb14:	2b00      	cmp	r3, #0
 800eb16:	d1f8      	bne.n	800eb0a <tcp_write+0xc2>

    /* Usable space at the end of the last unsent segment */
    unsent_optlen = LWIP_TCP_OPT_LENGTH(last_unsent->flags);
 800eb18:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800eb1a:	7a9b      	ldrb	r3, [r3, #10]
 800eb1c:	009b      	lsls	r3, r3, #2
 800eb1e:	b29b      	uxth	r3, r3
 800eb20:	f003 0304 	and.w	r3, r3, #4
 800eb24:	843b      	strh	r3, [r7, #32]
    LWIP_ASSERT("mss_local is too small", mss_local >= last_unsent->len + unsent_optlen);
 800eb26:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800eb28:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800eb2a:	891b      	ldrh	r3, [r3, #8]
 800eb2c:	4619      	mov	r1, r3
 800eb2e:	8c3b      	ldrh	r3, [r7, #32]
 800eb30:	440b      	add	r3, r1
 800eb32:	429a      	cmp	r2, r3
 800eb34:	da06      	bge.n	800eb44 <tcp_write+0xfc>
 800eb36:	4b74      	ldr	r3, [pc, #464]	; (800ed08 <tcp_write+0x2c0>)
 800eb38:	f240 12c7 	movw	r2, #455	; 0x1c7
 800eb3c:	4975      	ldr	r1, [pc, #468]	; (800ed14 <tcp_write+0x2cc>)
 800eb3e:	4874      	ldr	r0, [pc, #464]	; (800ed10 <tcp_write+0x2c8>)
 800eb40:	f007 f848 	bl	8015bd4 <printf_>
    space = mss_local - (last_unsent->len + unsent_optlen);
 800eb44:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800eb46:	891a      	ldrh	r2, [r3, #8]
 800eb48:	8c3b      	ldrh	r3, [r7, #32]
 800eb4a:	4413      	add	r3, r2
 800eb4c:	b29b      	uxth	r3, r3
 800eb4e:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800eb50:	1ad3      	subs	r3, r2, r3
 800eb52:	877b      	strh	r3, [r7, #58]	; 0x3a
#if TCP_OVERSIZE_DBGCHECK
    /* check that pcb->unsent_oversize matches last_unsent->oversize_left */
    LWIP_ASSERT("unsent_oversize mismatch (pcb vs. last_unsent)",
                pcb->unsent_oversize == last_unsent->oversize_left);
#endif /* TCP_OVERSIZE_DBGCHECK */
    oversize = pcb->unsent_oversize;
 800eb54:	68fb      	ldr	r3, [r7, #12]
 800eb56:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 800eb5a:	827b      	strh	r3, [r7, #18]
    if (oversize > 0) {
 800eb5c:	8a7b      	ldrh	r3, [r7, #18]
 800eb5e:	2b00      	cmp	r3, #0
 800eb60:	d027      	beq.n	800ebb2 <tcp_write+0x16a>
      LWIP_ASSERT("inconsistent oversize vs. space", oversize <= space);
 800eb62:	8a7b      	ldrh	r3, [r7, #18]
 800eb64:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 800eb66:	429a      	cmp	r2, r3
 800eb68:	d206      	bcs.n	800eb78 <tcp_write+0x130>
 800eb6a:	4b67      	ldr	r3, [pc, #412]	; (800ed08 <tcp_write+0x2c0>)
 800eb6c:	f240 12d9 	movw	r2, #473	; 0x1d9
 800eb70:	4969      	ldr	r1, [pc, #420]	; (800ed18 <tcp_write+0x2d0>)
 800eb72:	4867      	ldr	r0, [pc, #412]	; (800ed10 <tcp_write+0x2c8>)
 800eb74:	f007 f82e 	bl	8015bd4 <printf_>
      seg = last_unsent;
 800eb78:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800eb7a:	64fb      	str	r3, [r7, #76]	; 0x4c
      oversize_used = LWIP_MIN(space, LWIP_MIN(oversize, len));
 800eb7c:	8a7b      	ldrh	r3, [r7, #18]
 800eb7e:	88fa      	ldrh	r2, [r7, #6]
 800eb80:	429a      	cmp	r2, r3
 800eb82:	d901      	bls.n	800eb88 <tcp_write+0x140>
 800eb84:	8a7b      	ldrh	r3, [r7, #18]
 800eb86:	e000      	b.n	800eb8a <tcp_write+0x142>
 800eb88:	88fb      	ldrh	r3, [r7, #6]
 800eb8a:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 800eb8c:	4293      	cmp	r3, r2
 800eb8e:	bfa8      	it	ge
 800eb90:	4613      	movge	r3, r2
 800eb92:	87fb      	strh	r3, [r7, #62]	; 0x3e
      pos += oversize_used;
 800eb94:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 800eb98:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 800eb9a:	4413      	add	r3, r2
 800eb9c:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
      oversize -= oversize_used;
 800eba0:	8a7a      	ldrh	r2, [r7, #18]
 800eba2:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 800eba4:	1ad3      	subs	r3, r2, r3
 800eba6:	b29b      	uxth	r3, r3
 800eba8:	827b      	strh	r3, [r7, #18]
      space -= oversize_used;
 800ebaa:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 800ebac:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 800ebae:	1ad3      	subs	r3, r2, r3
 800ebb0:	877b      	strh	r3, [r7, #58]	; 0x3a
    }
    /* now we are either finished or oversize is zero */
    LWIP_ASSERT("inconsistent oversize vs. len", (oversize == 0) || (pos == len));
 800ebb2:	8a7b      	ldrh	r3, [r7, #18]
 800ebb4:	2b00      	cmp	r3, #0
 800ebb6:	d00b      	beq.n	800ebd0 <tcp_write+0x188>
 800ebb8:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 800ebbc:	88fb      	ldrh	r3, [r7, #6]
 800ebbe:	429a      	cmp	r2, r3
 800ebc0:	d006      	beq.n	800ebd0 <tcp_write+0x188>
 800ebc2:	4b51      	ldr	r3, [pc, #324]	; (800ed08 <tcp_write+0x2c0>)
 800ebc4:	f240 12e1 	movw	r2, #481	; 0x1e1
 800ebc8:	4954      	ldr	r1, [pc, #336]	; (800ed1c <tcp_write+0x2d4>)
 800ebca:	4851      	ldr	r0, [pc, #324]	; (800ed10 <tcp_write+0x2c8>)
 800ebcc:	f007 f802 	bl	8015bd4 <printf_>
     *
     * We don't extend segments containing SYN/FIN flags or options
     * (len==0). The new pbuf is kept in concat_p and pbuf_cat'ed at
     * the end.
     */
    if ((pos < len) && (space > 0) && (last_unsent->len > 0)) {
 800ebd0:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 800ebd4:	88fb      	ldrh	r3, [r7, #6]
 800ebd6:	429a      	cmp	r2, r3
 800ebd8:	f080 8168 	bcs.w	800eeac <tcp_write+0x464>
 800ebdc:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 800ebde:	2b00      	cmp	r3, #0
 800ebe0:	f000 8164 	beq.w	800eeac <tcp_write+0x464>
 800ebe4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800ebe6:	891b      	ldrh	r3, [r3, #8]
 800ebe8:	2b00      	cmp	r3, #0
 800ebea:	f000 815f 	beq.w	800eeac <tcp_write+0x464>
      u16_t seglen = LWIP_MIN(space, len - pos);
 800ebee:	88fa      	ldrh	r2, [r7, #6]
 800ebf0:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800ebf4:	1ad2      	subs	r2, r2, r3
 800ebf6:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 800ebf8:	4293      	cmp	r3, r2
 800ebfa:	bfa8      	it	ge
 800ebfc:	4613      	movge	r3, r2
 800ebfe:	83fb      	strh	r3, [r7, #30]
      seg = last_unsent;
 800ec00:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800ec02:	64fb      	str	r3, [r7, #76]	; 0x4c

      /* Create a pbuf with a copy or reference to seglen bytes. We
       * can use PBUF_RAW here since the data appears in the middle of
       * a segment. A header will never be prepended. */
      if (apiflags & TCP_WRITE_FLAG_COPY) {
 800ec04:	797b      	ldrb	r3, [r7, #5]
 800ec06:	f003 0301 	and.w	r3, r3, #1
 800ec0a:	2b00      	cmp	r3, #0
 800ec0c:	d027      	beq.n	800ec5e <tcp_write+0x216>
        /* Data is copied */
        if ((concat_p = tcp_pbuf_prealloc(PBUF_RAW, seglen, space, &oversize, pcb, apiflags, 1)) == NULL) {
 800ec0e:	f107 0012 	add.w	r0, r7, #18
 800ec12:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 800ec14:	8bf9      	ldrh	r1, [r7, #30]
 800ec16:	2301      	movs	r3, #1
 800ec18:	9302      	str	r3, [sp, #8]
 800ec1a:	797b      	ldrb	r3, [r7, #5]
 800ec1c:	9301      	str	r3, [sp, #4]
 800ec1e:	68fb      	ldr	r3, [r7, #12]
 800ec20:	9300      	str	r3, [sp, #0]
 800ec22:	4603      	mov	r3, r0
 800ec24:	2004      	movs	r0, #4
 800ec26:	f7ff fe37 	bl	800e898 <tcp_pbuf_prealloc>
 800ec2a:	6578      	str	r0, [r7, #84]	; 0x54
 800ec2c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800ec2e:	2b00      	cmp	r3, #0
 800ec30:	f000 8227 	beq.w	800f082 <tcp_write+0x63a>
          goto memerr;
        }
#if TCP_OVERSIZE_DBGCHECK
        oversize_add = oversize;
#endif /* TCP_OVERSIZE_DBGCHECK */
        TCP_DATA_COPY2(concat_p->payload, (const u8_t*)arg + pos, seglen, &concat_chksum, &concat_chksum_swapped);
 800ec34:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800ec36:	6858      	ldr	r0, [r3, #4]
 800ec38:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800ec3c:	68ba      	ldr	r2, [r7, #8]
 800ec3e:	4413      	add	r3, r2
 800ec40:	8bfa      	ldrh	r2, [r7, #30]
 800ec42:	4619      	mov	r1, r3
 800ec44:	f007 f837 	bl	8015cb6 <memcpy>
#if TCP_CHECKSUM_ON_COPY
        concat_chksummed += seglen;
#endif /* TCP_CHECKSUM_ON_COPY */
        queuelen += pbuf_clen(concat_p);
 800ec48:	6d78      	ldr	r0, [r7, #84]	; 0x54
 800ec4a:	f7fb fccb 	bl	800a5e4 <pbuf_clen>
 800ec4e:	4603      	mov	r3, r0
 800ec50:	461a      	mov	r2, r3
 800ec52:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 800ec56:	4413      	add	r3, r2
 800ec58:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
 800ec5c:	e03f      	b.n	800ecde <tcp_write+0x296>
      } else {
        /* Data is not copied */
        /* If the last unsent pbuf is of type PBUF_ROM, try to extend it. */
        struct pbuf *p;
        for (p = last_unsent->p; p->next != NULL; p = p->next);
 800ec5e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800ec60:	685b      	ldr	r3, [r3, #4]
 800ec62:	637b      	str	r3, [r7, #52]	; 0x34
 800ec64:	e002      	b.n	800ec6c <tcp_write+0x224>
 800ec66:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ec68:	681b      	ldr	r3, [r3, #0]
 800ec6a:	637b      	str	r3, [r7, #52]	; 0x34
 800ec6c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ec6e:	681b      	ldr	r3, [r3, #0]
 800ec70:	2b00      	cmp	r3, #0
 800ec72:	d1f8      	bne.n	800ec66 <tcp_write+0x21e>
        if (p->type == PBUF_ROM && (const u8_t *)p->payload + p->len == (const u8_t *)arg) {
 800ec74:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ec76:	7b1b      	ldrb	r3, [r3, #12]
 800ec78:	2b01      	cmp	r3, #1
 800ec7a:	d115      	bne.n	800eca8 <tcp_write+0x260>
 800ec7c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ec7e:	685b      	ldr	r3, [r3, #4]
 800ec80:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800ec82:	8952      	ldrh	r2, [r2, #10]
 800ec84:	4413      	add	r3, r2
 800ec86:	68ba      	ldr	r2, [r7, #8]
 800ec88:	429a      	cmp	r2, r3
 800ec8a:	d10d      	bne.n	800eca8 <tcp_write+0x260>
          LWIP_ASSERT("tcp_write: ROM pbufs cannot be oversized", pos == 0);
 800ec8c:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800ec90:	2b00      	cmp	r3, #0
 800ec92:	d006      	beq.n	800eca2 <tcp_write+0x25a>
 800ec94:	4b1c      	ldr	r3, [pc, #112]	; (800ed08 <tcp_write+0x2c0>)
 800ec96:	f44f 7203 	mov.w	r2, #524	; 0x20c
 800ec9a:	4921      	ldr	r1, [pc, #132]	; (800ed20 <tcp_write+0x2d8>)
 800ec9c:	481c      	ldr	r0, [pc, #112]	; (800ed10 <tcp_write+0x2c8>)
 800ec9e:	f006 ff99 	bl	8015bd4 <printf_>
          extendlen = seglen;
 800eca2:	8bfb      	ldrh	r3, [r7, #30]
 800eca4:	87bb      	strh	r3, [r7, #60]	; 0x3c
 800eca6:	e01a      	b.n	800ecde <tcp_write+0x296>
        } else {
          if ((concat_p = pbuf_alloc(PBUF_RAW, seglen, PBUF_ROM)) == NULL) {
 800eca8:	8bfb      	ldrh	r3, [r7, #30]
 800ecaa:	2201      	movs	r2, #1
 800ecac:	4619      	mov	r1, r3
 800ecae:	2004      	movs	r0, #4
 800ecb0:	f7fb f88c 	bl	8009dcc <pbuf_alloc>
 800ecb4:	6578      	str	r0, [r7, #84]	; 0x54
 800ecb6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800ecb8:	2b00      	cmp	r3, #0
 800ecba:	f000 81e4 	beq.w	800f086 <tcp_write+0x63e>
            LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                        ("tcp_write: could not allocate memory for zero-copy pbuf\n"));
            goto memerr;
          }
          /* reference the non-volatile payload data */
          ((struct pbuf_rom*)concat_p)->payload = (const u8_t*)arg + pos;
 800ecbe:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800ecc2:	68ba      	ldr	r2, [r7, #8]
 800ecc4:	441a      	add	r2, r3
 800ecc6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800ecc8:	605a      	str	r2, [r3, #4]
          queuelen += pbuf_clen(concat_p);
 800ecca:	6d78      	ldr	r0, [r7, #84]	; 0x54
 800eccc:	f7fb fc8a 	bl	800a5e4 <pbuf_clen>
 800ecd0:	4603      	mov	r3, r0
 800ecd2:	461a      	mov	r2, r3
 800ecd4:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 800ecd8:	4413      	add	r3, r2
 800ecda:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
          &concat_chksum, &concat_chksum_swapped);
        concat_chksummed += seglen;
#endif /* TCP_CHECKSUM_ON_COPY */
      }

      pos += seglen;
 800ecde:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 800ece2:	8bfb      	ldrh	r3, [r7, #30]
 800ece4:	4413      	add	r3, r2
 800ece6:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 800ecea:	e0df      	b.n	800eeac <tcp_write+0x464>
    }
  } else {
#if TCP_OVERSIZE
    LWIP_ASSERT("unsent_oversize mismatch (pcb->unsent is NULL)",
 800ecec:	68fb      	ldr	r3, [r7, #12]
 800ecee:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 800ecf2:	2b00      	cmp	r3, #0
 800ecf4:	f000 80da 	beq.w	800eeac <tcp_write+0x464>
 800ecf8:	4b03      	ldr	r3, [pc, #12]	; (800ed08 <tcp_write+0x2c0>)
 800ecfa:	f240 2225 	movw	r2, #549	; 0x225
 800ecfe:	4909      	ldr	r1, [pc, #36]	; (800ed24 <tcp_write+0x2dc>)
 800ed00:	4803      	ldr	r0, [pc, #12]	; (800ed10 <tcp_write+0x2c8>)
 800ed02:	f006 ff67 	bl	8015bd4 <printf_>
   * Phase 3: Create new segments.
   *
   * The new segments are chained together in the local 'queue'
   * variable, ready to be appended to pcb->unsent.
   */
  while (pos < len) {
 800ed06:	e0d1      	b.n	800eeac <tcp_write+0x464>
 800ed08:	0801b2dc 	.word	0x0801b2dc
 800ed0c:	0801b404 	.word	0x0801b404
 800ed10:	0801b340 	.word	0x0801b340
 800ed14:	0801b438 	.word	0x0801b438
 800ed18:	0801b450 	.word	0x0801b450
 800ed1c:	0801b470 	.word	0x0801b470
 800ed20:	0801b490 	.word	0x0801b490
 800ed24:	0801b4bc 	.word	0x0801b4bc
    struct pbuf *p;
    u16_t left = len - pos;
 800ed28:	88fa      	ldrh	r2, [r7, #6]
 800ed2a:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800ed2e:	1ad3      	subs	r3, r2, r3
 800ed30:	83bb      	strh	r3, [r7, #28]
    u16_t max_len = mss_local - optlen;
 800ed32:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800ed36:	b29b      	uxth	r3, r3
 800ed38:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800ed3a:	1ad3      	subs	r3, r2, r3
 800ed3c:	837b      	strh	r3, [r7, #26]
    u16_t seglen = LWIP_MIN(left, max_len);
 800ed3e:	8b7a      	ldrh	r2, [r7, #26]
 800ed40:	8bbb      	ldrh	r3, [r7, #28]
 800ed42:	4293      	cmp	r3, r2
 800ed44:	bf28      	it	cs
 800ed46:	4613      	movcs	r3, r2
 800ed48:	833b      	strh	r3, [r7, #24]
#if TCP_CHECKSUM_ON_COPY
    u16_t chksum = 0;
    u8_t chksum_swapped = 0;
#endif /* TCP_CHECKSUM_ON_COPY */

    if (apiflags & TCP_WRITE_FLAG_COPY) {
 800ed4a:	797b      	ldrb	r3, [r7, #5]
 800ed4c:	f003 0301 	and.w	r3, r3, #1
 800ed50:	2b00      	cmp	r3, #0
 800ed52:	d036      	beq.n	800edc2 <tcp_write+0x37a>
      /* If copy is set, memory should be allocated and data copied
       * into pbuf */
      if ((p = tcp_pbuf_prealloc(PBUF_TRANSPORT, seglen + optlen, mss_local, &oversize, pcb, apiflags, queue == NULL)) == NULL) {
 800ed54:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800ed58:	b29a      	uxth	r2, r3
 800ed5a:	8b3b      	ldrh	r3, [r7, #24]
 800ed5c:	4413      	add	r3, r2
 800ed5e:	b299      	uxth	r1, r3
 800ed60:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800ed62:	2b00      	cmp	r3, #0
 800ed64:	bf0c      	ite	eq
 800ed66:	2301      	moveq	r3, #1
 800ed68:	2300      	movne	r3, #0
 800ed6a:	b2db      	uxtb	r3, r3
 800ed6c:	f107 0012 	add.w	r0, r7, #18
 800ed70:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800ed72:	9302      	str	r3, [sp, #8]
 800ed74:	797b      	ldrb	r3, [r7, #5]
 800ed76:	9301      	str	r3, [sp, #4]
 800ed78:	68fb      	ldr	r3, [r7, #12]
 800ed7a:	9300      	str	r3, [sp, #0]
 800ed7c:	4603      	mov	r3, r0
 800ed7e:	2000      	movs	r0, #0
 800ed80:	f7ff fd8a 	bl	800e898 <tcp_pbuf_prealloc>
 800ed84:	6338      	str	r0, [r7, #48]	; 0x30
 800ed86:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ed88:	2b00      	cmp	r3, #0
 800ed8a:	f000 817e 	beq.w	800f08a <tcp_write+0x642>
        LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_write : could not allocate memory for pbuf copy size %"U16_F"\n", seglen));
        goto memerr;
      }
      LWIP_ASSERT("tcp_write: check that first pbuf can hold the complete seglen",
 800ed8e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ed90:	895b      	ldrh	r3, [r3, #10]
 800ed92:	8b3a      	ldrh	r2, [r7, #24]
 800ed94:	429a      	cmp	r2, r3
 800ed96:	d906      	bls.n	800eda6 <tcp_write+0x35e>
 800ed98:	4b8f      	ldr	r3, [pc, #572]	; (800efd8 <tcp_write+0x590>)
 800ed9a:	f240 2241 	movw	r2, #577	; 0x241
 800ed9e:	498f      	ldr	r1, [pc, #572]	; (800efdc <tcp_write+0x594>)
 800eda0:	488f      	ldr	r0, [pc, #572]	; (800efe0 <tcp_write+0x598>)
 800eda2:	f006 ff17 	bl	8015bd4 <printf_>
                  (p->len >= seglen));
      TCP_DATA_COPY2((char *)p->payload + optlen, (const u8_t*)arg + pos, seglen, &chksum, &chksum_swapped);
 800eda6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800eda8:	685a      	ldr	r2, [r3, #4]
 800edaa:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800edae:	18d0      	adds	r0, r2, r3
 800edb0:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800edb4:	68ba      	ldr	r2, [r7, #8]
 800edb6:	4413      	add	r3, r2
 800edb8:	8b3a      	ldrh	r2, [r7, #24]
 800edba:	4619      	mov	r1, r3
 800edbc:	f006 ff7b 	bl	8015cb6 <memcpy>
 800edc0:	e02e      	b.n	800ee20 <tcp_write+0x3d8>
       * sent out on the link (as it has to be ACKed by the remote
       * party) we can safely use PBUF_ROM instead of PBUF_REF here.
       */
      struct pbuf *p2;
#if TCP_OVERSIZE
      LWIP_ASSERT("oversize == 0", oversize == 0);
 800edc2:	8a7b      	ldrh	r3, [r7, #18]
 800edc4:	2b00      	cmp	r3, #0
 800edc6:	d006      	beq.n	800edd6 <tcp_write+0x38e>
 800edc8:	4b83      	ldr	r3, [pc, #524]	; (800efd8 <tcp_write+0x590>)
 800edca:	f240 224b 	movw	r2, #587	; 0x24b
 800edce:	4985      	ldr	r1, [pc, #532]	; (800efe4 <tcp_write+0x59c>)
 800edd0:	4883      	ldr	r0, [pc, #524]	; (800efe0 <tcp_write+0x598>)
 800edd2:	f006 feff 	bl	8015bd4 <printf_>
#endif /* TCP_OVERSIZE */
      if ((p2 = pbuf_alloc(PBUF_TRANSPORT, seglen, PBUF_ROM)) == NULL) {
 800edd6:	8b3b      	ldrh	r3, [r7, #24]
 800edd8:	2201      	movs	r2, #1
 800edda:	4619      	mov	r1, r3
 800eddc:	2000      	movs	r0, #0
 800edde:	f7fa fff5 	bl	8009dcc <pbuf_alloc>
 800ede2:	6178      	str	r0, [r7, #20]
 800ede4:	697b      	ldr	r3, [r7, #20]
 800ede6:	2b00      	cmp	r3, #0
 800ede8:	f000 8151 	beq.w	800f08e <tcp_write+0x646>
        chksum_swapped = 1;
        chksum = SWAP_BYTES_IN_WORD(chksum);
      }
#endif /* TCP_CHECKSUM_ON_COPY */
      /* reference the non-volatile payload data */
      ((struct pbuf_rom*)p2)->payload = (const u8_t*)arg + pos;
 800edec:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800edf0:	68ba      	ldr	r2, [r7, #8]
 800edf2:	441a      	add	r2, r3
 800edf4:	697b      	ldr	r3, [r7, #20]
 800edf6:	605a      	str	r2, [r3, #4]

      /* Second, allocate a pbuf for the headers. */
      if ((p = pbuf_alloc(PBUF_TRANSPORT, optlen, PBUF_RAM)) == NULL) {
 800edf8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800edfc:	b29b      	uxth	r3, r3
 800edfe:	2200      	movs	r2, #0
 800ee00:	4619      	mov	r1, r3
 800ee02:	2000      	movs	r0, #0
 800ee04:	f7fa ffe2 	bl	8009dcc <pbuf_alloc>
 800ee08:	6338      	str	r0, [r7, #48]	; 0x30
 800ee0a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ee0c:	2b00      	cmp	r3, #0
 800ee0e:	d103      	bne.n	800ee18 <tcp_write+0x3d0>
        /* If allocation fails, we have to deallocate the data pbuf as
         * well. */
        pbuf_free(p2);
 800ee10:	6978      	ldr	r0, [r7, #20]
 800ee12:	f7fb fb4d 	bl	800a4b0 <pbuf_free>
        LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_write: could not allocate memory for header pbuf\n"));
        goto memerr;
 800ee16:	e13d      	b.n	800f094 <tcp_write+0x64c>
      }
      /* Concatenate the headers and data pbufs together. */
      pbuf_cat(p/*header*/, p2/*data*/);
 800ee18:	6979      	ldr	r1, [r7, #20]
 800ee1a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800ee1c:	f7fb fc22 	bl	800a664 <pbuf_cat>
    }

    queuelen += pbuf_clen(p);
 800ee20:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800ee22:	f7fb fbdf 	bl	800a5e4 <pbuf_clen>
 800ee26:	4603      	mov	r3, r0
 800ee28:	461a      	mov	r2, r3
 800ee2a:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 800ee2e:	4413      	add	r3, r2
 800ee30:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40

    /* Now that there are more segments queued, we check again if the
     * length of the queue exceeds the configured maximum or
     * overflows. */
    if ((queuelen > TCP_SND_QUEUELEN) || (queuelen > TCP_SNDQUEUELEN_OVERFLOW)) {
 800ee34:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 800ee38:	2b09      	cmp	r3, #9
 800ee3a:	d805      	bhi.n	800ee48 <tcp_write+0x400>
 800ee3c:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 800ee40:	f64f 72fc 	movw	r2, #65532	; 0xfffc
 800ee44:	4293      	cmp	r3, r2
 800ee46:	d903      	bls.n	800ee50 <tcp_write+0x408>
      LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_write: queue too long %"U16_F" (%d)\n",
        queuelen, (int)TCP_SND_QUEUELEN));
      pbuf_free(p);
 800ee48:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800ee4a:	f7fb fb31 	bl	800a4b0 <pbuf_free>
      goto memerr;
 800ee4e:	e121      	b.n	800f094 <tcp_write+0x64c>
    }

    if ((seg = tcp_create_segment(pcb, p, 0, pcb->snd_lbb + pos, optflags)) == NULL) {
 800ee50:	68fb      	ldr	r3, [r7, #12]
 800ee52:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800ee54:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800ee58:	441a      	add	r2, r3
 800ee5a:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800ee5e:	9300      	str	r3, [sp, #0]
 800ee60:	4613      	mov	r3, r2
 800ee62:	2200      	movs	r2, #0
 800ee64:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800ee66:	68f8      	ldr	r0, [r7, #12]
 800ee68:	f7ff fc8e 	bl	800e788 <tcp_create_segment>
 800ee6c:	64f8      	str	r0, [r7, #76]	; 0x4c
 800ee6e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800ee70:	2b00      	cmp	r3, #0
 800ee72:	f000 810e 	beq.w	800f092 <tcp_write+0x64a>
    seg->chksum_swapped = chksum_swapped;
    seg->flags |= TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */

    /* first segment of to-be-queued data? */
    if (queue == NULL) {
 800ee76:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800ee78:	2b00      	cmp	r3, #0
 800ee7a:	d102      	bne.n	800ee82 <tcp_write+0x43a>
      queue = seg;
 800ee7c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800ee7e:	647b      	str	r3, [r7, #68]	; 0x44
 800ee80:	e00c      	b.n	800ee9c <tcp_write+0x454>
    } else {
      /* Attach the segment to the end of the queued segments */
      LWIP_ASSERT("prev_seg != NULL", prev_seg != NULL);
 800ee82:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800ee84:	2b00      	cmp	r3, #0
 800ee86:	d106      	bne.n	800ee96 <tcp_write+0x44e>
 800ee88:	4b53      	ldr	r3, [pc, #332]	; (800efd8 <tcp_write+0x590>)
 800ee8a:	f240 2285 	movw	r2, #645	; 0x285
 800ee8e:	4956      	ldr	r1, [pc, #344]	; (800efe8 <tcp_write+0x5a0>)
 800ee90:	4853      	ldr	r0, [pc, #332]	; (800efe0 <tcp_write+0x598>)
 800ee92:	f006 fe9f 	bl	8015bd4 <printf_>
      prev_seg->next = seg;
 800ee96:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800ee98:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800ee9a:	601a      	str	r2, [r3, #0]
    }
    /* remember last segment of to-be-queued data for next iteration */
    prev_seg = seg;
 800ee9c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800ee9e:	64bb      	str	r3, [r7, #72]	; 0x48

    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_TRACE, ("tcp_write: queueing %"U32_F":%"U32_F"\n",
      lwip_ntohl(seg->tcphdr->seqno),
      lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg)));

    pos += seglen;
 800eea0:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 800eea4:	8b3b      	ldrh	r3, [r7, #24]
 800eea6:	4413      	add	r3, r2
 800eea8:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
  while (pos < len) {
 800eeac:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 800eeb0:	88fb      	ldrh	r3, [r7, #6]
 800eeb2:	429a      	cmp	r2, r3
 800eeb4:	f4ff af38 	bcc.w	800ed28 <tcp_write+0x2e0>
  /*
   * Phase 1: If data has been added to the preallocated tail of
   * last_unsent, we update the length fields of the pbuf chain.
   */
#if TCP_OVERSIZE
  if (oversize_used > 0) {
 800eeb8:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 800eeba:	2b00      	cmp	r3, #0
 800eebc:	d02c      	beq.n	800ef18 <tcp_write+0x4d0>
    struct pbuf *p;
    /* Bump tot_len of whole chain, len of tail */
    for (p = last_unsent->p; p; p = p->next) {
 800eebe:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800eec0:	685b      	ldr	r3, [r3, #4]
 800eec2:	62fb      	str	r3, [r7, #44]	; 0x2c
 800eec4:	e01e      	b.n	800ef04 <tcp_write+0x4bc>
      p->tot_len += oversize_used;
 800eec6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800eec8:	891a      	ldrh	r2, [r3, #8]
 800eeca:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 800eecc:	4413      	add	r3, r2
 800eece:	b29a      	uxth	r2, r3
 800eed0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800eed2:	811a      	strh	r2, [r3, #8]
      if (p->next == NULL) {
 800eed4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800eed6:	681b      	ldr	r3, [r3, #0]
 800eed8:	2b00      	cmp	r3, #0
 800eeda:	d110      	bne.n	800eefe <tcp_write+0x4b6>
        TCP_DATA_COPY((char *)p->payload + p->len, arg, oversize_used, last_unsent);
 800eedc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800eede:	685b      	ldr	r3, [r3, #4]
 800eee0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800eee2:	8952      	ldrh	r2, [r2, #10]
 800eee4:	4413      	add	r3, r2
 800eee6:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 800eee8:	68b9      	ldr	r1, [r7, #8]
 800eeea:	4618      	mov	r0, r3
 800eeec:	f006 fee3 	bl	8015cb6 <memcpy>
        p->len += oversize_used;
 800eef0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800eef2:	895a      	ldrh	r2, [r3, #10]
 800eef4:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 800eef6:	4413      	add	r3, r2
 800eef8:	b29a      	uxth	r2, r3
 800eefa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800eefc:	815a      	strh	r2, [r3, #10]
    for (p = last_unsent->p; p; p = p->next) {
 800eefe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ef00:	681b      	ldr	r3, [r3, #0]
 800ef02:	62fb      	str	r3, [r7, #44]	; 0x2c
 800ef04:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ef06:	2b00      	cmp	r3, #0
 800ef08:	d1dd      	bne.n	800eec6 <tcp_write+0x47e>
      }
    }
    last_unsent->len += oversize_used;
 800ef0a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800ef0c:	891a      	ldrh	r2, [r3, #8]
 800ef0e:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 800ef10:	4413      	add	r3, r2
 800ef12:	b29a      	uxth	r2, r3
 800ef14:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800ef16:	811a      	strh	r2, [r3, #8]
    LWIP_ASSERT("last_unsent->oversize_left >= oversize_used",
                last_unsent->oversize_left >= oversize_used);
    last_unsent->oversize_left -= oversize_used;
#endif /* TCP_OVERSIZE_DBGCHECK */
  }
  pcb->unsent_oversize = oversize;
 800ef18:	8a7a      	ldrh	r2, [r7, #18]
 800ef1a:	68fb      	ldr	r3, [r7, #12]
 800ef1c:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64

  /*
   * Phase 2: concat_p can be concatenated onto last_unsent->p, unless we
   * determined that the last ROM pbuf can be extended to include the new data.
   */
  if (concat_p != NULL) {
 800ef20:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800ef22:	2b00      	cmp	r3, #0
 800ef24:	d018      	beq.n	800ef58 <tcp_write+0x510>
    LWIP_ASSERT("tcp_write: cannot concatenate when pcb->unsent is empty",
 800ef26:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800ef28:	2b00      	cmp	r3, #0
 800ef2a:	d106      	bne.n	800ef3a <tcp_write+0x4f2>
 800ef2c:	4b2a      	ldr	r3, [pc, #168]	; (800efd8 <tcp_write+0x590>)
 800ef2e:	f240 22bb 	movw	r2, #699	; 0x2bb
 800ef32:	492e      	ldr	r1, [pc, #184]	; (800efec <tcp_write+0x5a4>)
 800ef34:	482a      	ldr	r0, [pc, #168]	; (800efe0 <tcp_write+0x598>)
 800ef36:	f006 fe4d 	bl	8015bd4 <printf_>
      (last_unsent != NULL));
    pbuf_cat(last_unsent->p, concat_p);
 800ef3a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800ef3c:	685b      	ldr	r3, [r3, #4]
 800ef3e:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800ef40:	4618      	mov	r0, r3
 800ef42:	f7fb fb8f 	bl	800a664 <pbuf_cat>
    last_unsent->len += concat_p->tot_len;
 800ef46:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800ef48:	891a      	ldrh	r2, [r3, #8]
 800ef4a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800ef4c:	891b      	ldrh	r3, [r3, #8]
 800ef4e:	4413      	add	r3, r2
 800ef50:	b29a      	uxth	r2, r3
 800ef52:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800ef54:	811a      	strh	r2, [r3, #8]
 800ef56:	e037      	b.n	800efc8 <tcp_write+0x580>
  } else if (extendlen > 0) {
 800ef58:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 800ef5a:	2b00      	cmp	r3, #0
 800ef5c:	d034      	beq.n	800efc8 <tcp_write+0x580>
    struct pbuf *p;
    LWIP_ASSERT("tcp_write: extension of reference requires reference",
 800ef5e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800ef60:	2b00      	cmp	r3, #0
 800ef62:	d003      	beq.n	800ef6c <tcp_write+0x524>
 800ef64:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800ef66:	685b      	ldr	r3, [r3, #4]
 800ef68:	2b00      	cmp	r3, #0
 800ef6a:	d106      	bne.n	800ef7a <tcp_write+0x532>
 800ef6c:	4b1a      	ldr	r3, [pc, #104]	; (800efd8 <tcp_write+0x590>)
 800ef6e:	f240 22c1 	movw	r2, #705	; 0x2c1
 800ef72:	491f      	ldr	r1, [pc, #124]	; (800eff0 <tcp_write+0x5a8>)
 800ef74:	481a      	ldr	r0, [pc, #104]	; (800efe0 <tcp_write+0x598>)
 800ef76:	f006 fe2d 	bl	8015bd4 <printf_>
      last_unsent != NULL && last_unsent->p != NULL);
    for (p = last_unsent->p; p->next != NULL; p = p->next) {
 800ef7a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800ef7c:	685b      	ldr	r3, [r3, #4]
 800ef7e:	62bb      	str	r3, [r7, #40]	; 0x28
 800ef80:	e009      	b.n	800ef96 <tcp_write+0x54e>
      p->tot_len += extendlen;
 800ef82:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ef84:	891a      	ldrh	r2, [r3, #8]
 800ef86:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 800ef88:	4413      	add	r3, r2
 800ef8a:	b29a      	uxth	r2, r3
 800ef8c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ef8e:	811a      	strh	r2, [r3, #8]
    for (p = last_unsent->p; p->next != NULL; p = p->next) {
 800ef90:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ef92:	681b      	ldr	r3, [r3, #0]
 800ef94:	62bb      	str	r3, [r7, #40]	; 0x28
 800ef96:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ef98:	681b      	ldr	r3, [r3, #0]
 800ef9a:	2b00      	cmp	r3, #0
 800ef9c:	d1f1      	bne.n	800ef82 <tcp_write+0x53a>
    }
    p->tot_len += extendlen;
 800ef9e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800efa0:	891a      	ldrh	r2, [r3, #8]
 800efa2:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 800efa4:	4413      	add	r3, r2
 800efa6:	b29a      	uxth	r2, r3
 800efa8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800efaa:	811a      	strh	r2, [r3, #8]
    p->len += extendlen;
 800efac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800efae:	895a      	ldrh	r2, [r3, #10]
 800efb0:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 800efb2:	4413      	add	r3, r2
 800efb4:	b29a      	uxth	r2, r3
 800efb6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800efb8:	815a      	strh	r2, [r3, #10]
    last_unsent->len += extendlen;
 800efba:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800efbc:	891a      	ldrh	r2, [r3, #8]
 800efbe:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 800efc0:	4413      	add	r3, r2
 800efc2:	b29a      	uxth	r2, r3
 800efc4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800efc6:	811a      	strh	r2, [r3, #8]

  /*
   * Phase 3: Append queue to pcb->unsent. Queue may be NULL, but that
   * is harmless
   */
  if (last_unsent == NULL) {
 800efc8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800efca:	2b00      	cmp	r3, #0
 800efcc:	d112      	bne.n	800eff4 <tcp_write+0x5ac>
    pcb->unsent = queue;
 800efce:	68fb      	ldr	r3, [r7, #12]
 800efd0:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800efd2:	669a      	str	r2, [r3, #104]	; 0x68
 800efd4:	e011      	b.n	800effa <tcp_write+0x5b2>
 800efd6:	bf00      	nop
 800efd8:	0801b2dc 	.word	0x0801b2dc
 800efdc:	0801b4ec 	.word	0x0801b4ec
 800efe0:	0801b340 	.word	0x0801b340
 800efe4:	0801b52c 	.word	0x0801b52c
 800efe8:	0801b53c 	.word	0x0801b53c
 800efec:	0801b550 	.word	0x0801b550
 800eff0:	0801b588 	.word	0x0801b588
  } else {
    last_unsent->next = queue;
 800eff4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800eff6:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800eff8:	601a      	str	r2, [r3, #0]
  }

  /*
   * Finally update the pcb state.
   */
  pcb->snd_lbb += len;
 800effa:	68fb      	ldr	r3, [r7, #12]
 800effc:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800effe:	88fb      	ldrh	r3, [r7, #6]
 800f000:	441a      	add	r2, r3
 800f002:	68fb      	ldr	r3, [r7, #12]
 800f004:	659a      	str	r2, [r3, #88]	; 0x58
  pcb->snd_buf -= len;
 800f006:	68fb      	ldr	r3, [r7, #12]
 800f008:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 800f00c:	88fb      	ldrh	r3, [r7, #6]
 800f00e:	1ad3      	subs	r3, r2, r3
 800f010:	b29a      	uxth	r2, r3
 800f012:	68fb      	ldr	r3, [r7, #12]
 800f014:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
  pcb->snd_queuelen = queuelen;
 800f018:	68fb      	ldr	r3, [r7, #12]
 800f01a:	f8b7 2040 	ldrh.w	r2, [r7, #64]	; 0x40
 800f01e:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62

  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_write: %"S16_F" (after enqueued)\n",
    pcb->snd_queuelen));
  if (pcb->snd_queuelen != 0) {
 800f022:	68fb      	ldr	r3, [r7, #12]
 800f024:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800f028:	2b00      	cmp	r3, #0
 800f02a:	d00e      	beq.n	800f04a <tcp_write+0x602>
    LWIP_ASSERT("tcp_write: valid queue length",
 800f02c:	68fb      	ldr	r3, [r7, #12]
 800f02e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800f030:	2b00      	cmp	r3, #0
 800f032:	d10a      	bne.n	800f04a <tcp_write+0x602>
 800f034:	68fb      	ldr	r3, [r7, #12]
 800f036:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800f038:	2b00      	cmp	r3, #0
 800f03a:	d106      	bne.n	800f04a <tcp_write+0x602>
 800f03c:	4b2c      	ldr	r3, [pc, #176]	; (800f0f0 <tcp_write+0x6a8>)
 800f03e:	f240 22ed 	movw	r2, #749	; 0x2ed
 800f042:	492c      	ldr	r1, [pc, #176]	; (800f0f4 <tcp_write+0x6ac>)
 800f044:	482c      	ldr	r0, [pc, #176]	; (800f0f8 <tcp_write+0x6b0>)
 800f046:	f006 fdc5 	bl	8015bd4 <printf_>
                pcb->unacked != NULL || pcb->unsent != NULL);
  }

  /* Set the PSH flag in the last segment that we enqueued. */
  if (seg != NULL && seg->tcphdr != NULL && ((apiflags & TCP_WRITE_FLAG_MORE)==0)) {
 800f04a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800f04c:	2b00      	cmp	r3, #0
 800f04e:	d016      	beq.n	800f07e <tcp_write+0x636>
 800f050:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800f052:	68db      	ldr	r3, [r3, #12]
 800f054:	2b00      	cmp	r3, #0
 800f056:	d012      	beq.n	800f07e <tcp_write+0x636>
 800f058:	797b      	ldrb	r3, [r7, #5]
 800f05a:	f003 0302 	and.w	r3, r3, #2
 800f05e:	2b00      	cmp	r3, #0
 800f060:	d10d      	bne.n	800f07e <tcp_write+0x636>
    TCPH_SET_FLAG(seg->tcphdr, TCP_PSH);
 800f062:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800f064:	68db      	ldr	r3, [r3, #12]
 800f066:	899b      	ldrh	r3, [r3, #12]
 800f068:	b29c      	uxth	r4, r3
 800f06a:	2008      	movs	r0, #8
 800f06c:	f7f9 fff4 	bl	8009058 <lwip_htons>
 800f070:	4603      	mov	r3, r0
 800f072:	461a      	mov	r2, r3
 800f074:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800f076:	68db      	ldr	r3, [r3, #12]
 800f078:	4322      	orrs	r2, r4
 800f07a:	b292      	uxth	r2, r2
 800f07c:	819a      	strh	r2, [r3, #12]
  }

  return ERR_OK;
 800f07e:	2300      	movs	r3, #0
 800f080:	e031      	b.n	800f0e6 <tcp_write+0x69e>
          goto memerr;
 800f082:	bf00      	nop
 800f084:	e006      	b.n	800f094 <tcp_write+0x64c>
            goto memerr;
 800f086:	bf00      	nop
 800f088:	e004      	b.n	800f094 <tcp_write+0x64c>
        goto memerr;
 800f08a:	bf00      	nop
 800f08c:	e002      	b.n	800f094 <tcp_write+0x64c>
        goto memerr;
 800f08e:	bf00      	nop
 800f090:	e000      	b.n	800f094 <tcp_write+0x64c>
      goto memerr;
 800f092:	bf00      	nop
memerr:
  pcb->flags |= TF_NAGLEMEMERR;
 800f094:	68fb      	ldr	r3, [r7, #12]
 800f096:	7e9b      	ldrb	r3, [r3, #26]
 800f098:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800f09c:	b2da      	uxtb	r2, r3
 800f09e:	68fb      	ldr	r3, [r7, #12]
 800f0a0:	769a      	strb	r2, [r3, #26]
  TCP_STATS_INC(tcp.memerr);

  if (concat_p != NULL) {
 800f0a2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800f0a4:	2b00      	cmp	r3, #0
 800f0a6:	d002      	beq.n	800f0ae <tcp_write+0x666>
    pbuf_free(concat_p);
 800f0a8:	6d78      	ldr	r0, [r7, #84]	; 0x54
 800f0aa:	f7fb fa01 	bl	800a4b0 <pbuf_free>
  }
  if (queue != NULL) {
 800f0ae:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800f0b0:	2b00      	cmp	r3, #0
 800f0b2:	d002      	beq.n	800f0ba <tcp_write+0x672>
    tcp_segs_free(queue);
 800f0b4:	6c78      	ldr	r0, [r7, #68]	; 0x44
 800f0b6:	f7fc fccf 	bl	800ba58 <tcp_segs_free>
  }
  if (pcb->snd_queuelen != 0) {
 800f0ba:	68fb      	ldr	r3, [r7, #12]
 800f0bc:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800f0c0:	2b00      	cmp	r3, #0
 800f0c2:	d00e      	beq.n	800f0e2 <tcp_write+0x69a>
    LWIP_ASSERT("tcp_write: valid queue length", pcb->unacked != NULL ||
 800f0c4:	68fb      	ldr	r3, [r7, #12]
 800f0c6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800f0c8:	2b00      	cmp	r3, #0
 800f0ca:	d10a      	bne.n	800f0e2 <tcp_write+0x69a>
 800f0cc:	68fb      	ldr	r3, [r7, #12]
 800f0ce:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800f0d0:	2b00      	cmp	r3, #0
 800f0d2:	d106      	bne.n	800f0e2 <tcp_write+0x69a>
 800f0d4:	4b06      	ldr	r3, [pc, #24]	; (800f0f0 <tcp_write+0x6a8>)
 800f0d6:	f240 3202 	movw	r2, #770	; 0x302
 800f0da:	4906      	ldr	r1, [pc, #24]	; (800f0f4 <tcp_write+0x6ac>)
 800f0dc:	4806      	ldr	r0, [pc, #24]	; (800f0f8 <tcp_write+0x6b0>)
 800f0de:	f006 fd79 	bl	8015bd4 <printf_>
      pcb->unsent != NULL);
  }
  LWIP_DEBUGF(TCP_QLEN_DEBUG | LWIP_DBG_STATE, ("tcp_write: %"S16_F" (with mem err)\n", pcb->snd_queuelen));
  return ERR_MEM;
 800f0e2:	f04f 33ff 	mov.w	r3, #4294967295
}
 800f0e6:	4618      	mov	r0, r3
 800f0e8:	375c      	adds	r7, #92	; 0x5c
 800f0ea:	46bd      	mov	sp, r7
 800f0ec:	bd90      	pop	{r4, r7, pc}
 800f0ee:	bf00      	nop
 800f0f0:	0801b2dc 	.word	0x0801b2dc
 800f0f4:	0801b5c0 	.word	0x0801b5c0
 800f0f8:	0801b340 	.word	0x0801b340

0800f0fc <tcp_enqueue_flags>:
 * @param pcb Protocol control block for the TCP connection.
 * @param flags TCP header flags to set in the outgoing segment.
 */
err_t
tcp_enqueue_flags(struct tcp_pcb *pcb, u8_t flags)
{
 800f0fc:	b580      	push	{r7, lr}
 800f0fe:	b08a      	sub	sp, #40	; 0x28
 800f100:	af02      	add	r7, sp, #8
 800f102:	6078      	str	r0, [r7, #4]
 800f104:	460b      	mov	r3, r1
 800f106:	70fb      	strb	r3, [r7, #3]
  struct pbuf *p;
  struct tcp_seg *seg;
  u8_t optflags = 0;
 800f108:	2300      	movs	r3, #0
 800f10a:	77fb      	strb	r3, [r7, #31]
  u8_t optlen = 0;
 800f10c:	2300      	movs	r3, #0
 800f10e:	75fb      	strb	r3, [r7, #23]

  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue_flags: queuelen: %"U16_F"\n", (u16_t)pcb->snd_queuelen));

  LWIP_ASSERT("tcp_enqueue_flags: need either TCP_SYN or TCP_FIN in flags (programmer violates API)",
 800f110:	78fb      	ldrb	r3, [r7, #3]
 800f112:	f003 0303 	and.w	r3, r3, #3
 800f116:	2b00      	cmp	r3, #0
 800f118:	d106      	bne.n	800f128 <tcp_enqueue_flags+0x2c>
 800f11a:	4b6f      	ldr	r3, [pc, #444]	; (800f2d8 <tcp_enqueue_flags+0x1dc>)
 800f11c:	f240 321b 	movw	r2, #795	; 0x31b
 800f120:	496e      	ldr	r1, [pc, #440]	; (800f2dc <tcp_enqueue_flags+0x1e0>)
 800f122:	486f      	ldr	r0, [pc, #444]	; (800f2e0 <tcp_enqueue_flags+0x1e4>)
 800f124:	f006 fd56 	bl	8015bd4 <printf_>
              (flags & (TCP_SYN | TCP_FIN)) != 0);

  /* check for configured max queuelen and possible overflow (FIN flag should always come through!) */
  if (((pcb->snd_queuelen >= TCP_SND_QUEUELEN) || (pcb->snd_queuelen > TCP_SNDQUEUELEN_OVERFLOW)) &&
 800f128:	687b      	ldr	r3, [r7, #4]
 800f12a:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800f12e:	2b08      	cmp	r3, #8
 800f130:	d806      	bhi.n	800f140 <tcp_enqueue_flags+0x44>
 800f132:	687b      	ldr	r3, [r7, #4]
 800f134:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800f138:	f64f 72fc 	movw	r2, #65532	; 0xfffc
 800f13c:	4293      	cmp	r3, r2
 800f13e:	d90e      	bls.n	800f15e <tcp_enqueue_flags+0x62>
      ((flags & TCP_FIN) == 0)) {
 800f140:	78fb      	ldrb	r3, [r7, #3]
 800f142:	f003 0301 	and.w	r3, r3, #1
  if (((pcb->snd_queuelen >= TCP_SND_QUEUELEN) || (pcb->snd_queuelen > TCP_SNDQUEUELEN_OVERFLOW)) &&
 800f146:	2b00      	cmp	r3, #0
 800f148:	d109      	bne.n	800f15e <tcp_enqueue_flags+0x62>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("tcp_enqueue_flags: too long queue %"U16_F" (max %"U16_F")\n",
                                       pcb->snd_queuelen, (u16_t)TCP_SND_QUEUELEN));
    TCP_STATS_INC(tcp.memerr);
    pcb->flags |= TF_NAGLEMEMERR;
 800f14a:	687b      	ldr	r3, [r7, #4]
 800f14c:	7e9b      	ldrb	r3, [r3, #26]
 800f14e:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800f152:	b2da      	uxtb	r2, r3
 800f154:	687b      	ldr	r3, [r7, #4]
 800f156:	769a      	strb	r2, [r3, #26]
    return ERR_MEM;
 800f158:	f04f 33ff 	mov.w	r3, #4294967295
 800f15c:	e0b7      	b.n	800f2ce <tcp_enqueue_flags+0x1d2>
  }

  if (flags & TCP_SYN) {
 800f15e:	78fb      	ldrb	r3, [r7, #3]
 800f160:	f003 0302 	and.w	r3, r3, #2
 800f164:	2b00      	cmp	r3, #0
 800f166:	d001      	beq.n	800f16c <tcp_enqueue_flags+0x70>
    optflags = TF_SEG_OPTS_MSS;
 800f168:	2301      	movs	r3, #1
 800f16a:	77fb      	strb	r3, [r7, #31]
    /* Make sure the timestamp option is only included in data segments if we
       agreed about it with the remote host. */
    optflags |= TF_SEG_OPTS_TS;
  }
#endif /* LWIP_TCP_TIMESTAMPS */
  optlen = LWIP_TCP_OPT_LENGTH(optflags);
 800f16c:	7ffb      	ldrb	r3, [r7, #31]
 800f16e:	009b      	lsls	r3, r3, #2
 800f170:	b2db      	uxtb	r3, r3
 800f172:	f003 0304 	and.w	r3, r3, #4
 800f176:	75fb      	strb	r3, [r7, #23]

  /* Allocate pbuf with room for TCP header + options */
  if ((p = pbuf_alloc(PBUF_TRANSPORT, optlen, PBUF_RAM)) == NULL) {
 800f178:	7dfb      	ldrb	r3, [r7, #23]
 800f17a:	b29b      	uxth	r3, r3
 800f17c:	2200      	movs	r2, #0
 800f17e:	4619      	mov	r1, r3
 800f180:	2000      	movs	r0, #0
 800f182:	f7fa fe23 	bl	8009dcc <pbuf_alloc>
 800f186:	6138      	str	r0, [r7, #16]
 800f188:	693b      	ldr	r3, [r7, #16]
 800f18a:	2b00      	cmp	r3, #0
 800f18c:	d109      	bne.n	800f1a2 <tcp_enqueue_flags+0xa6>
    pcb->flags |= TF_NAGLEMEMERR;
 800f18e:	687b      	ldr	r3, [r7, #4]
 800f190:	7e9b      	ldrb	r3, [r3, #26]
 800f192:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800f196:	b2da      	uxtb	r2, r3
 800f198:	687b      	ldr	r3, [r7, #4]
 800f19a:	769a      	strb	r2, [r3, #26]
    TCP_STATS_INC(tcp.memerr);
    return ERR_MEM;
 800f19c:	f04f 33ff 	mov.w	r3, #4294967295
 800f1a0:	e095      	b.n	800f2ce <tcp_enqueue_flags+0x1d2>
  }
  LWIP_ASSERT("tcp_enqueue_flags: check that first pbuf can hold optlen",
 800f1a2:	693b      	ldr	r3, [r7, #16]
 800f1a4:	895a      	ldrh	r2, [r3, #10]
 800f1a6:	7dfb      	ldrb	r3, [r7, #23]
 800f1a8:	b29b      	uxth	r3, r3
 800f1aa:	429a      	cmp	r2, r3
 800f1ac:	d206      	bcs.n	800f1bc <tcp_enqueue_flags+0xc0>
 800f1ae:	4b4a      	ldr	r3, [pc, #296]	; (800f2d8 <tcp_enqueue_flags+0x1dc>)
 800f1b0:	f240 3241 	movw	r2, #833	; 0x341
 800f1b4:	494b      	ldr	r1, [pc, #300]	; (800f2e4 <tcp_enqueue_flags+0x1e8>)
 800f1b6:	484a      	ldr	r0, [pc, #296]	; (800f2e0 <tcp_enqueue_flags+0x1e4>)
 800f1b8:	f006 fd0c 	bl	8015bd4 <printf_>
              (p->len >= optlen));

  /* Allocate memory for tcp_seg, and fill in fields. */
  if ((seg = tcp_create_segment(pcb, p, flags, pcb->snd_lbb, optflags)) == NULL) {
 800f1bc:	687b      	ldr	r3, [r7, #4]
 800f1be:	6d99      	ldr	r1, [r3, #88]	; 0x58
 800f1c0:	78fa      	ldrb	r2, [r7, #3]
 800f1c2:	7ffb      	ldrb	r3, [r7, #31]
 800f1c4:	9300      	str	r3, [sp, #0]
 800f1c6:	460b      	mov	r3, r1
 800f1c8:	6939      	ldr	r1, [r7, #16]
 800f1ca:	6878      	ldr	r0, [r7, #4]
 800f1cc:	f7ff fadc 	bl	800e788 <tcp_create_segment>
 800f1d0:	60f8      	str	r0, [r7, #12]
 800f1d2:	68fb      	ldr	r3, [r7, #12]
 800f1d4:	2b00      	cmp	r3, #0
 800f1d6:	d109      	bne.n	800f1ec <tcp_enqueue_flags+0xf0>
    pcb->flags |= TF_NAGLEMEMERR;
 800f1d8:	687b      	ldr	r3, [r7, #4]
 800f1da:	7e9b      	ldrb	r3, [r3, #26]
 800f1dc:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800f1e0:	b2da      	uxtb	r2, r3
 800f1e2:	687b      	ldr	r3, [r7, #4]
 800f1e4:	769a      	strb	r2, [r3, #26]
    TCP_STATS_INC(tcp.memerr);
    return ERR_MEM;
 800f1e6:	f04f 33ff 	mov.w	r3, #4294967295
 800f1ea:	e070      	b.n	800f2ce <tcp_enqueue_flags+0x1d2>
  }
  LWIP_ASSERT("seg->tcphdr not aligned", ((mem_ptr_t)seg->tcphdr % LWIP_MIN(MEM_ALIGNMENT, 4)) == 0);
 800f1ec:	68fb      	ldr	r3, [r7, #12]
 800f1ee:	68db      	ldr	r3, [r3, #12]
 800f1f0:	f003 0303 	and.w	r3, r3, #3
 800f1f4:	2b00      	cmp	r3, #0
 800f1f6:	d006      	beq.n	800f206 <tcp_enqueue_flags+0x10a>
 800f1f8:	4b37      	ldr	r3, [pc, #220]	; (800f2d8 <tcp_enqueue_flags+0x1dc>)
 800f1fa:	f240 3249 	movw	r2, #841	; 0x349
 800f1fe:	493a      	ldr	r1, [pc, #232]	; (800f2e8 <tcp_enqueue_flags+0x1ec>)
 800f200:	4837      	ldr	r0, [pc, #220]	; (800f2e0 <tcp_enqueue_flags+0x1e4>)
 800f202:	f006 fce7 	bl	8015bd4 <printf_>
  LWIP_ASSERT("tcp_enqueue_flags: invalid segment length", seg->len == 0);
 800f206:	68fb      	ldr	r3, [r7, #12]
 800f208:	891b      	ldrh	r3, [r3, #8]
 800f20a:	2b00      	cmp	r3, #0
 800f20c:	d006      	beq.n	800f21c <tcp_enqueue_flags+0x120>
 800f20e:	4b32      	ldr	r3, [pc, #200]	; (800f2d8 <tcp_enqueue_flags+0x1dc>)
 800f210:	f240 324a 	movw	r2, #842	; 0x34a
 800f214:	4935      	ldr	r1, [pc, #212]	; (800f2ec <tcp_enqueue_flags+0x1f0>)
 800f216:	4832      	ldr	r0, [pc, #200]	; (800f2e0 <tcp_enqueue_flags+0x1e4>)
 800f218:	f006 fcdc 	bl	8015bd4 <printf_>
               lwip_ntohl(seg->tcphdr->seqno),
               lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg),
               (u16_t)flags));

  /* Now append seg to pcb->unsent queue */
  if (pcb->unsent == NULL) {
 800f21c:	687b      	ldr	r3, [r7, #4]
 800f21e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800f220:	2b00      	cmp	r3, #0
 800f222:	d103      	bne.n	800f22c <tcp_enqueue_flags+0x130>
    pcb->unsent = seg;
 800f224:	687b      	ldr	r3, [r7, #4]
 800f226:	68fa      	ldr	r2, [r7, #12]
 800f228:	669a      	str	r2, [r3, #104]	; 0x68
 800f22a:	e00d      	b.n	800f248 <tcp_enqueue_flags+0x14c>
  } else {
    struct tcp_seg *useg;
    for (useg = pcb->unsent; useg->next != NULL; useg = useg->next);
 800f22c:	687b      	ldr	r3, [r7, #4]
 800f22e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800f230:	61bb      	str	r3, [r7, #24]
 800f232:	e002      	b.n	800f23a <tcp_enqueue_flags+0x13e>
 800f234:	69bb      	ldr	r3, [r7, #24]
 800f236:	681b      	ldr	r3, [r3, #0]
 800f238:	61bb      	str	r3, [r7, #24]
 800f23a:	69bb      	ldr	r3, [r7, #24]
 800f23c:	681b      	ldr	r3, [r3, #0]
 800f23e:	2b00      	cmp	r3, #0
 800f240:	d1f8      	bne.n	800f234 <tcp_enqueue_flags+0x138>
    useg->next = seg;
 800f242:	69bb      	ldr	r3, [r7, #24]
 800f244:	68fa      	ldr	r2, [r7, #12]
 800f246:	601a      	str	r2, [r3, #0]
  }
#if TCP_OVERSIZE
  /* The new unsent tail has no space */
  pcb->unsent_oversize = 0;
 800f248:	687b      	ldr	r3, [r7, #4]
 800f24a:	2200      	movs	r2, #0
 800f24c:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
#endif /* TCP_OVERSIZE */

  /* SYN and FIN bump the sequence number */
  if ((flags & TCP_SYN) || (flags & TCP_FIN)) {
 800f250:	78fb      	ldrb	r3, [r7, #3]
 800f252:	f003 0302 	and.w	r3, r3, #2
 800f256:	2b00      	cmp	r3, #0
 800f258:	d104      	bne.n	800f264 <tcp_enqueue_flags+0x168>
 800f25a:	78fb      	ldrb	r3, [r7, #3]
 800f25c:	f003 0301 	and.w	r3, r3, #1
 800f260:	2b00      	cmp	r3, #0
 800f262:	d004      	beq.n	800f26e <tcp_enqueue_flags+0x172>
    pcb->snd_lbb++;
 800f264:	687b      	ldr	r3, [r7, #4]
 800f266:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800f268:	1c5a      	adds	r2, r3, #1
 800f26a:	687b      	ldr	r3, [r7, #4]
 800f26c:	659a      	str	r2, [r3, #88]	; 0x58
    /* optlen does not influence snd_buf */
  }
  if (flags & TCP_FIN) {
 800f26e:	78fb      	ldrb	r3, [r7, #3]
 800f270:	f003 0301 	and.w	r3, r3, #1
 800f274:	2b00      	cmp	r3, #0
 800f276:	d006      	beq.n	800f286 <tcp_enqueue_flags+0x18a>
    pcb->flags |= TF_FIN;
 800f278:	687b      	ldr	r3, [r7, #4]
 800f27a:	7e9b      	ldrb	r3, [r3, #26]
 800f27c:	f043 0320 	orr.w	r3, r3, #32
 800f280:	b2da      	uxtb	r2, r3
 800f282:	687b      	ldr	r3, [r7, #4]
 800f284:	769a      	strb	r2, [r3, #26]
  }

  /* update number of segments on the queues */
  pcb->snd_queuelen += pbuf_clen(seg->p);
 800f286:	68fb      	ldr	r3, [r7, #12]
 800f288:	685b      	ldr	r3, [r3, #4]
 800f28a:	4618      	mov	r0, r3
 800f28c:	f7fb f9aa 	bl	800a5e4 <pbuf_clen>
 800f290:	4603      	mov	r3, r0
 800f292:	461a      	mov	r2, r3
 800f294:	687b      	ldr	r3, [r7, #4]
 800f296:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800f29a:	4413      	add	r3, r2
 800f29c:	b29a      	uxth	r2, r3
 800f29e:	687b      	ldr	r3, [r7, #4]
 800f2a0:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue_flags: %"S16_F" (after enqueued)\n", pcb->snd_queuelen));
  if (pcb->snd_queuelen != 0) {
 800f2a4:	687b      	ldr	r3, [r7, #4]
 800f2a6:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800f2aa:	2b00      	cmp	r3, #0
 800f2ac:	d00e      	beq.n	800f2cc <tcp_enqueue_flags+0x1d0>
    LWIP_ASSERT("tcp_enqueue_flags: invalid queue length",
 800f2ae:	687b      	ldr	r3, [r7, #4]
 800f2b0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800f2b2:	2b00      	cmp	r3, #0
 800f2b4:	d10a      	bne.n	800f2cc <tcp_enqueue_flags+0x1d0>
 800f2b6:	687b      	ldr	r3, [r7, #4]
 800f2b8:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800f2ba:	2b00      	cmp	r3, #0
 800f2bc:	d106      	bne.n	800f2cc <tcp_enqueue_flags+0x1d0>
 800f2be:	4b06      	ldr	r3, [pc, #24]	; (800f2d8 <tcp_enqueue_flags+0x1dc>)
 800f2c0:	f240 326d 	movw	r2, #877	; 0x36d
 800f2c4:	490a      	ldr	r1, [pc, #40]	; (800f2f0 <tcp_enqueue_flags+0x1f4>)
 800f2c6:	4806      	ldr	r0, [pc, #24]	; (800f2e0 <tcp_enqueue_flags+0x1e4>)
 800f2c8:	f006 fc84 	bl	8015bd4 <printf_>
      pcb->unacked != NULL || pcb->unsent != NULL);
  }

  return ERR_OK;
 800f2cc:	2300      	movs	r3, #0
}
 800f2ce:	4618      	mov	r0, r3
 800f2d0:	3720      	adds	r7, #32
 800f2d2:	46bd      	mov	sp, r7
 800f2d4:	bd80      	pop	{r7, pc}
 800f2d6:	bf00      	nop
 800f2d8:	0801b2dc 	.word	0x0801b2dc
 800f2dc:	0801b5e0 	.word	0x0801b5e0
 800f2e0:	0801b340 	.word	0x0801b340
 800f2e4:	0801b638 	.word	0x0801b638
 800f2e8:	0801b674 	.word	0x0801b674
 800f2ec:	0801b68c 	.word	0x0801b68c
 800f2f0:	0801b6b8 	.word	0x0801b6b8

0800f2f4 <tcp_send_empty_ack>:
 *
 * @param pcb Protocol control block for the TCP connection to send the ACK
 */
err_t
tcp_send_empty_ack(struct tcp_pcb *pcb)
{
 800f2f4:	b590      	push	{r4, r7, lr}
 800f2f6:	b08b      	sub	sp, #44	; 0x2c
 800f2f8:	af04      	add	r7, sp, #16
 800f2fa:	6078      	str	r0, [r7, #4]
  err_t err;
  struct pbuf *p;
  u8_t optlen = 0;
 800f2fc:	2300      	movs	r3, #0
 800f2fe:	75bb      	strb	r3, [r7, #22]
  if (pcb->flags & TF_TIMESTAMP) {
    optlen = LWIP_TCP_OPT_LENGTH(TF_SEG_OPTS_TS);
  }
#endif

  p = tcp_output_alloc_header(pcb, optlen, 0, lwip_htonl(pcb->snd_nxt));
 800f300:	7dbb      	ldrb	r3, [r7, #22]
 800f302:	b29c      	uxth	r4, r3
 800f304:	687b      	ldr	r3, [r7, #4]
 800f306:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800f308:	4618      	mov	r0, r3
 800f30a:	f7f9 feb3 	bl	8009074 <lwip_htonl>
 800f30e:	4603      	mov	r3, r0
 800f310:	2200      	movs	r2, #0
 800f312:	4621      	mov	r1, r4
 800f314:	6878      	ldr	r0, [r7, #4]
 800f316:	f7ff f97b 	bl	800e610 <tcp_output_alloc_header>
 800f31a:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 800f31c:	693b      	ldr	r3, [r7, #16]
 800f31e:	2b00      	cmp	r3, #0
 800f320:	d109      	bne.n	800f336 <tcp_send_empty_ack+0x42>
    /* let tcp_fasttmr retry sending this ACK */
    pcb->flags |= (TF_ACK_DELAY | TF_ACK_NOW);
 800f322:	687b      	ldr	r3, [r7, #4]
 800f324:	7e9b      	ldrb	r3, [r3, #26]
 800f326:	f043 0303 	orr.w	r3, r3, #3
 800f32a:	b2da      	uxtb	r2, r3
 800f32c:	687b      	ldr	r3, [r7, #4]
 800f32e:	769a      	strb	r2, [r3, #26]
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_output: (ACK) could not allocate pbuf\n"));
    return ERR_BUF;
 800f330:	f06f 0301 	mvn.w	r3, #1
 800f334:	e036      	b.n	800f3a4 <tcp_send_empty_ack+0xb0>
  if (pcb->flags & TF_TIMESTAMP) {
    tcp_build_timestamp_option(pcb, (u32_t *)(tcphdr + 1));
  }
#endif

  netif = ip_route(&pcb->local_ip, &pcb->remote_ip);
 800f336:	687b      	ldr	r3, [r7, #4]
 800f338:	3304      	adds	r3, #4
 800f33a:	4618      	mov	r0, r3
 800f33c:	f002 fb7e 	bl	8011a3c <ip4_route>
 800f340:	60f8      	str	r0, [r7, #12]
  if (netif == NULL) {
 800f342:	68fb      	ldr	r3, [r7, #12]
 800f344:	2b00      	cmp	r3, #0
 800f346:	d102      	bne.n	800f34e <tcp_send_empty_ack+0x5a>
    err = ERR_RTE;
 800f348:	23fc      	movs	r3, #252	; 0xfc
 800f34a:	75fb      	strb	r3, [r7, #23]
 800f34c:	e012      	b.n	800f374 <tcp_send_empty_ack+0x80>
      tcphdr->chksum = ip_chksum_pseudo(p, IP_PROTO_TCP, p->tot_len,
        &pcb->local_ip, &pcb->remote_ip);
    }
#endif
    NETIF_SET_HWADDRHINT(netif, &(pcb->addr_hint));
    err = ip_output_if(p, &pcb->local_ip, &pcb->remote_ip,
 800f34e:	6879      	ldr	r1, [r7, #4]
 800f350:	687b      	ldr	r3, [r7, #4]
 800f352:	1d18      	adds	r0, r3, #4
 800f354:	687b      	ldr	r3, [r7, #4]
 800f356:	7a9c      	ldrb	r4, [r3, #10]
 800f358:	687b      	ldr	r3, [r7, #4]
 800f35a:	7a5b      	ldrb	r3, [r3, #9]
 800f35c:	68fa      	ldr	r2, [r7, #12]
 800f35e:	9202      	str	r2, [sp, #8]
 800f360:	2206      	movs	r2, #6
 800f362:	9201      	str	r2, [sp, #4]
 800f364:	9300      	str	r3, [sp, #0]
 800f366:	4623      	mov	r3, r4
 800f368:	4602      	mov	r2, r0
 800f36a:	6938      	ldr	r0, [r7, #16]
 800f36c:	f002 fd0e 	bl	8011d8c <ip4_output_if>
 800f370:	4603      	mov	r3, r0
 800f372:	75fb      	strb	r3, [r7, #23]
      pcb->ttl, pcb->tos, IP_PROTO_TCP, netif);
    NETIF_SET_HWADDRHINT(netif, NULL);
  }
  pbuf_free(p);
 800f374:	6938      	ldr	r0, [r7, #16]
 800f376:	f7fb f89b 	bl	800a4b0 <pbuf_free>

  if (err != ERR_OK) {
 800f37a:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800f37e:	2b00      	cmp	r3, #0
 800f380:	d007      	beq.n	800f392 <tcp_send_empty_ack+0x9e>
    /* let tcp_fasttmr retry sending this ACK */
    pcb->flags |= (TF_ACK_DELAY | TF_ACK_NOW);
 800f382:	687b      	ldr	r3, [r7, #4]
 800f384:	7e9b      	ldrb	r3, [r3, #26]
 800f386:	f043 0303 	orr.w	r3, r3, #3
 800f38a:	b2da      	uxtb	r2, r3
 800f38c:	687b      	ldr	r3, [r7, #4]
 800f38e:	769a      	strb	r2, [r3, #26]
 800f390:	e006      	b.n	800f3a0 <tcp_send_empty_ack+0xac>
  } else {
    /* remove ACK flags from the PCB, as we sent an empty ACK now */
    pcb->flags &= ~(TF_ACK_DELAY | TF_ACK_NOW);
 800f392:	687b      	ldr	r3, [r7, #4]
 800f394:	7e9b      	ldrb	r3, [r3, #26]
 800f396:	f023 0303 	bic.w	r3, r3, #3
 800f39a:	b2da      	uxtb	r2, r3
 800f39c:	687b      	ldr	r3, [r7, #4]
 800f39e:	769a      	strb	r2, [r3, #26]
  }

  return err;
 800f3a0:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800f3a4:	4618      	mov	r0, r3
 800f3a6:	371c      	adds	r7, #28
 800f3a8:	46bd      	mov	sp, r7
 800f3aa:	bd90      	pop	{r4, r7, pc}

0800f3ac <tcp_output>:
 * @return ERR_OK if data has been sent or nothing to send
 *         another err_t on error
 */
err_t
tcp_output(struct tcp_pcb *pcb)
{
 800f3ac:	b5b0      	push	{r4, r5, r7, lr}
 800f3ae:	b08a      	sub	sp, #40	; 0x28
 800f3b0:	af00      	add	r7, sp, #0
 800f3b2:	6078      	str	r0, [r7, #4]
#if TCP_CWND_DEBUG
  s16_t i = 0;
#endif /* TCP_CWND_DEBUG */

  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_output for listen-pcbs",
 800f3b4:	687b      	ldr	r3, [r7, #4]
 800f3b6:	7d1b      	ldrb	r3, [r3, #20]
 800f3b8:	2b01      	cmp	r3, #1
 800f3ba:	d106      	bne.n	800f3ca <tcp_output+0x1e>
 800f3bc:	4b9b      	ldr	r3, [pc, #620]	; (800f62c <tcp_output+0x280>)
 800f3be:	f240 32ed 	movw	r2, #1005	; 0x3ed
 800f3c2:	499b      	ldr	r1, [pc, #620]	; (800f630 <tcp_output+0x284>)
 800f3c4:	489b      	ldr	r0, [pc, #620]	; (800f634 <tcp_output+0x288>)
 800f3c6:	f006 fc05 	bl	8015bd4 <printf_>

  /* First, check if we are invoked by the TCP input processing
     code. If so, we do not output anything. Instead, we rely on the
     input processing code to call us when input processing is done
     with. */
  if (tcp_input_pcb == pcb) {
 800f3ca:	4b9b      	ldr	r3, [pc, #620]	; (800f638 <tcp_output+0x28c>)
 800f3cc:	681b      	ldr	r3, [r3, #0]
 800f3ce:	687a      	ldr	r2, [r7, #4]
 800f3d0:	429a      	cmp	r2, r3
 800f3d2:	d101      	bne.n	800f3d8 <tcp_output+0x2c>
    return ERR_OK;
 800f3d4:	2300      	movs	r3, #0
 800f3d6:	e1cf      	b.n	800f778 <tcp_output+0x3cc>
  }

  wnd = LWIP_MIN(pcb->snd_wnd, pcb->cwnd);
 800f3d8:	687b      	ldr	r3, [r7, #4]
 800f3da:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 800f3de:	687b      	ldr	r3, [r7, #4]
 800f3e0:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 800f3e4:	429a      	cmp	r2, r3
 800f3e6:	d203      	bcs.n	800f3f0 <tcp_output+0x44>
 800f3e8:	687b      	ldr	r3, [r7, #4]
 800f3ea:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800f3ee:	e002      	b.n	800f3f6 <tcp_output+0x4a>
 800f3f0:	687b      	ldr	r3, [r7, #4]
 800f3f2:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 800f3f6:	61bb      	str	r3, [r7, #24]

  seg = pcb->unsent;
 800f3f8:	687b      	ldr	r3, [r7, #4]
 800f3fa:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800f3fc:	627b      	str	r3, [r7, #36]	; 0x24
   * because the ->unsent queue is empty or because the window does
   * not allow it), construct an empty ACK segment and send it.
   *
   * If data is to be sent, we will just piggyback the ACK (see below).
   */
  if (pcb->flags & TF_ACK_NOW &&
 800f3fe:	687b      	ldr	r3, [r7, #4]
 800f400:	7e9b      	ldrb	r3, [r3, #26]
 800f402:	f003 0302 	and.w	r3, r3, #2
 800f406:	2b00      	cmp	r3, #0
 800f408:	d017      	beq.n	800f43a <tcp_output+0x8e>
 800f40a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f40c:	2b00      	cmp	r3, #0
 800f40e:	d00f      	beq.n	800f430 <tcp_output+0x84>
     (seg == NULL ||
      lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len > wnd)) {
 800f410:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f412:	68db      	ldr	r3, [r3, #12]
 800f414:	685b      	ldr	r3, [r3, #4]
 800f416:	4618      	mov	r0, r3
 800f418:	f7f9 fe2c 	bl	8009074 <lwip_htonl>
 800f41c:	4602      	mov	r2, r0
 800f41e:	687b      	ldr	r3, [r7, #4]
 800f420:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800f422:	1ad3      	subs	r3, r2, r3
 800f424:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800f426:	8912      	ldrh	r2, [r2, #8]
 800f428:	4413      	add	r3, r2
     (seg == NULL ||
 800f42a:	69ba      	ldr	r2, [r7, #24]
 800f42c:	429a      	cmp	r2, r3
 800f42e:	d204      	bcs.n	800f43a <tcp_output+0x8e>
     return tcp_send_empty_ack(pcb);
 800f430:	6878      	ldr	r0, [r7, #4]
 800f432:	f7ff ff5f 	bl	800f2f4 <tcp_send_empty_ack>
 800f436:	4603      	mov	r3, r0
 800f438:	e19e      	b.n	800f778 <tcp_output+0x3cc>
  }

  /* useg should point to last segment on unacked queue */
  useg = pcb->unacked;
 800f43a:	687b      	ldr	r3, [r7, #4]
 800f43c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800f43e:	623b      	str	r3, [r7, #32]
  if (useg != NULL) {
 800f440:	6a3b      	ldr	r3, [r7, #32]
 800f442:	2b00      	cmp	r3, #0
 800f444:	d007      	beq.n	800f456 <tcp_output+0xaa>
    for (; useg->next != NULL; useg = useg->next);
 800f446:	e002      	b.n	800f44e <tcp_output+0xa2>
 800f448:	6a3b      	ldr	r3, [r7, #32]
 800f44a:	681b      	ldr	r3, [r3, #0]
 800f44c:	623b      	str	r3, [r7, #32]
 800f44e:	6a3b      	ldr	r3, [r7, #32]
 800f450:	681b      	ldr	r3, [r3, #0]
 800f452:	2b00      	cmp	r3, #0
 800f454:	d1f8      	bne.n	800f448 <tcp_output+0x9c>
  }

  netif = ip_route(&pcb->local_ip, &pcb->remote_ip);
 800f456:	687b      	ldr	r3, [r7, #4]
 800f458:	3304      	adds	r3, #4
 800f45a:	4618      	mov	r0, r3
 800f45c:	f002 faee 	bl	8011a3c <ip4_route>
 800f460:	6178      	str	r0, [r7, #20]
  if (netif == NULL) {
 800f462:	697b      	ldr	r3, [r7, #20]
 800f464:	2b00      	cmp	r3, #0
 800f466:	d102      	bne.n	800f46e <tcp_output+0xc2>
    return ERR_RTE;
 800f468:	f06f 0303 	mvn.w	r3, #3
 800f46c:	e184      	b.n	800f778 <tcp_output+0x3cc>
  }

  /* If we don't have a local IP address, we get one from netif */
  if (ip_addr_isany(&pcb->local_ip)) {
 800f46e:	687b      	ldr	r3, [r7, #4]
 800f470:	2b00      	cmp	r3, #0
 800f472:	d003      	beq.n	800f47c <tcp_output+0xd0>
 800f474:	687b      	ldr	r3, [r7, #4]
 800f476:	681b      	ldr	r3, [r3, #0]
 800f478:	2b00      	cmp	r3, #0
 800f47a:	d111      	bne.n	800f4a0 <tcp_output+0xf4>
    const ip_addr_t *local_ip = ip_netif_get_local_ip(netif, &pcb->remote_ip);
 800f47c:	697b      	ldr	r3, [r7, #20]
 800f47e:	2b00      	cmp	r3, #0
 800f480:	d002      	beq.n	800f488 <tcp_output+0xdc>
 800f482:	697b      	ldr	r3, [r7, #20]
 800f484:	3304      	adds	r3, #4
 800f486:	e000      	b.n	800f48a <tcp_output+0xde>
 800f488:	2300      	movs	r3, #0
 800f48a:	613b      	str	r3, [r7, #16]
    if (local_ip == NULL) {
 800f48c:	693b      	ldr	r3, [r7, #16]
 800f48e:	2b00      	cmp	r3, #0
 800f490:	d102      	bne.n	800f498 <tcp_output+0xec>
      return ERR_RTE;
 800f492:	f06f 0303 	mvn.w	r3, #3
 800f496:	e16f      	b.n	800f778 <tcp_output+0x3cc>
    }
    ip_addr_copy(pcb->local_ip, *local_ip);
 800f498:	693b      	ldr	r3, [r7, #16]
 800f49a:	681a      	ldr	r2, [r3, #0]
 800f49c:	687b      	ldr	r3, [r7, #4]
 800f49e:	601a      	str	r2, [r3, #0]
   * with part of the unsent segment (which will engage zero-window probing upon
   * reception of the zero window update from the receiver). This ensures the
   * subsequent window update is reliably received. With the goal of being lightweight,
   * we avoid splitting the unsent segment and treat the window as already zero.
   */
  if (seg != NULL &&
 800f4a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f4a2:	2b00      	cmp	r3, #0
 800f4a4:	f000 813e 	beq.w	800f724 <tcp_output+0x378>
      lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len > wnd &&
 800f4a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f4aa:	68db      	ldr	r3, [r3, #12]
 800f4ac:	685b      	ldr	r3, [r3, #4]
 800f4ae:	4618      	mov	r0, r3
 800f4b0:	f7f9 fde0 	bl	8009074 <lwip_htonl>
 800f4b4:	4602      	mov	r2, r0
 800f4b6:	687b      	ldr	r3, [r7, #4]
 800f4b8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800f4ba:	1ad3      	subs	r3, r2, r3
 800f4bc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800f4be:	8912      	ldrh	r2, [r2, #8]
 800f4c0:	4413      	add	r3, r2
  if (seg != NULL &&
 800f4c2:	69ba      	ldr	r2, [r7, #24]
 800f4c4:	429a      	cmp	r2, r3
 800f4c6:	f080 812d 	bcs.w	800f724 <tcp_output+0x378>
      lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len > wnd &&
 800f4ca:	69bb      	ldr	r3, [r7, #24]
 800f4cc:	2b00      	cmp	r3, #0
 800f4ce:	f000 8129 	beq.w	800f724 <tcp_output+0x378>
      wnd > 0 && wnd == pcb->snd_wnd && pcb->unacked == NULL) {
 800f4d2:	687b      	ldr	r3, [r7, #4]
 800f4d4:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800f4d8:	461a      	mov	r2, r3
 800f4da:	69bb      	ldr	r3, [r7, #24]
 800f4dc:	4293      	cmp	r3, r2
 800f4de:	f040 8121 	bne.w	800f724 <tcp_output+0x378>
 800f4e2:	687b      	ldr	r3, [r7, #4]
 800f4e4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800f4e6:	2b00      	cmp	r3, #0
 800f4e8:	f040 811c 	bne.w	800f724 <tcp_output+0x378>
    /* Start the persist timer */
    if (pcb->persist_backoff == 0) {
 800f4ec:	687b      	ldr	r3, [r7, #4]
 800f4ee:	f893 3095 	ldrb.w	r3, [r3, #149]	; 0x95
 800f4f2:	2b00      	cmp	r3, #0
 800f4f4:	f040 812b 	bne.w	800f74e <tcp_output+0x3a2>
      pcb->persist_cnt = 0;
 800f4f8:	687b      	ldr	r3, [r7, #4]
 800f4fa:	2200      	movs	r2, #0
 800f4fc:	f883 2094 	strb.w	r2, [r3, #148]	; 0x94
      pcb->persist_backoff = 1;
 800f500:	687b      	ldr	r3, [r7, #4]
 800f502:	2201      	movs	r2, #1
 800f504:	f883 2095 	strb.w	r2, [r3, #149]	; 0x95
    }
    goto output_done;
 800f508:	e121      	b.n	800f74e <tcp_output+0x3a2>
  }
  /* data available and window allows it to be sent? */
  while (seg != NULL &&
         lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len <= wnd) {
    LWIP_ASSERT("RST not expected here!",
 800f50a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f50c:	68db      	ldr	r3, [r3, #12]
 800f50e:	899b      	ldrh	r3, [r3, #12]
 800f510:	b29b      	uxth	r3, r3
 800f512:	4618      	mov	r0, r3
 800f514:	f7f9 fda0 	bl	8009058 <lwip_htons>
 800f518:	4603      	mov	r3, r0
 800f51a:	f003 0304 	and.w	r3, r3, #4
 800f51e:	2b00      	cmp	r3, #0
 800f520:	d006      	beq.n	800f530 <tcp_output+0x184>
 800f522:	4b42      	ldr	r3, [pc, #264]	; (800f62c <tcp_output+0x280>)
 800f524:	f240 4246 	movw	r2, #1094	; 0x446
 800f528:	4944      	ldr	r1, [pc, #272]	; (800f63c <tcp_output+0x290>)
 800f52a:	4842      	ldr	r0, [pc, #264]	; (800f634 <tcp_output+0x288>)
 800f52c:	f006 fb52 	bl	8015bd4 <printf_>
     * - if tcp_write had a memory error before (prevent delayed ACK timeout) or
     * - if FIN was already enqueued for this PCB (SYN is always alone in a segment -
     *   either seg->next != NULL or pcb->unacked == NULL;
     *   RST is no sent using tcp_write/tcp_output.
     */
    if ((tcp_do_output_nagle(pcb) == 0) &&
 800f530:	687b      	ldr	r3, [r7, #4]
 800f532:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800f534:	2b00      	cmp	r3, #0
 800f536:	d01f      	beq.n	800f578 <tcp_output+0x1cc>
 800f538:	687b      	ldr	r3, [r7, #4]
 800f53a:	7e9b      	ldrb	r3, [r3, #26]
 800f53c:	f003 0344 	and.w	r3, r3, #68	; 0x44
 800f540:	2b00      	cmp	r3, #0
 800f542:	d119      	bne.n	800f578 <tcp_output+0x1cc>
 800f544:	687b      	ldr	r3, [r7, #4]
 800f546:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800f548:	2b00      	cmp	r3, #0
 800f54a:	d00b      	beq.n	800f564 <tcp_output+0x1b8>
 800f54c:	687b      	ldr	r3, [r7, #4]
 800f54e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800f550:	681b      	ldr	r3, [r3, #0]
 800f552:	2b00      	cmp	r3, #0
 800f554:	d110      	bne.n	800f578 <tcp_output+0x1cc>
 800f556:	687b      	ldr	r3, [r7, #4]
 800f558:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800f55a:	891a      	ldrh	r2, [r3, #8]
 800f55c:	687b      	ldr	r3, [r7, #4]
 800f55e:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800f560:	429a      	cmp	r2, r3
 800f562:	d209      	bcs.n	800f578 <tcp_output+0x1cc>
 800f564:	687b      	ldr	r3, [r7, #4]
 800f566:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800f56a:	2b00      	cmp	r3, #0
 800f56c:	d004      	beq.n	800f578 <tcp_output+0x1cc>
 800f56e:	687b      	ldr	r3, [r7, #4]
 800f570:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800f574:	2b08      	cmp	r3, #8
 800f576:	d901      	bls.n	800f57c <tcp_output+0x1d0>
 800f578:	2301      	movs	r3, #1
 800f57a:	e000      	b.n	800f57e <tcp_output+0x1d2>
 800f57c:	2300      	movs	r3, #0
 800f57e:	2b00      	cmp	r3, #0
 800f580:	d106      	bne.n	800f590 <tcp_output+0x1e4>
      ((pcb->flags & (TF_NAGLEMEMERR | TF_FIN)) == 0)) {
 800f582:	687b      	ldr	r3, [r7, #4]
 800f584:	7e9b      	ldrb	r3, [r3, #26]
 800f586:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
    if ((tcp_do_output_nagle(pcb) == 0) &&
 800f58a:	2b00      	cmp	r3, #0
 800f58c:	f000 80e1 	beq.w	800f752 <tcp_output+0x3a6>
                            pcb->lastack,
                            lwip_ntohl(seg->tcphdr->seqno), pcb->lastack, i));
    ++i;
#endif /* TCP_CWND_DEBUG */

    if (pcb->state != SYN_SENT) {
 800f590:	687b      	ldr	r3, [r7, #4]
 800f592:	7d1b      	ldrb	r3, [r3, #20]
 800f594:	2b02      	cmp	r3, #2
 800f596:	d00d      	beq.n	800f5b4 <tcp_output+0x208>
      TCPH_SET_FLAG(seg->tcphdr, TCP_ACK);
 800f598:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f59a:	68db      	ldr	r3, [r3, #12]
 800f59c:	899b      	ldrh	r3, [r3, #12]
 800f59e:	b29c      	uxth	r4, r3
 800f5a0:	2010      	movs	r0, #16
 800f5a2:	f7f9 fd59 	bl	8009058 <lwip_htons>
 800f5a6:	4603      	mov	r3, r0
 800f5a8:	461a      	mov	r2, r3
 800f5aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f5ac:	68db      	ldr	r3, [r3, #12]
 800f5ae:	4322      	orrs	r2, r4
 800f5b0:	b292      	uxth	r2, r2
 800f5b2:	819a      	strh	r2, [r3, #12]
    }

#if TCP_OVERSIZE_DBGCHECK
    seg->oversize_left = 0;
#endif /* TCP_OVERSIZE_DBGCHECK */
    err = tcp_output_segment(seg, pcb, netif);
 800f5b4:	697a      	ldr	r2, [r7, #20]
 800f5b6:	6879      	ldr	r1, [r7, #4]
 800f5b8:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800f5ba:	f000 f8e1 	bl	800f780 <tcp_output_segment>
 800f5be:	4603      	mov	r3, r0
 800f5c0:	73fb      	strb	r3, [r7, #15]
    if (err != ERR_OK) {
 800f5c2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800f5c6:	2b00      	cmp	r3, #0
 800f5c8:	d009      	beq.n	800f5de <tcp_output+0x232>
      /* segment could not be sent, for whatever reason */
      pcb->flags |= TF_NAGLEMEMERR;
 800f5ca:	687b      	ldr	r3, [r7, #4]
 800f5cc:	7e9b      	ldrb	r3, [r3, #26]
 800f5ce:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800f5d2:	b2da      	uxtb	r2, r3
 800f5d4:	687b      	ldr	r3, [r7, #4]
 800f5d6:	769a      	strb	r2, [r3, #26]
      return err;
 800f5d8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800f5dc:	e0cc      	b.n	800f778 <tcp_output+0x3cc>
    }
    pcb->unsent = seg->next;
 800f5de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f5e0:	681a      	ldr	r2, [r3, #0]
 800f5e2:	687b      	ldr	r3, [r7, #4]
 800f5e4:	669a      	str	r2, [r3, #104]	; 0x68
    if (pcb->state != SYN_SENT) {
 800f5e6:	687b      	ldr	r3, [r7, #4]
 800f5e8:	7d1b      	ldrb	r3, [r3, #20]
 800f5ea:	2b02      	cmp	r3, #2
 800f5ec:	d006      	beq.n	800f5fc <tcp_output+0x250>
      pcb->flags &= ~(TF_ACK_DELAY | TF_ACK_NOW);
 800f5ee:	687b      	ldr	r3, [r7, #4]
 800f5f0:	7e9b      	ldrb	r3, [r3, #26]
 800f5f2:	f023 0303 	bic.w	r3, r3, #3
 800f5f6:	b2da      	uxtb	r2, r3
 800f5f8:	687b      	ldr	r3, [r7, #4]
 800f5fa:	769a      	strb	r2, [r3, #26]
    }
    snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 800f5fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f5fe:	68db      	ldr	r3, [r3, #12]
 800f600:	685b      	ldr	r3, [r3, #4]
 800f602:	4618      	mov	r0, r3
 800f604:	f7f9 fd36 	bl	8009074 <lwip_htonl>
 800f608:	4604      	mov	r4, r0
 800f60a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f60c:	891b      	ldrh	r3, [r3, #8]
 800f60e:	461d      	mov	r5, r3
 800f610:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f612:	68db      	ldr	r3, [r3, #12]
 800f614:	899b      	ldrh	r3, [r3, #12]
 800f616:	b29b      	uxth	r3, r3
 800f618:	4618      	mov	r0, r3
 800f61a:	f7f9 fd1d 	bl	8009058 <lwip_htons>
 800f61e:	4603      	mov	r3, r0
 800f620:	f003 0303 	and.w	r3, r3, #3
 800f624:	2b00      	cmp	r3, #0
 800f626:	d00b      	beq.n	800f640 <tcp_output+0x294>
 800f628:	2301      	movs	r3, #1
 800f62a:	e00a      	b.n	800f642 <tcp_output+0x296>
 800f62c:	0801b2dc 	.word	0x0801b2dc
 800f630:	0801b6e0 	.word	0x0801b6e0
 800f634:	0801b340 	.word	0x0801b340
 800f638:	2400f2fc 	.word	0x2400f2fc
 800f63c:	0801b708 	.word	0x0801b708
 800f640:	2300      	movs	r3, #0
 800f642:	442b      	add	r3, r5
 800f644:	4423      	add	r3, r4
 800f646:	60bb      	str	r3, [r7, #8]
    if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 800f648:	687b      	ldr	r3, [r7, #4]
 800f64a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800f64c:	68bb      	ldr	r3, [r7, #8]
 800f64e:	1ad3      	subs	r3, r2, r3
 800f650:	2b00      	cmp	r3, #0
 800f652:	da02      	bge.n	800f65a <tcp_output+0x2ae>
      pcb->snd_nxt = snd_nxt;
 800f654:	687b      	ldr	r3, [r7, #4]
 800f656:	68ba      	ldr	r2, [r7, #8]
 800f658:	64da      	str	r2, [r3, #76]	; 0x4c
    }
    /* put segment on unacknowledged list if length > 0 */
    if (TCP_TCPLEN(seg) > 0) {
 800f65a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f65c:	891b      	ldrh	r3, [r3, #8]
 800f65e:	461c      	mov	r4, r3
 800f660:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f662:	68db      	ldr	r3, [r3, #12]
 800f664:	899b      	ldrh	r3, [r3, #12]
 800f666:	b29b      	uxth	r3, r3
 800f668:	4618      	mov	r0, r3
 800f66a:	f7f9 fcf5 	bl	8009058 <lwip_htons>
 800f66e:	4603      	mov	r3, r0
 800f670:	f003 0303 	and.w	r3, r3, #3
 800f674:	2b00      	cmp	r3, #0
 800f676:	d001      	beq.n	800f67c <tcp_output+0x2d0>
 800f678:	2301      	movs	r3, #1
 800f67a:	e000      	b.n	800f67e <tcp_output+0x2d2>
 800f67c:	2300      	movs	r3, #0
 800f67e:	4423      	add	r3, r4
 800f680:	2b00      	cmp	r3, #0
 800f682:	d049      	beq.n	800f718 <tcp_output+0x36c>
      seg->next = NULL;
 800f684:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f686:	2200      	movs	r2, #0
 800f688:	601a      	str	r2, [r3, #0]
      /* unacked list is empty? */
      if (pcb->unacked == NULL) {
 800f68a:	687b      	ldr	r3, [r7, #4]
 800f68c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800f68e:	2b00      	cmp	r3, #0
 800f690:	d105      	bne.n	800f69e <tcp_output+0x2f2>
        pcb->unacked = seg;
 800f692:	687b      	ldr	r3, [r7, #4]
 800f694:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800f696:	66da      	str	r2, [r3, #108]	; 0x6c
        useg = seg;
 800f698:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f69a:	623b      	str	r3, [r7, #32]
 800f69c:	e03f      	b.n	800f71e <tcp_output+0x372>
      /* unacked list is not empty? */
      } else {
        /* In the case of fast retransmit, the packet should not go to the tail
         * of the unacked queue, but rather somewhere before it. We need to check for
         * this case. -STJ Jul 27, 2004 */
        if (TCP_SEQ_LT(lwip_ntohl(seg->tcphdr->seqno), lwip_ntohl(useg->tcphdr->seqno))) {
 800f69e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f6a0:	68db      	ldr	r3, [r3, #12]
 800f6a2:	685b      	ldr	r3, [r3, #4]
 800f6a4:	4618      	mov	r0, r3
 800f6a6:	f7f9 fce5 	bl	8009074 <lwip_htonl>
 800f6aa:	4604      	mov	r4, r0
 800f6ac:	6a3b      	ldr	r3, [r7, #32]
 800f6ae:	68db      	ldr	r3, [r3, #12]
 800f6b0:	685b      	ldr	r3, [r3, #4]
 800f6b2:	4618      	mov	r0, r3
 800f6b4:	f7f9 fcde 	bl	8009074 <lwip_htonl>
 800f6b8:	4603      	mov	r3, r0
 800f6ba:	1ae3      	subs	r3, r4, r3
 800f6bc:	2b00      	cmp	r3, #0
 800f6be:	da24      	bge.n	800f70a <tcp_output+0x35e>
          /* add segment to before tail of unacked list, keeping the list sorted */
          struct tcp_seg **cur_seg = &(pcb->unacked);
 800f6c0:	687b      	ldr	r3, [r7, #4]
 800f6c2:	336c      	adds	r3, #108	; 0x6c
 800f6c4:	61fb      	str	r3, [r7, #28]
          while (*cur_seg &&
 800f6c6:	e002      	b.n	800f6ce <tcp_output+0x322>
            TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
              cur_seg = &((*cur_seg)->next );
 800f6c8:	69fb      	ldr	r3, [r7, #28]
 800f6ca:	681b      	ldr	r3, [r3, #0]
 800f6cc:	61fb      	str	r3, [r7, #28]
          while (*cur_seg &&
 800f6ce:	69fb      	ldr	r3, [r7, #28]
 800f6d0:	681b      	ldr	r3, [r3, #0]
 800f6d2:	2b00      	cmp	r3, #0
 800f6d4:	d011      	beq.n	800f6fa <tcp_output+0x34e>
            TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
 800f6d6:	69fb      	ldr	r3, [r7, #28]
 800f6d8:	681b      	ldr	r3, [r3, #0]
 800f6da:	68db      	ldr	r3, [r3, #12]
 800f6dc:	685b      	ldr	r3, [r3, #4]
 800f6de:	4618      	mov	r0, r3
 800f6e0:	f7f9 fcc8 	bl	8009074 <lwip_htonl>
 800f6e4:	4604      	mov	r4, r0
 800f6e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f6e8:	68db      	ldr	r3, [r3, #12]
 800f6ea:	685b      	ldr	r3, [r3, #4]
 800f6ec:	4618      	mov	r0, r3
 800f6ee:	f7f9 fcc1 	bl	8009074 <lwip_htonl>
 800f6f2:	4603      	mov	r3, r0
 800f6f4:	1ae3      	subs	r3, r4, r3
          while (*cur_seg &&
 800f6f6:	2b00      	cmp	r3, #0
 800f6f8:	dbe6      	blt.n	800f6c8 <tcp_output+0x31c>
          }
          seg->next = (*cur_seg);
 800f6fa:	69fb      	ldr	r3, [r7, #28]
 800f6fc:	681a      	ldr	r2, [r3, #0]
 800f6fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f700:	601a      	str	r2, [r3, #0]
          (*cur_seg) = seg;
 800f702:	69fb      	ldr	r3, [r7, #28]
 800f704:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800f706:	601a      	str	r2, [r3, #0]
 800f708:	e009      	b.n	800f71e <tcp_output+0x372>
        } else {
          /* add segment to tail of unacked list */
          useg->next = seg;
 800f70a:	6a3b      	ldr	r3, [r7, #32]
 800f70c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800f70e:	601a      	str	r2, [r3, #0]
          useg = useg->next;
 800f710:	6a3b      	ldr	r3, [r7, #32]
 800f712:	681b      	ldr	r3, [r3, #0]
 800f714:	623b      	str	r3, [r7, #32]
 800f716:	e002      	b.n	800f71e <tcp_output+0x372>
        }
      }
    /* do not queue empty segments on the unacked list */
    } else {
      tcp_seg_free(seg);
 800f718:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800f71a:	f7fc f9b1 	bl	800ba80 <tcp_seg_free>
    }
    seg = pcb->unsent;
 800f71e:	687b      	ldr	r3, [r7, #4]
 800f720:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800f722:	627b      	str	r3, [r7, #36]	; 0x24
  while (seg != NULL &&
 800f724:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f726:	2b00      	cmp	r3, #0
 800f728:	d015      	beq.n	800f756 <tcp_output+0x3aa>
         lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len <= wnd) {
 800f72a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f72c:	68db      	ldr	r3, [r3, #12]
 800f72e:	685b      	ldr	r3, [r3, #4]
 800f730:	4618      	mov	r0, r3
 800f732:	f7f9 fc9f 	bl	8009074 <lwip_htonl>
 800f736:	4602      	mov	r2, r0
 800f738:	687b      	ldr	r3, [r7, #4]
 800f73a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800f73c:	1ad3      	subs	r3, r2, r3
 800f73e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800f740:	8912      	ldrh	r2, [r2, #8]
 800f742:	4413      	add	r3, r2
  while (seg != NULL &&
 800f744:	69ba      	ldr	r2, [r7, #24]
 800f746:	429a      	cmp	r2, r3
 800f748:	f4bf aedf 	bcs.w	800f50a <tcp_output+0x15e>
  }
output_done:
 800f74c:	e003      	b.n	800f756 <tcp_output+0x3aa>
    goto output_done;
 800f74e:	bf00      	nop
 800f750:	e002      	b.n	800f758 <tcp_output+0x3ac>
      break;
 800f752:	bf00      	nop
 800f754:	e000      	b.n	800f758 <tcp_output+0x3ac>
output_done:
 800f756:	bf00      	nop
#if TCP_OVERSIZE
  if (pcb->unsent == NULL) {
 800f758:	687b      	ldr	r3, [r7, #4]
 800f75a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800f75c:	2b00      	cmp	r3, #0
 800f75e:	d103      	bne.n	800f768 <tcp_output+0x3bc>
    /* last unsent has been removed, reset unsent_oversize */
    pcb->unsent_oversize = 0;
 800f760:	687b      	ldr	r3, [r7, #4]
 800f762:	2200      	movs	r2, #0
 800f764:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
  }
#endif /* TCP_OVERSIZE */

  pcb->flags &= ~TF_NAGLEMEMERR;
 800f768:	687b      	ldr	r3, [r7, #4]
 800f76a:	7e9b      	ldrb	r3, [r3, #26]
 800f76c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800f770:	b2da      	uxtb	r2, r3
 800f772:	687b      	ldr	r3, [r7, #4]
 800f774:	769a      	strb	r2, [r3, #26]
  return ERR_OK;
 800f776:	2300      	movs	r3, #0
}
 800f778:	4618      	mov	r0, r3
 800f77a:	3728      	adds	r7, #40	; 0x28
 800f77c:	46bd      	mov	sp, r7
 800f77e:	bdb0      	pop	{r4, r5, r7, pc}

0800f780 <tcp_output_segment>:
 * @param pcb the tcp_pcb for the TCP connection used to send the segment
 * @param netif the netif used to send the segment
 */
static err_t
tcp_output_segment(struct tcp_seg *seg, struct tcp_pcb *pcb, struct netif *netif)
{
 800f780:	b5b0      	push	{r4, r5, r7, lr}
 800f782:	b08c      	sub	sp, #48	; 0x30
 800f784:	af04      	add	r7, sp, #16
 800f786:	60f8      	str	r0, [r7, #12]
 800f788:	60b9      	str	r1, [r7, #8]
 800f78a:	607a      	str	r2, [r7, #4]
  err_t err;
  u16_t len;
  u32_t *opts;

  if (seg->p->ref != 1) {
 800f78c:	68fb      	ldr	r3, [r7, #12]
 800f78e:	685b      	ldr	r3, [r3, #4]
 800f790:	89db      	ldrh	r3, [r3, #14]
 800f792:	2b01      	cmp	r3, #1
 800f794:	d001      	beq.n	800f79a <tcp_output_segment+0x1a>
    /* This can happen if the pbuf of this segment is still referenced by the
       netif driver due to deferred transmission. Since this function modifies
       p->len, we must not continue in this case. */
    return ERR_OK;
 800f796:	2300      	movs	r3, #0
 800f798:	e08b      	b.n	800f8b2 <tcp_output_segment+0x132>
  }

  /* The TCP header has already been constructed, but the ackno and
   wnd fields remain. */
  seg->tcphdr->ackno = lwip_htonl(pcb->rcv_nxt);
 800f79a:	68bb      	ldr	r3, [r7, #8]
 800f79c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800f79e:	68fb      	ldr	r3, [r7, #12]
 800f7a0:	68dc      	ldr	r4, [r3, #12]
 800f7a2:	4610      	mov	r0, r2
 800f7a4:	f7f9 fc66 	bl	8009074 <lwip_htonl>
 800f7a8:	4603      	mov	r3, r0
 800f7aa:	60a3      	str	r3, [r4, #8]
       the window scale option) is never scaled. */
    seg->tcphdr->wnd = lwip_htons(TCPWND_MIN16(pcb->rcv_ann_wnd));
  } else
#endif /* LWIP_WND_SCALE */
  {
    seg->tcphdr->wnd = lwip_htons(TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
 800f7ac:	68bb      	ldr	r3, [r7, #8]
 800f7ae:	8d5a      	ldrh	r2, [r3, #42]	; 0x2a
 800f7b0:	68fb      	ldr	r3, [r7, #12]
 800f7b2:	68dc      	ldr	r4, [r3, #12]
 800f7b4:	4610      	mov	r0, r2
 800f7b6:	f7f9 fc4f 	bl	8009058 <lwip_htons>
 800f7ba:	4603      	mov	r3, r0
 800f7bc:	81e3      	strh	r3, [r4, #14]
  }

  pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 800f7be:	68bb      	ldr	r3, [r7, #8]
 800f7c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f7c2:	68ba      	ldr	r2, [r7, #8]
 800f7c4:	8d52      	ldrh	r2, [r2, #42]	; 0x2a
 800f7c6:	441a      	add	r2, r3
 800f7c8:	68bb      	ldr	r3, [r7, #8]
 800f7ca:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Add any requested options.  NB MSS option is only set on SYN
     packets, so ignore it here */
  /* cast through void* to get rid of alignment warnings */
  opts = (u32_t *)(void *)(seg->tcphdr + 1);
 800f7cc:	68fb      	ldr	r3, [r7, #12]
 800f7ce:	68db      	ldr	r3, [r3, #12]
 800f7d0:	3314      	adds	r3, #20
 800f7d2:	61fb      	str	r3, [r7, #28]
  if (seg->flags & TF_SEG_OPTS_MSS) {
 800f7d4:	68fb      	ldr	r3, [r7, #12]
 800f7d6:	7a9b      	ldrb	r3, [r3, #10]
 800f7d8:	f003 0301 	and.w	r3, r3, #1
 800f7dc:	2b00      	cmp	r3, #0
 800f7de:	d014      	beq.n	800f80a <tcp_output_segment+0x8a>
    u16_t mss;
#if TCP_CALCULATE_EFF_SEND_MSS
    mss = tcp_eff_send_mss(TCP_MSS, &pcb->local_ip, &pcb->remote_ip);
 800f7e0:	68bb      	ldr	r3, [r7, #8]
 800f7e2:	3304      	adds	r3, #4
 800f7e4:	4619      	mov	r1, r3
 800f7e6:	f240 50b4 	movw	r0, #1460	; 0x5b4
 800f7ea:	f7fc fc73 	bl	800c0d4 <tcp_eff_send_mss_impl>
 800f7ee:	4603      	mov	r3, r0
 800f7f0:	837b      	strh	r3, [r7, #26]
#else /* TCP_CALCULATE_EFF_SEND_MSS */
    mss = TCP_MSS;
#endif /* TCP_CALCULATE_EFF_SEND_MSS */
    *opts = TCP_BUILD_MSS_OPTION(mss);
 800f7f2:	8b7b      	ldrh	r3, [r7, #26]
 800f7f4:	f043 7301 	orr.w	r3, r3, #33816576	; 0x2040000
 800f7f8:	4618      	mov	r0, r3
 800f7fa:	f7f9 fc3b 	bl	8009074 <lwip_htonl>
 800f7fe:	4602      	mov	r2, r0
 800f800:	69fb      	ldr	r3, [r7, #28]
 800f802:	601a      	str	r2, [r3, #0]
    opts += 1;
 800f804:	69fb      	ldr	r3, [r7, #28]
 800f806:	3304      	adds	r3, #4
 800f808:	61fb      	str	r3, [r7, #28]
  }
#endif

  /* Set retransmission timer running if it is not currently enabled
     This must be set before checking the route. */
  if (pcb->rtime < 0) {
 800f80a:	68bb      	ldr	r3, [r7, #8]
 800f80c:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 800f810:	2b00      	cmp	r3, #0
 800f812:	da02      	bge.n	800f81a <tcp_output_segment+0x9a>
    pcb->rtime = 0;
 800f814:	68bb      	ldr	r3, [r7, #8]
 800f816:	2200      	movs	r2, #0
 800f818:	861a      	strh	r2, [r3, #48]	; 0x30
  }

  if (pcb->rttest == 0) {
 800f81a:	68bb      	ldr	r3, [r7, #8]
 800f81c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800f81e:	2b00      	cmp	r3, #0
 800f820:	d10c      	bne.n	800f83c <tcp_output_segment+0xbc>
    pcb->rttest = tcp_ticks;
 800f822:	4b26      	ldr	r3, [pc, #152]	; (800f8bc <tcp_output_segment+0x13c>)
 800f824:	681a      	ldr	r2, [r3, #0]
 800f826:	68bb      	ldr	r3, [r7, #8]
 800f828:	635a      	str	r2, [r3, #52]	; 0x34
    pcb->rtseq = lwip_ntohl(seg->tcphdr->seqno);
 800f82a:	68fb      	ldr	r3, [r7, #12]
 800f82c:	68db      	ldr	r3, [r3, #12]
 800f82e:	685b      	ldr	r3, [r3, #4]
 800f830:	4618      	mov	r0, r3
 800f832:	f7f9 fc1f 	bl	8009074 <lwip_htonl>
 800f836:	4602      	mov	r2, r0
 800f838:	68bb      	ldr	r3, [r7, #8]
 800f83a:	639a      	str	r2, [r3, #56]	; 0x38
  }
  LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_output_segment: %"U32_F":%"U32_F"\n",
          lwip_htonl(seg->tcphdr->seqno), lwip_htonl(seg->tcphdr->seqno) +
          seg->len));

  len = (u16_t)((u8_t *)seg->tcphdr - (u8_t *)seg->p->payload);
 800f83c:	68fb      	ldr	r3, [r7, #12]
 800f83e:	68db      	ldr	r3, [r3, #12]
 800f840:	461a      	mov	r2, r3
 800f842:	68fb      	ldr	r3, [r7, #12]
 800f844:	685b      	ldr	r3, [r3, #4]
 800f846:	685b      	ldr	r3, [r3, #4]
 800f848:	1ad3      	subs	r3, r2, r3
 800f84a:	833b      	strh	r3, [r7, #24]
  if (len == 0) {
    /** Exclude retransmitted segments from this count. */
    MIB2_STATS_INC(mib2.tcpoutsegs);
  }

  seg->p->len -= len;
 800f84c:	68fb      	ldr	r3, [r7, #12]
 800f84e:	685b      	ldr	r3, [r3, #4]
 800f850:	8959      	ldrh	r1, [r3, #10]
 800f852:	68fb      	ldr	r3, [r7, #12]
 800f854:	685b      	ldr	r3, [r3, #4]
 800f856:	8b3a      	ldrh	r2, [r7, #24]
 800f858:	1a8a      	subs	r2, r1, r2
 800f85a:	b292      	uxth	r2, r2
 800f85c:	815a      	strh	r2, [r3, #10]
  seg->p->tot_len -= len;
 800f85e:	68fb      	ldr	r3, [r7, #12]
 800f860:	685b      	ldr	r3, [r3, #4]
 800f862:	8919      	ldrh	r1, [r3, #8]
 800f864:	68fb      	ldr	r3, [r7, #12]
 800f866:	685b      	ldr	r3, [r3, #4]
 800f868:	8b3a      	ldrh	r2, [r7, #24]
 800f86a:	1a8a      	subs	r2, r1, r2
 800f86c:	b292      	uxth	r2, r2
 800f86e:	811a      	strh	r2, [r3, #8]

  seg->p->payload = seg->tcphdr;
 800f870:	68fb      	ldr	r3, [r7, #12]
 800f872:	685b      	ldr	r3, [r3, #4]
 800f874:	68fa      	ldr	r2, [r7, #12]
 800f876:	68d2      	ldr	r2, [r2, #12]
 800f878:	605a      	str	r2, [r3, #4]

  seg->tcphdr->chksum = 0;
 800f87a:	68fb      	ldr	r3, [r7, #12]
 800f87c:	68db      	ldr	r3, [r3, #12]
 800f87e:	2200      	movs	r2, #0
 800f880:	741a      	strb	r2, [r3, #16]
 800f882:	2200      	movs	r2, #0
 800f884:	745a      	strb	r2, [r3, #17]
  }
#endif /* CHECKSUM_GEN_TCP */
  TCP_STATS_INC(tcp.xmit);

  NETIF_SET_HWADDRHINT(netif, &(pcb->addr_hint));
  err = ip_output_if(seg->p, &pcb->local_ip, &pcb->remote_ip, pcb->ttl,
 800f886:	68fb      	ldr	r3, [r7, #12]
 800f888:	6858      	ldr	r0, [r3, #4]
 800f88a:	68b9      	ldr	r1, [r7, #8]
 800f88c:	68bb      	ldr	r3, [r7, #8]
 800f88e:	1d1c      	adds	r4, r3, #4
 800f890:	68bb      	ldr	r3, [r7, #8]
 800f892:	7a9d      	ldrb	r5, [r3, #10]
 800f894:	68bb      	ldr	r3, [r7, #8]
 800f896:	7a5b      	ldrb	r3, [r3, #9]
 800f898:	687a      	ldr	r2, [r7, #4]
 800f89a:	9202      	str	r2, [sp, #8]
 800f89c:	2206      	movs	r2, #6
 800f89e:	9201      	str	r2, [sp, #4]
 800f8a0:	9300      	str	r3, [sp, #0]
 800f8a2:	462b      	mov	r3, r5
 800f8a4:	4622      	mov	r2, r4
 800f8a6:	f002 fa71 	bl	8011d8c <ip4_output_if>
 800f8aa:	4603      	mov	r3, r0
 800f8ac:	75fb      	strb	r3, [r7, #23]
    pcb->tos, IP_PROTO_TCP, netif);
  NETIF_SET_HWADDRHINT(netif, NULL);
  return err;
 800f8ae:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800f8b2:	4618      	mov	r0, r3
 800f8b4:	3720      	adds	r7, #32
 800f8b6:	46bd      	mov	sp, r7
 800f8b8:	bdb0      	pop	{r4, r5, r7, pc}
 800f8ba:	bf00      	nop
 800f8bc:	2400f2ec 	.word	0x2400f2ec

0800f8c0 <tcp_rst>:
 */
void
tcp_rst(u32_t seqno, u32_t ackno,
  const ip_addr_t *local_ip, const ip_addr_t *remote_ip,
  u16_t local_port, u16_t remote_port)
{
 800f8c0:	b580      	push	{r7, lr}
 800f8c2:	b08c      	sub	sp, #48	; 0x30
 800f8c4:	af04      	add	r7, sp, #16
 800f8c6:	60f8      	str	r0, [r7, #12]
 800f8c8:	60b9      	str	r1, [r7, #8]
 800f8ca:	607a      	str	r2, [r7, #4]
 800f8cc:	603b      	str	r3, [r7, #0]
  struct pbuf *p;
  struct tcp_hdr *tcphdr;
  struct netif *netif;
  p = pbuf_alloc(PBUF_IP, TCP_HLEN, PBUF_RAM);
 800f8ce:	2200      	movs	r2, #0
 800f8d0:	2114      	movs	r1, #20
 800f8d2:	2001      	movs	r0, #1
 800f8d4:	f7fa fa7a 	bl	8009dcc <pbuf_alloc>
 800f8d8:	61f8      	str	r0, [r7, #28]
  if (p == NULL) {
 800f8da:	69fb      	ldr	r3, [r7, #28]
 800f8dc:	2b00      	cmp	r3, #0
 800f8de:	d05b      	beq.n	800f998 <tcp_rst+0xd8>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_rst: could not allocate memory for pbuf\n"));
    return;
  }
  LWIP_ASSERT("check that first pbuf can hold struct tcp_hdr",
 800f8e0:	69fb      	ldr	r3, [r7, #28]
 800f8e2:	895b      	ldrh	r3, [r3, #10]
 800f8e4:	2b13      	cmp	r3, #19
 800f8e6:	d806      	bhi.n	800f8f6 <tcp_rst+0x36>
 800f8e8:	4b2d      	ldr	r3, [pc, #180]	; (800f9a0 <tcp_rst+0xe0>)
 800f8ea:	f240 524d 	movw	r2, #1357	; 0x54d
 800f8ee:	492d      	ldr	r1, [pc, #180]	; (800f9a4 <tcp_rst+0xe4>)
 800f8f0:	482d      	ldr	r0, [pc, #180]	; (800f9a8 <tcp_rst+0xe8>)
 800f8f2:	f006 f96f 	bl	8015bd4 <printf_>
              (p->len >= sizeof(struct tcp_hdr)));

  tcphdr = (struct tcp_hdr *)p->payload;
 800f8f6:	69fb      	ldr	r3, [r7, #28]
 800f8f8:	685b      	ldr	r3, [r3, #4]
 800f8fa:	61bb      	str	r3, [r7, #24]
  tcphdr->src = lwip_htons(local_port);
 800f8fc:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800f8fe:	4618      	mov	r0, r3
 800f900:	f7f9 fbaa 	bl	8009058 <lwip_htons>
 800f904:	4603      	mov	r3, r0
 800f906:	461a      	mov	r2, r3
 800f908:	69bb      	ldr	r3, [r7, #24]
 800f90a:	801a      	strh	r2, [r3, #0]
  tcphdr->dest = lwip_htons(remote_port);
 800f90c:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 800f90e:	4618      	mov	r0, r3
 800f910:	f7f9 fba2 	bl	8009058 <lwip_htons>
 800f914:	4603      	mov	r3, r0
 800f916:	461a      	mov	r2, r3
 800f918:	69bb      	ldr	r3, [r7, #24]
 800f91a:	805a      	strh	r2, [r3, #2]
  tcphdr->seqno = lwip_htonl(seqno);
 800f91c:	68f8      	ldr	r0, [r7, #12]
 800f91e:	f7f9 fba9 	bl	8009074 <lwip_htonl>
 800f922:	4602      	mov	r2, r0
 800f924:	69bb      	ldr	r3, [r7, #24]
 800f926:	605a      	str	r2, [r3, #4]
  tcphdr->ackno = lwip_htonl(ackno);
 800f928:	68b8      	ldr	r0, [r7, #8]
 800f92a:	f7f9 fba3 	bl	8009074 <lwip_htonl>
 800f92e:	4602      	mov	r2, r0
 800f930:	69bb      	ldr	r3, [r7, #24]
 800f932:	609a      	str	r2, [r3, #8]
  TCPH_HDRLEN_FLAGS_SET(tcphdr, TCP_HLEN/4, TCP_RST | TCP_ACK);
 800f934:	f245 0014 	movw	r0, #20500	; 0x5014
 800f938:	f7f9 fb8e 	bl	8009058 <lwip_htons>
 800f93c:	4603      	mov	r3, r0
 800f93e:	461a      	mov	r2, r3
 800f940:	69bb      	ldr	r3, [r7, #24]
 800f942:	819a      	strh	r2, [r3, #12]
#if LWIP_WND_SCALE
  tcphdr->wnd = PP_HTONS(((TCP_WND >> TCP_RCV_SCALE) & 0xFFFF));
#else
  tcphdr->wnd = PP_HTONS(TCP_WND);
 800f944:	69bb      	ldr	r3, [r7, #24]
 800f946:	2200      	movs	r2, #0
 800f948:	f042 0216 	orr.w	r2, r2, #22
 800f94c:	739a      	strb	r2, [r3, #14]
 800f94e:	2200      	movs	r2, #0
 800f950:	f062 022f 	orn	r2, r2, #47	; 0x2f
 800f954:	73da      	strb	r2, [r3, #15]
#endif
  tcphdr->chksum = 0;
 800f956:	69bb      	ldr	r3, [r7, #24]
 800f958:	2200      	movs	r2, #0
 800f95a:	741a      	strb	r2, [r3, #16]
 800f95c:	2200      	movs	r2, #0
 800f95e:	745a      	strb	r2, [r3, #17]
  tcphdr->urgp = 0;
 800f960:	69bb      	ldr	r3, [r7, #24]
 800f962:	2200      	movs	r2, #0
 800f964:	749a      	strb	r2, [r3, #18]
 800f966:	2200      	movs	r2, #0
 800f968:	74da      	strb	r2, [r3, #19]

  TCP_STATS_INC(tcp.xmit);
  MIB2_STATS_INC(mib2.tcpoutrsts);

  netif = ip_route(local_ip, remote_ip);
 800f96a:	6838      	ldr	r0, [r7, #0]
 800f96c:	f002 f866 	bl	8011a3c <ip4_route>
 800f970:	6178      	str	r0, [r7, #20]
  if (netif != NULL) {
 800f972:	697b      	ldr	r3, [r7, #20]
 800f974:	2b00      	cmp	r3, #0
 800f976:	d00b      	beq.n	800f990 <tcp_rst+0xd0>
      tcphdr->chksum = ip_chksum_pseudo(p, IP_PROTO_TCP, p->tot_len,
                                        local_ip, remote_ip);
    }
#endif
    /* Send output with hardcoded TTL/HL since we have no access to the pcb */
    ip_output_if(p, local_ip, remote_ip, TCP_TTL, 0, IP_PROTO_TCP, netif);
 800f978:	697b      	ldr	r3, [r7, #20]
 800f97a:	9302      	str	r3, [sp, #8]
 800f97c:	2306      	movs	r3, #6
 800f97e:	9301      	str	r3, [sp, #4]
 800f980:	2300      	movs	r3, #0
 800f982:	9300      	str	r3, [sp, #0]
 800f984:	23ff      	movs	r3, #255	; 0xff
 800f986:	683a      	ldr	r2, [r7, #0]
 800f988:	6879      	ldr	r1, [r7, #4]
 800f98a:	69f8      	ldr	r0, [r7, #28]
 800f98c:	f002 f9fe 	bl	8011d8c <ip4_output_if>
  }
  pbuf_free(p);
 800f990:	69f8      	ldr	r0, [r7, #28]
 800f992:	f7fa fd8d 	bl	800a4b0 <pbuf_free>
 800f996:	e000      	b.n	800f99a <tcp_rst+0xda>
    return;
 800f998:	bf00      	nop
  LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_rst: seqno %"U32_F" ackno %"U32_F".\n", seqno, ackno));
}
 800f99a:	3720      	adds	r7, #32
 800f99c:	46bd      	mov	sp, r7
 800f99e:	bd80      	pop	{r7, pc}
 800f9a0:	0801b2dc 	.word	0x0801b2dc
 800f9a4:	0801b310 	.word	0x0801b310
 800f9a8:	0801b340 	.word	0x0801b340

0800f9ac <tcp_rexmit_rto>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
void
tcp_rexmit_rto(struct tcp_pcb *pcb)
{
 800f9ac:	b580      	push	{r7, lr}
 800f9ae:	b084      	sub	sp, #16
 800f9b0:	af00      	add	r7, sp, #0
 800f9b2:	6078      	str	r0, [r7, #4]
  struct tcp_seg *seg;

  if (pcb->unacked == NULL) {
 800f9b4:	687b      	ldr	r3, [r7, #4]
 800f9b6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800f9b8:	2b00      	cmp	r3, #0
 800f9ba:	d029      	beq.n	800fa10 <tcp_rexmit_rto+0x64>
    return;
  }

  /* Move all unacked segments to the head of the unsent queue */
  for (seg = pcb->unacked; seg->next != NULL; seg = seg->next);
 800f9bc:	687b      	ldr	r3, [r7, #4]
 800f9be:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800f9c0:	60fb      	str	r3, [r7, #12]
 800f9c2:	e002      	b.n	800f9ca <tcp_rexmit_rto+0x1e>
 800f9c4:	68fb      	ldr	r3, [r7, #12]
 800f9c6:	681b      	ldr	r3, [r3, #0]
 800f9c8:	60fb      	str	r3, [r7, #12]
 800f9ca:	68fb      	ldr	r3, [r7, #12]
 800f9cc:	681b      	ldr	r3, [r3, #0]
 800f9ce:	2b00      	cmp	r3, #0
 800f9d0:	d1f8      	bne.n	800f9c4 <tcp_rexmit_rto+0x18>
  /* concatenate unsent queue after unacked queue */
  seg->next = pcb->unsent;
 800f9d2:	687b      	ldr	r3, [r7, #4]
 800f9d4:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 800f9d6:	68fb      	ldr	r3, [r7, #12]
 800f9d8:	601a      	str	r2, [r3, #0]
  if (pcb->unsent == NULL) {
    pcb->unsent_oversize = seg->oversize_left;
  }
#endif /* TCP_OVERSIZE_DBGCHECK */
  /* unsent queue is the concatenated queue (of unacked, unsent) */
  pcb->unsent = pcb->unacked;
 800f9da:	687b      	ldr	r3, [r7, #4]
 800f9dc:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 800f9de:	687b      	ldr	r3, [r7, #4]
 800f9e0:	669a      	str	r2, [r3, #104]	; 0x68
  /* unacked queue is now empty */
  pcb->unacked = NULL;
 800f9e2:	687b      	ldr	r3, [r7, #4]
 800f9e4:	2200      	movs	r2, #0
 800f9e6:	66da      	str	r2, [r3, #108]	; 0x6c

  /* increment number of retransmissions */
  if (pcb->nrtx < 0xFF) {
 800f9e8:	687b      	ldr	r3, [r7, #4]
 800f9ea:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800f9ee:	2bff      	cmp	r3, #255	; 0xff
 800f9f0:	d007      	beq.n	800fa02 <tcp_rexmit_rto+0x56>
    ++pcb->nrtx;
 800f9f2:	687b      	ldr	r3, [r7, #4]
 800f9f4:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800f9f8:	3301      	adds	r3, #1
 800f9fa:	b2da      	uxtb	r2, r3
 800f9fc:	687b      	ldr	r3, [r7, #4]
 800f9fe:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  }

  /* Don't take any RTT measurements after retransmitting. */
  pcb->rttest = 0;
 800fa02:	687b      	ldr	r3, [r7, #4]
 800fa04:	2200      	movs	r2, #0
 800fa06:	635a      	str	r2, [r3, #52]	; 0x34

  /* Do the actual retransmission */
  tcp_output(pcb);
 800fa08:	6878      	ldr	r0, [r7, #4]
 800fa0a:	f7ff fccf 	bl	800f3ac <tcp_output>
 800fa0e:	e000      	b.n	800fa12 <tcp_rexmit_rto+0x66>
    return;
 800fa10:	bf00      	nop
}
 800fa12:	3710      	adds	r7, #16
 800fa14:	46bd      	mov	sp, r7
 800fa16:	bd80      	pop	{r7, pc}

0800fa18 <tcp_rexmit>:
 *
 * @param pcb the tcp_pcb for which to retransmit the first unacked segment
 */
void
tcp_rexmit(struct tcp_pcb *pcb)
{
 800fa18:	b590      	push	{r4, r7, lr}
 800fa1a:	b085      	sub	sp, #20
 800fa1c:	af00      	add	r7, sp, #0
 800fa1e:	6078      	str	r0, [r7, #4]
  struct tcp_seg *seg;
  struct tcp_seg **cur_seg;

  if (pcb->unacked == NULL) {
 800fa20:	687b      	ldr	r3, [r7, #4]
 800fa22:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800fa24:	2b00      	cmp	r3, #0
 800fa26:	d043      	beq.n	800fab0 <tcp_rexmit+0x98>
    return;
  }

  /* Move the first unacked segment to the unsent queue */
  /* Keep the unsent queue sorted. */
  seg = pcb->unacked;
 800fa28:	687b      	ldr	r3, [r7, #4]
 800fa2a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800fa2c:	60bb      	str	r3, [r7, #8]
  pcb->unacked = seg->next;
 800fa2e:	68bb      	ldr	r3, [r7, #8]
 800fa30:	681a      	ldr	r2, [r3, #0]
 800fa32:	687b      	ldr	r3, [r7, #4]
 800fa34:	66da      	str	r2, [r3, #108]	; 0x6c

  cur_seg = &(pcb->unsent);
 800fa36:	687b      	ldr	r3, [r7, #4]
 800fa38:	3368      	adds	r3, #104	; 0x68
 800fa3a:	60fb      	str	r3, [r7, #12]
  while (*cur_seg &&
 800fa3c:	e002      	b.n	800fa44 <tcp_rexmit+0x2c>
    TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
      cur_seg = &((*cur_seg)->next );
 800fa3e:	68fb      	ldr	r3, [r7, #12]
 800fa40:	681b      	ldr	r3, [r3, #0]
 800fa42:	60fb      	str	r3, [r7, #12]
  while (*cur_seg &&
 800fa44:	68fb      	ldr	r3, [r7, #12]
 800fa46:	681b      	ldr	r3, [r3, #0]
 800fa48:	2b00      	cmp	r3, #0
 800fa4a:	d011      	beq.n	800fa70 <tcp_rexmit+0x58>
    TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
 800fa4c:	68fb      	ldr	r3, [r7, #12]
 800fa4e:	681b      	ldr	r3, [r3, #0]
 800fa50:	68db      	ldr	r3, [r3, #12]
 800fa52:	685b      	ldr	r3, [r3, #4]
 800fa54:	4618      	mov	r0, r3
 800fa56:	f7f9 fb0d 	bl	8009074 <lwip_htonl>
 800fa5a:	4604      	mov	r4, r0
 800fa5c:	68bb      	ldr	r3, [r7, #8]
 800fa5e:	68db      	ldr	r3, [r3, #12]
 800fa60:	685b      	ldr	r3, [r3, #4]
 800fa62:	4618      	mov	r0, r3
 800fa64:	f7f9 fb06 	bl	8009074 <lwip_htonl>
 800fa68:	4603      	mov	r3, r0
 800fa6a:	1ae3      	subs	r3, r4, r3
  while (*cur_seg &&
 800fa6c:	2b00      	cmp	r3, #0
 800fa6e:	dbe6      	blt.n	800fa3e <tcp_rexmit+0x26>
  }
  seg->next = *cur_seg;
 800fa70:	68fb      	ldr	r3, [r7, #12]
 800fa72:	681a      	ldr	r2, [r3, #0]
 800fa74:	68bb      	ldr	r3, [r7, #8]
 800fa76:	601a      	str	r2, [r3, #0]
  *cur_seg = seg;
 800fa78:	68fb      	ldr	r3, [r7, #12]
 800fa7a:	68ba      	ldr	r2, [r7, #8]
 800fa7c:	601a      	str	r2, [r3, #0]
#if TCP_OVERSIZE
  if (seg->next == NULL) {
 800fa7e:	68bb      	ldr	r3, [r7, #8]
 800fa80:	681b      	ldr	r3, [r3, #0]
 800fa82:	2b00      	cmp	r3, #0
 800fa84:	d103      	bne.n	800fa8e <tcp_rexmit+0x76>
    /* the retransmitted segment is last in unsent, so reset unsent_oversize */
    pcb->unsent_oversize = 0;
 800fa86:	687b      	ldr	r3, [r7, #4]
 800fa88:	2200      	movs	r2, #0
 800fa8a:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
  }
#endif /* TCP_OVERSIZE */

  if (pcb->nrtx < 0xFF) {
 800fa8e:	687b      	ldr	r3, [r7, #4]
 800fa90:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800fa94:	2bff      	cmp	r3, #255	; 0xff
 800fa96:	d007      	beq.n	800faa8 <tcp_rexmit+0x90>
    ++pcb->nrtx;
 800fa98:	687b      	ldr	r3, [r7, #4]
 800fa9a:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800fa9e:	3301      	adds	r3, #1
 800faa0:	b2da      	uxtb	r2, r3
 800faa2:	687b      	ldr	r3, [r7, #4]
 800faa4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  }

  /* Don't take any rtt measurements after retransmitting. */
  pcb->rttest = 0;
 800faa8:	687b      	ldr	r3, [r7, #4]
 800faaa:	2200      	movs	r2, #0
 800faac:	635a      	str	r2, [r3, #52]	; 0x34
 800faae:	e000      	b.n	800fab2 <tcp_rexmit+0x9a>
    return;
 800fab0:	bf00      	nop

  /* Do the actual retransmission. */
  MIB2_STATS_INC(mib2.tcpretranssegs);
  /* No need to call tcp_output: we are always called from tcp_input()
     and thus tcp_output directly returns. */
}
 800fab2:	3714      	adds	r7, #20
 800fab4:	46bd      	mov	sp, r7
 800fab6:	bd90      	pop	{r4, r7, pc}

0800fab8 <tcp_rexmit_fast>:
 *
 * @param pcb the tcp_pcb for which to retransmit the first unacked segment
 */
void
tcp_rexmit_fast(struct tcp_pcb *pcb)
{
 800fab8:	b580      	push	{r7, lr}
 800faba:	b082      	sub	sp, #8
 800fabc:	af00      	add	r7, sp, #0
 800fabe:	6078      	str	r0, [r7, #4]
  if (pcb->unacked != NULL && !(pcb->flags & TF_INFR)) {
 800fac0:	687b      	ldr	r3, [r7, #4]
 800fac2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800fac4:	2b00      	cmp	r3, #0
 800fac6:	d04c      	beq.n	800fb62 <tcp_rexmit_fast+0xaa>
 800fac8:	687b      	ldr	r3, [r7, #4]
 800faca:	7e9b      	ldrb	r3, [r3, #26]
 800facc:	f003 0304 	and.w	r3, r3, #4
 800fad0:	2b00      	cmp	r3, #0
 800fad2:	d146      	bne.n	800fb62 <tcp_rexmit_fast+0xaa>
    LWIP_DEBUGF(TCP_FR_DEBUG,
                ("tcp_receive: dupacks %"U16_F" (%"U32_F
                 "), fast retransmit %"U32_F"\n",
                 (u16_t)pcb->dupacks, pcb->lastack,
                 lwip_ntohl(pcb->unacked->tcphdr->seqno)));
    tcp_rexmit(pcb);
 800fad4:	6878      	ldr	r0, [r7, #4]
 800fad6:	f7ff ff9f 	bl	800fa18 <tcp_rexmit>

    /* Set ssthresh to half of the minimum of the current
     * cwnd and the advertised window */
    pcb->ssthresh = LWIP_MIN(pcb->cwnd, pcb->snd_wnd) / 2;
 800fada:	687b      	ldr	r3, [r7, #4]
 800fadc:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800fae0:	687b      	ldr	r3, [r7, #4]
 800fae2:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800fae6:	429a      	cmp	r2, r3
 800fae8:	d208      	bcs.n	800fafc <tcp_rexmit_fast+0x44>
 800faea:	687b      	ldr	r3, [r7, #4]
 800faec:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 800faf0:	2b00      	cmp	r3, #0
 800faf2:	da00      	bge.n	800faf6 <tcp_rexmit_fast+0x3e>
 800faf4:	3301      	adds	r3, #1
 800faf6:	105b      	asrs	r3, r3, #1
 800faf8:	b29b      	uxth	r3, r3
 800fafa:	e007      	b.n	800fb0c <tcp_rexmit_fast+0x54>
 800fafc:	687b      	ldr	r3, [r7, #4]
 800fafe:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800fb02:	2b00      	cmp	r3, #0
 800fb04:	da00      	bge.n	800fb08 <tcp_rexmit_fast+0x50>
 800fb06:	3301      	adds	r3, #1
 800fb08:	105b      	asrs	r3, r3, #1
 800fb0a:	b29b      	uxth	r3, r3
 800fb0c:	687a      	ldr	r2, [r7, #4]
 800fb0e:	f8a2 304a 	strh.w	r3, [r2, #74]	; 0x4a

    /* The minimum value for ssthresh should be 2 MSS */
    if (pcb->ssthresh < (2U * pcb->mss)) {
 800fb12:	687b      	ldr	r3, [r7, #4]
 800fb14:	f8b3 304a 	ldrh.w	r3, [r3, #74]	; 0x4a
 800fb18:	461a      	mov	r2, r3
 800fb1a:	687b      	ldr	r3, [r7, #4]
 800fb1c:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800fb1e:	005b      	lsls	r3, r3, #1
 800fb20:	429a      	cmp	r2, r3
 800fb22:	d206      	bcs.n	800fb32 <tcp_rexmit_fast+0x7a>
      LWIP_DEBUGF(TCP_FR_DEBUG,
                  ("tcp_receive: The minimum value for ssthresh %"TCPWNDSIZE_F
                   " should be min 2 mss %"U16_F"...\n",
                   pcb->ssthresh, (u16_t)(2*pcb->mss)));
      pcb->ssthresh = 2*pcb->mss;
 800fb24:	687b      	ldr	r3, [r7, #4]
 800fb26:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800fb28:	005b      	lsls	r3, r3, #1
 800fb2a:	b29a      	uxth	r2, r3
 800fb2c:	687b      	ldr	r3, [r7, #4]
 800fb2e:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
    }

    pcb->cwnd = pcb->ssthresh + 3 * pcb->mss;
 800fb32:	687b      	ldr	r3, [r7, #4]
 800fb34:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 800fb38:	687b      	ldr	r3, [r7, #4]
 800fb3a:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800fb3c:	4619      	mov	r1, r3
 800fb3e:	0049      	lsls	r1, r1, #1
 800fb40:	440b      	add	r3, r1
 800fb42:	b29b      	uxth	r3, r3
 800fb44:	4413      	add	r3, r2
 800fb46:	b29a      	uxth	r2, r3
 800fb48:	687b      	ldr	r3, [r7, #4]
 800fb4a:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
    pcb->flags |= TF_INFR;
 800fb4e:	687b      	ldr	r3, [r7, #4]
 800fb50:	7e9b      	ldrb	r3, [r3, #26]
 800fb52:	f043 0304 	orr.w	r3, r3, #4
 800fb56:	b2da      	uxtb	r2, r3
 800fb58:	687b      	ldr	r3, [r7, #4]
 800fb5a:	769a      	strb	r2, [r3, #26]

    /* Reset the retransmission timer to prevent immediate rto retransmissions */
    pcb->rtime = 0;
 800fb5c:	687b      	ldr	r3, [r7, #4]
 800fb5e:	2200      	movs	r2, #0
 800fb60:	861a      	strh	r2, [r3, #48]	; 0x30
  }
}
 800fb62:	bf00      	nop
 800fb64:	3708      	adds	r7, #8
 800fb66:	46bd      	mov	sp, r7
 800fb68:	bd80      	pop	{r7, pc}

0800fb6a <tcp_keepalive>:
 *
 * @param pcb the tcp_pcb for which to send a keepalive packet
 */
err_t
tcp_keepalive(struct tcp_pcb *pcb)
{
 800fb6a:	b580      	push	{r7, lr}
 800fb6c:	b08a      	sub	sp, #40	; 0x28
 800fb6e:	af04      	add	r7, sp, #16
 800fb70:	6078      	str	r0, [r7, #4]
  LWIP_DEBUGF(TCP_DEBUG, ("\n"));

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: tcp_ticks %"U32_F"   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n",
                          tcp_ticks, pcb->tmr, (u16_t)pcb->keep_cnt_sent));

  p = tcp_output_alloc_header(pcb, 0, 0, lwip_htonl(pcb->snd_nxt - 1));
 800fb72:	687b      	ldr	r3, [r7, #4]
 800fb74:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800fb76:	3b01      	subs	r3, #1
 800fb78:	4618      	mov	r0, r3
 800fb7a:	f7f9 fa7b 	bl	8009074 <lwip_htonl>
 800fb7e:	4603      	mov	r3, r0
 800fb80:	2200      	movs	r2, #0
 800fb82:	2100      	movs	r1, #0
 800fb84:	6878      	ldr	r0, [r7, #4]
 800fb86:	f7fe fd43 	bl	800e610 <tcp_output_alloc_header>
 800fb8a:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 800fb8c:	693b      	ldr	r3, [r7, #16]
 800fb8e:	2b00      	cmp	r3, #0
 800fb90:	d102      	bne.n	800fb98 <tcp_keepalive+0x2e>
    LWIP_DEBUGF(TCP_DEBUG,
                ("tcp_keepalive: could not allocate memory for pbuf\n"));
    return ERR_MEM;
 800fb92:	f04f 33ff 	mov.w	r3, #4294967295
 800fb96:	e021      	b.n	800fbdc <tcp_keepalive+0x72>
  }
  netif = ip_route(&pcb->local_ip, &pcb->remote_ip);
 800fb98:	687b      	ldr	r3, [r7, #4]
 800fb9a:	3304      	adds	r3, #4
 800fb9c:	4618      	mov	r0, r3
 800fb9e:	f001 ff4d 	bl	8011a3c <ip4_route>
 800fba2:	60f8      	str	r0, [r7, #12]
  if (netif == NULL) {
 800fba4:	68fb      	ldr	r3, [r7, #12]
 800fba6:	2b00      	cmp	r3, #0
 800fba8:	d102      	bne.n	800fbb0 <tcp_keepalive+0x46>
    err = ERR_RTE;
 800fbaa:	23fc      	movs	r3, #252	; 0xfc
 800fbac:	75fb      	strb	r3, [r7, #23]
 800fbae:	e010      	b.n	800fbd2 <tcp_keepalive+0x68>
#endif /* CHECKSUM_GEN_TCP */
    TCP_STATS_INC(tcp.xmit);

    /* Send output to IP */
    NETIF_SET_HWADDRHINT(netif, &(pcb->addr_hint));
    err = ip_output_if(p, &pcb->local_ip, &pcb->remote_ip, pcb->ttl, 0, IP_PROTO_TCP, netif);
 800fbb0:	6879      	ldr	r1, [r7, #4]
 800fbb2:	687b      	ldr	r3, [r7, #4]
 800fbb4:	1d1a      	adds	r2, r3, #4
 800fbb6:	687b      	ldr	r3, [r7, #4]
 800fbb8:	7a98      	ldrb	r0, [r3, #10]
 800fbba:	68fb      	ldr	r3, [r7, #12]
 800fbbc:	9302      	str	r3, [sp, #8]
 800fbbe:	2306      	movs	r3, #6
 800fbc0:	9301      	str	r3, [sp, #4]
 800fbc2:	2300      	movs	r3, #0
 800fbc4:	9300      	str	r3, [sp, #0]
 800fbc6:	4603      	mov	r3, r0
 800fbc8:	6938      	ldr	r0, [r7, #16]
 800fbca:	f002 f8df 	bl	8011d8c <ip4_output_if>
 800fbce:	4603      	mov	r3, r0
 800fbd0:	75fb      	strb	r3, [r7, #23]
    NETIF_SET_HWADDRHINT(netif, NULL);
  }
  pbuf_free(p);
 800fbd2:	6938      	ldr	r0, [r7, #16]
 800fbd4:	f7fa fc6c 	bl	800a4b0 <pbuf_free>

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: seqno %"U32_F" ackno %"U32_F" err %d.\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt, (int)err));
  return err;
 800fbd8:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800fbdc:	4618      	mov	r0, r3
 800fbde:	3718      	adds	r7, #24
 800fbe0:	46bd      	mov	sp, r7
 800fbe2:	bd80      	pop	{r7, pc}

0800fbe4 <tcp_zero_window_probe>:
 *
 * @param pcb the tcp_pcb for which to send a zero-window probe packet
 */
err_t
tcp_zero_window_probe(struct tcp_pcb *pcb)
{
 800fbe4:	b590      	push	{r4, r7, lr}
 800fbe6:	b08f      	sub	sp, #60	; 0x3c
 800fbe8:	af04      	add	r7, sp, #16
 800fbea:	6078      	str	r0, [r7, #4]
  LWIP_DEBUGF(TCP_DEBUG,
              ("tcp_zero_window_probe: tcp_ticks %"U32_F
               "   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n",
               tcp_ticks, pcb->tmr, (u16_t)pcb->keep_cnt_sent));

  seg = pcb->unacked;
 800fbec:	687b      	ldr	r3, [r7, #4]
 800fbee:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800fbf0:	623b      	str	r3, [r7, #32]

  if (seg == NULL) {
 800fbf2:	6a3b      	ldr	r3, [r7, #32]
 800fbf4:	2b00      	cmp	r3, #0
 800fbf6:	d102      	bne.n	800fbfe <tcp_zero_window_probe+0x1a>
    seg = pcb->unsent;
 800fbf8:	687b      	ldr	r3, [r7, #4]
 800fbfa:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800fbfc:	623b      	str	r3, [r7, #32]
  }
  if (seg == NULL) {
 800fbfe:	6a3b      	ldr	r3, [r7, #32]
 800fc00:	2b00      	cmp	r3, #0
 800fc02:	d101      	bne.n	800fc08 <tcp_zero_window_probe+0x24>
    /* nothing to send, zero window probe not needed */
    return ERR_OK;
 800fc04:	2300      	movs	r3, #0
 800fc06:	e085      	b.n	800fd14 <tcp_zero_window_probe+0x130>
  }

  is_fin = ((TCPH_FLAGS(seg->tcphdr) & TCP_FIN) != 0) && (seg->len == 0);
 800fc08:	6a3b      	ldr	r3, [r7, #32]
 800fc0a:	68db      	ldr	r3, [r3, #12]
 800fc0c:	899b      	ldrh	r3, [r3, #12]
 800fc0e:	b29b      	uxth	r3, r3
 800fc10:	4618      	mov	r0, r3
 800fc12:	f7f9 fa21 	bl	8009058 <lwip_htons>
 800fc16:	4603      	mov	r3, r0
 800fc18:	f003 0301 	and.w	r3, r3, #1
 800fc1c:	2b00      	cmp	r3, #0
 800fc1e:	d005      	beq.n	800fc2c <tcp_zero_window_probe+0x48>
 800fc20:	6a3b      	ldr	r3, [r7, #32]
 800fc22:	891b      	ldrh	r3, [r3, #8]
 800fc24:	2b00      	cmp	r3, #0
 800fc26:	d101      	bne.n	800fc2c <tcp_zero_window_probe+0x48>
 800fc28:	2301      	movs	r3, #1
 800fc2a:	e000      	b.n	800fc2e <tcp_zero_window_probe+0x4a>
 800fc2c:	2300      	movs	r3, #0
 800fc2e:	77fb      	strb	r3, [r7, #31]
  /* we want to send one seqno: either FIN or data (no options) */
  len = is_fin ? 0 : 1;
 800fc30:	7ffb      	ldrb	r3, [r7, #31]
 800fc32:	2b00      	cmp	r3, #0
 800fc34:	bf0c      	ite	eq
 800fc36:	2301      	moveq	r3, #1
 800fc38:	2300      	movne	r3, #0
 800fc3a:	b2db      	uxtb	r3, r3
 800fc3c:	83bb      	strh	r3, [r7, #28]

  p = tcp_output_alloc_header(pcb, 0, len, seg->tcphdr->seqno);
 800fc3e:	6a3b      	ldr	r3, [r7, #32]
 800fc40:	68db      	ldr	r3, [r3, #12]
 800fc42:	685b      	ldr	r3, [r3, #4]
 800fc44:	8bba      	ldrh	r2, [r7, #28]
 800fc46:	2100      	movs	r1, #0
 800fc48:	6878      	ldr	r0, [r7, #4]
 800fc4a:	f7fe fce1 	bl	800e610 <tcp_output_alloc_header>
 800fc4e:	61b8      	str	r0, [r7, #24]
  if (p == NULL) {
 800fc50:	69bb      	ldr	r3, [r7, #24]
 800fc52:	2b00      	cmp	r3, #0
 800fc54:	d102      	bne.n	800fc5c <tcp_zero_window_probe+0x78>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: no memory for pbuf\n"));
    return ERR_MEM;
 800fc56:	f04f 33ff 	mov.w	r3, #4294967295
 800fc5a:	e05b      	b.n	800fd14 <tcp_zero_window_probe+0x130>
  }
  tcphdr = (struct tcp_hdr *)p->payload;
 800fc5c:	69bb      	ldr	r3, [r7, #24]
 800fc5e:	685b      	ldr	r3, [r3, #4]
 800fc60:	617b      	str	r3, [r7, #20]

  if (is_fin) {
 800fc62:	7ffb      	ldrb	r3, [r7, #31]
 800fc64:	2b00      	cmp	r3, #0
 800fc66:	d00e      	beq.n	800fc86 <tcp_zero_window_probe+0xa2>
    /* FIN segment, no data */
    TCPH_FLAGS_SET(tcphdr, TCP_ACK | TCP_FIN);
 800fc68:	697b      	ldr	r3, [r7, #20]
 800fc6a:	899b      	ldrh	r3, [r3, #12]
 800fc6c:	b29b      	uxth	r3, r3
 800fc6e:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 800fc72:	b29c      	uxth	r4, r3
 800fc74:	2011      	movs	r0, #17
 800fc76:	f7f9 f9ef 	bl	8009058 <lwip_htons>
 800fc7a:	4603      	mov	r3, r0
 800fc7c:	4323      	orrs	r3, r4
 800fc7e:	b29a      	uxth	r2, r3
 800fc80:	697b      	ldr	r3, [r7, #20]
 800fc82:	819a      	strh	r2, [r3, #12]
 800fc84:	e010      	b.n	800fca8 <tcp_zero_window_probe+0xc4>
  } else {
    /* Data segment, copy in one byte from the head of the unacked queue */
    char *d = ((char *)p->payload + TCP_HLEN);
 800fc86:	69bb      	ldr	r3, [r7, #24]
 800fc88:	685b      	ldr	r3, [r3, #4]
 800fc8a:	3314      	adds	r3, #20
 800fc8c:	613b      	str	r3, [r7, #16]
    /* Depending on whether the segment has already been sent (unacked) or not
       (unsent), seg->p->payload points to the IP header or TCP header.
       Ensure we copy the first TCP data byte: */
    pbuf_copy_partial(seg->p, d, 1, seg->p->tot_len - seg->len);
 800fc8e:	6a3b      	ldr	r3, [r7, #32]
 800fc90:	6858      	ldr	r0, [r3, #4]
 800fc92:	6a3b      	ldr	r3, [r7, #32]
 800fc94:	685b      	ldr	r3, [r3, #4]
 800fc96:	891a      	ldrh	r2, [r3, #8]
 800fc98:	6a3b      	ldr	r3, [r7, #32]
 800fc9a:	891b      	ldrh	r3, [r3, #8]
 800fc9c:	1ad3      	subs	r3, r2, r3
 800fc9e:	b29b      	uxth	r3, r3
 800fca0:	2201      	movs	r2, #1
 800fca2:	6939      	ldr	r1, [r7, #16]
 800fca4:	f7fa fe10 	bl	800a8c8 <pbuf_copy_partial>
  }

  /* The byte may be acknowledged without the window being opened. */
  snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + 1;
 800fca8:	6a3b      	ldr	r3, [r7, #32]
 800fcaa:	68db      	ldr	r3, [r3, #12]
 800fcac:	685b      	ldr	r3, [r3, #4]
 800fcae:	4618      	mov	r0, r3
 800fcb0:	f7f9 f9e0 	bl	8009074 <lwip_htonl>
 800fcb4:	4603      	mov	r3, r0
 800fcb6:	3301      	adds	r3, #1
 800fcb8:	60fb      	str	r3, [r7, #12]
  if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 800fcba:	687b      	ldr	r3, [r7, #4]
 800fcbc:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800fcbe:	68fb      	ldr	r3, [r7, #12]
 800fcc0:	1ad3      	subs	r3, r2, r3
 800fcc2:	2b00      	cmp	r3, #0
 800fcc4:	da02      	bge.n	800fccc <tcp_zero_window_probe+0xe8>
    pcb->snd_nxt = snd_nxt;
 800fcc6:	687b      	ldr	r3, [r7, #4]
 800fcc8:	68fa      	ldr	r2, [r7, #12]
 800fcca:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  netif = ip_route(&pcb->local_ip, &pcb->remote_ip);
 800fccc:	687b      	ldr	r3, [r7, #4]
 800fcce:	3304      	adds	r3, #4
 800fcd0:	4618      	mov	r0, r3
 800fcd2:	f001 feb3 	bl	8011a3c <ip4_route>
 800fcd6:	60b8      	str	r0, [r7, #8]
  if (netif == NULL) {
 800fcd8:	68bb      	ldr	r3, [r7, #8]
 800fcda:	2b00      	cmp	r3, #0
 800fcdc:	d103      	bne.n	800fce6 <tcp_zero_window_probe+0x102>
    err = ERR_RTE;
 800fcde:	23fc      	movs	r3, #252	; 0xfc
 800fce0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800fce4:	e011      	b.n	800fd0a <tcp_zero_window_probe+0x126>
#endif
    TCP_STATS_INC(tcp.xmit);

    /* Send output to IP */
    NETIF_SET_HWADDRHINT(netif, &(pcb->addr_hint));
    err = ip_output_if(p, &pcb->local_ip, &pcb->remote_ip, pcb->ttl,
 800fce6:	6879      	ldr	r1, [r7, #4]
 800fce8:	687b      	ldr	r3, [r7, #4]
 800fcea:	1d1a      	adds	r2, r3, #4
 800fcec:	687b      	ldr	r3, [r7, #4]
 800fcee:	7a98      	ldrb	r0, [r3, #10]
 800fcf0:	68bb      	ldr	r3, [r7, #8]
 800fcf2:	9302      	str	r3, [sp, #8]
 800fcf4:	2306      	movs	r3, #6
 800fcf6:	9301      	str	r3, [sp, #4]
 800fcf8:	2300      	movs	r3, #0
 800fcfa:	9300      	str	r3, [sp, #0]
 800fcfc:	4603      	mov	r3, r0
 800fcfe:	69b8      	ldr	r0, [r7, #24]
 800fd00:	f002 f844 	bl	8011d8c <ip4_output_if>
 800fd04:	4603      	mov	r3, r0
 800fd06:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      0, IP_PROTO_TCP, netif);
    NETIF_SET_HWADDRHINT(netif, NULL);
  }

  pbuf_free(p);
 800fd0a:	69b8      	ldr	r0, [r7, #24]
 800fd0c:	f7fa fbd0 	bl	800a4b0 <pbuf_free>

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: seqno %"U32_F
                          " ackno %"U32_F" err %d.\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt, (int)err));
  return err;
 800fd10:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 800fd14:	4618      	mov	r0, r3
 800fd16:	372c      	adds	r7, #44	; 0x2c
 800fd18:	46bd      	mov	sp, r7
 800fd1a:	bd90      	pop	{r4, r7, pc}

0800fd1c <tcpip_tcp_timer>:
 *
 * @param arg unused argument
 */
static void
tcpip_tcp_timer(void *arg)
{
 800fd1c:	b580      	push	{r7, lr}
 800fd1e:	b082      	sub	sp, #8
 800fd20:	af00      	add	r7, sp, #0
 800fd22:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(arg);

  /* call TCP timer handler */
  tcp_tmr();
 800fd24:	f7fa fe52 	bl	800a9cc <tcp_tmr>
  /* timer still needed? */
  if (tcp_active_pcbs || tcp_tw_pcbs) {
 800fd28:	4b0a      	ldr	r3, [pc, #40]	; (800fd54 <tcpip_tcp_timer+0x38>)
 800fd2a:	681b      	ldr	r3, [r3, #0]
 800fd2c:	2b00      	cmp	r3, #0
 800fd2e:	d103      	bne.n	800fd38 <tcpip_tcp_timer+0x1c>
 800fd30:	4b09      	ldr	r3, [pc, #36]	; (800fd58 <tcpip_tcp_timer+0x3c>)
 800fd32:	681b      	ldr	r3, [r3, #0]
 800fd34:	2b00      	cmp	r3, #0
 800fd36:	d005      	beq.n	800fd44 <tcpip_tcp_timer+0x28>
    /* restart timer */
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
 800fd38:	2200      	movs	r2, #0
 800fd3a:	4908      	ldr	r1, [pc, #32]	; (800fd5c <tcpip_tcp_timer+0x40>)
 800fd3c:	20fa      	movs	r0, #250	; 0xfa
 800fd3e:	f000 f86f 	bl	800fe20 <sys_timeout>
 800fd42:	e002      	b.n	800fd4a <tcpip_tcp_timer+0x2e>
  } else {
    /* disable timer */
    tcpip_tcp_timer_active = 0;
 800fd44:	4b06      	ldr	r3, [pc, #24]	; (800fd60 <tcpip_tcp_timer+0x44>)
 800fd46:	2200      	movs	r2, #0
 800fd48:	601a      	str	r2, [r3, #0]
  }
}
 800fd4a:	bf00      	nop
 800fd4c:	3708      	adds	r7, #8
 800fd4e:	46bd      	mov	sp, r7
 800fd50:	bd80      	pop	{r7, pc}
 800fd52:	bf00      	nop
 800fd54:	2400f2e8 	.word	0x2400f2e8
 800fd58:	2400f2f8 	.word	0x2400f2f8
 800fd5c:	0800fd1d 	.word	0x0800fd1d
 800fd60:	24008648 	.word	0x24008648

0800fd64 <tcp_timer_needed>:
 * the reason is to have the TCP timer only running when
 * there are active (or time-wait) PCBs.
 */
void
tcp_timer_needed(void)
{
 800fd64:	b580      	push	{r7, lr}
 800fd66:	af00      	add	r7, sp, #0
  /* timer is off but needed again? */
  if (!tcpip_tcp_timer_active && (tcp_active_pcbs || tcp_tw_pcbs)) {
 800fd68:	4b0a      	ldr	r3, [pc, #40]	; (800fd94 <tcp_timer_needed+0x30>)
 800fd6a:	681b      	ldr	r3, [r3, #0]
 800fd6c:	2b00      	cmp	r3, #0
 800fd6e:	d10f      	bne.n	800fd90 <tcp_timer_needed+0x2c>
 800fd70:	4b09      	ldr	r3, [pc, #36]	; (800fd98 <tcp_timer_needed+0x34>)
 800fd72:	681b      	ldr	r3, [r3, #0]
 800fd74:	2b00      	cmp	r3, #0
 800fd76:	d103      	bne.n	800fd80 <tcp_timer_needed+0x1c>
 800fd78:	4b08      	ldr	r3, [pc, #32]	; (800fd9c <tcp_timer_needed+0x38>)
 800fd7a:	681b      	ldr	r3, [r3, #0]
 800fd7c:	2b00      	cmp	r3, #0
 800fd7e:	d007      	beq.n	800fd90 <tcp_timer_needed+0x2c>
    /* enable and start timer */
    tcpip_tcp_timer_active = 1;
 800fd80:	4b04      	ldr	r3, [pc, #16]	; (800fd94 <tcp_timer_needed+0x30>)
 800fd82:	2201      	movs	r2, #1
 800fd84:	601a      	str	r2, [r3, #0]
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
 800fd86:	2200      	movs	r2, #0
 800fd88:	4905      	ldr	r1, [pc, #20]	; (800fda0 <tcp_timer_needed+0x3c>)
 800fd8a:	20fa      	movs	r0, #250	; 0xfa
 800fd8c:	f000 f848 	bl	800fe20 <sys_timeout>
  }
}
 800fd90:	bf00      	nop
 800fd92:	bd80      	pop	{r7, pc}
 800fd94:	24008648 	.word	0x24008648
 800fd98:	2400f2e8 	.word	0x2400f2e8
 800fd9c:	2400f2f8 	.word	0x2400f2f8
 800fda0:	0800fd1d 	.word	0x0800fd1d

0800fda4 <cyclic_timer>:
 *
 * @param arg unused argument
 */
static void
cyclic_timer(void *arg)
{
 800fda4:	b580      	push	{r7, lr}
 800fda6:	b084      	sub	sp, #16
 800fda8:	af00      	add	r7, sp, #0
 800fdaa:	6078      	str	r0, [r7, #4]
  const struct lwip_cyclic_timer* cyclic = (const struct lwip_cyclic_timer*)arg;
 800fdac:	687b      	ldr	r3, [r7, #4]
 800fdae:	60fb      	str	r3, [r7, #12]
#if LWIP_DEBUG_TIMERNAMES
  LWIP_DEBUGF(TIMERS_DEBUG, ("tcpip: %s()\n", cyclic->handler_name));
#endif
  cyclic->handler();
 800fdb0:	68fb      	ldr	r3, [r7, #12]
 800fdb2:	685b      	ldr	r3, [r3, #4]
 800fdb4:	4798      	blx	r3
  sys_timeout(cyclic->interval_ms, cyclic_timer, arg);
 800fdb6:	68fb      	ldr	r3, [r7, #12]
 800fdb8:	681b      	ldr	r3, [r3, #0]
 800fdba:	687a      	ldr	r2, [r7, #4]
 800fdbc:	4903      	ldr	r1, [pc, #12]	; (800fdcc <cyclic_timer+0x28>)
 800fdbe:	4618      	mov	r0, r3
 800fdc0:	f000 f82e 	bl	800fe20 <sys_timeout>
}
 800fdc4:	bf00      	nop
 800fdc6:	3710      	adds	r7, #16
 800fdc8:	46bd      	mov	sp, r7
 800fdca:	bd80      	pop	{r7, pc}
 800fdcc:	0800fda5 	.word	0x0800fda5

0800fdd0 <sys_timeouts_init>:

/** Initialize this module */
void sys_timeouts_init(void)
{
 800fdd0:	b580      	push	{r7, lr}
 800fdd2:	b082      	sub	sp, #8
 800fdd4:	af00      	add	r7, sp, #0
  size_t i;
  /* tcp_tmr() at index 0 is started on demand */
  for (i = (LWIP_TCP ? 1 : 0); i < LWIP_ARRAYSIZE(lwip_cyclic_timers); i++) {
 800fdd6:	2301      	movs	r3, #1
 800fdd8:	607b      	str	r3, [r7, #4]
 800fdda:	e00e      	b.n	800fdfa <sys_timeouts_init+0x2a>
    /* we have to cast via size_t to get rid of const warning
      (this is OK as cyclic_timer() casts back to const* */
    sys_timeout(lwip_cyclic_timers[i].interval_ms, cyclic_timer, LWIP_CONST_CAST(void*, &lwip_cyclic_timers[i]));
 800fddc:	4a0d      	ldr	r2, [pc, #52]	; (800fe14 <sys_timeouts_init+0x44>)
 800fdde:	687b      	ldr	r3, [r7, #4]
 800fde0:	f852 0033 	ldr.w	r0, [r2, r3, lsl #3]
 800fde4:	687b      	ldr	r3, [r7, #4]
 800fde6:	00db      	lsls	r3, r3, #3
 800fde8:	4a0a      	ldr	r2, [pc, #40]	; (800fe14 <sys_timeouts_init+0x44>)
 800fdea:	4413      	add	r3, r2
 800fdec:	461a      	mov	r2, r3
 800fdee:	490a      	ldr	r1, [pc, #40]	; (800fe18 <sys_timeouts_init+0x48>)
 800fdf0:	f000 f816 	bl	800fe20 <sys_timeout>
  for (i = (LWIP_TCP ? 1 : 0); i < LWIP_ARRAYSIZE(lwip_cyclic_timers); i++) {
 800fdf4:	687b      	ldr	r3, [r7, #4]
 800fdf6:	3301      	adds	r3, #1
 800fdf8:	607b      	str	r3, [r7, #4]
 800fdfa:	687b      	ldr	r3, [r7, #4]
 800fdfc:	2b02      	cmp	r3, #2
 800fdfe:	d9ed      	bls.n	800fddc <sys_timeouts_init+0xc>
  }

  /* Initialise timestamp for sys_check_timeouts */
  timeouts_last_time = sys_now();
 800fe00:	f003 fd82 	bl	8013908 <sys_now>
 800fe04:	4602      	mov	r2, r0
 800fe06:	4b05      	ldr	r3, [pc, #20]	; (800fe1c <sys_timeouts_init+0x4c>)
 800fe08:	601a      	str	r2, [r3, #0]
}
 800fe0a:	bf00      	nop
 800fe0c:	3708      	adds	r7, #8
 800fe0e:	46bd      	mov	sp, r7
 800fe10:	bd80      	pop	{r7, pc}
 800fe12:	bf00      	nop
 800fe14:	0801c148 	.word	0x0801c148
 800fe18:	0800fda5 	.word	0x0800fda5
 800fe1c:	24008644 	.word	0x24008644

0800fe20 <sys_timeout>:
sys_timeout_debug(u32_t msecs, sys_timeout_handler handler, void *arg, const char* handler_name)
#else /* LWIP_DEBUG_TIMERNAMES */
void
sys_timeout(u32_t msecs, sys_timeout_handler handler, void *arg)
#endif /* LWIP_DEBUG_TIMERNAMES */
{
 800fe20:	b580      	push	{r7, lr}
 800fe22:	b088      	sub	sp, #32
 800fe24:	af00      	add	r7, sp, #0
 800fe26:	60f8      	str	r0, [r7, #12]
 800fe28:	60b9      	str	r1, [r7, #8]
 800fe2a:	607a      	str	r2, [r7, #4]
  struct sys_timeo *timeout, *t;
  u32_t now, diff;

  timeout = (struct sys_timeo *)memp_malloc(MEMP_SYS_TIMEOUT);
 800fe2c:	200a      	movs	r0, #10
 800fe2e:	f7f9 fd1f 	bl	8009870 <memp_malloc>
 800fe32:	6178      	str	r0, [r7, #20]
  if (timeout == NULL) {
 800fe34:	697b      	ldr	r3, [r7, #20]
 800fe36:	2b00      	cmp	r3, #0
 800fe38:	d10a      	bne.n	800fe50 <sys_timeout+0x30>
    LWIP_ASSERT("sys_timeout: timeout != NULL, pool MEMP_SYS_TIMEOUT is empty", timeout != NULL);
 800fe3a:	697b      	ldr	r3, [r7, #20]
 800fe3c:	2b00      	cmp	r3, #0
 800fe3e:	f040 8084 	bne.w	800ff4a <sys_timeout+0x12a>
 800fe42:	4b44      	ldr	r3, [pc, #272]	; (800ff54 <sys_timeout+0x134>)
 800fe44:	22d4      	movs	r2, #212	; 0xd4
 800fe46:	4944      	ldr	r1, [pc, #272]	; (800ff58 <sys_timeout+0x138>)
 800fe48:	4844      	ldr	r0, [pc, #272]	; (800ff5c <sys_timeout+0x13c>)
 800fe4a:	f005 fec3 	bl	8015bd4 <printf_>
    return;
 800fe4e:	e07c      	b.n	800ff4a <sys_timeout+0x12a>
  }

  now = sys_now();
 800fe50:	f003 fd5a 	bl	8013908 <sys_now>
 800fe54:	6138      	str	r0, [r7, #16]
  if (next_timeout == NULL) {
 800fe56:	4b42      	ldr	r3, [pc, #264]	; (800ff60 <sys_timeout+0x140>)
 800fe58:	681b      	ldr	r3, [r3, #0]
 800fe5a:	2b00      	cmp	r3, #0
 800fe5c:	d105      	bne.n	800fe6a <sys_timeout+0x4a>
    diff = 0;
 800fe5e:	2300      	movs	r3, #0
 800fe60:	61bb      	str	r3, [r7, #24]
    timeouts_last_time = now;
 800fe62:	4a40      	ldr	r2, [pc, #256]	; (800ff64 <sys_timeout+0x144>)
 800fe64:	693b      	ldr	r3, [r7, #16]
 800fe66:	6013      	str	r3, [r2, #0]
 800fe68:	e004      	b.n	800fe74 <sys_timeout+0x54>
  } else {
    diff = now - timeouts_last_time;
 800fe6a:	4b3e      	ldr	r3, [pc, #248]	; (800ff64 <sys_timeout+0x144>)
 800fe6c:	681b      	ldr	r3, [r3, #0]
 800fe6e:	693a      	ldr	r2, [r7, #16]
 800fe70:	1ad3      	subs	r3, r2, r3
 800fe72:	61bb      	str	r3, [r7, #24]
  }

  timeout->next = NULL;
 800fe74:	697b      	ldr	r3, [r7, #20]
 800fe76:	2200      	movs	r2, #0
 800fe78:	601a      	str	r2, [r3, #0]
  timeout->h = handler;
 800fe7a:	697b      	ldr	r3, [r7, #20]
 800fe7c:	68ba      	ldr	r2, [r7, #8]
 800fe7e:	609a      	str	r2, [r3, #8]
  timeout->arg = arg;
 800fe80:	697b      	ldr	r3, [r7, #20]
 800fe82:	687a      	ldr	r2, [r7, #4]
 800fe84:	60da      	str	r2, [r3, #12]
  timeout->time = msecs + diff;
 800fe86:	68fa      	ldr	r2, [r7, #12]
 800fe88:	69bb      	ldr	r3, [r7, #24]
 800fe8a:	441a      	add	r2, r3
 800fe8c:	697b      	ldr	r3, [r7, #20]
 800fe8e:	605a      	str	r2, [r3, #4]
  timeout->handler_name = handler_name;
  LWIP_DEBUGF(TIMERS_DEBUG, ("sys_timeout: %p msecs=%"U32_F" handler=%s arg=%p\n",
    (void *)timeout, msecs, handler_name, (void *)arg));
#endif /* LWIP_DEBUG_TIMERNAMES */

  if (next_timeout == NULL) {
 800fe90:	4b33      	ldr	r3, [pc, #204]	; (800ff60 <sys_timeout+0x140>)
 800fe92:	681b      	ldr	r3, [r3, #0]
 800fe94:	2b00      	cmp	r3, #0
 800fe96:	d103      	bne.n	800fea0 <sys_timeout+0x80>
    next_timeout = timeout;
 800fe98:	4a31      	ldr	r2, [pc, #196]	; (800ff60 <sys_timeout+0x140>)
 800fe9a:	697b      	ldr	r3, [r7, #20]
 800fe9c:	6013      	str	r3, [r2, #0]
    return;
 800fe9e:	e055      	b.n	800ff4c <sys_timeout+0x12c>
  }

  if (next_timeout->time > msecs) {
 800fea0:	4b2f      	ldr	r3, [pc, #188]	; (800ff60 <sys_timeout+0x140>)
 800fea2:	681b      	ldr	r3, [r3, #0]
 800fea4:	685b      	ldr	r3, [r3, #4]
 800fea6:	68fa      	ldr	r2, [r7, #12]
 800fea8:	429a      	cmp	r2, r3
 800feaa:	d20f      	bcs.n	800fecc <sys_timeout+0xac>
    next_timeout->time -= msecs;
 800feac:	4b2c      	ldr	r3, [pc, #176]	; (800ff60 <sys_timeout+0x140>)
 800feae:	681b      	ldr	r3, [r3, #0]
 800feb0:	6859      	ldr	r1, [r3, #4]
 800feb2:	4b2b      	ldr	r3, [pc, #172]	; (800ff60 <sys_timeout+0x140>)
 800feb4:	681b      	ldr	r3, [r3, #0]
 800feb6:	68fa      	ldr	r2, [r7, #12]
 800feb8:	1a8a      	subs	r2, r1, r2
 800feba:	605a      	str	r2, [r3, #4]
    timeout->next = next_timeout;
 800febc:	4b28      	ldr	r3, [pc, #160]	; (800ff60 <sys_timeout+0x140>)
 800febe:	681a      	ldr	r2, [r3, #0]
 800fec0:	697b      	ldr	r3, [r7, #20]
 800fec2:	601a      	str	r2, [r3, #0]
    next_timeout = timeout;
 800fec4:	4a26      	ldr	r2, [pc, #152]	; (800ff60 <sys_timeout+0x140>)
 800fec6:	697b      	ldr	r3, [r7, #20]
 800fec8:	6013      	str	r3, [r2, #0]
 800feca:	e03f      	b.n	800ff4c <sys_timeout+0x12c>
  } else {
    for (t = next_timeout; t != NULL; t = t->next) {
 800fecc:	4b24      	ldr	r3, [pc, #144]	; (800ff60 <sys_timeout+0x140>)
 800fece:	681b      	ldr	r3, [r3, #0]
 800fed0:	61fb      	str	r3, [r7, #28]
 800fed2:	e036      	b.n	800ff42 <sys_timeout+0x122>
      timeout->time -= t->time;
 800fed4:	697b      	ldr	r3, [r7, #20]
 800fed6:	685a      	ldr	r2, [r3, #4]
 800fed8:	69fb      	ldr	r3, [r7, #28]
 800feda:	685b      	ldr	r3, [r3, #4]
 800fedc:	1ad2      	subs	r2, r2, r3
 800fede:	697b      	ldr	r3, [r7, #20]
 800fee0:	605a      	str	r2, [r3, #4]
      if (t->next == NULL || t->next->time > timeout->time) {
 800fee2:	69fb      	ldr	r3, [r7, #28]
 800fee4:	681b      	ldr	r3, [r3, #0]
 800fee6:	2b00      	cmp	r3, #0
 800fee8:	d006      	beq.n	800fef8 <sys_timeout+0xd8>
 800feea:	69fb      	ldr	r3, [r7, #28]
 800feec:	681b      	ldr	r3, [r3, #0]
 800feee:	685a      	ldr	r2, [r3, #4]
 800fef0:	697b      	ldr	r3, [r7, #20]
 800fef2:	685b      	ldr	r3, [r3, #4]
 800fef4:	429a      	cmp	r2, r3
 800fef6:	d921      	bls.n	800ff3c <sys_timeout+0x11c>
        if (t->next != NULL) {
 800fef8:	69fb      	ldr	r3, [r7, #28]
 800fefa:	681b      	ldr	r3, [r3, #0]
 800fefc:	2b00      	cmp	r3, #0
 800fefe:	d009      	beq.n	800ff14 <sys_timeout+0xf4>
          t->next->time -= timeout->time;
 800ff00:	69fb      	ldr	r3, [r7, #28]
 800ff02:	681b      	ldr	r3, [r3, #0]
 800ff04:	6859      	ldr	r1, [r3, #4]
 800ff06:	697b      	ldr	r3, [r7, #20]
 800ff08:	685a      	ldr	r2, [r3, #4]
 800ff0a:	69fb      	ldr	r3, [r7, #28]
 800ff0c:	681b      	ldr	r3, [r3, #0]
 800ff0e:	1a8a      	subs	r2, r1, r2
 800ff10:	605a      	str	r2, [r3, #4]
 800ff12:	e00b      	b.n	800ff2c <sys_timeout+0x10c>
        } else if (timeout->time > msecs) {
 800ff14:	697b      	ldr	r3, [r7, #20]
 800ff16:	685b      	ldr	r3, [r3, #4]
 800ff18:	68fa      	ldr	r2, [r7, #12]
 800ff1a:	429a      	cmp	r2, r3
 800ff1c:	d206      	bcs.n	800ff2c <sys_timeout+0x10c>
          /* If this is the case, 'timeouts_last_time' and 'now' differs too much.
             This can be due to sys_check_timeouts() not being called at the right
             times, but also when stopping in a breakpoint. Anyway, let's assume
             this is not wanted, so add the first timer's time instead of 'diff' */
          timeout->time = msecs + next_timeout->time;
 800ff1e:	4b10      	ldr	r3, [pc, #64]	; (800ff60 <sys_timeout+0x140>)
 800ff20:	681b      	ldr	r3, [r3, #0]
 800ff22:	685a      	ldr	r2, [r3, #4]
 800ff24:	68fb      	ldr	r3, [r7, #12]
 800ff26:	441a      	add	r2, r3
 800ff28:	697b      	ldr	r3, [r7, #20]
 800ff2a:	605a      	str	r2, [r3, #4]
        }
        timeout->next = t->next;
 800ff2c:	69fb      	ldr	r3, [r7, #28]
 800ff2e:	681a      	ldr	r2, [r3, #0]
 800ff30:	697b      	ldr	r3, [r7, #20]
 800ff32:	601a      	str	r2, [r3, #0]
        t->next = timeout;
 800ff34:	69fb      	ldr	r3, [r7, #28]
 800ff36:	697a      	ldr	r2, [r7, #20]
 800ff38:	601a      	str	r2, [r3, #0]
        break;
 800ff3a:	e007      	b.n	800ff4c <sys_timeout+0x12c>
    for (t = next_timeout; t != NULL; t = t->next) {
 800ff3c:	69fb      	ldr	r3, [r7, #28]
 800ff3e:	681b      	ldr	r3, [r3, #0]
 800ff40:	61fb      	str	r3, [r7, #28]
 800ff42:	69fb      	ldr	r3, [r7, #28]
 800ff44:	2b00      	cmp	r3, #0
 800ff46:	d1c5      	bne.n	800fed4 <sys_timeout+0xb4>
 800ff48:	e000      	b.n	800ff4c <sys_timeout+0x12c>
    return;
 800ff4a:	bf00      	nop
      }
    }
  }
}
 800ff4c:	3720      	adds	r7, #32
 800ff4e:	46bd      	mov	sp, r7
 800ff50:	bd80      	pop	{r7, pc}
 800ff52:	bf00      	nop
 800ff54:	0801b720 	.word	0x0801b720
 800ff58:	0801b754 	.word	0x0801b754
 800ff5c:	0801b794 	.word	0x0801b794
 800ff60:	24008640 	.word	0x24008640
 800ff64:	24008644 	.word	0x24008644

0800ff68 <sys_check_timeouts>:
#if !NO_SYS && !defined __DOXYGEN__
static
#endif /* !NO_SYS */
void
sys_check_timeouts(void)
{
 800ff68:	b580      	push	{r7, lr}
 800ff6a:	b086      	sub	sp, #24
 800ff6c:	af00      	add	r7, sp, #0
  if (next_timeout) {
 800ff6e:	4b24      	ldr	r3, [pc, #144]	; (8010000 <sys_check_timeouts+0x98>)
 800ff70:	681b      	ldr	r3, [r3, #0]
 800ff72:	2b00      	cmp	r3, #0
 800ff74:	d03f      	beq.n	800fff6 <sys_check_timeouts+0x8e>
    sys_timeout_handler handler;
    void *arg;
    u8_t had_one;
    u32_t now;

    now = sys_now();
 800ff76:	f003 fcc7 	bl	8013908 <sys_now>
 800ff7a:	60f8      	str	r0, [r7, #12]
    /* this cares for wraparounds */
    diff = now - timeouts_last_time;
 800ff7c:	4b21      	ldr	r3, [pc, #132]	; (8010004 <sys_check_timeouts+0x9c>)
 800ff7e:	681b      	ldr	r3, [r3, #0]
 800ff80:	68fa      	ldr	r2, [r7, #12]
 800ff82:	1ad3      	subs	r3, r2, r3
 800ff84:	617b      	str	r3, [r7, #20]
    do {
      PBUF_CHECK_FREE_OOSEQ();
      had_one = 0;
 800ff86:	2300      	movs	r3, #0
 800ff88:	74fb      	strb	r3, [r7, #19]
      tmptimeout = next_timeout;
 800ff8a:	4b1d      	ldr	r3, [pc, #116]	; (8010000 <sys_check_timeouts+0x98>)
 800ff8c:	681b      	ldr	r3, [r3, #0]
 800ff8e:	60bb      	str	r3, [r7, #8]
      if (tmptimeout && (tmptimeout->time <= diff)) {
 800ff90:	68bb      	ldr	r3, [r7, #8]
 800ff92:	2b00      	cmp	r3, #0
 800ff94:	d02c      	beq.n	800fff0 <sys_check_timeouts+0x88>
 800ff96:	68bb      	ldr	r3, [r7, #8]
 800ff98:	685b      	ldr	r3, [r3, #4]
 800ff9a:	697a      	ldr	r2, [r7, #20]
 800ff9c:	429a      	cmp	r2, r3
 800ff9e:	d327      	bcc.n	800fff0 <sys_check_timeouts+0x88>
        /* timeout has expired */
        had_one = 1;
 800ffa0:	2301      	movs	r3, #1
 800ffa2:	74fb      	strb	r3, [r7, #19]
        timeouts_last_time += tmptimeout->time;
 800ffa4:	68bb      	ldr	r3, [r7, #8]
 800ffa6:	685a      	ldr	r2, [r3, #4]
 800ffa8:	4b16      	ldr	r3, [pc, #88]	; (8010004 <sys_check_timeouts+0x9c>)
 800ffaa:	681b      	ldr	r3, [r3, #0]
 800ffac:	4413      	add	r3, r2
 800ffae:	4a15      	ldr	r2, [pc, #84]	; (8010004 <sys_check_timeouts+0x9c>)
 800ffb0:	6013      	str	r3, [r2, #0]
        diff -= tmptimeout->time;
 800ffb2:	68bb      	ldr	r3, [r7, #8]
 800ffb4:	685b      	ldr	r3, [r3, #4]
 800ffb6:	697a      	ldr	r2, [r7, #20]
 800ffb8:	1ad3      	subs	r3, r2, r3
 800ffba:	617b      	str	r3, [r7, #20]
        next_timeout = tmptimeout->next;
 800ffbc:	68bb      	ldr	r3, [r7, #8]
 800ffbe:	681b      	ldr	r3, [r3, #0]
 800ffc0:	4a0f      	ldr	r2, [pc, #60]	; (8010000 <sys_check_timeouts+0x98>)
 800ffc2:	6013      	str	r3, [r2, #0]
        handler = tmptimeout->h;
 800ffc4:	68bb      	ldr	r3, [r7, #8]
 800ffc6:	689b      	ldr	r3, [r3, #8]
 800ffc8:	607b      	str	r3, [r7, #4]
        arg = tmptimeout->arg;
 800ffca:	68bb      	ldr	r3, [r7, #8]
 800ffcc:	68db      	ldr	r3, [r3, #12]
 800ffce:	603b      	str	r3, [r7, #0]
        if (handler != NULL) {
          LWIP_DEBUGF(TIMERS_DEBUG, ("sct calling h=%s arg=%p\n",
            tmptimeout->handler_name, arg));
        }
#endif /* LWIP_DEBUG_TIMERNAMES */
        memp_free(MEMP_SYS_TIMEOUT, tmptimeout);
 800ffd0:	68b9      	ldr	r1, [r7, #8]
 800ffd2:	200a      	movs	r0, #10
 800ffd4:	f7f9 fcc2 	bl	800995c <memp_free>
        if (handler != NULL) {
 800ffd8:	687b      	ldr	r3, [r7, #4]
 800ffda:	2b00      	cmp	r3, #0
 800ffdc:	d008      	beq.n	800fff0 <sys_check_timeouts+0x88>
#if !NO_SYS
          /* For LWIP_TCPIP_CORE_LOCKING, lock the core before calling the
             timeout handler function. */
          LOCK_TCPIP_CORE();
 800ffde:	480a      	ldr	r0, [pc, #40]	; (8010008 <sys_check_timeouts+0xa0>)
 800ffe0:	f003 f820 	bl	8013024 <sys_mutex_lock>
#endif /* !NO_SYS */
          handler(arg);
 800ffe4:	687b      	ldr	r3, [r7, #4]
 800ffe6:	6838      	ldr	r0, [r7, #0]
 800ffe8:	4798      	blx	r3
#if !NO_SYS
          UNLOCK_TCPIP_CORE();
 800ffea:	4807      	ldr	r0, [pc, #28]	; (8010008 <sys_check_timeouts+0xa0>)
 800ffec:	f003 f829 	bl	8013042 <sys_mutex_unlock>
#endif /* !NO_SYS */
        }
        LWIP_TCPIP_THREAD_ALIVE();
      }
    /* repeat until all expired timers have been called */
    } while (had_one);
 800fff0:	7cfb      	ldrb	r3, [r7, #19]
 800fff2:	2b00      	cmp	r3, #0
 800fff4:	d1c7      	bne.n	800ff86 <sys_check_timeouts+0x1e>
  }
}
 800fff6:	bf00      	nop
 800fff8:	3718      	adds	r7, #24
 800fffa:	46bd      	mov	sp, r7
 800fffc:	bd80      	pop	{r7, pc}
 800fffe:	bf00      	nop
 8010000:	24008640 	.word	0x24008640
 8010004:	24008644 	.word	0x24008644
 8010008:	240087a8 	.word	0x240087a8

0801000c <sys_timeouts_sleeptime>:
#if !NO_SYS
static
#endif /* !NO_SYS */
u32_t
sys_timeouts_sleeptime(void)
{
 801000c:	b580      	push	{r7, lr}
 801000e:	b082      	sub	sp, #8
 8010010:	af00      	add	r7, sp, #0
  u32_t diff;
  if (next_timeout == NULL) {
 8010012:	4b0f      	ldr	r3, [pc, #60]	; (8010050 <sys_timeouts_sleeptime+0x44>)
 8010014:	681b      	ldr	r3, [r3, #0]
 8010016:	2b00      	cmp	r3, #0
 8010018:	d102      	bne.n	8010020 <sys_timeouts_sleeptime+0x14>
    return 0xffffffff;
 801001a:	f04f 33ff 	mov.w	r3, #4294967295
 801001e:	e013      	b.n	8010048 <sys_timeouts_sleeptime+0x3c>
  }
  diff = sys_now() - timeouts_last_time;
 8010020:	f003 fc72 	bl	8013908 <sys_now>
 8010024:	4602      	mov	r2, r0
 8010026:	4b0b      	ldr	r3, [pc, #44]	; (8010054 <sys_timeouts_sleeptime+0x48>)
 8010028:	681b      	ldr	r3, [r3, #0]
 801002a:	1ad3      	subs	r3, r2, r3
 801002c:	607b      	str	r3, [r7, #4]
  if (diff > next_timeout->time) {
 801002e:	4b08      	ldr	r3, [pc, #32]	; (8010050 <sys_timeouts_sleeptime+0x44>)
 8010030:	681b      	ldr	r3, [r3, #0]
 8010032:	685b      	ldr	r3, [r3, #4]
 8010034:	687a      	ldr	r2, [r7, #4]
 8010036:	429a      	cmp	r2, r3
 8010038:	d901      	bls.n	801003e <sys_timeouts_sleeptime+0x32>
    return 0;
 801003a:	2300      	movs	r3, #0
 801003c:	e004      	b.n	8010048 <sys_timeouts_sleeptime+0x3c>
  } else {
    return next_timeout->time - diff;
 801003e:	4b04      	ldr	r3, [pc, #16]	; (8010050 <sys_timeouts_sleeptime+0x44>)
 8010040:	681b      	ldr	r3, [r3, #0]
 8010042:	685a      	ldr	r2, [r3, #4]
 8010044:	687b      	ldr	r3, [r7, #4]
 8010046:	1ad3      	subs	r3, r2, r3
  }
}
 8010048:	4618      	mov	r0, r3
 801004a:	3708      	adds	r7, #8
 801004c:	46bd      	mov	sp, r7
 801004e:	bd80      	pop	{r7, pc}
 8010050:	24008640 	.word	0x24008640
 8010054:	24008644 	.word	0x24008644

08010058 <sys_timeouts_mbox_fetch>:
 * @param mbox the mbox to fetch the message from
 * @param msg the place to store the message
 */
void
sys_timeouts_mbox_fetch(sys_mbox_t *mbox, void **msg)
{
 8010058:	b580      	push	{r7, lr}
 801005a:	b084      	sub	sp, #16
 801005c:	af00      	add	r7, sp, #0
 801005e:	6078      	str	r0, [r7, #4]
 8010060:	6039      	str	r1, [r7, #0]
  u32_t sleeptime;

again:
  if (!next_timeout) {
 8010062:	4b0f      	ldr	r3, [pc, #60]	; (80100a0 <sys_timeouts_mbox_fetch+0x48>)
 8010064:	681b      	ldr	r3, [r3, #0]
 8010066:	2b00      	cmp	r3, #0
 8010068:	d105      	bne.n	8010076 <sys_timeouts_mbox_fetch+0x1e>
    sys_arch_mbox_fetch(mbox, msg, 0);
 801006a:	2200      	movs	r2, #0
 801006c:	6839      	ldr	r1, [r7, #0]
 801006e:	6878      	ldr	r0, [r7, #4]
 8010070:	f002 fea7 	bl	8012dc2 <sys_arch_mbox_fetch>
    return;
 8010074:	e011      	b.n	801009a <sys_timeouts_mbox_fetch+0x42>
  }

  sleeptime = sys_timeouts_sleeptime();
 8010076:	f7ff ffc9 	bl	801000c <sys_timeouts_sleeptime>
 801007a:	60f8      	str	r0, [r7, #12]
  if (sleeptime == 0 || sys_arch_mbox_fetch(mbox, msg, sleeptime) == SYS_ARCH_TIMEOUT) {
 801007c:	68fb      	ldr	r3, [r7, #12]
 801007e:	2b00      	cmp	r3, #0
 8010080:	d008      	beq.n	8010094 <sys_timeouts_mbox_fetch+0x3c>
 8010082:	68fa      	ldr	r2, [r7, #12]
 8010084:	6839      	ldr	r1, [r7, #0]
 8010086:	6878      	ldr	r0, [r7, #4]
 8010088:	f002 fe9b 	bl	8012dc2 <sys_arch_mbox_fetch>
 801008c:	4603      	mov	r3, r0
 801008e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010092:	d102      	bne.n	801009a <sys_timeouts_mbox_fetch+0x42>
    /* If a SYS_ARCH_TIMEOUT value is returned, a timeout occurred
       before a message could be fetched. */
    sys_check_timeouts();
 8010094:	f7ff ff68 	bl	800ff68 <sys_check_timeouts>
    /* We try again to fetch a message from the mbox. */
    goto again;
 8010098:	e7e3      	b.n	8010062 <sys_timeouts_mbox_fetch+0xa>
  }
}
 801009a:	3710      	adds	r7, #16
 801009c:	46bd      	mov	sp, r7
 801009e:	bd80      	pop	{r7, pc}
 80100a0:	24008640 	.word	0x24008640

080100a4 <udp_init>:
/**
 * Initialize this module.
 */
void
udp_init(void)
{
 80100a4:	b480      	push	{r7}
 80100a6:	af00      	add	r7, sp, #0
#if LWIP_RANDOMIZE_INITIAL_LOCAL_PORTS && defined(LWIP_RAND)
  udp_port = UDP_ENSURE_LOCAL_PORT_RANGE(LWIP_RAND());
#endif /* LWIP_RANDOMIZE_INITIAL_LOCAL_PORTS && defined(LWIP_RAND) */
}
 80100a8:	bf00      	nop
 80100aa:	46bd      	mov	sp, r7
 80100ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80100b0:	4770      	bx	lr
	...

080100b4 <udp_new_port>:
 *
 * @return a new (free) local UDP port number
 */
static u16_t
udp_new_port(void)
{
 80100b4:	b480      	push	{r7}
 80100b6:	b083      	sub	sp, #12
 80100b8:	af00      	add	r7, sp, #0
  u16_t n = 0;
 80100ba:	2300      	movs	r3, #0
 80100bc:	80fb      	strh	r3, [r7, #6]
  struct udp_pcb *pcb;

again:
  if (udp_port++ == UDP_LOCAL_PORT_RANGE_END) {
 80100be:	4b17      	ldr	r3, [pc, #92]	; (801011c <udp_new_port+0x68>)
 80100c0:	881b      	ldrh	r3, [r3, #0]
 80100c2:	1c5a      	adds	r2, r3, #1
 80100c4:	b291      	uxth	r1, r2
 80100c6:	4a15      	ldr	r2, [pc, #84]	; (801011c <udp_new_port+0x68>)
 80100c8:	8011      	strh	r1, [r2, #0]
 80100ca:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80100ce:	4293      	cmp	r3, r2
 80100d0:	d103      	bne.n	80100da <udp_new_port+0x26>
    udp_port = UDP_LOCAL_PORT_RANGE_START;
 80100d2:	4b12      	ldr	r3, [pc, #72]	; (801011c <udp_new_port+0x68>)
 80100d4:	f44f 4240 	mov.w	r2, #49152	; 0xc000
 80100d8:	801a      	strh	r2, [r3, #0]
  }
  /* Check all PCBs. */
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 80100da:	4b11      	ldr	r3, [pc, #68]	; (8010120 <udp_new_port+0x6c>)
 80100dc:	681b      	ldr	r3, [r3, #0]
 80100de:	603b      	str	r3, [r7, #0]
 80100e0:	e011      	b.n	8010106 <udp_new_port+0x52>
    if (pcb->local_port == udp_port) {
 80100e2:	683b      	ldr	r3, [r7, #0]
 80100e4:	8a5a      	ldrh	r2, [r3, #18]
 80100e6:	4b0d      	ldr	r3, [pc, #52]	; (801011c <udp_new_port+0x68>)
 80100e8:	881b      	ldrh	r3, [r3, #0]
 80100ea:	429a      	cmp	r2, r3
 80100ec:	d108      	bne.n	8010100 <udp_new_port+0x4c>
      if (++n > (UDP_LOCAL_PORT_RANGE_END - UDP_LOCAL_PORT_RANGE_START)) {
 80100ee:	88fb      	ldrh	r3, [r7, #6]
 80100f0:	3301      	adds	r3, #1
 80100f2:	80fb      	strh	r3, [r7, #6]
 80100f4:	88fb      	ldrh	r3, [r7, #6]
 80100f6:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80100fa:	d3e0      	bcc.n	80100be <udp_new_port+0xa>
        return 0;
 80100fc:	2300      	movs	r3, #0
 80100fe:	e007      	b.n	8010110 <udp_new_port+0x5c>
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 8010100:	683b      	ldr	r3, [r7, #0]
 8010102:	68db      	ldr	r3, [r3, #12]
 8010104:	603b      	str	r3, [r7, #0]
 8010106:	683b      	ldr	r3, [r7, #0]
 8010108:	2b00      	cmp	r3, #0
 801010a:	d1ea      	bne.n	80100e2 <udp_new_port+0x2e>
      }
      goto again;
    }
  }
  return udp_port;
 801010c:	4b03      	ldr	r3, [pc, #12]	; (801011c <udp_new_port+0x68>)
 801010e:	881b      	ldrh	r3, [r3, #0]
}
 8010110:	4618      	mov	r0, r3
 8010112:	370c      	adds	r7, #12
 8010114:	46bd      	mov	sp, r7
 8010116:	f85d 7b04 	ldr.w	r7, [sp], #4
 801011a:	4770      	bx	lr
 801011c:	24000014 	.word	0x24000014
 8010120:	2400f300 	.word	0x2400f300

08010124 <udp_input_local_match>:
 * @param broadcast 1 if his is an IPv4 broadcast (global or subnet-only), 0 otherwise (only used for IPv4)
 * @return 1 on match, 0 otherwise
 */
static u8_t
udp_input_local_match(struct udp_pcb *pcb, struct netif *inp, u8_t broadcast)
{
 8010124:	b480      	push	{r7}
 8010126:	b085      	sub	sp, #20
 8010128:	af00      	add	r7, sp, #0
 801012a:	60f8      	str	r0, [r7, #12]
 801012c:	60b9      	str	r1, [r7, #8]
 801012e:	4613      	mov	r3, r2
 8010130:	71fb      	strb	r3, [r7, #7]
  /* Only need to check PCB if incoming IP version matches PCB IP version */
  if (IP_ADDR_PCB_VERSION_MATCH_EXACT(pcb, ip_current_dest_addr())) {
#if LWIP_IPV4
    /* Special case: IPv4 broadcast: all or broadcasts in my subnet
     * Note: broadcast variable can only be 1 if it is an IPv4 broadcast */
    if (broadcast != 0) {
 8010132:	79fb      	ldrb	r3, [r7, #7]
 8010134:	2b00      	cmp	r3, #0
 8010136:	d018      	beq.n	801016a <udp_input_local_match+0x46>
#if IP_SOF_BROADCAST_RECV
      if (ip_get_option(pcb, SOF_BROADCAST))
#endif /* IP_SOF_BROADCAST_RECV */
      {
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 8010138:	68fb      	ldr	r3, [r7, #12]
 801013a:	2b00      	cmp	r3, #0
 801013c:	d013      	beq.n	8010166 <udp_input_local_match+0x42>
 801013e:	68fb      	ldr	r3, [r7, #12]
 8010140:	681b      	ldr	r3, [r3, #0]
 8010142:	2b00      	cmp	r3, #0
 8010144:	d00f      	beq.n	8010166 <udp_input_local_match+0x42>
          ((ip4_current_dest_addr()->addr == IPADDR_BROADCAST)) ||
 8010146:	4b14      	ldr	r3, [pc, #80]	; (8010198 <udp_input_local_match+0x74>)
 8010148:	695b      	ldr	r3, [r3, #20]
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 801014a:	f1b3 3fff 	cmp.w	r3, #4294967295
 801014e:	d00a      	beq.n	8010166 <udp_input_local_match+0x42>
           ip4_addr_netcmp(ip_2_ip4(&pcb->local_ip), ip4_current_dest_addr(), netif_ip4_netmask(inp))) {
 8010150:	68fb      	ldr	r3, [r7, #12]
 8010152:	681a      	ldr	r2, [r3, #0]
 8010154:	4b10      	ldr	r3, [pc, #64]	; (8010198 <udp_input_local_match+0x74>)
 8010156:	695b      	ldr	r3, [r3, #20]
 8010158:	405a      	eors	r2, r3
 801015a:	68bb      	ldr	r3, [r7, #8]
 801015c:	3308      	adds	r3, #8
 801015e:	681b      	ldr	r3, [r3, #0]
 8010160:	4013      	ands	r3, r2
          ((ip4_current_dest_addr()->addr == IPADDR_BROADCAST)) ||
 8010162:	2b00      	cmp	r3, #0
 8010164:	d110      	bne.n	8010188 <udp_input_local_match+0x64>
          return 1;
 8010166:	2301      	movs	r3, #1
 8010168:	e00f      	b.n	801018a <udp_input_local_match+0x66>
        }
      }
    } else
#endif /* LWIP_IPV4 */
    /* Handle IPv4 and IPv6: all or exact match */
    if (ip_addr_isany(&pcb->local_ip) || ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 801016a:	68fb      	ldr	r3, [r7, #12]
 801016c:	2b00      	cmp	r3, #0
 801016e:	d009      	beq.n	8010184 <udp_input_local_match+0x60>
 8010170:	68fb      	ldr	r3, [r7, #12]
 8010172:	681b      	ldr	r3, [r3, #0]
 8010174:	2b00      	cmp	r3, #0
 8010176:	d005      	beq.n	8010184 <udp_input_local_match+0x60>
 8010178:	68fb      	ldr	r3, [r7, #12]
 801017a:	681a      	ldr	r2, [r3, #0]
 801017c:	4b06      	ldr	r3, [pc, #24]	; (8010198 <udp_input_local_match+0x74>)
 801017e:	695b      	ldr	r3, [r3, #20]
 8010180:	429a      	cmp	r2, r3
 8010182:	d101      	bne.n	8010188 <udp_input_local_match+0x64>
      return 1;
 8010184:	2301      	movs	r3, #1
 8010186:	e000      	b.n	801018a <udp_input_local_match+0x66>
    }
  }

  return 0;
 8010188:	2300      	movs	r3, #0
}
 801018a:	4618      	mov	r0, r3
 801018c:	3714      	adds	r7, #20
 801018e:	46bd      	mov	sp, r7
 8010190:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010194:	4770      	bx	lr
 8010196:	bf00      	nop
 8010198:	240087ac 	.word	0x240087ac

0801019c <udp_input>:
 * @param inp network interface on which the datagram was received.
 *
 */
void
udp_input(struct pbuf *p, struct netif *inp)
{
 801019c:	b590      	push	{r4, r7, lr}
 801019e:	b08d      	sub	sp, #52	; 0x34
 80101a0:	af02      	add	r7, sp, #8
 80101a2:	6078      	str	r0, [r7, #4]
 80101a4:	6039      	str	r1, [r7, #0]
  struct udp_hdr *udphdr;
  struct udp_pcb *pcb, *prev;
  struct udp_pcb *uncon_pcb;
  u16_t src, dest;
  u8_t broadcast;
  u8_t for_us = 0;
 80101a6:	2300      	movs	r3, #0
 80101a8:	76fb      	strb	r3, [r7, #27]
  PERF_START;

  UDP_STATS_INC(udp.recv);

  /* Check minimum length (UDP header) */
  if (p->len < UDP_HLEN) {
 80101aa:	687b      	ldr	r3, [r7, #4]
 80101ac:	895b      	ldrh	r3, [r3, #10]
 80101ae:	2b07      	cmp	r3, #7
 80101b0:	d803      	bhi.n	80101ba <udp_input+0x1e>
    LWIP_DEBUGF(UDP_DEBUG,
                ("udp_input: short UDP datagram (%"U16_F" bytes) discarded\n", p->tot_len));
    UDP_STATS_INC(udp.lenerr);
    UDP_STATS_INC(udp.drop);
    MIB2_STATS_INC(mib2.udpinerrors);
    pbuf_free(p);
 80101b2:	6878      	ldr	r0, [r7, #4]
 80101b4:	f7fa f97c 	bl	800a4b0 <pbuf_free>
    goto end;
 80101b8:	e0c6      	b.n	8010348 <udp_input+0x1ac>
  }

  udphdr = (struct udp_hdr *)p->payload;
 80101ba:	687b      	ldr	r3, [r7, #4]
 80101bc:	685b      	ldr	r3, [r3, #4]
 80101be:	617b      	str	r3, [r7, #20]

  /* is broadcast packet ? */
  broadcast = ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif());
 80101c0:	4b63      	ldr	r3, [pc, #396]	; (8010350 <udp_input+0x1b4>)
 80101c2:	695a      	ldr	r2, [r3, #20]
 80101c4:	4b62      	ldr	r3, [pc, #392]	; (8010350 <udp_input+0x1b4>)
 80101c6:	681b      	ldr	r3, [r3, #0]
 80101c8:	4619      	mov	r1, r3
 80101ca:	4610      	mov	r0, r2
 80101cc:	f001 feb0 	bl	8011f30 <ip4_addr_isbroadcast_u32>
 80101d0:	4603      	mov	r3, r0
 80101d2:	74fb      	strb	r3, [r7, #19]

  LWIP_DEBUGF(UDP_DEBUG, ("udp_input: received datagram of length %"U16_F"\n", p->tot_len));

  /* convert src and dest ports to host byte order */
  src = lwip_ntohs(udphdr->src);
 80101d4:	697b      	ldr	r3, [r7, #20]
 80101d6:	881b      	ldrh	r3, [r3, #0]
 80101d8:	b29b      	uxth	r3, r3
 80101da:	4618      	mov	r0, r3
 80101dc:	f7f8 ff3c 	bl	8009058 <lwip_htons>
 80101e0:	4603      	mov	r3, r0
 80101e2:	823b      	strh	r3, [r7, #16]
  dest = lwip_ntohs(udphdr->dest);
 80101e4:	697b      	ldr	r3, [r7, #20]
 80101e6:	885b      	ldrh	r3, [r3, #2]
 80101e8:	b29b      	uxth	r3, r3
 80101ea:	4618      	mov	r0, r3
 80101ec:	f7f8 ff34 	bl	8009058 <lwip_htons>
 80101f0:	4603      	mov	r3, r0
 80101f2:	81fb      	strh	r3, [r7, #14]
  ip_addr_debug_print(UDP_DEBUG, ip_current_dest_addr());
  LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F") <-- (", lwip_ntohs(udphdr->dest)));
  ip_addr_debug_print(UDP_DEBUG, ip_current_src_addr());
  LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F")\n", lwip_ntohs(udphdr->src)));

  pcb = NULL;
 80101f4:	2300      	movs	r3, #0
 80101f6:	627b      	str	r3, [r7, #36]	; 0x24
  prev = NULL;
 80101f8:	2300      	movs	r3, #0
 80101fa:	623b      	str	r3, [r7, #32]
  uncon_pcb = NULL;
 80101fc:	2300      	movs	r3, #0
 80101fe:	61fb      	str	r3, [r7, #28]
  /* Iterate through the UDP pcb list for a matching pcb.
   * 'Perfect match' pcbs (connected to the remote port & ip address) are
   * preferred. If no perfect match is found, the first unconnected pcb that
   * matches the local port and ip address gets the datagram. */
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 8010200:	4b54      	ldr	r3, [pc, #336]	; (8010354 <udp_input+0x1b8>)
 8010202:	681b      	ldr	r3, [r3, #0]
 8010204:	627b      	str	r3, [r7, #36]	; 0x24
 8010206:	e03b      	b.n	8010280 <udp_input+0xe4>
    LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F") <-- (", pcb->local_port));
    ip_addr_debug_print(UDP_DEBUG, &pcb->remote_ip);
    LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F")\n", pcb->remote_port));

    /* compare PCB local addr+port to UDP destination addr+port */
    if ((pcb->local_port == dest) &&
 8010208:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801020a:	8a5b      	ldrh	r3, [r3, #18]
 801020c:	89fa      	ldrh	r2, [r7, #14]
 801020e:	429a      	cmp	r2, r3
 8010210:	d131      	bne.n	8010276 <udp_input+0xda>
        (udp_input_local_match(pcb, inp, broadcast) != 0)) {
 8010212:	7cfb      	ldrb	r3, [r7, #19]
 8010214:	461a      	mov	r2, r3
 8010216:	6839      	ldr	r1, [r7, #0]
 8010218:	6a78      	ldr	r0, [r7, #36]	; 0x24
 801021a:	f7ff ff83 	bl	8010124 <udp_input_local_match>
 801021e:	4603      	mov	r3, r0
    if ((pcb->local_port == dest) &&
 8010220:	2b00      	cmp	r3, #0
 8010222:	d028      	beq.n	8010276 <udp_input+0xda>
      if (((pcb->flags & UDP_FLAGS_CONNECTED) == 0) &&
 8010224:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010226:	7c1b      	ldrb	r3, [r3, #16]
 8010228:	f003 0304 	and.w	r3, r3, #4
 801022c:	2b00      	cmp	r3, #0
 801022e:	d104      	bne.n	801023a <udp_input+0x9e>
 8010230:	69fb      	ldr	r3, [r7, #28]
 8010232:	2b00      	cmp	r3, #0
 8010234:	d101      	bne.n	801023a <udp_input+0x9e>
          /* prefer specific IPs over cath-all */
          || !ip_addr_isany(&pcb->local_ip)
#endif /* SO_REUSE */
          )) {
        /* the first unconnected matching PCB */
        uncon_pcb = pcb;
 8010236:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010238:	61fb      	str	r3, [r7, #28]
      }

      /* compare PCB remote addr+port to UDP source addr+port */
      if ((pcb->remote_port == src) &&
 801023a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801023c:	8a9b      	ldrh	r3, [r3, #20]
 801023e:	8a3a      	ldrh	r2, [r7, #16]
 8010240:	429a      	cmp	r2, r3
 8010242:	d118      	bne.n	8010276 <udp_input+0xda>
          (ip_addr_isany_val(pcb->remote_ip) ||
 8010244:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010246:	685b      	ldr	r3, [r3, #4]
      if ((pcb->remote_port == src) &&
 8010248:	2b00      	cmp	r3, #0
 801024a:	d005      	beq.n	8010258 <udp_input+0xbc>
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()))) {
 801024c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801024e:	685a      	ldr	r2, [r3, #4]
 8010250:	4b3f      	ldr	r3, [pc, #252]	; (8010350 <udp_input+0x1b4>)
 8010252:	691b      	ldr	r3, [r3, #16]
          (ip_addr_isany_val(pcb->remote_ip) ||
 8010254:	429a      	cmp	r2, r3
 8010256:	d10e      	bne.n	8010276 <udp_input+0xda>
        /* the first fully matching PCB */
        if (prev != NULL) {
 8010258:	6a3b      	ldr	r3, [r7, #32]
 801025a:	2b00      	cmp	r3, #0
 801025c:	d014      	beq.n	8010288 <udp_input+0xec>
          /* move the pcb to the front of udp_pcbs so that is
             found faster next time */
          prev->next = pcb->next;
 801025e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010260:	68da      	ldr	r2, [r3, #12]
 8010262:	6a3b      	ldr	r3, [r7, #32]
 8010264:	60da      	str	r2, [r3, #12]
          pcb->next = udp_pcbs;
 8010266:	4b3b      	ldr	r3, [pc, #236]	; (8010354 <udp_input+0x1b8>)
 8010268:	681a      	ldr	r2, [r3, #0]
 801026a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801026c:	60da      	str	r2, [r3, #12]
          udp_pcbs = pcb;
 801026e:	4a39      	ldr	r2, [pc, #228]	; (8010354 <udp_input+0x1b8>)
 8010270:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010272:	6013      	str	r3, [r2, #0]
        } else {
          UDP_STATS_INC(udp.cachehit);
        }
        break;
 8010274:	e008      	b.n	8010288 <udp_input+0xec>
      }
    }

    prev = pcb;
 8010276:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010278:	623b      	str	r3, [r7, #32]
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 801027a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801027c:	68db      	ldr	r3, [r3, #12]
 801027e:	627b      	str	r3, [r7, #36]	; 0x24
 8010280:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010282:	2b00      	cmp	r3, #0
 8010284:	d1c0      	bne.n	8010208 <udp_input+0x6c>
 8010286:	e000      	b.n	801028a <udp_input+0xee>
        break;
 8010288:	bf00      	nop
  }
  /* no fully matching pcb found? then look for an unconnected pcb */
  if (pcb == NULL) {
 801028a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801028c:	2b00      	cmp	r3, #0
 801028e:	d101      	bne.n	8010294 <udp_input+0xf8>
    pcb = uncon_pcb;
 8010290:	69fb      	ldr	r3, [r7, #28]
 8010292:	627b      	str	r3, [r7, #36]	; 0x24
  }

  /* Check checksum if this is a match or if it was directed at us. */
  if (pcb != NULL) {
 8010294:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010296:	2b00      	cmp	r3, #0
 8010298:	d002      	beq.n	80102a0 <udp_input+0x104>
    for_us = 1;
 801029a:	2301      	movs	r3, #1
 801029c:	76fb      	strb	r3, [r7, #27]
 801029e:	e00a      	b.n	80102b6 <udp_input+0x11a>
      for_us = netif_get_ip6_addr_match(inp, ip6_current_dest_addr()) >= 0;
    }
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
    if (!ip_current_is_v6()) {
      for_us = ip4_addr_cmp(netif_ip4_addr(inp), ip4_current_dest_addr());
 80102a0:	683b      	ldr	r3, [r7, #0]
 80102a2:	3304      	adds	r3, #4
 80102a4:	681a      	ldr	r2, [r3, #0]
 80102a6:	4b2a      	ldr	r3, [pc, #168]	; (8010350 <udp_input+0x1b4>)
 80102a8:	695b      	ldr	r3, [r3, #20]
 80102aa:	429a      	cmp	r2, r3
 80102ac:	bf0c      	ite	eq
 80102ae:	2301      	moveq	r3, #1
 80102b0:	2300      	movne	r3, #0
 80102b2:	b2db      	uxtb	r3, r3
 80102b4:	76fb      	strb	r3, [r7, #27]
    }
#endif /* LWIP_IPV4 */
  }

  if (for_us) {
 80102b6:	7efb      	ldrb	r3, [r7, #27]
 80102b8:	2b00      	cmp	r3, #0
 80102ba:	d042      	beq.n	8010342 <udp_input+0x1a6>
          }
        }
      }
    }
#endif /* CHECKSUM_CHECK_UDP */
    if (pbuf_header(p, -UDP_HLEN)) {
 80102bc:	f06f 0107 	mvn.w	r1, #7
 80102c0:	6878      	ldr	r0, [r7, #4]
 80102c2:	f7fa f8d1 	bl	800a468 <pbuf_header>
 80102c6:	4603      	mov	r3, r0
 80102c8:	2b00      	cmp	r3, #0
 80102ca:	d00a      	beq.n	80102e2 <udp_input+0x146>
      /* Can we cope with this failing? Just assert for now */
      LWIP_ASSERT("pbuf_header failed\n", 0);
 80102cc:	4b22      	ldr	r3, [pc, #136]	; (8010358 <udp_input+0x1bc>)
 80102ce:	f240 1255 	movw	r2, #341	; 0x155
 80102d2:	4922      	ldr	r1, [pc, #136]	; (801035c <udp_input+0x1c0>)
 80102d4:	4822      	ldr	r0, [pc, #136]	; (8010360 <udp_input+0x1c4>)
 80102d6:	f005 fc7d 	bl	8015bd4 <printf_>
      UDP_STATS_INC(udp.drop);
      MIB2_STATS_INC(mib2.udpinerrors);
      pbuf_free(p);
 80102da:	6878      	ldr	r0, [r7, #4]
 80102dc:	f7fa f8e8 	bl	800a4b0 <pbuf_free>
      goto end;
 80102e0:	e032      	b.n	8010348 <udp_input+0x1ac>
    }

    if (pcb != NULL) {
 80102e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80102e4:	2b00      	cmp	r3, #0
 80102e6:	d012      	beq.n	801030e <udp_input+0x172>
          pbuf_header(p, -hdrs_len);
        }
      }
#endif /* SO_REUSE && SO_REUSE_RXTOALL */
      /* callback */
      if (pcb->recv != NULL) {
 80102e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80102ea:	699b      	ldr	r3, [r3, #24]
 80102ec:	2b00      	cmp	r3, #0
 80102ee:	d00a      	beq.n	8010306 <udp_input+0x16a>
        /* now the recv function is responsible for freeing p */
        pcb->recv(pcb->recv_arg, pcb, p, ip_current_src_addr(), src);
 80102f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80102f2:	699c      	ldr	r4, [r3, #24]
 80102f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80102f6:	69d8      	ldr	r0, [r3, #28]
 80102f8:	8a3b      	ldrh	r3, [r7, #16]
 80102fa:	9300      	str	r3, [sp, #0]
 80102fc:	4b19      	ldr	r3, [pc, #100]	; (8010364 <udp_input+0x1c8>)
 80102fe:	687a      	ldr	r2, [r7, #4]
 8010300:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8010302:	47a0      	blx	r4
  } else {
    pbuf_free(p);
  }
end:
  PERF_STOP("udp_input");
  return;
 8010304:	e021      	b.n	801034a <udp_input+0x1ae>
        pbuf_free(p);
 8010306:	6878      	ldr	r0, [r7, #4]
 8010308:	f7fa f8d2 	bl	800a4b0 <pbuf_free>
        goto end;
 801030c:	e01c      	b.n	8010348 <udp_input+0x1ac>
      if (!broadcast && !ip_addr_ismulticast(ip_current_dest_addr())) {
 801030e:	7cfb      	ldrb	r3, [r7, #19]
 8010310:	2b00      	cmp	r3, #0
 8010312:	d112      	bne.n	801033a <udp_input+0x19e>
 8010314:	4b0e      	ldr	r3, [pc, #56]	; (8010350 <udp_input+0x1b4>)
 8010316:	695b      	ldr	r3, [r3, #20]
 8010318:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 801031c:	2be0      	cmp	r3, #224	; 0xe0
 801031e:	d00c      	beq.n	801033a <udp_input+0x19e>
        pbuf_header_force(p, (s16_t)(ip_current_header_tot_len() + UDP_HLEN));
 8010320:	4b0b      	ldr	r3, [pc, #44]	; (8010350 <udp_input+0x1b4>)
 8010322:	899b      	ldrh	r3, [r3, #12]
 8010324:	3308      	adds	r3, #8
 8010326:	b29b      	uxth	r3, r3
 8010328:	b21b      	sxth	r3, r3
 801032a:	4619      	mov	r1, r3
 801032c:	6878      	ldr	r0, [r7, #4]
 801032e:	f7fa f8ad 	bl	800a48c <pbuf_header_force>
        icmp_port_unreach(ip_current_is_v6(), p);
 8010332:	2103      	movs	r1, #3
 8010334:	6878      	ldr	r0, [r7, #4]
 8010336:	f001 faf9 	bl	801192c <icmp_dest_unreach>
      pbuf_free(p);
 801033a:	6878      	ldr	r0, [r7, #4]
 801033c:	f7fa f8b8 	bl	800a4b0 <pbuf_free>
  return;
 8010340:	e003      	b.n	801034a <udp_input+0x1ae>
    pbuf_free(p);
 8010342:	6878      	ldr	r0, [r7, #4]
 8010344:	f7fa f8b4 	bl	800a4b0 <pbuf_free>
  return;
 8010348:	bf00      	nop
  UDP_STATS_INC(udp.drop);
  MIB2_STATS_INC(mib2.udpinerrors);
  pbuf_free(p);
  PERF_STOP("udp_input");
#endif /* CHECKSUM_CHECK_UDP */
}
 801034a:	372c      	adds	r7, #44	; 0x2c
 801034c:	46bd      	mov	sp, r7
 801034e:	bd90      	pop	{r4, r7, pc}
 8010350:	240087ac 	.word	0x240087ac
 8010354:	2400f300 	.word	0x2400f300
 8010358:	0801b7bc 	.word	0x0801b7bc
 801035c:	0801b7ec 	.word	0x0801b7ec
 8010360:	0801b800 	.word	0x0801b800
 8010364:	240087bc 	.word	0x240087bc

08010368 <udp_send>:
 *
 * @see udp_disconnect() udp_sendto()
 */
err_t
udp_send(struct udp_pcb *pcb, struct pbuf *p)
{
 8010368:	b580      	push	{r7, lr}
 801036a:	b082      	sub	sp, #8
 801036c:	af00      	add	r7, sp, #0
 801036e:	6078      	str	r0, [r7, #4]
 8010370:	6039      	str	r1, [r7, #0]
  if ((pcb == NULL) || IP_IS_ANY_TYPE_VAL(pcb->remote_ip)) {
 8010372:	687b      	ldr	r3, [r7, #4]
 8010374:	2b00      	cmp	r3, #0
 8010376:	d102      	bne.n	801037e <udp_send+0x16>
    return ERR_VAL;
 8010378:	f06f 0305 	mvn.w	r3, #5
 801037c:	e008      	b.n	8010390 <udp_send+0x28>
  }

  /* send to the packet using remote ip and port stored in the pcb */
  return udp_sendto(pcb, p, &pcb->remote_ip, pcb->remote_port);
 801037e:	687b      	ldr	r3, [r7, #4]
 8010380:	1d1a      	adds	r2, r3, #4
 8010382:	687b      	ldr	r3, [r7, #4]
 8010384:	8a9b      	ldrh	r3, [r3, #20]
 8010386:	6839      	ldr	r1, [r7, #0]
 8010388:	6878      	ldr	r0, [r7, #4]
 801038a:	f000 f805 	bl	8010398 <udp_sendto>
 801038e:	4603      	mov	r3, r0
}
 8010390:	4618      	mov	r0, r3
 8010392:	3708      	adds	r7, #8
 8010394:	46bd      	mov	sp, r7
 8010396:	bd80      	pop	{r7, pc}

08010398 <udp_sendto>:
 * @see udp_disconnect() udp_send()
 */
err_t
udp_sendto(struct udp_pcb *pcb, struct pbuf *p,
  const ip_addr_t *dst_ip, u16_t dst_port)
{
 8010398:	b580      	push	{r7, lr}
 801039a:	b088      	sub	sp, #32
 801039c:	af02      	add	r7, sp, #8
 801039e:	60f8      	str	r0, [r7, #12]
 80103a0:	60b9      	str	r1, [r7, #8]
 80103a2:	607a      	str	r2, [r7, #4]
 80103a4:	807b      	strh	r3, [r7, #2]
udp_sendto_chksum(struct udp_pcb *pcb, struct pbuf *p, const ip_addr_t *dst_ip,
                  u16_t dst_port, u8_t have_chksum, u16_t chksum)
{
#endif /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
  struct netif *netif;
  const ip_addr_t *dst_ip_route = dst_ip;
 80103a6:	687b      	ldr	r3, [r7, #4]
 80103a8:	617b      	str	r3, [r7, #20]

  if ((pcb == NULL) || (dst_ip == NULL) || !IP_ADDR_PCB_VERSION_MATCH(pcb, dst_ip)) {
 80103aa:	68fb      	ldr	r3, [r7, #12]
 80103ac:	2b00      	cmp	r3, #0
 80103ae:	d002      	beq.n	80103b6 <udp_sendto+0x1e>
 80103b0:	687b      	ldr	r3, [r7, #4]
 80103b2:	2b00      	cmp	r3, #0
 80103b4:	d102      	bne.n	80103bc <udp_sendto+0x24>
    return ERR_VAL;
 80103b6:	f06f 0305 	mvn.w	r3, #5
 80103ba:	e013      	b.n	80103e4 <udp_sendto+0x4c>
  /* find the outgoing network interface for this packet */
  if(IP_IS_ANY_TYPE_VAL(pcb->local_ip)) {
    /* Don't call ip_route() with IP_ANY_TYPE */
    netif = ip_route(IP46_ADDR_ANY(IP_GET_TYPE(dst_ip_route)), dst_ip_route);
  } else {
    netif = ip_route(&pcb->local_ip, dst_ip_route);
 80103bc:	6978      	ldr	r0, [r7, #20]
 80103be:	f001 fb3d 	bl	8011a3c <ip4_route>
 80103c2:	6138      	str	r0, [r7, #16]
  }

  /* no outgoing network interface could be found? */
  if (netif == NULL) {
 80103c4:	693b      	ldr	r3, [r7, #16]
 80103c6:	2b00      	cmp	r3, #0
 80103c8:	d102      	bne.n	80103d0 <udp_sendto+0x38>
    LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("udp_send: No route to "));
    ip_addr_debug_print(UDP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, dst_ip);
    LWIP_DEBUGF(UDP_DEBUG, ("\n"));
    UDP_STATS_INC(udp.rterr);
    return ERR_RTE;
 80103ca:	f06f 0303 	mvn.w	r3, #3
 80103ce:	e009      	b.n	80103e4 <udp_sendto+0x4c>
  }
#if LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP
  return udp_sendto_if_chksum(pcb, p, dst_ip, dst_port, netif, have_chksum, chksum);
#else /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
  return udp_sendto_if(pcb, p, dst_ip, dst_port, netif);
 80103d0:	887a      	ldrh	r2, [r7, #2]
 80103d2:	693b      	ldr	r3, [r7, #16]
 80103d4:	9300      	str	r3, [sp, #0]
 80103d6:	4613      	mov	r3, r2
 80103d8:	687a      	ldr	r2, [r7, #4]
 80103da:	68b9      	ldr	r1, [r7, #8]
 80103dc:	68f8      	ldr	r0, [r7, #12]
 80103de:	f000 f805 	bl	80103ec <udp_sendto_if>
 80103e2:	4603      	mov	r3, r0
#endif /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
}
 80103e4:	4618      	mov	r0, r3
 80103e6:	3718      	adds	r7, #24
 80103e8:	46bd      	mov	sp, r7
 80103ea:	bd80      	pop	{r7, pc}

080103ec <udp_sendto_if>:
 * @see udp_disconnect() udp_send()
 */
err_t
udp_sendto_if(struct udp_pcb *pcb, struct pbuf *p,
  const ip_addr_t *dst_ip, u16_t dst_port, struct netif *netif)
{
 80103ec:	b580      	push	{r7, lr}
 80103ee:	b088      	sub	sp, #32
 80103f0:	af02      	add	r7, sp, #8
 80103f2:	60f8      	str	r0, [r7, #12]
 80103f4:	60b9      	str	r1, [r7, #8]
 80103f6:	607a      	str	r2, [r7, #4]
 80103f8:	807b      	strh	r3, [r7, #2]
                     u16_t chksum)
{
#endif /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
  const ip_addr_t *src_ip;

  if ((pcb == NULL) || (dst_ip == NULL) || !IP_ADDR_PCB_VERSION_MATCH(pcb, dst_ip)) {
 80103fa:	68fb      	ldr	r3, [r7, #12]
 80103fc:	2b00      	cmp	r3, #0
 80103fe:	d002      	beq.n	8010406 <udp_sendto_if+0x1a>
 8010400:	687b      	ldr	r3, [r7, #4]
 8010402:	2b00      	cmp	r3, #0
 8010404:	d102      	bne.n	801040c <udp_sendto_if+0x20>
    return ERR_VAL;
 8010406:	f06f 0305 	mvn.w	r3, #5
 801040a:	e028      	b.n	801045e <udp_sendto_if+0x72>
#endif /* LWIP_IPV6 */
#if LWIP_IPV4 && LWIP_IPV6
  else
#endif /* LWIP_IPV4 && LWIP_IPV6 */
#if LWIP_IPV4
  if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 801040c:	68fb      	ldr	r3, [r7, #12]
 801040e:	2b00      	cmp	r3, #0
 8010410:	d009      	beq.n	8010426 <udp_sendto_if+0x3a>
 8010412:	68fb      	ldr	r3, [r7, #12]
 8010414:	681b      	ldr	r3, [r3, #0]
 8010416:	2b00      	cmp	r3, #0
 8010418:	d005      	beq.n	8010426 <udp_sendto_if+0x3a>
      ip4_addr_ismulticast(ip_2_ip4(&pcb->local_ip))) {
 801041a:	68fb      	ldr	r3, [r7, #12]
 801041c:	681b      	ldr	r3, [r3, #0]
 801041e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
  if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 8010422:	2be0      	cmp	r3, #224	; 0xe0
 8010424:	d103      	bne.n	801042e <udp_sendto_if+0x42>
    /* if the local_ip is any or multicast
     * use the outgoing network interface IP address as source address */
    src_ip = netif_ip_addr4(netif);
 8010426:	6a3b      	ldr	r3, [r7, #32]
 8010428:	3304      	adds	r3, #4
 801042a:	617b      	str	r3, [r7, #20]
 801042c:	e00b      	b.n	8010446 <udp_sendto_if+0x5a>
  } else {
    /* check if UDP PCB local IP address is correct
     * this could be an old address if netif->ip_addr has changed */
    if (!ip4_addr_cmp(ip_2_ip4(&(pcb->local_ip)), netif_ip4_addr(netif))) {
 801042e:	68fb      	ldr	r3, [r7, #12]
 8010430:	681a      	ldr	r2, [r3, #0]
 8010432:	6a3b      	ldr	r3, [r7, #32]
 8010434:	3304      	adds	r3, #4
 8010436:	681b      	ldr	r3, [r3, #0]
 8010438:	429a      	cmp	r2, r3
 801043a:	d002      	beq.n	8010442 <udp_sendto_if+0x56>
      /* local_ip doesn't match, drop the packet */
      return ERR_RTE;
 801043c:	f06f 0303 	mvn.w	r3, #3
 8010440:	e00d      	b.n	801045e <udp_sendto_if+0x72>
    }
    /* use UDP PCB local IP address as source address */
    src_ip = &pcb->local_ip;
 8010442:	68fb      	ldr	r3, [r7, #12]
 8010444:	617b      	str	r3, [r7, #20]
  }
#endif /* LWIP_IPV4 */
#if LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP
  return udp_sendto_if_src_chksum(pcb, p, dst_ip, dst_port, netif, have_chksum, chksum, src_ip);
#else /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
  return udp_sendto_if_src(pcb, p, dst_ip, dst_port, netif, src_ip);
 8010446:	887a      	ldrh	r2, [r7, #2]
 8010448:	697b      	ldr	r3, [r7, #20]
 801044a:	9301      	str	r3, [sp, #4]
 801044c:	6a3b      	ldr	r3, [r7, #32]
 801044e:	9300      	str	r3, [sp, #0]
 8010450:	4613      	mov	r3, r2
 8010452:	687a      	ldr	r2, [r7, #4]
 8010454:	68b9      	ldr	r1, [r7, #8]
 8010456:	68f8      	ldr	r0, [r7, #12]
 8010458:	f000 f806 	bl	8010468 <udp_sendto_if_src>
 801045c:	4603      	mov	r3, r0
#endif /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
}
 801045e:	4618      	mov	r0, r3
 8010460:	3718      	adds	r7, #24
 8010462:	46bd      	mov	sp, r7
 8010464:	bd80      	pop	{r7, pc}
	...

08010468 <udp_sendto_if_src>:
/** @ingroup udp_raw
 * Same as @ref udp_sendto_if, but with source address */
err_t
udp_sendto_if_src(struct udp_pcb *pcb, struct pbuf *p,
  const ip_addr_t *dst_ip, u16_t dst_port, struct netif *netif, const ip_addr_t *src_ip)
{
 8010468:	b580      	push	{r7, lr}
 801046a:	b08c      	sub	sp, #48	; 0x30
 801046c:	af04      	add	r7, sp, #16
 801046e:	60f8      	str	r0, [r7, #12]
 8010470:	60b9      	str	r1, [r7, #8]
 8010472:	607a      	str	r2, [r7, #4]
 8010474:	807b      	strh	r3, [r7, #2]
  err_t err;
  struct pbuf *q; /* q will be sent down the stack */
  u8_t ip_proto;
  u8_t ttl;

  if ((pcb == NULL) || (dst_ip == NULL) || !IP_ADDR_PCB_VERSION_MATCH(pcb, src_ip) ||
 8010476:	68fb      	ldr	r3, [r7, #12]
 8010478:	2b00      	cmp	r3, #0
 801047a:	d002      	beq.n	8010482 <udp_sendto_if_src+0x1a>
 801047c:	687b      	ldr	r3, [r7, #4]
 801047e:	2b00      	cmp	r3, #0
 8010480:	d102      	bne.n	8010488 <udp_sendto_if_src+0x20>
      !IP_ADDR_PCB_VERSION_MATCH(pcb, dst_ip)) {
    return ERR_VAL;
 8010482:	f06f 0305 	mvn.w	r3, #5
 8010486:	e07e      	b.n	8010586 <udp_sendto_if_src+0x11e>
    return ERR_VAL;
  }
#endif /* LWIP_IPV4 && IP_SOF_BROADCAST */

  /* if the PCB is not yet bound to a port, bind it here */
  if (pcb->local_port == 0) {
 8010488:	68fb      	ldr	r3, [r7, #12]
 801048a:	8a5b      	ldrh	r3, [r3, #18]
 801048c:	2b00      	cmp	r3, #0
 801048e:	d10f      	bne.n	80104b0 <udp_sendto_if_src+0x48>
    LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, ("udp_send: not yet bound to a port, binding now\n"));
    err = udp_bind(pcb, &pcb->local_ip, pcb->local_port);
 8010490:	68f9      	ldr	r1, [r7, #12]
 8010492:	68fb      	ldr	r3, [r7, #12]
 8010494:	8a5b      	ldrh	r3, [r3, #18]
 8010496:	461a      	mov	r2, r3
 8010498:	68f8      	ldr	r0, [r7, #12]
 801049a:	f000 f87f 	bl	801059c <udp_bind>
 801049e:	4603      	mov	r3, r0
 80104a0:	76fb      	strb	r3, [r7, #27]
    if (err != ERR_OK) {
 80104a2:	f997 301b 	ldrsb.w	r3, [r7, #27]
 80104a6:	2b00      	cmp	r3, #0
 80104a8:	d002      	beq.n	80104b0 <udp_sendto_if_src+0x48>
      LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("udp_send: forced port bind failed\n"));
      return err;
 80104aa:	f997 301b 	ldrsb.w	r3, [r7, #27]
 80104ae:	e06a      	b.n	8010586 <udp_sendto_if_src+0x11e>
    }
  }

  /* not enough space to add an UDP header to first pbuf in given p chain? */
  if (pbuf_header(p, UDP_HLEN)) {
 80104b0:	2108      	movs	r1, #8
 80104b2:	68b8      	ldr	r0, [r7, #8]
 80104b4:	f7f9 ffd8 	bl	800a468 <pbuf_header>
 80104b8:	4603      	mov	r3, r0
 80104ba:	2b00      	cmp	r3, #0
 80104bc:	d014      	beq.n	80104e8 <udp_sendto_if_src+0x80>
    /* allocate header in a separate new pbuf */
    q = pbuf_alloc(PBUF_IP, UDP_HLEN, PBUF_RAM);
 80104be:	2200      	movs	r2, #0
 80104c0:	2108      	movs	r1, #8
 80104c2:	2001      	movs	r0, #1
 80104c4:	f7f9 fc82 	bl	8009dcc <pbuf_alloc>
 80104c8:	61f8      	str	r0, [r7, #28]
    /* new header pbuf could not be allocated? */
    if (q == NULL) {
 80104ca:	69fb      	ldr	r3, [r7, #28]
 80104cc:	2b00      	cmp	r3, #0
 80104ce:	d102      	bne.n	80104d6 <udp_sendto_if_src+0x6e>
      LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("udp_send: could not allocate header\n"));
      return ERR_MEM;
 80104d0:	f04f 33ff 	mov.w	r3, #4294967295
 80104d4:	e057      	b.n	8010586 <udp_sendto_if_src+0x11e>
    }
    if (p->tot_len != 0) {
 80104d6:	68bb      	ldr	r3, [r7, #8]
 80104d8:	891b      	ldrh	r3, [r3, #8]
 80104da:	2b00      	cmp	r3, #0
 80104dc:	d006      	beq.n	80104ec <udp_sendto_if_src+0x84>
      /* chain header q in front of given pbuf p (only if p contains data) */
      pbuf_chain(q, p);
 80104de:	68b9      	ldr	r1, [r7, #8]
 80104e0:	69f8      	ldr	r0, [r7, #28]
 80104e2:	f7fa f915 	bl	800a710 <pbuf_chain>
 80104e6:	e001      	b.n	80104ec <udp_sendto_if_src+0x84>
    LWIP_DEBUGF(UDP_DEBUG,
                ("udp_send: added header pbuf %p before given pbuf %p\n", (void *)q, (void *)p));
  } else {
    /* adding space for header within p succeeded */
    /* first pbuf q equals given pbuf */
    q = p;
 80104e8:	68bb      	ldr	r3, [r7, #8]
 80104ea:	61fb      	str	r3, [r7, #28]
    LWIP_DEBUGF(UDP_DEBUG, ("udp_send: added header in given pbuf %p\n", (void *)p));
  }
  LWIP_ASSERT("check that first pbuf can hold struct udp_hdr",
 80104ec:	69fb      	ldr	r3, [r7, #28]
 80104ee:	895b      	ldrh	r3, [r3, #10]
 80104f0:	2b07      	cmp	r3, #7
 80104f2:	d806      	bhi.n	8010502 <udp_sendto_if_src+0x9a>
 80104f4:	4b26      	ldr	r3, [pc, #152]	; (8010590 <udp_sendto_if_src+0x128>)
 80104f6:	f44f 7237 	mov.w	r2, #732	; 0x2dc
 80104fa:	4926      	ldr	r1, [pc, #152]	; (8010594 <udp_sendto_if_src+0x12c>)
 80104fc:	4826      	ldr	r0, [pc, #152]	; (8010598 <udp_sendto_if_src+0x130>)
 80104fe:	f005 fb69 	bl	8015bd4 <printf_>
              (q->len >= sizeof(struct udp_hdr)));
  /* q now represents the packet to be sent */
  udphdr = (struct udp_hdr *)q->payload;
 8010502:	69fb      	ldr	r3, [r7, #28]
 8010504:	685b      	ldr	r3, [r3, #4]
 8010506:	617b      	str	r3, [r7, #20]
  udphdr->src = lwip_htons(pcb->local_port);
 8010508:	68fb      	ldr	r3, [r7, #12]
 801050a:	8a5b      	ldrh	r3, [r3, #18]
 801050c:	4618      	mov	r0, r3
 801050e:	f7f8 fda3 	bl	8009058 <lwip_htons>
 8010512:	4603      	mov	r3, r0
 8010514:	461a      	mov	r2, r3
 8010516:	697b      	ldr	r3, [r7, #20]
 8010518:	801a      	strh	r2, [r3, #0]
  udphdr->dest = lwip_htons(dst_port);
 801051a:	887b      	ldrh	r3, [r7, #2]
 801051c:	4618      	mov	r0, r3
 801051e:	f7f8 fd9b 	bl	8009058 <lwip_htons>
 8010522:	4603      	mov	r3, r0
 8010524:	461a      	mov	r2, r3
 8010526:	697b      	ldr	r3, [r7, #20]
 8010528:	805a      	strh	r2, [r3, #2]
  /* in UDP, 0 checksum means 'no checksum' */
  udphdr->chksum = 0x0000;
 801052a:	697b      	ldr	r3, [r7, #20]
 801052c:	2200      	movs	r2, #0
 801052e:	719a      	strb	r2, [r3, #6]
 8010530:	2200      	movs	r2, #0
 8010532:	71da      	strb	r2, [r3, #7]
    ip_proto = IP_PROTO_UDPLITE;
  } else
#endif /* LWIP_UDPLITE */
  {      /* UDP */
    LWIP_DEBUGF(UDP_DEBUG, ("udp_send: UDP packet length %"U16_F"\n", q->tot_len));
    udphdr->len = lwip_htons(q->tot_len);
 8010534:	69fb      	ldr	r3, [r7, #28]
 8010536:	891b      	ldrh	r3, [r3, #8]
 8010538:	4618      	mov	r0, r3
 801053a:	f7f8 fd8d 	bl	8009058 <lwip_htons>
 801053e:	4603      	mov	r3, r0
 8010540:	461a      	mov	r2, r3
 8010542:	697b      	ldr	r3, [r7, #20]
 8010544:	809a      	strh	r2, [r3, #4]
        }
        udphdr->chksum = udpchksum;
      }
    }
#endif /* CHECKSUM_GEN_UDP */
    ip_proto = IP_PROTO_UDP;
 8010546:	2311      	movs	r3, #17
 8010548:	74fb      	strb	r3, [r7, #19]

  /* Determine TTL to use */
#if LWIP_MULTICAST_TX_OPTIONS
  ttl = (ip_addr_ismulticast(dst_ip) ? udp_get_multicast_ttl(pcb) : pcb->ttl);
#else /* LWIP_MULTICAST_TX_OPTIONS */
  ttl = pcb->ttl;
 801054a:	68fb      	ldr	r3, [r7, #12]
 801054c:	7a9b      	ldrb	r3, [r3, #10]
 801054e:	74bb      	strb	r3, [r7, #18]

  LWIP_DEBUGF(UDP_DEBUG, ("udp_send: UDP checksum 0x%04"X16_F"\n", udphdr->chksum));
  LWIP_DEBUGF(UDP_DEBUG, ("udp_send: ip_output_if (,,,,0x%02"X16_F",)\n", (u16_t)ip_proto));
  /* output to IP */
  NETIF_SET_HWADDRHINT(netif, &(pcb->addr_hint));
  err = ip_output_if_src(q, src_ip, dst_ip, ttl, pcb->tos, ip_proto, netif);
 8010550:	68fb      	ldr	r3, [r7, #12]
 8010552:	7a5b      	ldrb	r3, [r3, #9]
 8010554:	7cb9      	ldrb	r1, [r7, #18]
 8010556:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8010558:	9202      	str	r2, [sp, #8]
 801055a:	7cfa      	ldrb	r2, [r7, #19]
 801055c:	9201      	str	r2, [sp, #4]
 801055e:	9300      	str	r3, [sp, #0]
 8010560:	460b      	mov	r3, r1
 8010562:	687a      	ldr	r2, [r7, #4]
 8010564:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8010566:	69f8      	ldr	r0, [r7, #28]
 8010568:	f001 fc3a 	bl	8011de0 <ip4_output_if_src>
 801056c:	4603      	mov	r3, r0
 801056e:	76fb      	strb	r3, [r7, #27]

  /* @todo: must this be increased even if error occurred? */
  MIB2_STATS_INC(mib2.udpoutdatagrams);

  /* did we chain a separate header pbuf earlier? */
  if (q != p) {
 8010570:	69fa      	ldr	r2, [r7, #28]
 8010572:	68bb      	ldr	r3, [r7, #8]
 8010574:	429a      	cmp	r2, r3
 8010576:	d004      	beq.n	8010582 <udp_sendto_if_src+0x11a>
    /* free the header pbuf */
    pbuf_free(q);
 8010578:	69f8      	ldr	r0, [r7, #28]
 801057a:	f7f9 ff99 	bl	800a4b0 <pbuf_free>
    q = NULL;
 801057e:	2300      	movs	r3, #0
 8010580:	61fb      	str	r3, [r7, #28]
    /* p is still referenced by the caller, and will live on */
  }

  UDP_STATS_INC(udp.xmit);
  return err;
 8010582:	f997 301b 	ldrsb.w	r3, [r7, #27]
}
 8010586:	4618      	mov	r0, r3
 8010588:	3720      	adds	r7, #32
 801058a:	46bd      	mov	sp, r7
 801058c:	bd80      	pop	{r7, pc}
 801058e:	bf00      	nop
 8010590:	0801b7bc 	.word	0x0801b7bc
 8010594:	0801b828 	.word	0x0801b828
 8010598:	0801b800 	.word	0x0801b800

0801059c <udp_bind>:
 *
 * @see udp_disconnect()
 */
err_t
udp_bind(struct udp_pcb *pcb, const ip_addr_t *ipaddr, u16_t port)
{
 801059c:	b580      	push	{r7, lr}
 801059e:	b086      	sub	sp, #24
 80105a0:	af00      	add	r7, sp, #0
 80105a2:	60f8      	str	r0, [r7, #12]
 80105a4:	60b9      	str	r1, [r7, #8]
 80105a6:	4613      	mov	r3, r2
 80105a8:	80fb      	strh	r3, [r7, #6]
  struct udp_pcb *ipcb;
  u8_t rebind;

#if LWIP_IPV4
  /* Don't propagate NULL pointer (IPv4 ANY) to subsequent functions */
  if (ipaddr == NULL) {
 80105aa:	68bb      	ldr	r3, [r7, #8]
 80105ac:	2b00      	cmp	r3, #0
 80105ae:	d101      	bne.n	80105b4 <udp_bind+0x18>
    ipaddr = IP4_ADDR_ANY;
 80105b0:	4b30      	ldr	r3, [pc, #192]	; (8010674 <udp_bind+0xd8>)
 80105b2:	60bb      	str	r3, [r7, #8]
  }
#endif /* LWIP_IPV4 */

  /* still need to check for ipaddr == NULL in IPv6 only case */
  if ((pcb == NULL) || (ipaddr == NULL)) {
 80105b4:	68fb      	ldr	r3, [r7, #12]
 80105b6:	2b00      	cmp	r3, #0
 80105b8:	d002      	beq.n	80105c0 <udp_bind+0x24>
 80105ba:	68bb      	ldr	r3, [r7, #8]
 80105bc:	2b00      	cmp	r3, #0
 80105be:	d102      	bne.n	80105c6 <udp_bind+0x2a>
    return ERR_VAL;
 80105c0:	f06f 0305 	mvn.w	r3, #5
 80105c4:	e052      	b.n	801066c <udp_bind+0xd0>

  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, ("udp_bind(ipaddr = "));
  ip_addr_debug_print(UDP_DEBUG | LWIP_DBG_TRACE, ipaddr);
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, (", port = %"U16_F")\n", port));

  rebind = 0;
 80105c6:	2300      	movs	r3, #0
 80105c8:	74fb      	strb	r3, [r7, #19]
  /* Check for double bind and rebind of the same pcb */
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 80105ca:	4b2b      	ldr	r3, [pc, #172]	; (8010678 <udp_bind+0xdc>)
 80105cc:	681b      	ldr	r3, [r3, #0]
 80105ce:	617b      	str	r3, [r7, #20]
 80105d0:	e009      	b.n	80105e6 <udp_bind+0x4a>
    /* is this UDP PCB already on active list? */
    if (pcb == ipcb) {
 80105d2:	68fa      	ldr	r2, [r7, #12]
 80105d4:	697b      	ldr	r3, [r7, #20]
 80105d6:	429a      	cmp	r2, r3
 80105d8:	d102      	bne.n	80105e0 <udp_bind+0x44>
      rebind = 1;
 80105da:	2301      	movs	r3, #1
 80105dc:	74fb      	strb	r3, [r7, #19]
      break;
 80105de:	e005      	b.n	80105ec <udp_bind+0x50>
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 80105e0:	697b      	ldr	r3, [r7, #20]
 80105e2:	68db      	ldr	r3, [r3, #12]
 80105e4:	617b      	str	r3, [r7, #20]
 80105e6:	697b      	ldr	r3, [r7, #20]
 80105e8:	2b00      	cmp	r3, #0
 80105ea:	d1f2      	bne.n	80105d2 <udp_bind+0x36>
    }
  }

  /* no port specified? */
  if (port == 0) {
 80105ec:	88fb      	ldrh	r3, [r7, #6]
 80105ee:	2b00      	cmp	r3, #0
 80105f0:	d109      	bne.n	8010606 <udp_bind+0x6a>
    port = udp_new_port();
 80105f2:	f7ff fd5f 	bl	80100b4 <udp_new_port>
 80105f6:	4603      	mov	r3, r0
 80105f8:	80fb      	strh	r3, [r7, #6]
    if (port == 0) {
 80105fa:	88fb      	ldrh	r3, [r7, #6]
 80105fc:	2b00      	cmp	r3, #0
 80105fe:	d11e      	bne.n	801063e <udp_bind+0xa2>
      /* no more ports available in local range */
      LWIP_DEBUGF(UDP_DEBUG, ("udp_bind: out of free UDP ports\n"));
      return ERR_USE;
 8010600:	f06f 0307 	mvn.w	r3, #7
 8010604:	e032      	b.n	801066c <udp_bind+0xd0>
    }
  } else {
    for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 8010606:	4b1c      	ldr	r3, [pc, #112]	; (8010678 <udp_bind+0xdc>)
 8010608:	681b      	ldr	r3, [r3, #0]
 801060a:	617b      	str	r3, [r7, #20]
 801060c:	e014      	b.n	8010638 <udp_bind+0x9c>
      if (pcb != ipcb) {
 801060e:	68fa      	ldr	r2, [r7, #12]
 8010610:	697b      	ldr	r3, [r7, #20]
 8010612:	429a      	cmp	r2, r3
 8010614:	d00d      	beq.n	8010632 <udp_bind+0x96>
        if (!ip_get_option(pcb, SOF_REUSEADDR) ||
            !ip_get_option(ipcb, SOF_REUSEADDR))
#endif /* SO_REUSE */
        {
          /* port matches that of PCB in list and REUSEADDR not set -> reject */
          if ((ipcb->local_port == port) &&
 8010616:	697b      	ldr	r3, [r7, #20]
 8010618:	8a5b      	ldrh	r3, [r3, #18]
 801061a:	88fa      	ldrh	r2, [r7, #6]
 801061c:	429a      	cmp	r2, r3
 801061e:	d108      	bne.n	8010632 <udp_bind+0x96>
              /* IP address matches? */
              ip_addr_cmp(&ipcb->local_ip, ipaddr)) {
 8010620:	697b      	ldr	r3, [r7, #20]
 8010622:	681a      	ldr	r2, [r3, #0]
 8010624:	68bb      	ldr	r3, [r7, #8]
 8010626:	681b      	ldr	r3, [r3, #0]
          if ((ipcb->local_port == port) &&
 8010628:	429a      	cmp	r2, r3
 801062a:	d102      	bne.n	8010632 <udp_bind+0x96>
            /* other PCB already binds to this local IP and port */
            LWIP_DEBUGF(UDP_DEBUG,
                        ("udp_bind: local port %"U16_F" already bound by another pcb\n", port));
            return ERR_USE;
 801062c:	f06f 0307 	mvn.w	r3, #7
 8010630:	e01c      	b.n	801066c <udp_bind+0xd0>
    for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 8010632:	697b      	ldr	r3, [r7, #20]
 8010634:	68db      	ldr	r3, [r3, #12]
 8010636:	617b      	str	r3, [r7, #20]
 8010638:	697b      	ldr	r3, [r7, #20]
 801063a:	2b00      	cmp	r3, #0
 801063c:	d1e7      	bne.n	801060e <udp_bind+0x72>
        }
      }
    }
  }

  ip_addr_set_ipaddr(&pcb->local_ip, ipaddr);
 801063e:	68bb      	ldr	r3, [r7, #8]
 8010640:	2b00      	cmp	r3, #0
 8010642:	d002      	beq.n	801064a <udp_bind+0xae>
 8010644:	68bb      	ldr	r3, [r7, #8]
 8010646:	681b      	ldr	r3, [r3, #0]
 8010648:	e000      	b.n	801064c <udp_bind+0xb0>
 801064a:	2300      	movs	r3, #0
 801064c:	68fa      	ldr	r2, [r7, #12]
 801064e:	6013      	str	r3, [r2, #0]

  pcb->local_port = port;
 8010650:	68fb      	ldr	r3, [r7, #12]
 8010652:	88fa      	ldrh	r2, [r7, #6]
 8010654:	825a      	strh	r2, [r3, #18]
  mib2_udp_bind(pcb);
  /* pcb not active yet? */
  if (rebind == 0) {
 8010656:	7cfb      	ldrb	r3, [r7, #19]
 8010658:	2b00      	cmp	r3, #0
 801065a:	d106      	bne.n	801066a <udp_bind+0xce>
    /* place the PCB on the active list if not already there */
    pcb->next = udp_pcbs;
 801065c:	4b06      	ldr	r3, [pc, #24]	; (8010678 <udp_bind+0xdc>)
 801065e:	681a      	ldr	r2, [r3, #0]
 8010660:	68fb      	ldr	r3, [r7, #12]
 8010662:	60da      	str	r2, [r3, #12]
    udp_pcbs = pcb;
 8010664:	4a04      	ldr	r2, [pc, #16]	; (8010678 <udp_bind+0xdc>)
 8010666:	68fb      	ldr	r3, [r7, #12]
 8010668:	6013      	str	r3, [r2, #0]
  }
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("udp_bind: bound to "));
  ip_addr_debug_print(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, &pcb->local_ip);
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, (", port %"U16_F")\n", pcb->local_port));
  return ERR_OK;
 801066a:	2300      	movs	r3, #0
}
 801066c:	4618      	mov	r0, r3
 801066e:	3718      	adds	r7, #24
 8010670:	46bd      	mov	sp, r7
 8010672:	bd80      	pop	{r7, pc}
 8010674:	0801c160 	.word	0x0801c160
 8010678:	2400f300 	.word	0x2400f300

0801067c <udp_connect>:
 *
 * @see udp_disconnect()
 */
err_t
udp_connect(struct udp_pcb *pcb, const ip_addr_t *ipaddr, u16_t port)
{
 801067c:	b580      	push	{r7, lr}
 801067e:	b086      	sub	sp, #24
 8010680:	af00      	add	r7, sp, #0
 8010682:	60f8      	str	r0, [r7, #12]
 8010684:	60b9      	str	r1, [r7, #8]
 8010686:	4613      	mov	r3, r2
 8010688:	80fb      	strh	r3, [r7, #6]
  struct udp_pcb *ipcb;

  if ((pcb == NULL) || (ipaddr == NULL)) {
 801068a:	68fb      	ldr	r3, [r7, #12]
 801068c:	2b00      	cmp	r3, #0
 801068e:	d002      	beq.n	8010696 <udp_connect+0x1a>
 8010690:	68bb      	ldr	r3, [r7, #8]
 8010692:	2b00      	cmp	r3, #0
 8010694:	d102      	bne.n	801069c <udp_connect+0x20>
    return ERR_VAL;
 8010696:	f06f 0305 	mvn.w	r3, #5
 801069a:	e03e      	b.n	801071a <udp_connect+0x9e>
  }

  if (pcb->local_port == 0) {
 801069c:	68fb      	ldr	r3, [r7, #12]
 801069e:	8a5b      	ldrh	r3, [r3, #18]
 80106a0:	2b00      	cmp	r3, #0
 80106a2:	d10f      	bne.n	80106c4 <udp_connect+0x48>
    err_t err = udp_bind(pcb, &pcb->local_ip, pcb->local_port);
 80106a4:	68f9      	ldr	r1, [r7, #12]
 80106a6:	68fb      	ldr	r3, [r7, #12]
 80106a8:	8a5b      	ldrh	r3, [r3, #18]
 80106aa:	461a      	mov	r2, r3
 80106ac:	68f8      	ldr	r0, [r7, #12]
 80106ae:	f7ff ff75 	bl	801059c <udp_bind>
 80106b2:	4603      	mov	r3, r0
 80106b4:	74fb      	strb	r3, [r7, #19]
    if (err != ERR_OK) {
 80106b6:	f997 3013 	ldrsb.w	r3, [r7, #19]
 80106ba:	2b00      	cmp	r3, #0
 80106bc:	d002      	beq.n	80106c4 <udp_connect+0x48>
      return err;
 80106be:	f997 3013 	ldrsb.w	r3, [r7, #19]
 80106c2:	e02a      	b.n	801071a <udp_connect+0x9e>
    }
  }

  ip_addr_set_ipaddr(&pcb->remote_ip, ipaddr);
 80106c4:	68bb      	ldr	r3, [r7, #8]
 80106c6:	2b00      	cmp	r3, #0
 80106c8:	d002      	beq.n	80106d0 <udp_connect+0x54>
 80106ca:	68bb      	ldr	r3, [r7, #8]
 80106cc:	681b      	ldr	r3, [r3, #0]
 80106ce:	e000      	b.n	80106d2 <udp_connect+0x56>
 80106d0:	2300      	movs	r3, #0
 80106d2:	68fa      	ldr	r2, [r7, #12]
 80106d4:	6053      	str	r3, [r2, #4]
  pcb->remote_port = port;
 80106d6:	68fb      	ldr	r3, [r7, #12]
 80106d8:	88fa      	ldrh	r2, [r7, #6]
 80106da:	829a      	strh	r2, [r3, #20]
  pcb->flags |= UDP_FLAGS_CONNECTED;
 80106dc:	68fb      	ldr	r3, [r7, #12]
 80106de:	7c1b      	ldrb	r3, [r3, #16]
 80106e0:	f043 0304 	orr.w	r3, r3, #4
 80106e4:	b2da      	uxtb	r2, r3
 80106e6:	68fb      	ldr	r3, [r7, #12]
 80106e8:	741a      	strb	r2, [r3, #16]
  ip_addr_debug_print(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE,
                      &pcb->remote_ip);
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, (", port %"U16_F")\n", pcb->remote_port));

  /* Insert UDP PCB into the list of active UDP PCBs. */
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 80106ea:	4b0e      	ldr	r3, [pc, #56]	; (8010724 <udp_connect+0xa8>)
 80106ec:	681b      	ldr	r3, [r3, #0]
 80106ee:	617b      	str	r3, [r7, #20]
 80106f0:	e008      	b.n	8010704 <udp_connect+0x88>
    if (pcb == ipcb) {
 80106f2:	68fa      	ldr	r2, [r7, #12]
 80106f4:	697b      	ldr	r3, [r7, #20]
 80106f6:	429a      	cmp	r2, r3
 80106f8:	d101      	bne.n	80106fe <udp_connect+0x82>
      /* already on the list, just return */
      return ERR_OK;
 80106fa:	2300      	movs	r3, #0
 80106fc:	e00d      	b.n	801071a <udp_connect+0x9e>
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 80106fe:	697b      	ldr	r3, [r7, #20]
 8010700:	68db      	ldr	r3, [r3, #12]
 8010702:	617b      	str	r3, [r7, #20]
 8010704:	697b      	ldr	r3, [r7, #20]
 8010706:	2b00      	cmp	r3, #0
 8010708:	d1f3      	bne.n	80106f2 <udp_connect+0x76>
    }
  }
  /* PCB not yet on the list, add PCB now */
  pcb->next = udp_pcbs;
 801070a:	4b06      	ldr	r3, [pc, #24]	; (8010724 <udp_connect+0xa8>)
 801070c:	681a      	ldr	r2, [r3, #0]
 801070e:	68fb      	ldr	r3, [r7, #12]
 8010710:	60da      	str	r2, [r3, #12]
  udp_pcbs = pcb;
 8010712:	4a04      	ldr	r2, [pc, #16]	; (8010724 <udp_connect+0xa8>)
 8010714:	68fb      	ldr	r3, [r7, #12]
 8010716:	6013      	str	r3, [r2, #0]
  return ERR_OK;
 8010718:	2300      	movs	r3, #0
}
 801071a:	4618      	mov	r0, r3
 801071c:	3718      	adds	r7, #24
 801071e:	46bd      	mov	sp, r7
 8010720:	bd80      	pop	{r7, pc}
 8010722:	bf00      	nop
 8010724:	2400f300 	.word	0x2400f300

08010728 <udp_disconnect>:
 *
 * @param pcb the udp pcb to disconnect.
 */
void
udp_disconnect(struct udp_pcb *pcb)
{
 8010728:	b480      	push	{r7}
 801072a:	b083      	sub	sp, #12
 801072c:	af00      	add	r7, sp, #0
 801072e:	6078      	str	r0, [r7, #4]
#if LWIP_IPV4 && LWIP_IPV6
  if (IP_IS_ANY_TYPE_VAL(pcb->local_ip)) {
    ip_addr_copy(pcb->remote_ip, *IP_ANY_TYPE);
  } else {
#endif
    ip_addr_set_any(IP_IS_V6_VAL(pcb->remote_ip), &pcb->remote_ip);
 8010730:	687b      	ldr	r3, [r7, #4]
 8010732:	2200      	movs	r2, #0
 8010734:	605a      	str	r2, [r3, #4]
#if LWIP_IPV4 && LWIP_IPV6
  }
#endif
  pcb->remote_port = 0;
 8010736:	687b      	ldr	r3, [r7, #4]
 8010738:	2200      	movs	r2, #0
 801073a:	829a      	strh	r2, [r3, #20]
  /* mark PCB as unconnected */
  pcb->flags &= ~UDP_FLAGS_CONNECTED;
 801073c:	687b      	ldr	r3, [r7, #4]
 801073e:	7c1b      	ldrb	r3, [r3, #16]
 8010740:	f023 0304 	bic.w	r3, r3, #4
 8010744:	b2da      	uxtb	r2, r3
 8010746:	687b      	ldr	r3, [r7, #4]
 8010748:	741a      	strb	r2, [r3, #16]
}
 801074a:	bf00      	nop
 801074c:	370c      	adds	r7, #12
 801074e:	46bd      	mov	sp, r7
 8010750:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010754:	4770      	bx	lr

08010756 <udp_recv>:
 * @param recv function pointer of the callback function
 * @param recv_arg additional argument to pass to the callback function
 */
void
udp_recv(struct udp_pcb *pcb, udp_recv_fn recv, void *recv_arg)
{
 8010756:	b480      	push	{r7}
 8010758:	b085      	sub	sp, #20
 801075a:	af00      	add	r7, sp, #0
 801075c:	60f8      	str	r0, [r7, #12]
 801075e:	60b9      	str	r1, [r7, #8]
 8010760:	607a      	str	r2, [r7, #4]
  /* remember recv() callback and user data */
  pcb->recv = recv;
 8010762:	68fb      	ldr	r3, [r7, #12]
 8010764:	68ba      	ldr	r2, [r7, #8]
 8010766:	619a      	str	r2, [r3, #24]
  pcb->recv_arg = recv_arg;
 8010768:	68fb      	ldr	r3, [r7, #12]
 801076a:	687a      	ldr	r2, [r7, #4]
 801076c:	61da      	str	r2, [r3, #28]
}
 801076e:	bf00      	nop
 8010770:	3714      	adds	r7, #20
 8010772:	46bd      	mov	sp, r7
 8010774:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010778:	4770      	bx	lr
	...

0801077c <udp_remove>:
 *
 * @see udp_new()
 */
void
udp_remove(struct udp_pcb *pcb)
{
 801077c:	b580      	push	{r7, lr}
 801077e:	b084      	sub	sp, #16
 8010780:	af00      	add	r7, sp, #0
 8010782:	6078      	str	r0, [r7, #4]
  struct udp_pcb *pcb2;

  mib2_udp_unbind(pcb);
  /* pcb to be removed is first in list? */
  if (udp_pcbs == pcb) {
 8010784:	4b15      	ldr	r3, [pc, #84]	; (80107dc <udp_remove+0x60>)
 8010786:	681b      	ldr	r3, [r3, #0]
 8010788:	687a      	ldr	r2, [r7, #4]
 801078a:	429a      	cmp	r2, r3
 801078c:	d105      	bne.n	801079a <udp_remove+0x1e>
    /* make list start at 2nd pcb */
    udp_pcbs = udp_pcbs->next;
 801078e:	4b13      	ldr	r3, [pc, #76]	; (80107dc <udp_remove+0x60>)
 8010790:	681b      	ldr	r3, [r3, #0]
 8010792:	68db      	ldr	r3, [r3, #12]
 8010794:	4a11      	ldr	r2, [pc, #68]	; (80107dc <udp_remove+0x60>)
 8010796:	6013      	str	r3, [r2, #0]
 8010798:	e017      	b.n	80107ca <udp_remove+0x4e>
    /* pcb not 1st in list */
  } else {
    for (pcb2 = udp_pcbs; pcb2 != NULL; pcb2 = pcb2->next) {
 801079a:	4b10      	ldr	r3, [pc, #64]	; (80107dc <udp_remove+0x60>)
 801079c:	681b      	ldr	r3, [r3, #0]
 801079e:	60fb      	str	r3, [r7, #12]
 80107a0:	e010      	b.n	80107c4 <udp_remove+0x48>
      /* find pcb in udp_pcbs list */
      if (pcb2->next != NULL && pcb2->next == pcb) {
 80107a2:	68fb      	ldr	r3, [r7, #12]
 80107a4:	68db      	ldr	r3, [r3, #12]
 80107a6:	2b00      	cmp	r3, #0
 80107a8:	d009      	beq.n	80107be <udp_remove+0x42>
 80107aa:	68fb      	ldr	r3, [r7, #12]
 80107ac:	68db      	ldr	r3, [r3, #12]
 80107ae:	687a      	ldr	r2, [r7, #4]
 80107b0:	429a      	cmp	r2, r3
 80107b2:	d104      	bne.n	80107be <udp_remove+0x42>
        /* remove pcb from list */
        pcb2->next = pcb->next;
 80107b4:	687b      	ldr	r3, [r7, #4]
 80107b6:	68da      	ldr	r2, [r3, #12]
 80107b8:	68fb      	ldr	r3, [r7, #12]
 80107ba:	60da      	str	r2, [r3, #12]
        break;
 80107bc:	e005      	b.n	80107ca <udp_remove+0x4e>
    for (pcb2 = udp_pcbs; pcb2 != NULL; pcb2 = pcb2->next) {
 80107be:	68fb      	ldr	r3, [r7, #12]
 80107c0:	68db      	ldr	r3, [r3, #12]
 80107c2:	60fb      	str	r3, [r7, #12]
 80107c4:	68fb      	ldr	r3, [r7, #12]
 80107c6:	2b00      	cmp	r3, #0
 80107c8:	d1eb      	bne.n	80107a2 <udp_remove+0x26>
      }
    }
  }
  memp_free(MEMP_UDP_PCB, pcb);
 80107ca:	6879      	ldr	r1, [r7, #4]
 80107cc:	2000      	movs	r0, #0
 80107ce:	f7f9 f8c5 	bl	800995c <memp_free>
}
 80107d2:	bf00      	nop
 80107d4:	3710      	adds	r7, #16
 80107d6:	46bd      	mov	sp, r7
 80107d8:	bd80      	pop	{r7, pc}
 80107da:	bf00      	nop
 80107dc:	2400f300 	.word	0x2400f300

080107e0 <udp_new>:
 *
 * @see udp_remove()
 */
struct udp_pcb *
udp_new(void)
{
 80107e0:	b580      	push	{r7, lr}
 80107e2:	b082      	sub	sp, #8
 80107e4:	af00      	add	r7, sp, #0
  struct udp_pcb *pcb;
  pcb = (struct udp_pcb *)memp_malloc(MEMP_UDP_PCB);
 80107e6:	2000      	movs	r0, #0
 80107e8:	f7f9 f842 	bl	8009870 <memp_malloc>
 80107ec:	6078      	str	r0, [r7, #4]
  /* could allocate UDP PCB? */
  if (pcb != NULL) {
 80107ee:	687b      	ldr	r3, [r7, #4]
 80107f0:	2b00      	cmp	r3, #0
 80107f2:	d007      	beq.n	8010804 <udp_new+0x24>
    /* UDP Lite: by initializing to all zeroes, chksum_len is set to 0
     * which means checksum is generated over the whole datagram per default
     * (recommended as default by RFC 3828). */
    /* initialize PCB to all zeroes */
    memset(pcb, 0, sizeof(struct udp_pcb));
 80107f4:	2220      	movs	r2, #32
 80107f6:	2100      	movs	r1, #0
 80107f8:	6878      	ldr	r0, [r7, #4]
 80107fa:	f005 fa67 	bl	8015ccc <memset>
    pcb->ttl = UDP_TTL;
 80107fe:	687b      	ldr	r3, [r7, #4]
 8010800:	22ff      	movs	r2, #255	; 0xff
 8010802:	729a      	strb	r2, [r3, #10]
#if LWIP_MULTICAST_TX_OPTIONS
    udp_set_multicast_ttl(pcb, UDP_TTL);
#endif /* LWIP_MULTICAST_TX_OPTIONS */
  }
  return pcb;
 8010804:	687b      	ldr	r3, [r7, #4]
}
 8010806:	4618      	mov	r0, r3
 8010808:	3708      	adds	r7, #8
 801080a:	46bd      	mov	sp, r7
 801080c:	bd80      	pop	{r7, pc}

0801080e <udp_new_ip_type>:
 *
 * @see udp_remove()
 */
struct udp_pcb *
udp_new_ip_type(u8_t type)
{
 801080e:	b580      	push	{r7, lr}
 8010810:	b084      	sub	sp, #16
 8010812:	af00      	add	r7, sp, #0
 8010814:	4603      	mov	r3, r0
 8010816:	71fb      	strb	r3, [r7, #7]
  struct udp_pcb *pcb;
  pcb = udp_new();
 8010818:	f7ff ffe2 	bl	80107e0 <udp_new>
 801081c:	60f8      	str	r0, [r7, #12]
    IP_SET_TYPE_VAL(pcb->remote_ip, type);
  }
#else
  LWIP_UNUSED_ARG(type);
#endif /* LWIP_IPV4 && LWIP_IPV6 */
  return pcb;
 801081e:	68fb      	ldr	r3, [r7, #12]
}
 8010820:	4618      	mov	r0, r3
 8010822:	3710      	adds	r7, #16
 8010824:	46bd      	mov	sp, r7
 8010826:	bd80      	pop	{r7, pc}

08010828 <udp_netif_ip_addr_changed>:
 *
 * @param old_addr IP address of the netif before change
 * @param new_addr IP address of the netif after change
 */
void udp_netif_ip_addr_changed(const ip_addr_t* old_addr, const ip_addr_t* new_addr)
{
 8010828:	b480      	push	{r7}
 801082a:	b085      	sub	sp, #20
 801082c:	af00      	add	r7, sp, #0
 801082e:	6078      	str	r0, [r7, #4]
 8010830:	6039      	str	r1, [r7, #0]
  struct udp_pcb* upcb;

  if (!ip_addr_isany(old_addr) && !ip_addr_isany(new_addr)) {
 8010832:	687b      	ldr	r3, [r7, #4]
 8010834:	2b00      	cmp	r3, #0
 8010836:	d01e      	beq.n	8010876 <udp_netif_ip_addr_changed+0x4e>
 8010838:	687b      	ldr	r3, [r7, #4]
 801083a:	681b      	ldr	r3, [r3, #0]
 801083c:	2b00      	cmp	r3, #0
 801083e:	d01a      	beq.n	8010876 <udp_netif_ip_addr_changed+0x4e>
 8010840:	683b      	ldr	r3, [r7, #0]
 8010842:	2b00      	cmp	r3, #0
 8010844:	d017      	beq.n	8010876 <udp_netif_ip_addr_changed+0x4e>
 8010846:	683b      	ldr	r3, [r7, #0]
 8010848:	681b      	ldr	r3, [r3, #0]
 801084a:	2b00      	cmp	r3, #0
 801084c:	d013      	beq.n	8010876 <udp_netif_ip_addr_changed+0x4e>
    for (upcb = udp_pcbs; upcb != NULL; upcb = upcb->next) {
 801084e:	4b0d      	ldr	r3, [pc, #52]	; (8010884 <udp_netif_ip_addr_changed+0x5c>)
 8010850:	681b      	ldr	r3, [r3, #0]
 8010852:	60fb      	str	r3, [r7, #12]
 8010854:	e00c      	b.n	8010870 <udp_netif_ip_addr_changed+0x48>
      /* PCB bound to current local interface address? */
      if (ip_addr_cmp(&upcb->local_ip, old_addr)) {
 8010856:	68fb      	ldr	r3, [r7, #12]
 8010858:	681a      	ldr	r2, [r3, #0]
 801085a:	687b      	ldr	r3, [r7, #4]
 801085c:	681b      	ldr	r3, [r3, #0]
 801085e:	429a      	cmp	r2, r3
 8010860:	d103      	bne.n	801086a <udp_netif_ip_addr_changed+0x42>
        /* The PCB is bound to the old ipaddr and
         * is set to bound to the new one instead */
        ip_addr_copy(upcb->local_ip, *new_addr);
 8010862:	683b      	ldr	r3, [r7, #0]
 8010864:	681a      	ldr	r2, [r3, #0]
 8010866:	68fb      	ldr	r3, [r7, #12]
 8010868:	601a      	str	r2, [r3, #0]
    for (upcb = udp_pcbs; upcb != NULL; upcb = upcb->next) {
 801086a:	68fb      	ldr	r3, [r7, #12]
 801086c:	68db      	ldr	r3, [r3, #12]
 801086e:	60fb      	str	r3, [r7, #12]
 8010870:	68fb      	ldr	r3, [r7, #12]
 8010872:	2b00      	cmp	r3, #0
 8010874:	d1ef      	bne.n	8010856 <udp_netif_ip_addr_changed+0x2e>
      }
    }
  }
}
 8010876:	bf00      	nop
 8010878:	3714      	adds	r7, #20
 801087a:	46bd      	mov	sp, r7
 801087c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010880:	4770      	bx	lr
 8010882:	bf00      	nop
 8010884:	2400f300 	.word	0x2400f300

08010888 <etharp_free_entry>:
#endif /* ARP_QUEUEING */

/** Clean up ARP table entries */
static void
etharp_free_entry(int i)
{
 8010888:	b580      	push	{r7, lr}
 801088a:	b082      	sub	sp, #8
 801088c:	af00      	add	r7, sp, #0
 801088e:	6078      	str	r0, [r7, #4]
  /* remove from SNMP ARP index tree */
  mib2_remove_arp_entry(arp_table[i].netif, &arp_table[i].ipaddr);
  /* and empty packet queue */
  if (arp_table[i].q != NULL) {
 8010890:	4915      	ldr	r1, [pc, #84]	; (80108e8 <etharp_free_entry+0x60>)
 8010892:	687a      	ldr	r2, [r7, #4]
 8010894:	4613      	mov	r3, r2
 8010896:	005b      	lsls	r3, r3, #1
 8010898:	4413      	add	r3, r2
 801089a:	00db      	lsls	r3, r3, #3
 801089c:	440b      	add	r3, r1
 801089e:	681b      	ldr	r3, [r3, #0]
 80108a0:	2b00      	cmp	r3, #0
 80108a2:	d013      	beq.n	80108cc <etharp_free_entry+0x44>
    /* remove all queued packets */
    LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_free_entry: freeing entry %"U16_F", packet queue %p.\n", (u16_t)i, (void *)(arp_table[i].q)));
    free_etharp_q(arp_table[i].q);
 80108a4:	4910      	ldr	r1, [pc, #64]	; (80108e8 <etharp_free_entry+0x60>)
 80108a6:	687a      	ldr	r2, [r7, #4]
 80108a8:	4613      	mov	r3, r2
 80108aa:	005b      	lsls	r3, r3, #1
 80108ac:	4413      	add	r3, r2
 80108ae:	00db      	lsls	r3, r3, #3
 80108b0:	440b      	add	r3, r1
 80108b2:	681b      	ldr	r3, [r3, #0]
 80108b4:	4618      	mov	r0, r3
 80108b6:	f7f9 fdfb 	bl	800a4b0 <pbuf_free>
    arp_table[i].q = NULL;
 80108ba:	490b      	ldr	r1, [pc, #44]	; (80108e8 <etharp_free_entry+0x60>)
 80108bc:	687a      	ldr	r2, [r7, #4]
 80108be:	4613      	mov	r3, r2
 80108c0:	005b      	lsls	r3, r3, #1
 80108c2:	4413      	add	r3, r2
 80108c4:	00db      	lsls	r3, r3, #3
 80108c6:	440b      	add	r3, r1
 80108c8:	2200      	movs	r2, #0
 80108ca:	601a      	str	r2, [r3, #0]
  }
  /* recycle entry for re-use */
  arp_table[i].state = ETHARP_STATE_EMPTY;
 80108cc:	4906      	ldr	r1, [pc, #24]	; (80108e8 <etharp_free_entry+0x60>)
 80108ce:	687a      	ldr	r2, [r7, #4]
 80108d0:	4613      	mov	r3, r2
 80108d2:	005b      	lsls	r3, r3, #1
 80108d4:	4413      	add	r3, r2
 80108d6:	00db      	lsls	r3, r3, #3
 80108d8:	440b      	add	r3, r1
 80108da:	3314      	adds	r3, #20
 80108dc:	2200      	movs	r2, #0
 80108de:	701a      	strb	r2, [r3, #0]
  arp_table[i].ctime = 0;
  arp_table[i].netif = NULL;
  ip4_addr_set_zero(&arp_table[i].ipaddr);
  arp_table[i].ethaddr = ethzero;
#endif /* LWIP_DEBUG */
}
 80108e0:	bf00      	nop
 80108e2:	3708      	adds	r7, #8
 80108e4:	46bd      	mov	sp, r7
 80108e6:	bd80      	pop	{r7, pc}
 80108e8:	2400864c 	.word	0x2400864c

080108ec <etharp_tmr>:
 * This function should be called every ARP_TMR_INTERVAL milliseconds (1 second),
 * in order to expire entries in the ARP table.
 */
void
etharp_tmr(void)
{
 80108ec:	b580      	push	{r7, lr}
 80108ee:	b082      	sub	sp, #8
 80108f0:	af00      	add	r7, sp, #0
  u8_t i;

  LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_timer\n"));
  /* remove expired entries from the ARP table */
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 80108f2:	2300      	movs	r3, #0
 80108f4:	71fb      	strb	r3, [r7, #7]
 80108f6:	e096      	b.n	8010a26 <etharp_tmr+0x13a>
    u8_t state = arp_table[i].state;
 80108f8:	79fa      	ldrb	r2, [r7, #7]
 80108fa:	494f      	ldr	r1, [pc, #316]	; (8010a38 <etharp_tmr+0x14c>)
 80108fc:	4613      	mov	r3, r2
 80108fe:	005b      	lsls	r3, r3, #1
 8010900:	4413      	add	r3, r2
 8010902:	00db      	lsls	r3, r3, #3
 8010904:	440b      	add	r3, r1
 8010906:	3314      	adds	r3, #20
 8010908:	781b      	ldrb	r3, [r3, #0]
 801090a:	71bb      	strb	r3, [r7, #6]
    if (state != ETHARP_STATE_EMPTY
 801090c:	79bb      	ldrb	r3, [r7, #6]
 801090e:	2b00      	cmp	r3, #0
 8010910:	f000 8086 	beq.w	8010a20 <etharp_tmr+0x134>
#if ETHARP_SUPPORT_STATIC_ENTRIES
      && (state != ETHARP_STATE_STATIC)
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
      ) {
      arp_table[i].ctime++;
 8010914:	79fa      	ldrb	r2, [r7, #7]
 8010916:	4948      	ldr	r1, [pc, #288]	; (8010a38 <etharp_tmr+0x14c>)
 8010918:	4613      	mov	r3, r2
 801091a:	005b      	lsls	r3, r3, #1
 801091c:	4413      	add	r3, r2
 801091e:	00db      	lsls	r3, r3, #3
 8010920:	440b      	add	r3, r1
 8010922:	3312      	adds	r3, #18
 8010924:	881b      	ldrh	r3, [r3, #0]
 8010926:	3301      	adds	r3, #1
 8010928:	b298      	uxth	r0, r3
 801092a:	4943      	ldr	r1, [pc, #268]	; (8010a38 <etharp_tmr+0x14c>)
 801092c:	4613      	mov	r3, r2
 801092e:	005b      	lsls	r3, r3, #1
 8010930:	4413      	add	r3, r2
 8010932:	00db      	lsls	r3, r3, #3
 8010934:	440b      	add	r3, r1
 8010936:	3312      	adds	r3, #18
 8010938:	4602      	mov	r2, r0
 801093a:	801a      	strh	r2, [r3, #0]
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 801093c:	79fa      	ldrb	r2, [r7, #7]
 801093e:	493e      	ldr	r1, [pc, #248]	; (8010a38 <etharp_tmr+0x14c>)
 8010940:	4613      	mov	r3, r2
 8010942:	005b      	lsls	r3, r3, #1
 8010944:	4413      	add	r3, r2
 8010946:	00db      	lsls	r3, r3, #3
 8010948:	440b      	add	r3, r1
 801094a:	3312      	adds	r3, #18
 801094c:	881b      	ldrh	r3, [r3, #0]
 801094e:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 8010952:	d215      	bcs.n	8010980 <etharp_tmr+0x94>
          ((arp_table[i].state == ETHARP_STATE_PENDING)  &&
 8010954:	79fa      	ldrb	r2, [r7, #7]
 8010956:	4938      	ldr	r1, [pc, #224]	; (8010a38 <etharp_tmr+0x14c>)
 8010958:	4613      	mov	r3, r2
 801095a:	005b      	lsls	r3, r3, #1
 801095c:	4413      	add	r3, r2
 801095e:	00db      	lsls	r3, r3, #3
 8010960:	440b      	add	r3, r1
 8010962:	3314      	adds	r3, #20
 8010964:	781b      	ldrb	r3, [r3, #0]
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 8010966:	2b01      	cmp	r3, #1
 8010968:	d10f      	bne.n	801098a <etharp_tmr+0x9e>
           (arp_table[i].ctime >= ARP_MAXPENDING))) {
 801096a:	79fa      	ldrb	r2, [r7, #7]
 801096c:	4932      	ldr	r1, [pc, #200]	; (8010a38 <etharp_tmr+0x14c>)
 801096e:	4613      	mov	r3, r2
 8010970:	005b      	lsls	r3, r3, #1
 8010972:	4413      	add	r3, r2
 8010974:	00db      	lsls	r3, r3, #3
 8010976:	440b      	add	r3, r1
 8010978:	3312      	adds	r3, #18
 801097a:	881b      	ldrh	r3, [r3, #0]
          ((arp_table[i].state == ETHARP_STATE_PENDING)  &&
 801097c:	2b04      	cmp	r3, #4
 801097e:	d904      	bls.n	801098a <etharp_tmr+0x9e>
        /* pending or stable entry has become old! */
        LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_timer: expired %s entry %"U16_F".\n",
             arp_table[i].state >= ETHARP_STATE_STABLE ? "stable" : "pending", (u16_t)i));
        /* clean up entries that have just been expired */
        etharp_free_entry(i);
 8010980:	79fb      	ldrb	r3, [r7, #7]
 8010982:	4618      	mov	r0, r3
 8010984:	f7ff ff80 	bl	8010888 <etharp_free_entry>
 8010988:	e04a      	b.n	8010a20 <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_1) {
 801098a:	79fa      	ldrb	r2, [r7, #7]
 801098c:	492a      	ldr	r1, [pc, #168]	; (8010a38 <etharp_tmr+0x14c>)
 801098e:	4613      	mov	r3, r2
 8010990:	005b      	lsls	r3, r3, #1
 8010992:	4413      	add	r3, r2
 8010994:	00db      	lsls	r3, r3, #3
 8010996:	440b      	add	r3, r1
 8010998:	3314      	adds	r3, #20
 801099a:	781b      	ldrb	r3, [r3, #0]
 801099c:	2b03      	cmp	r3, #3
 801099e:	d10a      	bne.n	80109b6 <etharp_tmr+0xca>
        /* Don't send more than one request every 2 seconds. */
        arp_table[i].state = ETHARP_STATE_STABLE_REREQUESTING_2;
 80109a0:	79fa      	ldrb	r2, [r7, #7]
 80109a2:	4925      	ldr	r1, [pc, #148]	; (8010a38 <etharp_tmr+0x14c>)
 80109a4:	4613      	mov	r3, r2
 80109a6:	005b      	lsls	r3, r3, #1
 80109a8:	4413      	add	r3, r2
 80109aa:	00db      	lsls	r3, r3, #3
 80109ac:	440b      	add	r3, r1
 80109ae:	3314      	adds	r3, #20
 80109b0:	2204      	movs	r2, #4
 80109b2:	701a      	strb	r2, [r3, #0]
 80109b4:	e034      	b.n	8010a20 <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_2) {
 80109b6:	79fa      	ldrb	r2, [r7, #7]
 80109b8:	491f      	ldr	r1, [pc, #124]	; (8010a38 <etharp_tmr+0x14c>)
 80109ba:	4613      	mov	r3, r2
 80109bc:	005b      	lsls	r3, r3, #1
 80109be:	4413      	add	r3, r2
 80109c0:	00db      	lsls	r3, r3, #3
 80109c2:	440b      	add	r3, r1
 80109c4:	3314      	adds	r3, #20
 80109c6:	781b      	ldrb	r3, [r3, #0]
 80109c8:	2b04      	cmp	r3, #4
 80109ca:	d10a      	bne.n	80109e2 <etharp_tmr+0xf6>
        /* Reset state to stable, so that the next transmitted packet will
           re-send an ARP request. */
        arp_table[i].state = ETHARP_STATE_STABLE;
 80109cc:	79fa      	ldrb	r2, [r7, #7]
 80109ce:	491a      	ldr	r1, [pc, #104]	; (8010a38 <etharp_tmr+0x14c>)
 80109d0:	4613      	mov	r3, r2
 80109d2:	005b      	lsls	r3, r3, #1
 80109d4:	4413      	add	r3, r2
 80109d6:	00db      	lsls	r3, r3, #3
 80109d8:	440b      	add	r3, r1
 80109da:	3314      	adds	r3, #20
 80109dc:	2202      	movs	r2, #2
 80109de:	701a      	strb	r2, [r3, #0]
 80109e0:	e01e      	b.n	8010a20 <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_PENDING) {
 80109e2:	79fa      	ldrb	r2, [r7, #7]
 80109e4:	4914      	ldr	r1, [pc, #80]	; (8010a38 <etharp_tmr+0x14c>)
 80109e6:	4613      	mov	r3, r2
 80109e8:	005b      	lsls	r3, r3, #1
 80109ea:	4413      	add	r3, r2
 80109ec:	00db      	lsls	r3, r3, #3
 80109ee:	440b      	add	r3, r1
 80109f0:	3314      	adds	r3, #20
 80109f2:	781b      	ldrb	r3, [r3, #0]
 80109f4:	2b01      	cmp	r3, #1
 80109f6:	d113      	bne.n	8010a20 <etharp_tmr+0x134>
        /* still pending, resend an ARP query */
        etharp_request(arp_table[i].netif, &arp_table[i].ipaddr);
 80109f8:	79fa      	ldrb	r2, [r7, #7]
 80109fa:	490f      	ldr	r1, [pc, #60]	; (8010a38 <etharp_tmr+0x14c>)
 80109fc:	4613      	mov	r3, r2
 80109fe:	005b      	lsls	r3, r3, #1
 8010a00:	4413      	add	r3, r2
 8010a02:	00db      	lsls	r3, r3, #3
 8010a04:	440b      	add	r3, r1
 8010a06:	3308      	adds	r3, #8
 8010a08:	6818      	ldr	r0, [r3, #0]
 8010a0a:	79fa      	ldrb	r2, [r7, #7]
 8010a0c:	4613      	mov	r3, r2
 8010a0e:	005b      	lsls	r3, r3, #1
 8010a10:	4413      	add	r3, r2
 8010a12:	00db      	lsls	r3, r3, #3
 8010a14:	4a08      	ldr	r2, [pc, #32]	; (8010a38 <etharp_tmr+0x14c>)
 8010a16:	4413      	add	r3, r2
 8010a18:	3304      	adds	r3, #4
 8010a1a:	4619      	mov	r1, r3
 8010a1c:	f000 fe6e 	bl	80116fc <etharp_request>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8010a20:	79fb      	ldrb	r3, [r7, #7]
 8010a22:	3301      	adds	r3, #1
 8010a24:	71fb      	strb	r3, [r7, #7]
 8010a26:	79fb      	ldrb	r3, [r7, #7]
 8010a28:	2b09      	cmp	r3, #9
 8010a2a:	f67f af65 	bls.w	80108f8 <etharp_tmr+0xc>
      }
    }
  }
}
 8010a2e:	bf00      	nop
 8010a30:	3708      	adds	r7, #8
 8010a32:	46bd      	mov	sp, r7
 8010a34:	bd80      	pop	{r7, pc}
 8010a36:	bf00      	nop
 8010a38:	2400864c 	.word	0x2400864c

08010a3c <etharp_find_entry>:
 * @return The ARP entry index that matched or is created, ERR_MEM if no
 * entry is found or could be recycled.
 */
static s8_t
etharp_find_entry(const ip4_addr_t *ipaddr, u8_t flags, struct netif* netif)
{
 8010a3c:	b580      	push	{r7, lr}
 8010a3e:	b088      	sub	sp, #32
 8010a40:	af00      	add	r7, sp, #0
 8010a42:	60f8      	str	r0, [r7, #12]
 8010a44:	460b      	mov	r3, r1
 8010a46:	607a      	str	r2, [r7, #4]
 8010a48:	72fb      	strb	r3, [r7, #11]
  s8_t old_pending = ARP_TABLE_SIZE, old_stable = ARP_TABLE_SIZE;
 8010a4a:	230a      	movs	r3, #10
 8010a4c:	77fb      	strb	r3, [r7, #31]
 8010a4e:	230a      	movs	r3, #10
 8010a50:	77bb      	strb	r3, [r7, #30]
  s8_t empty = ARP_TABLE_SIZE;
 8010a52:	230a      	movs	r3, #10
 8010a54:	777b      	strb	r3, [r7, #29]
  u8_t i = 0;
 8010a56:	2300      	movs	r3, #0
 8010a58:	773b      	strb	r3, [r7, #28]
  /* oldest entry with packets on queue */
  s8_t old_queue = ARP_TABLE_SIZE;
 8010a5a:	230a      	movs	r3, #10
 8010a5c:	76fb      	strb	r3, [r7, #27]
  /* its age */
  u16_t age_queue = 0, age_pending = 0, age_stable = 0;
 8010a5e:	2300      	movs	r3, #0
 8010a60:	833b      	strh	r3, [r7, #24]
 8010a62:	2300      	movs	r3, #0
 8010a64:	82fb      	strh	r3, [r7, #22]
 8010a66:	2300      	movs	r3, #0
 8010a68:	82bb      	strh	r3, [r7, #20]
   * 4) remember the oldest pending entry with queued packets (if any)
   * 5) search for a matching IP entry, either pending or stable
   *    until 5 matches, or all entries are searched for.
   */

  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8010a6a:	2300      	movs	r3, #0
 8010a6c:	773b      	strb	r3, [r7, #28]
 8010a6e:	e0a3      	b.n	8010bb8 <etharp_find_entry+0x17c>
    u8_t state = arp_table[i].state;
 8010a70:	7f3a      	ldrb	r2, [r7, #28]
 8010a72:	499d      	ldr	r1, [pc, #628]	; (8010ce8 <etharp_find_entry+0x2ac>)
 8010a74:	4613      	mov	r3, r2
 8010a76:	005b      	lsls	r3, r3, #1
 8010a78:	4413      	add	r3, r2
 8010a7a:	00db      	lsls	r3, r3, #3
 8010a7c:	440b      	add	r3, r1
 8010a7e:	3314      	adds	r3, #20
 8010a80:	781b      	ldrb	r3, [r3, #0]
 8010a82:	74fb      	strb	r3, [r7, #19]
    /* no empty entry found yet and now we do find one? */
    if ((empty == ARP_TABLE_SIZE) && (state == ETHARP_STATE_EMPTY)) {
 8010a84:	f997 301d 	ldrsb.w	r3, [r7, #29]
 8010a88:	2b0a      	cmp	r3, #10
 8010a8a:	d105      	bne.n	8010a98 <etharp_find_entry+0x5c>
 8010a8c:	7cfb      	ldrb	r3, [r7, #19]
 8010a8e:	2b00      	cmp	r3, #0
 8010a90:	d102      	bne.n	8010a98 <etharp_find_entry+0x5c>
      LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_find_entry: found empty entry %"U16_F"\n", (u16_t)i));
      /* remember first empty entry */
      empty = i;
 8010a92:	7f3b      	ldrb	r3, [r7, #28]
 8010a94:	777b      	strb	r3, [r7, #29]
 8010a96:	e08c      	b.n	8010bb2 <etharp_find_entry+0x176>
    } else if (state != ETHARP_STATE_EMPTY) {
 8010a98:	7cfb      	ldrb	r3, [r7, #19]
 8010a9a:	2b00      	cmp	r3, #0
 8010a9c:	f000 8089 	beq.w	8010bb2 <etharp_find_entry+0x176>
      LWIP_ASSERT("state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE",
 8010aa0:	7cfb      	ldrb	r3, [r7, #19]
 8010aa2:	2b01      	cmp	r3, #1
 8010aa4:	d009      	beq.n	8010aba <etharp_find_entry+0x7e>
 8010aa6:	7cfb      	ldrb	r3, [r7, #19]
 8010aa8:	2b01      	cmp	r3, #1
 8010aaa:	d806      	bhi.n	8010aba <etharp_find_entry+0x7e>
 8010aac:	4b8f      	ldr	r3, [pc, #572]	; (8010cec <etharp_find_entry+0x2b0>)
 8010aae:	f44f 7293 	mov.w	r2, #294	; 0x126
 8010ab2:	498f      	ldr	r1, [pc, #572]	; (8010cf0 <etharp_find_entry+0x2b4>)
 8010ab4:	488f      	ldr	r0, [pc, #572]	; (8010cf4 <etharp_find_entry+0x2b8>)
 8010ab6:	f005 f88d 	bl	8015bd4 <printf_>
        state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE);
      /* if given, does IP address match IP address in ARP entry? */
      if (ipaddr && ip4_addr_cmp(ipaddr, &arp_table[i].ipaddr)
 8010aba:	68fb      	ldr	r3, [r7, #12]
 8010abc:	2b00      	cmp	r3, #0
 8010abe:	d01e      	beq.n	8010afe <etharp_find_entry+0xc2>
 8010ac0:	68fb      	ldr	r3, [r7, #12]
 8010ac2:	6819      	ldr	r1, [r3, #0]
 8010ac4:	7f3a      	ldrb	r2, [r7, #28]
 8010ac6:	4888      	ldr	r0, [pc, #544]	; (8010ce8 <etharp_find_entry+0x2ac>)
 8010ac8:	4613      	mov	r3, r2
 8010aca:	005b      	lsls	r3, r3, #1
 8010acc:	4413      	add	r3, r2
 8010ace:	00db      	lsls	r3, r3, #3
 8010ad0:	4403      	add	r3, r0
 8010ad2:	3304      	adds	r3, #4
 8010ad4:	681b      	ldr	r3, [r3, #0]
 8010ad6:	4299      	cmp	r1, r3
 8010ad8:	d111      	bne.n	8010afe <etharp_find_entry+0xc2>
#if ETHARP_TABLE_MATCH_NETIF
          && ((netif == NULL) || (netif == arp_table[i].netif))
 8010ada:	687b      	ldr	r3, [r7, #4]
 8010adc:	2b00      	cmp	r3, #0
 8010ade:	d00b      	beq.n	8010af8 <etharp_find_entry+0xbc>
 8010ae0:	7f3a      	ldrb	r2, [r7, #28]
 8010ae2:	4981      	ldr	r1, [pc, #516]	; (8010ce8 <etharp_find_entry+0x2ac>)
 8010ae4:	4613      	mov	r3, r2
 8010ae6:	005b      	lsls	r3, r3, #1
 8010ae8:	4413      	add	r3, r2
 8010aea:	00db      	lsls	r3, r3, #3
 8010aec:	440b      	add	r3, r1
 8010aee:	3308      	adds	r3, #8
 8010af0:	681b      	ldr	r3, [r3, #0]
 8010af2:	687a      	ldr	r2, [r7, #4]
 8010af4:	429a      	cmp	r2, r3
 8010af6:	d102      	bne.n	8010afe <etharp_find_entry+0xc2>
#endif /* ETHARP_TABLE_MATCH_NETIF */
        ) {
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: found matching entry %"U16_F"\n", (u16_t)i));
        /* found exact IP address match, simply bail out */
        return i;
 8010af8:	f997 301c 	ldrsb.w	r3, [r7, #28]
 8010afc:	e0ef      	b.n	8010cde <etharp_find_entry+0x2a2>
      }
      /* pending entry? */
      if (state == ETHARP_STATE_PENDING) {
 8010afe:	7cfb      	ldrb	r3, [r7, #19]
 8010b00:	2b01      	cmp	r3, #1
 8010b02:	d13b      	bne.n	8010b7c <etharp_find_entry+0x140>
        /* pending with queued packets? */
        if (arp_table[i].q != NULL) {
 8010b04:	7f3a      	ldrb	r2, [r7, #28]
 8010b06:	4978      	ldr	r1, [pc, #480]	; (8010ce8 <etharp_find_entry+0x2ac>)
 8010b08:	4613      	mov	r3, r2
 8010b0a:	005b      	lsls	r3, r3, #1
 8010b0c:	4413      	add	r3, r2
 8010b0e:	00db      	lsls	r3, r3, #3
 8010b10:	440b      	add	r3, r1
 8010b12:	681b      	ldr	r3, [r3, #0]
 8010b14:	2b00      	cmp	r3, #0
 8010b16:	d018      	beq.n	8010b4a <etharp_find_entry+0x10e>
          if (arp_table[i].ctime >= age_queue) {
 8010b18:	7f3a      	ldrb	r2, [r7, #28]
 8010b1a:	4973      	ldr	r1, [pc, #460]	; (8010ce8 <etharp_find_entry+0x2ac>)
 8010b1c:	4613      	mov	r3, r2
 8010b1e:	005b      	lsls	r3, r3, #1
 8010b20:	4413      	add	r3, r2
 8010b22:	00db      	lsls	r3, r3, #3
 8010b24:	440b      	add	r3, r1
 8010b26:	3312      	adds	r3, #18
 8010b28:	881b      	ldrh	r3, [r3, #0]
 8010b2a:	8b3a      	ldrh	r2, [r7, #24]
 8010b2c:	429a      	cmp	r2, r3
 8010b2e:	d840      	bhi.n	8010bb2 <etharp_find_entry+0x176>
            old_queue = i;
 8010b30:	7f3b      	ldrb	r3, [r7, #28]
 8010b32:	76fb      	strb	r3, [r7, #27]
            age_queue = arp_table[i].ctime;
 8010b34:	7f3a      	ldrb	r2, [r7, #28]
 8010b36:	496c      	ldr	r1, [pc, #432]	; (8010ce8 <etharp_find_entry+0x2ac>)
 8010b38:	4613      	mov	r3, r2
 8010b3a:	005b      	lsls	r3, r3, #1
 8010b3c:	4413      	add	r3, r2
 8010b3e:	00db      	lsls	r3, r3, #3
 8010b40:	440b      	add	r3, r1
 8010b42:	3312      	adds	r3, #18
 8010b44:	881b      	ldrh	r3, [r3, #0]
 8010b46:	833b      	strh	r3, [r7, #24]
 8010b48:	e033      	b.n	8010bb2 <etharp_find_entry+0x176>
          }
        } else
        /* pending without queued packets? */
        {
          if (arp_table[i].ctime >= age_pending) {
 8010b4a:	7f3a      	ldrb	r2, [r7, #28]
 8010b4c:	4966      	ldr	r1, [pc, #408]	; (8010ce8 <etharp_find_entry+0x2ac>)
 8010b4e:	4613      	mov	r3, r2
 8010b50:	005b      	lsls	r3, r3, #1
 8010b52:	4413      	add	r3, r2
 8010b54:	00db      	lsls	r3, r3, #3
 8010b56:	440b      	add	r3, r1
 8010b58:	3312      	adds	r3, #18
 8010b5a:	881b      	ldrh	r3, [r3, #0]
 8010b5c:	8afa      	ldrh	r2, [r7, #22]
 8010b5e:	429a      	cmp	r2, r3
 8010b60:	d827      	bhi.n	8010bb2 <etharp_find_entry+0x176>
            old_pending = i;
 8010b62:	7f3b      	ldrb	r3, [r7, #28]
 8010b64:	77fb      	strb	r3, [r7, #31]
            age_pending = arp_table[i].ctime;
 8010b66:	7f3a      	ldrb	r2, [r7, #28]
 8010b68:	495f      	ldr	r1, [pc, #380]	; (8010ce8 <etharp_find_entry+0x2ac>)
 8010b6a:	4613      	mov	r3, r2
 8010b6c:	005b      	lsls	r3, r3, #1
 8010b6e:	4413      	add	r3, r2
 8010b70:	00db      	lsls	r3, r3, #3
 8010b72:	440b      	add	r3, r1
 8010b74:	3312      	adds	r3, #18
 8010b76:	881b      	ldrh	r3, [r3, #0]
 8010b78:	82fb      	strh	r3, [r7, #22]
 8010b7a:	e01a      	b.n	8010bb2 <etharp_find_entry+0x176>
          }
        }
      /* stable entry? */
      } else if (state >= ETHARP_STATE_STABLE) {
 8010b7c:	7cfb      	ldrb	r3, [r7, #19]
 8010b7e:	2b01      	cmp	r3, #1
 8010b80:	d917      	bls.n	8010bb2 <etharp_find_entry+0x176>
        /* don't record old_stable for static entries since they never expire */
        if (state < ETHARP_STATE_STATIC)
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
        {
          /* remember entry with oldest stable entry in oldest, its age in maxtime */
          if (arp_table[i].ctime >= age_stable) {
 8010b82:	7f3a      	ldrb	r2, [r7, #28]
 8010b84:	4958      	ldr	r1, [pc, #352]	; (8010ce8 <etharp_find_entry+0x2ac>)
 8010b86:	4613      	mov	r3, r2
 8010b88:	005b      	lsls	r3, r3, #1
 8010b8a:	4413      	add	r3, r2
 8010b8c:	00db      	lsls	r3, r3, #3
 8010b8e:	440b      	add	r3, r1
 8010b90:	3312      	adds	r3, #18
 8010b92:	881b      	ldrh	r3, [r3, #0]
 8010b94:	8aba      	ldrh	r2, [r7, #20]
 8010b96:	429a      	cmp	r2, r3
 8010b98:	d80b      	bhi.n	8010bb2 <etharp_find_entry+0x176>
            old_stable = i;
 8010b9a:	7f3b      	ldrb	r3, [r7, #28]
 8010b9c:	77bb      	strb	r3, [r7, #30]
            age_stable = arp_table[i].ctime;
 8010b9e:	7f3a      	ldrb	r2, [r7, #28]
 8010ba0:	4951      	ldr	r1, [pc, #324]	; (8010ce8 <etharp_find_entry+0x2ac>)
 8010ba2:	4613      	mov	r3, r2
 8010ba4:	005b      	lsls	r3, r3, #1
 8010ba6:	4413      	add	r3, r2
 8010ba8:	00db      	lsls	r3, r3, #3
 8010baa:	440b      	add	r3, r1
 8010bac:	3312      	adds	r3, #18
 8010bae:	881b      	ldrh	r3, [r3, #0]
 8010bb0:	82bb      	strh	r3, [r7, #20]
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8010bb2:	7f3b      	ldrb	r3, [r7, #28]
 8010bb4:	3301      	adds	r3, #1
 8010bb6:	773b      	strb	r3, [r7, #28]
 8010bb8:	7f3b      	ldrb	r3, [r7, #28]
 8010bba:	2b09      	cmp	r3, #9
 8010bbc:	f67f af58 	bls.w	8010a70 <etharp_find_entry+0x34>
    }
  }
  /* { we have no match } => try to create a new entry */

  /* don't create new entry, only search? */
  if (((flags & ETHARP_FLAG_FIND_ONLY) != 0) ||
 8010bc0:	7afb      	ldrb	r3, [r7, #11]
 8010bc2:	f003 0302 	and.w	r3, r3, #2
 8010bc6:	2b00      	cmp	r3, #0
 8010bc8:	d108      	bne.n	8010bdc <etharp_find_entry+0x1a0>
 8010bca:	f997 301d 	ldrsb.w	r3, [r7, #29]
 8010bce:	2b0a      	cmp	r3, #10
 8010bd0:	d107      	bne.n	8010be2 <etharp_find_entry+0x1a6>
      /* or no empty entry found and not allowed to recycle? */
      ((empty == ARP_TABLE_SIZE) && ((flags & ETHARP_FLAG_TRY_HARD) == 0))) {
 8010bd2:	7afb      	ldrb	r3, [r7, #11]
 8010bd4:	f003 0301 	and.w	r3, r3, #1
 8010bd8:	2b00      	cmp	r3, #0
 8010bda:	d102      	bne.n	8010be2 <etharp_find_entry+0x1a6>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: no empty entry found and not allowed to recycle\n"));
    return (s8_t)ERR_MEM;
 8010bdc:	f04f 33ff 	mov.w	r3, #4294967295
 8010be0:	e07d      	b.n	8010cde <etharp_find_entry+0x2a2>
   *
   * { ETHARP_FLAG_TRY_HARD is set at this point }
   */

  /* 1) empty entry available? */
  if (empty < ARP_TABLE_SIZE) {
 8010be2:	f997 301d 	ldrsb.w	r3, [r7, #29]
 8010be6:	2b09      	cmp	r3, #9
 8010be8:	dc02      	bgt.n	8010bf0 <etharp_find_entry+0x1b4>
    i = empty;
 8010bea:	7f7b      	ldrb	r3, [r7, #29]
 8010bec:	773b      	strb	r3, [r7, #28]
 8010bee:	e036      	b.n	8010c5e <etharp_find_entry+0x222>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting empty entry %"U16_F"\n", (u16_t)i));
  } else {
    /* 2) found recyclable stable entry? */
    if (old_stable < ARP_TABLE_SIZE) {
 8010bf0:	f997 301e 	ldrsb.w	r3, [r7, #30]
 8010bf4:	2b09      	cmp	r3, #9
 8010bf6:	dc13      	bgt.n	8010c20 <etharp_find_entry+0x1e4>
      /* recycle oldest stable*/
      i = old_stable;
 8010bf8:	7fbb      	ldrb	r3, [r7, #30]
 8010bfa:	773b      	strb	r3, [r7, #28]
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest stable entry %"U16_F"\n", (u16_t)i));
      /* no queued packets should exist on stable entries */
      LWIP_ASSERT("arp_table[i].q == NULL", arp_table[i].q == NULL);
 8010bfc:	7f3a      	ldrb	r2, [r7, #28]
 8010bfe:	493a      	ldr	r1, [pc, #232]	; (8010ce8 <etharp_find_entry+0x2ac>)
 8010c00:	4613      	mov	r3, r2
 8010c02:	005b      	lsls	r3, r3, #1
 8010c04:	4413      	add	r3, r2
 8010c06:	00db      	lsls	r3, r3, #3
 8010c08:	440b      	add	r3, r1
 8010c0a:	681b      	ldr	r3, [r3, #0]
 8010c0c:	2b00      	cmp	r3, #0
 8010c0e:	d018      	beq.n	8010c42 <etharp_find_entry+0x206>
 8010c10:	4b36      	ldr	r3, [pc, #216]	; (8010cec <etharp_find_entry+0x2b0>)
 8010c12:	f240 126f 	movw	r2, #367	; 0x16f
 8010c16:	4938      	ldr	r1, [pc, #224]	; (8010cf8 <etharp_find_entry+0x2bc>)
 8010c18:	4836      	ldr	r0, [pc, #216]	; (8010cf4 <etharp_find_entry+0x2b8>)
 8010c1a:	f004 ffdb 	bl	8015bd4 <printf_>
 8010c1e:	e010      	b.n	8010c42 <etharp_find_entry+0x206>
    /* 3) found recyclable pending entry without queued packets? */
    } else if (old_pending < ARP_TABLE_SIZE) {
 8010c20:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8010c24:	2b09      	cmp	r3, #9
 8010c26:	dc02      	bgt.n	8010c2e <etharp_find_entry+0x1f2>
      /* recycle oldest pending */
      i = old_pending;
 8010c28:	7ffb      	ldrb	r3, [r7, #31]
 8010c2a:	773b      	strb	r3, [r7, #28]
 8010c2c:	e009      	b.n	8010c42 <etharp_find_entry+0x206>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest pending entry %"U16_F" (without queue)\n", (u16_t)i));
    /* 4) found recyclable pending entry with queued packets? */
    } else if (old_queue < ARP_TABLE_SIZE) {
 8010c2e:	f997 301b 	ldrsb.w	r3, [r7, #27]
 8010c32:	2b09      	cmp	r3, #9
 8010c34:	dc02      	bgt.n	8010c3c <etharp_find_entry+0x200>
      /* recycle oldest pending (queued packets are free in etharp_free_entry) */
      i = old_queue;
 8010c36:	7efb      	ldrb	r3, [r7, #27]
 8010c38:	773b      	strb	r3, [r7, #28]
 8010c3a:	e002      	b.n	8010c42 <etharp_find_entry+0x206>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest pending entry %"U16_F", freeing packet queue %p\n", (u16_t)i, (void *)(arp_table[i].q)));
      /* no empty or recyclable entries found */
    } else {
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: no empty or recyclable entries found\n"));
      return (s8_t)ERR_MEM;
 8010c3c:	f04f 33ff 	mov.w	r3, #4294967295
 8010c40:	e04d      	b.n	8010cde <etharp_find_entry+0x2a2>
    }

    /* { empty or recyclable entry found } */
    LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
 8010c42:	7f3b      	ldrb	r3, [r7, #28]
 8010c44:	2b09      	cmp	r3, #9
 8010c46:	d906      	bls.n	8010c56 <etharp_find_entry+0x21a>
 8010c48:	4b28      	ldr	r3, [pc, #160]	; (8010cec <etharp_find_entry+0x2b0>)
 8010c4a:	f240 1281 	movw	r2, #385	; 0x181
 8010c4e:	492b      	ldr	r1, [pc, #172]	; (8010cfc <etharp_find_entry+0x2c0>)
 8010c50:	4828      	ldr	r0, [pc, #160]	; (8010cf4 <etharp_find_entry+0x2b8>)
 8010c52:	f004 ffbf 	bl	8015bd4 <printf_>
    etharp_free_entry(i);
 8010c56:	7f3b      	ldrb	r3, [r7, #28]
 8010c58:	4618      	mov	r0, r3
 8010c5a:	f7ff fe15 	bl	8010888 <etharp_free_entry>
  }

  LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
 8010c5e:	7f3b      	ldrb	r3, [r7, #28]
 8010c60:	2b09      	cmp	r3, #9
 8010c62:	d906      	bls.n	8010c72 <etharp_find_entry+0x236>
 8010c64:	4b21      	ldr	r3, [pc, #132]	; (8010cec <etharp_find_entry+0x2b0>)
 8010c66:	f240 1285 	movw	r2, #389	; 0x185
 8010c6a:	4924      	ldr	r1, [pc, #144]	; (8010cfc <etharp_find_entry+0x2c0>)
 8010c6c:	4821      	ldr	r0, [pc, #132]	; (8010cf4 <etharp_find_entry+0x2b8>)
 8010c6e:	f004 ffb1 	bl	8015bd4 <printf_>
  LWIP_ASSERT("arp_table[i].state == ETHARP_STATE_EMPTY",
 8010c72:	7f3a      	ldrb	r2, [r7, #28]
 8010c74:	491c      	ldr	r1, [pc, #112]	; (8010ce8 <etharp_find_entry+0x2ac>)
 8010c76:	4613      	mov	r3, r2
 8010c78:	005b      	lsls	r3, r3, #1
 8010c7a:	4413      	add	r3, r2
 8010c7c:	00db      	lsls	r3, r3, #3
 8010c7e:	440b      	add	r3, r1
 8010c80:	3314      	adds	r3, #20
 8010c82:	781b      	ldrb	r3, [r3, #0]
 8010c84:	2b00      	cmp	r3, #0
 8010c86:	d006      	beq.n	8010c96 <etharp_find_entry+0x25a>
 8010c88:	4b18      	ldr	r3, [pc, #96]	; (8010cec <etharp_find_entry+0x2b0>)
 8010c8a:	f240 1287 	movw	r2, #391	; 0x187
 8010c8e:	491c      	ldr	r1, [pc, #112]	; (8010d00 <etharp_find_entry+0x2c4>)
 8010c90:	4818      	ldr	r0, [pc, #96]	; (8010cf4 <etharp_find_entry+0x2b8>)
 8010c92:	f004 ff9f 	bl	8015bd4 <printf_>
    arp_table[i].state == ETHARP_STATE_EMPTY);

  /* IP address given? */
  if (ipaddr != NULL) {
 8010c96:	68fb      	ldr	r3, [r7, #12]
 8010c98:	2b00      	cmp	r3, #0
 8010c9a:	d00a      	beq.n	8010cb2 <etharp_find_entry+0x276>
    /* set IP address */
    ip4_addr_copy(arp_table[i].ipaddr, *ipaddr);
 8010c9c:	7f3a      	ldrb	r2, [r7, #28]
 8010c9e:	68fb      	ldr	r3, [r7, #12]
 8010ca0:	6819      	ldr	r1, [r3, #0]
 8010ca2:	4811      	ldr	r0, [pc, #68]	; (8010ce8 <etharp_find_entry+0x2ac>)
 8010ca4:	4613      	mov	r3, r2
 8010ca6:	005b      	lsls	r3, r3, #1
 8010ca8:	4413      	add	r3, r2
 8010caa:	00db      	lsls	r3, r3, #3
 8010cac:	4403      	add	r3, r0
 8010cae:	3304      	adds	r3, #4
 8010cb0:	6019      	str	r1, [r3, #0]
  }
  arp_table[i].ctime = 0;
 8010cb2:	7f3a      	ldrb	r2, [r7, #28]
 8010cb4:	490c      	ldr	r1, [pc, #48]	; (8010ce8 <etharp_find_entry+0x2ac>)
 8010cb6:	4613      	mov	r3, r2
 8010cb8:	005b      	lsls	r3, r3, #1
 8010cba:	4413      	add	r3, r2
 8010cbc:	00db      	lsls	r3, r3, #3
 8010cbe:	440b      	add	r3, r1
 8010cc0:	3312      	adds	r3, #18
 8010cc2:	2200      	movs	r2, #0
 8010cc4:	801a      	strh	r2, [r3, #0]
#if ETHARP_TABLE_MATCH_NETIF
  arp_table[i].netif = netif;
 8010cc6:	7f3a      	ldrb	r2, [r7, #28]
 8010cc8:	4907      	ldr	r1, [pc, #28]	; (8010ce8 <etharp_find_entry+0x2ac>)
 8010cca:	4613      	mov	r3, r2
 8010ccc:	005b      	lsls	r3, r3, #1
 8010cce:	4413      	add	r3, r2
 8010cd0:	00db      	lsls	r3, r3, #3
 8010cd2:	440b      	add	r3, r1
 8010cd4:	3308      	adds	r3, #8
 8010cd6:	687a      	ldr	r2, [r7, #4]
 8010cd8:	601a      	str	r2, [r3, #0]
#endif /* ETHARP_TABLE_MATCH_NETIF*/
  return (err_t)i;
 8010cda:	f997 301c 	ldrsb.w	r3, [r7, #28]
}
 8010cde:	4618      	mov	r0, r3
 8010ce0:	3720      	adds	r7, #32
 8010ce2:	46bd      	mov	sp, r7
 8010ce4:	bd80      	pop	{r7, pc}
 8010ce6:	bf00      	nop
 8010ce8:	2400864c 	.word	0x2400864c
 8010cec:	0801b858 	.word	0x0801b858
 8010cf0:	0801b890 	.word	0x0801b890
 8010cf4:	0801b8d0 	.word	0x0801b8d0
 8010cf8:	0801b8f8 	.word	0x0801b8f8
 8010cfc:	0801b910 	.word	0x0801b910
 8010d00:	0801b924 	.word	0x0801b924

08010d04 <etharp_update_arp_entry>:
 *
 * @see pbuf_free()
 */
static err_t
etharp_update_arp_entry(struct netif *netif, const ip4_addr_t *ipaddr, struct eth_addr *ethaddr, u8_t flags)
{
 8010d04:	b580      	push	{r7, lr}
 8010d06:	b088      	sub	sp, #32
 8010d08:	af02      	add	r7, sp, #8
 8010d0a:	60f8      	str	r0, [r7, #12]
 8010d0c:	60b9      	str	r1, [r7, #8]
 8010d0e:	607a      	str	r2, [r7, #4]
 8010d10:	70fb      	strb	r3, [r7, #3]
  s8_t i;
  LWIP_ASSERT("netif->hwaddr_len == ETH_HWADDR_LEN", netif->hwaddr_len == ETH_HWADDR_LEN);
 8010d12:	68fb      	ldr	r3, [r7, #12]
 8010d14:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8010d18:	2b06      	cmp	r3, #6
 8010d1a:	d006      	beq.n	8010d2a <etharp_update_arp_entry+0x26>
 8010d1c:	4b48      	ldr	r3, [pc, #288]	; (8010e40 <etharp_update_arp_entry+0x13c>)
 8010d1e:	f240 12ab 	movw	r2, #427	; 0x1ab
 8010d22:	4948      	ldr	r1, [pc, #288]	; (8010e44 <etharp_update_arp_entry+0x140>)
 8010d24:	4848      	ldr	r0, [pc, #288]	; (8010e48 <etharp_update_arp_entry+0x144>)
 8010d26:	f004 ff55 	bl	8015bd4 <printf_>
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: %"U16_F".%"U16_F".%"U16_F".%"U16_F" - %02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F"\n",
    ip4_addr1_16(ipaddr), ip4_addr2_16(ipaddr), ip4_addr3_16(ipaddr), ip4_addr4_16(ipaddr),
    (u16_t)ethaddr->addr[0], (u16_t)ethaddr->addr[1], (u16_t)ethaddr->addr[2],
    (u16_t)ethaddr->addr[3], (u16_t)ethaddr->addr[4], (u16_t)ethaddr->addr[5]));
  /* non-unicast address? */
  if (ip4_addr_isany(ipaddr) ||
 8010d2a:	68bb      	ldr	r3, [r7, #8]
 8010d2c:	2b00      	cmp	r3, #0
 8010d2e:	d012      	beq.n	8010d56 <etharp_update_arp_entry+0x52>
 8010d30:	68bb      	ldr	r3, [r7, #8]
 8010d32:	681b      	ldr	r3, [r3, #0]
 8010d34:	2b00      	cmp	r3, #0
 8010d36:	d00e      	beq.n	8010d56 <etharp_update_arp_entry+0x52>
      ip4_addr_isbroadcast(ipaddr, netif) ||
 8010d38:	68bb      	ldr	r3, [r7, #8]
 8010d3a:	681b      	ldr	r3, [r3, #0]
 8010d3c:	68f9      	ldr	r1, [r7, #12]
 8010d3e:	4618      	mov	r0, r3
 8010d40:	f001 f8f6 	bl	8011f30 <ip4_addr_isbroadcast_u32>
 8010d44:	4603      	mov	r3, r0
  if (ip4_addr_isany(ipaddr) ||
 8010d46:	2b00      	cmp	r3, #0
 8010d48:	d105      	bne.n	8010d56 <etharp_update_arp_entry+0x52>
      ip4_addr_ismulticast(ipaddr)) {
 8010d4a:	68bb      	ldr	r3, [r7, #8]
 8010d4c:	681b      	ldr	r3, [r3, #0]
 8010d4e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
      ip4_addr_isbroadcast(ipaddr, netif) ||
 8010d52:	2be0      	cmp	r3, #224	; 0xe0
 8010d54:	d102      	bne.n	8010d5c <etharp_update_arp_entry+0x58>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: will not add non-unicast IP address to ARP cache\n"));
    return ERR_ARG;
 8010d56:	f06f 030f 	mvn.w	r3, #15
 8010d5a:	e06c      	b.n	8010e36 <etharp_update_arp_entry+0x132>
  }
  /* find or create ARP entry */
  i = etharp_find_entry(ipaddr, flags, netif);
 8010d5c:	78fb      	ldrb	r3, [r7, #3]
 8010d5e:	68fa      	ldr	r2, [r7, #12]
 8010d60:	4619      	mov	r1, r3
 8010d62:	68b8      	ldr	r0, [r7, #8]
 8010d64:	f7ff fe6a 	bl	8010a3c <etharp_find_entry>
 8010d68:	4603      	mov	r3, r0
 8010d6a:	75fb      	strb	r3, [r7, #23]
  /* bail out if no entry could be found */
  if (i < 0) {
 8010d6c:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8010d70:	2b00      	cmp	r3, #0
 8010d72:	da02      	bge.n	8010d7a <etharp_update_arp_entry+0x76>
    return (err_t)i;
 8010d74:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8010d78:	e05d      	b.n	8010e36 <etharp_update_arp_entry+0x132>
    return ERR_VAL;
  } else
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
  {
    /* mark it stable */
    arp_table[i].state = ETHARP_STATE_STABLE;
 8010d7a:	f997 2017 	ldrsb.w	r2, [r7, #23]
 8010d7e:	4933      	ldr	r1, [pc, #204]	; (8010e4c <etharp_update_arp_entry+0x148>)
 8010d80:	4613      	mov	r3, r2
 8010d82:	005b      	lsls	r3, r3, #1
 8010d84:	4413      	add	r3, r2
 8010d86:	00db      	lsls	r3, r3, #3
 8010d88:	440b      	add	r3, r1
 8010d8a:	3314      	adds	r3, #20
 8010d8c:	2202      	movs	r2, #2
 8010d8e:	701a      	strb	r2, [r3, #0]
  }

  /* record network interface */
  arp_table[i].netif = netif;
 8010d90:	f997 2017 	ldrsb.w	r2, [r7, #23]
 8010d94:	492d      	ldr	r1, [pc, #180]	; (8010e4c <etharp_update_arp_entry+0x148>)
 8010d96:	4613      	mov	r3, r2
 8010d98:	005b      	lsls	r3, r3, #1
 8010d9a:	4413      	add	r3, r2
 8010d9c:	00db      	lsls	r3, r3, #3
 8010d9e:	440b      	add	r3, r1
 8010da0:	3308      	adds	r3, #8
 8010da2:	68fa      	ldr	r2, [r7, #12]
 8010da4:	601a      	str	r2, [r3, #0]
  /* insert in SNMP ARP index tree */
  mib2_add_arp_entry(netif, &arp_table[i].ipaddr);

  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: updating stable entry %"S16_F"\n", (s16_t)i));
  /* update address */
  ETHADDR32_COPY(&arp_table[i].ethaddr, ethaddr);
 8010da6:	f997 2017 	ldrsb.w	r2, [r7, #23]
 8010daa:	4613      	mov	r3, r2
 8010dac:	005b      	lsls	r3, r3, #1
 8010dae:	4413      	add	r3, r2
 8010db0:	00db      	lsls	r3, r3, #3
 8010db2:	3308      	adds	r3, #8
 8010db4:	4a25      	ldr	r2, [pc, #148]	; (8010e4c <etharp_update_arp_entry+0x148>)
 8010db6:	4413      	add	r3, r2
 8010db8:	3304      	adds	r3, #4
 8010dba:	2206      	movs	r2, #6
 8010dbc:	6879      	ldr	r1, [r7, #4]
 8010dbe:	4618      	mov	r0, r3
 8010dc0:	f004 ff79 	bl	8015cb6 <memcpy>
  /* reset time stamp */
  arp_table[i].ctime = 0;
 8010dc4:	f997 2017 	ldrsb.w	r2, [r7, #23]
 8010dc8:	4920      	ldr	r1, [pc, #128]	; (8010e4c <etharp_update_arp_entry+0x148>)
 8010dca:	4613      	mov	r3, r2
 8010dcc:	005b      	lsls	r3, r3, #1
 8010dce:	4413      	add	r3, r2
 8010dd0:	00db      	lsls	r3, r3, #3
 8010dd2:	440b      	add	r3, r1
 8010dd4:	3312      	adds	r3, #18
 8010dd6:	2200      	movs	r2, #0
 8010dd8:	801a      	strh	r2, [r3, #0]
    /* get the packet pointer */
    p = q->p;
    /* now queue entry can be freed */
    memp_free(MEMP_ARP_QUEUE, q);
#else /* ARP_QUEUEING */
  if (arp_table[i].q != NULL) {
 8010dda:	f997 2017 	ldrsb.w	r2, [r7, #23]
 8010dde:	491b      	ldr	r1, [pc, #108]	; (8010e4c <etharp_update_arp_entry+0x148>)
 8010de0:	4613      	mov	r3, r2
 8010de2:	005b      	lsls	r3, r3, #1
 8010de4:	4413      	add	r3, r2
 8010de6:	00db      	lsls	r3, r3, #3
 8010de8:	440b      	add	r3, r1
 8010dea:	681b      	ldr	r3, [r3, #0]
 8010dec:	2b00      	cmp	r3, #0
 8010dee:	d021      	beq.n	8010e34 <etharp_update_arp_entry+0x130>
    struct pbuf *p = arp_table[i].q;
 8010df0:	f997 2017 	ldrsb.w	r2, [r7, #23]
 8010df4:	4915      	ldr	r1, [pc, #84]	; (8010e4c <etharp_update_arp_entry+0x148>)
 8010df6:	4613      	mov	r3, r2
 8010df8:	005b      	lsls	r3, r3, #1
 8010dfa:	4413      	add	r3, r2
 8010dfc:	00db      	lsls	r3, r3, #3
 8010dfe:	440b      	add	r3, r1
 8010e00:	681b      	ldr	r3, [r3, #0]
 8010e02:	613b      	str	r3, [r7, #16]
    arp_table[i].q = NULL;
 8010e04:	f997 2017 	ldrsb.w	r2, [r7, #23]
 8010e08:	4910      	ldr	r1, [pc, #64]	; (8010e4c <etharp_update_arp_entry+0x148>)
 8010e0a:	4613      	mov	r3, r2
 8010e0c:	005b      	lsls	r3, r3, #1
 8010e0e:	4413      	add	r3, r2
 8010e10:	00db      	lsls	r3, r3, #3
 8010e12:	440b      	add	r3, r1
 8010e14:	2200      	movs	r2, #0
 8010e16:	601a      	str	r2, [r3, #0]
#endif /* ARP_QUEUEING */
    /* send the queued IP packet */
    ethernet_output(netif, p, (struct eth_addr*)(netif->hwaddr), ethaddr, ETHTYPE_IP);
 8010e18:	68fb      	ldr	r3, [r7, #12]
 8010e1a:	f103 0229 	add.w	r2, r3, #41	; 0x29
 8010e1e:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8010e22:	9300      	str	r3, [sp, #0]
 8010e24:	687b      	ldr	r3, [r7, #4]
 8010e26:	6939      	ldr	r1, [r7, #16]
 8010e28:	68f8      	ldr	r0, [r7, #12]
 8010e2a:	f001 ff23 	bl	8012c74 <ethernet_output>
    /* free the queued IP packet */
    pbuf_free(p);
 8010e2e:	6938      	ldr	r0, [r7, #16]
 8010e30:	f7f9 fb3e 	bl	800a4b0 <pbuf_free>
  }
  return ERR_OK;
 8010e34:	2300      	movs	r3, #0
}
 8010e36:	4618      	mov	r0, r3
 8010e38:	3718      	adds	r7, #24
 8010e3a:	46bd      	mov	sp, r7
 8010e3c:	bd80      	pop	{r7, pc}
 8010e3e:	bf00      	nop
 8010e40:	0801b858 	.word	0x0801b858
 8010e44:	0801b950 	.word	0x0801b950
 8010e48:	0801b8d0 	.word	0x0801b8d0
 8010e4c:	2400864c 	.word	0x2400864c

08010e50 <etharp_cleanup_netif>:
 *
 * @param netif points to a network interface
 */
void
etharp_cleanup_netif(struct netif *netif)
{
 8010e50:	b580      	push	{r7, lr}
 8010e52:	b084      	sub	sp, #16
 8010e54:	af00      	add	r7, sp, #0
 8010e56:	6078      	str	r0, [r7, #4]
  u8_t i;

  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8010e58:	2300      	movs	r3, #0
 8010e5a:	73fb      	strb	r3, [r7, #15]
 8010e5c:	e01f      	b.n	8010e9e <etharp_cleanup_netif+0x4e>
    u8_t state = arp_table[i].state;
 8010e5e:	7bfa      	ldrb	r2, [r7, #15]
 8010e60:	4912      	ldr	r1, [pc, #72]	; (8010eac <etharp_cleanup_netif+0x5c>)
 8010e62:	4613      	mov	r3, r2
 8010e64:	005b      	lsls	r3, r3, #1
 8010e66:	4413      	add	r3, r2
 8010e68:	00db      	lsls	r3, r3, #3
 8010e6a:	440b      	add	r3, r1
 8010e6c:	3314      	adds	r3, #20
 8010e6e:	781b      	ldrb	r3, [r3, #0]
 8010e70:	73bb      	strb	r3, [r7, #14]
    if ((state != ETHARP_STATE_EMPTY) && (arp_table[i].netif == netif)) {
 8010e72:	7bbb      	ldrb	r3, [r7, #14]
 8010e74:	2b00      	cmp	r3, #0
 8010e76:	d00f      	beq.n	8010e98 <etharp_cleanup_netif+0x48>
 8010e78:	7bfa      	ldrb	r2, [r7, #15]
 8010e7a:	490c      	ldr	r1, [pc, #48]	; (8010eac <etharp_cleanup_netif+0x5c>)
 8010e7c:	4613      	mov	r3, r2
 8010e7e:	005b      	lsls	r3, r3, #1
 8010e80:	4413      	add	r3, r2
 8010e82:	00db      	lsls	r3, r3, #3
 8010e84:	440b      	add	r3, r1
 8010e86:	3308      	adds	r3, #8
 8010e88:	681b      	ldr	r3, [r3, #0]
 8010e8a:	687a      	ldr	r2, [r7, #4]
 8010e8c:	429a      	cmp	r2, r3
 8010e8e:	d103      	bne.n	8010e98 <etharp_cleanup_netif+0x48>
      etharp_free_entry(i);
 8010e90:	7bfb      	ldrb	r3, [r7, #15]
 8010e92:	4618      	mov	r0, r3
 8010e94:	f7ff fcf8 	bl	8010888 <etharp_free_entry>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8010e98:	7bfb      	ldrb	r3, [r7, #15]
 8010e9a:	3301      	adds	r3, #1
 8010e9c:	73fb      	strb	r3, [r7, #15]
 8010e9e:	7bfb      	ldrb	r3, [r7, #15]
 8010ea0:	2b09      	cmp	r3, #9
 8010ea2:	d9dc      	bls.n	8010e5e <etharp_cleanup_netif+0xe>
    }
  }
}
 8010ea4:	bf00      	nop
 8010ea6:	3710      	adds	r7, #16
 8010ea8:	46bd      	mov	sp, r7
 8010eaa:	bd80      	pop	{r7, pc}
 8010eac:	2400864c 	.word	0x2400864c

08010eb0 <etharp_input>:
 *
 * @see pbuf_free()
 */
void
etharp_input(struct pbuf *p, struct netif *netif)
{
 8010eb0:	b5b0      	push	{r4, r5, r7, lr}
 8010eb2:	b08a      	sub	sp, #40	; 0x28
 8010eb4:	af04      	add	r7, sp, #16
 8010eb6:	6078      	str	r0, [r7, #4]
 8010eb8:	6039      	str	r1, [r7, #0]
  struct etharp_hdr *hdr;
  /* these are aligned properly, whereas the ARP header fields might not be */
  ip4_addr_t sipaddr, dipaddr;
  u8_t for_us;

  LWIP_ERROR("netif != NULL", (netif != NULL), return;);
 8010eba:	683b      	ldr	r3, [r7, #0]
 8010ebc:	2b00      	cmp	r3, #0
 8010ebe:	d107      	bne.n	8010ed0 <etharp_input+0x20>
 8010ec0:	4b3d      	ldr	r3, [pc, #244]	; (8010fb8 <etharp_input+0x108>)
 8010ec2:	f44f 7222 	mov.w	r2, #648	; 0x288
 8010ec6:	493d      	ldr	r1, [pc, #244]	; (8010fbc <etharp_input+0x10c>)
 8010ec8:	483d      	ldr	r0, [pc, #244]	; (8010fc0 <etharp_input+0x110>)
 8010eca:	f004 fe83 	bl	8015bd4 <printf_>
 8010ece:	e06f      	b.n	8010fb0 <etharp_input+0x100>

  hdr = (struct etharp_hdr *)p->payload;
 8010ed0:	687b      	ldr	r3, [r7, #4]
 8010ed2:	685b      	ldr	r3, [r3, #4]
 8010ed4:	613b      	str	r3, [r7, #16]

  /* RFC 826 "Packet Reception": */
  if ((hdr->hwtype != PP_HTONS(HWTYPE_ETHERNET)) ||
 8010ed6:	693b      	ldr	r3, [r7, #16]
 8010ed8:	881b      	ldrh	r3, [r3, #0]
 8010eda:	b29b      	uxth	r3, r3
 8010edc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8010ee0:	d10c      	bne.n	8010efc <etharp_input+0x4c>
      (hdr->hwlen != ETH_HWADDR_LEN) ||
 8010ee2:	693b      	ldr	r3, [r7, #16]
 8010ee4:	791b      	ldrb	r3, [r3, #4]
  if ((hdr->hwtype != PP_HTONS(HWTYPE_ETHERNET)) ||
 8010ee6:	2b06      	cmp	r3, #6
 8010ee8:	d108      	bne.n	8010efc <etharp_input+0x4c>
      (hdr->protolen != sizeof(ip4_addr_t)) ||
 8010eea:	693b      	ldr	r3, [r7, #16]
 8010eec:	795b      	ldrb	r3, [r3, #5]
      (hdr->hwlen != ETH_HWADDR_LEN) ||
 8010eee:	2b04      	cmp	r3, #4
 8010ef0:	d104      	bne.n	8010efc <etharp_input+0x4c>
      (hdr->proto != PP_HTONS(ETHTYPE_IP)))  {
 8010ef2:	693b      	ldr	r3, [r7, #16]
 8010ef4:	885b      	ldrh	r3, [r3, #2]
 8010ef6:	b29b      	uxth	r3, r3
      (hdr->protolen != sizeof(ip4_addr_t)) ||
 8010ef8:	2b08      	cmp	r3, #8
 8010efa:	d003      	beq.n	8010f04 <etharp_input+0x54>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING,
      ("etharp_input: packet dropped, wrong hw type, hwlen, proto, protolen or ethernet type (%"U16_F"/%"U16_F"/%"U16_F"/%"U16_F")\n",
      hdr->hwtype, (u16_t)hdr->hwlen, hdr->proto, (u16_t)hdr->protolen));
    ETHARP_STATS_INC(etharp.proterr);
    ETHARP_STATS_INC(etharp.drop);
    pbuf_free(p);
 8010efc:	6878      	ldr	r0, [r7, #4]
 8010efe:	f7f9 fad7 	bl	800a4b0 <pbuf_free>
    return;
 8010f02:	e055      	b.n	8010fb0 <etharp_input+0x100>
  autoip_arp_reply(netif, hdr);
#endif /* LWIP_AUTOIP */

  /* Copy struct ip4_addr2 to aligned ip4_addr, to support compilers without
   * structure packing (not using structure copy which breaks strict-aliasing rules). */
  IPADDR2_COPY(&sipaddr, &hdr->sipaddr);
 8010f04:	693b      	ldr	r3, [r7, #16]
 8010f06:	330e      	adds	r3, #14
 8010f08:	681b      	ldr	r3, [r3, #0]
 8010f0a:	60fb      	str	r3, [r7, #12]
  IPADDR2_COPY(&dipaddr, &hdr->dipaddr);
 8010f0c:	693b      	ldr	r3, [r7, #16]
 8010f0e:	3318      	adds	r3, #24
 8010f10:	681b      	ldr	r3, [r3, #0]
 8010f12:	60bb      	str	r3, [r7, #8]

  /* this interface is not configured? */
  if (ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 8010f14:	683b      	ldr	r3, [r7, #0]
 8010f16:	3304      	adds	r3, #4
 8010f18:	681b      	ldr	r3, [r3, #0]
 8010f1a:	2b00      	cmp	r3, #0
 8010f1c:	d102      	bne.n	8010f24 <etharp_input+0x74>
    for_us = 0;
 8010f1e:	2300      	movs	r3, #0
 8010f20:	75fb      	strb	r3, [r7, #23]
 8010f22:	e009      	b.n	8010f38 <etharp_input+0x88>
  } else {
    /* ARP packet directed to us? */
    for_us = (u8_t)ip4_addr_cmp(&dipaddr, netif_ip4_addr(netif));
 8010f24:	68ba      	ldr	r2, [r7, #8]
 8010f26:	683b      	ldr	r3, [r7, #0]
 8010f28:	3304      	adds	r3, #4
 8010f2a:	681b      	ldr	r3, [r3, #0]
 8010f2c:	429a      	cmp	r2, r3
 8010f2e:	bf0c      	ite	eq
 8010f30:	2301      	moveq	r3, #1
 8010f32:	2300      	movne	r3, #0
 8010f34:	b2db      	uxtb	r3, r3
 8010f36:	75fb      	strb	r3, [r7, #23]
  /* ARP message directed to us?
      -> add IP address in ARP cache; assume requester wants to talk to us,
         can result in directly sending the queued packets for this host.
     ARP message not directed to us?
      ->  update the source IP address in the cache, if present */
  etharp_update_arp_entry(netif, &sipaddr, &(hdr->shwaddr),
 8010f38:	693b      	ldr	r3, [r7, #16]
 8010f3a:	f103 0208 	add.w	r2, r3, #8
 8010f3e:	7dfb      	ldrb	r3, [r7, #23]
 8010f40:	2b00      	cmp	r3, #0
 8010f42:	d001      	beq.n	8010f48 <etharp_input+0x98>
 8010f44:	2301      	movs	r3, #1
 8010f46:	e000      	b.n	8010f4a <etharp_input+0x9a>
 8010f48:	2302      	movs	r3, #2
 8010f4a:	f107 010c 	add.w	r1, r7, #12
 8010f4e:	6838      	ldr	r0, [r7, #0]
 8010f50:	f7ff fed8 	bl	8010d04 <etharp_update_arp_entry>
                   for_us ? ETHARP_FLAG_TRY_HARD : ETHARP_FLAG_FIND_ONLY);

  /* now act on the message itself */
  switch (hdr->opcode) {
 8010f54:	693b      	ldr	r3, [r7, #16]
 8010f56:	88db      	ldrh	r3, [r3, #6]
 8010f58:	b29b      	uxth	r3, r3
 8010f5a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8010f5e:	d003      	beq.n	8010f68 <etharp_input+0xb8>
 8010f60:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8010f64:	d01e      	beq.n	8010fa4 <etharp_input+0xf4>
#endif /* (LWIP_DHCP && DHCP_DOES_ARP_CHECK) */
    break;
  default:
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_input: ARP unknown opcode type %"S16_F"\n", lwip_htons(hdr->opcode)));
    ETHARP_STATS_INC(etharp.err);
    break;
 8010f66:	e020      	b.n	8010faa <etharp_input+0xfa>
    if (for_us) {
 8010f68:	7dfb      	ldrb	r3, [r7, #23]
 8010f6a:	2b00      	cmp	r3, #0
 8010f6c:	d01c      	beq.n	8010fa8 <etharp_input+0xf8>
                 (struct eth_addr *)netif->hwaddr, &hdr->shwaddr,
 8010f6e:	683b      	ldr	r3, [r7, #0]
 8010f70:	f103 0029 	add.w	r0, r3, #41	; 0x29
 8010f74:	693b      	ldr	r3, [r7, #16]
 8010f76:	f103 0408 	add.w	r4, r3, #8
                 (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif),
 8010f7a:	683b      	ldr	r3, [r7, #0]
 8010f7c:	f103 0529 	add.w	r5, r3, #41	; 0x29
 8010f80:	683b      	ldr	r3, [r7, #0]
 8010f82:	3304      	adds	r3, #4
                 &hdr->shwaddr, &sipaddr,
 8010f84:	693a      	ldr	r2, [r7, #16]
 8010f86:	3208      	adds	r2, #8
      etharp_raw(netif,
 8010f88:	2102      	movs	r1, #2
 8010f8a:	9103      	str	r1, [sp, #12]
 8010f8c:	f107 010c 	add.w	r1, r7, #12
 8010f90:	9102      	str	r1, [sp, #8]
 8010f92:	9201      	str	r2, [sp, #4]
 8010f94:	9300      	str	r3, [sp, #0]
 8010f96:	462b      	mov	r3, r5
 8010f98:	4622      	mov	r2, r4
 8010f9a:	4601      	mov	r1, r0
 8010f9c:	6838      	ldr	r0, [r7, #0]
 8010f9e:	f000 faff 	bl	80115a0 <etharp_raw>
    break;
 8010fa2:	e001      	b.n	8010fa8 <etharp_input+0xf8>
    break;
 8010fa4:	bf00      	nop
 8010fa6:	e000      	b.n	8010faa <etharp_input+0xfa>
    break;
 8010fa8:	bf00      	nop
  }
  /* free ARP packet */
  pbuf_free(p);
 8010faa:	6878      	ldr	r0, [r7, #4]
 8010fac:	f7f9 fa80 	bl	800a4b0 <pbuf_free>
}
 8010fb0:	3718      	adds	r7, #24
 8010fb2:	46bd      	mov	sp, r7
 8010fb4:	bdb0      	pop	{r4, r5, r7, pc}
 8010fb6:	bf00      	nop
 8010fb8:	0801b858 	.word	0x0801b858
 8010fbc:	0801b9a8 	.word	0x0801b9a8
 8010fc0:	0801b8d0 	.word	0x0801b8d0

08010fc4 <etharp_output_to_arp_index>:
/** Just a small helper function that sends a pbuf to an ethernet address
 * in the arp_table specified by the index 'arp_idx'.
 */
static err_t
etharp_output_to_arp_index(struct netif *netif, struct pbuf *q, u8_t arp_idx)
{
 8010fc4:	b580      	push	{r7, lr}
 8010fc6:	b086      	sub	sp, #24
 8010fc8:	af02      	add	r7, sp, #8
 8010fca:	60f8      	str	r0, [r7, #12]
 8010fcc:	60b9      	str	r1, [r7, #8]
 8010fce:	4613      	mov	r3, r2
 8010fd0:	71fb      	strb	r3, [r7, #7]
  LWIP_ASSERT("arp_table[arp_idx].state >= ETHARP_STATE_STABLE",
 8010fd2:	79fa      	ldrb	r2, [r7, #7]
 8010fd4:	4944      	ldr	r1, [pc, #272]	; (80110e8 <etharp_output_to_arp_index+0x124>)
 8010fd6:	4613      	mov	r3, r2
 8010fd8:	005b      	lsls	r3, r3, #1
 8010fda:	4413      	add	r3, r2
 8010fdc:	00db      	lsls	r3, r3, #3
 8010fde:	440b      	add	r3, r1
 8010fe0:	3314      	adds	r3, #20
 8010fe2:	781b      	ldrb	r3, [r3, #0]
 8010fe4:	2b01      	cmp	r3, #1
 8010fe6:	d806      	bhi.n	8010ff6 <etharp_output_to_arp_index+0x32>
 8010fe8:	4b40      	ldr	r3, [pc, #256]	; (80110ec <etharp_output_to_arp_index+0x128>)
 8010fea:	f240 22ed 	movw	r2, #749	; 0x2ed
 8010fee:	4940      	ldr	r1, [pc, #256]	; (80110f0 <etharp_output_to_arp_index+0x12c>)
 8010ff0:	4840      	ldr	r0, [pc, #256]	; (80110f4 <etharp_output_to_arp_index+0x130>)
 8010ff2:	f004 fdef 	bl	8015bd4 <printf_>
              arp_table[arp_idx].state >= ETHARP_STATE_STABLE);
  /* if arp table entry is about to expire: re-request it,
     but only if its state is ETHARP_STATE_STABLE to prevent flooding the
     network with ARP requests if this address is used frequently. */
  if (arp_table[arp_idx].state == ETHARP_STATE_STABLE) {
 8010ff6:	79fa      	ldrb	r2, [r7, #7]
 8010ff8:	493b      	ldr	r1, [pc, #236]	; (80110e8 <etharp_output_to_arp_index+0x124>)
 8010ffa:	4613      	mov	r3, r2
 8010ffc:	005b      	lsls	r3, r3, #1
 8010ffe:	4413      	add	r3, r2
 8011000:	00db      	lsls	r3, r3, #3
 8011002:	440b      	add	r3, r1
 8011004:	3314      	adds	r3, #20
 8011006:	781b      	ldrb	r3, [r3, #0]
 8011008:	2b02      	cmp	r3, #2
 801100a:	d153      	bne.n	80110b4 <etharp_output_to_arp_index+0xf0>
    if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_BROADCAST) {
 801100c:	79fa      	ldrb	r2, [r7, #7]
 801100e:	4936      	ldr	r1, [pc, #216]	; (80110e8 <etharp_output_to_arp_index+0x124>)
 8011010:	4613      	mov	r3, r2
 8011012:	005b      	lsls	r3, r3, #1
 8011014:	4413      	add	r3, r2
 8011016:	00db      	lsls	r3, r3, #3
 8011018:	440b      	add	r3, r1
 801101a:	3312      	adds	r3, #18
 801101c:	881b      	ldrh	r3, [r3, #0]
 801101e:	f5b3 7f8e 	cmp.w	r3, #284	; 0x11c
 8011022:	d919      	bls.n	8011058 <etharp_output_to_arp_index+0x94>
      /* issue a standard request using broadcast */
      if (etharp_request(netif, &arp_table[arp_idx].ipaddr) == ERR_OK) {
 8011024:	79fa      	ldrb	r2, [r7, #7]
 8011026:	4613      	mov	r3, r2
 8011028:	005b      	lsls	r3, r3, #1
 801102a:	4413      	add	r3, r2
 801102c:	00db      	lsls	r3, r3, #3
 801102e:	4a2e      	ldr	r2, [pc, #184]	; (80110e8 <etharp_output_to_arp_index+0x124>)
 8011030:	4413      	add	r3, r2
 8011032:	3304      	adds	r3, #4
 8011034:	4619      	mov	r1, r3
 8011036:	68f8      	ldr	r0, [r7, #12]
 8011038:	f000 fb60 	bl	80116fc <etharp_request>
 801103c:	4603      	mov	r3, r0
 801103e:	2b00      	cmp	r3, #0
 8011040:	d138      	bne.n	80110b4 <etharp_output_to_arp_index+0xf0>
        arp_table[arp_idx].state = ETHARP_STATE_STABLE_REREQUESTING_1;
 8011042:	79fa      	ldrb	r2, [r7, #7]
 8011044:	4928      	ldr	r1, [pc, #160]	; (80110e8 <etharp_output_to_arp_index+0x124>)
 8011046:	4613      	mov	r3, r2
 8011048:	005b      	lsls	r3, r3, #1
 801104a:	4413      	add	r3, r2
 801104c:	00db      	lsls	r3, r3, #3
 801104e:	440b      	add	r3, r1
 8011050:	3314      	adds	r3, #20
 8011052:	2203      	movs	r2, #3
 8011054:	701a      	strb	r2, [r3, #0]
 8011056:	e02d      	b.n	80110b4 <etharp_output_to_arp_index+0xf0>
      }
    } else if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_UNICAST) {
 8011058:	79fa      	ldrb	r2, [r7, #7]
 801105a:	4923      	ldr	r1, [pc, #140]	; (80110e8 <etharp_output_to_arp_index+0x124>)
 801105c:	4613      	mov	r3, r2
 801105e:	005b      	lsls	r3, r3, #1
 8011060:	4413      	add	r3, r2
 8011062:	00db      	lsls	r3, r3, #3
 8011064:	440b      	add	r3, r1
 8011066:	3312      	adds	r3, #18
 8011068:	881b      	ldrh	r3, [r3, #0]
 801106a:	f5b3 7f87 	cmp.w	r3, #270	; 0x10e
 801106e:	d321      	bcc.n	80110b4 <etharp_output_to_arp_index+0xf0>
      /* issue a unicast request (for 15 seconds) to prevent unnecessary broadcast */
      if (etharp_request_dst(netif, &arp_table[arp_idx].ipaddr, &arp_table[arp_idx].ethaddr) == ERR_OK) {
 8011070:	79fa      	ldrb	r2, [r7, #7]
 8011072:	4613      	mov	r3, r2
 8011074:	005b      	lsls	r3, r3, #1
 8011076:	4413      	add	r3, r2
 8011078:	00db      	lsls	r3, r3, #3
 801107a:	4a1b      	ldr	r2, [pc, #108]	; (80110e8 <etharp_output_to_arp_index+0x124>)
 801107c:	4413      	add	r3, r2
 801107e:	1d19      	adds	r1, r3, #4
 8011080:	79fa      	ldrb	r2, [r7, #7]
 8011082:	4613      	mov	r3, r2
 8011084:	005b      	lsls	r3, r3, #1
 8011086:	4413      	add	r3, r2
 8011088:	00db      	lsls	r3, r3, #3
 801108a:	3308      	adds	r3, #8
 801108c:	4a16      	ldr	r2, [pc, #88]	; (80110e8 <etharp_output_to_arp_index+0x124>)
 801108e:	4413      	add	r3, r2
 8011090:	3304      	adds	r3, #4
 8011092:	461a      	mov	r2, r3
 8011094:	68f8      	ldr	r0, [r7, #12]
 8011096:	f000 fb0f 	bl	80116b8 <etharp_request_dst>
 801109a:	4603      	mov	r3, r0
 801109c:	2b00      	cmp	r3, #0
 801109e:	d109      	bne.n	80110b4 <etharp_output_to_arp_index+0xf0>
        arp_table[arp_idx].state = ETHARP_STATE_STABLE_REREQUESTING_1;
 80110a0:	79fa      	ldrb	r2, [r7, #7]
 80110a2:	4911      	ldr	r1, [pc, #68]	; (80110e8 <etharp_output_to_arp_index+0x124>)
 80110a4:	4613      	mov	r3, r2
 80110a6:	005b      	lsls	r3, r3, #1
 80110a8:	4413      	add	r3, r2
 80110aa:	00db      	lsls	r3, r3, #3
 80110ac:	440b      	add	r3, r1
 80110ae:	3314      	adds	r3, #20
 80110b0:	2203      	movs	r2, #3
 80110b2:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  return ethernet_output(netif, q, (struct eth_addr*)(netif->hwaddr), &arp_table[arp_idx].ethaddr, ETHTYPE_IP);
 80110b4:	68fb      	ldr	r3, [r7, #12]
 80110b6:	f103 0129 	add.w	r1, r3, #41	; 0x29
 80110ba:	79fa      	ldrb	r2, [r7, #7]
 80110bc:	4613      	mov	r3, r2
 80110be:	005b      	lsls	r3, r3, #1
 80110c0:	4413      	add	r3, r2
 80110c2:	00db      	lsls	r3, r3, #3
 80110c4:	3308      	adds	r3, #8
 80110c6:	4a08      	ldr	r2, [pc, #32]	; (80110e8 <etharp_output_to_arp_index+0x124>)
 80110c8:	4413      	add	r3, r2
 80110ca:	1d1a      	adds	r2, r3, #4
 80110cc:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80110d0:	9300      	str	r3, [sp, #0]
 80110d2:	4613      	mov	r3, r2
 80110d4:	460a      	mov	r2, r1
 80110d6:	68b9      	ldr	r1, [r7, #8]
 80110d8:	68f8      	ldr	r0, [r7, #12]
 80110da:	f001 fdcb 	bl	8012c74 <ethernet_output>
 80110de:	4603      	mov	r3, r0
}
 80110e0:	4618      	mov	r0, r3
 80110e2:	3710      	adds	r7, #16
 80110e4:	46bd      	mov	sp, r7
 80110e6:	bd80      	pop	{r7, pc}
 80110e8:	2400864c 	.word	0x2400864c
 80110ec:	0801b858 	.word	0x0801b858
 80110f0:	0801b9c8 	.word	0x0801b9c8
 80110f4:	0801b8d0 	.word	0x0801b8d0

080110f8 <etharp_output>:
 * - ERR_RTE No route to destination (no gateway to external networks),
 * or the return type of either etharp_query() or ethernet_output().
 */
err_t
etharp_output(struct netif *netif, struct pbuf *q, const ip4_addr_t *ipaddr)
{
 80110f8:	b580      	push	{r7, lr}
 80110fa:	b08a      	sub	sp, #40	; 0x28
 80110fc:	af02      	add	r7, sp, #8
 80110fe:	60f8      	str	r0, [r7, #12]
 8011100:	60b9      	str	r1, [r7, #8]
 8011102:	607a      	str	r2, [r7, #4]
  const struct eth_addr *dest;
  struct eth_addr mcastaddr;
  const ip4_addr_t *dst_addr = ipaddr;
 8011104:	687b      	ldr	r3, [r7, #4]
 8011106:	61bb      	str	r3, [r7, #24]

  LWIP_ASSERT("netif != NULL", netif != NULL);
 8011108:	68fb      	ldr	r3, [r7, #12]
 801110a:	2b00      	cmp	r3, #0
 801110c:	d106      	bne.n	801111c <etharp_output+0x24>
 801110e:	4b77      	ldr	r3, [pc, #476]	; (80112ec <etharp_output+0x1f4>)
 8011110:	f240 321b 	movw	r2, #795	; 0x31b
 8011114:	4976      	ldr	r1, [pc, #472]	; (80112f0 <etharp_output+0x1f8>)
 8011116:	4877      	ldr	r0, [pc, #476]	; (80112f4 <etharp_output+0x1fc>)
 8011118:	f004 fd5c 	bl	8015bd4 <printf_>
  LWIP_ASSERT("q != NULL", q != NULL);
 801111c:	68bb      	ldr	r3, [r7, #8]
 801111e:	2b00      	cmp	r3, #0
 8011120:	d106      	bne.n	8011130 <etharp_output+0x38>
 8011122:	4b72      	ldr	r3, [pc, #456]	; (80112ec <etharp_output+0x1f4>)
 8011124:	f44f 7247 	mov.w	r2, #796	; 0x31c
 8011128:	4973      	ldr	r1, [pc, #460]	; (80112f8 <etharp_output+0x200>)
 801112a:	4872      	ldr	r0, [pc, #456]	; (80112f4 <etharp_output+0x1fc>)
 801112c:	f004 fd52 	bl	8015bd4 <printf_>
  LWIP_ASSERT("ipaddr != NULL", ipaddr != NULL);
 8011130:	687b      	ldr	r3, [r7, #4]
 8011132:	2b00      	cmp	r3, #0
 8011134:	d106      	bne.n	8011144 <etharp_output+0x4c>
 8011136:	4b6d      	ldr	r3, [pc, #436]	; (80112ec <etharp_output+0x1f4>)
 8011138:	f240 321d 	movw	r2, #797	; 0x31d
 801113c:	496f      	ldr	r1, [pc, #444]	; (80112fc <etharp_output+0x204>)
 801113e:	486d      	ldr	r0, [pc, #436]	; (80112f4 <etharp_output+0x1fc>)
 8011140:	f004 fd48 	bl	8015bd4 <printf_>

  /* Determine on destination hardware address. Broadcasts and multicasts
   * are special, other IP addresses are looked up in the ARP table. */

  /* broadcast destination IP address? */
  if (ip4_addr_isbroadcast(ipaddr, netif)) {
 8011144:	687b      	ldr	r3, [r7, #4]
 8011146:	681b      	ldr	r3, [r3, #0]
 8011148:	68f9      	ldr	r1, [r7, #12]
 801114a:	4618      	mov	r0, r3
 801114c:	f000 fef0 	bl	8011f30 <ip4_addr_isbroadcast_u32>
 8011150:	4603      	mov	r3, r0
 8011152:	2b00      	cmp	r3, #0
 8011154:	d002      	beq.n	801115c <etharp_output+0x64>
    /* broadcast on Ethernet also */
    dest = (const struct eth_addr *)&ethbroadcast;
 8011156:	4b6a      	ldr	r3, [pc, #424]	; (8011300 <etharp_output+0x208>)
 8011158:	61fb      	str	r3, [r7, #28]
 801115a:	e0b6      	b.n	80112ca <etharp_output+0x1d2>
  /* multicast destination IP address? */
  } else if (ip4_addr_ismulticast(ipaddr)) {
 801115c:	687b      	ldr	r3, [r7, #4]
 801115e:	681b      	ldr	r3, [r3, #0]
 8011160:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8011164:	2be0      	cmp	r3, #224	; 0xe0
 8011166:	d118      	bne.n	801119a <etharp_output+0xa2>
    /* Hash IP multicast address to MAC address.*/
    mcastaddr.addr[0] = LL_IP4_MULTICAST_ADDR_0;
 8011168:	2301      	movs	r3, #1
 801116a:	743b      	strb	r3, [r7, #16]
    mcastaddr.addr[1] = LL_IP4_MULTICAST_ADDR_1;
 801116c:	2300      	movs	r3, #0
 801116e:	747b      	strb	r3, [r7, #17]
    mcastaddr.addr[2] = LL_IP4_MULTICAST_ADDR_2;
 8011170:	235e      	movs	r3, #94	; 0x5e
 8011172:	74bb      	strb	r3, [r7, #18]
    mcastaddr.addr[3] = ip4_addr2(ipaddr) & 0x7f;
 8011174:	687b      	ldr	r3, [r7, #4]
 8011176:	3301      	adds	r3, #1
 8011178:	781b      	ldrb	r3, [r3, #0]
 801117a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 801117e:	b2db      	uxtb	r3, r3
 8011180:	74fb      	strb	r3, [r7, #19]
    mcastaddr.addr[4] = ip4_addr3(ipaddr);
 8011182:	687b      	ldr	r3, [r7, #4]
 8011184:	3302      	adds	r3, #2
 8011186:	781b      	ldrb	r3, [r3, #0]
 8011188:	753b      	strb	r3, [r7, #20]
    mcastaddr.addr[5] = ip4_addr4(ipaddr);
 801118a:	687b      	ldr	r3, [r7, #4]
 801118c:	3303      	adds	r3, #3
 801118e:	781b      	ldrb	r3, [r3, #0]
 8011190:	757b      	strb	r3, [r7, #21]
    /* destination Ethernet address is multicast */
    dest = &mcastaddr;
 8011192:	f107 0310 	add.w	r3, r7, #16
 8011196:	61fb      	str	r3, [r7, #28]
 8011198:	e097      	b.n	80112ca <etharp_output+0x1d2>
  /* unicast destination IP address? */
  } else {
    s8_t i;
    /* outside local network? if so, this can neither be a global broadcast nor
       a subnet broadcast. */
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
 801119a:	687b      	ldr	r3, [r7, #4]
 801119c:	681a      	ldr	r2, [r3, #0]
 801119e:	68fb      	ldr	r3, [r7, #12]
 80111a0:	3304      	adds	r3, #4
 80111a2:	681b      	ldr	r3, [r3, #0]
 80111a4:	405a      	eors	r2, r3
 80111a6:	68fb      	ldr	r3, [r7, #12]
 80111a8:	3308      	adds	r3, #8
 80111aa:	681b      	ldr	r3, [r3, #0]
 80111ac:	4013      	ands	r3, r2
 80111ae:	2b00      	cmp	r3, #0
 80111b0:	d012      	beq.n	80111d8 <etharp_output+0xe0>
        !ip4_addr_islinklocal(ipaddr)) {
 80111b2:	687b      	ldr	r3, [r7, #4]
 80111b4:	681b      	ldr	r3, [r3, #0]
 80111b6:	b29b      	uxth	r3, r3
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
 80111b8:	f64f 62a9 	movw	r2, #65193	; 0xfea9
 80111bc:	4293      	cmp	r3, r2
 80111be:	d00b      	beq.n	80111d8 <etharp_output+0xe0>
        dst_addr = LWIP_HOOK_ETHARP_GET_GW(netif, ipaddr);
        if (dst_addr == NULL)
#endif /* LWIP_HOOK_ETHARP_GET_GW */
        {
          /* interface has default gateway? */
          if (!ip4_addr_isany_val(*netif_ip4_gw(netif))) {
 80111c0:	68fb      	ldr	r3, [r7, #12]
 80111c2:	330c      	adds	r3, #12
 80111c4:	681b      	ldr	r3, [r3, #0]
 80111c6:	2b00      	cmp	r3, #0
 80111c8:	d003      	beq.n	80111d2 <etharp_output+0xda>
            /* send to hardware address of default gateway IP address */
            dst_addr = netif_ip4_gw(netif);
 80111ca:	68fb      	ldr	r3, [r7, #12]
 80111cc:	330c      	adds	r3, #12
 80111ce:	61bb      	str	r3, [r7, #24]
 80111d0:	e002      	b.n	80111d8 <etharp_output+0xe0>
          /* no default gateway available */
          } else {
            /* no route to destination error (default gateway missing) */
            return ERR_RTE;
 80111d2:	f06f 0303 	mvn.w	r3, #3
 80111d6:	e084      	b.n	80112e2 <etharp_output+0x1ea>
    if (netif->addr_hint != NULL) {
      /* per-pcb cached entry was given */
      u8_t etharp_cached_entry = *(netif->addr_hint);
      if (etharp_cached_entry < ARP_TABLE_SIZE) {
#endif /* LWIP_NETIF_HWADDRHINT */
        if ((arp_table[etharp_cached_entry].state >= ETHARP_STATE_STABLE) &&
 80111d8:	4b4a      	ldr	r3, [pc, #296]	; (8011304 <etharp_output+0x20c>)
 80111da:	781b      	ldrb	r3, [r3, #0]
 80111dc:	4619      	mov	r1, r3
 80111de:	4a4a      	ldr	r2, [pc, #296]	; (8011308 <etharp_output+0x210>)
 80111e0:	460b      	mov	r3, r1
 80111e2:	005b      	lsls	r3, r3, #1
 80111e4:	440b      	add	r3, r1
 80111e6:	00db      	lsls	r3, r3, #3
 80111e8:	4413      	add	r3, r2
 80111ea:	3314      	adds	r3, #20
 80111ec:	781b      	ldrb	r3, [r3, #0]
 80111ee:	2b01      	cmp	r3, #1
 80111f0:	d925      	bls.n	801123e <etharp_output+0x146>
#if ETHARP_TABLE_MATCH_NETIF
            (arp_table[etharp_cached_entry].netif == netif) &&
 80111f2:	4b44      	ldr	r3, [pc, #272]	; (8011304 <etharp_output+0x20c>)
 80111f4:	781b      	ldrb	r3, [r3, #0]
 80111f6:	4619      	mov	r1, r3
 80111f8:	4a43      	ldr	r2, [pc, #268]	; (8011308 <etharp_output+0x210>)
 80111fa:	460b      	mov	r3, r1
 80111fc:	005b      	lsls	r3, r3, #1
 80111fe:	440b      	add	r3, r1
 8011200:	00db      	lsls	r3, r3, #3
 8011202:	4413      	add	r3, r2
 8011204:	3308      	adds	r3, #8
 8011206:	681b      	ldr	r3, [r3, #0]
        if ((arp_table[etharp_cached_entry].state >= ETHARP_STATE_STABLE) &&
 8011208:	68fa      	ldr	r2, [r7, #12]
 801120a:	429a      	cmp	r2, r3
 801120c:	d117      	bne.n	801123e <etharp_output+0x146>
#endif
            (ip4_addr_cmp(dst_addr, &arp_table[etharp_cached_entry].ipaddr))) {
 801120e:	69bb      	ldr	r3, [r7, #24]
 8011210:	681a      	ldr	r2, [r3, #0]
 8011212:	4b3c      	ldr	r3, [pc, #240]	; (8011304 <etharp_output+0x20c>)
 8011214:	781b      	ldrb	r3, [r3, #0]
 8011216:	4618      	mov	r0, r3
 8011218:	493b      	ldr	r1, [pc, #236]	; (8011308 <etharp_output+0x210>)
 801121a:	4603      	mov	r3, r0
 801121c:	005b      	lsls	r3, r3, #1
 801121e:	4403      	add	r3, r0
 8011220:	00db      	lsls	r3, r3, #3
 8011222:	440b      	add	r3, r1
 8011224:	3304      	adds	r3, #4
 8011226:	681b      	ldr	r3, [r3, #0]
            (arp_table[etharp_cached_entry].netif == netif) &&
 8011228:	429a      	cmp	r2, r3
 801122a:	d108      	bne.n	801123e <etharp_output+0x146>
          /* the per-pcb-cached entry is stable and the right one! */
          ETHARP_STATS_INC(etharp.cachehit);
          return etharp_output_to_arp_index(netif, q, etharp_cached_entry);
 801122c:	4b35      	ldr	r3, [pc, #212]	; (8011304 <etharp_output+0x20c>)
 801122e:	781b      	ldrb	r3, [r3, #0]
 8011230:	461a      	mov	r2, r3
 8011232:	68b9      	ldr	r1, [r7, #8]
 8011234:	68f8      	ldr	r0, [r7, #12]
 8011236:	f7ff fec5 	bl	8010fc4 <etharp_output_to_arp_index>
 801123a:	4603      	mov	r3, r0
 801123c:	e051      	b.n	80112e2 <etharp_output+0x1ea>
    }
#endif /* LWIP_NETIF_HWADDRHINT */

    /* find stable entry: do this here since this is a critical path for
       throughput and etharp_find_entry() is kind of slow */
    for (i = 0; i < ARP_TABLE_SIZE; i++) {
 801123e:	2300      	movs	r3, #0
 8011240:	75fb      	strb	r3, [r7, #23]
 8011242:	e037      	b.n	80112b4 <etharp_output+0x1bc>
      if ((arp_table[i].state >= ETHARP_STATE_STABLE) &&
 8011244:	f997 2017 	ldrsb.w	r2, [r7, #23]
 8011248:	492f      	ldr	r1, [pc, #188]	; (8011308 <etharp_output+0x210>)
 801124a:	4613      	mov	r3, r2
 801124c:	005b      	lsls	r3, r3, #1
 801124e:	4413      	add	r3, r2
 8011250:	00db      	lsls	r3, r3, #3
 8011252:	440b      	add	r3, r1
 8011254:	3314      	adds	r3, #20
 8011256:	781b      	ldrb	r3, [r3, #0]
 8011258:	2b01      	cmp	r3, #1
 801125a:	d925      	bls.n	80112a8 <etharp_output+0x1b0>
#if ETHARP_TABLE_MATCH_NETIF
          (arp_table[i].netif == netif) &&
 801125c:	f997 2017 	ldrsb.w	r2, [r7, #23]
 8011260:	4929      	ldr	r1, [pc, #164]	; (8011308 <etharp_output+0x210>)
 8011262:	4613      	mov	r3, r2
 8011264:	005b      	lsls	r3, r3, #1
 8011266:	4413      	add	r3, r2
 8011268:	00db      	lsls	r3, r3, #3
 801126a:	440b      	add	r3, r1
 801126c:	3308      	adds	r3, #8
 801126e:	681b      	ldr	r3, [r3, #0]
      if ((arp_table[i].state >= ETHARP_STATE_STABLE) &&
 8011270:	68fa      	ldr	r2, [r7, #12]
 8011272:	429a      	cmp	r2, r3
 8011274:	d118      	bne.n	80112a8 <etharp_output+0x1b0>
#endif
          (ip4_addr_cmp(dst_addr, &arp_table[i].ipaddr))) {
 8011276:	69bb      	ldr	r3, [r7, #24]
 8011278:	6819      	ldr	r1, [r3, #0]
 801127a:	f997 2017 	ldrsb.w	r2, [r7, #23]
 801127e:	4822      	ldr	r0, [pc, #136]	; (8011308 <etharp_output+0x210>)
 8011280:	4613      	mov	r3, r2
 8011282:	005b      	lsls	r3, r3, #1
 8011284:	4413      	add	r3, r2
 8011286:	00db      	lsls	r3, r3, #3
 8011288:	4403      	add	r3, r0
 801128a:	3304      	adds	r3, #4
 801128c:	681b      	ldr	r3, [r3, #0]
          (arp_table[i].netif == netif) &&
 801128e:	4299      	cmp	r1, r3
 8011290:	d10a      	bne.n	80112a8 <etharp_output+0x1b0>
        /* found an existing, stable entry */
        ETHARP_SET_HINT(netif, i);
 8011292:	7dfa      	ldrb	r2, [r7, #23]
 8011294:	4b1b      	ldr	r3, [pc, #108]	; (8011304 <etharp_output+0x20c>)
 8011296:	701a      	strb	r2, [r3, #0]
        return etharp_output_to_arp_index(netif, q, i);
 8011298:	7dfb      	ldrb	r3, [r7, #23]
 801129a:	461a      	mov	r2, r3
 801129c:	68b9      	ldr	r1, [r7, #8]
 801129e:	68f8      	ldr	r0, [r7, #12]
 80112a0:	f7ff fe90 	bl	8010fc4 <etharp_output_to_arp_index>
 80112a4:	4603      	mov	r3, r0
 80112a6:	e01c      	b.n	80112e2 <etharp_output+0x1ea>
    for (i = 0; i < ARP_TABLE_SIZE; i++) {
 80112a8:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80112ac:	b2db      	uxtb	r3, r3
 80112ae:	3301      	adds	r3, #1
 80112b0:	b2db      	uxtb	r3, r3
 80112b2:	75fb      	strb	r3, [r7, #23]
 80112b4:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80112b8:	2b09      	cmp	r3, #9
 80112ba:	ddc3      	ble.n	8011244 <etharp_output+0x14c>
      }
    }
    /* no stable entry found, use the (slower) query function:
       queue on destination Ethernet address belonging to ipaddr */
    return etharp_query(netif, dst_addr, q);
 80112bc:	68ba      	ldr	r2, [r7, #8]
 80112be:	69b9      	ldr	r1, [r7, #24]
 80112c0:	68f8      	ldr	r0, [r7, #12]
 80112c2:	f000 f823 	bl	801130c <etharp_query>
 80112c6:	4603      	mov	r3, r0
 80112c8:	e00b      	b.n	80112e2 <etharp_output+0x1ea>
  }

  /* continuation for multicast/broadcast destinations */
  /* obtain source Ethernet address of the given interface */
  /* send packet directly on the link */
  return ethernet_output(netif, q, (struct eth_addr*)(netif->hwaddr), dest, ETHTYPE_IP);
 80112ca:	68fb      	ldr	r3, [r7, #12]
 80112cc:	f103 0229 	add.w	r2, r3, #41	; 0x29
 80112d0:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80112d4:	9300      	str	r3, [sp, #0]
 80112d6:	69fb      	ldr	r3, [r7, #28]
 80112d8:	68b9      	ldr	r1, [r7, #8]
 80112da:	68f8      	ldr	r0, [r7, #12]
 80112dc:	f001 fcca 	bl	8012c74 <ethernet_output>
 80112e0:	4603      	mov	r3, r0
}
 80112e2:	4618      	mov	r0, r3
 80112e4:	3720      	adds	r7, #32
 80112e6:	46bd      	mov	sp, r7
 80112e8:	bd80      	pop	{r7, pc}
 80112ea:	bf00      	nop
 80112ec:	0801b858 	.word	0x0801b858
 80112f0:	0801b9a8 	.word	0x0801b9a8
 80112f4:	0801b8d0 	.word	0x0801b8d0
 80112f8:	0801b9f8 	.word	0x0801b9f8
 80112fc:	0801b998 	.word	0x0801b998
 8011300:	0801c164 	.word	0x0801c164
 8011304:	2400873c 	.word	0x2400873c
 8011308:	2400864c 	.word	0x2400864c

0801130c <etharp_query>:
 * - ERR_ARG Non-unicast address given, those will not appear in ARP cache.
 *
 */
err_t
etharp_query(struct netif *netif, const ip4_addr_t *ipaddr, struct pbuf *q)
{
 801130c:	b580      	push	{r7, lr}
 801130e:	b08c      	sub	sp, #48	; 0x30
 8011310:	af02      	add	r7, sp, #8
 8011312:	60f8      	str	r0, [r7, #12]
 8011314:	60b9      	str	r1, [r7, #8]
 8011316:	607a      	str	r2, [r7, #4]
  struct eth_addr * srcaddr = (struct eth_addr *)netif->hwaddr;
 8011318:	68fb      	ldr	r3, [r7, #12]
 801131a:	3329      	adds	r3, #41	; 0x29
 801131c:	617b      	str	r3, [r7, #20]
  err_t result = ERR_MEM;
 801131e:	23ff      	movs	r3, #255	; 0xff
 8011320:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  int is_new_entry = 0;
 8011324:	2300      	movs	r3, #0
 8011326:	623b      	str	r3, [r7, #32]
  s8_t i; /* ARP entry index */

  /* non-unicast address? */
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 8011328:	68bb      	ldr	r3, [r7, #8]
 801132a:	681b      	ldr	r3, [r3, #0]
 801132c:	68f9      	ldr	r1, [r7, #12]
 801132e:	4618      	mov	r0, r3
 8011330:	f000 fdfe 	bl	8011f30 <ip4_addr_isbroadcast_u32>
 8011334:	4603      	mov	r3, r0
 8011336:	2b00      	cmp	r3, #0
 8011338:	d10c      	bne.n	8011354 <etharp_query+0x48>
      ip4_addr_ismulticast(ipaddr) ||
 801133a:	68bb      	ldr	r3, [r7, #8]
 801133c:	681b      	ldr	r3, [r3, #0]
 801133e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 8011342:	2be0      	cmp	r3, #224	; 0xe0
 8011344:	d006      	beq.n	8011354 <etharp_query+0x48>
      ip4_addr_ismulticast(ipaddr) ||
 8011346:	68bb      	ldr	r3, [r7, #8]
 8011348:	2b00      	cmp	r3, #0
 801134a:	d003      	beq.n	8011354 <etharp_query+0x48>
      ip4_addr_isany(ipaddr)) {
 801134c:	68bb      	ldr	r3, [r7, #8]
 801134e:	681b      	ldr	r3, [r3, #0]
 8011350:	2b00      	cmp	r3, #0
 8011352:	d102      	bne.n	801135a <etharp_query+0x4e>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: will not add non-unicast IP address to ARP cache\n"));
    return ERR_ARG;
 8011354:	f06f 030f 	mvn.w	r3, #15
 8011358:	e10f      	b.n	801157a <etharp_query+0x26e>
  }

  /* find entry in ARP cache, ask to create entry if queueing packet */
  i = etharp_find_entry(ipaddr, ETHARP_FLAG_TRY_HARD, netif);
 801135a:	68fa      	ldr	r2, [r7, #12]
 801135c:	2101      	movs	r1, #1
 801135e:	68b8      	ldr	r0, [r7, #8]
 8011360:	f7ff fb6c 	bl	8010a3c <etharp_find_entry>
 8011364:	4603      	mov	r3, r0
 8011366:	74fb      	strb	r3, [r7, #19]

  /* could not find or create entry? */
  if (i < 0) {
 8011368:	f997 3013 	ldrsb.w	r3, [r7, #19]
 801136c:	2b00      	cmp	r3, #0
 801136e:	da02      	bge.n	8011376 <etharp_query+0x6a>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not create ARP entry\n"));
    if (q) {
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: packet dropped\n"));
      ETHARP_STATS_INC(etharp.memerr);
    }
    return (err_t)i;
 8011370:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8011374:	e101      	b.n	801157a <etharp_query+0x26e>
  }

  /* mark a fresh entry as pending (we just sent a request) */
  if (arp_table[i].state == ETHARP_STATE_EMPTY) {
 8011376:	f997 2013 	ldrsb.w	r2, [r7, #19]
 801137a:	4982      	ldr	r1, [pc, #520]	; (8011584 <etharp_query+0x278>)
 801137c:	4613      	mov	r3, r2
 801137e:	005b      	lsls	r3, r3, #1
 8011380:	4413      	add	r3, r2
 8011382:	00db      	lsls	r3, r3, #3
 8011384:	440b      	add	r3, r1
 8011386:	3314      	adds	r3, #20
 8011388:	781b      	ldrb	r3, [r3, #0]
 801138a:	2b00      	cmp	r3, #0
 801138c:	d117      	bne.n	80113be <etharp_query+0xb2>
    is_new_entry = 1;
 801138e:	2301      	movs	r3, #1
 8011390:	623b      	str	r3, [r7, #32]
    arp_table[i].state = ETHARP_STATE_PENDING;
 8011392:	f997 2013 	ldrsb.w	r2, [r7, #19]
 8011396:	497b      	ldr	r1, [pc, #492]	; (8011584 <etharp_query+0x278>)
 8011398:	4613      	mov	r3, r2
 801139a:	005b      	lsls	r3, r3, #1
 801139c:	4413      	add	r3, r2
 801139e:	00db      	lsls	r3, r3, #3
 80113a0:	440b      	add	r3, r1
 80113a2:	3314      	adds	r3, #20
 80113a4:	2201      	movs	r2, #1
 80113a6:	701a      	strb	r2, [r3, #0]
    /* record network interface for re-sending arp request in etharp_tmr */
    arp_table[i].netif = netif;
 80113a8:	f997 2013 	ldrsb.w	r2, [r7, #19]
 80113ac:	4975      	ldr	r1, [pc, #468]	; (8011584 <etharp_query+0x278>)
 80113ae:	4613      	mov	r3, r2
 80113b0:	005b      	lsls	r3, r3, #1
 80113b2:	4413      	add	r3, r2
 80113b4:	00db      	lsls	r3, r3, #3
 80113b6:	440b      	add	r3, r1
 80113b8:	3308      	adds	r3, #8
 80113ba:	68fa      	ldr	r2, [r7, #12]
 80113bc:	601a      	str	r2, [r3, #0]
  }

  /* { i is either a STABLE or (new or existing) PENDING entry } */
  LWIP_ASSERT("arp_table[i].state == PENDING or STABLE",
 80113be:	f997 2013 	ldrsb.w	r2, [r7, #19]
 80113c2:	4970      	ldr	r1, [pc, #448]	; (8011584 <etharp_query+0x278>)
 80113c4:	4613      	mov	r3, r2
 80113c6:	005b      	lsls	r3, r3, #1
 80113c8:	4413      	add	r3, r2
 80113ca:	00db      	lsls	r3, r3, #3
 80113cc:	440b      	add	r3, r1
 80113ce:	3314      	adds	r3, #20
 80113d0:	781b      	ldrb	r3, [r3, #0]
 80113d2:	2b01      	cmp	r3, #1
 80113d4:	d012      	beq.n	80113fc <etharp_query+0xf0>
 80113d6:	f997 2013 	ldrsb.w	r2, [r7, #19]
 80113da:	496a      	ldr	r1, [pc, #424]	; (8011584 <etharp_query+0x278>)
 80113dc:	4613      	mov	r3, r2
 80113de:	005b      	lsls	r3, r3, #1
 80113e0:	4413      	add	r3, r2
 80113e2:	00db      	lsls	r3, r3, #3
 80113e4:	440b      	add	r3, r1
 80113e6:	3314      	adds	r3, #20
 80113e8:	781b      	ldrb	r3, [r3, #0]
 80113ea:	2b01      	cmp	r3, #1
 80113ec:	d806      	bhi.n	80113fc <etharp_query+0xf0>
 80113ee:	4b66      	ldr	r3, [pc, #408]	; (8011588 <etharp_query+0x27c>)
 80113f0:	f240 32c9 	movw	r2, #969	; 0x3c9
 80113f4:	4965      	ldr	r1, [pc, #404]	; (801158c <etharp_query+0x280>)
 80113f6:	4866      	ldr	r0, [pc, #408]	; (8011590 <etharp_query+0x284>)
 80113f8:	f004 fbec 	bl	8015bd4 <printf_>
  ((arp_table[i].state == ETHARP_STATE_PENDING) ||
   (arp_table[i].state >= ETHARP_STATE_STABLE)));

  /* do we have a new entry? or an implicit query request? */
  if (is_new_entry || (q == NULL)) {
 80113fc:	6a3b      	ldr	r3, [r7, #32]
 80113fe:	2b00      	cmp	r3, #0
 8011400:	d102      	bne.n	8011408 <etharp_query+0xfc>
 8011402:	687b      	ldr	r3, [r7, #4]
 8011404:	2b00      	cmp	r3, #0
 8011406:	d10c      	bne.n	8011422 <etharp_query+0x116>
    /* try to resolve it; send out ARP request */
    result = etharp_request(netif, ipaddr);
 8011408:	68b9      	ldr	r1, [r7, #8]
 801140a:	68f8      	ldr	r0, [r7, #12]
 801140c:	f000 f976 	bl	80116fc <etharp_request>
 8011410:	4603      	mov	r3, r0
 8011412:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      /* ARP request couldn't be sent */
      /* We don't re-send arp request in etharp_tmr, but we still queue packets,
         since this failure could be temporary, and the next packet calling
         etharp_query again could lead to sending the queued packets. */
    }
    if (q == NULL) {
 8011416:	687b      	ldr	r3, [r7, #4]
 8011418:	2b00      	cmp	r3, #0
 801141a:	d102      	bne.n	8011422 <etharp_query+0x116>
      return result;
 801141c:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8011420:	e0ab      	b.n	801157a <etharp_query+0x26e>
    }
  }

  /* packet given? */
  LWIP_ASSERT("q != NULL", q != NULL);
 8011422:	687b      	ldr	r3, [r7, #4]
 8011424:	2b00      	cmp	r3, #0
 8011426:	d106      	bne.n	8011436 <etharp_query+0x12a>
 8011428:	4b57      	ldr	r3, [pc, #348]	; (8011588 <etharp_query+0x27c>)
 801142a:	f240 32db 	movw	r2, #987	; 0x3db
 801142e:	4959      	ldr	r1, [pc, #356]	; (8011594 <etharp_query+0x288>)
 8011430:	4857      	ldr	r0, [pc, #348]	; (8011590 <etharp_query+0x284>)
 8011432:	f004 fbcf 	bl	8015bd4 <printf_>
  /* stable entry? */
  if (arp_table[i].state >= ETHARP_STATE_STABLE) {
 8011436:	f997 2013 	ldrsb.w	r2, [r7, #19]
 801143a:	4952      	ldr	r1, [pc, #328]	; (8011584 <etharp_query+0x278>)
 801143c:	4613      	mov	r3, r2
 801143e:	005b      	lsls	r3, r3, #1
 8011440:	4413      	add	r3, r2
 8011442:	00db      	lsls	r3, r3, #3
 8011444:	440b      	add	r3, r1
 8011446:	3314      	adds	r3, #20
 8011448:	781b      	ldrb	r3, [r3, #0]
 801144a:	2b01      	cmp	r3, #1
 801144c:	d919      	bls.n	8011482 <etharp_query+0x176>
    /* we have a valid IP->Ethernet address mapping */
    ETHARP_SET_HINT(netif, i);
 801144e:	7cfa      	ldrb	r2, [r7, #19]
 8011450:	4b51      	ldr	r3, [pc, #324]	; (8011598 <etharp_query+0x28c>)
 8011452:	701a      	strb	r2, [r3, #0]
    /* send the packet */
    result = ethernet_output(netif, q, srcaddr, &(arp_table[i].ethaddr), ETHTYPE_IP);
 8011454:	f997 2013 	ldrsb.w	r2, [r7, #19]
 8011458:	4613      	mov	r3, r2
 801145a:	005b      	lsls	r3, r3, #1
 801145c:	4413      	add	r3, r2
 801145e:	00db      	lsls	r3, r3, #3
 8011460:	3308      	adds	r3, #8
 8011462:	4a48      	ldr	r2, [pc, #288]	; (8011584 <etharp_query+0x278>)
 8011464:	4413      	add	r3, r2
 8011466:	1d1a      	adds	r2, r3, #4
 8011468:	f44f 6300 	mov.w	r3, #2048	; 0x800
 801146c:	9300      	str	r3, [sp, #0]
 801146e:	4613      	mov	r3, r2
 8011470:	697a      	ldr	r2, [r7, #20]
 8011472:	6879      	ldr	r1, [r7, #4]
 8011474:	68f8      	ldr	r0, [r7, #12]
 8011476:	f001 fbfd 	bl	8012c74 <ethernet_output>
 801147a:	4603      	mov	r3, r0
 801147c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8011480:	e079      	b.n	8011576 <etharp_query+0x26a>
  /* pending entry? (either just created or already pending */
  } else if (arp_table[i].state == ETHARP_STATE_PENDING) {
 8011482:	f997 2013 	ldrsb.w	r2, [r7, #19]
 8011486:	493f      	ldr	r1, [pc, #252]	; (8011584 <etharp_query+0x278>)
 8011488:	4613      	mov	r3, r2
 801148a:	005b      	lsls	r3, r3, #1
 801148c:	4413      	add	r3, r2
 801148e:	00db      	lsls	r3, r3, #3
 8011490:	440b      	add	r3, r1
 8011492:	3314      	adds	r3, #20
 8011494:	781b      	ldrb	r3, [r3, #0]
 8011496:	2b01      	cmp	r3, #1
 8011498:	d16d      	bne.n	8011576 <etharp_query+0x26a>
    /* entry is still pending, queue the given packet 'q' */
    struct pbuf *p;
    int copy_needed = 0;
 801149a:	2300      	movs	r3, #0
 801149c:	61bb      	str	r3, [r7, #24]
    /* IF q includes a PBUF_REF, PBUF_POOL or PBUF_RAM, we have no choice but
     * to copy the whole queue into a new PBUF_RAM (see bug #11400)
     * PBUF_ROMs can be left as they are, since ROM must not get changed. */
    p = q;
 801149e:	687b      	ldr	r3, [r7, #4]
 80114a0:	61fb      	str	r3, [r7, #28]
    while (p) {
 80114a2:	e01a      	b.n	80114da <etharp_query+0x1ce>
      LWIP_ASSERT("no packet queues allowed!", (p->len != p->tot_len) || (p->next == 0));
 80114a4:	69fb      	ldr	r3, [r7, #28]
 80114a6:	895a      	ldrh	r2, [r3, #10]
 80114a8:	69fb      	ldr	r3, [r7, #28]
 80114aa:	891b      	ldrh	r3, [r3, #8]
 80114ac:	429a      	cmp	r2, r3
 80114ae:	d10a      	bne.n	80114c6 <etharp_query+0x1ba>
 80114b0:	69fb      	ldr	r3, [r7, #28]
 80114b2:	681b      	ldr	r3, [r3, #0]
 80114b4:	2b00      	cmp	r3, #0
 80114b6:	d006      	beq.n	80114c6 <etharp_query+0x1ba>
 80114b8:	4b33      	ldr	r3, [pc, #204]	; (8011588 <etharp_query+0x27c>)
 80114ba:	f44f 727b 	mov.w	r2, #1004	; 0x3ec
 80114be:	4937      	ldr	r1, [pc, #220]	; (801159c <etharp_query+0x290>)
 80114c0:	4833      	ldr	r0, [pc, #204]	; (8011590 <etharp_query+0x284>)
 80114c2:	f004 fb87 	bl	8015bd4 <printf_>
      if (p->type != PBUF_ROM) {
 80114c6:	69fb      	ldr	r3, [r7, #28]
 80114c8:	7b1b      	ldrb	r3, [r3, #12]
 80114ca:	2b01      	cmp	r3, #1
 80114cc:	d002      	beq.n	80114d4 <etharp_query+0x1c8>
        copy_needed = 1;
 80114ce:	2301      	movs	r3, #1
 80114d0:	61bb      	str	r3, [r7, #24]
        break;
 80114d2:	e005      	b.n	80114e0 <etharp_query+0x1d4>
      }
      p = p->next;
 80114d4:	69fb      	ldr	r3, [r7, #28]
 80114d6:	681b      	ldr	r3, [r3, #0]
 80114d8:	61fb      	str	r3, [r7, #28]
    while (p) {
 80114da:	69fb      	ldr	r3, [r7, #28]
 80114dc:	2b00      	cmp	r3, #0
 80114de:	d1e1      	bne.n	80114a4 <etharp_query+0x198>
    }
    if (copy_needed) {
 80114e0:	69bb      	ldr	r3, [r7, #24]
 80114e2:	2b00      	cmp	r3, #0
 80114e4:	d017      	beq.n	8011516 <etharp_query+0x20a>
      /* copy the whole packet into new pbufs */
      p = pbuf_alloc(PBUF_LINK, p->tot_len, PBUF_RAM);
 80114e6:	69fb      	ldr	r3, [r7, #28]
 80114e8:	891b      	ldrh	r3, [r3, #8]
 80114ea:	2200      	movs	r2, #0
 80114ec:	4619      	mov	r1, r3
 80114ee:	2002      	movs	r0, #2
 80114f0:	f7f8 fc6c 	bl	8009dcc <pbuf_alloc>
 80114f4:	61f8      	str	r0, [r7, #28]
      if (p != NULL) {
 80114f6:	69fb      	ldr	r3, [r7, #28]
 80114f8:	2b00      	cmp	r3, #0
 80114fa:	d011      	beq.n	8011520 <etharp_query+0x214>
        if (pbuf_copy(p, q) != ERR_OK) {
 80114fc:	6879      	ldr	r1, [r7, #4]
 80114fe:	69f8      	ldr	r0, [r7, #28]
 8011500:	f7f9 f916 	bl	800a730 <pbuf_copy>
 8011504:	4603      	mov	r3, r0
 8011506:	2b00      	cmp	r3, #0
 8011508:	d00a      	beq.n	8011520 <etharp_query+0x214>
          pbuf_free(p);
 801150a:	69f8      	ldr	r0, [r7, #28]
 801150c:	f7f8 ffd0 	bl	800a4b0 <pbuf_free>
          p = NULL;
 8011510:	2300      	movs	r3, #0
 8011512:	61fb      	str	r3, [r7, #28]
 8011514:	e004      	b.n	8011520 <etharp_query+0x214>
        }
      }
    } else {
      /* referencing the old pbuf is enough */
      p = q;
 8011516:	687b      	ldr	r3, [r7, #4]
 8011518:	61fb      	str	r3, [r7, #28]
      pbuf_ref(p);
 801151a:	69f8      	ldr	r0, [r7, #28]
 801151c:	f7f9 f87a 	bl	800a614 <pbuf_ref>
    }
    /* packet could be taken over? */
    if (p != NULL) {
 8011520:	69fb      	ldr	r3, [r7, #28]
 8011522:	2b00      	cmp	r3, #0
 8011524:	d024      	beq.n	8011570 <etharp_query+0x264>
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not queue a copy of PBUF_REF packet %p (out of memory)\n", (void *)q));
        result = ERR_MEM;
      }
#else /* ARP_QUEUEING */
      /* always queue one packet per ARP request only, freeing a previously queued packet */
      if (arp_table[i].q != NULL) {
 8011526:	f997 2013 	ldrsb.w	r2, [r7, #19]
 801152a:	4916      	ldr	r1, [pc, #88]	; (8011584 <etharp_query+0x278>)
 801152c:	4613      	mov	r3, r2
 801152e:	005b      	lsls	r3, r3, #1
 8011530:	4413      	add	r3, r2
 8011532:	00db      	lsls	r3, r3, #3
 8011534:	440b      	add	r3, r1
 8011536:	681b      	ldr	r3, [r3, #0]
 8011538:	2b00      	cmp	r3, #0
 801153a:	d00b      	beq.n	8011554 <etharp_query+0x248>
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: dropped previously queued packet %p for ARP entry %"S16_F"\n", (void *)q, (s16_t)i));
        pbuf_free(arp_table[i].q);
 801153c:	f997 2013 	ldrsb.w	r2, [r7, #19]
 8011540:	4910      	ldr	r1, [pc, #64]	; (8011584 <etharp_query+0x278>)
 8011542:	4613      	mov	r3, r2
 8011544:	005b      	lsls	r3, r3, #1
 8011546:	4413      	add	r3, r2
 8011548:	00db      	lsls	r3, r3, #3
 801154a:	440b      	add	r3, r1
 801154c:	681b      	ldr	r3, [r3, #0]
 801154e:	4618      	mov	r0, r3
 8011550:	f7f8 ffae 	bl	800a4b0 <pbuf_free>
      }
      arp_table[i].q = p;
 8011554:	f997 2013 	ldrsb.w	r2, [r7, #19]
 8011558:	490a      	ldr	r1, [pc, #40]	; (8011584 <etharp_query+0x278>)
 801155a:	4613      	mov	r3, r2
 801155c:	005b      	lsls	r3, r3, #1
 801155e:	4413      	add	r3, r2
 8011560:	00db      	lsls	r3, r3, #3
 8011562:	440b      	add	r3, r1
 8011564:	69fa      	ldr	r2, [r7, #28]
 8011566:	601a      	str	r2, [r3, #0]
      result = ERR_OK;
 8011568:	2300      	movs	r3, #0
 801156a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 801156e:	e002      	b.n	8011576 <etharp_query+0x26a>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: queued packet %p on ARP entry %"S16_F"\n", (void *)q, (s16_t)i));
#endif /* ARP_QUEUEING */
    } else {
      ETHARP_STATS_INC(etharp.memerr);
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not queue a copy of PBUF_REF packet %p (out of memory)\n", (void *)q));
      result = ERR_MEM;
 8011570:	23ff      	movs	r3, #255	; 0xff
 8011572:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }
  }
  return result;
 8011576:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 801157a:	4618      	mov	r0, r3
 801157c:	3728      	adds	r7, #40	; 0x28
 801157e:	46bd      	mov	sp, r7
 8011580:	bd80      	pop	{r7, pc}
 8011582:	bf00      	nop
 8011584:	2400864c 	.word	0x2400864c
 8011588:	0801b858 	.word	0x0801b858
 801158c:	0801ba04 	.word	0x0801ba04
 8011590:	0801b8d0 	.word	0x0801b8d0
 8011594:	0801b9f8 	.word	0x0801b9f8
 8011598:	2400873c 	.word	0x2400873c
 801159c:	0801ba2c 	.word	0x0801ba2c

080115a0 <etharp_raw>:
etharp_raw(struct netif *netif, const struct eth_addr *ethsrc_addr,
           const struct eth_addr *ethdst_addr,
           const struct eth_addr *hwsrc_addr, const ip4_addr_t *ipsrc_addr,
           const struct eth_addr *hwdst_addr, const ip4_addr_t *ipdst_addr,
           const u16_t opcode)
{
 80115a0:	b580      	push	{r7, lr}
 80115a2:	b08a      	sub	sp, #40	; 0x28
 80115a4:	af02      	add	r7, sp, #8
 80115a6:	60f8      	str	r0, [r7, #12]
 80115a8:	60b9      	str	r1, [r7, #8]
 80115aa:	607a      	str	r2, [r7, #4]
 80115ac:	603b      	str	r3, [r7, #0]
  struct pbuf *p;
  err_t result = ERR_OK;
 80115ae:	2300      	movs	r3, #0
 80115b0:	77fb      	strb	r3, [r7, #31]
  struct etharp_hdr *hdr;

  LWIP_ASSERT("netif != NULL", netif != NULL);
 80115b2:	68fb      	ldr	r3, [r7, #12]
 80115b4:	2b00      	cmp	r3, #0
 80115b6:	d106      	bne.n	80115c6 <etharp_raw+0x26>
 80115b8:	4b3a      	ldr	r3, [pc, #232]	; (80116a4 <etharp_raw+0x104>)
 80115ba:	f44f 628b 	mov.w	r2, #1112	; 0x458
 80115be:	493a      	ldr	r1, [pc, #232]	; (80116a8 <etharp_raw+0x108>)
 80115c0:	483a      	ldr	r0, [pc, #232]	; (80116ac <etharp_raw+0x10c>)
 80115c2:	f004 fb07 	bl	8015bd4 <printf_>

  /* allocate a pbuf for the outgoing ARP request packet */
  p = pbuf_alloc(PBUF_LINK, SIZEOF_ETHARP_HDR, PBUF_RAM);
 80115c6:	2200      	movs	r2, #0
 80115c8:	211c      	movs	r1, #28
 80115ca:	2002      	movs	r0, #2
 80115cc:	f7f8 fbfe 	bl	8009dcc <pbuf_alloc>
 80115d0:	61b8      	str	r0, [r7, #24]
  /* could allocate a pbuf for an ARP request? */
  if (p == NULL) {
 80115d2:	69bb      	ldr	r3, [r7, #24]
 80115d4:	2b00      	cmp	r3, #0
 80115d6:	d102      	bne.n	80115de <etharp_raw+0x3e>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
      ("etharp_raw: could not allocate pbuf for ARP request.\n"));
    ETHARP_STATS_INC(etharp.memerr);
    return ERR_MEM;
 80115d8:	f04f 33ff 	mov.w	r3, #4294967295
 80115dc:	e05d      	b.n	801169a <etharp_raw+0xfa>
  }
  LWIP_ASSERT("check that first pbuf can hold struct etharp_hdr",
 80115de:	69bb      	ldr	r3, [r7, #24]
 80115e0:	895b      	ldrh	r3, [r3, #10]
 80115e2:	2b1b      	cmp	r3, #27
 80115e4:	d806      	bhi.n	80115f4 <etharp_raw+0x54>
 80115e6:	4b2f      	ldr	r3, [pc, #188]	; (80116a4 <etharp_raw+0x104>)
 80115e8:	f240 4264 	movw	r2, #1124	; 0x464
 80115ec:	4930      	ldr	r1, [pc, #192]	; (80116b0 <etharp_raw+0x110>)
 80115ee:	482f      	ldr	r0, [pc, #188]	; (80116ac <etharp_raw+0x10c>)
 80115f0:	f004 faf0 	bl	8015bd4 <printf_>
              (p->len >= SIZEOF_ETHARP_HDR));

  hdr = (struct etharp_hdr *)p->payload;
 80115f4:	69bb      	ldr	r3, [r7, #24]
 80115f6:	685b      	ldr	r3, [r3, #4]
 80115f8:	617b      	str	r3, [r7, #20]
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_raw: sending raw ARP packet.\n"));
  hdr->opcode = lwip_htons(opcode);
 80115fa:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 80115fc:	4618      	mov	r0, r3
 80115fe:	f7f7 fd2b 	bl	8009058 <lwip_htons>
 8011602:	4603      	mov	r3, r0
 8011604:	461a      	mov	r2, r3
 8011606:	697b      	ldr	r3, [r7, #20]
 8011608:	80da      	strh	r2, [r3, #6]

  LWIP_ASSERT("netif->hwaddr_len must be the same as ETH_HWADDR_LEN for etharp!",
 801160a:	68fb      	ldr	r3, [r7, #12]
 801160c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8011610:	2b06      	cmp	r3, #6
 8011612:	d006      	beq.n	8011622 <etharp_raw+0x82>
 8011614:	4b23      	ldr	r3, [pc, #140]	; (80116a4 <etharp_raw+0x104>)
 8011616:	f240 426b 	movw	r2, #1131	; 0x46b
 801161a:	4926      	ldr	r1, [pc, #152]	; (80116b4 <etharp_raw+0x114>)
 801161c:	4823      	ldr	r0, [pc, #140]	; (80116ac <etharp_raw+0x10c>)
 801161e:	f004 fad9 	bl	8015bd4 <printf_>
              (netif->hwaddr_len == ETH_HWADDR_LEN));

  /* Write the ARP MAC-Addresses */
  ETHADDR16_COPY(&hdr->shwaddr, hwsrc_addr);
 8011622:	697b      	ldr	r3, [r7, #20]
 8011624:	3308      	adds	r3, #8
 8011626:	2206      	movs	r2, #6
 8011628:	6839      	ldr	r1, [r7, #0]
 801162a:	4618      	mov	r0, r3
 801162c:	f004 fb43 	bl	8015cb6 <memcpy>
  ETHADDR16_COPY(&hdr->dhwaddr, hwdst_addr);
 8011630:	697b      	ldr	r3, [r7, #20]
 8011632:	3312      	adds	r3, #18
 8011634:	2206      	movs	r2, #6
 8011636:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8011638:	4618      	mov	r0, r3
 801163a:	f004 fb3c 	bl	8015cb6 <memcpy>
  /* Copy struct ip4_addr2 to aligned ip4_addr, to support compilers without
   * structure packing. */
  IPADDR2_COPY(&hdr->sipaddr, ipsrc_addr);
 801163e:	697b      	ldr	r3, [r7, #20]
 8011640:	330e      	adds	r3, #14
 8011642:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8011644:	6812      	ldr	r2, [r2, #0]
 8011646:	601a      	str	r2, [r3, #0]
  IPADDR2_COPY(&hdr->dipaddr, ipdst_addr);
 8011648:	697b      	ldr	r3, [r7, #20]
 801164a:	3318      	adds	r3, #24
 801164c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801164e:	6812      	ldr	r2, [r2, #0]
 8011650:	601a      	str	r2, [r3, #0]

  hdr->hwtype = PP_HTONS(HWTYPE_ETHERNET);
 8011652:	697b      	ldr	r3, [r7, #20]
 8011654:	2200      	movs	r2, #0
 8011656:	701a      	strb	r2, [r3, #0]
 8011658:	2200      	movs	r2, #0
 801165a:	f042 0201 	orr.w	r2, r2, #1
 801165e:	705a      	strb	r2, [r3, #1]
  hdr->proto = PP_HTONS(ETHTYPE_IP);
 8011660:	697b      	ldr	r3, [r7, #20]
 8011662:	2200      	movs	r2, #0
 8011664:	f042 0208 	orr.w	r2, r2, #8
 8011668:	709a      	strb	r2, [r3, #2]
 801166a:	2200      	movs	r2, #0
 801166c:	70da      	strb	r2, [r3, #3]
  /* set hwlen and protolen */
  hdr->hwlen = ETH_HWADDR_LEN;
 801166e:	697b      	ldr	r3, [r7, #20]
 8011670:	2206      	movs	r2, #6
 8011672:	711a      	strb	r2, [r3, #4]
  hdr->protolen = sizeof(ip4_addr_t);
 8011674:	697b      	ldr	r3, [r7, #20]
 8011676:	2204      	movs	r2, #4
 8011678:	715a      	strb	r2, [r3, #5]
  if(ip4_addr_islinklocal(ipsrc_addr)) {
    ethernet_output(netif, p, ethsrc_addr, &ethbroadcast, ETHTYPE_ARP);
  } else
#endif /* LWIP_AUTOIP */
  {
    ethernet_output(netif, p, ethsrc_addr, ethdst_addr, ETHTYPE_ARP);
 801167a:	f640 0306 	movw	r3, #2054	; 0x806
 801167e:	9300      	str	r3, [sp, #0]
 8011680:	687b      	ldr	r3, [r7, #4]
 8011682:	68ba      	ldr	r2, [r7, #8]
 8011684:	69b9      	ldr	r1, [r7, #24]
 8011686:	68f8      	ldr	r0, [r7, #12]
 8011688:	f001 faf4 	bl	8012c74 <ethernet_output>
  }

  ETHARP_STATS_INC(etharp.xmit);
  /* free ARP query packet */
  pbuf_free(p);
 801168c:	69b8      	ldr	r0, [r7, #24]
 801168e:	f7f8 ff0f 	bl	800a4b0 <pbuf_free>
  p = NULL;
 8011692:	2300      	movs	r3, #0
 8011694:	61bb      	str	r3, [r7, #24]
  /* could not allocate pbuf for ARP request */

  return result;
 8011696:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 801169a:	4618      	mov	r0, r3
 801169c:	3720      	adds	r7, #32
 801169e:	46bd      	mov	sp, r7
 80116a0:	bd80      	pop	{r7, pc}
 80116a2:	bf00      	nop
 80116a4:	0801b858 	.word	0x0801b858
 80116a8:	0801b9a8 	.word	0x0801b9a8
 80116ac:	0801b8d0 	.word	0x0801b8d0
 80116b0:	0801ba48 	.word	0x0801ba48
 80116b4:	0801ba7c 	.word	0x0801ba7c

080116b8 <etharp_request_dst>:
 *         ERR_MEM if the ARP packet couldn't be allocated
 *         any other err_t on failure
 */
static err_t
etharp_request_dst(struct netif *netif, const ip4_addr_t *ipaddr, const struct eth_addr* hw_dst_addr)
{
 80116b8:	b580      	push	{r7, lr}
 80116ba:	b088      	sub	sp, #32
 80116bc:	af04      	add	r7, sp, #16
 80116be:	60f8      	str	r0, [r7, #12]
 80116c0:	60b9      	str	r1, [r7, #8]
 80116c2:	607a      	str	r2, [r7, #4]
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 80116c4:	68fb      	ldr	r3, [r7, #12]
 80116c6:	f103 0129 	add.w	r1, r3, #41	; 0x29
                    (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif), &ethzero,
 80116ca:	68fb      	ldr	r3, [r7, #12]
 80116cc:	f103 0029 	add.w	r0, r3, #41	; 0x29
 80116d0:	68fb      	ldr	r3, [r7, #12]
 80116d2:	3304      	adds	r3, #4
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 80116d4:	2201      	movs	r2, #1
 80116d6:	9203      	str	r2, [sp, #12]
 80116d8:	68ba      	ldr	r2, [r7, #8]
 80116da:	9202      	str	r2, [sp, #8]
 80116dc:	4a06      	ldr	r2, [pc, #24]	; (80116f8 <etharp_request_dst+0x40>)
 80116de:	9201      	str	r2, [sp, #4]
 80116e0:	9300      	str	r3, [sp, #0]
 80116e2:	4603      	mov	r3, r0
 80116e4:	687a      	ldr	r2, [r7, #4]
 80116e6:	68f8      	ldr	r0, [r7, #12]
 80116e8:	f7ff ff5a 	bl	80115a0 <etharp_raw>
 80116ec:	4603      	mov	r3, r0
                    ipaddr, ARP_REQUEST);
}
 80116ee:	4618      	mov	r0, r3
 80116f0:	3710      	adds	r7, #16
 80116f2:	46bd      	mov	sp, r7
 80116f4:	bd80      	pop	{r7, pc}
 80116f6:	bf00      	nop
 80116f8:	0801c16c 	.word	0x0801c16c

080116fc <etharp_request>:
 *         ERR_MEM if the ARP packet couldn't be allocated
 *         any other err_t on failure
 */
err_t
etharp_request(struct netif *netif, const ip4_addr_t *ipaddr)
{
 80116fc:	b580      	push	{r7, lr}
 80116fe:	b082      	sub	sp, #8
 8011700:	af00      	add	r7, sp, #0
 8011702:	6078      	str	r0, [r7, #4]
 8011704:	6039      	str	r1, [r7, #0]
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_request: sending ARP request.\n"));
  return etharp_request_dst(netif, ipaddr, &ethbroadcast);
 8011706:	4a05      	ldr	r2, [pc, #20]	; (801171c <etharp_request+0x20>)
 8011708:	6839      	ldr	r1, [r7, #0]
 801170a:	6878      	ldr	r0, [r7, #4]
 801170c:	f7ff ffd4 	bl	80116b8 <etharp_request_dst>
 8011710:	4603      	mov	r3, r0
}
 8011712:	4618      	mov	r0, r3
 8011714:	3708      	adds	r7, #8
 8011716:	46bd      	mov	sp, r7
 8011718:	bd80      	pop	{r7, pc}
 801171a:	bf00      	nop
 801171c:	0801c164 	.word	0x0801c164

08011720 <icmp_input>:
 * @param p the icmp echo request packet, p->payload pointing to the icmp header
 * @param inp the netif on which this packet was received
 */
void
icmp_input(struct pbuf *p, struct netif *inp)
{
 8011720:	b580      	push	{r7, lr}
 8011722:	b08e      	sub	sp, #56	; 0x38
 8011724:	af04      	add	r7, sp, #16
 8011726:	6078      	str	r0, [r7, #4]
 8011728:	6039      	str	r1, [r7, #0]
  const ip4_addr_t* src;

  ICMP_STATS_INC(icmp.recv);
  MIB2_STATS_INC(mib2.icmpinmsgs);

  iphdr_in = ip4_current_header();
 801172a:	4b7a      	ldr	r3, [pc, #488]	; (8011914 <icmp_input+0x1f4>)
 801172c:	689b      	ldr	r3, [r3, #8]
 801172e:	627b      	str	r3, [r7, #36]	; 0x24
  hlen = IPH_HL(iphdr_in) * 4;
 8011730:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011732:	781b      	ldrb	r3, [r3, #0]
 8011734:	b29b      	uxth	r3, r3
 8011736:	f003 030f 	and.w	r3, r3, #15
 801173a:	b29b      	uxth	r3, r3
 801173c:	009b      	lsls	r3, r3, #2
 801173e:	847b      	strh	r3, [r7, #34]	; 0x22
  if (hlen < IP_HLEN) {
 8011740:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8011742:	2b13      	cmp	r3, #19
 8011744:	f240 80d1 	bls.w	80118ea <icmp_input+0x1ca>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: short IP header (%"S16_F" bytes) received\n", hlen));
    goto lenerr;
  }
  if (p->len < sizeof(u16_t)*2) {
 8011748:	687b      	ldr	r3, [r7, #4]
 801174a:	895b      	ldrh	r3, [r3, #10]
 801174c:	2b03      	cmp	r3, #3
 801174e:	f240 80ce 	bls.w	80118ee <icmp_input+0x1ce>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: short ICMP (%"U16_F" bytes) received\n", p->tot_len));
    goto lenerr;
  }

  type = *((u8_t *)p->payload);
 8011752:	687b      	ldr	r3, [r7, #4]
 8011754:	685b      	ldr	r3, [r3, #4]
 8011756:	781b      	ldrb	r3, [r3, #0]
 8011758:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
#ifdef LWIP_DEBUG
  code = *(((u8_t *)p->payload)+1);
#endif /* LWIP_DEBUG */
  switch (type) {
 801175c:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 8011760:	2b00      	cmp	r3, #0
 8011762:	f000 80bb 	beq.w	80118dc <icmp_input+0x1bc>
 8011766:	2b08      	cmp	r3, #8
 8011768:	f040 80bb 	bne.w	80118e2 <icmp_input+0x1c2>
       (as obviously, an echo request has been sent, too). */
    MIB2_STATS_INC(mib2.icmpinechoreps);
    break;
  case ICMP_ECHO:
    MIB2_STATS_INC(mib2.icmpinechos);
    src = ip4_current_dest_addr();
 801176c:	4b6a      	ldr	r3, [pc, #424]	; (8011918 <icmp_input+0x1f8>)
 801176e:	61fb      	str	r3, [r7, #28]
    /* multicast destination address? */
    if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 8011770:	4b68      	ldr	r3, [pc, #416]	; (8011914 <icmp_input+0x1f4>)
 8011772:	695b      	ldr	r3, [r3, #20]
 8011774:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8011778:	2be0      	cmp	r3, #224	; 0xe0
 801177a:	f000 80bf 	beq.w	80118fc <icmp_input+0x1dc>
      LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: Not echoing to multicast pings\n"));
      goto icmperr;
#endif /* LWIP_MULTICAST_PING */
    }
    /* broadcast destination address? */
    if (ip4_addr_isbroadcast(ip4_current_dest_addr(), ip_current_netif())) {
 801177e:	4b65      	ldr	r3, [pc, #404]	; (8011914 <icmp_input+0x1f4>)
 8011780:	695a      	ldr	r2, [r3, #20]
 8011782:	4b64      	ldr	r3, [pc, #400]	; (8011914 <icmp_input+0x1f4>)
 8011784:	681b      	ldr	r3, [r3, #0]
 8011786:	4619      	mov	r1, r3
 8011788:	4610      	mov	r0, r2
 801178a:	f000 fbd1 	bl	8011f30 <ip4_addr_isbroadcast_u32>
 801178e:	4603      	mov	r3, r0
 8011790:	2b00      	cmp	r3, #0
 8011792:	f040 80b5 	bne.w	8011900 <icmp_input+0x1e0>
      LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: Not echoing to broadcast pings\n"));
      goto icmperr;
#endif /* LWIP_BROADCAST_PING */
    }
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ping\n"));
    if (p->tot_len < sizeof(struct icmp_echo_hdr)) {
 8011796:	687b      	ldr	r3, [r7, #4]
 8011798:	891b      	ldrh	r3, [r3, #8]
 801179a:	2b07      	cmp	r3, #7
 801179c:	f240 80a9 	bls.w	80118f2 <icmp_input+0x1d2>
        return;
      }
    }
#endif
#if LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN
    if (pbuf_header(p, (s16_t)(hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN))) {
 80117a0:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80117a2:	330e      	adds	r3, #14
 80117a4:	b29b      	uxth	r3, r3
 80117a6:	b21b      	sxth	r3, r3
 80117a8:	4619      	mov	r1, r3
 80117aa:	6878      	ldr	r0, [r7, #4]
 80117ac:	f7f8 fe5c 	bl	800a468 <pbuf_header>
 80117b0:	4603      	mov	r3, r0
 80117b2:	2b00      	cmp	r3, #0
 80117b4:	d046      	beq.n	8011844 <icmp_input+0x124>
      /* p is not big enough to contain link headers
       * allocate a new one and copy p into it
       */
      struct pbuf *r;
      /* allocate new packet buffer with space for link headers */
      r = pbuf_alloc(PBUF_LINK, p->tot_len + hlen, PBUF_RAM);
 80117b6:	687b      	ldr	r3, [r7, #4]
 80117b8:	891a      	ldrh	r2, [r3, #8]
 80117ba:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80117bc:	4413      	add	r3, r2
 80117be:	b29b      	uxth	r3, r3
 80117c0:	2200      	movs	r2, #0
 80117c2:	4619      	mov	r1, r3
 80117c4:	2002      	movs	r0, #2
 80117c6:	f7f8 fb01 	bl	8009dcc <pbuf_alloc>
 80117ca:	61b8      	str	r0, [r7, #24]
      if (r == NULL) {
 80117cc:	69bb      	ldr	r3, [r7, #24]
 80117ce:	2b00      	cmp	r3, #0
 80117d0:	f000 8098 	beq.w	8011904 <icmp_input+0x1e4>
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: allocating new pbuf failed\n"));
        goto icmperr;
      }
      if (r->len < hlen + sizeof(struct icmp_echo_hdr)) {
 80117d4:	69bb      	ldr	r3, [r7, #24]
 80117d6:	895b      	ldrh	r3, [r3, #10]
 80117d8:	461a      	mov	r2, r3
 80117da:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80117dc:	3308      	adds	r3, #8
 80117de:	429a      	cmp	r2, r3
 80117e0:	d203      	bcs.n	80117ea <icmp_input+0xca>
        LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("first pbuf cannot hold the ICMP header"));
        pbuf_free(r);
 80117e2:	69b8      	ldr	r0, [r7, #24]
 80117e4:	f7f8 fe64 	bl	800a4b0 <pbuf_free>
        goto icmperr;
 80117e8:	e08d      	b.n	8011906 <icmp_input+0x1e6>
      }
      /* copy the ip header */
      MEMCPY(r->payload, iphdr_in, hlen);
 80117ea:	69bb      	ldr	r3, [r7, #24]
 80117ec:	685b      	ldr	r3, [r3, #4]
 80117ee:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 80117f0:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80117f2:	4618      	mov	r0, r3
 80117f4:	f004 fa5f 	bl	8015cb6 <memcpy>
      /* switch r->payload back to icmp header (cannot fail) */
      if (pbuf_header(r, (s16_t)-hlen)) {
 80117f8:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80117fa:	425b      	negs	r3, r3
 80117fc:	b29b      	uxth	r3, r3
 80117fe:	b21b      	sxth	r3, r3
 8011800:	4619      	mov	r1, r3
 8011802:	69b8      	ldr	r0, [r7, #24]
 8011804:	f7f8 fe30 	bl	800a468 <pbuf_header>
 8011808:	4603      	mov	r3, r0
 801180a:	2b00      	cmp	r3, #0
 801180c:	d009      	beq.n	8011822 <icmp_input+0x102>
        LWIP_ASSERT("icmp_input: moving r->payload to icmp header failed\n", 0);
 801180e:	4b43      	ldr	r3, [pc, #268]	; (801191c <icmp_input+0x1fc>)
 8011810:	22af      	movs	r2, #175	; 0xaf
 8011812:	4943      	ldr	r1, [pc, #268]	; (8011920 <icmp_input+0x200>)
 8011814:	4843      	ldr	r0, [pc, #268]	; (8011924 <icmp_input+0x204>)
 8011816:	f004 f9dd 	bl	8015bd4 <printf_>
        pbuf_free(r);
 801181a:	69b8      	ldr	r0, [r7, #24]
 801181c:	f7f8 fe48 	bl	800a4b0 <pbuf_free>
        goto icmperr;
 8011820:	e071      	b.n	8011906 <icmp_input+0x1e6>
      }
      /* copy the rest of the packet without ip header */
      if (pbuf_copy(r, p) != ERR_OK) {
 8011822:	6879      	ldr	r1, [r7, #4]
 8011824:	69b8      	ldr	r0, [r7, #24]
 8011826:	f7f8 ff83 	bl	800a730 <pbuf_copy>
 801182a:	4603      	mov	r3, r0
 801182c:	2b00      	cmp	r3, #0
 801182e:	d003      	beq.n	8011838 <icmp_input+0x118>
        LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("icmp_input: copying to new pbuf failed"));
        pbuf_free(r);
 8011830:	69b8      	ldr	r0, [r7, #24]
 8011832:	f7f8 fe3d 	bl	800a4b0 <pbuf_free>
        goto icmperr;
 8011836:	e066      	b.n	8011906 <icmp_input+0x1e6>
      }
      /* free the original p */
      pbuf_free(p);
 8011838:	6878      	ldr	r0, [r7, #4]
 801183a:	f7f8 fe39 	bl	800a4b0 <pbuf_free>
      /* we now have an identical copy of p that has room for link headers */
      p = r;
 801183e:	69bb      	ldr	r3, [r7, #24]
 8011840:	607b      	str	r3, [r7, #4]
 8011842:	e015      	b.n	8011870 <icmp_input+0x150>
    } else {
      /* restore p->payload to point to icmp header (cannot fail) */
      if (pbuf_header(p, -(s16_t)(hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN))) {
 8011844:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8011846:	f1c3 23ff 	rsb	r3, r3, #4278255360	; 0xff00ff00
 801184a:	f503 037f 	add.w	r3, r3, #16711680	; 0xff0000
 801184e:	33f2      	adds	r3, #242	; 0xf2
 8011850:	b29b      	uxth	r3, r3
 8011852:	b21b      	sxth	r3, r3
 8011854:	4619      	mov	r1, r3
 8011856:	6878      	ldr	r0, [r7, #4]
 8011858:	f7f8 fe06 	bl	800a468 <pbuf_header>
 801185c:	4603      	mov	r3, r0
 801185e:	2b00      	cmp	r3, #0
 8011860:	d006      	beq.n	8011870 <icmp_input+0x150>
        LWIP_ASSERT("icmp_input: restoring original p->payload failed\n", 0);
 8011862:	4b2e      	ldr	r3, [pc, #184]	; (801191c <icmp_input+0x1fc>)
 8011864:	22c0      	movs	r2, #192	; 0xc0
 8011866:	4930      	ldr	r1, [pc, #192]	; (8011928 <icmp_input+0x208>)
 8011868:	482e      	ldr	r0, [pc, #184]	; (8011924 <icmp_input+0x204>)
 801186a:	f004 f9b3 	bl	8015bd4 <printf_>
        goto icmperr;
 801186e:	e04a      	b.n	8011906 <icmp_input+0x1e6>
    }
#endif /* LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN */
    /* At this point, all checks are OK. */
    /* We generate an answer by switching the dest and src ip addresses,
     * setting the icmp type to ECHO_RESPONSE and updating the checksum. */
    iecho = (struct icmp_echo_hdr *)p->payload;
 8011870:	687b      	ldr	r3, [r7, #4]
 8011872:	685b      	ldr	r3, [r3, #4]
 8011874:	617b      	str	r3, [r7, #20]
    if (pbuf_header(p, (s16_t)hlen)) {
 8011876:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 801187a:	4619      	mov	r1, r3
 801187c:	6878      	ldr	r0, [r7, #4]
 801187e:	f7f8 fdf3 	bl	800a468 <pbuf_header>
 8011882:	4603      	mov	r3, r0
 8011884:	2b00      	cmp	r3, #0
 8011886:	d12b      	bne.n	80118e0 <icmp_input+0x1c0>
      LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("Can't move over header in packet"));
    } else {
      err_t ret;
      struct ip_hdr *iphdr = (struct ip_hdr*)p->payload;
 8011888:	687b      	ldr	r3, [r7, #4]
 801188a:	685b      	ldr	r3, [r3, #4]
 801188c:	613b      	str	r3, [r7, #16]
      ip4_addr_copy(iphdr->src, *src);
 801188e:	69fb      	ldr	r3, [r7, #28]
 8011890:	681a      	ldr	r2, [r3, #0]
 8011892:	693b      	ldr	r3, [r7, #16]
 8011894:	60da      	str	r2, [r3, #12]
      ip4_addr_copy(iphdr->dest, *ip4_current_src_addr());
 8011896:	4b1f      	ldr	r3, [pc, #124]	; (8011914 <icmp_input+0x1f4>)
 8011898:	691a      	ldr	r2, [r3, #16]
 801189a:	693b      	ldr	r3, [r7, #16]
 801189c:	611a      	str	r2, [r3, #16]
      ICMPH_TYPE_SET(iecho, ICMP_ER);
 801189e:	697b      	ldr	r3, [r7, #20]
 80118a0:	2200      	movs	r2, #0
 80118a2:	701a      	strb	r2, [r3, #0]
      else {
        iecho->chksum = 0;
      }
#endif /* LWIP_CHECKSUM_CTRL_PER_NETIF */
#else /* CHECKSUM_GEN_ICMP */
      iecho->chksum = 0;
 80118a4:	697b      	ldr	r3, [r7, #20]
 80118a6:	2200      	movs	r2, #0
 80118a8:	709a      	strb	r2, [r3, #2]
 80118aa:	2200      	movs	r2, #0
 80118ac:	70da      	strb	r2, [r3, #3]
#endif /* CHECKSUM_GEN_ICMP */

      /* Set the correct TTL and recalculate the header checksum. */
      IPH_TTL_SET(iphdr, ICMP_TTL);
 80118ae:	693b      	ldr	r3, [r7, #16]
 80118b0:	22ff      	movs	r2, #255	; 0xff
 80118b2:	721a      	strb	r2, [r3, #8]
      IPH_CHKSUM_SET(iphdr, 0);
 80118b4:	693b      	ldr	r3, [r7, #16]
 80118b6:	2200      	movs	r2, #0
 80118b8:	729a      	strb	r2, [r3, #10]
 80118ba:	2200      	movs	r2, #0
 80118bc:	72da      	strb	r2, [r3, #11]
      MIB2_STATS_INC(mib2.icmpoutmsgs);
      /* increase number of echo replies attempted to send */
      MIB2_STATS_INC(mib2.icmpoutechoreps);

      /* send an ICMP packet */
      ret = ip4_output_if(p, src, LWIP_IP_HDRINCL,
 80118be:	683b      	ldr	r3, [r7, #0]
 80118c0:	9302      	str	r3, [sp, #8]
 80118c2:	2301      	movs	r3, #1
 80118c4:	9301      	str	r3, [sp, #4]
 80118c6:	2300      	movs	r3, #0
 80118c8:	9300      	str	r3, [sp, #0]
 80118ca:	23ff      	movs	r3, #255	; 0xff
 80118cc:	2200      	movs	r2, #0
 80118ce:	69f9      	ldr	r1, [r7, #28]
 80118d0:	6878      	ldr	r0, [r7, #4]
 80118d2:	f000 fa5b 	bl	8011d8c <ip4_output_if>
 80118d6:	4603      	mov	r3, r0
 80118d8:	73fb      	strb	r3, [r7, #15]
                   ICMP_TTL, 0, IP_PROTO_ICMP, inp);
      if (ret != ERR_OK) {
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ip_output_if returned an error: %s\n", lwip_strerr(ret)));
      }
    }
    break;
 80118da:	e001      	b.n	80118e0 <icmp_input+0x1c0>
    break;
 80118dc:	bf00      	nop
 80118de:	e000      	b.n	80118e2 <icmp_input+0x1c2>
    break;
 80118e0:	bf00      	nop
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ICMP type %"S16_F" code %"S16_F" not supported.\n",
                (s16_t)type, (s16_t)code));
    ICMP_STATS_INC(icmp.proterr);
    ICMP_STATS_INC(icmp.drop);
  }
  pbuf_free(p);
 80118e2:	6878      	ldr	r0, [r7, #4]
 80118e4:	f7f8 fde4 	bl	800a4b0 <pbuf_free>
  return;
 80118e8:	e011      	b.n	801190e <icmp_input+0x1ee>
    goto lenerr;
 80118ea:	bf00      	nop
 80118ec:	e002      	b.n	80118f4 <icmp_input+0x1d4>
    goto lenerr;
 80118ee:	bf00      	nop
 80118f0:	e000      	b.n	80118f4 <icmp_input+0x1d4>
      goto lenerr;
 80118f2:	bf00      	nop
lenerr:
  pbuf_free(p);
 80118f4:	6878      	ldr	r0, [r7, #4]
 80118f6:	f7f8 fddb 	bl	800a4b0 <pbuf_free>
  ICMP_STATS_INC(icmp.lenerr);
  MIB2_STATS_INC(mib2.icmpinerrors);
  return;
 80118fa:	e008      	b.n	801190e <icmp_input+0x1ee>
      goto icmperr;
 80118fc:	bf00      	nop
 80118fe:	e002      	b.n	8011906 <icmp_input+0x1e6>
      goto icmperr;
 8011900:	bf00      	nop
 8011902:	e000      	b.n	8011906 <icmp_input+0x1e6>
        goto icmperr;
 8011904:	bf00      	nop
#if LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN || !LWIP_MULTICAST_PING || !LWIP_BROADCAST_PING
icmperr:
  pbuf_free(p);
 8011906:	6878      	ldr	r0, [r7, #4]
 8011908:	f7f8 fdd2 	bl	800a4b0 <pbuf_free>
  ICMP_STATS_INC(icmp.err);
  MIB2_STATS_INC(mib2.icmpinerrors);
  return;
 801190c:	bf00      	nop
#endif /* LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN || !LWIP_MULTICAST_PING || !LWIP_BROADCAST_PING */
}
 801190e:	3728      	adds	r7, #40	; 0x28
 8011910:	46bd      	mov	sp, r7
 8011912:	bd80      	pop	{r7, pc}
 8011914:	240087ac 	.word	0x240087ac
 8011918:	240087c0 	.word	0x240087c0
 801191c:	0801bac0 	.word	0x0801bac0
 8011920:	0801baf8 	.word	0x0801baf8
 8011924:	0801bb30 	.word	0x0801bb30
 8011928:	0801bb58 	.word	0x0801bb58

0801192c <icmp_dest_unreach>:
 *          p->payload pointing to the IP header
 * @param t type of the 'unreachable' packet
 */
void
icmp_dest_unreach(struct pbuf *p, enum icmp_dur_type t)
{
 801192c:	b580      	push	{r7, lr}
 801192e:	b082      	sub	sp, #8
 8011930:	af00      	add	r7, sp, #0
 8011932:	6078      	str	r0, [r7, #4]
 8011934:	460b      	mov	r3, r1
 8011936:	70fb      	strb	r3, [r7, #3]
  MIB2_STATS_INC(mib2.icmpoutdestunreachs);
  icmp_send_response(p, ICMP_DUR, t);
 8011938:	78fb      	ldrb	r3, [r7, #3]
 801193a:	461a      	mov	r2, r3
 801193c:	2103      	movs	r1, #3
 801193e:	6878      	ldr	r0, [r7, #4]
 8011940:	f000 f814 	bl	801196c <icmp_send_response>
}
 8011944:	bf00      	nop
 8011946:	3708      	adds	r7, #8
 8011948:	46bd      	mov	sp, r7
 801194a:	bd80      	pop	{r7, pc}

0801194c <icmp_time_exceeded>:
 *          p->payload pointing to the IP header
 * @param t type of the 'time exceeded' packet
 */
void
icmp_time_exceeded(struct pbuf *p, enum icmp_te_type t)
{
 801194c:	b580      	push	{r7, lr}
 801194e:	b082      	sub	sp, #8
 8011950:	af00      	add	r7, sp, #0
 8011952:	6078      	str	r0, [r7, #4]
 8011954:	460b      	mov	r3, r1
 8011956:	70fb      	strb	r3, [r7, #3]
  MIB2_STATS_INC(mib2.icmpouttimeexcds);
  icmp_send_response(p, ICMP_TE, t);
 8011958:	78fb      	ldrb	r3, [r7, #3]
 801195a:	461a      	mov	r2, r3
 801195c:	210b      	movs	r1, #11
 801195e:	6878      	ldr	r0, [r7, #4]
 8011960:	f000 f804 	bl	801196c <icmp_send_response>
}
 8011964:	bf00      	nop
 8011966:	3708      	adds	r7, #8
 8011968:	46bd      	mov	sp, r7
 801196a:	bd80      	pop	{r7, pc}

0801196c <icmp_send_response>:
 * @param type Type of the ICMP header
 * @param code Code of the ICMP header
 */
static void
icmp_send_response(struct pbuf *p, u8_t type, u8_t code)
{
 801196c:	b580      	push	{r7, lr}
 801196e:	b08c      	sub	sp, #48	; 0x30
 8011970:	af04      	add	r7, sp, #16
 8011972:	6078      	str	r0, [r7, #4]
 8011974:	460b      	mov	r3, r1
 8011976:	70fb      	strb	r3, [r7, #3]
 8011978:	4613      	mov	r3, r2
 801197a:	70bb      	strb	r3, [r7, #2]

  /* increase number of messages attempted to send */
  MIB2_STATS_INC(mib2.icmpoutmsgs);

  /* ICMP header + IP header + 8 bytes of data */
  q = pbuf_alloc(PBUF_IP, sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE,
 801197c:	2200      	movs	r2, #0
 801197e:	2124      	movs	r1, #36	; 0x24
 8011980:	2001      	movs	r0, #1
 8011982:	f7f8 fa23 	bl	8009dcc <pbuf_alloc>
 8011986:	61f8      	str	r0, [r7, #28]
                 PBUF_RAM);
  if (q == NULL) {
 8011988:	69fb      	ldr	r3, [r7, #28]
 801198a:	2b00      	cmp	r3, #0
 801198c:	d04c      	beq.n	8011a28 <icmp_send_response+0xbc>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_time_exceeded: failed to allocate pbuf for ICMP packet.\n"));
    MIB2_STATS_INC(mib2.icmpouterrors);
    return;
  }
  LWIP_ASSERT("check that first pbuf can hold icmp message",
 801198e:	69fb      	ldr	r3, [r7, #28]
 8011990:	895b      	ldrh	r3, [r3, #10]
 8011992:	2b23      	cmp	r3, #35	; 0x23
 8011994:	d806      	bhi.n	80119a4 <icmp_send_response+0x38>
 8011996:	4b26      	ldr	r3, [pc, #152]	; (8011a30 <icmp_send_response+0xc4>)
 8011998:	f44f 72b1 	mov.w	r2, #354	; 0x162
 801199c:	4925      	ldr	r1, [pc, #148]	; (8011a34 <icmp_send_response+0xc8>)
 801199e:	4826      	ldr	r0, [pc, #152]	; (8011a38 <icmp_send_response+0xcc>)
 80119a0:	f004 f918 	bl	8015bd4 <printf_>
             (q->len >= (sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE)));

  iphdr = (struct ip_hdr *)p->payload;
 80119a4:	687b      	ldr	r3, [r7, #4]
 80119a6:	685b      	ldr	r3, [r3, #4]
 80119a8:	61bb      	str	r3, [r7, #24]
  ip4_addr_debug_print_val(ICMP_DEBUG, iphdr->src);
  LWIP_DEBUGF(ICMP_DEBUG, (" to "));
  ip4_addr_debug_print_val(ICMP_DEBUG, iphdr->dest);
  LWIP_DEBUGF(ICMP_DEBUG, ("\n"));

  icmphdr = (struct icmp_echo_hdr *)q->payload;
 80119aa:	69fb      	ldr	r3, [r7, #28]
 80119ac:	685b      	ldr	r3, [r3, #4]
 80119ae:	617b      	str	r3, [r7, #20]
  icmphdr->type = type;
 80119b0:	697b      	ldr	r3, [r7, #20]
 80119b2:	78fa      	ldrb	r2, [r7, #3]
 80119b4:	701a      	strb	r2, [r3, #0]
  icmphdr->code = code;
 80119b6:	697b      	ldr	r3, [r7, #20]
 80119b8:	78ba      	ldrb	r2, [r7, #2]
 80119ba:	705a      	strb	r2, [r3, #1]
  icmphdr->id = 0;
 80119bc:	697b      	ldr	r3, [r7, #20]
 80119be:	2200      	movs	r2, #0
 80119c0:	711a      	strb	r2, [r3, #4]
 80119c2:	2200      	movs	r2, #0
 80119c4:	715a      	strb	r2, [r3, #5]
  icmphdr->seqno = 0;
 80119c6:	697b      	ldr	r3, [r7, #20]
 80119c8:	2200      	movs	r2, #0
 80119ca:	719a      	strb	r2, [r3, #6]
 80119cc:	2200      	movs	r2, #0
 80119ce:	71da      	strb	r2, [r3, #7]

  /* copy fields from original packet */
  SMEMCPY((u8_t *)q->payload + sizeof(struct icmp_echo_hdr), (u8_t *)p->payload,
 80119d0:	69fb      	ldr	r3, [r7, #28]
 80119d2:	685b      	ldr	r3, [r3, #4]
 80119d4:	f103 0008 	add.w	r0, r3, #8
 80119d8:	687b      	ldr	r3, [r7, #4]
 80119da:	685b      	ldr	r3, [r3, #4]
 80119dc:	221c      	movs	r2, #28
 80119de:	4619      	mov	r1, r3
 80119e0:	f004 f969 	bl	8015cb6 <memcpy>
          IP_HLEN + ICMP_DEST_UNREACH_DATASIZE);

  ip4_addr_copy(iphdr_src, iphdr->src);
 80119e4:	69bb      	ldr	r3, [r7, #24]
 80119e6:	68db      	ldr	r3, [r3, #12]
 80119e8:	60fb      	str	r3, [r7, #12]
    ip4_addr_t iphdr_dst;
    ip4_addr_copy(iphdr_dst, iphdr->dest);
    netif = ip4_route_src(&iphdr_src, &iphdr_dst);
  }
#else
  netif = ip4_route(&iphdr_src);
 80119ea:	f107 030c 	add.w	r3, r7, #12
 80119ee:	4618      	mov	r0, r3
 80119f0:	f000 f824 	bl	8011a3c <ip4_route>
 80119f4:	6138      	str	r0, [r7, #16]
#endif
  if (netif != NULL) {
 80119f6:	693b      	ldr	r3, [r7, #16]
 80119f8:	2b00      	cmp	r3, #0
 80119fa:	d011      	beq.n	8011a20 <icmp_send_response+0xb4>
    /* calculate checksum */
    icmphdr->chksum = 0;
 80119fc:	697b      	ldr	r3, [r7, #20]
 80119fe:	2200      	movs	r2, #0
 8011a00:	709a      	strb	r2, [r3, #2]
 8011a02:	2200      	movs	r2, #0
 8011a04:	70da      	strb	r2, [r3, #3]
    IF__NETIF_CHECKSUM_ENABLED(netif, NETIF_CHECKSUM_GEN_ICMP) {
      icmphdr->chksum = inet_chksum(icmphdr, q->len);
    }
#endif
    ICMP_STATS_INC(icmp.xmit);
    ip4_output_if(q, NULL, &iphdr_src, ICMP_TTL, 0, IP_PROTO_ICMP, netif);
 8011a06:	f107 020c 	add.w	r2, r7, #12
 8011a0a:	693b      	ldr	r3, [r7, #16]
 8011a0c:	9302      	str	r3, [sp, #8]
 8011a0e:	2301      	movs	r3, #1
 8011a10:	9301      	str	r3, [sp, #4]
 8011a12:	2300      	movs	r3, #0
 8011a14:	9300      	str	r3, [sp, #0]
 8011a16:	23ff      	movs	r3, #255	; 0xff
 8011a18:	2100      	movs	r1, #0
 8011a1a:	69f8      	ldr	r0, [r7, #28]
 8011a1c:	f000 f9b6 	bl	8011d8c <ip4_output_if>
  }
  pbuf_free(q);
 8011a20:	69f8      	ldr	r0, [r7, #28]
 8011a22:	f7f8 fd45 	bl	800a4b0 <pbuf_free>
 8011a26:	e000      	b.n	8011a2a <icmp_send_response+0xbe>
    return;
 8011a28:	bf00      	nop
}
 8011a2a:	3720      	adds	r7, #32
 8011a2c:	46bd      	mov	sp, r7
 8011a2e:	bd80      	pop	{r7, pc}
 8011a30:	0801bac0 	.word	0x0801bac0
 8011a34:	0801bb8c 	.word	0x0801bb8c
 8011a38:	0801bb30 	.word	0x0801bb30

08011a3c <ip4_route>:
 * @param dest the destination IP address for which to find the route
 * @return the netif on which to send to reach dest
 */
struct netif *
ip4_route(const ip4_addr_t *dest)
{
 8011a3c:	b480      	push	{r7}
 8011a3e:	b085      	sub	sp, #20
 8011a40:	af00      	add	r7, sp, #0
 8011a42:	6078      	str	r0, [r7, #4]
    return ip4_default_multicast_netif;
  }
#endif /* LWIP_MULTICAST_TX_OPTIONS */

  /* iterate through netifs */
  for (netif = netif_list; netif != NULL; netif = netif->next) {
 8011a44:	4b30      	ldr	r3, [pc, #192]	; (8011b08 <ip4_route+0xcc>)
 8011a46:	681b      	ldr	r3, [r3, #0]
 8011a48:	60fb      	str	r3, [r7, #12]
 8011a4a:	e036      	b.n	8011aba <ip4_route+0x7e>
    /* is the netif up, does it have a link and a valid address? */
    if (netif_is_up(netif) && netif_is_link_up(netif) && !ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 8011a4c:	68fb      	ldr	r3, [r7, #12]
 8011a4e:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 8011a52:	f003 0301 	and.w	r3, r3, #1
 8011a56:	b2db      	uxtb	r3, r3
 8011a58:	2b00      	cmp	r3, #0
 8011a5a:	d02b      	beq.n	8011ab4 <ip4_route+0x78>
 8011a5c:	68fb      	ldr	r3, [r7, #12]
 8011a5e:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 8011a62:	089b      	lsrs	r3, r3, #2
 8011a64:	f003 0301 	and.w	r3, r3, #1
 8011a68:	b2db      	uxtb	r3, r3
 8011a6a:	2b00      	cmp	r3, #0
 8011a6c:	d022      	beq.n	8011ab4 <ip4_route+0x78>
 8011a6e:	68fb      	ldr	r3, [r7, #12]
 8011a70:	3304      	adds	r3, #4
 8011a72:	681b      	ldr	r3, [r3, #0]
 8011a74:	2b00      	cmp	r3, #0
 8011a76:	d01d      	beq.n	8011ab4 <ip4_route+0x78>
      /* network mask matches? */
      if (ip4_addr_netcmp(dest, netif_ip4_addr(netif), netif_ip4_netmask(netif))) {
 8011a78:	687b      	ldr	r3, [r7, #4]
 8011a7a:	681a      	ldr	r2, [r3, #0]
 8011a7c:	68fb      	ldr	r3, [r7, #12]
 8011a7e:	3304      	adds	r3, #4
 8011a80:	681b      	ldr	r3, [r3, #0]
 8011a82:	405a      	eors	r2, r3
 8011a84:	68fb      	ldr	r3, [r7, #12]
 8011a86:	3308      	adds	r3, #8
 8011a88:	681b      	ldr	r3, [r3, #0]
 8011a8a:	4013      	ands	r3, r2
 8011a8c:	2b00      	cmp	r3, #0
 8011a8e:	d101      	bne.n	8011a94 <ip4_route+0x58>
        /* return netif on which to forward IP packet */
        return netif;
 8011a90:	68fb      	ldr	r3, [r7, #12]
 8011a92:	e033      	b.n	8011afc <ip4_route+0xc0>
      }
      /* gateway matches on a non broadcast interface? (i.e. peer in a point to point interface) */
      if (((netif->flags & NETIF_FLAG_BROADCAST) == 0) && ip4_addr_cmp(dest, netif_ip4_gw(netif))) {
 8011a94:	68fb      	ldr	r3, [r7, #12]
 8011a96:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 8011a9a:	f003 0302 	and.w	r3, r3, #2
 8011a9e:	2b00      	cmp	r3, #0
 8011aa0:	d108      	bne.n	8011ab4 <ip4_route+0x78>
 8011aa2:	687b      	ldr	r3, [r7, #4]
 8011aa4:	681a      	ldr	r2, [r3, #0]
 8011aa6:	68fb      	ldr	r3, [r7, #12]
 8011aa8:	330c      	adds	r3, #12
 8011aaa:	681b      	ldr	r3, [r3, #0]
 8011aac:	429a      	cmp	r2, r3
 8011aae:	d101      	bne.n	8011ab4 <ip4_route+0x78>
        /* return netif on which to forward IP packet */
        return netif;
 8011ab0:	68fb      	ldr	r3, [r7, #12]
 8011ab2:	e023      	b.n	8011afc <ip4_route+0xc0>
  for (netif = netif_list; netif != NULL; netif = netif->next) {
 8011ab4:	68fb      	ldr	r3, [r7, #12]
 8011ab6:	681b      	ldr	r3, [r3, #0]
 8011ab8:	60fb      	str	r3, [r7, #12]
 8011aba:	68fb      	ldr	r3, [r7, #12]
 8011abc:	2b00      	cmp	r3, #0
 8011abe:	d1c5      	bne.n	8011a4c <ip4_route+0x10>
  if (netif != NULL) {
    return netif;
  }
#endif

  if ((netif_default == NULL) || !netif_is_up(netif_default) || !netif_is_link_up(netif_default) ||
 8011ac0:	4b12      	ldr	r3, [pc, #72]	; (8011b0c <ip4_route+0xd0>)
 8011ac2:	681b      	ldr	r3, [r3, #0]
 8011ac4:	2b00      	cmp	r3, #0
 8011ac6:	d015      	beq.n	8011af4 <ip4_route+0xb8>
 8011ac8:	4b10      	ldr	r3, [pc, #64]	; (8011b0c <ip4_route+0xd0>)
 8011aca:	681b      	ldr	r3, [r3, #0]
 8011acc:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 8011ad0:	f003 0301 	and.w	r3, r3, #1
 8011ad4:	2b00      	cmp	r3, #0
 8011ad6:	d00d      	beq.n	8011af4 <ip4_route+0xb8>
 8011ad8:	4b0c      	ldr	r3, [pc, #48]	; (8011b0c <ip4_route+0xd0>)
 8011ada:	681b      	ldr	r3, [r3, #0]
 8011adc:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 8011ae0:	f003 0304 	and.w	r3, r3, #4
 8011ae4:	2b00      	cmp	r3, #0
 8011ae6:	d005      	beq.n	8011af4 <ip4_route+0xb8>
      ip4_addr_isany_val(*netif_ip4_addr(netif_default))) {
 8011ae8:	4b08      	ldr	r3, [pc, #32]	; (8011b0c <ip4_route+0xd0>)
 8011aea:	681b      	ldr	r3, [r3, #0]
 8011aec:	3304      	adds	r3, #4
 8011aee:	681b      	ldr	r3, [r3, #0]
  if ((netif_default == NULL) || !netif_is_up(netif_default) || !netif_is_link_up(netif_default) ||
 8011af0:	2b00      	cmp	r3, #0
 8011af2:	d101      	bne.n	8011af8 <ip4_route+0xbc>
       If this is not good enough for you, use LWIP_HOOK_IP4_ROUTE() */
    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_route: No route to %"U16_F".%"U16_F".%"U16_F".%"U16_F"\n",
      ip4_addr1_16(dest), ip4_addr2_16(dest), ip4_addr3_16(dest), ip4_addr4_16(dest)));
    IP_STATS_INC(ip.rterr);
    MIB2_STATS_INC(mib2.ipoutnoroutes);
    return NULL;
 8011af4:	2300      	movs	r3, #0
 8011af6:	e001      	b.n	8011afc <ip4_route+0xc0>
  }

  return netif_default;
 8011af8:	4b04      	ldr	r3, [pc, #16]	; (8011b0c <ip4_route+0xd0>)
 8011afa:	681b      	ldr	r3, [r3, #0]
}
 8011afc:	4618      	mov	r0, r3
 8011afe:	3714      	adds	r7, #20
 8011b00:	46bd      	mov	sp, r7
 8011b02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011b06:	4770      	bx	lr
 8011b08:	2400f2d8 	.word	0x2400f2d8
 8011b0c:	2400f2dc 	.word	0x2400f2dc

08011b10 <ip4_input>:
 * @return ERR_OK if the packet was processed (could return ERR_* if it wasn't
 *         processed, but currently always returns ERR_OK)
 */
err_t
ip4_input(struct pbuf *p, struct netif *inp)
{
 8011b10:	b580      	push	{r7, lr}
 8011b12:	b086      	sub	sp, #24
 8011b14:	af00      	add	r7, sp, #0
 8011b16:	6078      	str	r0, [r7, #4]
 8011b18:	6039      	str	r1, [r7, #0]

  IP_STATS_INC(ip.recv);
  MIB2_STATS_INC(mib2.ipinreceives);

  /* identify the IP header */
  iphdr = (struct ip_hdr *)p->payload;
 8011b1a:	687b      	ldr	r3, [r7, #4]
 8011b1c:	685b      	ldr	r3, [r3, #4]
 8011b1e:	617b      	str	r3, [r7, #20]
  if (IPH_V(iphdr) != 4) {
 8011b20:	697b      	ldr	r3, [r7, #20]
 8011b22:	781b      	ldrb	r3, [r3, #0]
 8011b24:	091b      	lsrs	r3, r3, #4
 8011b26:	b2db      	uxtb	r3, r3
 8011b28:	2b04      	cmp	r3, #4
 8011b2a:	d004      	beq.n	8011b36 <ip4_input+0x26>
    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_WARNING, ("IP packet dropped due to bad version number %"U16_F"\n", (u16_t)IPH_V(iphdr)));
    ip4_debug_print(p);
    pbuf_free(p);
 8011b2c:	6878      	ldr	r0, [r7, #4]
 8011b2e:	f7f8 fcbf 	bl	800a4b0 <pbuf_free>
    IP_STATS_INC(ip.err);
    IP_STATS_INC(ip.drop);
    MIB2_STATS_INC(mib2.ipinhdrerrors);
    return ERR_OK;
 8011b32:	2300      	movs	r3, #0
 8011b34:	e122      	b.n	8011d7c <ip4_input+0x26c>
    return ERR_OK;
  }
#endif

  /* obtain IP header length in number of 32-bit words */
  iphdr_hlen = IPH_HL(iphdr);
 8011b36:	697b      	ldr	r3, [r7, #20]
 8011b38:	781b      	ldrb	r3, [r3, #0]
 8011b3a:	b29b      	uxth	r3, r3
 8011b3c:	f003 030f 	and.w	r3, r3, #15
 8011b40:	817b      	strh	r3, [r7, #10]
  /* calculate IP header length in bytes */
  iphdr_hlen *= 4;
 8011b42:	897b      	ldrh	r3, [r7, #10]
 8011b44:	009b      	lsls	r3, r3, #2
 8011b46:	817b      	strh	r3, [r7, #10]
  /* obtain ip length in bytes */
  iphdr_len = lwip_ntohs(IPH_LEN(iphdr));
 8011b48:	697b      	ldr	r3, [r7, #20]
 8011b4a:	885b      	ldrh	r3, [r3, #2]
 8011b4c:	b29b      	uxth	r3, r3
 8011b4e:	4618      	mov	r0, r3
 8011b50:	f7f7 fa82 	bl	8009058 <lwip_htons>
 8011b54:	4603      	mov	r3, r0
 8011b56:	813b      	strh	r3, [r7, #8]

  /* Trim pbuf. This is especially required for packets < 60 bytes. */
  if (iphdr_len < p->tot_len) {
 8011b58:	687b      	ldr	r3, [r7, #4]
 8011b5a:	891b      	ldrh	r3, [r3, #8]
 8011b5c:	893a      	ldrh	r2, [r7, #8]
 8011b5e:	429a      	cmp	r2, r3
 8011b60:	d204      	bcs.n	8011b6c <ip4_input+0x5c>
    pbuf_realloc(p, iphdr_len);
 8011b62:	893b      	ldrh	r3, [r7, #8]
 8011b64:	4619      	mov	r1, r3
 8011b66:	6878      	ldr	r0, [r7, #4]
 8011b68:	f7f8 fb2e 	bl	800a1c8 <pbuf_realloc>
  }

  /* header length exceeds first pbuf length, or ip length exceeds total pbuf length? */
  if ((iphdr_hlen > p->len) || (iphdr_len > p->tot_len) || (iphdr_hlen < IP_HLEN)) {
 8011b6c:	687b      	ldr	r3, [r7, #4]
 8011b6e:	895b      	ldrh	r3, [r3, #10]
 8011b70:	897a      	ldrh	r2, [r7, #10]
 8011b72:	429a      	cmp	r2, r3
 8011b74:	d807      	bhi.n	8011b86 <ip4_input+0x76>
 8011b76:	687b      	ldr	r3, [r7, #4]
 8011b78:	891b      	ldrh	r3, [r3, #8]
 8011b7a:	893a      	ldrh	r2, [r7, #8]
 8011b7c:	429a      	cmp	r2, r3
 8011b7e:	d802      	bhi.n	8011b86 <ip4_input+0x76>
 8011b80:	897b      	ldrh	r3, [r7, #10]
 8011b82:	2b13      	cmp	r3, #19
 8011b84:	d804      	bhi.n	8011b90 <ip4_input+0x80>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
        ("IP (len %"U16_F") is longer than pbuf (len %"U16_F"), IP packet dropped.\n",
        iphdr_len, p->tot_len));
    }
    /* free (drop) packet pbufs */
    pbuf_free(p);
 8011b86:	6878      	ldr	r0, [r7, #4]
 8011b88:	f7f8 fc92 	bl	800a4b0 <pbuf_free>
    IP_STATS_INC(ip.lenerr);
    IP_STATS_INC(ip.drop);
    MIB2_STATS_INC(mib2.ipindiscards);
    return ERR_OK;
 8011b8c:	2300      	movs	r3, #0
 8011b8e:	e0f5      	b.n	8011d7c <ip4_input+0x26c>
    }
  }
#endif

  /* copy IP addresses to aligned ip_addr_t */
  ip_addr_copy_from_ip4(ip_data.current_iphdr_dest, iphdr->dest);
 8011b90:	697b      	ldr	r3, [r7, #20]
 8011b92:	691b      	ldr	r3, [r3, #16]
 8011b94:	4a7b      	ldr	r2, [pc, #492]	; (8011d84 <ip4_input+0x274>)
 8011b96:	6153      	str	r3, [r2, #20]
  ip_addr_copy_from_ip4(ip_data.current_iphdr_src, iphdr->src);
 8011b98:	697b      	ldr	r3, [r7, #20]
 8011b9a:	68db      	ldr	r3, [r3, #12]
 8011b9c:	4a79      	ldr	r2, [pc, #484]	; (8011d84 <ip4_input+0x274>)
 8011b9e:	6113      	str	r3, [r2, #16]

  /* match packet against an interface, i.e. is this packet for us? */
  if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 8011ba0:	4b78      	ldr	r3, [pc, #480]	; (8011d84 <ip4_input+0x274>)
 8011ba2:	695b      	ldr	r3, [r3, #20]
 8011ba4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8011ba8:	2be0      	cmp	r3, #224	; 0xe0
 8011baa:	d112      	bne.n	8011bd2 <ip4_input+0xc2>
      netif = inp;
    } else {
      netif = NULL;
    }
#else /* LWIP_IGMP */
    if ((netif_is_up(inp)) && (!ip4_addr_isany_val(*netif_ip4_addr(inp)))) {
 8011bac:	683b      	ldr	r3, [r7, #0]
 8011bae:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 8011bb2:	f003 0301 	and.w	r3, r3, #1
 8011bb6:	b2db      	uxtb	r3, r3
 8011bb8:	2b00      	cmp	r3, #0
 8011bba:	d007      	beq.n	8011bcc <ip4_input+0xbc>
 8011bbc:	683b      	ldr	r3, [r7, #0]
 8011bbe:	3304      	adds	r3, #4
 8011bc0:	681b      	ldr	r3, [r3, #0]
 8011bc2:	2b00      	cmp	r3, #0
 8011bc4:	d002      	beq.n	8011bcc <ip4_input+0xbc>
      netif = inp;
 8011bc6:	683b      	ldr	r3, [r7, #0]
 8011bc8:	613b      	str	r3, [r7, #16]
 8011bca:	e041      	b.n	8011c50 <ip4_input+0x140>
    } else {
      netif = NULL;
 8011bcc:	2300      	movs	r3, #0
 8011bce:	613b      	str	r3, [r7, #16]
 8011bd0:	e03e      	b.n	8011c50 <ip4_input+0x140>
#endif /* LWIP_IGMP */
  } else {
    /* start trying with inp. if that's not acceptable, start walking the
       list of configured netifs.
       'first' is used as a boolean to mark whether we started walking the list */
    int first = 1;
 8011bd2:	2301      	movs	r3, #1
 8011bd4:	60fb      	str	r3, [r7, #12]
    netif = inp;
 8011bd6:	683b      	ldr	r3, [r7, #0]
 8011bd8:	613b      	str	r3, [r7, #16]
          ip4_addr_get_u32(&iphdr->dest) & ip4_addr_get_u32(netif_ip4_netmask(netif)),
          ip4_addr_get_u32(netif_ip4_addr(netif)) & ip4_addr_get_u32(netif_ip4_netmask(netif)),
          ip4_addr_get_u32(&iphdr->dest) & ~ip4_addr_get_u32(netif_ip4_netmask(netif))));

      /* interface is up and configured? */
      if ((netif_is_up(netif)) && (!ip4_addr_isany_val(*netif_ip4_addr(netif)))) {
 8011bda:	693b      	ldr	r3, [r7, #16]
 8011bdc:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 8011be0:	f003 0301 	and.w	r3, r3, #1
 8011be4:	b2db      	uxtb	r3, r3
 8011be6:	2b00      	cmp	r3, #0
 8011be8:	d014      	beq.n	8011c14 <ip4_input+0x104>
 8011bea:	693b      	ldr	r3, [r7, #16]
 8011bec:	3304      	adds	r3, #4
 8011bee:	681b      	ldr	r3, [r3, #0]
 8011bf0:	2b00      	cmp	r3, #0
 8011bf2:	d00f      	beq.n	8011c14 <ip4_input+0x104>
        /* unicast to this interface address? */
        if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 8011bf4:	4b63      	ldr	r3, [pc, #396]	; (8011d84 <ip4_input+0x274>)
 8011bf6:	695a      	ldr	r2, [r3, #20]
 8011bf8:	693b      	ldr	r3, [r7, #16]
 8011bfa:	3304      	adds	r3, #4
 8011bfc:	681b      	ldr	r3, [r3, #0]
 8011bfe:	429a      	cmp	r2, r3
 8011c00:	d026      	beq.n	8011c50 <ip4_input+0x140>
            /* or broadcast on this interface network address? */
            ip4_addr_isbroadcast(ip4_current_dest_addr(), netif)
 8011c02:	4b60      	ldr	r3, [pc, #384]	; (8011d84 <ip4_input+0x274>)
 8011c04:	695b      	ldr	r3, [r3, #20]
 8011c06:	6939      	ldr	r1, [r7, #16]
 8011c08:	4618      	mov	r0, r3
 8011c0a:	f000 f991 	bl	8011f30 <ip4_addr_isbroadcast_u32>
 8011c0e:	4603      	mov	r3, r0
        if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 8011c10:	2b00      	cmp	r3, #0
 8011c12:	d11d      	bne.n	8011c50 <ip4_input+0x140>
          /* break out of for loop */
          break;
        }
#endif /* LWIP_AUTOIP */
      }
      if (first) {
 8011c14:	68fb      	ldr	r3, [r7, #12]
 8011c16:	2b00      	cmp	r3, #0
 8011c18:	d00d      	beq.n	8011c36 <ip4_input+0x126>
#if !LWIP_NETIF_LOOPBACK || LWIP_HAVE_LOOPIF
        /* Packets sent to the loopback address must not be accepted on an
         * interface that does not have the loopback address assigned to it,
         * unless a non-loopback interface is used for loopback traffic. */
        if (ip4_addr_isloopback(ip4_current_dest_addr())) {
 8011c1a:	4b5a      	ldr	r3, [pc, #360]	; (8011d84 <ip4_input+0x274>)
 8011c1c:	695b      	ldr	r3, [r3, #20]
 8011c1e:	b2db      	uxtb	r3, r3
 8011c20:	2b7f      	cmp	r3, #127	; 0x7f
 8011c22:	d102      	bne.n	8011c2a <ip4_input+0x11a>
          netif = NULL;
 8011c24:	2300      	movs	r3, #0
 8011c26:	613b      	str	r3, [r7, #16]
          break;
 8011c28:	e012      	b.n	8011c50 <ip4_input+0x140>
        }
#endif /* !LWIP_NETIF_LOOPBACK || LWIP_HAVE_LOOPIF */
        first = 0;
 8011c2a:	2300      	movs	r3, #0
 8011c2c:	60fb      	str	r3, [r7, #12]
        netif = netif_list;
 8011c2e:	4b56      	ldr	r3, [pc, #344]	; (8011d88 <ip4_input+0x278>)
 8011c30:	681b      	ldr	r3, [r3, #0]
 8011c32:	613b      	str	r3, [r7, #16]
 8011c34:	e002      	b.n	8011c3c <ip4_input+0x12c>
      } else {
        netif = netif->next;
 8011c36:	693b      	ldr	r3, [r7, #16]
 8011c38:	681b      	ldr	r3, [r3, #0]
 8011c3a:	613b      	str	r3, [r7, #16]
      }
      if (netif == inp) {
 8011c3c:	693a      	ldr	r2, [r7, #16]
 8011c3e:	683b      	ldr	r3, [r7, #0]
 8011c40:	429a      	cmp	r2, r3
 8011c42:	d102      	bne.n	8011c4a <ip4_input+0x13a>
        netif = netif->next;
 8011c44:	693b      	ldr	r3, [r7, #16]
 8011c46:	681b      	ldr	r3, [r3, #0]
 8011c48:	613b      	str	r3, [r7, #16]
      }
    } while (netif != NULL);
 8011c4a:	693b      	ldr	r3, [r7, #16]
 8011c4c:	2b00      	cmp	r3, #0
 8011c4e:	d1c4      	bne.n	8011bda <ip4_input+0xca>
      && !ip4_addr_isany_val(*ip4_current_src_addr())
#endif /* IP_ACCEPT_LINK_LAYER_ADDRESSING */
     )
#endif /* LWIP_IGMP || IP_ACCEPT_LINK_LAYER_ADDRESSING */
  {
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 8011c50:	4b4c      	ldr	r3, [pc, #304]	; (8011d84 <ip4_input+0x274>)
 8011c52:	691b      	ldr	r3, [r3, #16]
 8011c54:	6839      	ldr	r1, [r7, #0]
 8011c56:	4618      	mov	r0, r3
 8011c58:	f000 f96a 	bl	8011f30 <ip4_addr_isbroadcast_u32>
 8011c5c:	4603      	mov	r3, r0
 8011c5e:	2b00      	cmp	r3, #0
 8011c60:	d105      	bne.n	8011c6e <ip4_input+0x15e>
        (ip4_addr_ismulticast(ip4_current_src_addr()))) {
 8011c62:	4b48      	ldr	r3, [pc, #288]	; (8011d84 <ip4_input+0x274>)
 8011c64:	691b      	ldr	r3, [r3, #16]
 8011c66:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 8011c6a:	2be0      	cmp	r3, #224	; 0xe0
 8011c6c:	d104      	bne.n	8011c78 <ip4_input+0x168>
      /* packet source is not valid */
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("ip4_input: packet source is not valid.\n"));
      /* free (drop) packet pbufs */
      pbuf_free(p);
 8011c6e:	6878      	ldr	r0, [r7, #4]
 8011c70:	f7f8 fc1e 	bl	800a4b0 <pbuf_free>
      IP_STATS_INC(ip.drop);
      MIB2_STATS_INC(mib2.ipinaddrerrors);
      MIB2_STATS_INC(mib2.ipindiscards);
      return ERR_OK;
 8011c74:	2300      	movs	r3, #0
 8011c76:	e081      	b.n	8011d7c <ip4_input+0x26c>
    }
  }

  /* packet not for us? */
  if (netif == NULL) {
 8011c78:	693b      	ldr	r3, [r7, #16]
 8011c7a:	2b00      	cmp	r3, #0
 8011c7c:	d104      	bne.n	8011c88 <ip4_input+0x178>
    {
      IP_STATS_INC(ip.drop);
      MIB2_STATS_INC(mib2.ipinaddrerrors);
      MIB2_STATS_INC(mib2.ipindiscards);
    }
    pbuf_free(p);
 8011c7e:	6878      	ldr	r0, [r7, #4]
 8011c80:	f7f8 fc16 	bl	800a4b0 <pbuf_free>
    return ERR_OK;
 8011c84:	2300      	movs	r3, #0
 8011c86:	e079      	b.n	8011d7c <ip4_input+0x26c>
  }
  /* packet consists of multiple fragments? */
  if ((IPH_OFFSET(iphdr) & PP_HTONS(IP_OFFMASK | IP_MF)) != 0) {
 8011c88:	697b      	ldr	r3, [r7, #20]
 8011c8a:	88db      	ldrh	r3, [r3, #6]
 8011c8c:	b29b      	uxth	r3, r3
 8011c8e:	461a      	mov	r2, r3
 8011c90:	f64f 733f 	movw	r3, #65343	; 0xff3f
 8011c94:	4013      	ands	r3, r2
 8011c96:	2b00      	cmp	r3, #0
 8011c98:	d00b      	beq.n	8011cb2 <ip4_input+0x1a2>
#if IP_REASSEMBLY /* packet fragment reassembly code present? */
    LWIP_DEBUGF(IP_DEBUG, ("IP packet is a fragment (id=0x%04"X16_F" tot_len=%"U16_F" len=%"U16_F" MF=%"U16_F" offset=%"U16_F"), calling ip4_reass()\n",
      lwip_ntohs(IPH_ID(iphdr)), p->tot_len, lwip_ntohs(IPH_LEN(iphdr)), (u16_t)!!(IPH_OFFSET(iphdr) & PP_HTONS(IP_MF)), (u16_t)((lwip_ntohs(IPH_OFFSET(iphdr)) & IP_OFFMASK)*8)));
    /* reassemble the packet*/
    p = ip4_reass(p);
 8011c9a:	6878      	ldr	r0, [r7, #4]
 8011c9c:	f000 fc8e 	bl	80125bc <ip4_reass>
 8011ca0:	6078      	str	r0, [r7, #4]
    /* packet not fully reassembled yet? */
    if (p == NULL) {
 8011ca2:	687b      	ldr	r3, [r7, #4]
 8011ca4:	2b00      	cmp	r3, #0
 8011ca6:	d101      	bne.n	8011cac <ip4_input+0x19c>
      return ERR_OK;
 8011ca8:	2300      	movs	r3, #0
 8011caa:	e067      	b.n	8011d7c <ip4_input+0x26c>
    }
    iphdr = (struct ip_hdr *)p->payload;
 8011cac:	687b      	ldr	r3, [r7, #4]
 8011cae:	685b      	ldr	r3, [r3, #4]
 8011cb0:	617b      	str	r3, [r7, #20]
  /* send to upper layers */
  LWIP_DEBUGF(IP_DEBUG, ("ip4_input: \n"));
  ip4_debug_print(p);
  LWIP_DEBUGF(IP_DEBUG, ("ip4_input: p->len %"U16_F" p->tot_len %"U16_F"\n", p->len, p->tot_len));

  ip_data.current_netif = netif;
 8011cb2:	4a34      	ldr	r2, [pc, #208]	; (8011d84 <ip4_input+0x274>)
 8011cb4:	693b      	ldr	r3, [r7, #16]
 8011cb6:	6013      	str	r3, [r2, #0]
  ip_data.current_input_netif = inp;
 8011cb8:	4a32      	ldr	r2, [pc, #200]	; (8011d84 <ip4_input+0x274>)
 8011cba:	683b      	ldr	r3, [r7, #0]
 8011cbc:	6053      	str	r3, [r2, #4]
  ip_data.current_ip4_header = iphdr;
 8011cbe:	4a31      	ldr	r2, [pc, #196]	; (8011d84 <ip4_input+0x274>)
 8011cc0:	697b      	ldr	r3, [r7, #20]
 8011cc2:	6093      	str	r3, [r2, #8]
  ip_data.current_ip_header_tot_len = IPH_HL(iphdr) * 4;
 8011cc4:	697b      	ldr	r3, [r7, #20]
 8011cc6:	781b      	ldrb	r3, [r3, #0]
 8011cc8:	b29b      	uxth	r3, r3
 8011cca:	f003 030f 	and.w	r3, r3, #15
 8011cce:	b29b      	uxth	r3, r3
 8011cd0:	009b      	lsls	r3, r3, #2
 8011cd2:	b29a      	uxth	r2, r3
 8011cd4:	4b2b      	ldr	r3, [pc, #172]	; (8011d84 <ip4_input+0x274>)
 8011cd6:	819a      	strh	r2, [r3, #12]
#if LWIP_RAW
  /* raw input did not eat the packet? */
  if (raw_input(p, inp) == 0)
#endif /* LWIP_RAW */
  {
    pbuf_header(p, -(s16_t)iphdr_hlen); /* Move to payload, no check necessary. */
 8011cd8:	897b      	ldrh	r3, [r7, #10]
 8011cda:	425b      	negs	r3, r3
 8011cdc:	b29b      	uxth	r3, r3
 8011cde:	b21b      	sxth	r3, r3
 8011ce0:	4619      	mov	r1, r3
 8011ce2:	6878      	ldr	r0, [r7, #4]
 8011ce4:	f7f8 fbc0 	bl	800a468 <pbuf_header>

    switch (IPH_PROTO(iphdr)) {
 8011ce8:	697b      	ldr	r3, [r7, #20]
 8011cea:	7a5b      	ldrb	r3, [r3, #9]
 8011cec:	2b06      	cmp	r3, #6
 8011cee:	d009      	beq.n	8011d04 <ip4_input+0x1f4>
 8011cf0:	2b11      	cmp	r3, #17
 8011cf2:	d002      	beq.n	8011cfa <ip4_input+0x1ea>
 8011cf4:	2b01      	cmp	r3, #1
 8011cf6:	d00a      	beq.n	8011d0e <ip4_input+0x1fe>
 8011cf8:	e00e      	b.n	8011d18 <ip4_input+0x208>
    case IP_PROTO_UDP:
#if LWIP_UDPLITE
    case IP_PROTO_UDPLITE:
#endif /* LWIP_UDPLITE */
      MIB2_STATS_INC(mib2.ipindelivers);
      udp_input(p, inp);
 8011cfa:	6839      	ldr	r1, [r7, #0]
 8011cfc:	6878      	ldr	r0, [r7, #4]
 8011cfe:	f7fe fa4d 	bl	801019c <udp_input>
      break;
 8011d02:	e028      	b.n	8011d56 <ip4_input+0x246>
#endif /* LWIP_UDP */
#if LWIP_TCP
    case IP_PROTO_TCP:
      MIB2_STATS_INC(mib2.ipindelivers);
      tcp_input(p, inp);
 8011d04:	6839      	ldr	r1, [r7, #0]
 8011d06:	6878      	ldr	r0, [r7, #4]
 8011d08:	f7fa fa6a 	bl	800c1e0 <tcp_input>
      break;
 8011d0c:	e023      	b.n	8011d56 <ip4_input+0x246>
#endif /* LWIP_TCP */
#if LWIP_ICMP
    case IP_PROTO_ICMP:
      MIB2_STATS_INC(mib2.ipindelivers);
      icmp_input(p, inp);
 8011d0e:	6839      	ldr	r1, [r7, #0]
 8011d10:	6878      	ldr	r0, [r7, #4]
 8011d12:	f7ff fd05 	bl	8011720 <icmp_input>
      break;
 8011d16:	e01e      	b.n	8011d56 <ip4_input+0x246>
      break;
#endif /* LWIP_IGMP */
    default:
#if LWIP_ICMP
      /* send ICMP destination protocol unreachable unless is was a broadcast */
      if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
 8011d18:	4b1a      	ldr	r3, [pc, #104]	; (8011d84 <ip4_input+0x274>)
 8011d1a:	695b      	ldr	r3, [r3, #20]
 8011d1c:	6939      	ldr	r1, [r7, #16]
 8011d1e:	4618      	mov	r0, r3
 8011d20:	f000 f906 	bl	8011f30 <ip4_addr_isbroadcast_u32>
 8011d24:	4603      	mov	r3, r0
 8011d26:	2b00      	cmp	r3, #0
 8011d28:	d112      	bne.n	8011d50 <ip4_input+0x240>
          !ip4_addr_ismulticast(ip4_current_dest_addr())) {
 8011d2a:	4b16      	ldr	r3, [pc, #88]	; (8011d84 <ip4_input+0x274>)
 8011d2c:	695b      	ldr	r3, [r3, #20]
 8011d2e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
      if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
 8011d32:	2be0      	cmp	r3, #224	; 0xe0
 8011d34:	d00c      	beq.n	8011d50 <ip4_input+0x240>
        pbuf_header_force(p, iphdr_hlen); /* Move to ip header, no check necessary. */
 8011d36:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8011d3a:	4619      	mov	r1, r3
 8011d3c:	6878      	ldr	r0, [r7, #4]
 8011d3e:	f7f8 fba5 	bl	800a48c <pbuf_header_force>
        p->payload = iphdr;
 8011d42:	687b      	ldr	r3, [r7, #4]
 8011d44:	697a      	ldr	r2, [r7, #20]
 8011d46:	605a      	str	r2, [r3, #4]
        icmp_dest_unreach(p, ICMP_DUR_PROTO);
 8011d48:	2102      	movs	r1, #2
 8011d4a:	6878      	ldr	r0, [r7, #4]
 8011d4c:	f7ff fdee 	bl	801192c <icmp_dest_unreach>
      }
#endif /* LWIP_ICMP */
      pbuf_free(p);
 8011d50:	6878      	ldr	r0, [r7, #4]
 8011d52:	f7f8 fbad 	bl	800a4b0 <pbuf_free>
      MIB2_STATS_INC(mib2.ipinunknownprotos);
    }
  }

  /* @todo: this is not really necessary... */
  ip_data.current_netif = NULL;
 8011d56:	4b0b      	ldr	r3, [pc, #44]	; (8011d84 <ip4_input+0x274>)
 8011d58:	2200      	movs	r2, #0
 8011d5a:	601a      	str	r2, [r3, #0]
  ip_data.current_input_netif = NULL;
 8011d5c:	4b09      	ldr	r3, [pc, #36]	; (8011d84 <ip4_input+0x274>)
 8011d5e:	2200      	movs	r2, #0
 8011d60:	605a      	str	r2, [r3, #4]
  ip_data.current_ip4_header = NULL;
 8011d62:	4b08      	ldr	r3, [pc, #32]	; (8011d84 <ip4_input+0x274>)
 8011d64:	2200      	movs	r2, #0
 8011d66:	609a      	str	r2, [r3, #8]
  ip_data.current_ip_header_tot_len = 0;
 8011d68:	4b06      	ldr	r3, [pc, #24]	; (8011d84 <ip4_input+0x274>)
 8011d6a:	2200      	movs	r2, #0
 8011d6c:	819a      	strh	r2, [r3, #12]
  ip4_addr_set_any(ip4_current_src_addr());
 8011d6e:	4b05      	ldr	r3, [pc, #20]	; (8011d84 <ip4_input+0x274>)
 8011d70:	2200      	movs	r2, #0
 8011d72:	611a      	str	r2, [r3, #16]
  ip4_addr_set_any(ip4_current_dest_addr());
 8011d74:	4b03      	ldr	r3, [pc, #12]	; (8011d84 <ip4_input+0x274>)
 8011d76:	2200      	movs	r2, #0
 8011d78:	615a      	str	r2, [r3, #20]

  return ERR_OK;
 8011d7a:	2300      	movs	r3, #0
}
 8011d7c:	4618      	mov	r0, r3
 8011d7e:	3718      	adds	r7, #24
 8011d80:	46bd      	mov	sp, r7
 8011d82:	bd80      	pop	{r7, pc}
 8011d84:	240087ac 	.word	0x240087ac
 8011d88:	2400f2d8 	.word	0x2400f2d8

08011d8c <ip4_output_if>:
 */
err_t
ip4_output_if(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
             u8_t ttl, u8_t tos,
             u8_t proto, struct netif *netif)
{
 8011d8c:	b580      	push	{r7, lr}
 8011d8e:	b08a      	sub	sp, #40	; 0x28
 8011d90:	af04      	add	r7, sp, #16
 8011d92:	60f8      	str	r0, [r7, #12]
 8011d94:	60b9      	str	r1, [r7, #8]
 8011d96:	607a      	str	r2, [r7, #4]
 8011d98:	70fb      	strb	r3, [r7, #3]
ip4_output_if_opt(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
       u8_t ttl, u8_t tos, u8_t proto, struct netif *netif, void *ip_options,
       u16_t optlen)
{
#endif /* IP_OPTIONS_SEND */
  const ip4_addr_t *src_used = src;
 8011d9a:	68bb      	ldr	r3, [r7, #8]
 8011d9c:	617b      	str	r3, [r7, #20]
  if (dest != LWIP_IP_HDRINCL) {
 8011d9e:	687b      	ldr	r3, [r7, #4]
 8011da0:	2b00      	cmp	r3, #0
 8011da2:	d009      	beq.n	8011db8 <ip4_output_if+0x2c>
    if (ip4_addr_isany(src)) {
 8011da4:	68bb      	ldr	r3, [r7, #8]
 8011da6:	2b00      	cmp	r3, #0
 8011da8:	d003      	beq.n	8011db2 <ip4_output_if+0x26>
 8011daa:	68bb      	ldr	r3, [r7, #8]
 8011dac:	681b      	ldr	r3, [r3, #0]
 8011dae:	2b00      	cmp	r3, #0
 8011db0:	d102      	bne.n	8011db8 <ip4_output_if+0x2c>
      src_used = netif_ip4_addr(netif);
 8011db2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011db4:	3304      	adds	r3, #4
 8011db6:	617b      	str	r3, [r7, #20]

#if IP_OPTIONS_SEND
  return ip4_output_if_opt_src(p, src_used, dest, ttl, tos, proto, netif,
    ip_options, optlen);
#else /* IP_OPTIONS_SEND */
  return ip4_output_if_src(p, src_used, dest, ttl, tos, proto, netif);
 8011db8:	78fa      	ldrb	r2, [r7, #3]
 8011dba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011dbc:	9302      	str	r3, [sp, #8]
 8011dbe:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8011dc2:	9301      	str	r3, [sp, #4]
 8011dc4:	f897 3020 	ldrb.w	r3, [r7, #32]
 8011dc8:	9300      	str	r3, [sp, #0]
 8011dca:	4613      	mov	r3, r2
 8011dcc:	687a      	ldr	r2, [r7, #4]
 8011dce:	6979      	ldr	r1, [r7, #20]
 8011dd0:	68f8      	ldr	r0, [r7, #12]
 8011dd2:	f000 f805 	bl	8011de0 <ip4_output_if_src>
 8011dd6:	4603      	mov	r3, r0
#endif /* IP_OPTIONS_SEND */
}
 8011dd8:	4618      	mov	r0, r3
 8011dda:	3718      	adds	r7, #24
 8011ddc:	46bd      	mov	sp, r7
 8011dde:	bd80      	pop	{r7, pc}

08011de0 <ip4_output_if_src>:
 */
err_t
ip4_output_if_src(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
             u8_t ttl, u8_t tos,
             u8_t proto, struct netif *netif)
{
 8011de0:	b580      	push	{r7, lr}
 8011de2:	b088      	sub	sp, #32
 8011de4:	af00      	add	r7, sp, #0
 8011de6:	60f8      	str	r0, [r7, #12]
 8011de8:	60b9      	str	r1, [r7, #8]
 8011dea:	607a      	str	r2, [r7, #4]
 8011dec:	70fb      	strb	r3, [r7, #3]
  ip4_addr_t dest_addr;
#if CHECKSUM_GEN_IP_INLINE
  u32_t chk_sum = 0;
#endif /* CHECKSUM_GEN_IP_INLINE */

  LWIP_IP_CHECK_PBUF_REF_COUNT_FOR_TX(p);
 8011dee:	68fb      	ldr	r3, [r7, #12]
 8011df0:	89db      	ldrh	r3, [r3, #14]
 8011df2:	2b01      	cmp	r3, #1
 8011df4:	d006      	beq.n	8011e04 <ip4_output_if_src+0x24>
 8011df6:	4b48      	ldr	r3, [pc, #288]	; (8011f18 <ip4_output_if_src+0x138>)
 8011df8:	f240 3233 	movw	r2, #819	; 0x333
 8011dfc:	4947      	ldr	r1, [pc, #284]	; (8011f1c <ip4_output_if_src+0x13c>)
 8011dfe:	4848      	ldr	r0, [pc, #288]	; (8011f20 <ip4_output_if_src+0x140>)
 8011e00:	f003 fee8 	bl	8015bd4 <printf_>

  MIB2_STATS_INC(mib2.ipoutrequests);

  /* Should the IP header be generated or is it already included in p? */
  if (dest != LWIP_IP_HDRINCL) {
 8011e04:	687b      	ldr	r3, [r7, #4]
 8011e06:	2b00      	cmp	r3, #0
 8011e08:	d060      	beq.n	8011ecc <ip4_output_if_src+0xec>
    u16_t ip_hlen = IP_HLEN;
 8011e0a:	2314      	movs	r3, #20
 8011e0c:	837b      	strh	r3, [r7, #26]
      }
#endif /* CHECKSUM_GEN_IP_INLINE */
    }
#endif /* IP_OPTIONS_SEND */
    /* generate IP header */
    if (pbuf_header(p, IP_HLEN)) {
 8011e0e:	2114      	movs	r1, #20
 8011e10:	68f8      	ldr	r0, [r7, #12]
 8011e12:	f7f8 fb29 	bl	800a468 <pbuf_header>
 8011e16:	4603      	mov	r3, r0
 8011e18:	2b00      	cmp	r3, #0
 8011e1a:	d002      	beq.n	8011e22 <ip4_output_if_src+0x42>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_output: not enough room for IP header in pbuf\n"));

      IP_STATS_INC(ip.err);
      MIB2_STATS_INC(mib2.ipoutdiscards);
      return ERR_BUF;
 8011e1c:	f06f 0301 	mvn.w	r3, #1
 8011e20:	e075      	b.n	8011f0e <ip4_output_if_src+0x12e>
    }

    iphdr = (struct ip_hdr *)p->payload;
 8011e22:	68fb      	ldr	r3, [r7, #12]
 8011e24:	685b      	ldr	r3, [r3, #4]
 8011e26:	61fb      	str	r3, [r7, #28]
    LWIP_ASSERT("check that first pbuf can hold struct ip_hdr",
 8011e28:	68fb      	ldr	r3, [r7, #12]
 8011e2a:	895b      	ldrh	r3, [r3, #10]
 8011e2c:	2b13      	cmp	r3, #19
 8011e2e:	d806      	bhi.n	8011e3e <ip4_output_if_src+0x5e>
 8011e30:	4b39      	ldr	r3, [pc, #228]	; (8011f18 <ip4_output_if_src+0x138>)
 8011e32:	f240 3261 	movw	r2, #865	; 0x361
 8011e36:	493b      	ldr	r1, [pc, #236]	; (8011f24 <ip4_output_if_src+0x144>)
 8011e38:	4839      	ldr	r0, [pc, #228]	; (8011f20 <ip4_output_if_src+0x140>)
 8011e3a:	f003 fecb 	bl	8015bd4 <printf_>
               (p->len >= sizeof(struct ip_hdr)));

    IPH_TTL_SET(iphdr, ttl);
 8011e3e:	69fb      	ldr	r3, [r7, #28]
 8011e40:	78fa      	ldrb	r2, [r7, #3]
 8011e42:	721a      	strb	r2, [r3, #8]
    IPH_PROTO_SET(iphdr, proto);
 8011e44:	69fb      	ldr	r3, [r7, #28]
 8011e46:	f897 202c 	ldrb.w	r2, [r7, #44]	; 0x2c
 8011e4a:	725a      	strb	r2, [r3, #9]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += PP_NTOHS(proto | (ttl << 8));
#endif /* CHECKSUM_GEN_IP_INLINE */

    /* dest cannot be NULL here */
    ip4_addr_copy(iphdr->dest, *dest);
 8011e4c:	687b      	ldr	r3, [r7, #4]
 8011e4e:	681a      	ldr	r2, [r3, #0]
 8011e50:	69fb      	ldr	r3, [r7, #28]
 8011e52:	611a      	str	r2, [r3, #16]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += ip4_addr_get_u32(&iphdr->dest) & 0xFFFF;
    chk_sum += ip4_addr_get_u32(&iphdr->dest) >> 16;
#endif /* CHECKSUM_GEN_IP_INLINE */

    IPH_VHL_SET(iphdr, 4, ip_hlen / 4);
 8011e54:	8b7b      	ldrh	r3, [r7, #26]
 8011e56:	089b      	lsrs	r3, r3, #2
 8011e58:	b29b      	uxth	r3, r3
 8011e5a:	b2db      	uxtb	r3, r3
 8011e5c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8011e60:	b2da      	uxtb	r2, r3
 8011e62:	69fb      	ldr	r3, [r7, #28]
 8011e64:	701a      	strb	r2, [r3, #0]
    IPH_TOS_SET(iphdr, tos);
 8011e66:	69fb      	ldr	r3, [r7, #28]
 8011e68:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 8011e6c:	705a      	strb	r2, [r3, #1]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += PP_NTOHS(tos | (iphdr->_v_hl << 8));
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_LEN_SET(iphdr, lwip_htons(p->tot_len));
 8011e6e:	68fb      	ldr	r3, [r7, #12]
 8011e70:	891b      	ldrh	r3, [r3, #8]
 8011e72:	4618      	mov	r0, r3
 8011e74:	f7f7 f8f0 	bl	8009058 <lwip_htons>
 8011e78:	4603      	mov	r3, r0
 8011e7a:	461a      	mov	r2, r3
 8011e7c:	69fb      	ldr	r3, [r7, #28]
 8011e7e:	805a      	strh	r2, [r3, #2]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_len;
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_OFFSET_SET(iphdr, 0);
 8011e80:	69fb      	ldr	r3, [r7, #28]
 8011e82:	2200      	movs	r2, #0
 8011e84:	719a      	strb	r2, [r3, #6]
 8011e86:	2200      	movs	r2, #0
 8011e88:	71da      	strb	r2, [r3, #7]
    IPH_ID_SET(iphdr, lwip_htons(ip_id));
 8011e8a:	4b27      	ldr	r3, [pc, #156]	; (8011f28 <ip4_output_if_src+0x148>)
 8011e8c:	881b      	ldrh	r3, [r3, #0]
 8011e8e:	4618      	mov	r0, r3
 8011e90:	f7f7 f8e2 	bl	8009058 <lwip_htons>
 8011e94:	4603      	mov	r3, r0
 8011e96:	461a      	mov	r2, r3
 8011e98:	69fb      	ldr	r3, [r7, #28]
 8011e9a:	809a      	strh	r2, [r3, #4]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_id;
#endif /* CHECKSUM_GEN_IP_INLINE */
    ++ip_id;
 8011e9c:	4b22      	ldr	r3, [pc, #136]	; (8011f28 <ip4_output_if_src+0x148>)
 8011e9e:	881b      	ldrh	r3, [r3, #0]
 8011ea0:	3301      	adds	r3, #1
 8011ea2:	b29a      	uxth	r2, r3
 8011ea4:	4b20      	ldr	r3, [pc, #128]	; (8011f28 <ip4_output_if_src+0x148>)
 8011ea6:	801a      	strh	r2, [r3, #0]

    if (src == NULL) {
 8011ea8:	68bb      	ldr	r3, [r7, #8]
 8011eaa:	2b00      	cmp	r3, #0
 8011eac:	d104      	bne.n	8011eb8 <ip4_output_if_src+0xd8>
      ip4_addr_copy(iphdr->src, *IP4_ADDR_ANY4);
 8011eae:	4b1f      	ldr	r3, [pc, #124]	; (8011f2c <ip4_output_if_src+0x14c>)
 8011eb0:	681a      	ldr	r2, [r3, #0]
 8011eb2:	69fb      	ldr	r3, [r7, #28]
 8011eb4:	60da      	str	r2, [r3, #12]
 8011eb6:	e003      	b.n	8011ec0 <ip4_output_if_src+0xe0>
    } else {
      /* src cannot be NULL here */
      ip4_addr_copy(iphdr->src, *src);
 8011eb8:	68bb      	ldr	r3, [r7, #8]
 8011eba:	681a      	ldr	r2, [r3, #0]
 8011ebc:	69fb      	ldr	r3, [r7, #28]
 8011ebe:	60da      	str	r2, [r3, #12]
    else {
      IPH_CHKSUM_SET(iphdr, 0);
    }
#endif /* LWIP_CHECKSUM_CTRL_PER_NETIF*/
#else /* CHECKSUM_GEN_IP_INLINE */
    IPH_CHKSUM_SET(iphdr, 0);
 8011ec0:	69fb      	ldr	r3, [r7, #28]
 8011ec2:	2200      	movs	r2, #0
 8011ec4:	729a      	strb	r2, [r3, #10]
 8011ec6:	2200      	movs	r2, #0
 8011ec8:	72da      	strb	r2, [r3, #11]
 8011eca:	e008      	b.n	8011ede <ip4_output_if_src+0xfe>
    }
#endif /* CHECKSUM_GEN_IP */
#endif /* CHECKSUM_GEN_IP_INLINE */
  } else {
    /* IP header already included in p */
    iphdr = (struct ip_hdr *)p->payload;
 8011ecc:	68fb      	ldr	r3, [r7, #12]
 8011ece:	685b      	ldr	r3, [r3, #4]
 8011ed0:	61fb      	str	r3, [r7, #28]
    ip4_addr_copy(dest_addr, iphdr->dest);
 8011ed2:	69fb      	ldr	r3, [r7, #28]
 8011ed4:	691b      	ldr	r3, [r3, #16]
 8011ed6:	617b      	str	r3, [r7, #20]
    dest = &dest_addr;
 8011ed8:	f107 0314 	add.w	r3, r7, #20
 8011edc:	607b      	str	r3, [r7, #4]
  }
#endif /* LWIP_MULTICAST_TX_OPTIONS */
#endif /* ENABLE_LOOPBACK */
#if IP_FRAG
  /* don't fragment if interface has mtu set to 0 [loopif] */
  if (netif->mtu && (p->tot_len > netif->mtu)) {
 8011ede:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011ee0:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8011ee2:	2b00      	cmp	r3, #0
 8011ee4:	d00c      	beq.n	8011f00 <ip4_output_if_src+0x120>
 8011ee6:	68fb      	ldr	r3, [r7, #12]
 8011ee8:	891a      	ldrh	r2, [r3, #8]
 8011eea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011eec:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8011eee:	429a      	cmp	r2, r3
 8011ef0:	d906      	bls.n	8011f00 <ip4_output_if_src+0x120>
    return ip4_frag(p, netif, dest);
 8011ef2:	687a      	ldr	r2, [r7, #4]
 8011ef4:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8011ef6:	68f8      	ldr	r0, [r7, #12]
 8011ef8:	f000 fd0a 	bl	8012910 <ip4_frag>
 8011efc:	4603      	mov	r3, r0
 8011efe:	e006      	b.n	8011f0e <ip4_output_if_src+0x12e>
  }
#endif /* IP_FRAG */

  LWIP_DEBUGF(IP_DEBUG, ("ip4_output_if: call netif->output()\n"));
  return netif->output(netif, p, dest);
 8011f00:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011f02:	695b      	ldr	r3, [r3, #20]
 8011f04:	687a      	ldr	r2, [r7, #4]
 8011f06:	68f9      	ldr	r1, [r7, #12]
 8011f08:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8011f0a:	4798      	blx	r3
 8011f0c:	4603      	mov	r3, r0
}
 8011f0e:	4618      	mov	r0, r3
 8011f10:	3720      	adds	r7, #32
 8011f12:	46bd      	mov	sp, r7
 8011f14:	bd80      	pop	{r7, pc}
 8011f16:	bf00      	nop
 8011f18:	0801bbb8 	.word	0x0801bbb8
 8011f1c:	0801bbec 	.word	0x0801bbec
 8011f20:	0801bbf8 	.word	0x0801bbf8
 8011f24:	0801bc20 	.word	0x0801bc20
 8011f28:	2400873e 	.word	0x2400873e
 8011f2c:	0801c160 	.word	0x0801c160

08011f30 <ip4_addr_isbroadcast_u32>:
 * @param netif the network interface against which the address is checked
 * @return returns non-zero if the address is a broadcast address
 */
u8_t
ip4_addr_isbroadcast_u32(u32_t addr, const struct netif *netif)
{
 8011f30:	b480      	push	{r7}
 8011f32:	b085      	sub	sp, #20
 8011f34:	af00      	add	r7, sp, #0
 8011f36:	6078      	str	r0, [r7, #4]
 8011f38:	6039      	str	r1, [r7, #0]
  ip4_addr_t ipaddr;
  ip4_addr_set_u32(&ipaddr, addr);
 8011f3a:	687b      	ldr	r3, [r7, #4]
 8011f3c:	60fb      	str	r3, [r7, #12]

  /* all ones (broadcast) or all zeroes (old skool broadcast) */
  if ((~addr == IPADDR_ANY) ||
 8011f3e:	687b      	ldr	r3, [r7, #4]
 8011f40:	f1b3 3fff 	cmp.w	r3, #4294967295
 8011f44:	d002      	beq.n	8011f4c <ip4_addr_isbroadcast_u32+0x1c>
 8011f46:	687b      	ldr	r3, [r7, #4]
 8011f48:	2b00      	cmp	r3, #0
 8011f4a:	d101      	bne.n	8011f50 <ip4_addr_isbroadcast_u32+0x20>
      (addr == IPADDR_ANY)) {
    return 1;
 8011f4c:	2301      	movs	r3, #1
 8011f4e:	e02a      	b.n	8011fa6 <ip4_addr_isbroadcast_u32+0x76>
  /* no broadcast support on this network interface? */
  } else if ((netif->flags & NETIF_FLAG_BROADCAST) == 0) {
 8011f50:	683b      	ldr	r3, [r7, #0]
 8011f52:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 8011f56:	f003 0302 	and.w	r3, r3, #2
 8011f5a:	2b00      	cmp	r3, #0
 8011f5c:	d101      	bne.n	8011f62 <ip4_addr_isbroadcast_u32+0x32>
    /* the given address cannot be a broadcast address
     * nor can we check against any broadcast addresses */
    return 0;
 8011f5e:	2300      	movs	r3, #0
 8011f60:	e021      	b.n	8011fa6 <ip4_addr_isbroadcast_u32+0x76>
  /* address matches network interface address exactly? => no broadcast */
  } else if (addr == ip4_addr_get_u32(netif_ip4_addr(netif))) {
 8011f62:	683b      	ldr	r3, [r7, #0]
 8011f64:	3304      	adds	r3, #4
 8011f66:	681b      	ldr	r3, [r3, #0]
 8011f68:	687a      	ldr	r2, [r7, #4]
 8011f6a:	429a      	cmp	r2, r3
 8011f6c:	d101      	bne.n	8011f72 <ip4_addr_isbroadcast_u32+0x42>
    return 0;
 8011f6e:	2300      	movs	r3, #0
 8011f70:	e019      	b.n	8011fa6 <ip4_addr_isbroadcast_u32+0x76>
  /*  on the same (sub) network... */
  } else if (ip4_addr_netcmp(&ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif))
 8011f72:	68fa      	ldr	r2, [r7, #12]
 8011f74:	683b      	ldr	r3, [r7, #0]
 8011f76:	3304      	adds	r3, #4
 8011f78:	681b      	ldr	r3, [r3, #0]
 8011f7a:	405a      	eors	r2, r3
 8011f7c:	683b      	ldr	r3, [r7, #0]
 8011f7e:	3308      	adds	r3, #8
 8011f80:	681b      	ldr	r3, [r3, #0]
 8011f82:	4013      	ands	r3, r2
 8011f84:	2b00      	cmp	r3, #0
 8011f86:	d10d      	bne.n	8011fa4 <ip4_addr_isbroadcast_u32+0x74>
         /* ...and host identifier bits are all ones? =>... */
          && ((addr & ~ip4_addr_get_u32(netif_ip4_netmask(netif))) ==
 8011f88:	683b      	ldr	r3, [r7, #0]
 8011f8a:	3308      	adds	r3, #8
 8011f8c:	681b      	ldr	r3, [r3, #0]
 8011f8e:	43da      	mvns	r2, r3
 8011f90:	687b      	ldr	r3, [r7, #4]
 8011f92:	401a      	ands	r2, r3
           (IPADDR_BROADCAST & ~ip4_addr_get_u32(netif_ip4_netmask(netif))))) {
 8011f94:	683b      	ldr	r3, [r7, #0]
 8011f96:	3308      	adds	r3, #8
 8011f98:	681b      	ldr	r3, [r3, #0]
 8011f9a:	43db      	mvns	r3, r3
          && ((addr & ~ip4_addr_get_u32(netif_ip4_netmask(netif))) ==
 8011f9c:	429a      	cmp	r2, r3
 8011f9e:	d101      	bne.n	8011fa4 <ip4_addr_isbroadcast_u32+0x74>
    /* => network broadcast address */
    return 1;
 8011fa0:	2301      	movs	r3, #1
 8011fa2:	e000      	b.n	8011fa6 <ip4_addr_isbroadcast_u32+0x76>
  } else {
    return 0;
 8011fa4:	2300      	movs	r3, #0
  }
}
 8011fa6:	4618      	mov	r0, r3
 8011fa8:	3714      	adds	r7, #20
 8011faa:	46bd      	mov	sp, r7
 8011fac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011fb0:	4770      	bx	lr
	...

08011fb4 <ip_reass_tmr>:
 *
 * Should be called every 1000 msec (defined by IP_TMR_INTERVAL).
 */
void
ip_reass_tmr(void)
{
 8011fb4:	b580      	push	{r7, lr}
 8011fb6:	b084      	sub	sp, #16
 8011fb8:	af00      	add	r7, sp, #0
  struct ip_reassdata *r, *prev = NULL;
 8011fba:	2300      	movs	r3, #0
 8011fbc:	60bb      	str	r3, [r7, #8]

  r = reassdatagrams;
 8011fbe:	4b12      	ldr	r3, [pc, #72]	; (8012008 <ip_reass_tmr+0x54>)
 8011fc0:	681b      	ldr	r3, [r3, #0]
 8011fc2:	60fb      	str	r3, [r7, #12]
  while (r != NULL) {
 8011fc4:	e018      	b.n	8011ff8 <ip_reass_tmr+0x44>
    /* Decrement the timer. Once it reaches 0,
     * clean up the incomplete fragment assembly */
    if (r->timer > 0) {
 8011fc6:	68fb      	ldr	r3, [r7, #12]
 8011fc8:	7fdb      	ldrb	r3, [r3, #31]
 8011fca:	2b00      	cmp	r3, #0
 8011fcc:	d00b      	beq.n	8011fe6 <ip_reass_tmr+0x32>
      r->timer--;
 8011fce:	68fb      	ldr	r3, [r7, #12]
 8011fd0:	7fdb      	ldrb	r3, [r3, #31]
 8011fd2:	3b01      	subs	r3, #1
 8011fd4:	b2da      	uxtb	r2, r3
 8011fd6:	68fb      	ldr	r3, [r7, #12]
 8011fd8:	77da      	strb	r2, [r3, #31]
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_tmr: timer dec %"U16_F"\n",(u16_t)r->timer));
      prev = r;
 8011fda:	68fb      	ldr	r3, [r7, #12]
 8011fdc:	60bb      	str	r3, [r7, #8]
      r = r->next;
 8011fde:	68fb      	ldr	r3, [r7, #12]
 8011fe0:	681b      	ldr	r3, [r3, #0]
 8011fe2:	60fb      	str	r3, [r7, #12]
 8011fe4:	e008      	b.n	8011ff8 <ip_reass_tmr+0x44>
    } else {
      /* reassembly timed out */
      struct ip_reassdata *tmp;
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_tmr: timer timed out\n"));
      tmp = r;
 8011fe6:	68fb      	ldr	r3, [r7, #12]
 8011fe8:	607b      	str	r3, [r7, #4]
      /* get the next pointer before freeing */
      r = r->next;
 8011fea:	68fb      	ldr	r3, [r7, #12]
 8011fec:	681b      	ldr	r3, [r3, #0]
 8011fee:	60fb      	str	r3, [r7, #12]
      /* free the helper struct and all enqueued pbufs */
      ip_reass_free_complete_datagram(tmp, prev);
 8011ff0:	68b9      	ldr	r1, [r7, #8]
 8011ff2:	6878      	ldr	r0, [r7, #4]
 8011ff4:	f000 f80a 	bl	801200c <ip_reass_free_complete_datagram>
  while (r != NULL) {
 8011ff8:	68fb      	ldr	r3, [r7, #12]
 8011ffa:	2b00      	cmp	r3, #0
 8011ffc:	d1e3      	bne.n	8011fc6 <ip_reass_tmr+0x12>
     }
   }
}
 8011ffe:	bf00      	nop
 8012000:	3710      	adds	r7, #16
 8012002:	46bd      	mov	sp, r7
 8012004:	bd80      	pop	{r7, pc}
 8012006:	bf00      	nop
 8012008:	24008740 	.word	0x24008740

0801200c <ip_reass_free_complete_datagram>:
 * @param prev the previous datagram in the linked list
 * @return the number of pbufs freed
 */
static int
ip_reass_free_complete_datagram(struct ip_reassdata *ipr, struct ip_reassdata *prev)
{
 801200c:	b580      	push	{r7, lr}
 801200e:	b088      	sub	sp, #32
 8012010:	af00      	add	r7, sp, #0
 8012012:	6078      	str	r0, [r7, #4]
 8012014:	6039      	str	r1, [r7, #0]
  u16_t pbufs_freed = 0;
 8012016:	2300      	movs	r3, #0
 8012018:	83fb      	strh	r3, [r7, #30]
  u16_t clen;
  struct pbuf *p;
  struct ip_reass_helper *iprh;

  LWIP_ASSERT("prev != ipr", prev != ipr);
 801201a:	683a      	ldr	r2, [r7, #0]
 801201c:	687b      	ldr	r3, [r7, #4]
 801201e:	429a      	cmp	r2, r3
 8012020:	d105      	bne.n	801202e <ip_reass_free_complete_datagram+0x22>
 8012022:	4b45      	ldr	r3, [pc, #276]	; (8012138 <ip_reass_free_complete_datagram+0x12c>)
 8012024:	22ab      	movs	r2, #171	; 0xab
 8012026:	4945      	ldr	r1, [pc, #276]	; (801213c <ip_reass_free_complete_datagram+0x130>)
 8012028:	4845      	ldr	r0, [pc, #276]	; (8012140 <ip_reass_free_complete_datagram+0x134>)
 801202a:	f003 fdd3 	bl	8015bd4 <printf_>
  if (prev != NULL) {
 801202e:	683b      	ldr	r3, [r7, #0]
 8012030:	2b00      	cmp	r3, #0
 8012032:	d00a      	beq.n	801204a <ip_reass_free_complete_datagram+0x3e>
    LWIP_ASSERT("prev->next == ipr", prev->next == ipr);
 8012034:	683b      	ldr	r3, [r7, #0]
 8012036:	681b      	ldr	r3, [r3, #0]
 8012038:	687a      	ldr	r2, [r7, #4]
 801203a:	429a      	cmp	r2, r3
 801203c:	d005      	beq.n	801204a <ip_reass_free_complete_datagram+0x3e>
 801203e:	4b3e      	ldr	r3, [pc, #248]	; (8012138 <ip_reass_free_complete_datagram+0x12c>)
 8012040:	22ad      	movs	r2, #173	; 0xad
 8012042:	4940      	ldr	r1, [pc, #256]	; (8012144 <ip_reass_free_complete_datagram+0x138>)
 8012044:	483e      	ldr	r0, [pc, #248]	; (8012140 <ip_reass_free_complete_datagram+0x134>)
 8012046:	f003 fdc5 	bl	8015bd4 <printf_>
  }

  MIB2_STATS_INC(mib2.ipreasmfails);
#if LWIP_ICMP
  iprh = (struct ip_reass_helper *)ipr->p->payload;
 801204a:	687b      	ldr	r3, [r7, #4]
 801204c:	685b      	ldr	r3, [r3, #4]
 801204e:	685b      	ldr	r3, [r3, #4]
 8012050:	617b      	str	r3, [r7, #20]
  if (iprh->start == 0) {
 8012052:	697b      	ldr	r3, [r7, #20]
 8012054:	889b      	ldrh	r3, [r3, #4]
 8012056:	b29b      	uxth	r3, r3
 8012058:	2b00      	cmp	r3, #0
 801205a:	d12a      	bne.n	80120b2 <ip_reass_free_complete_datagram+0xa6>
    /* The first fragment was received, send ICMP time exceeded. */
    /* First, de-queue the first pbuf from r->p. */
    p = ipr->p;
 801205c:	687b      	ldr	r3, [r7, #4]
 801205e:	685b      	ldr	r3, [r3, #4]
 8012060:	61bb      	str	r3, [r7, #24]
    ipr->p = iprh->next_pbuf;
 8012062:	697b      	ldr	r3, [r7, #20]
 8012064:	681a      	ldr	r2, [r3, #0]
 8012066:	687b      	ldr	r3, [r7, #4]
 8012068:	605a      	str	r2, [r3, #4]
    /* Then, copy the original header into it. */
    SMEMCPY(p->payload, &ipr->iphdr, IP_HLEN);
 801206a:	69bb      	ldr	r3, [r7, #24]
 801206c:	6858      	ldr	r0, [r3, #4]
 801206e:	687b      	ldr	r3, [r7, #4]
 8012070:	3308      	adds	r3, #8
 8012072:	2214      	movs	r2, #20
 8012074:	4619      	mov	r1, r3
 8012076:	f003 fe1e 	bl	8015cb6 <memcpy>
    icmp_time_exceeded(p, ICMP_TE_FRAG);
 801207a:	2101      	movs	r1, #1
 801207c:	69b8      	ldr	r0, [r7, #24]
 801207e:	f7ff fc65 	bl	801194c <icmp_time_exceeded>
    clen = pbuf_clen(p);
 8012082:	69b8      	ldr	r0, [r7, #24]
 8012084:	f7f8 faae 	bl	800a5e4 <pbuf_clen>
 8012088:	4603      	mov	r3, r0
 801208a:	827b      	strh	r3, [r7, #18]
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 801208c:	8bfa      	ldrh	r2, [r7, #30]
 801208e:	8a7b      	ldrh	r3, [r7, #18]
 8012090:	4413      	add	r3, r2
 8012092:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8012096:	db05      	blt.n	80120a4 <ip_reass_free_complete_datagram+0x98>
 8012098:	4b27      	ldr	r3, [pc, #156]	; (8012138 <ip_reass_free_complete_datagram+0x12c>)
 801209a:	22bc      	movs	r2, #188	; 0xbc
 801209c:	492a      	ldr	r1, [pc, #168]	; (8012148 <ip_reass_free_complete_datagram+0x13c>)
 801209e:	4828      	ldr	r0, [pc, #160]	; (8012140 <ip_reass_free_complete_datagram+0x134>)
 80120a0:	f003 fd98 	bl	8015bd4 <printf_>
    pbufs_freed += clen;
 80120a4:	8bfa      	ldrh	r2, [r7, #30]
 80120a6:	8a7b      	ldrh	r3, [r7, #18]
 80120a8:	4413      	add	r3, r2
 80120aa:	83fb      	strh	r3, [r7, #30]
    pbuf_free(p);
 80120ac:	69b8      	ldr	r0, [r7, #24]
 80120ae:	f7f8 f9ff 	bl	800a4b0 <pbuf_free>
  }
#endif /* LWIP_ICMP */

  /* First, free all received pbufs.  The individual pbufs need to be released
     separately as they have not yet been chained */
  p = ipr->p;
 80120b2:	687b      	ldr	r3, [r7, #4]
 80120b4:	685b      	ldr	r3, [r3, #4]
 80120b6:	61bb      	str	r3, [r7, #24]
  while (p != NULL) {
 80120b8:	e01f      	b.n	80120fa <ip_reass_free_complete_datagram+0xee>
    struct pbuf *pcur;
    iprh = (struct ip_reass_helper *)p->payload;
 80120ba:	69bb      	ldr	r3, [r7, #24]
 80120bc:	685b      	ldr	r3, [r3, #4]
 80120be:	617b      	str	r3, [r7, #20]
    pcur = p;
 80120c0:	69bb      	ldr	r3, [r7, #24]
 80120c2:	60fb      	str	r3, [r7, #12]
    /* get the next pointer before freeing */
    p = iprh->next_pbuf;
 80120c4:	697b      	ldr	r3, [r7, #20]
 80120c6:	681b      	ldr	r3, [r3, #0]
 80120c8:	61bb      	str	r3, [r7, #24]
    clen = pbuf_clen(pcur);
 80120ca:	68f8      	ldr	r0, [r7, #12]
 80120cc:	f7f8 fa8a 	bl	800a5e4 <pbuf_clen>
 80120d0:	4603      	mov	r3, r0
 80120d2:	827b      	strh	r3, [r7, #18]
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 80120d4:	8bfa      	ldrh	r2, [r7, #30]
 80120d6:	8a7b      	ldrh	r3, [r7, #18]
 80120d8:	4413      	add	r3, r2
 80120da:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80120de:	db05      	blt.n	80120ec <ip_reass_free_complete_datagram+0xe0>
 80120e0:	4b15      	ldr	r3, [pc, #84]	; (8012138 <ip_reass_free_complete_datagram+0x12c>)
 80120e2:	22cc      	movs	r2, #204	; 0xcc
 80120e4:	4918      	ldr	r1, [pc, #96]	; (8012148 <ip_reass_free_complete_datagram+0x13c>)
 80120e6:	4816      	ldr	r0, [pc, #88]	; (8012140 <ip_reass_free_complete_datagram+0x134>)
 80120e8:	f003 fd74 	bl	8015bd4 <printf_>
    pbufs_freed += clen;
 80120ec:	8bfa      	ldrh	r2, [r7, #30]
 80120ee:	8a7b      	ldrh	r3, [r7, #18]
 80120f0:	4413      	add	r3, r2
 80120f2:	83fb      	strh	r3, [r7, #30]
    pbuf_free(pcur);
 80120f4:	68f8      	ldr	r0, [r7, #12]
 80120f6:	f7f8 f9db 	bl	800a4b0 <pbuf_free>
  while (p != NULL) {
 80120fa:	69bb      	ldr	r3, [r7, #24]
 80120fc:	2b00      	cmp	r3, #0
 80120fe:	d1dc      	bne.n	80120ba <ip_reass_free_complete_datagram+0xae>
  }
  /* Then, unchain the struct ip_reassdata from the list and free it. */
  ip_reass_dequeue_datagram(ipr, prev);
 8012100:	6839      	ldr	r1, [r7, #0]
 8012102:	6878      	ldr	r0, [r7, #4]
 8012104:	f000 f8c2 	bl	801228c <ip_reass_dequeue_datagram>
  LWIP_ASSERT("ip_reass_pbufcount >= clen", ip_reass_pbufcount >= pbufs_freed);
 8012108:	4b10      	ldr	r3, [pc, #64]	; (801214c <ip_reass_free_complete_datagram+0x140>)
 801210a:	881b      	ldrh	r3, [r3, #0]
 801210c:	8bfa      	ldrh	r2, [r7, #30]
 801210e:	429a      	cmp	r2, r3
 8012110:	d905      	bls.n	801211e <ip_reass_free_complete_datagram+0x112>
 8012112:	4b09      	ldr	r3, [pc, #36]	; (8012138 <ip_reass_free_complete_datagram+0x12c>)
 8012114:	22d2      	movs	r2, #210	; 0xd2
 8012116:	490e      	ldr	r1, [pc, #56]	; (8012150 <ip_reass_free_complete_datagram+0x144>)
 8012118:	4809      	ldr	r0, [pc, #36]	; (8012140 <ip_reass_free_complete_datagram+0x134>)
 801211a:	f003 fd5b 	bl	8015bd4 <printf_>
  ip_reass_pbufcount -= pbufs_freed;
 801211e:	4b0b      	ldr	r3, [pc, #44]	; (801214c <ip_reass_free_complete_datagram+0x140>)
 8012120:	881a      	ldrh	r2, [r3, #0]
 8012122:	8bfb      	ldrh	r3, [r7, #30]
 8012124:	1ad3      	subs	r3, r2, r3
 8012126:	b29a      	uxth	r2, r3
 8012128:	4b08      	ldr	r3, [pc, #32]	; (801214c <ip_reass_free_complete_datagram+0x140>)
 801212a:	801a      	strh	r2, [r3, #0]

  return pbufs_freed;
 801212c:	8bfb      	ldrh	r3, [r7, #30]
}
 801212e:	4618      	mov	r0, r3
 8012130:	3720      	adds	r7, #32
 8012132:	46bd      	mov	sp, r7
 8012134:	bd80      	pop	{r7, pc}
 8012136:	bf00      	nop
 8012138:	0801bc50 	.word	0x0801bc50
 801213c:	0801bc8c 	.word	0x0801bc8c
 8012140:	0801bc98 	.word	0x0801bc98
 8012144:	0801bcc0 	.word	0x0801bcc0
 8012148:	0801bcd4 	.word	0x0801bcd4
 801214c:	24008744 	.word	0x24008744
 8012150:	0801bcf4 	.word	0x0801bcf4

08012154 <ip_reass_remove_oldest_datagram>:
 *        (used for freeing other datagrams if not enough space)
 * @return the number of pbufs freed
 */
static int
ip_reass_remove_oldest_datagram(struct ip_hdr *fraghdr, int pbufs_needed)
{
 8012154:	b580      	push	{r7, lr}
 8012156:	b08a      	sub	sp, #40	; 0x28
 8012158:	af00      	add	r7, sp, #0
 801215a:	6078      	str	r0, [r7, #4]
 801215c:	6039      	str	r1, [r7, #0]
  /* @todo Can't we simply remove the last datagram in the
   *       linked list behind reassdatagrams?
   */
  struct ip_reassdata *r, *oldest, *prev, *oldest_prev;
  int pbufs_freed = 0, pbufs_freed_current;
 801215e:	2300      	movs	r3, #0
 8012160:	617b      	str	r3, [r7, #20]
  int other_datagrams;

  /* Free datagrams until being allowed to enqueue 'pbufs_needed' pbufs,
   * but don't free the datagram that 'fraghdr' belongs to! */
  do {
    oldest = NULL;
 8012162:	2300      	movs	r3, #0
 8012164:	623b      	str	r3, [r7, #32]
    prev = NULL;
 8012166:	2300      	movs	r3, #0
 8012168:	61fb      	str	r3, [r7, #28]
    oldest_prev = NULL;
 801216a:	2300      	movs	r3, #0
 801216c:	61bb      	str	r3, [r7, #24]
    other_datagrams = 0;
 801216e:	2300      	movs	r3, #0
 8012170:	613b      	str	r3, [r7, #16]
    r = reassdatagrams;
 8012172:	4b28      	ldr	r3, [pc, #160]	; (8012214 <ip_reass_remove_oldest_datagram+0xc0>)
 8012174:	681b      	ldr	r3, [r3, #0]
 8012176:	627b      	str	r3, [r7, #36]	; 0x24
    while (r != NULL) {
 8012178:	e030      	b.n	80121dc <ip_reass_remove_oldest_datagram+0x88>
      if (!IP_ADDRESSES_AND_ID_MATCH(&r->iphdr, fraghdr)) {
 801217a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801217c:	695a      	ldr	r2, [r3, #20]
 801217e:	687b      	ldr	r3, [r7, #4]
 8012180:	68db      	ldr	r3, [r3, #12]
 8012182:	429a      	cmp	r2, r3
 8012184:	d10c      	bne.n	80121a0 <ip_reass_remove_oldest_datagram+0x4c>
 8012186:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012188:	699a      	ldr	r2, [r3, #24]
 801218a:	687b      	ldr	r3, [r7, #4]
 801218c:	691b      	ldr	r3, [r3, #16]
 801218e:	429a      	cmp	r2, r3
 8012190:	d106      	bne.n	80121a0 <ip_reass_remove_oldest_datagram+0x4c>
 8012192:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012194:	899a      	ldrh	r2, [r3, #12]
 8012196:	687b      	ldr	r3, [r7, #4]
 8012198:	889b      	ldrh	r3, [r3, #4]
 801219a:	b29b      	uxth	r3, r3
 801219c:	429a      	cmp	r2, r3
 801219e:	d014      	beq.n	80121ca <ip_reass_remove_oldest_datagram+0x76>
        /* Not the same datagram as fraghdr */
        other_datagrams++;
 80121a0:	693b      	ldr	r3, [r7, #16]
 80121a2:	3301      	adds	r3, #1
 80121a4:	613b      	str	r3, [r7, #16]
        if (oldest == NULL) {
 80121a6:	6a3b      	ldr	r3, [r7, #32]
 80121a8:	2b00      	cmp	r3, #0
 80121aa:	d104      	bne.n	80121b6 <ip_reass_remove_oldest_datagram+0x62>
          oldest = r;
 80121ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80121ae:	623b      	str	r3, [r7, #32]
          oldest_prev = prev;
 80121b0:	69fb      	ldr	r3, [r7, #28]
 80121b2:	61bb      	str	r3, [r7, #24]
 80121b4:	e009      	b.n	80121ca <ip_reass_remove_oldest_datagram+0x76>
        } else if (r->timer <= oldest->timer) {
 80121b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80121b8:	7fda      	ldrb	r2, [r3, #31]
 80121ba:	6a3b      	ldr	r3, [r7, #32]
 80121bc:	7fdb      	ldrb	r3, [r3, #31]
 80121be:	429a      	cmp	r2, r3
 80121c0:	d803      	bhi.n	80121ca <ip_reass_remove_oldest_datagram+0x76>
          /* older than the previous oldest */
          oldest = r;
 80121c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80121c4:	623b      	str	r3, [r7, #32]
          oldest_prev = prev;
 80121c6:	69fb      	ldr	r3, [r7, #28]
 80121c8:	61bb      	str	r3, [r7, #24]
        }
      }
      if (r->next != NULL) {
 80121ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80121cc:	681b      	ldr	r3, [r3, #0]
 80121ce:	2b00      	cmp	r3, #0
 80121d0:	d001      	beq.n	80121d6 <ip_reass_remove_oldest_datagram+0x82>
        prev = r;
 80121d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80121d4:	61fb      	str	r3, [r7, #28]
      }
      r = r->next;
 80121d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80121d8:	681b      	ldr	r3, [r3, #0]
 80121da:	627b      	str	r3, [r7, #36]	; 0x24
    while (r != NULL) {
 80121dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80121de:	2b00      	cmp	r3, #0
 80121e0:	d1cb      	bne.n	801217a <ip_reass_remove_oldest_datagram+0x26>
    }
    if (oldest != NULL) {
 80121e2:	6a3b      	ldr	r3, [r7, #32]
 80121e4:	2b00      	cmp	r3, #0
 80121e6:	d008      	beq.n	80121fa <ip_reass_remove_oldest_datagram+0xa6>
      pbufs_freed_current = ip_reass_free_complete_datagram(oldest, oldest_prev);
 80121e8:	69b9      	ldr	r1, [r7, #24]
 80121ea:	6a38      	ldr	r0, [r7, #32]
 80121ec:	f7ff ff0e 	bl	801200c <ip_reass_free_complete_datagram>
 80121f0:	60f8      	str	r0, [r7, #12]
      pbufs_freed += pbufs_freed_current;
 80121f2:	697a      	ldr	r2, [r7, #20]
 80121f4:	68fb      	ldr	r3, [r7, #12]
 80121f6:	4413      	add	r3, r2
 80121f8:	617b      	str	r3, [r7, #20]
    }
  } while ((pbufs_freed < pbufs_needed) && (other_datagrams > 1));
 80121fa:	697a      	ldr	r2, [r7, #20]
 80121fc:	683b      	ldr	r3, [r7, #0]
 80121fe:	429a      	cmp	r2, r3
 8012200:	da02      	bge.n	8012208 <ip_reass_remove_oldest_datagram+0xb4>
 8012202:	693b      	ldr	r3, [r7, #16]
 8012204:	2b01      	cmp	r3, #1
 8012206:	dcac      	bgt.n	8012162 <ip_reass_remove_oldest_datagram+0xe>
  return pbufs_freed;
 8012208:	697b      	ldr	r3, [r7, #20]
}
 801220a:	4618      	mov	r0, r3
 801220c:	3728      	adds	r7, #40	; 0x28
 801220e:	46bd      	mov	sp, r7
 8012210:	bd80      	pop	{r7, pc}
 8012212:	bf00      	nop
 8012214:	24008740 	.word	0x24008740

08012218 <ip_reass_enqueue_new_datagram>:
 * @param clen number of pbufs needed to enqueue (used for freeing other datagrams if not enough space)
 * @return A pointer to the queue location into which the fragment was enqueued
 */
static struct ip_reassdata*
ip_reass_enqueue_new_datagram(struct ip_hdr *fraghdr, int clen)
{
 8012218:	b580      	push	{r7, lr}
 801221a:	b084      	sub	sp, #16
 801221c:	af00      	add	r7, sp, #0
 801221e:	6078      	str	r0, [r7, #4]
 8012220:	6039      	str	r1, [r7, #0]
#if ! IP_REASS_FREE_OLDEST
  LWIP_UNUSED_ARG(clen);
#endif

  /* No matching previous fragment found, allocate a new reassdata struct */
  ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 8012222:	2004      	movs	r0, #4
 8012224:	f7f7 fb24 	bl	8009870 <memp_malloc>
 8012228:	60f8      	str	r0, [r7, #12]
  if (ipr == NULL) {
 801222a:	68fb      	ldr	r3, [r7, #12]
 801222c:	2b00      	cmp	r3, #0
 801222e:	d110      	bne.n	8012252 <ip_reass_enqueue_new_datagram+0x3a>
#if IP_REASS_FREE_OLDEST
    if (ip_reass_remove_oldest_datagram(fraghdr, clen) >= clen) {
 8012230:	6839      	ldr	r1, [r7, #0]
 8012232:	6878      	ldr	r0, [r7, #4]
 8012234:	f7ff ff8e 	bl	8012154 <ip_reass_remove_oldest_datagram>
 8012238:	4602      	mov	r2, r0
 801223a:	683b      	ldr	r3, [r7, #0]
 801223c:	4293      	cmp	r3, r2
 801223e:	dc03      	bgt.n	8012248 <ip_reass_enqueue_new_datagram+0x30>
      ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 8012240:	2004      	movs	r0, #4
 8012242:	f7f7 fb15 	bl	8009870 <memp_malloc>
 8012246:	60f8      	str	r0, [r7, #12]
    }
    if (ipr == NULL)
 8012248:	68fb      	ldr	r3, [r7, #12]
 801224a:	2b00      	cmp	r3, #0
 801224c:	d101      	bne.n	8012252 <ip_reass_enqueue_new_datagram+0x3a>
#endif /* IP_REASS_FREE_OLDEST */
    {
      IPFRAG_STATS_INC(ip_frag.memerr);
      LWIP_DEBUGF(IP_REASS_DEBUG,("Failed to alloc reassdata struct\n"));
      return NULL;
 801224e:	2300      	movs	r3, #0
 8012250:	e016      	b.n	8012280 <ip_reass_enqueue_new_datagram+0x68>
    }
  }
  memset(ipr, 0, sizeof(struct ip_reassdata));
 8012252:	2220      	movs	r2, #32
 8012254:	2100      	movs	r1, #0
 8012256:	68f8      	ldr	r0, [r7, #12]
 8012258:	f003 fd38 	bl	8015ccc <memset>
  ipr->timer = IP_REASS_MAXAGE;
 801225c:	68fb      	ldr	r3, [r7, #12]
 801225e:	2203      	movs	r2, #3
 8012260:	77da      	strb	r2, [r3, #31]

  /* enqueue the new structure to the front of the list */
  ipr->next = reassdatagrams;
 8012262:	4b09      	ldr	r3, [pc, #36]	; (8012288 <ip_reass_enqueue_new_datagram+0x70>)
 8012264:	681a      	ldr	r2, [r3, #0]
 8012266:	68fb      	ldr	r3, [r7, #12]
 8012268:	601a      	str	r2, [r3, #0]
  reassdatagrams = ipr;
 801226a:	4a07      	ldr	r2, [pc, #28]	; (8012288 <ip_reass_enqueue_new_datagram+0x70>)
 801226c:	68fb      	ldr	r3, [r7, #12]
 801226e:	6013      	str	r3, [r2, #0]
  /* copy the ip header for later tests and input */
  /* @todo: no ip options supported? */
  SMEMCPY(&(ipr->iphdr), fraghdr, IP_HLEN);
 8012270:	68fb      	ldr	r3, [r7, #12]
 8012272:	3308      	adds	r3, #8
 8012274:	2214      	movs	r2, #20
 8012276:	6879      	ldr	r1, [r7, #4]
 8012278:	4618      	mov	r0, r3
 801227a:	f003 fd1c 	bl	8015cb6 <memcpy>
  return ipr;
 801227e:	68fb      	ldr	r3, [r7, #12]
}
 8012280:	4618      	mov	r0, r3
 8012282:	3710      	adds	r7, #16
 8012284:	46bd      	mov	sp, r7
 8012286:	bd80      	pop	{r7, pc}
 8012288:	24008740 	.word	0x24008740

0801228c <ip_reass_dequeue_datagram>:
 * Dequeues a datagram from the datagram queue. Doesn't deallocate the pbufs.
 * @param ipr points to the queue entry to dequeue
 */
static void
ip_reass_dequeue_datagram(struct ip_reassdata *ipr, struct ip_reassdata *prev)
{
 801228c:	b580      	push	{r7, lr}
 801228e:	b082      	sub	sp, #8
 8012290:	af00      	add	r7, sp, #0
 8012292:	6078      	str	r0, [r7, #4]
 8012294:	6039      	str	r1, [r7, #0]
  /* dequeue the reass struct  */
  if (reassdatagrams == ipr) {
 8012296:	4b10      	ldr	r3, [pc, #64]	; (80122d8 <ip_reass_dequeue_datagram+0x4c>)
 8012298:	681b      	ldr	r3, [r3, #0]
 801229a:	687a      	ldr	r2, [r7, #4]
 801229c:	429a      	cmp	r2, r3
 801229e:	d104      	bne.n	80122aa <ip_reass_dequeue_datagram+0x1e>
    /* it was the first in the list */
    reassdatagrams = ipr->next;
 80122a0:	687b      	ldr	r3, [r7, #4]
 80122a2:	681b      	ldr	r3, [r3, #0]
 80122a4:	4a0c      	ldr	r2, [pc, #48]	; (80122d8 <ip_reass_dequeue_datagram+0x4c>)
 80122a6:	6013      	str	r3, [r2, #0]
 80122a8:	e00d      	b.n	80122c6 <ip_reass_dequeue_datagram+0x3a>
  } else {
    /* it wasn't the first, so it must have a valid 'prev' */
    LWIP_ASSERT("sanity check linked list", prev != NULL);
 80122aa:	683b      	ldr	r3, [r7, #0]
 80122ac:	2b00      	cmp	r3, #0
 80122ae:	d106      	bne.n	80122be <ip_reass_dequeue_datagram+0x32>
 80122b0:	4b0a      	ldr	r3, [pc, #40]	; (80122dc <ip_reass_dequeue_datagram+0x50>)
 80122b2:	f240 1245 	movw	r2, #325	; 0x145
 80122b6:	490a      	ldr	r1, [pc, #40]	; (80122e0 <ip_reass_dequeue_datagram+0x54>)
 80122b8:	480a      	ldr	r0, [pc, #40]	; (80122e4 <ip_reass_dequeue_datagram+0x58>)
 80122ba:	f003 fc8b 	bl	8015bd4 <printf_>
    prev->next = ipr->next;
 80122be:	687b      	ldr	r3, [r7, #4]
 80122c0:	681a      	ldr	r2, [r3, #0]
 80122c2:	683b      	ldr	r3, [r7, #0]
 80122c4:	601a      	str	r2, [r3, #0]
  }

  /* now we can free the ip_reassdata struct */
  memp_free(MEMP_REASSDATA, ipr);
 80122c6:	6879      	ldr	r1, [r7, #4]
 80122c8:	2004      	movs	r0, #4
 80122ca:	f7f7 fb47 	bl	800995c <memp_free>
}
 80122ce:	bf00      	nop
 80122d0:	3708      	adds	r7, #8
 80122d2:	46bd      	mov	sp, r7
 80122d4:	bd80      	pop	{r7, pc}
 80122d6:	bf00      	nop
 80122d8:	24008740 	.word	0x24008740
 80122dc:	0801bc50 	.word	0x0801bc50
 80122e0:	0801bd10 	.word	0x0801bd10
 80122e4:	0801bc98 	.word	0x0801bc98

080122e8 <ip_reass_chain_frag_into_datagram_and_validate>:
 * @param is_last is 1 if this pbuf has MF==0 (ipr->flags not updated yet)
 * @return see IP_REASS_VALIDATE_* defines
 */
static int
ip_reass_chain_frag_into_datagram_and_validate(struct ip_reassdata *ipr, struct pbuf *new_p, int is_last)
{
 80122e8:	b580      	push	{r7, lr}
 80122ea:	b08c      	sub	sp, #48	; 0x30
 80122ec:	af00      	add	r7, sp, #0
 80122ee:	60f8      	str	r0, [r7, #12]
 80122f0:	60b9      	str	r1, [r7, #8]
 80122f2:	607a      	str	r2, [r7, #4]
  struct ip_reass_helper *iprh, *iprh_tmp, *iprh_prev=NULL;
 80122f4:	2300      	movs	r3, #0
 80122f6:	62bb      	str	r3, [r7, #40]	; 0x28
  struct pbuf *q;
  u16_t offset, len;
  struct ip_hdr *fraghdr;
  int valid = 1;
 80122f8:	2301      	movs	r3, #1
 80122fa:	623b      	str	r3, [r7, #32]

  /* Extract length and fragment offset from current fragment */
  fraghdr = (struct ip_hdr*)new_p->payload;
 80122fc:	68bb      	ldr	r3, [r7, #8]
 80122fe:	685b      	ldr	r3, [r3, #4]
 8012300:	61fb      	str	r3, [r7, #28]
  len = lwip_ntohs(IPH_LEN(fraghdr)) - IPH_HL(fraghdr) * 4;
 8012302:	69fb      	ldr	r3, [r7, #28]
 8012304:	885b      	ldrh	r3, [r3, #2]
 8012306:	b29b      	uxth	r3, r3
 8012308:	4618      	mov	r0, r3
 801230a:	f7f6 fea5 	bl	8009058 <lwip_htons>
 801230e:	4603      	mov	r3, r0
 8012310:	461a      	mov	r2, r3
 8012312:	69fb      	ldr	r3, [r7, #28]
 8012314:	781b      	ldrb	r3, [r3, #0]
 8012316:	b29b      	uxth	r3, r3
 8012318:	f003 030f 	and.w	r3, r3, #15
 801231c:	b29b      	uxth	r3, r3
 801231e:	009b      	lsls	r3, r3, #2
 8012320:	b29b      	uxth	r3, r3
 8012322:	1ad3      	subs	r3, r2, r3
 8012324:	837b      	strh	r3, [r7, #26]
  offset = (lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) * 8;
 8012326:	69fb      	ldr	r3, [r7, #28]
 8012328:	88db      	ldrh	r3, [r3, #6]
 801232a:	b29b      	uxth	r3, r3
 801232c:	4618      	mov	r0, r3
 801232e:	f7f6 fe93 	bl	8009058 <lwip_htons>
 8012332:	4603      	mov	r3, r0
 8012334:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8012338:	b29b      	uxth	r3, r3
 801233a:	00db      	lsls	r3, r3, #3
 801233c:	833b      	strh	r3, [r7, #24]
  /* overwrite the fragment's ip header from the pbuf with our helper struct,
   * and setup the embedded helper structure. */
  /* make sure the struct ip_reass_helper fits into the IP header */
  LWIP_ASSERT("sizeof(struct ip_reass_helper) <= IP_HLEN",
              sizeof(struct ip_reass_helper) <= IP_HLEN);
  iprh = (struct ip_reass_helper*)new_p->payload;
 801233e:	68bb      	ldr	r3, [r7, #8]
 8012340:	685b      	ldr	r3, [r3, #4]
 8012342:	62fb      	str	r3, [r7, #44]	; 0x2c
  iprh->next_pbuf = NULL;
 8012344:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012346:	2200      	movs	r2, #0
 8012348:	701a      	strb	r2, [r3, #0]
 801234a:	2200      	movs	r2, #0
 801234c:	705a      	strb	r2, [r3, #1]
 801234e:	2200      	movs	r2, #0
 8012350:	709a      	strb	r2, [r3, #2]
 8012352:	2200      	movs	r2, #0
 8012354:	70da      	strb	r2, [r3, #3]
  iprh->start = offset;
 8012356:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012358:	8b3a      	ldrh	r2, [r7, #24]
 801235a:	809a      	strh	r2, [r3, #4]
  iprh->end = offset + len;
 801235c:	8b3a      	ldrh	r2, [r7, #24]
 801235e:	8b7b      	ldrh	r3, [r7, #26]
 8012360:	4413      	add	r3, r2
 8012362:	b29a      	uxth	r2, r3
 8012364:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012366:	80da      	strh	r2, [r3, #6]

  /* Iterate through until we either get to the end of the list (append),
   * or we find one with a larger offset (insert). */
  for (q = ipr->p; q != NULL;) {
 8012368:	68fb      	ldr	r3, [r7, #12]
 801236a:	685b      	ldr	r3, [r3, #4]
 801236c:	627b      	str	r3, [r7, #36]	; 0x24
 801236e:	e061      	b.n	8012434 <ip_reass_chain_frag_into_datagram_and_validate+0x14c>
    iprh_tmp = (struct ip_reass_helper*)q->payload;
 8012370:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012372:	685b      	ldr	r3, [r3, #4]
 8012374:	617b      	str	r3, [r7, #20]
    if (iprh->start < iprh_tmp->start) {
 8012376:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012378:	889b      	ldrh	r3, [r3, #4]
 801237a:	b29a      	uxth	r2, r3
 801237c:	697b      	ldr	r3, [r7, #20]
 801237e:	889b      	ldrh	r3, [r3, #4]
 8012380:	b29b      	uxth	r3, r3
 8012382:	429a      	cmp	r2, r3
 8012384:	d232      	bcs.n	80123ec <ip_reass_chain_frag_into_datagram_and_validate+0x104>
      /* the new pbuf should be inserted before this */
      iprh->next_pbuf = q;
 8012386:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012388:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801238a:	601a      	str	r2, [r3, #0]
      if (iprh_prev != NULL) {
 801238c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801238e:	2b00      	cmp	r3, #0
 8012390:	d01f      	beq.n	80123d2 <ip_reass_chain_frag_into_datagram_and_validate+0xea>
        /* not the fragment with the lowest offset */
#if IP_REASS_CHECK_OVERLAP
        if ((iprh->start < iprh_prev->end) || (iprh->end > iprh_tmp->start)) {
 8012392:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012394:	889b      	ldrh	r3, [r3, #4]
 8012396:	b29a      	uxth	r2, r3
 8012398:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801239a:	88db      	ldrh	r3, [r3, #6]
 801239c:	b29b      	uxth	r3, r3
 801239e:	429a      	cmp	r2, r3
 80123a0:	f0c0 80e3 	bcc.w	801256a <ip_reass_chain_frag_into_datagram_and_validate+0x282>
 80123a4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80123a6:	88db      	ldrh	r3, [r3, #6]
 80123a8:	b29a      	uxth	r2, r3
 80123aa:	697b      	ldr	r3, [r7, #20]
 80123ac:	889b      	ldrh	r3, [r3, #4]
 80123ae:	b29b      	uxth	r3, r3
 80123b0:	429a      	cmp	r2, r3
 80123b2:	f200 80da 	bhi.w	801256a <ip_reass_chain_frag_into_datagram_and_validate+0x282>
          /* fragment overlaps with previous or following, throw away */
          goto freepbuf;
        }
#endif /* IP_REASS_CHECK_OVERLAP */
        iprh_prev->next_pbuf = new_p;
 80123b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80123b8:	68ba      	ldr	r2, [r7, #8]
 80123ba:	601a      	str	r2, [r3, #0]
        if (iprh_prev->end != iprh->start) {
 80123bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80123be:	88db      	ldrh	r3, [r3, #6]
 80123c0:	b29a      	uxth	r2, r3
 80123c2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80123c4:	889b      	ldrh	r3, [r3, #4]
 80123c6:	b29b      	uxth	r3, r3
 80123c8:	429a      	cmp	r2, r3
 80123ca:	d037      	beq.n	801243c <ip_reass_chain_frag_into_datagram_and_validate+0x154>
          /* There is a fragment missing between the current
           * and the previous fragment */
          valid = 0;
 80123cc:	2300      	movs	r3, #0
 80123ce:	623b      	str	r3, [r7, #32]
        }
#endif /* IP_REASS_CHECK_OVERLAP */
        /* fragment with the lowest offset */
        ipr->p = new_p;
      }
      break;
 80123d0:	e034      	b.n	801243c <ip_reass_chain_frag_into_datagram_and_validate+0x154>
        if (iprh->end > iprh_tmp->start) {
 80123d2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80123d4:	88db      	ldrh	r3, [r3, #6]
 80123d6:	b29a      	uxth	r2, r3
 80123d8:	697b      	ldr	r3, [r7, #20]
 80123da:	889b      	ldrh	r3, [r3, #4]
 80123dc:	b29b      	uxth	r3, r3
 80123de:	429a      	cmp	r2, r3
 80123e0:	f200 80c5 	bhi.w	801256e <ip_reass_chain_frag_into_datagram_and_validate+0x286>
        ipr->p = new_p;
 80123e4:	68fb      	ldr	r3, [r7, #12]
 80123e6:	68ba      	ldr	r2, [r7, #8]
 80123e8:	605a      	str	r2, [r3, #4]
      break;
 80123ea:	e027      	b.n	801243c <ip_reass_chain_frag_into_datagram_and_validate+0x154>
    } else if (iprh->start == iprh_tmp->start) {
 80123ec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80123ee:	889b      	ldrh	r3, [r3, #4]
 80123f0:	b29a      	uxth	r2, r3
 80123f2:	697b      	ldr	r3, [r7, #20]
 80123f4:	889b      	ldrh	r3, [r3, #4]
 80123f6:	b29b      	uxth	r3, r3
 80123f8:	429a      	cmp	r2, r3
 80123fa:	f000 80ba 	beq.w	8012572 <ip_reass_chain_frag_into_datagram_and_validate+0x28a>
      /* received the same datagram twice: no need to keep the datagram */
      goto freepbuf;
#if IP_REASS_CHECK_OVERLAP
    } else if (iprh->start < iprh_tmp->end) {
 80123fe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012400:	889b      	ldrh	r3, [r3, #4]
 8012402:	b29a      	uxth	r2, r3
 8012404:	697b      	ldr	r3, [r7, #20]
 8012406:	88db      	ldrh	r3, [r3, #6]
 8012408:	b29b      	uxth	r3, r3
 801240a:	429a      	cmp	r2, r3
 801240c:	f0c0 80b3 	bcc.w	8012576 <ip_reass_chain_frag_into_datagram_and_validate+0x28e>
      /* overlap: no need to keep the new datagram */
      goto freepbuf;
#endif /* IP_REASS_CHECK_OVERLAP */
    } else {
      /* Check if the fragments received so far have no holes. */
      if (iprh_prev != NULL) {
 8012410:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012412:	2b00      	cmp	r3, #0
 8012414:	d009      	beq.n	801242a <ip_reass_chain_frag_into_datagram_and_validate+0x142>
        if (iprh_prev->end != iprh_tmp->start) {
 8012416:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012418:	88db      	ldrh	r3, [r3, #6]
 801241a:	b29a      	uxth	r2, r3
 801241c:	697b      	ldr	r3, [r7, #20]
 801241e:	889b      	ldrh	r3, [r3, #4]
 8012420:	b29b      	uxth	r3, r3
 8012422:	429a      	cmp	r2, r3
 8012424:	d001      	beq.n	801242a <ip_reass_chain_frag_into_datagram_and_validate+0x142>
          /* There is a fragment missing between the current
           * and the previous fragment */
          valid = 0;
 8012426:	2300      	movs	r3, #0
 8012428:	623b      	str	r3, [r7, #32]
        }
      }
    }
    q = iprh_tmp->next_pbuf;
 801242a:	697b      	ldr	r3, [r7, #20]
 801242c:	681b      	ldr	r3, [r3, #0]
 801242e:	627b      	str	r3, [r7, #36]	; 0x24
    iprh_prev = iprh_tmp;
 8012430:	697b      	ldr	r3, [r7, #20]
 8012432:	62bb      	str	r3, [r7, #40]	; 0x28
  for (q = ipr->p; q != NULL;) {
 8012434:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012436:	2b00      	cmp	r3, #0
 8012438:	d19a      	bne.n	8012370 <ip_reass_chain_frag_into_datagram_and_validate+0x88>
 801243a:	e000      	b.n	801243e <ip_reass_chain_frag_into_datagram_and_validate+0x156>
      break;
 801243c:	bf00      	nop
  }

  /* If q is NULL, then we made it to the end of the list. Determine what to do now */
  if (q == NULL) {
 801243e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012440:	2b00      	cmp	r3, #0
 8012442:	d12d      	bne.n	80124a0 <ip_reass_chain_frag_into_datagram_and_validate+0x1b8>
    if (iprh_prev != NULL) {
 8012444:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012446:	2b00      	cmp	r3, #0
 8012448:	d01c      	beq.n	8012484 <ip_reass_chain_frag_into_datagram_and_validate+0x19c>
      /* this is (for now), the fragment with the highest offset:
       * chain it to the last fragment */
#if IP_REASS_CHECK_OVERLAP
      LWIP_ASSERT("check fragments don't overlap", iprh_prev->end <= iprh->start);
 801244a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801244c:	88db      	ldrh	r3, [r3, #6]
 801244e:	b29a      	uxth	r2, r3
 8012450:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012452:	889b      	ldrh	r3, [r3, #4]
 8012454:	b29b      	uxth	r3, r3
 8012456:	429a      	cmp	r2, r3
 8012458:	d906      	bls.n	8012468 <ip_reass_chain_frag_into_datagram_and_validate+0x180>
 801245a:	4b51      	ldr	r3, [pc, #324]	; (80125a0 <ip_reass_chain_frag_into_datagram_and_validate+0x2b8>)
 801245c:	f240 12ab 	movw	r2, #427	; 0x1ab
 8012460:	4950      	ldr	r1, [pc, #320]	; (80125a4 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 8012462:	4851      	ldr	r0, [pc, #324]	; (80125a8 <ip_reass_chain_frag_into_datagram_and_validate+0x2c0>)
 8012464:	f003 fbb6 	bl	8015bd4 <printf_>
#endif /* IP_REASS_CHECK_OVERLAP */
      iprh_prev->next_pbuf = new_p;
 8012468:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801246a:	68ba      	ldr	r2, [r7, #8]
 801246c:	601a      	str	r2, [r3, #0]
      if (iprh_prev->end != iprh->start) {
 801246e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012470:	88db      	ldrh	r3, [r3, #6]
 8012472:	b29a      	uxth	r2, r3
 8012474:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012476:	889b      	ldrh	r3, [r3, #4]
 8012478:	b29b      	uxth	r3, r3
 801247a:	429a      	cmp	r2, r3
 801247c:	d010      	beq.n	80124a0 <ip_reass_chain_frag_into_datagram_and_validate+0x1b8>
        valid = 0;
 801247e:	2300      	movs	r3, #0
 8012480:	623b      	str	r3, [r7, #32]
 8012482:	e00d      	b.n	80124a0 <ip_reass_chain_frag_into_datagram_and_validate+0x1b8>
      }
    } else {
#if IP_REASS_CHECK_OVERLAP
      LWIP_ASSERT("no previous fragment, this must be the first fragment!",
 8012484:	68fb      	ldr	r3, [r7, #12]
 8012486:	685b      	ldr	r3, [r3, #4]
 8012488:	2b00      	cmp	r3, #0
 801248a:	d006      	beq.n	801249a <ip_reass_chain_frag_into_datagram_and_validate+0x1b2>
 801248c:	4b44      	ldr	r3, [pc, #272]	; (80125a0 <ip_reass_chain_frag_into_datagram_and_validate+0x2b8>)
 801248e:	f44f 72da 	mov.w	r2, #436	; 0x1b4
 8012492:	4946      	ldr	r1, [pc, #280]	; (80125ac <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 8012494:	4844      	ldr	r0, [pc, #272]	; (80125a8 <ip_reass_chain_frag_into_datagram_and_validate+0x2c0>)
 8012496:	f003 fb9d 	bl	8015bd4 <printf_>
        ipr->p == NULL);
#endif /* IP_REASS_CHECK_OVERLAP */
      /* this is the first fragment we ever received for this ip datagram */
      ipr->p = new_p;
 801249a:	68fb      	ldr	r3, [r7, #12]
 801249c:	68ba      	ldr	r2, [r7, #8]
 801249e:	605a      	str	r2, [r3, #4]
    }
  }

  /* At this point, the validation part begins: */
  /* If we already received the last fragment */
  if (is_last || ((ipr->flags & IP_REASS_FLAG_LASTFRAG) != 0)) {
 80124a0:	687b      	ldr	r3, [r7, #4]
 80124a2:	2b00      	cmp	r3, #0
 80124a4:	d105      	bne.n	80124b2 <ip_reass_chain_frag_into_datagram_and_validate+0x1ca>
 80124a6:	68fb      	ldr	r3, [r7, #12]
 80124a8:	7f9b      	ldrb	r3, [r3, #30]
 80124aa:	f003 0301 	and.w	r3, r3, #1
 80124ae:	2b00      	cmp	r3, #0
 80124b0:	d059      	beq.n	8012566 <ip_reass_chain_frag_into_datagram_and_validate+0x27e>
    /* and had no holes so far */
    if (valid) {
 80124b2:	6a3b      	ldr	r3, [r7, #32]
 80124b4:	2b00      	cmp	r3, #0
 80124b6:	d04f      	beq.n	8012558 <ip_reass_chain_frag_into_datagram_and_validate+0x270>
      /* then check if the rest of the fragments is here */
      /* Check if the queue starts with the first datagram */
      if ((ipr->p == NULL) || (((struct ip_reass_helper*)ipr->p->payload)->start != 0)) {
 80124b8:	68fb      	ldr	r3, [r7, #12]
 80124ba:	685b      	ldr	r3, [r3, #4]
 80124bc:	2b00      	cmp	r3, #0
 80124be:	d006      	beq.n	80124ce <ip_reass_chain_frag_into_datagram_and_validate+0x1e6>
 80124c0:	68fb      	ldr	r3, [r7, #12]
 80124c2:	685b      	ldr	r3, [r3, #4]
 80124c4:	685b      	ldr	r3, [r3, #4]
 80124c6:	889b      	ldrh	r3, [r3, #4]
 80124c8:	b29b      	uxth	r3, r3
 80124ca:	2b00      	cmp	r3, #0
 80124cc:	d002      	beq.n	80124d4 <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
        valid = 0;
 80124ce:	2300      	movs	r3, #0
 80124d0:	623b      	str	r3, [r7, #32]
 80124d2:	e041      	b.n	8012558 <ip_reass_chain_frag_into_datagram_and_validate+0x270>
      } else {
        /* and check that there are no holes after this datagram */
        iprh_prev = iprh;
 80124d4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80124d6:	62bb      	str	r3, [r7, #40]	; 0x28
        q = iprh->next_pbuf;
 80124d8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80124da:	681b      	ldr	r3, [r3, #0]
 80124dc:	627b      	str	r3, [r7, #36]	; 0x24
        while (q != NULL) {
 80124de:	e012      	b.n	8012506 <ip_reass_chain_frag_into_datagram_and_validate+0x21e>
          iprh = (struct ip_reass_helper*)q->payload;
 80124e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80124e2:	685b      	ldr	r3, [r3, #4]
 80124e4:	62fb      	str	r3, [r7, #44]	; 0x2c
          if (iprh_prev->end != iprh->start) {
 80124e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80124e8:	88db      	ldrh	r3, [r3, #6]
 80124ea:	b29a      	uxth	r2, r3
 80124ec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80124ee:	889b      	ldrh	r3, [r3, #4]
 80124f0:	b29b      	uxth	r3, r3
 80124f2:	429a      	cmp	r2, r3
 80124f4:	d002      	beq.n	80124fc <ip_reass_chain_frag_into_datagram_and_validate+0x214>
            valid = 0;
 80124f6:	2300      	movs	r3, #0
 80124f8:	623b      	str	r3, [r7, #32]
            break;
 80124fa:	e007      	b.n	801250c <ip_reass_chain_frag_into_datagram_and_validate+0x224>
          }
          iprh_prev = iprh;
 80124fc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80124fe:	62bb      	str	r3, [r7, #40]	; 0x28
          q = iprh->next_pbuf;
 8012500:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012502:	681b      	ldr	r3, [r3, #0]
 8012504:	627b      	str	r3, [r7, #36]	; 0x24
        while (q != NULL) {
 8012506:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012508:	2b00      	cmp	r3, #0
 801250a:	d1e9      	bne.n	80124e0 <ip_reass_chain_frag_into_datagram_and_validate+0x1f8>
        }
        /* if still valid, all fragments are received
         * (because to the MF==0 already arrived */
        if (valid) {
 801250c:	6a3b      	ldr	r3, [r7, #32]
 801250e:	2b00      	cmp	r3, #0
 8012510:	d022      	beq.n	8012558 <ip_reass_chain_frag_into_datagram_and_validate+0x270>
          LWIP_ASSERT("sanity check", ipr->p != NULL);
 8012512:	68fb      	ldr	r3, [r7, #12]
 8012514:	685b      	ldr	r3, [r3, #4]
 8012516:	2b00      	cmp	r3, #0
 8012518:	d106      	bne.n	8012528 <ip_reass_chain_frag_into_datagram_and_validate+0x240>
 801251a:	4b21      	ldr	r3, [pc, #132]	; (80125a0 <ip_reass_chain_frag_into_datagram_and_validate+0x2b8>)
 801251c:	f44f 72ea 	mov.w	r2, #468	; 0x1d4
 8012520:	4923      	ldr	r1, [pc, #140]	; (80125b0 <ip_reass_chain_frag_into_datagram_and_validate+0x2c8>)
 8012522:	4821      	ldr	r0, [pc, #132]	; (80125a8 <ip_reass_chain_frag_into_datagram_and_validate+0x2c0>)
 8012524:	f003 fb56 	bl	8015bd4 <printf_>
          LWIP_ASSERT("sanity check",
 8012528:	68fb      	ldr	r3, [r7, #12]
 801252a:	685b      	ldr	r3, [r3, #4]
 801252c:	685b      	ldr	r3, [r3, #4]
 801252e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8012530:	429a      	cmp	r2, r3
 8012532:	d106      	bne.n	8012542 <ip_reass_chain_frag_into_datagram_and_validate+0x25a>
 8012534:	4b1a      	ldr	r3, [pc, #104]	; (80125a0 <ip_reass_chain_frag_into_datagram_and_validate+0x2b8>)
 8012536:	f44f 72eb 	mov.w	r2, #470	; 0x1d6
 801253a:	491d      	ldr	r1, [pc, #116]	; (80125b0 <ip_reass_chain_frag_into_datagram_and_validate+0x2c8>)
 801253c:	481a      	ldr	r0, [pc, #104]	; (80125a8 <ip_reass_chain_frag_into_datagram_and_validate+0x2c0>)
 801253e:	f003 fb49 	bl	8015bd4 <printf_>
            ((struct ip_reass_helper*)ipr->p->payload) != iprh);
          LWIP_ASSERT("validate_datagram:next_pbuf!=NULL",
 8012542:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012544:	681b      	ldr	r3, [r3, #0]
 8012546:	2b00      	cmp	r3, #0
 8012548:	d006      	beq.n	8012558 <ip_reass_chain_frag_into_datagram_and_validate+0x270>
 801254a:	4b15      	ldr	r3, [pc, #84]	; (80125a0 <ip_reass_chain_frag_into_datagram_and_validate+0x2b8>)
 801254c:	f44f 72ec 	mov.w	r2, #472	; 0x1d8
 8012550:	4918      	ldr	r1, [pc, #96]	; (80125b4 <ip_reass_chain_frag_into_datagram_and_validate+0x2cc>)
 8012552:	4815      	ldr	r0, [pc, #84]	; (80125a8 <ip_reass_chain_frag_into_datagram_and_validate+0x2c0>)
 8012554:	f003 fb3e 	bl	8015bd4 <printf_>
      }
    }
    /* If valid is 0 here, there are some fragments missing in the middle
     * (since MF == 0 has already arrived). Such datagrams simply time out if
     * no more fragments are received... */
    return valid ? IP_REASS_VALIDATE_TELEGRAM_FINISHED : IP_REASS_VALIDATE_PBUF_QUEUED;
 8012558:	6a3b      	ldr	r3, [r7, #32]
 801255a:	2b00      	cmp	r3, #0
 801255c:	bf14      	ite	ne
 801255e:	2301      	movne	r3, #1
 8012560:	2300      	moveq	r3, #0
 8012562:	b2db      	uxtb	r3, r3
 8012564:	e018      	b.n	8012598 <ip_reass_chain_frag_into_datagram_and_validate+0x2b0>
  }
  /* If we come here, not all fragments were received, yet! */
  return IP_REASS_VALIDATE_PBUF_QUEUED; /* not yet valid! */
 8012566:	2300      	movs	r3, #0
 8012568:	e016      	b.n	8012598 <ip_reass_chain_frag_into_datagram_and_validate+0x2b0>
#if IP_REASS_CHECK_OVERLAP
freepbuf:
 801256a:	bf00      	nop
 801256c:	e004      	b.n	8012578 <ip_reass_chain_frag_into_datagram_and_validate+0x290>
          goto freepbuf;
 801256e:	bf00      	nop
 8012570:	e002      	b.n	8012578 <ip_reass_chain_frag_into_datagram_and_validate+0x290>
      goto freepbuf;
 8012572:	bf00      	nop
 8012574:	e000      	b.n	8012578 <ip_reass_chain_frag_into_datagram_and_validate+0x290>
      goto freepbuf;
 8012576:	bf00      	nop
  ip_reass_pbufcount -= pbuf_clen(new_p);
 8012578:	68b8      	ldr	r0, [r7, #8]
 801257a:	f7f8 f833 	bl	800a5e4 <pbuf_clen>
 801257e:	4603      	mov	r3, r0
 8012580:	461a      	mov	r2, r3
 8012582:	4b0d      	ldr	r3, [pc, #52]	; (80125b8 <ip_reass_chain_frag_into_datagram_and_validate+0x2d0>)
 8012584:	881b      	ldrh	r3, [r3, #0]
 8012586:	1a9b      	subs	r3, r3, r2
 8012588:	b29a      	uxth	r2, r3
 801258a:	4b0b      	ldr	r3, [pc, #44]	; (80125b8 <ip_reass_chain_frag_into_datagram_and_validate+0x2d0>)
 801258c:	801a      	strh	r2, [r3, #0]
  pbuf_free(new_p);
 801258e:	68b8      	ldr	r0, [r7, #8]
 8012590:	f7f7 ff8e 	bl	800a4b0 <pbuf_free>
  return IP_REASS_VALIDATE_PBUF_DROPPED;
 8012594:	f04f 33ff 	mov.w	r3, #4294967295
#endif /* IP_REASS_CHECK_OVERLAP */
}
 8012598:	4618      	mov	r0, r3
 801259a:	3730      	adds	r7, #48	; 0x30
 801259c:	46bd      	mov	sp, r7
 801259e:	bd80      	pop	{r7, pc}
 80125a0:	0801bc50 	.word	0x0801bc50
 80125a4:	0801bd2c 	.word	0x0801bd2c
 80125a8:	0801bc98 	.word	0x0801bc98
 80125ac:	0801bd4c 	.word	0x0801bd4c
 80125b0:	0801bd84 	.word	0x0801bd84
 80125b4:	0801bd94 	.word	0x0801bd94
 80125b8:	24008744 	.word	0x24008744

080125bc <ip4_reass>:
 * @param p points to a pbuf chain of the fragment
 * @return NULL if reassembly is incomplete, ? otherwise
 */
struct pbuf *
ip4_reass(struct pbuf *p)
{
 80125bc:	b580      	push	{r7, lr}
 80125be:	b08e      	sub	sp, #56	; 0x38
 80125c0:	af00      	add	r7, sp, #0
 80125c2:	6078      	str	r0, [r7, #4]
  int is_last;

  IPFRAG_STATS_INC(ip_frag.recv);
  MIB2_STATS_INC(mib2.ipreasmreqds);

  fraghdr = (struct ip_hdr*)p->payload;
 80125c4:	687b      	ldr	r3, [r7, #4]
 80125c6:	685b      	ldr	r3, [r3, #4]
 80125c8:	62bb      	str	r3, [r7, #40]	; 0x28

  if ((IPH_HL(fraghdr) * 4) != IP_HLEN) {
 80125ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80125cc:	781b      	ldrb	r3, [r3, #0]
 80125ce:	f003 030f 	and.w	r3, r3, #15
 80125d2:	009b      	lsls	r3, r3, #2
 80125d4:	2b14      	cmp	r3, #20
 80125d6:	f040 8131 	bne.w	801283c <ip4_reass+0x280>
    LWIP_DEBUGF(IP_REASS_DEBUG,("ip4_reass: IP options currently not supported!\n"));
    IPFRAG_STATS_INC(ip_frag.err);
    goto nullreturn;
  }

  offset = (lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) * 8;
 80125da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80125dc:	88db      	ldrh	r3, [r3, #6]
 80125de:	b29b      	uxth	r3, r3
 80125e0:	4618      	mov	r0, r3
 80125e2:	f7f6 fd39 	bl	8009058 <lwip_htons>
 80125e6:	4603      	mov	r3, r0
 80125e8:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80125ec:	b29b      	uxth	r3, r3
 80125ee:	00db      	lsls	r3, r3, #3
 80125f0:	84fb      	strh	r3, [r7, #38]	; 0x26
  len = lwip_ntohs(IPH_LEN(fraghdr)) - IPH_HL(fraghdr) * 4;
 80125f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80125f4:	885b      	ldrh	r3, [r3, #2]
 80125f6:	b29b      	uxth	r3, r3
 80125f8:	4618      	mov	r0, r3
 80125fa:	f7f6 fd2d 	bl	8009058 <lwip_htons>
 80125fe:	4603      	mov	r3, r0
 8012600:	461a      	mov	r2, r3
 8012602:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012604:	781b      	ldrb	r3, [r3, #0]
 8012606:	b29b      	uxth	r3, r3
 8012608:	f003 030f 	and.w	r3, r3, #15
 801260c:	b29b      	uxth	r3, r3
 801260e:	009b      	lsls	r3, r3, #2
 8012610:	b29b      	uxth	r3, r3
 8012612:	1ad3      	subs	r3, r2, r3
 8012614:	84bb      	strh	r3, [r7, #36]	; 0x24

  /* Check if we are allowed to enqueue more datagrams. */
  clen = pbuf_clen(p);
 8012616:	6878      	ldr	r0, [r7, #4]
 8012618:	f7f7 ffe4 	bl	800a5e4 <pbuf_clen>
 801261c:	4603      	mov	r3, r0
 801261e:	847b      	strh	r3, [r7, #34]	; 0x22
  if ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS) {
 8012620:	4b8d      	ldr	r3, [pc, #564]	; (8012858 <ip4_reass+0x29c>)
 8012622:	881b      	ldrh	r3, [r3, #0]
 8012624:	461a      	mov	r2, r3
 8012626:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8012628:	4413      	add	r3, r2
 801262a:	2b0a      	cmp	r3, #10
 801262c:	dd10      	ble.n	8012650 <ip4_reass+0x94>
#if IP_REASS_FREE_OLDEST
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 801262e:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8012630:	4619      	mov	r1, r3
 8012632:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8012634:	f7ff fd8e 	bl	8012154 <ip_reass_remove_oldest_datagram>
 8012638:	4603      	mov	r3, r0
 801263a:	2b00      	cmp	r3, #0
 801263c:	f000 8100 	beq.w	8012840 <ip4_reass+0x284>
        ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS))
 8012640:	4b85      	ldr	r3, [pc, #532]	; (8012858 <ip4_reass+0x29c>)
 8012642:	881b      	ldrh	r3, [r3, #0]
 8012644:	461a      	mov	r2, r3
 8012646:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8012648:	4413      	add	r3, r2
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 801264a:	2b0a      	cmp	r3, #10
 801264c:	f300 80f8 	bgt.w	8012840 <ip4_reass+0x284>
    }
  }

  /* Look for the datagram the fragment belongs to in the current datagram queue,
   * remembering the previous in the queue for later dequeueing. */
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 8012650:	4b82      	ldr	r3, [pc, #520]	; (801285c <ip4_reass+0x2a0>)
 8012652:	681b      	ldr	r3, [r3, #0]
 8012654:	633b      	str	r3, [r7, #48]	; 0x30
 8012656:	e015      	b.n	8012684 <ip4_reass+0xc8>
    /* Check if the incoming fragment matches the one currently present
       in the reassembly buffer. If so, we proceed with copying the
       fragment into the buffer. */
    if (IP_ADDRESSES_AND_ID_MATCH(&ipr->iphdr, fraghdr)) {
 8012658:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801265a:	695a      	ldr	r2, [r3, #20]
 801265c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801265e:	68db      	ldr	r3, [r3, #12]
 8012660:	429a      	cmp	r2, r3
 8012662:	d10c      	bne.n	801267e <ip4_reass+0xc2>
 8012664:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012666:	699a      	ldr	r2, [r3, #24]
 8012668:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801266a:	691b      	ldr	r3, [r3, #16]
 801266c:	429a      	cmp	r2, r3
 801266e:	d106      	bne.n	801267e <ip4_reass+0xc2>
 8012670:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012672:	899a      	ldrh	r2, [r3, #12]
 8012674:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012676:	889b      	ldrh	r3, [r3, #4]
 8012678:	b29b      	uxth	r3, r3
 801267a:	429a      	cmp	r2, r3
 801267c:	d006      	beq.n	801268c <ip4_reass+0xd0>
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 801267e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012680:	681b      	ldr	r3, [r3, #0]
 8012682:	633b      	str	r3, [r7, #48]	; 0x30
 8012684:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012686:	2b00      	cmp	r3, #0
 8012688:	d1e6      	bne.n	8012658 <ip4_reass+0x9c>
 801268a:	e000      	b.n	801268e <ip4_reass+0xd2>
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: matching previous fragment ID=%"X16_F"\n",
        lwip_ntohs(IPH_ID(fraghdr))));
      IPFRAG_STATS_INC(ip_frag.cachehit);
      break;
 801268c:	bf00      	nop
    }
  }

  if (ipr == NULL) {
 801268e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012690:	2b00      	cmp	r3, #0
 8012692:	d109      	bne.n	80126a8 <ip4_reass+0xec>
  /* Enqueue a new datagram into the datagram queue */
    ipr = ip_reass_enqueue_new_datagram(fraghdr, clen);
 8012694:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8012696:	4619      	mov	r1, r3
 8012698:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 801269a:	f7ff fdbd 	bl	8012218 <ip_reass_enqueue_new_datagram>
 801269e:	6338      	str	r0, [r7, #48]	; 0x30
    /* Bail if unable to enqueue */
    if (ipr == NULL) {
 80126a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80126a2:	2b00      	cmp	r3, #0
 80126a4:	d11c      	bne.n	80126e0 <ip4_reass+0x124>
      goto nullreturn;
 80126a6:	e0ce      	b.n	8012846 <ip4_reass+0x28a>
    }
  } else {
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
 80126a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80126aa:	88db      	ldrh	r3, [r3, #6]
 80126ac:	b29b      	uxth	r3, r3
 80126ae:	4618      	mov	r0, r3
 80126b0:	f7f6 fcd2 	bl	8009058 <lwip_htons>
 80126b4:	4603      	mov	r3, r0
 80126b6:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80126ba:	2b00      	cmp	r3, #0
 80126bc:	d110      	bne.n	80126e0 <ip4_reass+0x124>
      ((lwip_ntohs(IPH_OFFSET(&ipr->iphdr)) & IP_OFFMASK) != 0)) {
 80126be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80126c0:	89db      	ldrh	r3, [r3, #14]
 80126c2:	4618      	mov	r0, r3
 80126c4:	f7f6 fcc8 	bl	8009058 <lwip_htons>
 80126c8:	4603      	mov	r3, r0
 80126ca:	f3c3 030c 	ubfx	r3, r3, #0, #13
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
 80126ce:	2b00      	cmp	r3, #0
 80126d0:	d006      	beq.n	80126e0 <ip4_reass+0x124>
      /* ipr->iphdr is not the header from the first fragment, but fraghdr is
       * -> copy fraghdr into ipr->iphdr since we want to have the header
       * of the first fragment (for ICMP time exceeded and later, for copying
       * all options, if supported)*/
      SMEMCPY(&ipr->iphdr, fraghdr, IP_HLEN);
 80126d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80126d4:	3308      	adds	r3, #8
 80126d6:	2214      	movs	r2, #20
 80126d8:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80126da:	4618      	mov	r0, r3
 80126dc:	f003 faeb 	bl	8015cb6 <memcpy>

  /* At this point, we have either created a new entry or pointing
   * to an existing one */

  /* check for 'no more fragments', and update queue entry*/
  is_last = (IPH_OFFSET(fraghdr) & PP_NTOHS(IP_MF)) == 0;
 80126e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80126e2:	88db      	ldrh	r3, [r3, #6]
 80126e4:	b29b      	uxth	r3, r3
 80126e6:	f003 0320 	and.w	r3, r3, #32
 80126ea:	2b00      	cmp	r3, #0
 80126ec:	bf0c      	ite	eq
 80126ee:	2301      	moveq	r3, #1
 80126f0:	2300      	movne	r3, #0
 80126f2:	b2db      	uxtb	r3, r3
 80126f4:	61fb      	str	r3, [r7, #28]
  if (is_last) {
 80126f6:	69fb      	ldr	r3, [r7, #28]
 80126f8:	2b00      	cmp	r3, #0
 80126fa:	d00e      	beq.n	801271a <ip4_reass+0x15e>
    u16_t datagram_len = (u16_t)(offset + len);
 80126fc:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 80126fe:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8012700:	4413      	add	r3, r2
 8012702:	837b      	strh	r3, [r7, #26]
    if ((datagram_len < offset) || (datagram_len > (0xFFFF - IP_HLEN))) {
 8012704:	8b7a      	ldrh	r2, [r7, #26]
 8012706:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8012708:	429a      	cmp	r2, r3
 801270a:	f0c0 8099 	bcc.w	8012840 <ip4_reass+0x284>
 801270e:	8b7b      	ldrh	r3, [r7, #26]
 8012710:	f64f 72eb 	movw	r2, #65515	; 0xffeb
 8012714:	4293      	cmp	r3, r2
 8012716:	f200 8093 	bhi.w	8012840 <ip4_reass+0x284>
      goto nullreturn;
    }
  }
  /* find the right place to insert this pbuf */
  /* @todo: trim pbufs if fragments are overlapping */
  valid = ip_reass_chain_frag_into_datagram_and_validate(ipr, p, is_last);
 801271a:	69fa      	ldr	r2, [r7, #28]
 801271c:	6879      	ldr	r1, [r7, #4]
 801271e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8012720:	f7ff fde2 	bl	80122e8 <ip_reass_chain_frag_into_datagram_and_validate>
 8012724:	6178      	str	r0, [r7, #20]
  if (valid == IP_REASS_VALIDATE_PBUF_DROPPED) {
 8012726:	697b      	ldr	r3, [r7, #20]
 8012728:	f1b3 3fff 	cmp.w	r3, #4294967295
 801272c:	f000 808a 	beq.w	8012844 <ip4_reass+0x288>
  /* if we come here, the pbuf has been enqueued */

  /* Track the current number of pbufs current 'in-flight', in order to limit
     the number of fragments that may be enqueued at any one time
     (overflow checked by testing against IP_REASS_MAX_PBUFS) */
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount + clen);
 8012730:	4b49      	ldr	r3, [pc, #292]	; (8012858 <ip4_reass+0x29c>)
 8012732:	881a      	ldrh	r2, [r3, #0]
 8012734:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8012736:	4413      	add	r3, r2
 8012738:	b29a      	uxth	r2, r3
 801273a:	4b47      	ldr	r3, [pc, #284]	; (8012858 <ip4_reass+0x29c>)
 801273c:	801a      	strh	r2, [r3, #0]
  if (is_last) {
 801273e:	69fb      	ldr	r3, [r7, #28]
 8012740:	2b00      	cmp	r3, #0
 8012742:	d00d      	beq.n	8012760 <ip4_reass+0x1a4>
    u16_t datagram_len = (u16_t)(offset + len);
 8012744:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8012746:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8012748:	4413      	add	r3, r2
 801274a:	827b      	strh	r3, [r7, #18]
    ipr->datagram_len = datagram_len;
 801274c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801274e:	8a7a      	ldrh	r2, [r7, #18]
 8012750:	839a      	strh	r2, [r3, #28]
    ipr->flags |= IP_REASS_FLAG_LASTFRAG;
 8012752:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012754:	7f9b      	ldrb	r3, [r3, #30]
 8012756:	f043 0301 	orr.w	r3, r3, #1
 801275a:	b2da      	uxtb	r2, r3
 801275c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801275e:	779a      	strb	r2, [r3, #30]
    LWIP_DEBUGF(IP_REASS_DEBUG,
     ("ip4_reass: last fragment seen, total len %"S16_F"\n",
      ipr->datagram_len));
  }

  if (valid == IP_REASS_VALIDATE_TELEGRAM_FINISHED) {
 8012760:	697b      	ldr	r3, [r7, #20]
 8012762:	2b01      	cmp	r3, #1
 8012764:	d168      	bne.n	8012838 <ip4_reass+0x27c>
    struct ip_reassdata *ipr_prev;
    /* the totally last fragment (flag more fragments = 0) was received at least
     * once AND all fragments are received */
    ipr->datagram_len += IP_HLEN;
 8012766:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012768:	8b9b      	ldrh	r3, [r3, #28]
 801276a:	3314      	adds	r3, #20
 801276c:	b29a      	uxth	r2, r3
 801276e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012770:	839a      	strh	r2, [r3, #28]

    /* save the second pbuf before copying the header over the pointer */
    r = ((struct ip_reass_helper*)ipr->p->payload)->next_pbuf;
 8012772:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012774:	685b      	ldr	r3, [r3, #4]
 8012776:	685b      	ldr	r3, [r3, #4]
 8012778:	681b      	ldr	r3, [r3, #0]
 801277a:	637b      	str	r3, [r7, #52]	; 0x34

    /* copy the original ip header back to the first pbuf */
    fraghdr = (struct ip_hdr*)(ipr->p->payload);
 801277c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801277e:	685b      	ldr	r3, [r3, #4]
 8012780:	685b      	ldr	r3, [r3, #4]
 8012782:	62bb      	str	r3, [r7, #40]	; 0x28
    SMEMCPY(fraghdr, &ipr->iphdr, IP_HLEN);
 8012784:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012786:	3308      	adds	r3, #8
 8012788:	2214      	movs	r2, #20
 801278a:	4619      	mov	r1, r3
 801278c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 801278e:	f003 fa92 	bl	8015cb6 <memcpy>
    IPH_LEN_SET(fraghdr, lwip_htons(ipr->datagram_len));
 8012792:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012794:	8b9b      	ldrh	r3, [r3, #28]
 8012796:	4618      	mov	r0, r3
 8012798:	f7f6 fc5e 	bl	8009058 <lwip_htons>
 801279c:	4603      	mov	r3, r0
 801279e:	461a      	mov	r2, r3
 80127a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80127a2:	805a      	strh	r2, [r3, #2]
    IPH_OFFSET_SET(fraghdr, 0);
 80127a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80127a6:	2200      	movs	r2, #0
 80127a8:	719a      	strb	r2, [r3, #6]
 80127aa:	2200      	movs	r2, #0
 80127ac:	71da      	strb	r2, [r3, #7]
    IPH_CHKSUM_SET(fraghdr, 0);
 80127ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80127b0:	2200      	movs	r2, #0
 80127b2:	729a      	strb	r2, [r3, #10]
 80127b4:	2200      	movs	r2, #0
 80127b6:	72da      	strb	r2, [r3, #11]
    IF__NETIF_CHECKSUM_ENABLED(ip_current_input_netif(), NETIF_CHECKSUM_GEN_IP) {
      IPH_CHKSUM_SET(fraghdr, inet_chksum(fraghdr, IP_HLEN));
    }
#endif /* CHECKSUM_GEN_IP */

    p = ipr->p;
 80127b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80127ba:	685b      	ldr	r3, [r3, #4]
 80127bc:	607b      	str	r3, [r7, #4]

    /* chain together the pbufs contained within the reass_data list. */
    while (r != NULL) {
 80127be:	e00e      	b.n	80127de <ip4_reass+0x222>
      iprh = (struct ip_reass_helper*)r->payload;
 80127c0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80127c2:	685b      	ldr	r3, [r3, #4]
 80127c4:	60fb      	str	r3, [r7, #12]

      /* hide the ip header for every succeeding fragment */
      pbuf_header(r, -IP_HLEN);
 80127c6:	f06f 0113 	mvn.w	r1, #19
 80127ca:	6b78      	ldr	r0, [r7, #52]	; 0x34
 80127cc:	f7f7 fe4c 	bl	800a468 <pbuf_header>
      pbuf_cat(p, r);
 80127d0:	6b79      	ldr	r1, [r7, #52]	; 0x34
 80127d2:	6878      	ldr	r0, [r7, #4]
 80127d4:	f7f7 ff46 	bl	800a664 <pbuf_cat>
      r = iprh->next_pbuf;
 80127d8:	68fb      	ldr	r3, [r7, #12]
 80127da:	681b      	ldr	r3, [r3, #0]
 80127dc:	637b      	str	r3, [r7, #52]	; 0x34
    while (r != NULL) {
 80127de:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80127e0:	2b00      	cmp	r3, #0
 80127e2:	d1ed      	bne.n	80127c0 <ip4_reass+0x204>
    }

    /* find the previous entry in the linked list */
    if (ipr == reassdatagrams) {
 80127e4:	4b1d      	ldr	r3, [pc, #116]	; (801285c <ip4_reass+0x2a0>)
 80127e6:	681b      	ldr	r3, [r3, #0]
 80127e8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80127ea:	429a      	cmp	r2, r3
 80127ec:	d102      	bne.n	80127f4 <ip4_reass+0x238>
      ipr_prev = NULL;
 80127ee:	2300      	movs	r3, #0
 80127f0:	62fb      	str	r3, [r7, #44]	; 0x2c
 80127f2:	e010      	b.n	8012816 <ip4_reass+0x25a>
    } else {
      for (ipr_prev = reassdatagrams; ipr_prev != NULL; ipr_prev = ipr_prev->next) {
 80127f4:	4b19      	ldr	r3, [pc, #100]	; (801285c <ip4_reass+0x2a0>)
 80127f6:	681b      	ldr	r3, [r3, #0]
 80127f8:	62fb      	str	r3, [r7, #44]	; 0x2c
 80127fa:	e007      	b.n	801280c <ip4_reass+0x250>
        if (ipr_prev->next == ipr) {
 80127fc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80127fe:	681b      	ldr	r3, [r3, #0]
 8012800:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8012802:	429a      	cmp	r2, r3
 8012804:	d006      	beq.n	8012814 <ip4_reass+0x258>
      for (ipr_prev = reassdatagrams; ipr_prev != NULL; ipr_prev = ipr_prev->next) {
 8012806:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012808:	681b      	ldr	r3, [r3, #0]
 801280a:	62fb      	str	r3, [r7, #44]	; 0x2c
 801280c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801280e:	2b00      	cmp	r3, #0
 8012810:	d1f4      	bne.n	80127fc <ip4_reass+0x240>
 8012812:	e000      	b.n	8012816 <ip4_reass+0x25a>
          break;
 8012814:	bf00      	nop
        }
      }
    }

    /* release the sources allocate for the fragment queue entry */
    ip_reass_dequeue_datagram(ipr, ipr_prev);
 8012816:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8012818:	6b38      	ldr	r0, [r7, #48]	; 0x30
 801281a:	f7ff fd37 	bl	801228c <ip_reass_dequeue_datagram>

    /* and adjust the number of pbufs currently queued for reassembly. */
    ip_reass_pbufcount -= pbuf_clen(p);
 801281e:	6878      	ldr	r0, [r7, #4]
 8012820:	f7f7 fee0 	bl	800a5e4 <pbuf_clen>
 8012824:	4603      	mov	r3, r0
 8012826:	461a      	mov	r2, r3
 8012828:	4b0b      	ldr	r3, [pc, #44]	; (8012858 <ip4_reass+0x29c>)
 801282a:	881b      	ldrh	r3, [r3, #0]
 801282c:	1a9b      	subs	r3, r3, r2
 801282e:	b29a      	uxth	r2, r3
 8012830:	4b09      	ldr	r3, [pc, #36]	; (8012858 <ip4_reass+0x29c>)
 8012832:	801a      	strh	r2, [r3, #0]

    MIB2_STATS_INC(mib2.ipreasmoks);

    /* Return the pbuf chain */
    return p;
 8012834:	687b      	ldr	r3, [r7, #4]
 8012836:	e00a      	b.n	801284e <ip4_reass+0x292>
  }
  /* the datagram is not (yet?) reassembled completely */
  LWIP_DEBUGF(IP_REASS_DEBUG,("ip_reass_pbufcount: %d out\n", ip_reass_pbufcount));
  return NULL;
 8012838:	2300      	movs	r3, #0
 801283a:	e008      	b.n	801284e <ip4_reass+0x292>
    goto nullreturn;
 801283c:	bf00      	nop
 801283e:	e002      	b.n	8012846 <ip4_reass+0x28a>

nullreturn:
 8012840:	bf00      	nop
 8012842:	e000      	b.n	8012846 <ip4_reass+0x28a>
    goto nullreturn;
 8012844:	bf00      	nop
  LWIP_DEBUGF(IP_REASS_DEBUG,("ip4_reass: nullreturn\n"));
  IPFRAG_STATS_INC(ip_frag.drop);
  pbuf_free(p);
 8012846:	6878      	ldr	r0, [r7, #4]
 8012848:	f7f7 fe32 	bl	800a4b0 <pbuf_free>
  return NULL;
 801284c:	2300      	movs	r3, #0
}
 801284e:	4618      	mov	r0, r3
 8012850:	3738      	adds	r7, #56	; 0x38
 8012852:	46bd      	mov	sp, r7
 8012854:	bd80      	pop	{r7, pc}
 8012856:	bf00      	nop
 8012858:	24008744 	.word	0x24008744
 801285c:	24008740 	.word	0x24008740

08012860 <ip_frag_alloc_pbuf_custom_ref>:
#if IP_FRAG
#if !LWIP_NETIF_TX_SINGLE_PBUF
/** Allocate a new struct pbuf_custom_ref */
static struct pbuf_custom_ref*
ip_frag_alloc_pbuf_custom_ref(void)
{
 8012860:	b580      	push	{r7, lr}
 8012862:	af00      	add	r7, sp, #0
  return (struct pbuf_custom_ref*)memp_malloc(MEMP_FRAG_PBUF);
 8012864:	2005      	movs	r0, #5
 8012866:	f7f7 f803 	bl	8009870 <memp_malloc>
 801286a:	4603      	mov	r3, r0
}
 801286c:	4618      	mov	r0, r3
 801286e:	bd80      	pop	{r7, pc}

08012870 <ip_frag_free_pbuf_custom_ref>:

/** Free a struct pbuf_custom_ref */
static void
ip_frag_free_pbuf_custom_ref(struct pbuf_custom_ref* p)
{
 8012870:	b580      	push	{r7, lr}
 8012872:	b082      	sub	sp, #8
 8012874:	af00      	add	r7, sp, #0
 8012876:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("p != NULL", p != NULL);
 8012878:	687b      	ldr	r3, [r7, #4]
 801287a:	2b00      	cmp	r3, #0
 801287c:	d106      	bne.n	801288c <ip_frag_free_pbuf_custom_ref+0x1c>
 801287e:	4b07      	ldr	r3, [pc, #28]	; (801289c <ip_frag_free_pbuf_custom_ref+0x2c>)
 8012880:	f240 22ae 	movw	r2, #686	; 0x2ae
 8012884:	4906      	ldr	r1, [pc, #24]	; (80128a0 <ip_frag_free_pbuf_custom_ref+0x30>)
 8012886:	4807      	ldr	r0, [pc, #28]	; (80128a4 <ip_frag_free_pbuf_custom_ref+0x34>)
 8012888:	f003 f9a4 	bl	8015bd4 <printf_>
  memp_free(MEMP_FRAG_PBUF, p);
 801288c:	6879      	ldr	r1, [r7, #4]
 801288e:	2005      	movs	r0, #5
 8012890:	f7f7 f864 	bl	800995c <memp_free>
}
 8012894:	bf00      	nop
 8012896:	3708      	adds	r7, #8
 8012898:	46bd      	mov	sp, r7
 801289a:	bd80      	pop	{r7, pc}
 801289c:	0801bc50 	.word	0x0801bc50
 80128a0:	0801bdb8 	.word	0x0801bdb8
 80128a4:	0801bc98 	.word	0x0801bc98

080128a8 <ipfrag_free_pbuf_custom>:

/** Free-callback function to free a 'struct pbuf_custom_ref', called by
 * pbuf_free. */
static void
ipfrag_free_pbuf_custom(struct pbuf *p)
{
 80128a8:	b580      	push	{r7, lr}
 80128aa:	b084      	sub	sp, #16
 80128ac:	af00      	add	r7, sp, #0
 80128ae:	6078      	str	r0, [r7, #4]
  struct pbuf_custom_ref *pcr = (struct pbuf_custom_ref*)p;
 80128b0:	687b      	ldr	r3, [r7, #4]
 80128b2:	60fb      	str	r3, [r7, #12]
  LWIP_ASSERT("pcr != NULL", pcr != NULL);
 80128b4:	68fb      	ldr	r3, [r7, #12]
 80128b6:	2b00      	cmp	r3, #0
 80128b8:	d106      	bne.n	80128c8 <ipfrag_free_pbuf_custom+0x20>
 80128ba:	4b11      	ldr	r3, [pc, #68]	; (8012900 <ipfrag_free_pbuf_custom+0x58>)
 80128bc:	f44f 722e 	mov.w	r2, #696	; 0x2b8
 80128c0:	4910      	ldr	r1, [pc, #64]	; (8012904 <ipfrag_free_pbuf_custom+0x5c>)
 80128c2:	4811      	ldr	r0, [pc, #68]	; (8012908 <ipfrag_free_pbuf_custom+0x60>)
 80128c4:	f003 f986 	bl	8015bd4 <printf_>
  LWIP_ASSERT("pcr == p", (void*)pcr == (void*)p);
 80128c8:	68fa      	ldr	r2, [r7, #12]
 80128ca:	687b      	ldr	r3, [r7, #4]
 80128cc:	429a      	cmp	r2, r3
 80128ce:	d006      	beq.n	80128de <ipfrag_free_pbuf_custom+0x36>
 80128d0:	4b0b      	ldr	r3, [pc, #44]	; (8012900 <ipfrag_free_pbuf_custom+0x58>)
 80128d2:	f240 22b9 	movw	r2, #697	; 0x2b9
 80128d6:	490d      	ldr	r1, [pc, #52]	; (801290c <ipfrag_free_pbuf_custom+0x64>)
 80128d8:	480b      	ldr	r0, [pc, #44]	; (8012908 <ipfrag_free_pbuf_custom+0x60>)
 80128da:	f003 f97b 	bl	8015bd4 <printf_>
  if (pcr->original != NULL) {
 80128de:	68fb      	ldr	r3, [r7, #12]
 80128e0:	695b      	ldr	r3, [r3, #20]
 80128e2:	2b00      	cmp	r3, #0
 80128e4:	d004      	beq.n	80128f0 <ipfrag_free_pbuf_custom+0x48>
    pbuf_free(pcr->original);
 80128e6:	68fb      	ldr	r3, [r7, #12]
 80128e8:	695b      	ldr	r3, [r3, #20]
 80128ea:	4618      	mov	r0, r3
 80128ec:	f7f7 fde0 	bl	800a4b0 <pbuf_free>
  }
  ip_frag_free_pbuf_custom_ref(pcr);
 80128f0:	68f8      	ldr	r0, [r7, #12]
 80128f2:	f7ff ffbd 	bl	8012870 <ip_frag_free_pbuf_custom_ref>
}
 80128f6:	bf00      	nop
 80128f8:	3710      	adds	r7, #16
 80128fa:	46bd      	mov	sp, r7
 80128fc:	bd80      	pop	{r7, pc}
 80128fe:	bf00      	nop
 8012900:	0801bc50 	.word	0x0801bc50
 8012904:	0801bdc4 	.word	0x0801bdc4
 8012908:	0801bc98 	.word	0x0801bc98
 801290c:	0801bdd0 	.word	0x0801bdd0

08012910 <ip4_frag>:
 *
 * @return ERR_OK if sent successfully, err_t otherwise
 */
err_t
ip4_frag(struct pbuf *p, struct netif *netif, const ip4_addr_t *dest)
{
 8012910:	b580      	push	{r7, lr}
 8012912:	b092      	sub	sp, #72	; 0x48
 8012914:	af02      	add	r7, sp, #8
 8012916:	60f8      	str	r0, [r7, #12]
 8012918:	60b9      	str	r1, [r7, #8]
 801291a:	607a      	str	r2, [r7, #4]
  struct pbuf *rambuf;
#if !LWIP_NETIF_TX_SINGLE_PBUF
  struct pbuf *newpbuf;
  u16_t newpbuflen = 0;
 801291c:	2300      	movs	r3, #0
 801291e:	87fb      	strh	r3, [r7, #62]	; 0x3e
  u16_t left_to_copy;
#endif
  struct ip_hdr *original_iphdr;
  struct ip_hdr *iphdr;
  const u16_t nfb = (netif->mtu - IP_HLEN) / 8;
 8012920:	68bb      	ldr	r3, [r7, #8]
 8012922:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8012924:	3b14      	subs	r3, #20
 8012926:	2b00      	cmp	r3, #0
 8012928:	da00      	bge.n	801292c <ip4_frag+0x1c>
 801292a:	3307      	adds	r3, #7
 801292c:	10db      	asrs	r3, r3, #3
 801292e:	867b      	strh	r3, [r7, #50]	; 0x32
  u16_t left, fragsize;
  u16_t ofo;
  int last;
  u16_t poff = IP_HLEN;
 8012930:	2314      	movs	r3, #20
 8012932:	86fb      	strh	r3, [r7, #54]	; 0x36
  u16_t tmp;

  original_iphdr = (struct ip_hdr *)p->payload;
 8012934:	68fb      	ldr	r3, [r7, #12]
 8012936:	685b      	ldr	r3, [r3, #4]
 8012938:	62fb      	str	r3, [r7, #44]	; 0x2c
  iphdr = original_iphdr;
 801293a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801293c:	62bb      	str	r3, [r7, #40]	; 0x28
  LWIP_ERROR("ip4_frag() does not support IP options", IPH_HL(iphdr) * 4 == IP_HLEN, return ERR_VAL);
 801293e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012940:	781b      	ldrb	r3, [r3, #0]
 8012942:	f003 030f 	and.w	r3, r3, #15
 8012946:	009b      	lsls	r3, r3, #2
 8012948:	2b14      	cmp	r3, #20
 801294a:	d009      	beq.n	8012960 <ip4_frag+0x50>
 801294c:	4b79      	ldr	r3, [pc, #484]	; (8012b34 <ip4_frag+0x224>)
 801294e:	f240 22e1 	movw	r2, #737	; 0x2e1
 8012952:	4979      	ldr	r1, [pc, #484]	; (8012b38 <ip4_frag+0x228>)
 8012954:	4879      	ldr	r0, [pc, #484]	; (8012b3c <ip4_frag+0x22c>)
 8012956:	f003 f93d 	bl	8015bd4 <printf_>
 801295a:	f06f 0305 	mvn.w	r3, #5
 801295e:	e0e5      	b.n	8012b2c <ip4_frag+0x21c>

  /* Save original offset */
  tmp = lwip_ntohs(IPH_OFFSET(iphdr));
 8012960:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012962:	88db      	ldrh	r3, [r3, #6]
 8012964:	b29b      	uxth	r3, r3
 8012966:	4618      	mov	r0, r3
 8012968:	f7f6 fb76 	bl	8009058 <lwip_htons>
 801296c:	4603      	mov	r3, r0
 801296e:	86bb      	strh	r3, [r7, #52]	; 0x34
  ofo = tmp & IP_OFFMASK;
 8012970:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8012972:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8012976:	873b      	strh	r3, [r7, #56]	; 0x38
  LWIP_ERROR("ip_frag(): MF already set", (tmp & IP_MF) == 0, return ERR_VAL);
 8012978:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 801297a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 801297e:	2b00      	cmp	r3, #0
 8012980:	d009      	beq.n	8012996 <ip4_frag+0x86>
 8012982:	4b6c      	ldr	r3, [pc, #432]	; (8012b34 <ip4_frag+0x224>)
 8012984:	f240 22e6 	movw	r2, #742	; 0x2e6
 8012988:	496d      	ldr	r1, [pc, #436]	; (8012b40 <ip4_frag+0x230>)
 801298a:	486c      	ldr	r0, [pc, #432]	; (8012b3c <ip4_frag+0x22c>)
 801298c:	f003 f922 	bl	8015bd4 <printf_>
 8012990:	f06f 0305 	mvn.w	r3, #5
 8012994:	e0ca      	b.n	8012b2c <ip4_frag+0x21c>

  left = p->tot_len - IP_HLEN;
 8012996:	68fb      	ldr	r3, [r7, #12]
 8012998:	891b      	ldrh	r3, [r3, #8]
 801299a:	3b14      	subs	r3, #20
 801299c:	877b      	strh	r3, [r7, #58]	; 0x3a

  while (left) {
 801299e:	e0bc      	b.n	8012b1a <ip4_frag+0x20a>
    /* Fill this fragment */
    fragsize = LWIP_MIN(left, nfb * 8);
 80129a0:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 80129a2:	00da      	lsls	r2, r3, #3
 80129a4:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 80129a6:	4293      	cmp	r3, r2
 80129a8:	bfa8      	it	ge
 80129aa:	4613      	movge	r3, r2
 80129ac:	84fb      	strh	r3, [r7, #38]	; 0x26
    /* When not using a static buffer, create a chain of pbufs.
     * The first will be a PBUF_RAM holding the link and IP header.
     * The rest will be PBUF_REFs mirroring the pbuf chain to be fragged,
     * but limited to the size of an mtu.
     */
    rambuf = pbuf_alloc(PBUF_LINK, IP_HLEN, PBUF_RAM);
 80129ae:	2200      	movs	r2, #0
 80129b0:	2114      	movs	r1, #20
 80129b2:	2002      	movs	r0, #2
 80129b4:	f7f7 fa0a 	bl	8009dcc <pbuf_alloc>
 80129b8:	6238      	str	r0, [r7, #32]
    if (rambuf == NULL) {
 80129ba:	6a3b      	ldr	r3, [r7, #32]
 80129bc:	2b00      	cmp	r3, #0
 80129be:	f000 80b2 	beq.w	8012b26 <ip4_frag+0x216>
      goto memerr;
    }
    LWIP_ASSERT("this needs a pbuf in one piece!",
 80129c2:	68fb      	ldr	r3, [r7, #12]
 80129c4:	895b      	ldrh	r3, [r3, #10]
 80129c6:	2b13      	cmp	r3, #19
 80129c8:	d806      	bhi.n	80129d8 <ip4_frag+0xc8>
 80129ca:	4b5a      	ldr	r3, [pc, #360]	; (8012b34 <ip4_frag+0x224>)
 80129cc:	f240 3209 	movw	r2, #777	; 0x309
 80129d0:	495c      	ldr	r1, [pc, #368]	; (8012b44 <ip4_frag+0x234>)
 80129d2:	485a      	ldr	r0, [pc, #360]	; (8012b3c <ip4_frag+0x22c>)
 80129d4:	f003 f8fe 	bl	8015bd4 <printf_>
                (p->len >= (IP_HLEN)));
    SMEMCPY(rambuf->payload, original_iphdr, IP_HLEN);
 80129d8:	6a3b      	ldr	r3, [r7, #32]
 80129da:	685b      	ldr	r3, [r3, #4]
 80129dc:	2214      	movs	r2, #20
 80129de:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80129e0:	4618      	mov	r0, r3
 80129e2:	f003 f968 	bl	8015cb6 <memcpy>
    iphdr = (struct ip_hdr *)rambuf->payload;
 80129e6:	6a3b      	ldr	r3, [r7, #32]
 80129e8:	685b      	ldr	r3, [r3, #4]
 80129ea:	62bb      	str	r3, [r7, #40]	; 0x28

    left_to_copy = fragsize;
 80129ec:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80129ee:	87bb      	strh	r3, [r7, #60]	; 0x3c
    while (left_to_copy) {
 80129f0:	e04f      	b.n	8012a92 <ip4_frag+0x182>
      struct pbuf_custom_ref *pcr;
      u16_t plen = p->len - poff;
 80129f2:	68fb      	ldr	r3, [r7, #12]
 80129f4:	895a      	ldrh	r2, [r3, #10]
 80129f6:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80129f8:	1ad3      	subs	r3, r2, r3
 80129fa:	837b      	strh	r3, [r7, #26]
      newpbuflen = LWIP_MIN(left_to_copy, plen);
 80129fc:	8b7a      	ldrh	r2, [r7, #26]
 80129fe:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8012a00:	4293      	cmp	r3, r2
 8012a02:	bf28      	it	cs
 8012a04:	4613      	movcs	r3, r2
 8012a06:	87fb      	strh	r3, [r7, #62]	; 0x3e
      /* Is this pbuf already empty? */
      if (!newpbuflen) {
 8012a08:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8012a0a:	2b00      	cmp	r3, #0
 8012a0c:	d105      	bne.n	8012a1a <ip4_frag+0x10a>
        poff = 0;
 8012a0e:	2300      	movs	r3, #0
 8012a10:	86fb      	strh	r3, [r7, #54]	; 0x36
        p = p->next;
 8012a12:	68fb      	ldr	r3, [r7, #12]
 8012a14:	681b      	ldr	r3, [r3, #0]
 8012a16:	60fb      	str	r3, [r7, #12]
        continue;
 8012a18:	e03b      	b.n	8012a92 <ip4_frag+0x182>
      }
      pcr = ip_frag_alloc_pbuf_custom_ref();
 8012a1a:	f7ff ff21 	bl	8012860 <ip_frag_alloc_pbuf_custom_ref>
 8012a1e:	6178      	str	r0, [r7, #20]
      if (pcr == NULL) {
 8012a20:	697b      	ldr	r3, [r7, #20]
 8012a22:	2b00      	cmp	r3, #0
 8012a24:	d103      	bne.n	8012a2e <ip4_frag+0x11e>
        pbuf_free(rambuf);
 8012a26:	6a38      	ldr	r0, [r7, #32]
 8012a28:	f7f7 fd42 	bl	800a4b0 <pbuf_free>
        goto memerr;
 8012a2c:	e07c      	b.n	8012b28 <ip4_frag+0x218>
      }
      /* Mirror this pbuf, although we might not need all of it. */
      newpbuf = pbuf_alloced_custom(PBUF_RAW, newpbuflen, PBUF_REF, &pcr->pc,
 8012a2e:	6978      	ldr	r0, [r7, #20]
        (u8_t*)p->payload + poff, newpbuflen);
 8012a30:	68fb      	ldr	r3, [r7, #12]
 8012a32:	685a      	ldr	r2, [r3, #4]
      newpbuf = pbuf_alloced_custom(PBUF_RAW, newpbuflen, PBUF_REF, &pcr->pc,
 8012a34:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8012a36:	4413      	add	r3, r2
 8012a38:	8ff9      	ldrh	r1, [r7, #62]	; 0x3e
 8012a3a:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 8012a3c:	9201      	str	r2, [sp, #4]
 8012a3e:	9300      	str	r3, [sp, #0]
 8012a40:	4603      	mov	r3, r0
 8012a42:	2202      	movs	r2, #2
 8012a44:	2004      	movs	r0, #4
 8012a46:	f7f7 fb55 	bl	800a0f4 <pbuf_alloced_custom>
 8012a4a:	6138      	str	r0, [r7, #16]
      if (newpbuf == NULL) {
 8012a4c:	693b      	ldr	r3, [r7, #16]
 8012a4e:	2b00      	cmp	r3, #0
 8012a50:	d106      	bne.n	8012a60 <ip4_frag+0x150>
        ip_frag_free_pbuf_custom_ref(pcr);
 8012a52:	6978      	ldr	r0, [r7, #20]
 8012a54:	f7ff ff0c 	bl	8012870 <ip_frag_free_pbuf_custom_ref>
        pbuf_free(rambuf);
 8012a58:	6a38      	ldr	r0, [r7, #32]
 8012a5a:	f7f7 fd29 	bl	800a4b0 <pbuf_free>
        goto memerr;
 8012a5e:	e063      	b.n	8012b28 <ip4_frag+0x218>
      }
      pbuf_ref(p);
 8012a60:	68f8      	ldr	r0, [r7, #12]
 8012a62:	f7f7 fdd7 	bl	800a614 <pbuf_ref>
      pcr->original = p;
 8012a66:	697b      	ldr	r3, [r7, #20]
 8012a68:	68fa      	ldr	r2, [r7, #12]
 8012a6a:	615a      	str	r2, [r3, #20]
      pcr->pc.custom_free_function = ipfrag_free_pbuf_custom;
 8012a6c:	697b      	ldr	r3, [r7, #20]
 8012a6e:	4a36      	ldr	r2, [pc, #216]	; (8012b48 <ip4_frag+0x238>)
 8012a70:	611a      	str	r2, [r3, #16]

      /* Add it to end of rambuf's chain, but using pbuf_cat, not pbuf_chain
       * so that it is removed when pbuf_dechain is later called on rambuf.
       */
      pbuf_cat(rambuf, newpbuf);
 8012a72:	6939      	ldr	r1, [r7, #16]
 8012a74:	6a38      	ldr	r0, [r7, #32]
 8012a76:	f7f7 fdf5 	bl	800a664 <pbuf_cat>
      left_to_copy -= newpbuflen;
 8012a7a:	8fba      	ldrh	r2, [r7, #60]	; 0x3c
 8012a7c:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8012a7e:	1ad3      	subs	r3, r2, r3
 8012a80:	87bb      	strh	r3, [r7, #60]	; 0x3c
      if (left_to_copy) {
 8012a82:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8012a84:	2b00      	cmp	r3, #0
 8012a86:	d004      	beq.n	8012a92 <ip4_frag+0x182>
        poff = 0;
 8012a88:	2300      	movs	r3, #0
 8012a8a:	86fb      	strh	r3, [r7, #54]	; 0x36
        p = p->next;
 8012a8c:	68fb      	ldr	r3, [r7, #12]
 8012a8e:	681b      	ldr	r3, [r3, #0]
 8012a90:	60fb      	str	r3, [r7, #12]
    while (left_to_copy) {
 8012a92:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8012a94:	2b00      	cmp	r3, #0
 8012a96:	d1ac      	bne.n	80129f2 <ip4_frag+0xe2>
      }
    }
    poff += newpbuflen;
 8012a98:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 8012a9a:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8012a9c:	4413      	add	r3, r2
 8012a9e:	86fb      	strh	r3, [r7, #54]	; 0x36
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */

    /* Correct header */
    last = (left <= netif->mtu - IP_HLEN);
 8012aa0:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 8012aa2:	68bb      	ldr	r3, [r7, #8]
 8012aa4:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8012aa6:	3b14      	subs	r3, #20
 8012aa8:	429a      	cmp	r2, r3
 8012aaa:	bfd4      	ite	le
 8012aac:	2301      	movle	r3, #1
 8012aae:	2300      	movgt	r3, #0
 8012ab0:	b2db      	uxtb	r3, r3
 8012ab2:	61fb      	str	r3, [r7, #28]

    /* Set new offset and MF flag */
    tmp = (IP_OFFMASK & (ofo));
 8012ab4:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8012ab6:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8012aba:	86bb      	strh	r3, [r7, #52]	; 0x34
    if (!last) {
 8012abc:	69fb      	ldr	r3, [r7, #28]
 8012abe:	2b00      	cmp	r3, #0
 8012ac0:	d103      	bne.n	8012aca <ip4_frag+0x1ba>
      tmp = tmp | IP_MF;
 8012ac2:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8012ac4:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8012ac8:	86bb      	strh	r3, [r7, #52]	; 0x34
    }
    IPH_OFFSET_SET(iphdr, lwip_htons(tmp));
 8012aca:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8012acc:	4618      	mov	r0, r3
 8012ace:	f7f6 fac3 	bl	8009058 <lwip_htons>
 8012ad2:	4603      	mov	r3, r0
 8012ad4:	461a      	mov	r2, r3
 8012ad6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012ad8:	80da      	strh	r2, [r3, #6]
    IPH_LEN_SET(iphdr, lwip_htons(fragsize + IP_HLEN));
 8012ada:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8012adc:	3314      	adds	r3, #20
 8012ade:	b29b      	uxth	r3, r3
 8012ae0:	4618      	mov	r0, r3
 8012ae2:	f7f6 fab9 	bl	8009058 <lwip_htons>
 8012ae6:	4603      	mov	r3, r0
 8012ae8:	461a      	mov	r2, r3
 8012aea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012aec:	805a      	strh	r2, [r3, #2]
    IPH_CHKSUM_SET(iphdr, 0);
 8012aee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012af0:	2200      	movs	r2, #0
 8012af2:	729a      	strb	r2, [r3, #10]
 8012af4:	2200      	movs	r2, #0
 8012af6:	72da      	strb	r2, [r3, #11]
#endif /* CHECKSUM_GEN_IP */

    /* No need for separate header pbuf - we allowed room for it in rambuf
     * when allocated.
     */
    netif->output(netif, rambuf, dest);
 8012af8:	68bb      	ldr	r3, [r7, #8]
 8012afa:	695b      	ldr	r3, [r3, #20]
 8012afc:	687a      	ldr	r2, [r7, #4]
 8012afe:	6a39      	ldr	r1, [r7, #32]
 8012b00:	68b8      	ldr	r0, [r7, #8]
 8012b02:	4798      	blx	r3
     * recreate it next time round the loop. If we're lucky the hardware
     * will have already sent the packet, the free will really free, and
     * there will be zero memory penalty.
     */

    pbuf_free(rambuf);
 8012b04:	6a38      	ldr	r0, [r7, #32]
 8012b06:	f7f7 fcd3 	bl	800a4b0 <pbuf_free>
    left -= fragsize;
 8012b0a:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 8012b0c:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8012b0e:	1ad3      	subs	r3, r2, r3
 8012b10:	877b      	strh	r3, [r7, #58]	; 0x3a
    ofo += nfb;
 8012b12:	8f3a      	ldrh	r2, [r7, #56]	; 0x38
 8012b14:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 8012b16:	4413      	add	r3, r2
 8012b18:	873b      	strh	r3, [r7, #56]	; 0x38
  while (left) {
 8012b1a:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8012b1c:	2b00      	cmp	r3, #0
 8012b1e:	f47f af3f 	bne.w	80129a0 <ip4_frag+0x90>
  }
  MIB2_STATS_INC(mib2.ipfragoks);
  return ERR_OK;
 8012b22:	2300      	movs	r3, #0
 8012b24:	e002      	b.n	8012b2c <ip4_frag+0x21c>
      goto memerr;
 8012b26:	bf00      	nop
memerr:
  MIB2_STATS_INC(mib2.ipfragfails);
  return ERR_MEM;
 8012b28:	f04f 33ff 	mov.w	r3, #4294967295
}
 8012b2c:	4618      	mov	r0, r3
 8012b2e:	3740      	adds	r7, #64	; 0x40
 8012b30:	46bd      	mov	sp, r7
 8012b32:	bd80      	pop	{r7, pc}
 8012b34:	0801bc50 	.word	0x0801bc50
 8012b38:	0801bddc 	.word	0x0801bddc
 8012b3c:	0801bc98 	.word	0x0801bc98
 8012b40:	0801be04 	.word	0x0801be04
 8012b44:	0801be20 	.word	0x0801be20
 8012b48:	080128a9 	.word	0x080128a9

08012b4c <ethernet_input>:
 * @see ETHARP_SUPPORT_VLAN
 * @see LWIP_HOOK_VLAN_CHECK
 */
err_t
ethernet_input(struct pbuf *p, struct netif *netif)
{
 8012b4c:	b580      	push	{r7, lr}
 8012b4e:	b086      	sub	sp, #24
 8012b50:	af00      	add	r7, sp, #0
 8012b52:	6078      	str	r0, [r7, #4]
 8012b54:	6039      	str	r1, [r7, #0]
  struct eth_hdr* ethhdr;
  u16_t type;
#if LWIP_ARP || ETHARP_SUPPORT_VLAN || LWIP_IPV6
  s16_t ip_hdr_offset = SIZEOF_ETH_HDR;
 8012b56:	230e      	movs	r3, #14
 8012b58:	82fb      	strh	r3, [r7, #22]
#endif /* LWIP_ARP || ETHARP_SUPPORT_VLAN */

  if (p->len <= SIZEOF_ETH_HDR) {
 8012b5a:	687b      	ldr	r3, [r7, #4]
 8012b5c:	895b      	ldrh	r3, [r3, #10]
 8012b5e:	2b0e      	cmp	r3, #14
 8012b60:	d977      	bls.n	8012c52 <ethernet_input+0x106>
    MIB2_STATS_NETIF_INC(netif, ifinerrors);
    goto free_and_return;
  }

  /* points to packet payload, which starts with an Ethernet header */
  ethhdr = (struct eth_hdr *)p->payload;
 8012b62:	687b      	ldr	r3, [r7, #4]
 8012b64:	685b      	ldr	r3, [r3, #4]
 8012b66:	613b      	str	r3, [r7, #16]
     (unsigned)ethhdr->dest.addr[3], (unsigned)ethhdr->dest.addr[4], (unsigned)ethhdr->dest.addr[5],
     (unsigned)ethhdr->src.addr[0],  (unsigned)ethhdr->src.addr[1],  (unsigned)ethhdr->src.addr[2],
     (unsigned)ethhdr->src.addr[3],  (unsigned)ethhdr->src.addr[4],  (unsigned)ethhdr->src.addr[5],
     lwip_htons(ethhdr->type)));

  type = ethhdr->type;
 8012b68:	693b      	ldr	r3, [r7, #16]
 8012b6a:	7b1a      	ldrb	r2, [r3, #12]
 8012b6c:	7b5b      	ldrb	r3, [r3, #13]
 8012b6e:	021b      	lsls	r3, r3, #8
 8012b70:	4313      	orrs	r3, r2
 8012b72:	81fb      	strh	r3, [r7, #14]

#if LWIP_ARP_FILTER_NETIF
  netif = LWIP_ARP_FILTER_NETIF_FN(p, netif, lwip_htons(type));
#endif /* LWIP_ARP_FILTER_NETIF*/

  if (ethhdr->dest.addr[0] & 1) {
 8012b74:	693b      	ldr	r3, [r7, #16]
 8012b76:	781b      	ldrb	r3, [r3, #0]
 8012b78:	f003 0301 	and.w	r3, r3, #1
 8012b7c:	2b00      	cmp	r3, #0
 8012b7e:	d023      	beq.n	8012bc8 <ethernet_input+0x7c>
    /* this might be a multicast or broadcast packet */
    if (ethhdr->dest.addr[0] == LL_IP4_MULTICAST_ADDR_0) {
 8012b80:	693b      	ldr	r3, [r7, #16]
 8012b82:	781b      	ldrb	r3, [r3, #0]
 8012b84:	2b01      	cmp	r3, #1
 8012b86:	d10f      	bne.n	8012ba8 <ethernet_input+0x5c>
#if LWIP_IPV4
      if ((ethhdr->dest.addr[1] == LL_IP4_MULTICAST_ADDR_1) &&
 8012b88:	693b      	ldr	r3, [r7, #16]
 8012b8a:	785b      	ldrb	r3, [r3, #1]
 8012b8c:	2b00      	cmp	r3, #0
 8012b8e:	d11b      	bne.n	8012bc8 <ethernet_input+0x7c>
          (ethhdr->dest.addr[2] == LL_IP4_MULTICAST_ADDR_2)) {
 8012b90:	693b      	ldr	r3, [r7, #16]
 8012b92:	789b      	ldrb	r3, [r3, #2]
      if ((ethhdr->dest.addr[1] == LL_IP4_MULTICAST_ADDR_1) &&
 8012b94:	2b5e      	cmp	r3, #94	; 0x5e
 8012b96:	d117      	bne.n	8012bc8 <ethernet_input+0x7c>
        /* mark the pbuf as link-layer multicast */
        p->flags |= PBUF_FLAG_LLMCAST;
 8012b98:	687b      	ldr	r3, [r7, #4]
 8012b9a:	7b5b      	ldrb	r3, [r3, #13]
 8012b9c:	f043 0310 	orr.w	r3, r3, #16
 8012ba0:	b2da      	uxtb	r2, r3
 8012ba2:	687b      	ldr	r3, [r7, #4]
 8012ba4:	735a      	strb	r2, [r3, #13]
 8012ba6:	e00f      	b.n	8012bc8 <ethernet_input+0x7c>
             (ethhdr->dest.addr[1] == LL_IP6_MULTICAST_ADDR_1)) {
        /* mark the pbuf as link-layer multicast */
        p->flags |= PBUF_FLAG_LLMCAST;
    }
#endif /* LWIP_IPV6 */
    else if (eth_addr_cmp(&ethhdr->dest, &ethbroadcast)) {
 8012ba8:	693b      	ldr	r3, [r7, #16]
 8012baa:	2206      	movs	r2, #6
 8012bac:	4930      	ldr	r1, [pc, #192]	; (8012c70 <ethernet_input+0x124>)
 8012bae:	4618      	mov	r0, r3
 8012bb0:	f003 f872 	bl	8015c98 <memcmp>
 8012bb4:	4603      	mov	r3, r0
 8012bb6:	2b00      	cmp	r3, #0
 8012bb8:	d106      	bne.n	8012bc8 <ethernet_input+0x7c>
      /* mark the pbuf as link-layer broadcast */
      p->flags |= PBUF_FLAG_LLBCAST;
 8012bba:	687b      	ldr	r3, [r7, #4]
 8012bbc:	7b5b      	ldrb	r3, [r3, #13]
 8012bbe:	f043 0308 	orr.w	r3, r3, #8
 8012bc2:	b2da      	uxtb	r2, r3
 8012bc4:	687b      	ldr	r3, [r7, #4]
 8012bc6:	735a      	strb	r2, [r3, #13]
    }
  }

  switch (type) {
 8012bc8:	89fb      	ldrh	r3, [r7, #14]
 8012bca:	2b08      	cmp	r3, #8
 8012bcc:	d003      	beq.n	8012bd6 <ethernet_input+0x8a>
 8012bce:	f5b3 6fc1 	cmp.w	r3, #1544	; 0x608
 8012bd2:	d01e      	beq.n	8012c12 <ethernet_input+0xc6>
      }
#endif
      ETHARP_STATS_INC(etharp.proterr);
      ETHARP_STATS_INC(etharp.drop);
      MIB2_STATS_NETIF_INC(netif, ifinunknownprotos);
      goto free_and_return;
 8012bd4:	e044      	b.n	8012c60 <ethernet_input+0x114>
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 8012bd6:	683b      	ldr	r3, [r7, #0]
 8012bd8:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 8012bdc:	f003 0308 	and.w	r3, r3, #8
 8012be0:	2b00      	cmp	r3, #0
 8012be2:	d038      	beq.n	8012c56 <ethernet_input+0x10a>
      if ((p->len < ip_hdr_offset) || pbuf_header(p, (s16_t)-ip_hdr_offset)) {
 8012be4:	687b      	ldr	r3, [r7, #4]
 8012be6:	895b      	ldrh	r3, [r3, #10]
 8012be8:	461a      	mov	r2, r3
 8012bea:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8012bee:	429a      	cmp	r2, r3
 8012bf0:	db33      	blt.n	8012c5a <ethernet_input+0x10e>
 8012bf2:	8afb      	ldrh	r3, [r7, #22]
 8012bf4:	425b      	negs	r3, r3
 8012bf6:	b29b      	uxth	r3, r3
 8012bf8:	b21b      	sxth	r3, r3
 8012bfa:	4619      	mov	r1, r3
 8012bfc:	6878      	ldr	r0, [r7, #4]
 8012bfe:	f7f7 fc33 	bl	800a468 <pbuf_header>
 8012c02:	4603      	mov	r3, r0
 8012c04:	2b00      	cmp	r3, #0
 8012c06:	d128      	bne.n	8012c5a <ethernet_input+0x10e>
        ip4_input(p, netif);
 8012c08:	6839      	ldr	r1, [r7, #0]
 8012c0a:	6878      	ldr	r0, [r7, #4]
 8012c0c:	f7fe ff80 	bl	8011b10 <ip4_input>
      break;
 8012c10:	e01d      	b.n	8012c4e <ethernet_input+0x102>
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 8012c12:	683b      	ldr	r3, [r7, #0]
 8012c14:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 8012c18:	f003 0308 	and.w	r3, r3, #8
 8012c1c:	2b00      	cmp	r3, #0
 8012c1e:	d01e      	beq.n	8012c5e <ethernet_input+0x112>
      if ((p->len < ip_hdr_offset) || pbuf_header(p, (s16_t)-ip_hdr_offset)) {
 8012c20:	687b      	ldr	r3, [r7, #4]
 8012c22:	895b      	ldrh	r3, [r3, #10]
 8012c24:	461a      	mov	r2, r3
 8012c26:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8012c2a:	429a      	cmp	r2, r3
 8012c2c:	db15      	blt.n	8012c5a <ethernet_input+0x10e>
 8012c2e:	8afb      	ldrh	r3, [r7, #22]
 8012c30:	425b      	negs	r3, r3
 8012c32:	b29b      	uxth	r3, r3
 8012c34:	b21b      	sxth	r3, r3
 8012c36:	4619      	mov	r1, r3
 8012c38:	6878      	ldr	r0, [r7, #4]
 8012c3a:	f7f7 fc15 	bl	800a468 <pbuf_header>
 8012c3e:	4603      	mov	r3, r0
 8012c40:	2b00      	cmp	r3, #0
 8012c42:	d10a      	bne.n	8012c5a <ethernet_input+0x10e>
        etharp_input(p, netif);
 8012c44:	6839      	ldr	r1, [r7, #0]
 8012c46:	6878      	ldr	r0, [r7, #4]
 8012c48:	f7fe f932 	bl	8010eb0 <etharp_input>
      break;
 8012c4c:	bf00      	nop
  }

  /* This means the pbuf is freed or consumed,
     so the caller doesn't have to free it again */
  return ERR_OK;
 8012c4e:	2300      	movs	r3, #0
 8012c50:	e00a      	b.n	8012c68 <ethernet_input+0x11c>
    goto free_and_return;
 8012c52:	bf00      	nop
 8012c54:	e004      	b.n	8012c60 <ethernet_input+0x114>
        goto free_and_return;
 8012c56:	bf00      	nop
 8012c58:	e002      	b.n	8012c60 <ethernet_input+0x114>

free_and_return:
 8012c5a:	bf00      	nop
 8012c5c:	e000      	b.n	8012c60 <ethernet_input+0x114>
        goto free_and_return;
 8012c5e:	bf00      	nop
  pbuf_free(p);
 8012c60:	6878      	ldr	r0, [r7, #4]
 8012c62:	f7f7 fc25 	bl	800a4b0 <pbuf_free>
  return ERR_OK;
 8012c66:	2300      	movs	r3, #0
}
 8012c68:	4618      	mov	r0, r3
 8012c6a:	3718      	adds	r7, #24
 8012c6c:	46bd      	mov	sp, r7
 8012c6e:	bd80      	pop	{r7, pc}
 8012c70:	0801c164 	.word	0x0801c164

08012c74 <ethernet_output>:
 */
err_t
ethernet_output(struct netif* netif, struct pbuf* p,
                const struct eth_addr* src, const struct eth_addr* dst,
                u16_t eth_type)
{
 8012c74:	b580      	push	{r7, lr}
 8012c76:	b086      	sub	sp, #24
 8012c78:	af00      	add	r7, sp, #0
 8012c7a:	60f8      	str	r0, [r7, #12]
 8012c7c:	60b9      	str	r1, [r7, #8]
 8012c7e:	607a      	str	r2, [r7, #4]
 8012c80:	603b      	str	r3, [r7, #0]
  struct eth_hdr* ethhdr;
  u16_t eth_type_be = lwip_htons(eth_type);
 8012c82:	8c3b      	ldrh	r3, [r7, #32]
 8012c84:	4618      	mov	r0, r3
 8012c86:	f7f6 f9e7 	bl	8009058 <lwip_htons>
 8012c8a:	4603      	mov	r3, r0
 8012c8c:	82fb      	strh	r3, [r7, #22]

    eth_type_be = PP_HTONS(ETHTYPE_VLAN);
  } else
#endif /* ETHARP_SUPPORT_VLAN && defined(LWIP_HOOK_VLAN_SET) */
  {
    if (pbuf_header(p, SIZEOF_ETH_HDR) != 0) {
 8012c8e:	210e      	movs	r1, #14
 8012c90:	68b8      	ldr	r0, [r7, #8]
 8012c92:	f7f7 fbe9 	bl	800a468 <pbuf_header>
 8012c96:	4603      	mov	r3, r0
 8012c98:	2b00      	cmp	r3, #0
 8012c9a:	d125      	bne.n	8012ce8 <ethernet_output+0x74>
      goto pbuf_header_failed;
    }
  }

  ethhdr = (struct eth_hdr*)p->payload;
 8012c9c:	68bb      	ldr	r3, [r7, #8]
 8012c9e:	685b      	ldr	r3, [r3, #4]
 8012ca0:	613b      	str	r3, [r7, #16]
  ethhdr->type = eth_type_be;
 8012ca2:	693b      	ldr	r3, [r7, #16]
 8012ca4:	8afa      	ldrh	r2, [r7, #22]
 8012ca6:	819a      	strh	r2, [r3, #12]
  ETHADDR32_COPY(&ethhdr->dest, dst);
 8012ca8:	693b      	ldr	r3, [r7, #16]
 8012caa:	2206      	movs	r2, #6
 8012cac:	6839      	ldr	r1, [r7, #0]
 8012cae:	4618      	mov	r0, r3
 8012cb0:	f003 f801 	bl	8015cb6 <memcpy>
  ETHADDR16_COPY(&ethhdr->src,  src);
 8012cb4:	693b      	ldr	r3, [r7, #16]
 8012cb6:	3306      	adds	r3, #6
 8012cb8:	2206      	movs	r2, #6
 8012cba:	6879      	ldr	r1, [r7, #4]
 8012cbc:	4618      	mov	r0, r3
 8012cbe:	f002 fffa 	bl	8015cb6 <memcpy>

  LWIP_ASSERT("netif->hwaddr_len must be 6 for ethernet_output!",
 8012cc2:	68fb      	ldr	r3, [r7, #12]
 8012cc4:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8012cc8:	2b06      	cmp	r3, #6
 8012cca:	d006      	beq.n	8012cda <ethernet_output+0x66>
 8012ccc:	4b0a      	ldr	r3, [pc, #40]	; (8012cf8 <ethernet_output+0x84>)
 8012cce:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8012cd2:	490a      	ldr	r1, [pc, #40]	; (8012cfc <ethernet_output+0x88>)
 8012cd4:	480a      	ldr	r0, [pc, #40]	; (8012d00 <ethernet_output+0x8c>)
 8012cd6:	f002 ff7d 	bl	8015bd4 <printf_>
    (netif->hwaddr_len == ETH_HWADDR_LEN));
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE,
    ("ethernet_output: sending packet %p\n", (void *)p));

  /* send the packet */
  return netif->linkoutput(netif, p);
 8012cda:	68fb      	ldr	r3, [r7, #12]
 8012cdc:	699b      	ldr	r3, [r3, #24]
 8012cde:	68b9      	ldr	r1, [r7, #8]
 8012ce0:	68f8      	ldr	r0, [r7, #12]
 8012ce2:	4798      	blx	r3
 8012ce4:	4603      	mov	r3, r0
 8012ce6:	e002      	b.n	8012cee <ethernet_output+0x7a>
      goto pbuf_header_failed;
 8012ce8:	bf00      	nop

pbuf_header_failed:
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
    ("ethernet_output: could not allocate room for header.\n"));
  LINK_STATS_INC(link.lenerr);
  return ERR_BUF;
 8012cea:	f06f 0301 	mvn.w	r3, #1
}
 8012cee:	4618      	mov	r0, r3
 8012cf0:	3718      	adds	r7, #24
 8012cf2:	46bd      	mov	sp, r7
 8012cf4:	bd80      	pop	{r7, pc}
 8012cf6:	bf00      	nop
 8012cf8:	0801be40 	.word	0x0801be40
 8012cfc:	0801be78 	.word	0x0801be78
 8012d00:	0801beac 	.word	0x0801beac

08012d04 <sys_mbox_new>:
#endif

/*-----------------------------------------------------------------------------------*/
//  Creates an empty mailbox.
err_t sys_mbox_new(sys_mbox_t *mbox, int size)
{
 8012d04:	b580      	push	{r7, lr}
 8012d06:	b084      	sub	sp, #16
 8012d08:	af00      	add	r7, sp, #0
 8012d0a:	6078      	str	r0, [r7, #4]
 8012d0c:	6039      	str	r1, [r7, #0]
#if (osCMSIS < 0x20000U)
  osMessageQDef(QUEUE, size, void *);
 8012d0e:	683b      	ldr	r3, [r7, #0]
 8012d10:	60bb      	str	r3, [r7, #8]
 8012d12:	2304      	movs	r3, #4
 8012d14:	60fb      	str	r3, [r7, #12]
  *mbox = osMessageCreate(osMessageQ(QUEUE), NULL);
 8012d16:	f107 0308 	add.w	r3, r7, #8
 8012d1a:	2100      	movs	r1, #0
 8012d1c:	4618      	mov	r0, r3
 8012d1e:	f7f1 f97a 	bl	8004016 <osMessageCreate>
 8012d22:	4602      	mov	r2, r0
 8012d24:	687b      	ldr	r3, [r7, #4]
 8012d26:	601a      	str	r2, [r3, #0]
  if(lwip_stats.sys.mbox.max < lwip_stats.sys.mbox.used)
  {
    lwip_stats.sys.mbox.max = lwip_stats.sys.mbox.used;
  }
#endif /* SYS_STATS */
  if(*mbox == NULL)
 8012d28:	687b      	ldr	r3, [r7, #4]
 8012d2a:	681b      	ldr	r3, [r3, #0]
 8012d2c:	2b00      	cmp	r3, #0
 8012d2e:	d102      	bne.n	8012d36 <sys_mbox_new+0x32>
    return ERR_MEM;
 8012d30:	f04f 33ff 	mov.w	r3, #4294967295
 8012d34:	e000      	b.n	8012d38 <sys_mbox_new+0x34>

  return ERR_OK;
 8012d36:	2300      	movs	r3, #0
}
 8012d38:	4618      	mov	r0, r3
 8012d3a:	3710      	adds	r7, #16
 8012d3c:	46bd      	mov	sp, r7
 8012d3e:	bd80      	pop	{r7, pc}

08012d40 <sys_mbox_free>:
  Deallocates a mailbox. If there are messages still present in the
  mailbox when the mailbox is deallocated, it is an indication of a
  programming error in lwIP and the developer should be notified.
*/
void sys_mbox_free(sys_mbox_t *mbox)
{
 8012d40:	b580      	push	{r7, lr}
 8012d42:	b082      	sub	sp, #8
 8012d44:	af00      	add	r7, sp, #0
 8012d46:	6078      	str	r0, [r7, #4]
#if (osCMSIS < 0x20000U)
  if(osMessageWaiting(*mbox))
 8012d48:	687b      	ldr	r3, [r7, #4]
 8012d4a:	681b      	ldr	r3, [r3, #0]
 8012d4c:	4618      	mov	r0, r3
 8012d4e:	f7f1 fa29 	bl	80041a4 <osMessageWaiting>
    lwip_stats.sys.mbox.err++;
#endif /* SYS_STATS */

  }
#if (osCMSIS < 0x20000U)
  osMessageDelete(*mbox);
 8012d52:	687b      	ldr	r3, [r7, #4]
 8012d54:	681b      	ldr	r3, [r3, #0]
 8012d56:	4618      	mov	r0, r3
 8012d58:	f7f1 fa3a 	bl	80041d0 <osMessageDelete>
  osMessageQueueDelete(*mbox);
#endif
#if SYS_STATS
  --lwip_stats.sys.mbox.used;
#endif /* SYS_STATS */
}
 8012d5c:	bf00      	nop
 8012d5e:	3708      	adds	r7, #8
 8012d60:	46bd      	mov	sp, r7
 8012d62:	bd80      	pop	{r7, pc}

08012d64 <sys_mbox_post>:

/*-----------------------------------------------------------------------------------*/
//   Posts the "msg" to the mailbox.
void sys_mbox_post(sys_mbox_t *mbox, void *data)
{
 8012d64:	b580      	push	{r7, lr}
 8012d66:	b082      	sub	sp, #8
 8012d68:	af00      	add	r7, sp, #0
 8012d6a:	6078      	str	r0, [r7, #4]
 8012d6c:	6039      	str	r1, [r7, #0]
#if (osCMSIS < 0x20000U)
  while(osMessagePut(*mbox, (uint32_t)data, osWaitForever) != osOK);
 8012d6e:	bf00      	nop
 8012d70:	687b      	ldr	r3, [r7, #4]
 8012d72:	681b      	ldr	r3, [r3, #0]
 8012d74:	6839      	ldr	r1, [r7, #0]
 8012d76:	f04f 32ff 	mov.w	r2, #4294967295
 8012d7a:	4618      	mov	r0, r3
 8012d7c:	f7f1 f95e 	bl	800403c <osMessagePut>
 8012d80:	4603      	mov	r3, r0
 8012d82:	2b00      	cmp	r3, #0
 8012d84:	d1f4      	bne.n	8012d70 <sys_mbox_post+0xc>
#else
  while(osMessageQueuePut(*mbox, &data, 0, osWaitForever) != osOK);
#endif
}
 8012d86:	bf00      	nop
 8012d88:	3708      	adds	r7, #8
 8012d8a:	46bd      	mov	sp, r7
 8012d8c:	bd80      	pop	{r7, pc}

08012d8e <sys_mbox_trypost>:


/*-----------------------------------------------------------------------------------*/
//   Try to post the "msg" to the mailbox.
err_t sys_mbox_trypost(sys_mbox_t *mbox, void *msg)
{
 8012d8e:	b580      	push	{r7, lr}
 8012d90:	b084      	sub	sp, #16
 8012d92:	af00      	add	r7, sp, #0
 8012d94:	6078      	str	r0, [r7, #4]
 8012d96:	6039      	str	r1, [r7, #0]
  err_t result;
#if (osCMSIS < 0x20000U)
  if(osMessagePut(*mbox, (uint32_t)msg, 0) == osOK)
 8012d98:	687b      	ldr	r3, [r7, #4]
 8012d9a:	681b      	ldr	r3, [r3, #0]
 8012d9c:	6839      	ldr	r1, [r7, #0]
 8012d9e:	2200      	movs	r2, #0
 8012da0:	4618      	mov	r0, r3
 8012da2:	f7f1 f94b 	bl	800403c <osMessagePut>
 8012da6:	4603      	mov	r3, r0
 8012da8:	2b00      	cmp	r3, #0
 8012daa:	d102      	bne.n	8012db2 <sys_mbox_trypost+0x24>
#else
  if(osMessageQueuePut(*mbox, &msg, 0, 0) == osOK)
#endif
  {
    result = ERR_OK;
 8012dac:	2300      	movs	r3, #0
 8012dae:	73fb      	strb	r3, [r7, #15]
 8012db0:	e001      	b.n	8012db6 <sys_mbox_trypost+0x28>
  }
  else
  {
    // could not post, queue must be full
    result = ERR_MEM;
 8012db2:	23ff      	movs	r3, #255	; 0xff
 8012db4:	73fb      	strb	r3, [r7, #15]
#if SYS_STATS
    lwip_stats.sys.mbox.err++;
#endif /* SYS_STATS */
  }

  return result;
 8012db6:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8012dba:	4618      	mov	r0, r3
 8012dbc:	3710      	adds	r7, #16
 8012dbe:	46bd      	mov	sp, r7
 8012dc0:	bd80      	pop	{r7, pc}

08012dc2 <sys_arch_mbox_fetch>:

  Note that a function with a similar name, sys_mbox_fetch(), is
  implemented by lwIP.
*/
u32_t sys_arch_mbox_fetch(sys_mbox_t *mbox, void **msg, u32_t timeout)
{
 8012dc2:	b580      	push	{r7, lr}
 8012dc4:	b08c      	sub	sp, #48	; 0x30
 8012dc6:	af00      	add	r7, sp, #0
 8012dc8:	61f8      	str	r0, [r7, #28]
 8012dca:	61b9      	str	r1, [r7, #24]
 8012dcc:	617a      	str	r2, [r7, #20]
#if (osCMSIS < 0x20000U)
  osEvent event;
  uint32_t starttime = osKernelSysTick();
 8012dce:	f7f0 ff92 	bl	8003cf6 <osKernelSysTick>
 8012dd2:	62f8      	str	r0, [r7, #44]	; 0x2c
#else
  osStatus_t status;
  uint32_t starttime = osKernelGetTickCount();
#endif
  if(timeout != 0)
 8012dd4:	697b      	ldr	r3, [r7, #20]
 8012dd6:	2b00      	cmp	r3, #0
 8012dd8:	d017      	beq.n	8012e0a <sys_arch_mbox_fetch+0x48>
  {
#if (osCMSIS < 0x20000U)
    event = osMessageGet (*mbox, timeout);
 8012dda:	69fb      	ldr	r3, [r7, #28]
 8012ddc:	6819      	ldr	r1, [r3, #0]
 8012dde:	f107 0320 	add.w	r3, r7, #32
 8012de2:	697a      	ldr	r2, [r7, #20]
 8012de4:	4618      	mov	r0, r3
 8012de6:	f7f1 f969 	bl	80040bc <osMessageGet>

    if(event.status == osEventMessage)
 8012dea:	6a3b      	ldr	r3, [r7, #32]
 8012dec:	2b10      	cmp	r3, #16
 8012dee:	d109      	bne.n	8012e04 <sys_arch_mbox_fetch+0x42>
    {
      *msg = (void *)event.value.v;
 8012df0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012df2:	461a      	mov	r2, r3
 8012df4:	69bb      	ldr	r3, [r7, #24]
 8012df6:	601a      	str	r2, [r3, #0]
      return (osKernelSysTick() - starttime);
 8012df8:	f7f0 ff7d 	bl	8003cf6 <osKernelSysTick>
 8012dfc:	4602      	mov	r2, r0
 8012dfe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012e00:	1ad3      	subs	r3, r2, r3
 8012e02:	e019      	b.n	8012e38 <sys_arch_mbox_fetch+0x76>
      return (osKernelGetTickCount() - starttime);
    }
#endif
    else
    {
      return SYS_ARCH_TIMEOUT;
 8012e04:	f04f 33ff 	mov.w	r3, #4294967295
 8012e08:	e016      	b.n	8012e38 <sys_arch_mbox_fetch+0x76>
    }
  }
  else
  {
#if (osCMSIS < 0x20000U)
    event = osMessageGet (*mbox, osWaitForever);
 8012e0a:	69fb      	ldr	r3, [r7, #28]
 8012e0c:	6819      	ldr	r1, [r3, #0]
 8012e0e:	463b      	mov	r3, r7
 8012e10:	f04f 32ff 	mov.w	r2, #4294967295
 8012e14:	4618      	mov	r0, r3
 8012e16:	f7f1 f951 	bl	80040bc <osMessageGet>
 8012e1a:	f107 0320 	add.w	r3, r7, #32
 8012e1e:	463a      	mov	r2, r7
 8012e20:	ca07      	ldmia	r2, {r0, r1, r2}
 8012e22:	e883 0007 	stmia.w	r3, {r0, r1, r2}
    *msg = (void *)event.value.v;
 8012e26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012e28:	461a      	mov	r2, r3
 8012e2a:	69bb      	ldr	r3, [r7, #24]
 8012e2c:	601a      	str	r2, [r3, #0]
    return (osKernelSysTick() - starttime);
 8012e2e:	f7f0 ff62 	bl	8003cf6 <osKernelSysTick>
 8012e32:	4602      	mov	r2, r0
 8012e34:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012e36:	1ad3      	subs	r3, r2, r3
#else
    osMessageQueueGet(*mbox, msg, 0, osWaitForever );
    return (osKernelGetTickCount() - starttime);
#endif
  }
}
 8012e38:	4618      	mov	r0, r3
 8012e3a:	3730      	adds	r7, #48	; 0x30
 8012e3c:	46bd      	mov	sp, r7
 8012e3e:	bd80      	pop	{r7, pc}

08012e40 <sys_arch_mbox_tryfetch>:
/*
  Similar to sys_arch_mbox_fetch, but if message is not ready immediately, we'll
  return with SYS_MBOX_EMPTY.  On success, 0 is returned.
*/
u32_t sys_arch_mbox_tryfetch(sys_mbox_t *mbox, void **msg)
{
 8012e40:	b580      	push	{r7, lr}
 8012e42:	b086      	sub	sp, #24
 8012e44:	af00      	add	r7, sp, #0
 8012e46:	6078      	str	r0, [r7, #4]
 8012e48:	6039      	str	r1, [r7, #0]
#if (osCMSIS < 0x20000U)
  osEvent event;

  event = osMessageGet (*mbox, 0);
 8012e4a:	687b      	ldr	r3, [r7, #4]
 8012e4c:	6819      	ldr	r1, [r3, #0]
 8012e4e:	f107 030c 	add.w	r3, r7, #12
 8012e52:	2200      	movs	r2, #0
 8012e54:	4618      	mov	r0, r3
 8012e56:	f7f1 f931 	bl	80040bc <osMessageGet>

  if(event.status == osEventMessage)
 8012e5a:	68fb      	ldr	r3, [r7, #12]
 8012e5c:	2b10      	cmp	r3, #16
 8012e5e:	d105      	bne.n	8012e6c <sys_arch_mbox_tryfetch+0x2c>
  {
    *msg = (void *)event.value.v;
 8012e60:	693b      	ldr	r3, [r7, #16]
 8012e62:	461a      	mov	r2, r3
 8012e64:	683b      	ldr	r3, [r7, #0]
 8012e66:	601a      	str	r2, [r3, #0]
#else
  if (osMessageQueueGet(*mbox, msg, 0, 0) == osOK)
  {
#endif
    return ERR_OK;
 8012e68:	2300      	movs	r3, #0
 8012e6a:	e001      	b.n	8012e70 <sys_arch_mbox_tryfetch+0x30>
  }
  else
  {
    return SYS_MBOX_EMPTY;
 8012e6c:	f04f 33ff 	mov.w	r3, #4294967295
  }
}
 8012e70:	4618      	mov	r0, r3
 8012e72:	3718      	adds	r7, #24
 8012e74:	46bd      	mov	sp, r7
 8012e76:	bd80      	pop	{r7, pc}

08012e78 <sys_mbox_valid>:
/*----------------------------------------------------------------------------------*/
int sys_mbox_valid(sys_mbox_t *mbox)
{
 8012e78:	b480      	push	{r7}
 8012e7a:	b083      	sub	sp, #12
 8012e7c:	af00      	add	r7, sp, #0
 8012e7e:	6078      	str	r0, [r7, #4]
  if (*mbox == SYS_MBOX_NULL)
 8012e80:	687b      	ldr	r3, [r7, #4]
 8012e82:	681b      	ldr	r3, [r3, #0]
 8012e84:	2b00      	cmp	r3, #0
 8012e86:	d101      	bne.n	8012e8c <sys_mbox_valid+0x14>
    return 0;
 8012e88:	2300      	movs	r3, #0
 8012e8a:	e000      	b.n	8012e8e <sys_mbox_valid+0x16>
  else
    return 1;
 8012e8c:	2301      	movs	r3, #1
}
 8012e8e:	4618      	mov	r0, r3
 8012e90:	370c      	adds	r7, #12
 8012e92:	46bd      	mov	sp, r7
 8012e94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012e98:	4770      	bx	lr

08012e9a <sys_mbox_set_invalid>:
/*-----------------------------------------------------------------------------------*/
void sys_mbox_set_invalid(sys_mbox_t *mbox)
{
 8012e9a:	b480      	push	{r7}
 8012e9c:	b083      	sub	sp, #12
 8012e9e:	af00      	add	r7, sp, #0
 8012ea0:	6078      	str	r0, [r7, #4]
  *mbox = SYS_MBOX_NULL;
 8012ea2:	687b      	ldr	r3, [r7, #4]
 8012ea4:	2200      	movs	r2, #0
 8012ea6:	601a      	str	r2, [r3, #0]
}
 8012ea8:	bf00      	nop
 8012eaa:	370c      	adds	r7, #12
 8012eac:	46bd      	mov	sp, r7
 8012eae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012eb2:	4770      	bx	lr

08012eb4 <sys_sem_new>:

/*-----------------------------------------------------------------------------------*/
//  Creates a new semaphore. The "count" argument specifies
//  the initial state of the semaphore.
err_t sys_sem_new(sys_sem_t *sem, u8_t count)
{
 8012eb4:	b580      	push	{r7, lr}
 8012eb6:	b084      	sub	sp, #16
 8012eb8:	af00      	add	r7, sp, #0
 8012eba:	6078      	str	r0, [r7, #4]
 8012ebc:	460b      	mov	r3, r1
 8012ebe:	70fb      	strb	r3, [r7, #3]
#if (osCMSIS < 0x20000U)
  osSemaphoreDef(SEM);
 8012ec0:	2300      	movs	r3, #0
 8012ec2:	60fb      	str	r3, [r7, #12]
  *sem = osSemaphoreCreate (osSemaphore(SEM), 1);
 8012ec4:	f107 030c 	add.w	r3, r7, #12
 8012ec8:	2101      	movs	r1, #1
 8012eca:	4618      	mov	r0, r3
 8012ecc:	f7f0 ffee 	bl	8003eac <osSemaphoreCreate>
 8012ed0:	4602      	mov	r2, r0
 8012ed2:	687b      	ldr	r3, [r7, #4]
 8012ed4:	601a      	str	r2, [r3, #0]
#else
  *sem = osSemaphoreNew(UINT16_MAX, count, NULL);
#endif

  if(*sem == NULL)
 8012ed6:	687b      	ldr	r3, [r7, #4]
 8012ed8:	681b      	ldr	r3, [r3, #0]
 8012eda:	2b00      	cmp	r3, #0
 8012edc:	d102      	bne.n	8012ee4 <sys_sem_new+0x30>
  {
#if SYS_STATS
    ++lwip_stats.sys.sem.err;
#endif /* SYS_STATS */
    return ERR_MEM;
 8012ede:	f04f 33ff 	mov.w	r3, #4294967295
 8012ee2:	e009      	b.n	8012ef8 <sys_sem_new+0x44>
  }

  if(count == 0)	// Means it can't be taken
 8012ee4:	78fb      	ldrb	r3, [r7, #3]
 8012ee6:	2b00      	cmp	r3, #0
 8012ee8:	d105      	bne.n	8012ef6 <sys_sem_new+0x42>
  {
#if (osCMSIS < 0x20000U)
    osSemaphoreWait(*sem, 0);
 8012eea:	687b      	ldr	r3, [r7, #4]
 8012eec:	681b      	ldr	r3, [r3, #0]
 8012eee:	2100      	movs	r1, #0
 8012ef0:	4618      	mov	r0, r3
 8012ef2:	f7f0 fff9 	bl	8003ee8 <osSemaphoreWait>
  if (lwip_stats.sys.sem.max < lwip_stats.sys.sem.used) {
    lwip_stats.sys.sem.max = lwip_stats.sys.sem.used;
  }
#endif /* SYS_STATS */

  return ERR_OK;
 8012ef6:	2300      	movs	r3, #0
}
 8012ef8:	4618      	mov	r0, r3
 8012efa:	3710      	adds	r7, #16
 8012efc:	46bd      	mov	sp, r7
 8012efe:	bd80      	pop	{r7, pc}

08012f00 <sys_arch_sem_wait>:

  Notice that lwIP implements a function with a similar name,
  sys_sem_wait(), that uses the sys_arch_sem_wait() function.
*/
u32_t sys_arch_sem_wait(sys_sem_t *sem, u32_t timeout)
{
 8012f00:	b580      	push	{r7, lr}
 8012f02:	b084      	sub	sp, #16
 8012f04:	af00      	add	r7, sp, #0
 8012f06:	6078      	str	r0, [r7, #4]
 8012f08:	6039      	str	r1, [r7, #0]
#if (osCMSIS < 0x20000U)
  uint32_t starttime = osKernelSysTick();
 8012f0a:	f7f0 fef4 	bl	8003cf6 <osKernelSysTick>
 8012f0e:	60f8      	str	r0, [r7, #12]
#else
  uint32_t starttime = osKernelGetTickCount();
#endif
  if(timeout != 0)
 8012f10:	683b      	ldr	r3, [r7, #0]
 8012f12:	2b00      	cmp	r3, #0
 8012f14:	d011      	beq.n	8012f3a <sys_arch_sem_wait+0x3a>
  {
#if (osCMSIS < 0x20000U)
    if(osSemaphoreWait (*sem, timeout) == osOK)
 8012f16:	687b      	ldr	r3, [r7, #4]
 8012f18:	681b      	ldr	r3, [r3, #0]
 8012f1a:	6839      	ldr	r1, [r7, #0]
 8012f1c:	4618      	mov	r0, r3
 8012f1e:	f7f0 ffe3 	bl	8003ee8 <osSemaphoreWait>
 8012f22:	4603      	mov	r3, r0
 8012f24:	2b00      	cmp	r3, #0
 8012f26:	d105      	bne.n	8012f34 <sys_arch_sem_wait+0x34>
    {
      return (osKernelSysTick() - starttime);
 8012f28:	f7f0 fee5 	bl	8003cf6 <osKernelSysTick>
 8012f2c:	4602      	mov	r2, r0
 8012f2e:	68fb      	ldr	r3, [r7, #12]
 8012f30:	1ad3      	subs	r3, r2, r3
 8012f32:	e012      	b.n	8012f5a <sys_arch_sem_wait+0x5a>
        return (osKernelGetTickCount() - starttime);
#endif
    }
    else
    {
      return SYS_ARCH_TIMEOUT;
 8012f34:	f04f 33ff 	mov.w	r3, #4294967295
 8012f38:	e00f      	b.n	8012f5a <sys_arch_sem_wait+0x5a>
    }
  }
  else
  {
#if (osCMSIS < 0x20000U)
    while(osSemaphoreWait (*sem, osWaitForever) != osOK);
 8012f3a:	bf00      	nop
 8012f3c:	687b      	ldr	r3, [r7, #4]
 8012f3e:	681b      	ldr	r3, [r3, #0]
 8012f40:	f04f 31ff 	mov.w	r1, #4294967295
 8012f44:	4618      	mov	r0, r3
 8012f46:	f7f0 ffcf 	bl	8003ee8 <osSemaphoreWait>
 8012f4a:	4603      	mov	r3, r0
 8012f4c:	2b00      	cmp	r3, #0
 8012f4e:	d1f5      	bne.n	8012f3c <sys_arch_sem_wait+0x3c>
    return (osKernelSysTick() - starttime);
 8012f50:	f7f0 fed1 	bl	8003cf6 <osKernelSysTick>
 8012f54:	4602      	mov	r2, r0
 8012f56:	68fb      	ldr	r3, [r7, #12]
 8012f58:	1ad3      	subs	r3, r2, r3
#else
    while(osSemaphoreAcquire(*sem, osWaitForever) != osOK);
    return (osKernelGetTickCount() - starttime);
#endif
  }
}
 8012f5a:	4618      	mov	r0, r3
 8012f5c:	3710      	adds	r7, #16
 8012f5e:	46bd      	mov	sp, r7
 8012f60:	bd80      	pop	{r7, pc}

08012f62 <sys_sem_signal>:

/*-----------------------------------------------------------------------------------*/
// Signals a semaphore
void sys_sem_signal(sys_sem_t *sem)
{
 8012f62:	b580      	push	{r7, lr}
 8012f64:	b082      	sub	sp, #8
 8012f66:	af00      	add	r7, sp, #0
 8012f68:	6078      	str	r0, [r7, #4]
  osSemaphoreRelease(*sem);
 8012f6a:	687b      	ldr	r3, [r7, #4]
 8012f6c:	681b      	ldr	r3, [r3, #0]
 8012f6e:	4618      	mov	r0, r3
 8012f70:	f7f1 f808 	bl	8003f84 <osSemaphoreRelease>
}
 8012f74:	bf00      	nop
 8012f76:	3708      	adds	r7, #8
 8012f78:	46bd      	mov	sp, r7
 8012f7a:	bd80      	pop	{r7, pc}

08012f7c <sys_sem_free>:

/*-----------------------------------------------------------------------------------*/
// Deallocates a semaphore
void sys_sem_free(sys_sem_t *sem)
{
 8012f7c:	b580      	push	{r7, lr}
 8012f7e:	b082      	sub	sp, #8
 8012f80:	af00      	add	r7, sp, #0
 8012f82:	6078      	str	r0, [r7, #4]
#if SYS_STATS
  --lwip_stats.sys.sem.used;
#endif /* SYS_STATS */

  osSemaphoreDelete(*sem);
 8012f84:	687b      	ldr	r3, [r7, #4]
 8012f86:	681b      	ldr	r3, [r3, #0]
 8012f88:	4618      	mov	r0, r3
 8012f8a:	f7f1 f831 	bl	8003ff0 <osSemaphoreDelete>
}
 8012f8e:	bf00      	nop
 8012f90:	3708      	adds	r7, #8
 8012f92:	46bd      	mov	sp, r7
 8012f94:	bd80      	pop	{r7, pc}

08012f96 <sys_sem_valid>:
/*-----------------------------------------------------------------------------------*/
int sys_sem_valid(sys_sem_t *sem)
{
 8012f96:	b480      	push	{r7}
 8012f98:	b083      	sub	sp, #12
 8012f9a:	af00      	add	r7, sp, #0
 8012f9c:	6078      	str	r0, [r7, #4]
  if (*sem == SYS_SEM_NULL)
 8012f9e:	687b      	ldr	r3, [r7, #4]
 8012fa0:	681b      	ldr	r3, [r3, #0]
 8012fa2:	2b00      	cmp	r3, #0
 8012fa4:	d101      	bne.n	8012faa <sys_sem_valid+0x14>
    return 0;
 8012fa6:	2300      	movs	r3, #0
 8012fa8:	e000      	b.n	8012fac <sys_sem_valid+0x16>
  else
    return 1;
 8012faa:	2301      	movs	r3, #1
}
 8012fac:	4618      	mov	r0, r3
 8012fae:	370c      	adds	r7, #12
 8012fb0:	46bd      	mov	sp, r7
 8012fb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012fb6:	4770      	bx	lr

08012fb8 <sys_sem_set_invalid>:

/*-----------------------------------------------------------------------------------*/
void sys_sem_set_invalid(sys_sem_t *sem)
{
 8012fb8:	b480      	push	{r7}
 8012fba:	b083      	sub	sp, #12
 8012fbc:	af00      	add	r7, sp, #0
 8012fbe:	6078      	str	r0, [r7, #4]
  *sem = SYS_SEM_NULL;
 8012fc0:	687b      	ldr	r3, [r7, #4]
 8012fc2:	2200      	movs	r2, #0
 8012fc4:	601a      	str	r2, [r3, #0]
}
 8012fc6:	bf00      	nop
 8012fc8:	370c      	adds	r7, #12
 8012fca:	46bd      	mov	sp, r7
 8012fcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012fd0:	4770      	bx	lr
	...

08012fd4 <sys_init>:
#else
osMutexId_t lwip_sys_mutex;
#endif
// Initialize sys arch
void sys_init(void)
{
 8012fd4:	b580      	push	{r7, lr}
 8012fd6:	af00      	add	r7, sp, #0
#if (osCMSIS < 0x20000U)
  lwip_sys_mutex = osMutexCreate(osMutex(lwip_sys_mutex));
 8012fd8:	4803      	ldr	r0, [pc, #12]	; (8012fe8 <sys_init+0x14>)
 8012fda:	f7f0 fed7 	bl	8003d8c <osMutexCreate>
 8012fde:	4602      	mov	r2, r0
 8012fe0:	4b02      	ldr	r3, [pc, #8]	; (8012fec <sys_init+0x18>)
 8012fe2:	601a      	str	r2, [r3, #0]
#else
  lwip_sys_mutex = osMutexNew(NULL);
#endif
}
 8012fe4:	bf00      	nop
 8012fe6:	bd80      	pop	{r7, pc}
 8012fe8:	0801c174 	.word	0x0801c174
 8012fec:	2400f308 	.word	0x2400f308

08012ff0 <sys_mutex_new>:
                                      /* Mutexes*/
/*-----------------------------------------------------------------------------------*/
/*-----------------------------------------------------------------------------------*/
#if LWIP_COMPAT_MUTEX == 0
/* Create a new mutex*/
err_t sys_mutex_new(sys_mutex_t *mutex) {
 8012ff0:	b580      	push	{r7, lr}
 8012ff2:	b084      	sub	sp, #16
 8012ff4:	af00      	add	r7, sp, #0
 8012ff6:	6078      	str	r0, [r7, #4]

#if (osCMSIS < 0x20000U)
  osMutexDef(MUTEX);
 8012ff8:	2300      	movs	r3, #0
 8012ffa:	60fb      	str	r3, [r7, #12]
  *mutex = osMutexCreate(osMutex(MUTEX));
 8012ffc:	f107 030c 	add.w	r3, r7, #12
 8013000:	4618      	mov	r0, r3
 8013002:	f7f0 fec3 	bl	8003d8c <osMutexCreate>
 8013006:	4602      	mov	r2, r0
 8013008:	687b      	ldr	r3, [r7, #4]
 801300a:	601a      	str	r2, [r3, #0]
#else
  *mutex = osMutexNew(NULL);
#endif

  if(*mutex == NULL)
 801300c:	687b      	ldr	r3, [r7, #4]
 801300e:	681b      	ldr	r3, [r3, #0]
 8013010:	2b00      	cmp	r3, #0
 8013012:	d102      	bne.n	801301a <sys_mutex_new+0x2a>
  {
#if SYS_STATS
    ++lwip_stats.sys.mutex.err;
#endif /* SYS_STATS */
    return ERR_MEM;
 8013014:	f04f 33ff 	mov.w	r3, #4294967295
 8013018:	e000      	b.n	801301c <sys_mutex_new+0x2c>
  ++lwip_stats.sys.mutex.used;
  if (lwip_stats.sys.mutex.max < lwip_stats.sys.mutex.used) {
    lwip_stats.sys.mutex.max = lwip_stats.sys.mutex.used;
  }
#endif /* SYS_STATS */
  return ERR_OK;
 801301a:	2300      	movs	r3, #0
}
 801301c:	4618      	mov	r0, r3
 801301e:	3710      	adds	r7, #16
 8013020:	46bd      	mov	sp, r7
 8013022:	bd80      	pop	{r7, pc}

08013024 <sys_mutex_lock>:
  osMutexDelete(*mutex);
}
/*-----------------------------------------------------------------------------------*/
/* Lock a mutex*/
void sys_mutex_lock(sys_mutex_t *mutex)
{
 8013024:	b580      	push	{r7, lr}
 8013026:	b082      	sub	sp, #8
 8013028:	af00      	add	r7, sp, #0
 801302a:	6078      	str	r0, [r7, #4]
#if (osCMSIS < 0x20000U)
  osMutexWait(*mutex, osWaitForever);
 801302c:	687b      	ldr	r3, [r7, #4]
 801302e:	681b      	ldr	r3, [r3, #0]
 8013030:	f04f 31ff 	mov.w	r1, #4294967295
 8013034:	4618      	mov	r0, r3
 8013036:	f7f0 feb5 	bl	8003da4 <osMutexWait>
#else
  osMutexAcquire(*mutex, osWaitForever);
#endif
}
 801303a:	bf00      	nop
 801303c:	3708      	adds	r7, #8
 801303e:	46bd      	mov	sp, r7
 8013040:	bd80      	pop	{r7, pc}

08013042 <sys_mutex_unlock>:

/*-----------------------------------------------------------------------------------*/
/* Unlock a mutex*/
void sys_mutex_unlock(sys_mutex_t *mutex)
{
 8013042:	b580      	push	{r7, lr}
 8013044:	b082      	sub	sp, #8
 8013046:	af00      	add	r7, sp, #0
 8013048:	6078      	str	r0, [r7, #4]
  osMutexRelease(*mutex);
 801304a:	687b      	ldr	r3, [r7, #4]
 801304c:	681b      	ldr	r3, [r3, #0]
 801304e:	4618      	mov	r0, r3
 8013050:	f7f0 fef6 	bl	8003e40 <osMutexRelease>
}
 8013054:	bf00      	nop
 8013056:	3708      	adds	r7, #8
 8013058:	46bd      	mov	sp, r7
 801305a:	bd80      	pop	{r7, pc}

0801305c <sys_thread_new>:
  function "thread()". The "arg" argument will be passed as an argument to the
  thread() function. The id of the new thread is returned. Both the id and
  the priority are system dependent.
*/
sys_thread_t sys_thread_new(const char *name, lwip_thread_fn thread , void *arg, int stacksize, int prio)
{
 801305c:	b580      	push	{r7, lr}
 801305e:	b08a      	sub	sp, #40	; 0x28
 8013060:	af00      	add	r7, sp, #0
 8013062:	60f8      	str	r0, [r7, #12]
 8013064:	60b9      	str	r1, [r7, #8]
 8013066:	607a      	str	r2, [r7, #4]
 8013068:	603b      	str	r3, [r7, #0]
#if (osCMSIS < 0x20000U)
  const osThreadDef_t os_thread_def = { (char *)name, (os_pthread)thread, (osPriority)prio, 0, stacksize};
 801306a:	68fb      	ldr	r3, [r7, #12]
 801306c:	617b      	str	r3, [r7, #20]
 801306e:	68bb      	ldr	r3, [r7, #8]
 8013070:	61bb      	str	r3, [r7, #24]
 8013072:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013074:	b21b      	sxth	r3, r3
 8013076:	83bb      	strh	r3, [r7, #28]
 8013078:	2300      	movs	r3, #0
 801307a:	623b      	str	r3, [r7, #32]
 801307c:	683b      	ldr	r3, [r7, #0]
 801307e:	627b      	str	r3, [r7, #36]	; 0x24
  return osThreadCreate(&os_thread_def, arg);
 8013080:	f107 0314 	add.w	r3, r7, #20
 8013084:	6879      	ldr	r1, [r7, #4]
 8013086:	4618      	mov	r0, r3
 8013088:	f7f0 fe45 	bl	8003d16 <osThreadCreate>
 801308c:	4603      	mov	r3, r0
                        .stack_size = stacksize,
                        .priority = (osPriority_t)prio,
                      };
  return osThreadNew(thread, arg, &attributes);
#endif
}
 801308e:	4618      	mov	r0, r3
 8013090:	3728      	adds	r7, #40	; 0x28
 8013092:	46bd      	mov	sp, r7
 8013094:	bd80      	pop	{r7, pc}
	...

08013098 <sys_arch_protect>:

  Note: This function is based on FreeRTOS API, because no equivalent CMSIS-RTOS
        API is available
*/
sys_prot_t sys_arch_protect(void)
{
 8013098:	b580      	push	{r7, lr}
 801309a:	af00      	add	r7, sp, #0
#if (osCMSIS < 0x20000U)
  osMutexWait(lwip_sys_mutex, osWaitForever);
 801309c:	4b04      	ldr	r3, [pc, #16]	; (80130b0 <sys_arch_protect+0x18>)
 801309e:	681b      	ldr	r3, [r3, #0]
 80130a0:	f04f 31ff 	mov.w	r1, #4294967295
 80130a4:	4618      	mov	r0, r3
 80130a6:	f7f0 fe7d 	bl	8003da4 <osMutexWait>
#else
  osMutexAcquire(lwip_sys_mutex, osWaitForever);
#endif
  return (sys_prot_t)1;
 80130aa:	2301      	movs	r3, #1
}
 80130ac:	4618      	mov	r0, r3
 80130ae:	bd80      	pop	{r7, pc}
 80130b0:	2400f308 	.word	0x2400f308

080130b4 <sys_arch_unprotect>:

  Note: This function is based on FreeRTOS API, because no equivalent CMSIS-RTOS
        API is available
*/
void sys_arch_unprotect(sys_prot_t pval)
{
 80130b4:	b580      	push	{r7, lr}
 80130b6:	b082      	sub	sp, #8
 80130b8:	af00      	add	r7, sp, #0
 80130ba:	6078      	str	r0, [r7, #4]
  ( void ) pval;
  osMutexRelease(lwip_sys_mutex);
 80130bc:	4b04      	ldr	r3, [pc, #16]	; (80130d0 <sys_arch_unprotect+0x1c>)
 80130be:	681b      	ldr	r3, [r3, #0]
 80130c0:	4618      	mov	r0, r3
 80130c2:	f7f0 febd 	bl	8003e40 <osMutexRelease>
}
 80130c6:	bf00      	nop
 80130c8:	3708      	adds	r7, #8
 80130ca:	46bd      	mov	sp, r7
 80130cc:	bd80      	pop	{r7, pc}
 80130ce:	bf00      	nop
 80130d0:	2400f308 	.word	0x2400f308

080130d4 <SCB_CleanInvalidateDCache>:
{
 80130d4:	b480      	push	{r7}
 80130d6:	b085      	sub	sp, #20
 80130d8:	af00      	add	r7, sp, #0
    SCB->CSSELR = 0U; /*(0U << 1U) | 0U;*/  /* Level 1 data cache */
 80130da:	4b19      	ldr	r3, [pc, #100]	; (8013140 <SCB_CleanInvalidateDCache+0x6c>)
 80130dc:	2200      	movs	r2, #0
 80130de:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  __ASM volatile ("dsb 0xF":::"memory");
 80130e2:	f3bf 8f4f 	dsb	sy
    ccsidr = SCB->CCSIDR;
 80130e6:	4b16      	ldr	r3, [pc, #88]	; (8013140 <SCB_CleanInvalidateDCache+0x6c>)
 80130e8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80130ec:	607b      	str	r3, [r7, #4]
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
 80130ee:	687b      	ldr	r3, [r7, #4]
 80130f0:	0b5b      	lsrs	r3, r3, #13
 80130f2:	f3c3 030e 	ubfx	r3, r3, #0, #15
 80130f6:	60fb      	str	r3, [r7, #12]
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 80130f8:	687b      	ldr	r3, [r7, #4]
 80130fa:	08db      	lsrs	r3, r3, #3
 80130fc:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8013100:	60bb      	str	r3, [r7, #8]
        SCB->DCCISW = (((sets << SCB_DCCISW_SET_Pos) & SCB_DCCISW_SET_Msk) |
 8013102:	68fb      	ldr	r3, [r7, #12]
 8013104:	015a      	lsls	r2, r3, #5
 8013106:	f643 73e0 	movw	r3, #16352	; 0x3fe0
 801310a:	4013      	ands	r3, r2
                       ((ways << SCB_DCCISW_WAY_Pos) & SCB_DCCISW_WAY_Msk)  );
 801310c:	68ba      	ldr	r2, [r7, #8]
 801310e:	0792      	lsls	r2, r2, #30
        SCB->DCCISW = (((sets << SCB_DCCISW_SET_Pos) & SCB_DCCISW_SET_Msk) |
 8013110:	490b      	ldr	r1, [pc, #44]	; (8013140 <SCB_CleanInvalidateDCache+0x6c>)
 8013112:	4313      	orrs	r3, r2
 8013114:	f8c1 3274 	str.w	r3, [r1, #628]	; 0x274
      } while (ways-- != 0U);
 8013118:	68bb      	ldr	r3, [r7, #8]
 801311a:	1e5a      	subs	r2, r3, #1
 801311c:	60ba      	str	r2, [r7, #8]
 801311e:	2b00      	cmp	r3, #0
 8013120:	d1ef      	bne.n	8013102 <SCB_CleanInvalidateDCache+0x2e>
    } while(sets-- != 0U);
 8013122:	68fb      	ldr	r3, [r7, #12]
 8013124:	1e5a      	subs	r2, r3, #1
 8013126:	60fa      	str	r2, [r7, #12]
 8013128:	2b00      	cmp	r3, #0
 801312a:	d1e5      	bne.n	80130f8 <SCB_CleanInvalidateDCache+0x24>
 801312c:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8013130:	f3bf 8f6f 	isb	sy
}
 8013134:	bf00      	nop
 8013136:	3714      	adds	r7, #20
 8013138:	46bd      	mov	sp, r7
 801313a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801313e:	4770      	bx	lr
 8013140:	e000ed00 	.word	0xe000ed00

08013144 <SCB_InvalidateDCache_by_Addr>:
{
 8013144:	b480      	push	{r7}
 8013146:	b087      	sub	sp, #28
 8013148:	af00      	add	r7, sp, #0
 801314a:	6078      	str	r0, [r7, #4]
 801314c:	6039      	str	r1, [r7, #0]
     int32_t op_size = dsize;
 801314e:	683b      	ldr	r3, [r7, #0]
 8013150:	617b      	str	r3, [r7, #20]
    uint32_t op_addr = (uint32_t)addr;
 8013152:	687b      	ldr	r3, [r7, #4]
 8013154:	613b      	str	r3, [r7, #16]
     int32_t linesize = 32;                /* in Cortex-M7 size of cache line is fixed to 8 words (32 bytes) */
 8013156:	2320      	movs	r3, #32
 8013158:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 801315a:	f3bf 8f4f 	dsb	sy
    while (op_size > 0) {
 801315e:	e00b      	b.n	8013178 <SCB_InvalidateDCache_by_Addr+0x34>
      SCB->DCIMVAC = op_addr;
 8013160:	4a0c      	ldr	r2, [pc, #48]	; (8013194 <SCB_InvalidateDCache_by_Addr+0x50>)
 8013162:	693b      	ldr	r3, [r7, #16]
 8013164:	f8c2 325c 	str.w	r3, [r2, #604]	; 0x25c
      op_addr += (uint32_t)linesize;
 8013168:	68fb      	ldr	r3, [r7, #12]
 801316a:	693a      	ldr	r2, [r7, #16]
 801316c:	4413      	add	r3, r2
 801316e:	613b      	str	r3, [r7, #16]
      op_size -=           linesize;
 8013170:	697a      	ldr	r2, [r7, #20]
 8013172:	68fb      	ldr	r3, [r7, #12]
 8013174:	1ad3      	subs	r3, r2, r3
 8013176:	617b      	str	r3, [r7, #20]
    while (op_size > 0) {
 8013178:	697b      	ldr	r3, [r7, #20]
 801317a:	2b00      	cmp	r3, #0
 801317c:	dcf0      	bgt.n	8013160 <SCB_InvalidateDCache_by_Addr+0x1c>
 801317e:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8013182:	f3bf 8f6f 	isb	sy
}
 8013186:	bf00      	nop
 8013188:	371c      	adds	r7, #28
 801318a:	46bd      	mov	sp, r7
 801318c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013190:	4770      	bx	lr
 8013192:	bf00      	nop
 8013194:	e000ed00 	.word	0xe000ed00

08013198 <HAL_ETH_MspInit>:
/* Private functions ---------------------------------------------------------*/
void pbuf_free_custom(struct pbuf *p);
void Error_Handler(void);

void HAL_ETH_MspInit(ETH_HandleTypeDef* ethHandle)
{
 8013198:	b580      	push	{r7, lr}
 801319a:	b08e      	sub	sp, #56	; 0x38
 801319c:	af00      	add	r7, sp, #0
 801319e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80131a0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80131a4:	2200      	movs	r2, #0
 80131a6:	601a      	str	r2, [r3, #0]
 80131a8:	605a      	str	r2, [r3, #4]
 80131aa:	609a      	str	r2, [r3, #8]
 80131ac:	60da      	str	r2, [r3, #12]
 80131ae:	611a      	str	r2, [r3, #16]
  if(ethHandle->Instance==ETH)
 80131b0:	687b      	ldr	r3, [r7, #4]
 80131b2:	681b      	ldr	r3, [r3, #0]
 80131b4:	4a65      	ldr	r2, [pc, #404]	; (801334c <HAL_ETH_MspInit+0x1b4>)
 80131b6:	4293      	cmp	r3, r2
 80131b8:	f040 80c3 	bne.w	8013342 <HAL_ETH_MspInit+0x1aa>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* Enable Peripheral clock */
    __HAL_RCC_ETH1MAC_CLK_ENABLE();
 80131bc:	4b64      	ldr	r3, [pc, #400]	; (8013350 <HAL_ETH_MspInit+0x1b8>)
 80131be:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 80131c2:	4a63      	ldr	r2, [pc, #396]	; (8013350 <HAL_ETH_MspInit+0x1b8>)
 80131c4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80131c8:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 80131cc:	4b60      	ldr	r3, [pc, #384]	; (8013350 <HAL_ETH_MspInit+0x1b8>)
 80131ce:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 80131d2:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80131d6:	623b      	str	r3, [r7, #32]
 80131d8:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_ETH1TX_CLK_ENABLE();
 80131da:	4b5d      	ldr	r3, [pc, #372]	; (8013350 <HAL_ETH_MspInit+0x1b8>)
 80131dc:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 80131e0:	4a5b      	ldr	r2, [pc, #364]	; (8013350 <HAL_ETH_MspInit+0x1b8>)
 80131e2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80131e6:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 80131ea:	4b59      	ldr	r3, [pc, #356]	; (8013350 <HAL_ETH_MspInit+0x1b8>)
 80131ec:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 80131f0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80131f4:	61fb      	str	r3, [r7, #28]
 80131f6:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_ETH1RX_CLK_ENABLE();
 80131f8:	4b55      	ldr	r3, [pc, #340]	; (8013350 <HAL_ETH_MspInit+0x1b8>)
 80131fa:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 80131fe:	4a54      	ldr	r2, [pc, #336]	; (8013350 <HAL_ETH_MspInit+0x1b8>)
 8013200:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8013204:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8013208:	4b51      	ldr	r3, [pc, #324]	; (8013350 <HAL_ETH_MspInit+0x1b8>)
 801320a:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 801320e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8013212:	61bb      	str	r3, [r7, #24]
 8013214:	69bb      	ldr	r3, [r7, #24]
  
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8013216:	4b4e      	ldr	r3, [pc, #312]	; (8013350 <HAL_ETH_MspInit+0x1b8>)
 8013218:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 801321c:	4a4c      	ldr	r2, [pc, #304]	; (8013350 <HAL_ETH_MspInit+0x1b8>)
 801321e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8013222:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8013226:	4b4a      	ldr	r3, [pc, #296]	; (8013350 <HAL_ETH_MspInit+0x1b8>)
 8013228:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 801322c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8013230:	617b      	str	r3, [r7, #20]
 8013232:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8013234:	4b46      	ldr	r3, [pc, #280]	; (8013350 <HAL_ETH_MspInit+0x1b8>)
 8013236:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 801323a:	4a45      	ldr	r2, [pc, #276]	; (8013350 <HAL_ETH_MspInit+0x1b8>)
 801323c:	f043 0304 	orr.w	r3, r3, #4
 8013240:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8013244:	4b42      	ldr	r3, [pc, #264]	; (8013350 <HAL_ETH_MspInit+0x1b8>)
 8013246:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 801324a:	f003 0304 	and.w	r3, r3, #4
 801324e:	613b      	str	r3, [r7, #16]
 8013250:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8013252:	4b3f      	ldr	r3, [pc, #252]	; (8013350 <HAL_ETH_MspInit+0x1b8>)
 8013254:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8013258:	4a3d      	ldr	r2, [pc, #244]	; (8013350 <HAL_ETH_MspInit+0x1b8>)
 801325a:	f043 0301 	orr.w	r3, r3, #1
 801325e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8013262:	4b3b      	ldr	r3, [pc, #236]	; (8013350 <HAL_ETH_MspInit+0x1b8>)
 8013264:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8013268:	f003 0301 	and.w	r3, r3, #1
 801326c:	60fb      	str	r3, [r7, #12]
 801326e:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8013270:	4b37      	ldr	r3, [pc, #220]	; (8013350 <HAL_ETH_MspInit+0x1b8>)
 8013272:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8013276:	4a36      	ldr	r2, [pc, #216]	; (8013350 <HAL_ETH_MspInit+0x1b8>)
 8013278:	f043 0302 	orr.w	r3, r3, #2
 801327c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8013280:	4b33      	ldr	r3, [pc, #204]	; (8013350 <HAL_ETH_MspInit+0x1b8>)
 8013282:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8013286:	f003 0302 	and.w	r3, r3, #2
 801328a:	60bb      	str	r3, [r7, #8]
 801328c:	68bb      	ldr	r3, [r7, #8]
    PA2     ------> ETH_MDIO
    PC5     ------> ETH_RXD1
    PA7     ------> ETH_CRS_DV
    PB11     ------> ETH_TX_EN 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14;  //12 for LAN8720    14 for LAN8742
 801328e:	f44f 43c0 	mov.w	r3, #24576	; 0x6000
 8013292:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8013294:	2302      	movs	r3, #2
 8013296:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8013298:	2300      	movs	r3, #0
 801329a:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 801329c:	2303      	movs	r3, #3
 801329e:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80132a0:	230b      	movs	r3, #11
 80132a2:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80132a4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80132a8:	4619      	mov	r1, r3
 80132aa:	482a      	ldr	r0, [pc, #168]	; (8013354 <HAL_ETH_MspInit+0x1bc>)
 80132ac:	f7ef fbea 	bl	8002a84 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_1;
 80132b0:	2302      	movs	r3, #2
 80132b2:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80132b4:	2302      	movs	r3, #2
 80132b6:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80132b8:	2300      	movs	r3, #0
 80132ba:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80132bc:	2303      	movs	r3, #3
 80132be:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80132c0:	230b      	movs	r3, #11
 80132c2:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80132c4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80132c8:	4619      	mov	r1, r3
 80132ca:	4823      	ldr	r0, [pc, #140]	; (8013358 <HAL_ETH_MspInit+0x1c0>)
 80132cc:	f7ef fbda 	bl	8002a84 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_7;
 80132d0:	2386      	movs	r3, #134	; 0x86
 80132d2:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80132d4:	2302      	movs	r3, #2
 80132d6:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80132d8:	2300      	movs	r3, #0
 80132da:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80132dc:	2303      	movs	r3, #3
 80132de:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80132e0:	230b      	movs	r3, #11
 80132e2:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80132e4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80132e8:	4619      	mov	r1, r3
 80132ea:	481c      	ldr	r0, [pc, #112]	; (801335c <HAL_ETH_MspInit+0x1c4>)
 80132ec:	f7ef fbca 	bl	8002a84 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 80132f0:	2330      	movs	r3, #48	; 0x30
 80132f2:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80132f4:	2302      	movs	r3, #2
 80132f6:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80132f8:	2300      	movs	r3, #0
 80132fa:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80132fc:	2303      	movs	r3, #3
 80132fe:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8013300:	230b      	movs	r3, #11
 8013302:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8013304:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8013308:	4619      	mov	r1, r3
 801330a:	4813      	ldr	r0, [pc, #76]	; (8013358 <HAL_ETH_MspInit+0x1c0>)
 801330c:	f7ef fbba 	bl	8002a84 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11;
 8013310:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8013314:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8013316:	2302      	movs	r3, #2
 8013318:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 801331a:	2300      	movs	r3, #0
 801331c:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 801331e:	2303      	movs	r3, #3
 8013320:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8013322:	230b      	movs	r3, #11
 8013324:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8013326:	f107 0324 	add.w	r3, r7, #36	; 0x24
 801332a:	4619      	mov	r1, r3
 801332c:	480c      	ldr	r0, [pc, #48]	; (8013360 <HAL_ETH_MspInit+0x1c8>)
 801332e:	f7ef fba9 	bl	8002a84 <HAL_GPIO_Init>

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(ETH_IRQn, 7, 0);
 8013332:	2200      	movs	r2, #0
 8013334:	2107      	movs	r1, #7
 8013336:	203d      	movs	r0, #61	; 0x3d
 8013338:	f7ed fcf3 	bl	8000d22 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ETH_IRQn);
 801333c:	203d      	movs	r0, #61	; 0x3d
 801333e:	f7ed fd0a 	bl	8000d56 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ETH_MspInit 1 */

  /* USER CODE END ETH_MspInit 1 */
  }
}
 8013342:	bf00      	nop
 8013344:	3738      	adds	r7, #56	; 0x38
 8013346:	46bd      	mov	sp, r7
 8013348:	bd80      	pop	{r7, pc}
 801334a:	bf00      	nop
 801334c:	40028000 	.word	0x40028000
 8013350:	58024400 	.word	0x58024400
 8013354:	58021800 	.word	0x58021800
 8013358:	58020800 	.word	0x58020800
 801335c:	58020000 	.word	0x58020000
 8013360:	58020400 	.word	0x58020400

08013364 <HAL_ETH_RxCpltCallback>:
  * @brief  Ethernet Rx Transfer completed callback
  * @param  heth: ETH handle
  * @retval None
  */
void HAL_ETH_RxCpltCallback(ETH_HandleTypeDef *heth)
{
 8013364:	b580      	push	{r7, lr}
 8013366:	b082      	sub	sp, #8
 8013368:	af00      	add	r7, sp, #0
 801336a:	6078      	str	r0, [r7, #4]
  osSemaphoreRelease(RxPktSemaphore);
 801336c:	4b04      	ldr	r3, [pc, #16]	; (8013380 <HAL_ETH_RxCpltCallback+0x1c>)
 801336e:	681b      	ldr	r3, [r3, #0]
 8013370:	4618      	mov	r0, r3
 8013372:	f7f0 fe07 	bl	8003f84 <osSemaphoreRelease>
}
 8013376:	bf00      	nop
 8013378:	3708      	adds	r7, #8
 801337a:	46bd      	mov	sp, r7
 801337c:	bd80      	pop	{r7, pc}
 801337e:	bf00      	nop
 8013380:	24008748 	.word	0x24008748

08013384 <low_level_init>:
 *
 * @param netif the already initialized lwip network interface structure
 *        for this ethernetif
 */
static void low_level_init(struct netif *netif)
{
 8013384:	b580      	push	{r7, lr}
 8013386:	b0a8      	sub	sp, #160	; 0xa0
 8013388:	af00      	add	r7, sp, #0
 801338a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_eth_init_status;
  uint32_t idx = 0;
 801338c:	2300      	movs	r3, #0
 801338e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  ETH_MACConfigTypeDef MACConf;
  int32_t PHYLinkState;
  uint32_t duplex, speed = 0;
 8013392:	2300      	movs	r3, #0
 8013394:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  /* Start ETH HAL Init */

   uint8_t MACAddr[6] ;
  heth.Instance = ETH;
 8013398:	4ba8      	ldr	r3, [pc, #672]	; (801363c <low_level_init+0x2b8>)
 801339a:	4aa9      	ldr	r2, [pc, #676]	; (8013640 <low_level_init+0x2bc>)
 801339c:	601a      	str	r2, [r3, #0]
  MACAddr[0] = 0x00;
 801339e:	2300      	movs	r3, #0
 80133a0:	f887 3020 	strb.w	r3, [r7, #32]
  MACAddr[1] = 0x80;
 80133a4:	2380      	movs	r3, #128	; 0x80
 80133a6:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
  MACAddr[2] = 0xE1;
 80133aa:	23e1      	movs	r3, #225	; 0xe1
 80133ac:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  MACAddr[3] = 0x20;
 80133b0:	2320      	movs	r3, #32
 80133b2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  MACAddr[4] = 0x04;
 80133b6:	2304      	movs	r3, #4
 80133b8:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  MACAddr[5] = 0x13;
 80133bc:	2313      	movs	r3, #19
 80133be:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  heth.Init.MACAddr = &MACAddr[0];
 80133c2:	4a9e      	ldr	r2, [pc, #632]	; (801363c <low_level_init+0x2b8>)
 80133c4:	f107 0320 	add.w	r3, r7, #32
 80133c8:	6053      	str	r3, [r2, #4]
  heth.Init.MediaInterface = HAL_ETH_RMII_MODE;
 80133ca:	4b9c      	ldr	r3, [pc, #624]	; (801363c <low_level_init+0x2b8>)
 80133cc:	2201      	movs	r2, #1
 80133ce:	721a      	strb	r2, [r3, #8]
  heth.Init.TxDesc = DMATxDscrTab;
 80133d0:	4b9a      	ldr	r3, [pc, #616]	; (801363c <low_level_init+0x2b8>)
 80133d2:	4a9c      	ldr	r2, [pc, #624]	; (8013644 <low_level_init+0x2c0>)
 80133d4:	60da      	str	r2, [r3, #12]
  heth.Init.RxDesc = DMARxDscrTab;
 80133d6:	4b99      	ldr	r3, [pc, #612]	; (801363c <low_level_init+0x2b8>)
 80133d8:	4a9b      	ldr	r2, [pc, #620]	; (8013648 <low_level_init+0x2c4>)
 80133da:	611a      	str	r2, [r3, #16]
  heth.Init.RxBuffLen = 1536;
 80133dc:	4b97      	ldr	r3, [pc, #604]	; (801363c <low_level_init+0x2b8>)
 80133de:	f44f 62c0 	mov.w	r2, #1536	; 0x600
 80133e2:	615a      	str	r2, [r3, #20]

  /* USER CODE BEGIN MACADDRESS */
    
  /* USER CODE END MACADDRESS */

  hal_eth_init_status = HAL_ETH_Init(&heth);
 80133e4:	4895      	ldr	r0, [pc, #596]	; (801363c <low_level_init+0x2b8>)
 80133e6:	f7ed fd49 	bl	8000e7c <HAL_ETH_Init>
 80133ea:	4603      	mov	r3, r0
 80133ec:	f887 3093 	strb.w	r3, [r7, #147]	; 0x93

  memset(&TxConfig, 0 , sizeof(ETH_TxPacketConfig));
 80133f0:	2234      	movs	r2, #52	; 0x34
 80133f2:	2100      	movs	r1, #0
 80133f4:	4895      	ldr	r0, [pc, #596]	; (801364c <low_level_init+0x2c8>)
 80133f6:	f002 fc69 	bl	8015ccc <memset>
  TxConfig.Attributes = ETH_TX_PACKETS_FEATURES_CSUM | ETH_TX_PACKETS_FEATURES_CRCPAD;
 80133fa:	4b94      	ldr	r3, [pc, #592]	; (801364c <low_level_init+0x2c8>)
 80133fc:	2221      	movs	r2, #33	; 0x21
 80133fe:	601a      	str	r2, [r3, #0]
  TxConfig.ChecksumCtrl = ETH_CHECKSUM_IPHDR_PAYLOAD_INSERT_PHDR_CALC;
 8013400:	4b92      	ldr	r3, [pc, #584]	; (801364c <low_level_init+0x2c8>)
 8013402:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8013406:	615a      	str	r2, [r3, #20]
  TxConfig.CRCPadCtrl = ETH_CRC_PAD_INSERT;
 8013408:	4b90      	ldr	r3, [pc, #576]	; (801364c <low_level_init+0x2c8>)
 801340a:	2200      	movs	r2, #0
 801340c:	611a      	str	r2, [r3, #16]

  /* End ETH HAL Init */
  
  /* Initialize the RX POOL */
  LWIP_MEMPOOL_INIT(RX_POOL);
 801340e:	4890      	ldr	r0, [pc, #576]	; (8013650 <low_level_init+0x2cc>)
 8013410:	f7f6 f990 	bl	8009734 <memp_init_pool>

#if LWIP_ARP || LWIP_ETHERNET 

  /* set MAC hardware address length */
  netif->hwaddr_len = ETH_HWADDR_LEN;
 8013414:	687b      	ldr	r3, [r7, #4]
 8013416:	2206      	movs	r2, #6
 8013418:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
  
  /* set MAC hardware address */
  netif->hwaddr[0] =  heth.Init.MACAddr[0];
 801341c:	4b87      	ldr	r3, [pc, #540]	; (801363c <low_level_init+0x2b8>)
 801341e:	685b      	ldr	r3, [r3, #4]
 8013420:	781a      	ldrb	r2, [r3, #0]
 8013422:	687b      	ldr	r3, [r7, #4]
 8013424:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
  netif->hwaddr[1] =  heth.Init.MACAddr[1];
 8013428:	4b84      	ldr	r3, [pc, #528]	; (801363c <low_level_init+0x2b8>)
 801342a:	685b      	ldr	r3, [r3, #4]
 801342c:	785a      	ldrb	r2, [r3, #1]
 801342e:	687b      	ldr	r3, [r7, #4]
 8013430:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
  netif->hwaddr[2] =  heth.Init.MACAddr[2];
 8013434:	4b81      	ldr	r3, [pc, #516]	; (801363c <low_level_init+0x2b8>)
 8013436:	685b      	ldr	r3, [r3, #4]
 8013438:	789a      	ldrb	r2, [r3, #2]
 801343a:	687b      	ldr	r3, [r7, #4]
 801343c:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b
  netif->hwaddr[3] =  heth.Init.MACAddr[3];
 8013440:	4b7e      	ldr	r3, [pc, #504]	; (801363c <low_level_init+0x2b8>)
 8013442:	685b      	ldr	r3, [r3, #4]
 8013444:	78da      	ldrb	r2, [r3, #3]
 8013446:	687b      	ldr	r3, [r7, #4]
 8013448:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  netif->hwaddr[4] =  heth.Init.MACAddr[4];
 801344c:	4b7b      	ldr	r3, [pc, #492]	; (801363c <low_level_init+0x2b8>)
 801344e:	685b      	ldr	r3, [r3, #4]
 8013450:	791a      	ldrb	r2, [r3, #4]
 8013452:	687b      	ldr	r3, [r7, #4]
 8013454:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
  netif->hwaddr[5] =  heth.Init.MACAddr[5];
 8013458:	4b78      	ldr	r3, [pc, #480]	; (801363c <low_level_init+0x2b8>)
 801345a:	685b      	ldr	r3, [r3, #4]
 801345c:	795a      	ldrb	r2, [r3, #5]
 801345e:	687b      	ldr	r3, [r7, #4]
 8013460:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e
  
  /* maximum transfer unit */
  netif->mtu = ETH_MAX_PAYLOAD;
 8013464:	687b      	ldr	r3, [r7, #4]
 8013466:	f240 52dc 	movw	r2, #1500	; 0x5dc
 801346a:	84da      	strh	r2, [r3, #38]	; 0x26
  
  /* Accept broadcast address and ARP traffic */
  /* don't set NETIF_FLAG_ETHARP if this device is not an ethernet one */
  #if LWIP_ARP
    netif->flags |= NETIF_FLAG_BROADCAST | NETIF_FLAG_ETHARP;
 801346c:	687b      	ldr	r3, [r7, #4]
 801346e:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 8013472:	f043 030a 	orr.w	r3, r3, #10
 8013476:	b2da      	uxtb	r2, r3
 8013478:	687b      	ldr	r3, [r7, #4]
 801347a:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
  #else 
    netif->flags |= NETIF_FLAG_BROADCAST;
  #endif /* LWIP_ARP */

  for(idx = 0; idx < ETH_RX_DESC_CNT; idx ++)
 801347e:	2300      	movs	r3, #0
 8013480:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8013484:	e012      	b.n	80134ac <low_level_init+0x128>
  {
    HAL_ETH_DescAssignMemory(&heth, idx, Rx_Buff[idx], NULL);
 8013486:	f8d7 209c 	ldr.w	r2, [r7, #156]	; 0x9c
 801348a:	4613      	mov	r3, r2
 801348c:	005b      	lsls	r3, r3, #1
 801348e:	4413      	add	r3, r2
 8013490:	025b      	lsls	r3, r3, #9
 8013492:	4a70      	ldr	r2, [pc, #448]	; (8013654 <low_level_init+0x2d0>)
 8013494:	441a      	add	r2, r3
 8013496:	2300      	movs	r3, #0
 8013498:	f8d7 109c 	ldr.w	r1, [r7, #156]	; 0x9c
 801349c:	4867      	ldr	r0, [pc, #412]	; (801363c <low_level_init+0x2b8>)
 801349e:	f7ed fdc7 	bl	8001030 <HAL_ETH_DescAssignMemory>
  for(idx = 0; idx < ETH_RX_DESC_CNT; idx ++)
 80134a2:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80134a6:	3301      	adds	r3, #1
 80134a8:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 80134ac:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80134b0:	2b03      	cmp	r3, #3
 80134b2:	d9e8      	bls.n	8013486 <low_level_init+0x102>
  } 
      
  /* create a binary semaphore used for informing ethernetif of frame reception */
  osSemaphoreDef(SEM);
 80134b4:	2300      	movs	r3, #0
 80134b6:	61fb      	str	r3, [r7, #28]
  RxPktSemaphore = osSemaphoreCreate(osSemaphore(SEM) , 1 );
 80134b8:	f107 031c 	add.w	r3, r7, #28
 80134bc:	2101      	movs	r1, #1
 80134be:	4618      	mov	r0, r3
 80134c0:	f7f0 fcf4 	bl	8003eac <osSemaphoreCreate>
 80134c4:	4602      	mov	r2, r0
 80134c6:	4b64      	ldr	r3, [pc, #400]	; (8013658 <low_level_init+0x2d4>)
 80134c8:	601a      	str	r2, [r3, #0]

  /* create the task that handles the ETH_MAC */
  osThreadDef(EthIf, ethernetif_input, 5, netif, INTERFACE_THREAD_STACK_SIZE);
 80134ca:	4b64      	ldr	r3, [pc, #400]	; (801365c <low_level_init+0x2d8>)
 80134cc:	60bb      	str	r3, [r7, #8]
 80134ce:	4b64      	ldr	r3, [pc, #400]	; (8013660 <low_level_init+0x2dc>)
 80134d0:	60fb      	str	r3, [r7, #12]
 80134d2:	2305      	movs	r3, #5
 80134d4:	823b      	strh	r3, [r7, #16]
 80134d6:	687b      	ldr	r3, [r7, #4]
 80134d8:	617b      	str	r3, [r7, #20]
 80134da:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80134de:	61bb      	str	r3, [r7, #24]
  osThreadCreate (osThread(EthIf), netif);
 80134e0:	f107 0308 	add.w	r3, r7, #8
 80134e4:	6879      	ldr	r1, [r7, #4]
 80134e6:	4618      	mov	r0, r3
 80134e8:	f7f0 fc15 	bl	8003d16 <osThreadCreate>
/* USER CODE BEGIN PHY_PRE_CONFIG */ 
    
/* USER CODE END PHY_PRE_CONFIG */
  /* Set PHY IO functions */
  LAN8742_RegisterBusIO(&LAN8742, &LAN8742_IOCtx);
 80134ec:	495d      	ldr	r1, [pc, #372]	; (8013664 <low_level_init+0x2e0>)
 80134ee:	485e      	ldr	r0, [pc, #376]	; (8013668 <low_level_init+0x2e4>)
 80134f0:	f7ed f9dc 	bl	80008ac <LAN8742_RegisterBusIO>

  /* Initialize the LAN8742 ETH PHY */
  LAN8742_Init(&heth);
 80134f4:	4851      	ldr	r0, [pc, #324]	; (801363c <low_level_init+0x2b8>)
 80134f6:	f7ed fa0b 	bl	8000910 <LAN8742_Init>


    PHYLinkState = LAN8742_GetLinkState(&heth);
 80134fa:	4850      	ldr	r0, [pc, #320]	; (801363c <low_level_init+0x2b8>)
 80134fc:	f7ed fa48 	bl	8000990 <LAN8742_GetLinkState>
 8013500:	f8c7 008c 	str.w	r0, [r7, #140]	; 0x8c
  
    /* Get link state */  
    if(netif_is_link_up(netif) && (PHYLinkState))
 8013504:	687b      	ldr	r3, [r7, #4]
 8013506:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 801350a:	089b      	lsrs	r3, r3, #2
 801350c:	f003 0301 	and.w	r3, r3, #1
 8013510:	b2db      	uxtb	r3, r3
 8013512:	2b00      	cmp	r3, #0
 8013514:	d00a      	beq.n	801352c <low_level_init+0x1a8>
 8013516:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 801351a:	2b00      	cmp	r3, #0
 801351c:	d006      	beq.n	801352c <low_level_init+0x1a8>
    {
      netif_set_link_down(netif);
 801351e:	6878      	ldr	r0, [r7, #4]
 8013520:	f7f6 fbd3 	bl	8009cca <netif_set_link_down>
      netif_set_down(netif);
 8013524:	6878      	ldr	r0, [r7, #4]
 8013526:	f7f6 fb83 	bl	8009c30 <netif_set_down>
#endif /* LWIP_ARP || LWIP_ETHERNET */

/* USER CODE BEGIN LOW_LEVEL_INIT */ 
    
/* USER CODE END LOW_LEVEL_INIT */
}
 801352a:	e083      	b.n	8013634 <low_level_init+0x2b0>
    else if(!netif_is_link_up(netif) && (PHYLinkState))
 801352c:	687b      	ldr	r3, [r7, #4]
 801352e:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 8013532:	f003 0304 	and.w	r3, r3, #4
 8013536:	2b00      	cmp	r3, #0
 8013538:	d17c      	bne.n	8013634 <low_level_init+0x2b0>
 801353a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 801353e:	2b00      	cmp	r3, #0
 8013540:	d078      	beq.n	8013634 <low_level_init+0x2b0>
      switch ((PHYLinkState & (uint16_t)0x001C))
 8013542:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8013546:	f003 031c 	and.w	r3, r3, #28
 801354a:	3b04      	subs	r3, #4
 801354c:	2b14      	cmp	r3, #20
 801354e:	d84d      	bhi.n	80135ec <low_level_init+0x268>
 8013550:	a201      	add	r2, pc, #4	; (adr r2, 8013558 <low_level_init+0x1d4>)
 8013552:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8013556:	bf00      	nop
 8013558:	080135df 	.word	0x080135df
 801355c:	080135ed 	.word	0x080135ed
 8013560:	080135ed 	.word	0x080135ed
 8013564:	080135ed 	.word	0x080135ed
 8013568:	080135bf 	.word	0x080135bf
 801356c:	080135ed 	.word	0x080135ed
 8013570:	080135ed 	.word	0x080135ed
 8013574:	080135ed 	.word	0x080135ed
 8013578:	080135ed 	.word	0x080135ed
 801357c:	080135ed 	.word	0x080135ed
 8013580:	080135ed 	.word	0x080135ed
 8013584:	080135ed 	.word	0x080135ed
 8013588:	080135ed 	.word	0x080135ed
 801358c:	080135ed 	.word	0x080135ed
 8013590:	080135ed 	.word	0x080135ed
 8013594:	080135ed 	.word	0x080135ed
 8013598:	080135cf 	.word	0x080135cf
 801359c:	080135ed 	.word	0x080135ed
 80135a0:	080135ed 	.word	0x080135ed
 80135a4:	080135ed 	.word	0x080135ed
 80135a8:	080135ad 	.word	0x080135ad
        duplex = ETH_FULLDUPLEX_MODE;
 80135ac:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80135b0:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
        speed = ETH_SPEED_100M;
 80135b4:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80135b8:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
        break;
 80135bc:	e01f      	b.n	80135fe <low_level_init+0x27a>
        duplex = ETH_HALFDUPLEX_MODE;
 80135be:	2300      	movs	r3, #0
 80135c0:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
        speed = ETH_SPEED_100M;
 80135c4:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80135c8:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
        break;
 80135cc:	e017      	b.n	80135fe <low_level_init+0x27a>
        duplex = ETH_FULLDUPLEX_MODE;
 80135ce:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80135d2:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
        speed = ETH_SPEED_10M;
 80135d6:	2300      	movs	r3, #0
 80135d8:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
        break;
 80135dc:	e00f      	b.n	80135fe <low_level_init+0x27a>
        duplex = ETH_HALFDUPLEX_MODE;
 80135de:	2300      	movs	r3, #0
 80135e0:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
        speed = ETH_SPEED_10M;
 80135e4:	2300      	movs	r3, #0
 80135e6:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
        break;
 80135ea:	e008      	b.n	80135fe <low_level_init+0x27a>
        duplex = ETH_FULLDUPLEX_MODE;
 80135ec:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80135f0:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
        speed = ETH_SPEED_100M;
 80135f4:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80135f8:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
        break;      
 80135fc:	bf00      	nop
    HAL_ETH_GetMACConfig(&heth, &MACConf); 
 80135fe:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8013602:	4619      	mov	r1, r3
 8013604:	480d      	ldr	r0, [pc, #52]	; (801363c <low_level_init+0x2b8>)
 8013606:	f7ee fa67 	bl	8001ad8 <HAL_ETH_GetMACConfig>
    MACConf.DuplexMode = duplex;
 801360a:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 801360e:	643b      	str	r3, [r7, #64]	; 0x40
    MACConf.Speed = speed;
 8013610:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8013614:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_ETH_SetMACConfig(&heth, &MACConf);
 8013616:	f107 0328 	add.w	r3, r7, #40	; 0x28
 801361a:	4619      	mov	r1, r3
 801361c:	4807      	ldr	r0, [pc, #28]	; (801363c <low_level_init+0x2b8>)
 801361e:	f7ee fc2f 	bl	8001e80 <HAL_ETH_SetMACConfig>
    HAL_ETH_Start_IT(&heth);
 8013622:	4806      	ldr	r0, [pc, #24]	; (801363c <low_level_init+0x2b8>)
 8013624:	f7ed fd45 	bl	80010b2 <HAL_ETH_Start_IT>
    netif_set_up(netif);
 8013628:	6878      	ldr	r0, [r7, #4]
 801362a:	f7f6 fabd 	bl	8009ba8 <netif_set_up>
    netif_set_link_up(netif);
 801362e:	6878      	ldr	r0, [r7, #4]
 8013630:	f7f6 fb20 	bl	8009c74 <netif_set_link_up>
}
 8013634:	bf00      	nop
 8013636:	37a0      	adds	r7, #160	; 0xa0
 8013638:	46bd      	mov	sp, r7
 801363a:	bd80      	pop	{r7, pc}
 801363c:	2400f4c0 	.word	0x2400f4c0
 8013640:	40028000 	.word	0x40028000
 8013644:	30040060 	.word	0x30040060
 8013648:	30040000 	.word	0x30040000
 801364c:	2400f530 	.word	0x2400f530
 8013650:	0801c178 	.word	0x0801c178
 8013654:	30040200 	.word	0x30040200
 8013658:	24008748 	.word	0x24008748
 801365c:	0801bed4 	.word	0x0801bed4
 8013660:	0801381d 	.word	0x0801381d
 8013664:	24000018 	.word	0x24000018
 8013668:	2400f4a0 	.word	0x2400f4a0

0801366c <low_level_output>:
 *       to become availale since the stack doesn't retry to send a packet
 *       dropped because of memory failure (except for the TCP timers).
 */

static err_t low_level_output(struct netif *netif, struct pbuf *p)
{
 801366c:	b580      	push	{r7, lr}
 801366e:	b092      	sub	sp, #72	; 0x48
 8013670:	af00      	add	r7, sp, #0
 8013672:	6078      	str	r0, [r7, #4]
 8013674:	6039      	str	r1, [r7, #0]
  uint32_t i=0, framelen = 0;
 8013676:	2300      	movs	r3, #0
 8013678:	647b      	str	r3, [r7, #68]	; 0x44
 801367a:	2300      	movs	r3, #0
 801367c:	643b      	str	r3, [r7, #64]	; 0x40
  struct pbuf *q;
  err_t errval = ERR_OK;
 801367e:	2300      	movs	r3, #0
 8013680:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
  ETH_BufferTypeDef Txbuffer[ETH_TX_DESC_CNT];
  
  static sys_sem_t ousem = NULL;
  if(ousem == NULL)
 8013684:	4b41      	ldr	r3, [pc, #260]	; (801378c <low_level_output+0x120>)
 8013686:	681b      	ldr	r3, [r3, #0]
 8013688:	2b00      	cmp	r3, #0
 801368a:	d106      	bne.n	801369a <low_level_output+0x2e>
  {
    sys_sem_new(&ousem,0);
 801368c:	2100      	movs	r1, #0
 801368e:	483f      	ldr	r0, [pc, #252]	; (801378c <low_level_output+0x120>)
 8013690:	f7ff fc10 	bl	8012eb4 <sys_sem_new>
    sys_sem_signal(&ousem);
 8013694:	483d      	ldr	r0, [pc, #244]	; (801378c <low_level_output+0x120>)
 8013696:	f7ff fc64 	bl	8012f62 <sys_sem_signal>
  }

  memset(Txbuffer, 0 , ETH_TX_DESC_CNT*sizeof(ETH_BufferTypeDef));
 801369a:	f107 0308 	add.w	r3, r7, #8
 801369e:	2230      	movs	r2, #48	; 0x30
 80136a0:	2100      	movs	r1, #0
 80136a2:	4618      	mov	r0, r3
 80136a4:	f002 fb12 	bl	8015ccc <memset>
  
  sys_sem_wait(&ousem);
 80136a8:	2100      	movs	r1, #0
 80136aa:	4838      	ldr	r0, [pc, #224]	; (801378c <low_level_output+0x120>)
 80136ac:	f7ff fc28 	bl	8012f00 <sys_arch_sem_wait>

  for(q = p; q != NULL; q = q->next)
 80136b0:	683b      	ldr	r3, [r7, #0]
 80136b2:	63fb      	str	r3, [r7, #60]	; 0x3c
 80136b4:	e04f      	b.n	8013756 <low_level_output+0xea>
  {
    if(i >= ETH_TX_DESC_CNT)	
 80136b6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80136b8:	2b03      	cmp	r3, #3
 80136ba:	d902      	bls.n	80136c2 <low_level_output+0x56>
      return ERR_IF;
 80136bc:	f06f 030b 	mvn.w	r3, #11
 80136c0:	e05f      	b.n	8013782 <low_level_output+0x116>
    
    Txbuffer[i].buffer = q->payload;
 80136c2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80136c4:	6859      	ldr	r1, [r3, #4]
 80136c6:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80136c8:	4613      	mov	r3, r2
 80136ca:	005b      	lsls	r3, r3, #1
 80136cc:	4413      	add	r3, r2
 80136ce:	009b      	lsls	r3, r3, #2
 80136d0:	f107 0248 	add.w	r2, r7, #72	; 0x48
 80136d4:	4413      	add	r3, r2
 80136d6:	3b40      	subs	r3, #64	; 0x40
 80136d8:	6019      	str	r1, [r3, #0]
    Txbuffer[i].len = q->len;
 80136da:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80136dc:	895b      	ldrh	r3, [r3, #10]
 80136de:	4619      	mov	r1, r3
 80136e0:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80136e2:	4613      	mov	r3, r2
 80136e4:	005b      	lsls	r3, r3, #1
 80136e6:	4413      	add	r3, r2
 80136e8:	009b      	lsls	r3, r3, #2
 80136ea:	f107 0248 	add.w	r2, r7, #72	; 0x48
 80136ee:	4413      	add	r3, r2
 80136f0:	3b3c      	subs	r3, #60	; 0x3c
 80136f2:	6019      	str	r1, [r3, #0]
    framelen += q->len;
 80136f4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80136f6:	895b      	ldrh	r3, [r3, #10]
 80136f8:	461a      	mov	r2, r3
 80136fa:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80136fc:	4413      	add	r3, r2
 80136fe:	643b      	str	r3, [r7, #64]	; 0x40
    
    if(i>0)
 8013700:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8013702:	2b00      	cmp	r3, #0
 8013704:	d012      	beq.n	801372c <low_level_output+0xc0>
    {
      Txbuffer[i-1].next = &Txbuffer[i];
 8013706:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8013708:	1e5a      	subs	r2, r3, #1
 801370a:	f107 0008 	add.w	r0, r7, #8
 801370e:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8013710:	460b      	mov	r3, r1
 8013712:	005b      	lsls	r3, r3, #1
 8013714:	440b      	add	r3, r1
 8013716:	009b      	lsls	r3, r3, #2
 8013718:	18c1      	adds	r1, r0, r3
 801371a:	4613      	mov	r3, r2
 801371c:	005b      	lsls	r3, r3, #1
 801371e:	4413      	add	r3, r2
 8013720:	009b      	lsls	r3, r3, #2
 8013722:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8013726:	4413      	add	r3, r2
 8013728:	3b38      	subs	r3, #56	; 0x38
 801372a:	6019      	str	r1, [r3, #0]
    }
    
    if(q->next == NULL)
 801372c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801372e:	681b      	ldr	r3, [r3, #0]
 8013730:	2b00      	cmp	r3, #0
 8013732:	d10a      	bne.n	801374a <low_level_output+0xde>
    {
      Txbuffer[i].next = NULL;
 8013734:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8013736:	4613      	mov	r3, r2
 8013738:	005b      	lsls	r3, r3, #1
 801373a:	4413      	add	r3, r2
 801373c:	009b      	lsls	r3, r3, #2
 801373e:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8013742:	4413      	add	r3, r2
 8013744:	3b38      	subs	r3, #56	; 0x38
 8013746:	2200      	movs	r2, #0
 8013748:	601a      	str	r2, [r3, #0]
    }
    
    i++;
 801374a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801374c:	3301      	adds	r3, #1
 801374e:	647b      	str	r3, [r7, #68]	; 0x44
  for(q = p; q != NULL; q = q->next)
 8013750:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8013752:	681b      	ldr	r3, [r3, #0]
 8013754:	63fb      	str	r3, [r7, #60]	; 0x3c
 8013756:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8013758:	2b00      	cmp	r3, #0
 801375a:	d1ac      	bne.n	80136b6 <low_level_output+0x4a>
  }

  TxConfig.Length = framelen;
 801375c:	4a0c      	ldr	r2, [pc, #48]	; (8013790 <low_level_output+0x124>)
 801375e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8013760:	6053      	str	r3, [r2, #4]
  TxConfig.TxBuffer = Txbuffer;
 8013762:	4a0b      	ldr	r2, [pc, #44]	; (8013790 <low_level_output+0x124>)
 8013764:	f107 0308 	add.w	r3, r7, #8
 8013768:	6093      	str	r3, [r2, #8]

  SCB_CleanInvalidateDCache();
 801376a:	f7ff fcb3 	bl	80130d4 <SCB_CleanInvalidateDCache>
  HAL_ETH_Transmit(&heth, &TxConfig, ETH_DMA_TRANSMIT_TIMEOUT);
 801376e:	2205      	movs	r2, #5
 8013770:	4907      	ldr	r1, [pc, #28]	; (8013790 <low_level_output+0x124>)
 8013772:	4808      	ldr	r0, [pc, #32]	; (8013794 <low_level_output+0x128>)
 8013774:	f7ed fd33 	bl	80011de <HAL_ETH_Transmit>
  
  sys_sem_signal(&ousem);
 8013778:	4804      	ldr	r0, [pc, #16]	; (801378c <low_level_output+0x120>)
 801377a:	f7ff fbf2 	bl	8012f62 <sys_sem_signal>

  return errval;
 801377e:	f997 303b 	ldrsb.w	r3, [r7, #59]	; 0x3b
}
 8013782:	4618      	mov	r0, r3
 8013784:	3748      	adds	r7, #72	; 0x48
 8013786:	46bd      	mov	sp, r7
 8013788:	bd80      	pop	{r7, pc}
 801378a:	bf00      	nop
 801378c:	24008750 	.word	0x24008750
 8013790:	2400f530 	.word	0x2400f530
 8013794:	2400f4c0 	.word	0x2400f4c0

08013798 <low_level_input>:
 * @param netif the lwip network interface structure for this ethernetif
 * @return a pbuf filled with the received packet (including MAC header)
 *         NULL on memory error
   */
static struct pbuf * low_level_input(struct netif *netif)
{
 8013798:	b580      	push	{r7, lr}
 801379a:	b08a      	sub	sp, #40	; 0x28
 801379c:	af02      	add	r7, sp, #8
 801379e:	6078      	str	r0, [r7, #4]
  struct pbuf *p = NULL;
 80137a0:	2300      	movs	r3, #0
 80137a2:	61fb      	str	r3, [r7, #28]
  ETH_BufferTypeDef RxBuff;
  uint32_t framelength = 0;
 80137a4:	2300      	movs	r3, #0
 80137a6:	60bb      	str	r3, [r7, #8]
  struct pbuf_custom* custom_pbuf;
  
  SCB_CleanInvalidateDCache();
 80137a8:	f7ff fc94 	bl	80130d4 <SCB_CleanInvalidateDCache>
  if (HAL_ETH_GetRxDataBuffer(&heth, &RxBuff) == HAL_OK) 
 80137ac:	f107 030c 	add.w	r3, r7, #12
 80137b0:	4619      	mov	r1, r3
 80137b2:	4816      	ldr	r0, [pc, #88]	; (801380c <low_level_input+0x74>)
 80137b4:	f7ed fe7d 	bl	80014b2 <HAL_ETH_GetRxDataBuffer>
 80137b8:	4603      	mov	r3, r0
 80137ba:	2b00      	cmp	r3, #0
 80137bc:	d121      	bne.n	8013802 <low_level_input+0x6a>
  {
    HAL_ETH_GetRxDataLength(&heth, &framelength);
 80137be:	f107 0308 	add.w	r3, r7, #8
 80137c2:	4619      	mov	r1, r3
 80137c4:	4811      	ldr	r0, [pc, #68]	; (801380c <low_level_input+0x74>)
 80137c6:	f7ed ff12 	bl	80015ee <HAL_ETH_GetRxDataLength>
    
    /* Build Rx descriptor to be ready for next data reception */
    HAL_ETH_BuildRxDescriptors(&heth);
 80137ca:	4810      	ldr	r0, [pc, #64]	; (801380c <low_level_input+0x74>)
 80137cc:	f7ed ff42 	bl	8001654 <HAL_ETH_BuildRxDescriptors>

#if !defined(DUAL_CORE) || defined(CORE_CM7)
    /* Invalidate data cache for ETH Rx Buffers */
    SCB_InvalidateDCache_by_Addr((uint32_t *)Rx_Buff, (ETH_RX_DESC_CNT * ETH_RX_BUFFER_SIZE));
 80137d0:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 80137d4:	480e      	ldr	r0, [pc, #56]	; (8013810 <low_level_input+0x78>)
 80137d6:	f7ff fcb5 	bl	8013144 <SCB_InvalidateDCache_by_Addr>
#endif

    custom_pbuf  = (struct pbuf_custom*)LWIP_MEMPOOL_ALLOC(RX_POOL);
 80137da:	480e      	ldr	r0, [pc, #56]	; (8013814 <low_level_input+0x7c>)
 80137dc:	f7f6 f826 	bl	800982c <memp_malloc_pool>
 80137e0:	61b8      	str	r0, [r7, #24]
    custom_pbuf->custom_free_function = pbuf_free_custom;
 80137e2:	69bb      	ldr	r3, [r7, #24]
 80137e4:	4a0c      	ldr	r2, [pc, #48]	; (8013818 <low_level_input+0x80>)
 80137e6:	611a      	str	r2, [r3, #16]

    p = pbuf_alloced_custom(PBUF_RAW, framelength, PBUF_REF, custom_pbuf, RxBuff.buffer, ETH_RX_BUFFER_SIZE);
 80137e8:	68bb      	ldr	r3, [r7, #8]
 80137ea:	b299      	uxth	r1, r3
 80137ec:	68fb      	ldr	r3, [r7, #12]
 80137ee:	f44f 62c0 	mov.w	r2, #1536	; 0x600
 80137f2:	9201      	str	r2, [sp, #4]
 80137f4:	9300      	str	r3, [sp, #0]
 80137f6:	69bb      	ldr	r3, [r7, #24]
 80137f8:	2202      	movs	r2, #2
 80137fa:	2004      	movs	r0, #4
 80137fc:	f7f6 fc7a 	bl	800a0f4 <pbuf_alloced_custom>
 8013800:	61f8      	str	r0, [r7, #28]
  }
  
  
  return p;
 8013802:	69fb      	ldr	r3, [r7, #28]
}
 8013804:	4618      	mov	r0, r3
 8013806:	3720      	adds	r7, #32
 8013808:	46bd      	mov	sp, r7
 801380a:	bd80      	pop	{r7, pc}
 801380c:	2400f4c0 	.word	0x2400f4c0
 8013810:	30040200 	.word	0x30040200
 8013814:	0801c178 	.word	0x0801c178
 8013818:	080138d9 	.word	0x080138d9

0801381c <ethernetif_input>:
 * the appropriate input function is called.
 *
 * @param netif the lwip network interface structure for this ethernetif
 */
void ethernetif_input(void const * argument)
{
 801381c:	b580      	push	{r7, lr}
 801381e:	b084      	sub	sp, #16
 8013820:	af00      	add	r7, sp, #0
 8013822:	6078      	str	r0, [r7, #4]
  struct pbuf *p;
  struct netif *netif = (struct netif *) argument;
 8013824:	687b      	ldr	r3, [r7, #4]
 8013826:	60fb      	str	r3, [r7, #12]
  
  for( ;; )
  {
    if (osSemaphoreWait(RxPktSemaphore, TIME_WAITING_FOR_INPUT) == osOK)
 8013828:	4b12      	ldr	r3, [pc, #72]	; (8013874 <ethernetif_input+0x58>)
 801382a:	681b      	ldr	r3, [r3, #0]
 801382c:	f04f 31ff 	mov.w	r1, #4294967295
 8013830:	4618      	mov	r0, r3
 8013832:	f7f0 fb59 	bl	8003ee8 <osSemaphoreWait>
 8013836:	4603      	mov	r3, r0
 8013838:	2b00      	cmp	r3, #0
 801383a:	d1f5      	bne.n	8013828 <ethernetif_input+0xc>
    {
      do
      {
        LOCK_TCPIP_CORE();
 801383c:	480e      	ldr	r0, [pc, #56]	; (8013878 <ethernetif_input+0x5c>)
 801383e:	f7ff fbf1 	bl	8013024 <sys_mutex_lock>
        
        p = low_level_input( netif );
 8013842:	68f8      	ldr	r0, [r7, #12]
 8013844:	f7ff ffa8 	bl	8013798 <low_level_input>
 8013848:	60b8      	str	r0, [r7, #8]


        if (p != NULL)
 801384a:	68bb      	ldr	r3, [r7, #8]
 801384c:	2b00      	cmp	r3, #0
 801384e:	d00a      	beq.n	8013866 <ethernetif_input+0x4a>
        {
          if (netif->input( p, netif) != ERR_OK )
 8013850:	68fb      	ldr	r3, [r7, #12]
 8013852:	691b      	ldr	r3, [r3, #16]
 8013854:	68f9      	ldr	r1, [r7, #12]
 8013856:	68b8      	ldr	r0, [r7, #8]
 8013858:	4798      	blx	r3
 801385a:	4603      	mov	r3, r0
 801385c:	2b00      	cmp	r3, #0
 801385e:	d002      	beq.n	8013866 <ethernetif_input+0x4a>
          {
            pbuf_free(p);           
 8013860:	68b8      	ldr	r0, [r7, #8]
 8013862:	f7f6 fe25 	bl	800a4b0 <pbuf_free>
          }
        }
        
        UNLOCK_TCPIP_CORE();
 8013866:	4804      	ldr	r0, [pc, #16]	; (8013878 <ethernetif_input+0x5c>)
 8013868:	f7ff fbeb 	bl	8013042 <sys_mutex_unlock>
        
      } while(p!=NULL);
 801386c:	68bb      	ldr	r3, [r7, #8]
 801386e:	2b00      	cmp	r3, #0
 8013870:	d1e4      	bne.n	801383c <ethernetif_input+0x20>
    if (osSemaphoreWait(RxPktSemaphore, TIME_WAITING_FOR_INPUT) == osOK)
 8013872:	e7d9      	b.n	8013828 <ethernetif_input+0xc>
 8013874:	24008748 	.word	0x24008748
 8013878:	240087a8 	.word	0x240087a8

0801387c <ethernetif_init>:
 * @return ERR_OK if the loopif is initialized
 *         ERR_MEM if private data couldn't be allocated
 *         any other err_t on error
 */
err_t ethernetif_init(struct netif *netif)
{
 801387c:	b580      	push	{r7, lr}
 801387e:	b082      	sub	sp, #8
 8013880:	af00      	add	r7, sp, #0
 8013882:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("netif != NULL", (netif != NULL));
 8013884:	687b      	ldr	r3, [r7, #4]
 8013886:	2b00      	cmp	r3, #0
 8013888:	d106      	bne.n	8013898 <ethernetif_init+0x1c>
 801388a:	4b0e      	ldr	r3, [pc, #56]	; (80138c4 <ethernetif_init+0x48>)
 801388c:	f44f 7213 	mov.w	r2, #588	; 0x24c
 8013890:	490d      	ldr	r1, [pc, #52]	; (80138c8 <ethernetif_init+0x4c>)
 8013892:	480e      	ldr	r0, [pc, #56]	; (80138cc <ethernetif_init+0x50>)
 8013894:	f002 f99e 	bl	8015bd4 <printf_>
#if LWIP_NETIF_HOSTNAME
  /* Initialize interface hostname */
  netif->hostname = "lwip";
#endif /* LWIP_NETIF_HOSTNAME */

  netif->name[0] = IFNAME0;
 8013898:	687b      	ldr	r3, [r7, #4]
 801389a:	2273      	movs	r2, #115	; 0x73
 801389c:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  netif->name[1] = IFNAME1;
 80138a0:	687b      	ldr	r3, [r7, #4]
 80138a2:	2274      	movs	r2, #116	; 0x74
 80138a4:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
   * is available...) */

#if LWIP_IPV4
#if LWIP_ARP || LWIP_ETHERNET
#if LWIP_ARP
  netif->output = etharp_output;
 80138a8:	687b      	ldr	r3, [r7, #4]
 80138aa:	4a09      	ldr	r2, [pc, #36]	; (80138d0 <ethernetif_init+0x54>)
 80138ac:	615a      	str	r2, [r3, #20]
 
#if LWIP_IPV6
  netif->output_ip6 = ethip6_output;
#endif /* LWIP_IPV6 */

  netif->linkoutput = low_level_output;
 80138ae:	687b      	ldr	r3, [r7, #4]
 80138b0:	4a08      	ldr	r2, [pc, #32]	; (80138d4 <ethernetif_init+0x58>)
 80138b2:	619a      	str	r2, [r3, #24]

  /* initialize the hardware */
  low_level_init(netif);
 80138b4:	6878      	ldr	r0, [r7, #4]
 80138b6:	f7ff fd65 	bl	8013384 <low_level_init>

  return ERR_OK;
 80138ba:	2300      	movs	r3, #0
}
 80138bc:	4618      	mov	r0, r3
 80138be:	3708      	adds	r7, #8
 80138c0:	46bd      	mov	sp, r7
 80138c2:	bd80      	pop	{r7, pc}
 80138c4:	0801bedc 	.word	0x0801bedc
 80138c8:	0801bef0 	.word	0x0801bef0
 80138cc:	0801bf00 	.word	0x0801bf00
 80138d0:	080110f9 	.word	0x080110f9
 80138d4:	0801366d 	.word	0x0801366d

080138d8 <pbuf_free_custom>:
  * @brief  Custom Rx pbuf free callback
  * @param  pbuf: pbuf to be freed
  * @retval None
  */
void pbuf_free_custom(struct pbuf *p)
{
 80138d8:	b580      	push	{r7, lr}
 80138da:	b084      	sub	sp, #16
 80138dc:	af00      	add	r7, sp, #0
 80138de:	6078      	str	r0, [r7, #4]
  struct pbuf_custom* custom_pbuf = (struct pbuf_custom*)p;
 80138e0:	687b      	ldr	r3, [r7, #4]
 80138e2:	60fb      	str	r3, [r7, #12]
  
#if !defined(DUAL_CORE) || defined(CORE_CM7)
  /* Invalidate data cache: lwIP and/or application may have written into buffer */
  SCB_InvalidateDCache_by_Addr((uint32_t *)p->payload, p->tot_len);
 80138e4:	687b      	ldr	r3, [r7, #4]
 80138e6:	685a      	ldr	r2, [r3, #4]
 80138e8:	687b      	ldr	r3, [r7, #4]
 80138ea:	891b      	ldrh	r3, [r3, #8]
 80138ec:	4619      	mov	r1, r3
 80138ee:	4610      	mov	r0, r2
 80138f0:	f7ff fc28 	bl	8013144 <SCB_InvalidateDCache_by_Addr>
#endif
  
  LWIP_MEMPOOL_FREE(RX_POOL, custom_pbuf);
 80138f4:	68f9      	ldr	r1, [r7, #12]
 80138f6:	4803      	ldr	r0, [pc, #12]	; (8013904 <pbuf_free_custom+0x2c>)
 80138f8:	f7f6 f80c 	bl	8009914 <memp_free_pool>
}
 80138fc:	bf00      	nop
 80138fe:	3710      	adds	r7, #16
 8013900:	46bd      	mov	sp, r7
 8013902:	bd80      	pop	{r7, pc}
 8013904:	0801c178 	.word	0x0801c178

08013908 <sys_now>:
*         when LWIP_TIMERS == 1 and NO_SYS == 1
* @param  None
* @retval Current Time value
*/
u32_t sys_now(void)
{
 8013908:	b580      	push	{r7, lr}
 801390a:	af00      	add	r7, sp, #0
  return HAL_GetTick();
 801390c:	f7ed f8e0 	bl	8000ad0 <HAL_GetTick>
 8013910:	4603      	mov	r3, r0
}
 8013912:	4618      	mov	r0, r3
 8013914:	bd80      	pop	{r7, pc}
	...

08013918 <ETH_PHY_IO_Init>:
  * @brief  Initializes the MDIO interface GPIO and clocks.
  * @param  None
  * @retval 0 if OK, -1 if ERROR
  */
int32_t ETH_PHY_IO_Init(void)
{  
 8013918:	b580      	push	{r7, lr}
 801391a:	af00      	add	r7, sp, #0
  /* We assume that MDIO GPIO configuration is already done
     in the ETH_MspInit() else it should be done here 
  */
  
  /* Configure the MDIO Clock */
  HAL_ETH_SetMDIOClockRange(&heth);
 801391c:	4802      	ldr	r0, [pc, #8]	; (8013928 <ETH_PHY_IO_Init+0x10>)
 801391e:	f7ee fac9 	bl	8001eb4 <HAL_ETH_SetMDIOClockRange>
  
  return 0;
 8013922:	2300      	movs	r3, #0
}
 8013924:	4618      	mov	r0, r3
 8013926:	bd80      	pop	{r7, pc}
 8013928:	2400f4c0 	.word	0x2400f4c0

0801392c <ETH_PHY_IO_DeInit>:
  * @brief  De-Initializes the MDIO interface .
  * @param  None
  * @retval 0 if OK, -1 if ERROR
  */
int32_t ETH_PHY_IO_DeInit (void)
{
 801392c:	b480      	push	{r7}
 801392e:	af00      	add	r7, sp, #0
  return 0;
 8013930:	2300      	movs	r3, #0
}
 8013932:	4618      	mov	r0, r3
 8013934:	46bd      	mov	sp, r7
 8013936:	f85d 7b04 	ldr.w	r7, [sp], #4
 801393a:	4770      	bx	lr

0801393c <ETH_PHY_IO_ReadReg>:
  * @param  RegAddr: PHY register address
  * @param  pRegVal: pointer to hold the register value 
  * @retval 0 if OK -1 if Error
  */
int32_t ETH_PHY_IO_ReadReg(uint32_t DevAddr, uint32_t RegAddr, uint32_t *pRegVal)
{
 801393c:	b580      	push	{r7, lr}
 801393e:	b084      	sub	sp, #16
 8013940:	af00      	add	r7, sp, #0
 8013942:	60f8      	str	r0, [r7, #12]
 8013944:	60b9      	str	r1, [r7, #8]
 8013946:	607a      	str	r2, [r7, #4]
  if(HAL_ETH_ReadPHYRegister(&heth, DevAddr, RegAddr, pRegVal) != HAL_OK)
 8013948:	687b      	ldr	r3, [r7, #4]
 801394a:	68ba      	ldr	r2, [r7, #8]
 801394c:	68f9      	ldr	r1, [r7, #12]
 801394e:	4807      	ldr	r0, [pc, #28]	; (801396c <ETH_PHY_IO_ReadReg+0x30>)
 8013950:	f7ee f81a 	bl	8001988 <HAL_ETH_ReadPHYRegister>
 8013954:	4603      	mov	r3, r0
 8013956:	2b00      	cmp	r3, #0
 8013958:	d002      	beq.n	8013960 <ETH_PHY_IO_ReadReg+0x24>
  {
    return -1;
 801395a:	f04f 33ff 	mov.w	r3, #4294967295
 801395e:	e000      	b.n	8013962 <ETH_PHY_IO_ReadReg+0x26>
  }
  
  return 0;
 8013960:	2300      	movs	r3, #0
}
 8013962:	4618      	mov	r0, r3
 8013964:	3710      	adds	r7, #16
 8013966:	46bd      	mov	sp, r7
 8013968:	bd80      	pop	{r7, pc}
 801396a:	bf00      	nop
 801396c:	2400f4c0 	.word	0x2400f4c0

08013970 <ETH_PHY_IO_WriteReg>:
  * @param  RegAddr: PHY register address
  * @param  RegVal: Value to be written 
  * @retval 0 if OK -1 if Error
  */
int32_t ETH_PHY_IO_WriteReg(uint32_t DevAddr, uint32_t RegAddr, uint32_t RegVal)
{
 8013970:	b580      	push	{r7, lr}
 8013972:	b084      	sub	sp, #16
 8013974:	af00      	add	r7, sp, #0
 8013976:	60f8      	str	r0, [r7, #12]
 8013978:	60b9      	str	r1, [r7, #8]
 801397a:	607a      	str	r2, [r7, #4]
  if(HAL_ETH_WritePHYRegister(&heth, DevAddr, RegAddr, RegVal) != HAL_OK)
 801397c:	687b      	ldr	r3, [r7, #4]
 801397e:	68ba      	ldr	r2, [r7, #8]
 8013980:	68f9      	ldr	r1, [r7, #12]
 8013982:	4807      	ldr	r0, [pc, #28]	; (80139a0 <ETH_PHY_IO_WriteReg+0x30>)
 8013984:	f7ee f854 	bl	8001a30 <HAL_ETH_WritePHYRegister>
 8013988:	4603      	mov	r3, r0
 801398a:	2b00      	cmp	r3, #0
 801398c:	d002      	beq.n	8013994 <ETH_PHY_IO_WriteReg+0x24>
  {
    return -1;
 801398e:	f04f 33ff 	mov.w	r3, #4294967295
 8013992:	e000      	b.n	8013996 <ETH_PHY_IO_WriteReg+0x26>
  }
  
  return 0;
 8013994:	2300      	movs	r3, #0
}
 8013996:	4618      	mov	r0, r3
 8013998:	3710      	adds	r7, #16
 801399a:	46bd      	mov	sp, r7
 801399c:	bd80      	pop	{r7, pc}
 801399e:	bf00      	nop
 80139a0:	2400f4c0 	.word	0x2400f4c0

080139a4 <ETH_PHY_IO_GetTick>:
/**
  * @brief  Get the time in millisecons used for internal PHY driver process.
  * @retval Time value
  */
int32_t ETH_PHY_IO_GetTick(void)
{
 80139a4:	b580      	push	{r7, lr}
 80139a6:	af00      	add	r7, sp, #0
  return HAL_GetTick();
 80139a8:	f7ed f892 	bl	8000ad0 <HAL_GetTick>
 80139ac:	4603      	mov	r3, r0
}
 80139ae:	4618      	mov	r0, r3
 80139b0:	bd80      	pop	{r7, pc}
	...

080139b4 <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 80139b4:	b5b0      	push	{r4, r5, r7, lr}
 80139b6:	b086      	sub	sp, #24
 80139b8:	af00      	add	r7, sp, #0
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of defaultTask */
  osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 512);
 80139ba:	4b09      	ldr	r3, [pc, #36]	; (80139e0 <MX_FREERTOS_Init+0x2c>)
 80139bc:	1d3c      	adds	r4, r7, #4
 80139be:	461d      	mov	r5, r3
 80139c0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80139c2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80139c4:	682b      	ldr	r3, [r5, #0]
 80139c6:	6023      	str	r3, [r4, #0]
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 80139c8:	1d3b      	adds	r3, r7, #4
 80139ca:	2100      	movs	r1, #0
 80139cc:	4618      	mov	r0, r3
 80139ce:	f7f0 f9a2 	bl	8003d16 <osThreadCreate>
 80139d2:	4602      	mov	r2, r0
 80139d4:	4b03      	ldr	r3, [pc, #12]	; (80139e4 <MX_FREERTOS_Init+0x30>)
 80139d6:	601a      	str	r2, [r3, #0]

  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

}
 80139d8:	bf00      	nop
 80139da:	3718      	adds	r7, #24
 80139dc:	46bd      	mov	sp, r7
 80139de:	bdb0      	pop	{r4, r5, r7, pc}
 80139e0:	0801bf34 	.word	0x0801bf34
 80139e4:	2400f564 	.word	0x2400f564

080139e8 <StartDefaultTask>:
  * @param  argument: Not used 
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const * argument)
{
 80139e8:	b580      	push	{r7, lr}
 80139ea:	b082      	sub	sp, #8
 80139ec:	af00      	add	r7, sp, #0
 80139ee:	6078      	str	r0, [r7, #4]
    
                 
  /* init code for LWIP */
  MX_LWIP_Init();
 80139f0:	f000 f996 	bl	8013d20 <MX_LWIP_Init>
//  client_netconn_init();
//  tcpecho_init();
//  udpecho_init();
//  client_socket_init();
//  iperf_server_init();
  iperf_socket_client_init();
 80139f4:	f000 f980 	bl	8013cf8 <iperf_socket_client_init>

  /* USER CODE BEGIN StartDefaultTask */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 80139f8:	2001      	movs	r0, #1
 80139fa:	f7f0 f9b3 	bl	8003d64 <osDelay>
 80139fe:	e7fb      	b.n	80139f8 <StartDefaultTask+0x10>

08013a00 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8013a00:	b580      	push	{r7, lr}
 8013a02:	b08c      	sub	sp, #48	; 0x30
 8013a04:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8013a06:	f107 031c 	add.w	r3, r7, #28
 8013a0a:	2200      	movs	r2, #0
 8013a0c:	601a      	str	r2, [r3, #0]
 8013a0e:	605a      	str	r2, [r3, #4]
 8013a10:	609a      	str	r2, [r3, #8]
 8013a12:	60da      	str	r2, [r3, #12]
 8013a14:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8013a16:	4b38      	ldr	r3, [pc, #224]	; (8013af8 <MX_GPIO_Init+0xf8>)
 8013a18:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8013a1c:	4a36      	ldr	r2, [pc, #216]	; (8013af8 <MX_GPIO_Init+0xf8>)
 8013a1e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8013a22:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8013a26:	4b34      	ldr	r3, [pc, #208]	; (8013af8 <MX_GPIO_Init+0xf8>)
 8013a28:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8013a2c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8013a30:	61bb      	str	r3, [r7, #24]
 8013a32:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8013a34:	4b30      	ldr	r3, [pc, #192]	; (8013af8 <MX_GPIO_Init+0xf8>)
 8013a36:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8013a3a:	4a2f      	ldr	r2, [pc, #188]	; (8013af8 <MX_GPIO_Init+0xf8>)
 8013a3c:	f043 0302 	orr.w	r3, r3, #2
 8013a40:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8013a44:	4b2c      	ldr	r3, [pc, #176]	; (8013af8 <MX_GPIO_Init+0xf8>)
 8013a46:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8013a4a:	f003 0302 	and.w	r3, r3, #2
 8013a4e:	617b      	str	r3, [r7, #20]
 8013a50:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8013a52:	4b29      	ldr	r3, [pc, #164]	; (8013af8 <MX_GPIO_Init+0xf8>)
 8013a54:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8013a58:	4a27      	ldr	r2, [pc, #156]	; (8013af8 <MX_GPIO_Init+0xf8>)
 8013a5a:	f043 0301 	orr.w	r3, r3, #1
 8013a5e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8013a62:	4b25      	ldr	r3, [pc, #148]	; (8013af8 <MX_GPIO_Init+0xf8>)
 8013a64:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8013a68:	f003 0301 	and.w	r3, r3, #1
 8013a6c:	613b      	str	r3, [r7, #16]
 8013a6e:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8013a70:	4b21      	ldr	r3, [pc, #132]	; (8013af8 <MX_GPIO_Init+0xf8>)
 8013a72:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8013a76:	4a20      	ldr	r2, [pc, #128]	; (8013af8 <MX_GPIO_Init+0xf8>)
 8013a78:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8013a7c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8013a80:	4b1d      	ldr	r3, [pc, #116]	; (8013af8 <MX_GPIO_Init+0xf8>)
 8013a82:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8013a86:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8013a8a:	60fb      	str	r3, [r7, #12]
 8013a8c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8013a8e:	4b1a      	ldr	r3, [pc, #104]	; (8013af8 <MX_GPIO_Init+0xf8>)
 8013a90:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8013a94:	4a18      	ldr	r2, [pc, #96]	; (8013af8 <MX_GPIO_Init+0xf8>)
 8013a96:	f043 0304 	orr.w	r3, r3, #4
 8013a9a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8013a9e:	4b16      	ldr	r3, [pc, #88]	; (8013af8 <MX_GPIO_Init+0xf8>)
 8013aa0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8013aa4:	f003 0304 	and.w	r3, r3, #4
 8013aa8:	60bb      	str	r3, [r7, #8]
 8013aaa:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOI_CLK_ENABLE();
 8013aac:	4b12      	ldr	r3, [pc, #72]	; (8013af8 <MX_GPIO_Init+0xf8>)
 8013aae:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8013ab2:	4a11      	ldr	r2, [pc, #68]	; (8013af8 <MX_GPIO_Init+0xf8>)
 8013ab4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8013ab8:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8013abc:	4b0e      	ldr	r3, [pc, #56]	; (8013af8 <MX_GPIO_Init+0xf8>)
 8013abe:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8013ac2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8013ac6:	607b      	str	r3, [r7, #4]
 8013ac8:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOI, LED1_Pin|LED0_Pin, GPIO_PIN_SET);
 8013aca:	2201      	movs	r2, #1
 8013acc:	2103      	movs	r1, #3
 8013ace:	480b      	ldr	r0, [pc, #44]	; (8013afc <MX_GPIO_Init+0xfc>)
 8013ad0:	f7ef f988 	bl	8002de4 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PBPin PBPin */
  GPIO_InitStruct.Pin = LED1_Pin|LED0_Pin;
 8013ad4:	2303      	movs	r3, #3
 8013ad6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8013ad8:	2301      	movs	r3, #1
 8013ada:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8013adc:	2300      	movs	r3, #0
 8013ade:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8013ae0:	2300      	movs	r3, #0
 8013ae2:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 8013ae4:	f107 031c 	add.w	r3, r7, #28
 8013ae8:	4619      	mov	r1, r3
 8013aea:	4804      	ldr	r0, [pc, #16]	; (8013afc <MX_GPIO_Init+0xfc>)
 8013aec:	f7ee ffca 	bl	8002a84 <HAL_GPIO_Init>

}
 8013af0:	bf00      	nop
 8013af2:	3730      	adds	r7, #48	; 0x30
 8013af4:	46bd      	mov	sp, r7
 8013af6:	bd80      	pop	{r7, pc}
 8013af8:	58024400 	.word	0x58024400
 8013afc:	58022000 	.word	0x58022000

08013b00 <iperf_client>:
#include <lwip/sockets.h>

#define IPERF_BUFSZ         (4 * 1024)

static void iperf_client(void *thread_param)
{
 8013b00:	b5f0      	push	{r4, r5, r6, r7, lr}
 8013b02:	b093      	sub	sp, #76	; 0x4c
 8013b04:	af02      	add	r7, sp, #8
 8013b06:	6078      	str	r0, [r7, #4]
  int sock = -1,i;
 8013b08:	f04f 33ff 	mov.w	r3, #4294967295
 8013b0c:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint8_t* send_buf;
  u32_t tick1, tick2;
  uint64_t sentlen;
  ip4_addr_t ipaddr;
  
  printf("Destination ip:%d.%d.%d.%d Port:%d\n\n",      \
 8013b0e:	f241 3389 	movw	r3, #5001	; 0x1389
 8013b12:	9301      	str	r3, [sp, #4]
 8013b14:	231f      	movs	r3, #31
 8013b16:	9300      	str	r3, [sp, #0]
 8013b18:	2365      	movs	r3, #101	; 0x65
 8013b1a:	22a8      	movs	r2, #168	; 0xa8
 8013b1c:	21c0      	movs	r1, #192	; 0xc0
 8013b1e:	486f      	ldr	r0, [pc, #444]	; (8013cdc <iperf_client+0x1dc>)
 8013b20:	f002 f858 	bl	8015bd4 <printf_>
          DEST_IP_ADDR0,DEST_IP_ADDR1,DEST_IP_ADDR2,DEST_IP_ADDR3,DEST_PORT);
  
  printf("Set Pc as a iperf TCP Server\n\n");
 8013b24:	486e      	ldr	r0, [pc, #440]	; (8013ce0 <iperf_client+0x1e0>)
 8013b26:	f002 f855 	bl	8015bd4 <printf_>
  
  send_buf = (uint8_t *) pvPortMalloc(IPERF_BUFSZ);
 8013b2a:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 8013b2e:	f7f2 fcef 	bl	8006510 <pvPortMalloc>
 8013b32:	62b8      	str	r0, [r7, #40]	; 0x28
    
  IP4_ADDR(&ipaddr,DEST_IP_ADDR0,DEST_IP_ADDR1,DEST_IP_ADDR2,DEST_IP_ADDR3);
 8013b34:	4b6b      	ldr	r3, [pc, #428]	; (8013ce4 <iperf_client+0x1e4>)
 8013b36:	60fb      	str	r3, [r7, #12]
    
  if (!send_buf) 
 8013b38:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013b3a:	2b00      	cmp	r3, #0
 8013b3c:	f000 80c9 	beq.w	8013cd2 <iperf_client+0x1d2>
    return ;
  
  for(i = 0; i < IPERF_BUFSZ; i ++)
 8013b40:	2300      	movs	r3, #0
 8013b42:	63fb      	str	r3, [r7, #60]	; 0x3c
 8013b44:	e008      	b.n	8013b58 <iperf_client+0x58>
    send_buf[i] = i & 0xff;
 8013b46:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8013b48:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8013b4a:	4413      	add	r3, r2
 8013b4c:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8013b4e:	b2d2      	uxtb	r2, r2
 8013b50:	701a      	strb	r2, [r3, #0]
  for(i = 0; i < IPERF_BUFSZ; i ++)
 8013b52:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8013b54:	3301      	adds	r3, #1
 8013b56:	63fb      	str	r3, [r7, #60]	; 0x3c
 8013b58:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8013b5a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8013b5e:	dbf2      	blt.n	8013b46 <iperf_client+0x46>
  
  while(1)
  {
    sock = socket(AF_INET, SOCK_STREAM, 0);
 8013b60:	2200      	movs	r2, #0
 8013b62:	2101      	movs	r1, #1
 8013b64:	2002      	movs	r0, #2
 8013b66:	f7f4 ff8f 	bl	8008a88 <lwip_socket>
 8013b6a:	62f8      	str	r0, [r7, #44]	; 0x2c
    if (sock < 0)
 8013b6c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013b6e:	2b00      	cmp	r3, #0
 8013b70:	da06      	bge.n	8013b80 <iperf_client+0x80>
    {
      printf("Socket error\n");
 8013b72:	485d      	ldr	r0, [pc, #372]	; (8013ce8 <iperf_client+0x1e8>)
 8013b74:	f002 f82e 	bl	8015bd4 <printf_>
      vTaskDelay(10);
 8013b78:	200a      	movs	r0, #10
 8013b7a:	f7f1 fc2d 	bl	80053d8 <vTaskDelay>
      continue;
 8013b7e:	e0a7      	b.n	8013cd0 <iperf_client+0x1d0>
    } 

    client_addr.sin_family = AF_INET;      
 8013b80:	2302      	movs	r3, #2
 8013b82:	747b      	strb	r3, [r7, #17]
    client_addr.sin_port = htons(DEST_PORT);   
 8013b84:	f241 3089 	movw	r0, #5001	; 0x1389
 8013b88:	f7f5 fa66 	bl	8009058 <lwip_htons>
 8013b8c:	4603      	mov	r3, r0
 8013b8e:	827b      	strh	r3, [r7, #18]
    client_addr.sin_addr.s_addr = ipaddr.addr;
 8013b90:	68fb      	ldr	r3, [r7, #12]
 8013b92:	617b      	str	r3, [r7, #20]
    memset(&(client_addr.sin_zero), 0, sizeof(client_addr.sin_zero));    
 8013b94:	f107 0310 	add.w	r3, r7, #16
 8013b98:	3308      	adds	r3, #8
 8013b9a:	2208      	movs	r2, #8
 8013b9c:	2100      	movs	r1, #0
 8013b9e:	4618      	mov	r0, r3
 8013ba0:	f002 f894 	bl	8015ccc <memset>

    if (connect(sock, 
 8013ba4:	f107 0310 	add.w	r3, r7, #16
 8013ba8:	2210      	movs	r2, #16
 8013baa:	4619      	mov	r1, r3
 8013bac:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8013bae:	f7f4 fdc7 	bl	8008740 <lwip_connect>
 8013bb2:	4603      	mov	r3, r0
 8013bb4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8013bb8:	d106      	bne.n	8013bc8 <iperf_client+0xc8>
               (struct sockaddr *)&client_addr, 
                sizeof(struct sockaddr)) == -1) 
    {
//        printf("Connect failed!\n");
        closesocket(sock);
 8013bba:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8013bbc:	f7f4 fd66 	bl	800868c <lwip_close>
        vTaskDelay(10);
 8013bc0:	200a      	movs	r0, #10
 8013bc2:	f7f1 fc09 	bl	80053d8 <vTaskDelay>
        continue;
 8013bc6:	e083      	b.n	8013cd0 <iperf_client+0x1d0>
    }                                           
    
    printf("Connect to iperf server successful!\n");
 8013bc8:	4848      	ldr	r0, [pc, #288]	; (8013cec <iperf_client+0x1ec>)
 8013bca:	f002 f803 	bl	8015bd4 <printf_>
    tick1 = sys_now();
 8013bce:	f7ff fe9b 	bl	8013908 <sys_now>
 8013bd2:	63b8      	str	r0, [r7, #56]	; 0x38
    while (1)
    {
      tick2 = sys_now();
 8013bd4:	f7ff fe98 	bl	8013908 <sys_now>
 8013bd8:	6278      	str	r0, [r7, #36]	; 0x24
      if(tick2 - tick1 >= configTICK_RATE_HZ * 5)
 8013bda:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8013bdc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013bde:	1ad3      	subs	r3, r2, r3
 8013be0:	f241 3287 	movw	r2, #4999	; 0x1387
 8013be4:	4293      	cmp	r3, r2
 8013be6:	d95d      	bls.n	8013ca4 <iperf_client+0x1a4>
      {     
        float f;
        f = (float)(sentlen*configTICK_RATE_HZ/125/(tick2 - tick1));
 8013be8:	e9d7 560c 	ldrd	r5, r6, [r7, #48]	; 0x30
 8013bec:	462b      	mov	r3, r5
 8013bee:	4634      	mov	r4, r6
 8013bf0:	f04f 0100 	mov.w	r1, #0
 8013bf4:	f04f 0200 	mov.w	r2, #0
 8013bf8:	0162      	lsls	r2, r4, #5
 8013bfa:	ea42 62d3 	orr.w	r2, r2, r3, lsr #27
 8013bfe:	0159      	lsls	r1, r3, #5
 8013c00:	460b      	mov	r3, r1
 8013c02:	4614      	mov	r4, r2
 8013c04:	1b5b      	subs	r3, r3, r5
 8013c06:	eb64 0406 	sbc.w	r4, r4, r6
 8013c0a:	f04f 0100 	mov.w	r1, #0
 8013c0e:	f04f 0200 	mov.w	r2, #0
 8013c12:	00a2      	lsls	r2, r4, #2
 8013c14:	ea42 7293 	orr.w	r2, r2, r3, lsr #30
 8013c18:	0099      	lsls	r1, r3, #2
 8013c1a:	460b      	mov	r3, r1
 8013c1c:	4614      	mov	r4, r2
 8013c1e:	195b      	adds	r3, r3, r5
 8013c20:	eb44 0406 	adc.w	r4, r4, r6
 8013c24:	f04f 0100 	mov.w	r1, #0
 8013c28:	f04f 0200 	mov.w	r2, #0
 8013c2c:	00e2      	lsls	r2, r4, #3
 8013c2e:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8013c32:	00d9      	lsls	r1, r3, #3
 8013c34:	460b      	mov	r3, r1
 8013c36:	4614      	mov	r4, r2
 8013c38:	4618      	mov	r0, r3
 8013c3a:	4621      	mov	r1, r4
 8013c3c:	f04f 027d 	mov.w	r2, #125	; 0x7d
 8013c40:	f04f 0300 	mov.w	r3, #0
 8013c44:	f7ec fcb2 	bl	80005ac <__aeabi_uldivmod>
 8013c48:	4603      	mov	r3, r0
 8013c4a:	460c      	mov	r4, r1
 8013c4c:	4618      	mov	r0, r3
 8013c4e:	4621      	mov	r1, r4
 8013c50:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8013c52:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013c54:	1ad3      	subs	r3, r2, r3
 8013c56:	f04f 0400 	mov.w	r4, #0
 8013c5a:	461a      	mov	r2, r3
 8013c5c:	4623      	mov	r3, r4
 8013c5e:	f7ec fca5 	bl	80005ac <__aeabi_uldivmod>
 8013c62:	4603      	mov	r3, r0
 8013c64:	460c      	mov	r4, r1
 8013c66:	4618      	mov	r0, r3
 8013c68:	4621      	mov	r1, r4
 8013c6a:	f7ec fc59 	bl	8000520 <__aeabi_ul2f>
 8013c6e:	4603      	mov	r3, r0
 8013c70:	623b      	str	r3, [r7, #32]
        f /= 1000.0f;
 8013c72:	ed97 7a08 	vldr	s14, [r7, #32]
 8013c76:	eddf 6a1e 	vldr	s13, [pc, #120]	; 8013cf0 <iperf_client+0x1f0>
 8013c7a:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8013c7e:	edc7 7a08 	vstr	s15, [r7, #32]
        printf("send speed = %.4f Mbps!\n", f);
 8013c82:	edd7 7a08 	vldr	s15, [r7, #32]
 8013c86:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8013c8a:	ec53 2b17 	vmov	r2, r3, d7
 8013c8e:	4819      	ldr	r0, [pc, #100]	; (8013cf4 <iperf_client+0x1f4>)
 8013c90:	f001 ffa0 	bl	8015bd4 <printf_>
        
        tick1 = tick2;
 8013c94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013c96:	63bb      	str	r3, [r7, #56]	; 0x38
        sentlen = 0;
 8013c98:	f04f 0300 	mov.w	r3, #0
 8013c9c:	f04f 0400 	mov.w	r4, #0
 8013ca0:	e9c7 340c 	strd	r3, r4, [r7, #48]	; 0x30
      }  
      
      if(write(sock,send_buf,IPERF_BUFSZ) < 0)
 8013ca4:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8013ca8:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8013caa:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8013cac:	f7f4 ff44 	bl	8008b38 <lwip_write>
 8013cb0:	4603      	mov	r3, r0
 8013cb2:	2b00      	cmp	r3, #0
 8013cb4:	db08      	blt.n	8013cc8 <iperf_client+0x1c8>
        break;
      else
      {
        sentlen += IPERF_BUFSZ;
 8013cb6:	e9d7 340c 	ldrd	r3, r4, [r7, #48]	; 0x30
 8013cba:	f513 5180 	adds.w	r1, r3, #4096	; 0x1000
 8013cbe:	f144 0200 	adc.w	r2, r4, #0
 8013cc2:	e9c7 120c 	strd	r1, r2, [r7, #48]	; 0x30
      tick2 = sys_now();
 8013cc6:	e785      	b.n	8013bd4 <iperf_client+0xd4>
        break;
 8013cc8:	bf00      	nop
      }
    }
    closesocket(sock);
 8013cca:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8013ccc:	f7f4 fcde 	bl	800868c <lwip_close>
  {
 8013cd0:	e746      	b.n	8013b60 <iperf_client+0x60>
    return ;
 8013cd2:	bf00      	nop
  }

}
 8013cd4:	3744      	adds	r7, #68	; 0x44
 8013cd6:	46bd      	mov	sp, r7
 8013cd8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8013cda:	bf00      	nop
 8013cdc:	0801bf48 	.word	0x0801bf48
 8013ce0:	0801bf70 	.word	0x0801bf70
 8013ce4:	1f65a8c0 	.word	0x1f65a8c0
 8013ce8:	0801bf90 	.word	0x0801bf90
 8013cec:	0801bfa0 	.word	0x0801bfa0
 8013cf0:	447a0000 	.word	0x447a0000
 8013cf4:	0801bfc8 	.word	0x0801bfc8

08013cf8 <iperf_socket_client_init>:



void
iperf_socket_client_init(void)
{
 8013cf8:	b580      	push	{r7, lr}
 8013cfa:	b082      	sub	sp, #8
 8013cfc:	af02      	add	r7, sp, #8
  sys_thread_new("iperf_client", iperf_client, NULL, 2048, 8);
 8013cfe:	2308      	movs	r3, #8
 8013d00:	9300      	str	r3, [sp, #0]
 8013d02:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8013d06:	2200      	movs	r2, #0
 8013d08:	4903      	ldr	r1, [pc, #12]	; (8013d18 <iperf_socket_client_init+0x20>)
 8013d0a:	4804      	ldr	r0, [pc, #16]	; (8013d1c <iperf_socket_client_init+0x24>)
 8013d0c:	f7ff f9a6 	bl	801305c <sys_thread_new>
}
 8013d10:	bf00      	nop
 8013d12:	46bd      	mov	sp, r7
 8013d14:	bd80      	pop	{r7, pc}
 8013d16:	bf00      	nop
 8013d18:	08013b01 	.word	0x08013b01
 8013d1c:	0801bfe4 	.word	0x0801bfe4

08013d20 <MX_LWIP_Init>:

/**
  * LwIP initialization function
  */
void MX_LWIP_Init(void)
{
 8013d20:	b580      	push	{r7, lr}
 8013d22:	b084      	sub	sp, #16
 8013d24:	af04      	add	r7, sp, #16
  /* IP addresses initialization */
  IP_ADDRESS[0] = 192;
 8013d26:	4b8c      	ldr	r3, [pc, #560]	; (8013f58 <MX_LWIP_Init+0x238>)
 8013d28:	22c0      	movs	r2, #192	; 0xc0
 8013d2a:	701a      	strb	r2, [r3, #0]
  IP_ADDRESS[1] = 168;
 8013d2c:	4b8a      	ldr	r3, [pc, #552]	; (8013f58 <MX_LWIP_Init+0x238>)
 8013d2e:	22a8      	movs	r2, #168	; 0xa8
 8013d30:	705a      	strb	r2, [r3, #1]
  IP_ADDRESS[2] = 101;
 8013d32:	4b89      	ldr	r3, [pc, #548]	; (8013f58 <MX_LWIP_Init+0x238>)
 8013d34:	2265      	movs	r2, #101	; 0x65
 8013d36:	709a      	strb	r2, [r3, #2]
  IP_ADDRESS[3] = 140;
 8013d38:	4b87      	ldr	r3, [pc, #540]	; (8013f58 <MX_LWIP_Init+0x238>)
 8013d3a:	228c      	movs	r2, #140	; 0x8c
 8013d3c:	70da      	strb	r2, [r3, #3]
  NETMASK_ADDRESS[0] = 255;
 8013d3e:	4b87      	ldr	r3, [pc, #540]	; (8013f5c <MX_LWIP_Init+0x23c>)
 8013d40:	22ff      	movs	r2, #255	; 0xff
 8013d42:	701a      	strb	r2, [r3, #0]
  NETMASK_ADDRESS[1] = 255;
 8013d44:	4b85      	ldr	r3, [pc, #532]	; (8013f5c <MX_LWIP_Init+0x23c>)
 8013d46:	22ff      	movs	r2, #255	; 0xff
 8013d48:	705a      	strb	r2, [r3, #1]
  NETMASK_ADDRESS[2] = 255;
 8013d4a:	4b84      	ldr	r3, [pc, #528]	; (8013f5c <MX_LWIP_Init+0x23c>)
 8013d4c:	22ff      	movs	r2, #255	; 0xff
 8013d4e:	709a      	strb	r2, [r3, #2]
  NETMASK_ADDRESS[3] = 0;
 8013d50:	4b82      	ldr	r3, [pc, #520]	; (8013f5c <MX_LWIP_Init+0x23c>)
 8013d52:	2200      	movs	r2, #0
 8013d54:	70da      	strb	r2, [r3, #3]
  GATEWAY_ADDRESS[0] = 192;
 8013d56:	4b82      	ldr	r3, [pc, #520]	; (8013f60 <MX_LWIP_Init+0x240>)
 8013d58:	22c0      	movs	r2, #192	; 0xc0
 8013d5a:	701a      	strb	r2, [r3, #0]
  GATEWAY_ADDRESS[1] = 168;
 8013d5c:	4b80      	ldr	r3, [pc, #512]	; (8013f60 <MX_LWIP_Init+0x240>)
 8013d5e:	22a8      	movs	r2, #168	; 0xa8
 8013d60:	705a      	strb	r2, [r3, #1]
  GATEWAY_ADDRESS[2] = 1;
 8013d62:	4b7f      	ldr	r3, [pc, #508]	; (8013f60 <MX_LWIP_Init+0x240>)
 8013d64:	2201      	movs	r2, #1
 8013d66:	709a      	strb	r2, [r3, #2]
  GATEWAY_ADDRESS[3] = 0;
 8013d68:	4b7d      	ldr	r3, [pc, #500]	; (8013f60 <MX_LWIP_Init+0x240>)
 8013d6a:	2200      	movs	r2, #0
 8013d6c:	70da      	strb	r2, [r3, #3]
  
  /* Initilialize the LwIP stack with RTOS */
  tcpip_init( NULL, NULL );
 8013d6e:	2100      	movs	r1, #0
 8013d70:	2000      	movs	r0, #0
 8013d72:	f7f5 f927 	bl	8008fc4 <tcpip_init>

  /* IP addresses initialization without DHCP (IPv4) */
  IP4_ADDR(&ipaddr, IP_ADDRESS[0], IP_ADDRESS[1], IP_ADDRESS[2], IP_ADDRESS[3]);
 8013d76:	4b78      	ldr	r3, [pc, #480]	; (8013f58 <MX_LWIP_Init+0x238>)
 8013d78:	781b      	ldrb	r3, [r3, #0]
 8013d7a:	061a      	lsls	r2, r3, #24
 8013d7c:	4b76      	ldr	r3, [pc, #472]	; (8013f58 <MX_LWIP_Init+0x238>)
 8013d7e:	785b      	ldrb	r3, [r3, #1]
 8013d80:	041b      	lsls	r3, r3, #16
 8013d82:	431a      	orrs	r2, r3
 8013d84:	4b74      	ldr	r3, [pc, #464]	; (8013f58 <MX_LWIP_Init+0x238>)
 8013d86:	789b      	ldrb	r3, [r3, #2]
 8013d88:	021b      	lsls	r3, r3, #8
 8013d8a:	4313      	orrs	r3, r2
 8013d8c:	4a72      	ldr	r2, [pc, #456]	; (8013f58 <MX_LWIP_Init+0x238>)
 8013d8e:	78d2      	ldrb	r2, [r2, #3]
 8013d90:	4313      	orrs	r3, r2
 8013d92:	061a      	lsls	r2, r3, #24
 8013d94:	4b70      	ldr	r3, [pc, #448]	; (8013f58 <MX_LWIP_Init+0x238>)
 8013d96:	781b      	ldrb	r3, [r3, #0]
 8013d98:	0619      	lsls	r1, r3, #24
 8013d9a:	4b6f      	ldr	r3, [pc, #444]	; (8013f58 <MX_LWIP_Init+0x238>)
 8013d9c:	785b      	ldrb	r3, [r3, #1]
 8013d9e:	041b      	lsls	r3, r3, #16
 8013da0:	4319      	orrs	r1, r3
 8013da2:	4b6d      	ldr	r3, [pc, #436]	; (8013f58 <MX_LWIP_Init+0x238>)
 8013da4:	789b      	ldrb	r3, [r3, #2]
 8013da6:	021b      	lsls	r3, r3, #8
 8013da8:	430b      	orrs	r3, r1
 8013daa:	496b      	ldr	r1, [pc, #428]	; (8013f58 <MX_LWIP_Init+0x238>)
 8013dac:	78c9      	ldrb	r1, [r1, #3]
 8013dae:	430b      	orrs	r3, r1
 8013db0:	021b      	lsls	r3, r3, #8
 8013db2:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8013db6:	431a      	orrs	r2, r3
 8013db8:	4b67      	ldr	r3, [pc, #412]	; (8013f58 <MX_LWIP_Init+0x238>)
 8013dba:	781b      	ldrb	r3, [r3, #0]
 8013dbc:	0619      	lsls	r1, r3, #24
 8013dbe:	4b66      	ldr	r3, [pc, #408]	; (8013f58 <MX_LWIP_Init+0x238>)
 8013dc0:	785b      	ldrb	r3, [r3, #1]
 8013dc2:	041b      	lsls	r3, r3, #16
 8013dc4:	4319      	orrs	r1, r3
 8013dc6:	4b64      	ldr	r3, [pc, #400]	; (8013f58 <MX_LWIP_Init+0x238>)
 8013dc8:	789b      	ldrb	r3, [r3, #2]
 8013dca:	021b      	lsls	r3, r3, #8
 8013dcc:	430b      	orrs	r3, r1
 8013dce:	4962      	ldr	r1, [pc, #392]	; (8013f58 <MX_LWIP_Init+0x238>)
 8013dd0:	78c9      	ldrb	r1, [r1, #3]
 8013dd2:	430b      	orrs	r3, r1
 8013dd4:	0a1b      	lsrs	r3, r3, #8
 8013dd6:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8013dda:	431a      	orrs	r2, r3
 8013ddc:	4b5e      	ldr	r3, [pc, #376]	; (8013f58 <MX_LWIP_Init+0x238>)
 8013dde:	781b      	ldrb	r3, [r3, #0]
 8013de0:	0619      	lsls	r1, r3, #24
 8013de2:	4b5d      	ldr	r3, [pc, #372]	; (8013f58 <MX_LWIP_Init+0x238>)
 8013de4:	785b      	ldrb	r3, [r3, #1]
 8013de6:	041b      	lsls	r3, r3, #16
 8013de8:	4319      	orrs	r1, r3
 8013dea:	4b5b      	ldr	r3, [pc, #364]	; (8013f58 <MX_LWIP_Init+0x238>)
 8013dec:	789b      	ldrb	r3, [r3, #2]
 8013dee:	021b      	lsls	r3, r3, #8
 8013df0:	430b      	orrs	r3, r1
 8013df2:	4959      	ldr	r1, [pc, #356]	; (8013f58 <MX_LWIP_Init+0x238>)
 8013df4:	78c9      	ldrb	r1, [r1, #3]
 8013df6:	430b      	orrs	r3, r1
 8013df8:	0e1b      	lsrs	r3, r3, #24
 8013dfa:	4313      	orrs	r3, r2
 8013dfc:	4a59      	ldr	r2, [pc, #356]	; (8013f64 <MX_LWIP_Init+0x244>)
 8013dfe:	6013      	str	r3, [r2, #0]
  IP4_ADDR(&netmask, NETMASK_ADDRESS[0], NETMASK_ADDRESS[1] , NETMASK_ADDRESS[2], NETMASK_ADDRESS[3]);
 8013e00:	4b56      	ldr	r3, [pc, #344]	; (8013f5c <MX_LWIP_Init+0x23c>)
 8013e02:	781b      	ldrb	r3, [r3, #0]
 8013e04:	061a      	lsls	r2, r3, #24
 8013e06:	4b55      	ldr	r3, [pc, #340]	; (8013f5c <MX_LWIP_Init+0x23c>)
 8013e08:	785b      	ldrb	r3, [r3, #1]
 8013e0a:	041b      	lsls	r3, r3, #16
 8013e0c:	431a      	orrs	r2, r3
 8013e0e:	4b53      	ldr	r3, [pc, #332]	; (8013f5c <MX_LWIP_Init+0x23c>)
 8013e10:	789b      	ldrb	r3, [r3, #2]
 8013e12:	021b      	lsls	r3, r3, #8
 8013e14:	4313      	orrs	r3, r2
 8013e16:	4a51      	ldr	r2, [pc, #324]	; (8013f5c <MX_LWIP_Init+0x23c>)
 8013e18:	78d2      	ldrb	r2, [r2, #3]
 8013e1a:	4313      	orrs	r3, r2
 8013e1c:	061a      	lsls	r2, r3, #24
 8013e1e:	4b4f      	ldr	r3, [pc, #316]	; (8013f5c <MX_LWIP_Init+0x23c>)
 8013e20:	781b      	ldrb	r3, [r3, #0]
 8013e22:	0619      	lsls	r1, r3, #24
 8013e24:	4b4d      	ldr	r3, [pc, #308]	; (8013f5c <MX_LWIP_Init+0x23c>)
 8013e26:	785b      	ldrb	r3, [r3, #1]
 8013e28:	041b      	lsls	r3, r3, #16
 8013e2a:	4319      	orrs	r1, r3
 8013e2c:	4b4b      	ldr	r3, [pc, #300]	; (8013f5c <MX_LWIP_Init+0x23c>)
 8013e2e:	789b      	ldrb	r3, [r3, #2]
 8013e30:	021b      	lsls	r3, r3, #8
 8013e32:	430b      	orrs	r3, r1
 8013e34:	4949      	ldr	r1, [pc, #292]	; (8013f5c <MX_LWIP_Init+0x23c>)
 8013e36:	78c9      	ldrb	r1, [r1, #3]
 8013e38:	430b      	orrs	r3, r1
 8013e3a:	021b      	lsls	r3, r3, #8
 8013e3c:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8013e40:	431a      	orrs	r2, r3
 8013e42:	4b46      	ldr	r3, [pc, #280]	; (8013f5c <MX_LWIP_Init+0x23c>)
 8013e44:	781b      	ldrb	r3, [r3, #0]
 8013e46:	0619      	lsls	r1, r3, #24
 8013e48:	4b44      	ldr	r3, [pc, #272]	; (8013f5c <MX_LWIP_Init+0x23c>)
 8013e4a:	785b      	ldrb	r3, [r3, #1]
 8013e4c:	041b      	lsls	r3, r3, #16
 8013e4e:	4319      	orrs	r1, r3
 8013e50:	4b42      	ldr	r3, [pc, #264]	; (8013f5c <MX_LWIP_Init+0x23c>)
 8013e52:	789b      	ldrb	r3, [r3, #2]
 8013e54:	021b      	lsls	r3, r3, #8
 8013e56:	430b      	orrs	r3, r1
 8013e58:	4940      	ldr	r1, [pc, #256]	; (8013f5c <MX_LWIP_Init+0x23c>)
 8013e5a:	78c9      	ldrb	r1, [r1, #3]
 8013e5c:	430b      	orrs	r3, r1
 8013e5e:	0a1b      	lsrs	r3, r3, #8
 8013e60:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8013e64:	431a      	orrs	r2, r3
 8013e66:	4b3d      	ldr	r3, [pc, #244]	; (8013f5c <MX_LWIP_Init+0x23c>)
 8013e68:	781b      	ldrb	r3, [r3, #0]
 8013e6a:	0619      	lsls	r1, r3, #24
 8013e6c:	4b3b      	ldr	r3, [pc, #236]	; (8013f5c <MX_LWIP_Init+0x23c>)
 8013e6e:	785b      	ldrb	r3, [r3, #1]
 8013e70:	041b      	lsls	r3, r3, #16
 8013e72:	4319      	orrs	r1, r3
 8013e74:	4b39      	ldr	r3, [pc, #228]	; (8013f5c <MX_LWIP_Init+0x23c>)
 8013e76:	789b      	ldrb	r3, [r3, #2]
 8013e78:	021b      	lsls	r3, r3, #8
 8013e7a:	430b      	orrs	r3, r1
 8013e7c:	4937      	ldr	r1, [pc, #220]	; (8013f5c <MX_LWIP_Init+0x23c>)
 8013e7e:	78c9      	ldrb	r1, [r1, #3]
 8013e80:	430b      	orrs	r3, r1
 8013e82:	0e1b      	lsrs	r3, r3, #24
 8013e84:	4313      	orrs	r3, r2
 8013e86:	4a38      	ldr	r2, [pc, #224]	; (8013f68 <MX_LWIP_Init+0x248>)
 8013e88:	6013      	str	r3, [r2, #0]
  IP4_ADDR(&gw, GATEWAY_ADDRESS[0], GATEWAY_ADDRESS[1], GATEWAY_ADDRESS[2], GATEWAY_ADDRESS[3]);
 8013e8a:	4b35      	ldr	r3, [pc, #212]	; (8013f60 <MX_LWIP_Init+0x240>)
 8013e8c:	781b      	ldrb	r3, [r3, #0]
 8013e8e:	061a      	lsls	r2, r3, #24
 8013e90:	4b33      	ldr	r3, [pc, #204]	; (8013f60 <MX_LWIP_Init+0x240>)
 8013e92:	785b      	ldrb	r3, [r3, #1]
 8013e94:	041b      	lsls	r3, r3, #16
 8013e96:	431a      	orrs	r2, r3
 8013e98:	4b31      	ldr	r3, [pc, #196]	; (8013f60 <MX_LWIP_Init+0x240>)
 8013e9a:	789b      	ldrb	r3, [r3, #2]
 8013e9c:	021b      	lsls	r3, r3, #8
 8013e9e:	4313      	orrs	r3, r2
 8013ea0:	4a2f      	ldr	r2, [pc, #188]	; (8013f60 <MX_LWIP_Init+0x240>)
 8013ea2:	78d2      	ldrb	r2, [r2, #3]
 8013ea4:	4313      	orrs	r3, r2
 8013ea6:	061a      	lsls	r2, r3, #24
 8013ea8:	4b2d      	ldr	r3, [pc, #180]	; (8013f60 <MX_LWIP_Init+0x240>)
 8013eaa:	781b      	ldrb	r3, [r3, #0]
 8013eac:	0619      	lsls	r1, r3, #24
 8013eae:	4b2c      	ldr	r3, [pc, #176]	; (8013f60 <MX_LWIP_Init+0x240>)
 8013eb0:	785b      	ldrb	r3, [r3, #1]
 8013eb2:	041b      	lsls	r3, r3, #16
 8013eb4:	4319      	orrs	r1, r3
 8013eb6:	4b2a      	ldr	r3, [pc, #168]	; (8013f60 <MX_LWIP_Init+0x240>)
 8013eb8:	789b      	ldrb	r3, [r3, #2]
 8013eba:	021b      	lsls	r3, r3, #8
 8013ebc:	430b      	orrs	r3, r1
 8013ebe:	4928      	ldr	r1, [pc, #160]	; (8013f60 <MX_LWIP_Init+0x240>)
 8013ec0:	78c9      	ldrb	r1, [r1, #3]
 8013ec2:	430b      	orrs	r3, r1
 8013ec4:	021b      	lsls	r3, r3, #8
 8013ec6:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8013eca:	431a      	orrs	r2, r3
 8013ecc:	4b24      	ldr	r3, [pc, #144]	; (8013f60 <MX_LWIP_Init+0x240>)
 8013ece:	781b      	ldrb	r3, [r3, #0]
 8013ed0:	0619      	lsls	r1, r3, #24
 8013ed2:	4b23      	ldr	r3, [pc, #140]	; (8013f60 <MX_LWIP_Init+0x240>)
 8013ed4:	785b      	ldrb	r3, [r3, #1]
 8013ed6:	041b      	lsls	r3, r3, #16
 8013ed8:	4319      	orrs	r1, r3
 8013eda:	4b21      	ldr	r3, [pc, #132]	; (8013f60 <MX_LWIP_Init+0x240>)
 8013edc:	789b      	ldrb	r3, [r3, #2]
 8013ede:	021b      	lsls	r3, r3, #8
 8013ee0:	430b      	orrs	r3, r1
 8013ee2:	491f      	ldr	r1, [pc, #124]	; (8013f60 <MX_LWIP_Init+0x240>)
 8013ee4:	78c9      	ldrb	r1, [r1, #3]
 8013ee6:	430b      	orrs	r3, r1
 8013ee8:	0a1b      	lsrs	r3, r3, #8
 8013eea:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8013eee:	431a      	orrs	r2, r3
 8013ef0:	4b1b      	ldr	r3, [pc, #108]	; (8013f60 <MX_LWIP_Init+0x240>)
 8013ef2:	781b      	ldrb	r3, [r3, #0]
 8013ef4:	0619      	lsls	r1, r3, #24
 8013ef6:	4b1a      	ldr	r3, [pc, #104]	; (8013f60 <MX_LWIP_Init+0x240>)
 8013ef8:	785b      	ldrb	r3, [r3, #1]
 8013efa:	041b      	lsls	r3, r3, #16
 8013efc:	4319      	orrs	r1, r3
 8013efe:	4b18      	ldr	r3, [pc, #96]	; (8013f60 <MX_LWIP_Init+0x240>)
 8013f00:	789b      	ldrb	r3, [r3, #2]
 8013f02:	021b      	lsls	r3, r3, #8
 8013f04:	430b      	orrs	r3, r1
 8013f06:	4916      	ldr	r1, [pc, #88]	; (8013f60 <MX_LWIP_Init+0x240>)
 8013f08:	78c9      	ldrb	r1, [r1, #3]
 8013f0a:	430b      	orrs	r3, r1
 8013f0c:	0e1b      	lsrs	r3, r3, #24
 8013f0e:	4313      	orrs	r3, r2
 8013f10:	4a16      	ldr	r2, [pc, #88]	; (8013f6c <MX_LWIP_Init+0x24c>)
 8013f12:	6013      	str	r3, [r2, #0]

  /* add the network interface (IPv4/IPv6) with RTOS */
  netif_add(&gnetif, &ipaddr, &netmask, &gw, NULL, &ethernetif_init, &tcpip_input);
 8013f14:	4b16      	ldr	r3, [pc, #88]	; (8013f70 <MX_LWIP_Init+0x250>)
 8013f16:	9302      	str	r3, [sp, #8]
 8013f18:	4b16      	ldr	r3, [pc, #88]	; (8013f74 <MX_LWIP_Init+0x254>)
 8013f1a:	9301      	str	r3, [sp, #4]
 8013f1c:	2300      	movs	r3, #0
 8013f1e:	9300      	str	r3, [sp, #0]
 8013f20:	4b12      	ldr	r3, [pc, #72]	; (8013f6c <MX_LWIP_Init+0x24c>)
 8013f22:	4a11      	ldr	r2, [pc, #68]	; (8013f68 <MX_LWIP_Init+0x248>)
 8013f24:	490f      	ldr	r1, [pc, #60]	; (8013f64 <MX_LWIP_Init+0x244>)
 8013f26:	4814      	ldr	r0, [pc, #80]	; (8013f78 <MX_LWIP_Init+0x258>)
 8013f28:	f7f5 fd4a 	bl	80099c0 <netif_add>

  /* Registers the default network interface */
  netif_set_default(&gnetif);
 8013f2c:	4812      	ldr	r0, [pc, #72]	; (8013f78 <MX_LWIP_Init+0x258>)
 8013f2e:	f7f5 fe2b 	bl	8009b88 <netif_set_default>

  if (netif_is_link_up(&gnetif))
 8013f32:	4b11      	ldr	r3, [pc, #68]	; (8013f78 <MX_LWIP_Init+0x258>)
 8013f34:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 8013f38:	089b      	lsrs	r3, r3, #2
 8013f3a:	f003 0301 	and.w	r3, r3, #1
 8013f3e:	b2db      	uxtb	r3, r3
 8013f40:	2b00      	cmp	r3, #0
 8013f42:	d003      	beq.n	8013f4c <MX_LWIP_Init+0x22c>
  {
    /* When the netif is fully configured this function must be called */
    netif_set_up(&gnetif);
 8013f44:	480c      	ldr	r0, [pc, #48]	; (8013f78 <MX_LWIP_Init+0x258>)
 8013f46:	f7f5 fe2f 	bl	8009ba8 <netif_set_up>
//  osThreadCreate (osThread(EthLink), &gnetif);

/* USER CODE BEGIN 3 */

/* USER CODE END 3 */
}
 8013f4a:	e002      	b.n	8013f52 <MX_LWIP_Init+0x232>
    netif_set_down(&gnetif);
 8013f4c:	480a      	ldr	r0, [pc, #40]	; (8013f78 <MX_LWIP_Init+0x258>)
 8013f4e:	f7f5 fe6f 	bl	8009c30 <netif_set_down>
}
 8013f52:	bf00      	nop
 8013f54:	46bd      	mov	sp, r7
 8013f56:	bd80      	pop	{r7, pc}
 8013f58:	2400f5b0 	.word	0x2400f5b0
 8013f5c:	2400f5ac 	.word	0x2400f5ac
 8013f60:	2400f570 	.word	0x2400f570
 8013f64:	2400f5a8 	.word	0x2400f5a8
 8013f68:	2400f5b4 	.word	0x2400f5b4
 8013f6c:	2400f5b8 	.word	0x2400f5b8
 8013f70:	08008ec1 	.word	0x08008ec1
 8013f74:	0801387d 	.word	0x0801387d
 8013f78:	2400f574 	.word	0x2400f574

08013f7c <SCB_EnableICache>:
{
 8013f7c:	b480      	push	{r7}
 8013f7e:	af00      	add	r7, sp, #0
  __ASM volatile ("dsb 0xF":::"memory");
 8013f80:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8013f84:	f3bf 8f6f 	isb	sy
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 8013f88:	4b0b      	ldr	r3, [pc, #44]	; (8013fb8 <SCB_EnableICache+0x3c>)
 8013f8a:	2200      	movs	r2, #0
 8013f8c:	f8c3 2250 	str.w	r2, [r3, #592]	; 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 8013f90:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8013f94:	f3bf 8f6f 	isb	sy
    SCB->CCR |=  (uint32_t)SCB_CCR_IC_Msk;  /* enable I-Cache */
 8013f98:	4b07      	ldr	r3, [pc, #28]	; (8013fb8 <SCB_EnableICache+0x3c>)
 8013f9a:	695b      	ldr	r3, [r3, #20]
 8013f9c:	4a06      	ldr	r2, [pc, #24]	; (8013fb8 <SCB_EnableICache+0x3c>)
 8013f9e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8013fa2:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 8013fa4:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8013fa8:	f3bf 8f6f 	isb	sy
}
 8013fac:	bf00      	nop
 8013fae:	46bd      	mov	sp, r7
 8013fb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013fb4:	4770      	bx	lr
 8013fb6:	bf00      	nop
 8013fb8:	e000ed00 	.word	0xe000ed00

08013fbc <SCB_EnableDCache>:
{
 8013fbc:	b480      	push	{r7}
 8013fbe:	b085      	sub	sp, #20
 8013fc0:	af00      	add	r7, sp, #0
    SCB->CSSELR = 0U; /*(0U << 1U) | 0U;*/  /* Level 1 data cache */
 8013fc2:	4b1d      	ldr	r3, [pc, #116]	; (8014038 <SCB_EnableDCache+0x7c>)
 8013fc4:	2200      	movs	r2, #0
 8013fc6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  __ASM volatile ("dsb 0xF":::"memory");
 8013fca:	f3bf 8f4f 	dsb	sy
    ccsidr = SCB->CCSIDR;
 8013fce:	4b1a      	ldr	r3, [pc, #104]	; (8014038 <SCB_EnableDCache+0x7c>)
 8013fd0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8013fd4:	607b      	str	r3, [r7, #4]
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
 8013fd6:	687b      	ldr	r3, [r7, #4]
 8013fd8:	0b5b      	lsrs	r3, r3, #13
 8013fda:	f3c3 030e 	ubfx	r3, r3, #0, #15
 8013fde:	60fb      	str	r3, [r7, #12]
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 8013fe0:	687b      	ldr	r3, [r7, #4]
 8013fe2:	08db      	lsrs	r3, r3, #3
 8013fe4:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8013fe8:	60bb      	str	r3, [r7, #8]
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 8013fea:	68fb      	ldr	r3, [r7, #12]
 8013fec:	015a      	lsls	r2, r3, #5
 8013fee:	f643 73e0 	movw	r3, #16352	; 0x3fe0
 8013ff2:	4013      	ands	r3, r2
                      ((ways << SCB_DCISW_WAY_Pos) & SCB_DCISW_WAY_Msk)  );
 8013ff4:	68ba      	ldr	r2, [r7, #8]
 8013ff6:	0792      	lsls	r2, r2, #30
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 8013ff8:	490f      	ldr	r1, [pc, #60]	; (8014038 <SCB_EnableDCache+0x7c>)
 8013ffa:	4313      	orrs	r3, r2
 8013ffc:	f8c1 3260 	str.w	r3, [r1, #608]	; 0x260
      } while (ways-- != 0U);
 8014000:	68bb      	ldr	r3, [r7, #8]
 8014002:	1e5a      	subs	r2, r3, #1
 8014004:	60ba      	str	r2, [r7, #8]
 8014006:	2b00      	cmp	r3, #0
 8014008:	d1ef      	bne.n	8013fea <SCB_EnableDCache+0x2e>
    } while(sets-- != 0U);
 801400a:	68fb      	ldr	r3, [r7, #12]
 801400c:	1e5a      	subs	r2, r3, #1
 801400e:	60fa      	str	r2, [r7, #12]
 8014010:	2b00      	cmp	r3, #0
 8014012:	d1e5      	bne.n	8013fe0 <SCB_EnableDCache+0x24>
 8014014:	f3bf 8f4f 	dsb	sy
    SCB->CCR |=  (uint32_t)SCB_CCR_DC_Msk;  /* enable D-Cache */
 8014018:	4b07      	ldr	r3, [pc, #28]	; (8014038 <SCB_EnableDCache+0x7c>)
 801401a:	695b      	ldr	r3, [r3, #20]
 801401c:	4a06      	ldr	r2, [pc, #24]	; (8014038 <SCB_EnableDCache+0x7c>)
 801401e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8014022:	6153      	str	r3, [r2, #20]
 8014024:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8014028:	f3bf 8f6f 	isb	sy
}
 801402c:	bf00      	nop
 801402e:	3714      	adds	r7, #20
 8014030:	46bd      	mov	sp, r7
 8014032:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014036:	4770      	bx	lr
 8014038:	e000ed00 	.word	0xe000ed00

0801403c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 801403c:	b580      	push	{r7, lr}
 801403e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */

  /* USER CODE END 1 */
  
  /* MPU Configuration--------------------------------------------------------*/
  MPU_Config();
 8014040:	f000 f89e 	bl	8014180 <MPU_Config>

  /* Enable I-Cache---------------------------------------------------------*/
  SCB_EnableICache();
 8014044:	f7ff ff9a 	bl	8013f7c <SCB_EnableICache>

  /* Enable D-Cache---------------------------------------------------------*/
  SCB_EnableDCache();
 8014048:	f7ff ffb8 	bl	8013fbc <SCB_EnableDCache>

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 801404c:	f7ec fcbe 	bl	80009cc <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8014050:	f000 f808 	bl	8014064 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8014054:	f7ff fcd4 	bl	8013a00 <MX_GPIO_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Call init function for freertos objects (in freertos.c) */
  MX_FREERTOS_Init(); 
 8014058:	f7ff fcac 	bl	80139b4 <MX_FREERTOS_Init>

  /* Start scheduler */
  osKernelStart();
 801405c:	f7ef fe44 	bl	8003ce8 <osKernelStart>
  
  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8014060:	e7fe      	b.n	8014060 <main+0x24>
	...

08014064 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8014064:	b580      	push	{r7, lr}
 8014066:	b09e      	sub	sp, #120	; 0x78
 8014068:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 801406a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 801406e:	224c      	movs	r2, #76	; 0x4c
 8014070:	2100      	movs	r1, #0
 8014072:	4618      	mov	r0, r3
 8014074:	f001 fe2a 	bl	8015ccc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8014078:	f107 030c 	add.w	r3, r7, #12
 801407c:	2220      	movs	r2, #32
 801407e:	2100      	movs	r1, #0
 8014080:	4618      	mov	r0, r3
 8014082:	f001 fe23 	bl	8015ccc <memset>

  /** Supply configuration update enable 
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 8014086:	2002      	movs	r0, #2
 8014088:	f7ee fec6 	bl	8002e18 <HAL_PWREx_ConfigSupply>
  /** Configure the main internal regulator output voltage 
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 801408c:	2300      	movs	r3, #0
 801408e:	60bb      	str	r3, [r7, #8]
 8014090:	4b38      	ldr	r3, [pc, #224]	; (8014174 <SystemClock_Config+0x110>)
 8014092:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8014094:	4a37      	ldr	r2, [pc, #220]	; (8014174 <SystemClock_Config+0x110>)
 8014096:	f023 0301 	bic.w	r3, r3, #1
 801409a:	62d3      	str	r3, [r2, #44]	; 0x2c
 801409c:	4b35      	ldr	r3, [pc, #212]	; (8014174 <SystemClock_Config+0x110>)
 801409e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80140a0:	f003 0301 	and.w	r3, r3, #1
 80140a4:	60bb      	str	r3, [r7, #8]
 80140a6:	4b34      	ldr	r3, [pc, #208]	; (8014178 <SystemClock_Config+0x114>)
 80140a8:	699b      	ldr	r3, [r3, #24]
 80140aa:	4a33      	ldr	r2, [pc, #204]	; (8014178 <SystemClock_Config+0x114>)
 80140ac:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80140b0:	6193      	str	r3, [r2, #24]
 80140b2:	4b31      	ldr	r3, [pc, #196]	; (8014178 <SystemClock_Config+0x114>)
 80140b4:	699b      	ldr	r3, [r3, #24]
 80140b6:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80140ba:	60bb      	str	r3, [r7, #8]
 80140bc:	68bb      	ldr	r3, [r7, #8]



  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 80140be:	bf00      	nop
 80140c0:	4b2d      	ldr	r3, [pc, #180]	; (8014178 <SystemClock_Config+0x114>)
 80140c2:	699b      	ldr	r3, [r3, #24]
 80140c4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80140c8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80140cc:	d1f8      	bne.n	80140c0 <SystemClock_Config+0x5c>

  /* Enable D2 domain SRAM3 Clock (0x30040000 AXI)*/
  __HAL_RCC_D2SRAM3_CLK_ENABLE();
 80140ce:	4b2b      	ldr	r3, [pc, #172]	; (801417c <SystemClock_Config+0x118>)
 80140d0:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
 80140d4:	4a29      	ldr	r2, [pc, #164]	; (801417c <SystemClock_Config+0x118>)
 80140d6:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80140da:	f8c2 30dc 	str.w	r3, [r2, #220]	; 0xdc
 80140de:	4b27      	ldr	r3, [pc, #156]	; (801417c <SystemClock_Config+0x118>)
 80140e0:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
 80140e4:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80140e8:	607b      	str	r3, [r7, #4]
 80140ea:	687b      	ldr	r3, [r7, #4]
/** Initializes the CPU, AHB and APB busses clocks
 *
*/
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80140ec:	2301      	movs	r3, #1
 80140ee:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80140f0:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80140f4:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80140f6:	2302      	movs	r3, #2
 80140f8:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80140fa:	2302      	movs	r3, #2
 80140fc:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLM = 2;
 80140fe:	2302      	movs	r3, #2
 8014100:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLN = 64;
 8014102:	2340      	movs	r3, #64	; 0x40
 8014104:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLP = 2;
 8014106:	2302      	movs	r3, #2
 8014108:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLQ = 2;
 801410a:	2302      	movs	r3, #2
 801410c:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLR = 2;
 801410e:	2302      	movs	r3, #2
 8014110:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 8014112:	230c      	movs	r3, #12
 8014114:	66fb      	str	r3, [r7, #108]	; 0x6c
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 8014116:	2300      	movs	r3, #0
 8014118:	673b      	str	r3, [r7, #112]	; 0x70
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 801411a:	2300      	movs	r3, #0
 801411c:	677b      	str	r3, [r7, #116]	; 0x74
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 801411e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8014122:	4618      	mov	r0, r3
 8014124:	f7ee feb0 	bl	8002e88 <HAL_RCC_OscConfig>
 8014128:	4603      	mov	r3, r0
 801412a:	2b00      	cmp	r3, #0
 801412c:	d001      	beq.n	8014132 <SystemClock_Config+0xce>
  {
    Error_Handler();
 801412e:	f000 f871 	bl	8014214 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8014132:	233f      	movs	r3, #63	; 0x3f
 8014134:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8014136:	2303      	movs	r3, #3
 8014138:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 801413a:	2300      	movs	r3, #0
 801413c:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 801413e:	2308      	movs	r3, #8
 8014140:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 8014142:	2340      	movs	r3, #64	; 0x40
 8014144:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 8014146:	2340      	movs	r3, #64	; 0x40
 8014148:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 801414a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 801414e:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 8014150:	2340      	movs	r3, #64	; 0x40
 8014152:	62bb      	str	r3, [r7, #40]	; 0x28

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8014154:	f107 030c 	add.w	r3, r7, #12
 8014158:	2102      	movs	r1, #2
 801415a:	4618      	mov	r0, r3
 801415c:	f7ef fa4c 	bl	80035f8 <HAL_RCC_ClockConfig>
 8014160:	4603      	mov	r3, r0
 8014162:	2b00      	cmp	r3, #0
 8014164:	d001      	beq.n	801416a <SystemClock_Config+0x106>
  {
    Error_Handler();
 8014166:	f000 f855 	bl	8014214 <Error_Handler>
  }
}
 801416a:	bf00      	nop
 801416c:	3778      	adds	r7, #120	; 0x78
 801416e:	46bd      	mov	sp, r7
 8014170:	bd80      	pop	{r7, pc}
 8014172:	bf00      	nop
 8014174:	58000400 	.word	0x58000400
 8014178:	58024800 	.word	0x58024800
 801417c:	58024400 	.word	0x58024400

08014180 <MPU_Config>:
/* USER CODE END 4 */

/* MPU Configuration */

void MPU_Config(void)
{
 8014180:	b580      	push	{r7, lr}
 8014182:	b084      	sub	sp, #16
 8014184:	af00      	add	r7, sp, #0
  MPU_Region_InitTypeDef MPU_InitStruct = {0};
 8014186:	463b      	mov	r3, r7
 8014188:	2200      	movs	r2, #0
 801418a:	601a      	str	r2, [r3, #0]
 801418c:	605a      	str	r2, [r3, #4]
 801418e:	609a      	str	r2, [r3, #8]
 8014190:	60da      	str	r2, [r3, #12]

  /* Disables the MPU */
  HAL_MPU_Disable();
 8014192:	f7ec fdfb 	bl	8000d8c <HAL_MPU_Disable>
  /** Initializes and configures the Region and the memory to be protected 
  */
  MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 8014196:	2301      	movs	r3, #1
 8014198:	703b      	strb	r3, [r7, #0]
  MPU_InitStruct.Number = MPU_REGION_NUMBER0;
 801419a:	2300      	movs	r3, #0
 801419c:	707b      	strb	r3, [r7, #1]
  MPU_InitStruct.BaseAddress = 0x30040000;
 801419e:	4b1b      	ldr	r3, [pc, #108]	; (801420c <MPU_Config+0x8c>)
 80141a0:	607b      	str	r3, [r7, #4]
  MPU_InitStruct.Size = MPU_REGION_SIZE_256B;
 80141a2:	2307      	movs	r3, #7
 80141a4:	723b      	strb	r3, [r7, #8]
  MPU_InitStruct.SubRegionDisable = 0x0;
 80141a6:	2300      	movs	r3, #0
 80141a8:	727b      	strb	r3, [r7, #9]
  MPU_InitStruct.TypeExtField = MPU_TEX_LEVEL0;
 80141aa:	2300      	movs	r3, #0
 80141ac:	72bb      	strb	r3, [r7, #10]
  MPU_InitStruct.AccessPermission = MPU_REGION_FULL_ACCESS;
 80141ae:	2303      	movs	r3, #3
 80141b0:	72fb      	strb	r3, [r7, #11]
  MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_ENABLE;
 80141b2:	2300      	movs	r3, #0
 80141b4:	733b      	strb	r3, [r7, #12]
  MPU_InitStruct.IsShareable = MPU_ACCESS_NOT_SHAREABLE;
 80141b6:	2300      	movs	r3, #0
 80141b8:	737b      	strb	r3, [r7, #13]
  MPU_InitStruct.IsCacheable = MPU_ACCESS_NOT_CACHEABLE;
 80141ba:	2300      	movs	r3, #0
 80141bc:	73bb      	strb	r3, [r7, #14]
  MPU_InitStruct.IsBufferable = MPU_ACCESS_BUFFERABLE;
 80141be:	2301      	movs	r3, #1
 80141c0:	73fb      	strb	r3, [r7, #15]

  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 80141c2:	463b      	mov	r3, r7
 80141c4:	4618      	mov	r0, r3
 80141c6:	f7ec fe15 	bl	8000df4 <HAL_MPU_ConfigRegion>
  /** Initializes and configures the Region and the memory to be protected 
  */
  MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 80141ca:	2301      	movs	r3, #1
 80141cc:	703b      	strb	r3, [r7, #0]
  MPU_InitStruct.Number = MPU_REGION_NUMBER1;
 80141ce:	2301      	movs	r3, #1
 80141d0:	707b      	strb	r3, [r7, #1]
  MPU_InitStruct.BaseAddress = 0x30044000;
 80141d2:	4b0f      	ldr	r3, [pc, #60]	; (8014210 <MPU_Config+0x90>)
 80141d4:	607b      	str	r3, [r7, #4]
  MPU_InitStruct.Size = MPU_REGION_SIZE_16KB;
 80141d6:	230d      	movs	r3, #13
 80141d8:	723b      	strb	r3, [r7, #8]
  MPU_InitStruct.SubRegionDisable = 0x0;
 80141da:	2300      	movs	r3, #0
 80141dc:	727b      	strb	r3, [r7, #9]
  MPU_InitStruct.TypeExtField = MPU_TEX_LEVEL0;
 80141de:	2300      	movs	r3, #0
 80141e0:	72bb      	strb	r3, [r7, #10]
  MPU_InitStruct.AccessPermission = MPU_REGION_FULL_ACCESS;
 80141e2:	2303      	movs	r3, #3
 80141e4:	72fb      	strb	r3, [r7, #11]
  MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_ENABLE;
 80141e6:	2300      	movs	r3, #0
 80141e8:	733b      	strb	r3, [r7, #12]
  MPU_InitStruct.IsShareable = MPU_ACCESS_NOT_SHAREABLE;
 80141ea:	2300      	movs	r3, #0
 80141ec:	737b      	strb	r3, [r7, #13]
  MPU_InitStruct.IsCacheable = MPU_ACCESS_CACHEABLE;
 80141ee:	2301      	movs	r3, #1
 80141f0:	73bb      	strb	r3, [r7, #14]
  MPU_InitStruct.IsBufferable = MPU_ACCESS_NOT_BUFFERABLE;
 80141f2:	2300      	movs	r3, #0
 80141f4:	73fb      	strb	r3, [r7, #15]

  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 80141f6:	463b      	mov	r3, r7
 80141f8:	4618      	mov	r0, r3
 80141fa:	f7ec fdfb 	bl	8000df4 <HAL_MPU_ConfigRegion>
  /* Enables the MPU */
  HAL_MPU_Enable(MPU_PRIVILEGED_DEFAULT);
 80141fe:	2004      	movs	r0, #4
 8014200:	f7ec fdda 	bl	8000db8 <HAL_MPU_Enable>

}
 8014204:	bf00      	nop
 8014206:	3710      	adds	r7, #16
 8014208:	46bd      	mov	sp, r7
 801420a:	bd80      	pop	{r7, pc}
 801420c:	30040000 	.word	0x30040000
 8014210:	30044000 	.word	0x30044000

08014214 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8014214:	b480      	push	{r7}
 8014216:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8014218:	bf00      	nop
 801421a:	46bd      	mov	sp, r7
 801421c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014220:	4770      	bx	lr
	...

08014224 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8014224:	b580      	push	{r7, lr}
 8014226:	b082      	sub	sp, #8
 8014228:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 801422a:	4b0c      	ldr	r3, [pc, #48]	; (801425c <HAL_MspInit+0x38>)
 801422c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8014230:	4a0a      	ldr	r2, [pc, #40]	; (801425c <HAL_MspInit+0x38>)
 8014232:	f043 0302 	orr.w	r3, r3, #2
 8014236:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 801423a:	4b08      	ldr	r3, [pc, #32]	; (801425c <HAL_MspInit+0x38>)
 801423c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8014240:	f003 0302 	and.w	r3, r3, #2
 8014244:	607b      	str	r3, [r7, #4]
 8014246:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8014248:	2200      	movs	r2, #0
 801424a:	210f      	movs	r1, #15
 801424c:	f06f 0001 	mvn.w	r0, #1
 8014250:	f7ec fd67 	bl	8000d22 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8014254:	bf00      	nop
 8014256:	3708      	adds	r7, #8
 8014258:	46bd      	mov	sp, r7
 801425a:	bd80      	pop	{r7, pc}
 801425c:	58024400 	.word	0x58024400

08014260 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8014260:	b480      	push	{r7}
 8014262:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8014264:	bf00      	nop
 8014266:	46bd      	mov	sp, r7
 8014268:	f85d 7b04 	ldr.w	r7, [sp], #4
 801426c:	4770      	bx	lr

0801426e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 801426e:	b480      	push	{r7}
 8014270:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8014272:	e7fe      	b.n	8014272 <HardFault_Handler+0x4>

08014274 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8014274:	b480      	push	{r7}
 8014276:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8014278:	e7fe      	b.n	8014278 <MemManage_Handler+0x4>

0801427a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 801427a:	b480      	push	{r7}
 801427c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 801427e:	e7fe      	b.n	801427e <BusFault_Handler+0x4>

08014280 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8014280:	b480      	push	{r7}
 8014282:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8014284:	e7fe      	b.n	8014284 <UsageFault_Handler+0x4>

08014286 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8014286:	b480      	push	{r7}
 8014288:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 801428a:	bf00      	nop
 801428c:	46bd      	mov	sp, r7
 801428e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014292:	4770      	bx	lr

08014294 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8014294:	b580      	push	{r7, lr}
 8014296:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8014298:	f7ec fc06 	bl	8000aa8 <HAL_IncTick>
#if (INCLUDE_xTaskGetSchedulerState == 1 )
  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
 801429c:	f7f1 fcba 	bl	8005c14 <xTaskGetSchedulerState>
 80142a0:	4603      	mov	r3, r0
 80142a2:	2b01      	cmp	r3, #1
 80142a4:	d001      	beq.n	80142aa <SysTick_Handler+0x16>
  {
#endif /* INCLUDE_xTaskGetSchedulerState */
  xPortSysTickHandler();
 80142a6:	f7f2 f8a7 	bl	80063f8 <xPortSysTickHandler>
  }
#endif /* INCLUDE_xTaskGetSchedulerState */
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80142aa:	bf00      	nop
 80142ac:	bd80      	pop	{r7, pc}
	...

080142b0 <ETH_IRQHandler>:

/**
  * @brief This function handles Ethernet global interrupt.
  */
void ETH_IRQHandler(void)
{
 80142b0:	b580      	push	{r7, lr}
 80142b2:	b084      	sub	sp, #16
 80142b4:	af00      	add	r7, sp, #0
	__asm volatile
 80142b6:	f3ef 8211 	mrs	r2, BASEPRI
 80142ba:	f04f 0350 	mov.w	r3, #80	; 0x50
 80142be:	f383 8811 	msr	BASEPRI, r3
 80142c2:	f3bf 8f6f 	isb	sy
 80142c6:	f3bf 8f4f 	dsb	sy
 80142ca:	607a      	str	r2, [r7, #4]
 80142cc:	603b      	str	r3, [r7, #0]
	return ulOriginalBASEPRI;
 80142ce:	687b      	ldr	r3, [r7, #4]
  /* USER CODE BEGIN ETH_IRQn 0 */
  uint32_t ulReturn;
  ulReturn = taskENTER_CRITICAL_FROM_ISR();
 80142d0:	60fb      	str	r3, [r7, #12]
  /* USER CODE END ETH_IRQn 0 */
  HAL_ETH_IRQHandler(&heth);
 80142d2:	4806      	ldr	r0, [pc, #24]	; (80142ec <ETH_IRQHandler+0x3c>)
 80142d4:	f7ed fa32 	bl	800173c <HAL_ETH_IRQHandler>
 80142d8:	68fb      	ldr	r3, [r7, #12]
 80142da:	60bb      	str	r3, [r7, #8]
	__asm volatile
 80142dc:	68bb      	ldr	r3, [r7, #8]
 80142de:	f383 8811 	msr	BASEPRI, r3
  /* USER CODE BEGIN ETH_IRQn 1 */
  taskEXIT_CRITICAL_FROM_ISR( ulReturn );
  /* USER CODE END ETH_IRQn 1 */
}
 80142e2:	bf00      	nop
 80142e4:	3710      	adds	r7, #16
 80142e6:	46bd      	mov	sp, r7
 80142e8:	bd80      	pop	{r7, pc}
 80142ea:	bf00      	nop
 80142ec:	2400f4c0 	.word	0x2400f4c0

080142f0 <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 80142f0:	b480      	push	{r7}
 80142f2:	b085      	sub	sp, #20
 80142f4:	af00      	add	r7, sp, #0
 80142f6:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 80142f8:	4b11      	ldr	r3, [pc, #68]	; (8014340 <_sbrk+0x50>)
 80142fa:	681b      	ldr	r3, [r3, #0]
 80142fc:	2b00      	cmp	r3, #0
 80142fe:	d102      	bne.n	8014306 <_sbrk+0x16>
		heap_end = &end;
 8014300:	4b0f      	ldr	r3, [pc, #60]	; (8014340 <_sbrk+0x50>)
 8014302:	4a10      	ldr	r2, [pc, #64]	; (8014344 <_sbrk+0x54>)
 8014304:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 8014306:	4b0e      	ldr	r3, [pc, #56]	; (8014340 <_sbrk+0x50>)
 8014308:	681b      	ldr	r3, [r3, #0]
 801430a:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 801430c:	4b0c      	ldr	r3, [pc, #48]	; (8014340 <_sbrk+0x50>)
 801430e:	681a      	ldr	r2, [r3, #0]
 8014310:	687b      	ldr	r3, [r7, #4]
 8014312:	4413      	add	r3, r2
 8014314:	466a      	mov	r2, sp
 8014316:	4293      	cmp	r3, r2
 8014318:	d905      	bls.n	8014326 <_sbrk+0x36>
	{
		errno = ENOMEM;
 801431a:	4b0b      	ldr	r3, [pc, #44]	; (8014348 <_sbrk+0x58>)
 801431c:	220c      	movs	r2, #12
 801431e:	601a      	str	r2, [r3, #0]
		return (caddr_t) -1;
 8014320:	f04f 33ff 	mov.w	r3, #4294967295
 8014324:	e006      	b.n	8014334 <_sbrk+0x44>
	}

	heap_end += incr;
 8014326:	4b06      	ldr	r3, [pc, #24]	; (8014340 <_sbrk+0x50>)
 8014328:	681a      	ldr	r2, [r3, #0]
 801432a:	687b      	ldr	r3, [r7, #4]
 801432c:	4413      	add	r3, r2
 801432e:	4a04      	ldr	r2, [pc, #16]	; (8014340 <_sbrk+0x50>)
 8014330:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 8014332:	68fb      	ldr	r3, [r7, #12]
}
 8014334:	4618      	mov	r0, r3
 8014336:	3714      	adds	r7, #20
 8014338:	46bd      	mov	sp, r7
 801433a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801433e:	4770      	bx	lr
 8014340:	24008754 	.word	0x24008754
 8014344:	2400f5c0 	.word	0x2400f5c0
 8014348:	2400f304 	.word	0x2400f304

0801434c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 801434c:	b480      	push	{r7}
 801434e:	b083      	sub	sp, #12
 8014350:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8014352:	4b31      	ldr	r3, [pc, #196]	; (8014418 <SystemInit+0xcc>)
 8014354:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8014358:	4a2f      	ldr	r2, [pc, #188]	; (8014418 <SystemInit+0xcc>)
 801435a:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 801435e:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8014362:	4b2e      	ldr	r3, [pc, #184]	; (801441c <SystemInit+0xd0>)
 8014364:	681b      	ldr	r3, [r3, #0]
 8014366:	4a2d      	ldr	r2, [pc, #180]	; (801441c <SystemInit+0xd0>)
 8014368:	f043 0301 	orr.w	r3, r3, #1
 801436c:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 801436e:	4b2b      	ldr	r3, [pc, #172]	; (801441c <SystemInit+0xd0>)
 8014370:	2200      	movs	r2, #0
 8014372:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, CSSON , CSION,RC48ON, CSIKERON PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8014374:	4b29      	ldr	r3, [pc, #164]	; (801441c <SystemInit+0xd0>)
 8014376:	681a      	ldr	r2, [r3, #0]
 8014378:	4928      	ldr	r1, [pc, #160]	; (801441c <SystemInit+0xd0>)
 801437a:	4b29      	ldr	r3, [pc, #164]	; (8014420 <SystemInit+0xd4>)
 801437c:	4013      	ands	r3, r2
 801437e:	600b      	str	r3, [r1, #0]

  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 8014380:	4b26      	ldr	r3, [pc, #152]	; (801441c <SystemInit+0xd0>)
 8014382:	2200      	movs	r2, #0
 8014384:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8014386:	4b25      	ldr	r3, [pc, #148]	; (801441c <SystemInit+0xd0>)
 8014388:	2200      	movs	r2, #0
 801438a:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 801438c:	4b23      	ldr	r3, [pc, #140]	; (801441c <SystemInit+0xd0>)
 801438e:	2200      	movs	r2, #0
 8014390:	621a      	str	r2, [r3, #32]

  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x00000000;
 8014392:	4b22      	ldr	r3, [pc, #136]	; (801441c <SystemInit+0xd0>)
 8014394:	2200      	movs	r2, #0
 8014396:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x00000000;
 8014398:	4b20      	ldr	r3, [pc, #128]	; (801441c <SystemInit+0xd0>)
 801439a:	2200      	movs	r2, #0
 801439c:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x00000000;
 801439e:	4b1f      	ldr	r3, [pc, #124]	; (801441c <SystemInit+0xd0>)
 80143a0:	2200      	movs	r2, #0
 80143a2:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 80143a4:	4b1d      	ldr	r3, [pc, #116]	; (801441c <SystemInit+0xd0>)
 80143a6:	2200      	movs	r2, #0
 80143a8:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x00000000;
 80143aa:	4b1c      	ldr	r3, [pc, #112]	; (801441c <SystemInit+0xd0>)
 80143ac:	2200      	movs	r2, #0
 80143ae:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 80143b0:	4b1a      	ldr	r3, [pc, #104]	; (801441c <SystemInit+0xd0>)
 80143b2:	2200      	movs	r2, #0
 80143b4:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x00000000;
 80143b6:	4b19      	ldr	r3, [pc, #100]	; (801441c <SystemInit+0xd0>)
 80143b8:	2200      	movs	r2, #0
 80143ba:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 80143bc:	4b17      	ldr	r3, [pc, #92]	; (801441c <SystemInit+0xd0>)
 80143be:	2200      	movs	r2, #0
 80143c0:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 80143c2:	4b16      	ldr	r3, [pc, #88]	; (801441c <SystemInit+0xd0>)
 80143c4:	681b      	ldr	r3, [r3, #0]
 80143c6:	4a15      	ldr	r2, [pc, #84]	; (801441c <SystemInit+0xd0>)
 80143c8:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80143cc:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 80143ce:	4b13      	ldr	r3, [pc, #76]	; (801441c <SystemInit+0xd0>)
 80143d0:	2200      	movs	r2, #0
 80143d2:	661a      	str	r2, [r3, #96]	; 0x60

#if defined (DATA_IN_D2_SRAM)
  /* in case of initialized data in D2 SRAM (AHB SRAM) , enable the D2 SRAM clock ((AHB SRAM clock) */
#if defined(RCC_AHB2ENR_D2SRAM1EN)
  RCC->AHB2ENR |= (RCC_AHB2ENR_D2SRAM1EN | RCC_AHB2ENR_D2SRAM2EN | RCC_AHB2ENR_D2SRAM3EN);
 80143d4:	4b11      	ldr	r3, [pc, #68]	; (801441c <SystemInit+0xd0>)
 80143d6:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
 80143da:	4a10      	ldr	r2, [pc, #64]	; (801441c <SystemInit+0xd0>)
 80143dc:	f043 4360 	orr.w	r3, r3, #3758096384	; 0xe0000000
 80143e0:	f8c2 30dc 	str.w	r3, [r2, #220]	; 0xdc
#else
  RCC->AHB2ENR |= (RCC_AHB2ENR_AHBSRAM1EN | RCC_AHB2ENR_AHBSRAM2EN);
#endif /* RCC_AHB2ENR_D2SRAM1EN */

  tmpreg = RCC->AHB2ENR;
 80143e4:	4b0d      	ldr	r3, [pc, #52]	; (801441c <SystemInit+0xd0>)
 80143e6:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
 80143ea:	607b      	str	r3, [r7, #4]
  (void) tmpreg;
 80143ec:	687b      	ldr	r3, [r7, #4]
  SCB->VTOR = FLASH_BANK2_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
#endif /* VECT_TAB_SRAM */

#else
  /* dual core CM7 or single core line */
  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 80143ee:	4b0d      	ldr	r3, [pc, #52]	; (8014424 <SystemInit+0xd8>)
 80143f0:	681a      	ldr	r2, [r3, #0]
 80143f2:	4b0d      	ldr	r3, [pc, #52]	; (8014428 <SystemInit+0xdc>)
 80143f4:	4013      	ands	r3, r2
 80143f6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80143fa:	d202      	bcs.n	8014402 <SystemInit+0xb6>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 80143fc:	4b0b      	ldr	r3, [pc, #44]	; (801442c <SystemInit+0xe0>)
 80143fe:	2201      	movs	r2, #1
 8014400:	601a      	str	r2, [r3, #0]

  /* Configure the Vector Table location add offset address for cortex-M7 ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = D1_AXISRAM_BASE  | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM */
#else
  SCB->VTOR = FLASH_BANK1_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8014402:	4b05      	ldr	r3, [pc, #20]	; (8014418 <SystemInit+0xcc>)
 8014404:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8014408:	609a      	str	r2, [r3, #8]
#endif

#endif /*DUAL_CORE && CORE_CM4*/

}
 801440a:	bf00      	nop
 801440c:	370c      	adds	r7, #12
 801440e:	46bd      	mov	sp, r7
 8014410:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014414:	4770      	bx	lr
 8014416:	bf00      	nop
 8014418:	e000ed00 	.word	0xe000ed00
 801441c:	58024400 	.word	0x58024400
 8014420:	eaf6ed7f 	.word	0xeaf6ed7f
 8014424:	5c001000 	.word	0x5c001000
 8014428:	ffff0000 	.word	0xffff0000
 801442c:	51008108 	.word	0x51008108

08014430 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8014430:	f8df d034 	ldr.w	sp, [pc, #52]	; 8014468 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8014434:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8014436:	e003      	b.n	8014440 <LoopCopyDataInit>

08014438 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8014438:	4b0c      	ldr	r3, [pc, #48]	; (801446c <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 801443a:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 801443c:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 801443e:	3104      	adds	r1, #4

08014440 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8014440:	480b      	ldr	r0, [pc, #44]	; (8014470 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8014442:	4b0c      	ldr	r3, [pc, #48]	; (8014474 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8014444:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8014446:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8014448:	d3f6      	bcc.n	8014438 <CopyDataInit>
  ldr  r2, =_sbss
 801444a:	4a0b      	ldr	r2, [pc, #44]	; (8014478 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 801444c:	e002      	b.n	8014454 <LoopFillZerobss>

0801444e <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 801444e:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8014450:	f842 3b04 	str.w	r3, [r2], #4

08014454 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8014454:	4b09      	ldr	r3, [pc, #36]	; (801447c <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8014456:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8014458:	d3f9      	bcc.n	801444e <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 801445a:	f7ff ff77 	bl	801434c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 801445e:	f001 fbef 	bl	8015c40 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8014462:	f7ff fdeb 	bl	801403c <main>
  bx  lr    
 8014466:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8014468:	24080000 	.word	0x24080000
  ldr  r3, =_sidata
 801446c:	0801c4b0 	.word	0x0801c4b0
  ldr  r0, =_sdata
 8014470:	24000000 	.word	0x24000000
  ldr  r3, =_edata
 8014474:	24000204 	.word	0x24000204
  ldr  r2, =_sbss
 8014478:	24000204 	.word	0x24000204
  ldr  r3, = _ebss
 801447c:	2400f5bc 	.word	0x2400f5bc

08014480 <ADC3_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8014480:	e7fe      	b.n	8014480 <ADC3_IRQHandler>

08014482 <ITM_SendChar>:
           \li Is blocking when a debugger is connected, but the previous character sent has not been transmitted.
  \param [in]     ch  Character to transmit.
  \returns            Character to transmit.
 */
__STATIC_INLINE uint32_t ITM_SendChar (uint32_t ch)
{
 8014482:	b480      	push	{r7}
 8014484:	b083      	sub	sp, #12
 8014486:	af00      	add	r7, sp, #0
 8014488:	6078      	str	r0, [r7, #4]
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 801448a:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 801448e:	f8d3 3e80 	ldr.w	r3, [r3, #3712]	; 0xe80
 8014492:	f003 0301 	and.w	r3, r3, #1
 8014496:	2b00      	cmp	r3, #0
 8014498:	d013      	beq.n	80144c2 <ITM_SendChar+0x40>
      ((ITM->TER & 1UL               ) != 0UL)   )     /* ITM Port #0 enabled */
 801449a:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 801449e:	f8d3 3e00 	ldr.w	r3, [r3, #3584]	; 0xe00
 80144a2:	f003 0301 	and.w	r3, r3, #1
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 80144a6:	2b00      	cmp	r3, #0
 80144a8:	d00b      	beq.n	80144c2 <ITM_SendChar+0x40>
  {
    while (ITM->PORT[0U].u32 == 0UL)
 80144aa:	e000      	b.n	80144ae <ITM_SendChar+0x2c>
    {
      __NOP();
 80144ac:	bf00      	nop
    while (ITM->PORT[0U].u32 == 0UL)
 80144ae:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 80144b2:	681b      	ldr	r3, [r3, #0]
 80144b4:	2b00      	cmp	r3, #0
 80144b6:	d0f9      	beq.n	80144ac <ITM_SendChar+0x2a>
    }
    ITM->PORT[0U].u8 = (uint8_t)ch;
 80144b8:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 80144bc:	687a      	ldr	r2, [r7, #4]
 80144be:	b2d2      	uxtb	r2, r2
 80144c0:	701a      	strb	r2, [r3, #0]
  }
  return (ch);
 80144c2:	687b      	ldr	r3, [r7, #4]
}
 80144c4:	4618      	mov	r0, r3
 80144c6:	370c      	adds	r7, #12
 80144c8:	46bd      	mov	sp, r7
 80144ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80144ce:	4770      	bx	lr

080144d0 <_out_null>:
}


// internal null output
static inline void _out_null(char character, void* buffer, size_t idx, size_t maxlen)
{
 80144d0:	b480      	push	{r7}
 80144d2:	b085      	sub	sp, #20
 80144d4:	af00      	add	r7, sp, #0
 80144d6:	60b9      	str	r1, [r7, #8]
 80144d8:	607a      	str	r2, [r7, #4]
 80144da:	603b      	str	r3, [r7, #0]
 80144dc:	4603      	mov	r3, r0
 80144de:	73fb      	strb	r3, [r7, #15]
  (void)character; (void)buffer; (void)idx; (void)maxlen;
}
 80144e0:	bf00      	nop
 80144e2:	3714      	adds	r7, #20
 80144e4:	46bd      	mov	sp, r7
 80144e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80144ea:	4770      	bx	lr

080144ec <_out_char>:


// internal _putchar wrapper
static inline void _out_char(char character, void* buffer, size_t idx, size_t maxlen)
{
 80144ec:	b580      	push	{r7, lr}
 80144ee:	b084      	sub	sp, #16
 80144f0:	af00      	add	r7, sp, #0
 80144f2:	60b9      	str	r1, [r7, #8]
 80144f4:	607a      	str	r2, [r7, #4]
 80144f6:	603b      	str	r3, [r7, #0]
 80144f8:	4603      	mov	r3, r0
 80144fa:	73fb      	strb	r3, [r7, #15]
  (void)buffer; (void)idx; (void)maxlen;
  //if (character) {
	 ITM_SendChar (character);
 80144fc:	7bfb      	ldrb	r3, [r7, #15]
 80144fe:	4618      	mov	r0, r3
 8014500:	f7ff ffbf 	bl	8014482 <ITM_SendChar>
    //_putchar(character);
  //}
}
 8014504:	bf00      	nop
 8014506:	3710      	adds	r7, #16
 8014508:	46bd      	mov	sp, r7
 801450a:	bd80      	pop	{r7, pc}

0801450c <_strnlen_s>:


// internal secure strlen
// \return The length of the string (excluding the terminating 0) limited by 'maxsize'
static inline unsigned int _strnlen_s(const char* str, size_t maxsize)
{
 801450c:	b480      	push	{r7}
 801450e:	b085      	sub	sp, #20
 8014510:	af00      	add	r7, sp, #0
 8014512:	6078      	str	r0, [r7, #4]
 8014514:	6039      	str	r1, [r7, #0]
  const char* s;
  for (s = str; *s && maxsize--; ++s);
 8014516:	687b      	ldr	r3, [r7, #4]
 8014518:	60fb      	str	r3, [r7, #12]
 801451a:	e002      	b.n	8014522 <_strnlen_s+0x16>
 801451c:	68fb      	ldr	r3, [r7, #12]
 801451e:	3301      	adds	r3, #1
 8014520:	60fb      	str	r3, [r7, #12]
 8014522:	68fb      	ldr	r3, [r7, #12]
 8014524:	781b      	ldrb	r3, [r3, #0]
 8014526:	2b00      	cmp	r3, #0
 8014528:	d004      	beq.n	8014534 <_strnlen_s+0x28>
 801452a:	683b      	ldr	r3, [r7, #0]
 801452c:	1e5a      	subs	r2, r3, #1
 801452e:	603a      	str	r2, [r7, #0]
 8014530:	2b00      	cmp	r3, #0
 8014532:	d1f3      	bne.n	801451c <_strnlen_s+0x10>
  return (unsigned int)(s - str);
 8014534:	68fa      	ldr	r2, [r7, #12]
 8014536:	687b      	ldr	r3, [r7, #4]
 8014538:	1ad3      	subs	r3, r2, r3
}
 801453a:	4618      	mov	r0, r3
 801453c:	3714      	adds	r7, #20
 801453e:	46bd      	mov	sp, r7
 8014540:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014544:	4770      	bx	lr

08014546 <_is_digit>:


// internal test if char is a digit (0-9)
// \return true if char is a digit
static inline bool _is_digit(char ch)
{
 8014546:	b480      	push	{r7}
 8014548:	b083      	sub	sp, #12
 801454a:	af00      	add	r7, sp, #0
 801454c:	4603      	mov	r3, r0
 801454e:	71fb      	strb	r3, [r7, #7]
  return (ch >= '0') && (ch <= '9');
 8014550:	79fb      	ldrb	r3, [r7, #7]
 8014552:	2b2f      	cmp	r3, #47	; 0x2f
 8014554:	d904      	bls.n	8014560 <_is_digit+0x1a>
 8014556:	79fb      	ldrb	r3, [r7, #7]
 8014558:	2b39      	cmp	r3, #57	; 0x39
 801455a:	d801      	bhi.n	8014560 <_is_digit+0x1a>
 801455c:	2301      	movs	r3, #1
 801455e:	e000      	b.n	8014562 <_is_digit+0x1c>
 8014560:	2300      	movs	r3, #0
 8014562:	f003 0301 	and.w	r3, r3, #1
 8014566:	b2db      	uxtb	r3, r3
}
 8014568:	4618      	mov	r0, r3
 801456a:	370c      	adds	r7, #12
 801456c:	46bd      	mov	sp, r7
 801456e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014572:	4770      	bx	lr

08014574 <_atoi>:


// internal ASCII string to unsigned int conversion
static unsigned int _atoi(const char** str)
{
 8014574:	b580      	push	{r7, lr}
 8014576:	b084      	sub	sp, #16
 8014578:	af00      	add	r7, sp, #0
 801457a:	6078      	str	r0, [r7, #4]
  unsigned int i = 0U;
 801457c:	2300      	movs	r3, #0
 801457e:	60fb      	str	r3, [r7, #12]
  while (_is_digit(**str)) {
 8014580:	e00e      	b.n	80145a0 <_atoi+0x2c>
    i = i * 10U + (unsigned int)(*((*str)++) - '0');
 8014582:	68fa      	ldr	r2, [r7, #12]
 8014584:	4613      	mov	r3, r2
 8014586:	009b      	lsls	r3, r3, #2
 8014588:	4413      	add	r3, r2
 801458a:	005b      	lsls	r3, r3, #1
 801458c:	4618      	mov	r0, r3
 801458e:	687b      	ldr	r3, [r7, #4]
 8014590:	681b      	ldr	r3, [r3, #0]
 8014592:	1c59      	adds	r1, r3, #1
 8014594:	687a      	ldr	r2, [r7, #4]
 8014596:	6011      	str	r1, [r2, #0]
 8014598:	781b      	ldrb	r3, [r3, #0]
 801459a:	4403      	add	r3, r0
 801459c:	3b30      	subs	r3, #48	; 0x30
 801459e:	60fb      	str	r3, [r7, #12]
  while (_is_digit(**str)) {
 80145a0:	687b      	ldr	r3, [r7, #4]
 80145a2:	681b      	ldr	r3, [r3, #0]
 80145a4:	781b      	ldrb	r3, [r3, #0]
 80145a6:	4618      	mov	r0, r3
 80145a8:	f7ff ffcd 	bl	8014546 <_is_digit>
 80145ac:	4603      	mov	r3, r0
 80145ae:	2b00      	cmp	r3, #0
 80145b0:	d1e7      	bne.n	8014582 <_atoi+0xe>
  }
  return i;
 80145b2:	68fb      	ldr	r3, [r7, #12]
}
 80145b4:	4618      	mov	r0, r3
 80145b6:	3710      	adds	r7, #16
 80145b8:	46bd      	mov	sp, r7
 80145ba:	bd80      	pop	{r7, pc}

080145bc <_out_rev>:


// output the specified string in reverse, taking care of any zero-padding
static size_t _out_rev(out_fct_type out, char* buffer, size_t idx, size_t maxlen, const char* buf, size_t len, unsigned int width, unsigned int flags)
{
 80145bc:	b590      	push	{r4, r7, lr}
 80145be:	b087      	sub	sp, #28
 80145c0:	af00      	add	r7, sp, #0
 80145c2:	60f8      	str	r0, [r7, #12]
 80145c4:	60b9      	str	r1, [r7, #8]
 80145c6:	607a      	str	r2, [r7, #4]
 80145c8:	603b      	str	r3, [r7, #0]
  const size_t start_idx = idx;
 80145ca:	687b      	ldr	r3, [r7, #4]
 80145cc:	613b      	str	r3, [r7, #16]

  // pad spaces up to given width
  if (!(flags & FLAGS_LEFT) && !(flags & FLAGS_ZEROPAD)) {
 80145ce:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80145d0:	f003 0302 	and.w	r3, r3, #2
 80145d4:	2b00      	cmp	r3, #0
 80145d6:	d125      	bne.n	8014624 <_out_rev+0x68>
 80145d8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80145da:	f003 0301 	and.w	r3, r3, #1
 80145de:	2b00      	cmp	r3, #0
 80145e0:	d120      	bne.n	8014624 <_out_rev+0x68>
    for (size_t i = len; i < width; i++) {
 80145e2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80145e4:	617b      	str	r3, [r7, #20]
 80145e6:	e00a      	b.n	80145fe <_out_rev+0x42>
      out(' ', buffer, idx++, maxlen);
 80145e8:	687a      	ldr	r2, [r7, #4]
 80145ea:	1c53      	adds	r3, r2, #1
 80145ec:	607b      	str	r3, [r7, #4]
 80145ee:	68fc      	ldr	r4, [r7, #12]
 80145f0:	683b      	ldr	r3, [r7, #0]
 80145f2:	68b9      	ldr	r1, [r7, #8]
 80145f4:	2020      	movs	r0, #32
 80145f6:	47a0      	blx	r4
    for (size_t i = len; i < width; i++) {
 80145f8:	697b      	ldr	r3, [r7, #20]
 80145fa:	3301      	adds	r3, #1
 80145fc:	617b      	str	r3, [r7, #20]
 80145fe:	697a      	ldr	r2, [r7, #20]
 8014600:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014602:	429a      	cmp	r2, r3
 8014604:	d3f0      	bcc.n	80145e8 <_out_rev+0x2c>
    }
  }

  // reverse string
  while (len) {
 8014606:	e00d      	b.n	8014624 <_out_rev+0x68>
    out(buf[--len], buffer, idx++, maxlen);
 8014608:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801460a:	3b01      	subs	r3, #1
 801460c:	62fb      	str	r3, [r7, #44]	; 0x2c
 801460e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8014610:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014612:	4413      	add	r3, r2
 8014614:	7818      	ldrb	r0, [r3, #0]
 8014616:	687a      	ldr	r2, [r7, #4]
 8014618:	1c53      	adds	r3, r2, #1
 801461a:	607b      	str	r3, [r7, #4]
 801461c:	68fc      	ldr	r4, [r7, #12]
 801461e:	683b      	ldr	r3, [r7, #0]
 8014620:	68b9      	ldr	r1, [r7, #8]
 8014622:	47a0      	blx	r4
  while (len) {
 8014624:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014626:	2b00      	cmp	r3, #0
 8014628:	d1ee      	bne.n	8014608 <_out_rev+0x4c>
  }

  // append pad spaces up to given width
  if (flags & FLAGS_LEFT) {
 801462a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801462c:	f003 0302 	and.w	r3, r3, #2
 8014630:	2b00      	cmp	r3, #0
 8014632:	d00e      	beq.n	8014652 <_out_rev+0x96>
    while (idx - start_idx < width) {
 8014634:	e007      	b.n	8014646 <_out_rev+0x8a>
      out(' ', buffer, idx++, maxlen);
 8014636:	687a      	ldr	r2, [r7, #4]
 8014638:	1c53      	adds	r3, r2, #1
 801463a:	607b      	str	r3, [r7, #4]
 801463c:	68fc      	ldr	r4, [r7, #12]
 801463e:	683b      	ldr	r3, [r7, #0]
 8014640:	68b9      	ldr	r1, [r7, #8]
 8014642:	2020      	movs	r0, #32
 8014644:	47a0      	blx	r4
    while (idx - start_idx < width) {
 8014646:	687a      	ldr	r2, [r7, #4]
 8014648:	693b      	ldr	r3, [r7, #16]
 801464a:	1ad3      	subs	r3, r2, r3
 801464c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801464e:	429a      	cmp	r2, r3
 8014650:	d8f1      	bhi.n	8014636 <_out_rev+0x7a>
    }
  }

  return idx;
 8014652:	687b      	ldr	r3, [r7, #4]
}
 8014654:	4618      	mov	r0, r3
 8014656:	371c      	adds	r7, #28
 8014658:	46bd      	mov	sp, r7
 801465a:	bd90      	pop	{r4, r7, pc}

0801465c <_ntoa_format>:


// internal itoa format
static size_t _ntoa_format(out_fct_type out, char* buffer, size_t idx, size_t maxlen, char* buf, size_t len, bool negative, unsigned int base, unsigned int prec, unsigned int width, unsigned int flags)
{
 801465c:	b580      	push	{r7, lr}
 801465e:	b088      	sub	sp, #32
 8014660:	af04      	add	r7, sp, #16
 8014662:	60f8      	str	r0, [r7, #12]
 8014664:	60b9      	str	r1, [r7, #8]
 8014666:	607a      	str	r2, [r7, #4]
 8014668:	603b      	str	r3, [r7, #0]
  // pad leading zeros
  if (!(flags & FLAGS_LEFT)) {
 801466a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801466c:	f003 0302 	and.w	r3, r3, #2
 8014670:	2b00      	cmp	r3, #0
 8014672:	d136      	bne.n	80146e2 <_ntoa_format+0x86>
    if (width && (flags & FLAGS_ZEROPAD) && (negative || (flags & (FLAGS_PLUS | FLAGS_SPACE)))) {
 8014674:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014676:	2b00      	cmp	r3, #0
 8014678:	d018      	beq.n	80146ac <_ntoa_format+0x50>
 801467a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801467c:	f003 0301 	and.w	r3, r3, #1
 8014680:	2b00      	cmp	r3, #0
 8014682:	d013      	beq.n	80146ac <_ntoa_format+0x50>
 8014684:	f897 3020 	ldrb.w	r3, [r7, #32]
 8014688:	2b00      	cmp	r3, #0
 801468a:	d104      	bne.n	8014696 <_ntoa_format+0x3a>
 801468c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801468e:	f003 030c 	and.w	r3, r3, #12
 8014692:	2b00      	cmp	r3, #0
 8014694:	d00a      	beq.n	80146ac <_ntoa_format+0x50>
      width--;
 8014696:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014698:	3b01      	subs	r3, #1
 801469a:	62fb      	str	r3, [r7, #44]	; 0x2c
    }
    while ((len < prec) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
 801469c:	e006      	b.n	80146ac <_ntoa_format+0x50>
      buf[len++] = '0';
 801469e:	69fb      	ldr	r3, [r7, #28]
 80146a0:	1c5a      	adds	r2, r3, #1
 80146a2:	61fa      	str	r2, [r7, #28]
 80146a4:	69ba      	ldr	r2, [r7, #24]
 80146a6:	4413      	add	r3, r2
 80146a8:	2230      	movs	r2, #48	; 0x30
 80146aa:	701a      	strb	r2, [r3, #0]
    while ((len < prec) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
 80146ac:	69fa      	ldr	r2, [r7, #28]
 80146ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80146b0:	429a      	cmp	r2, r3
 80146b2:	d20a      	bcs.n	80146ca <_ntoa_format+0x6e>
 80146b4:	69fb      	ldr	r3, [r7, #28]
 80146b6:	2b1f      	cmp	r3, #31
 80146b8:	d9f1      	bls.n	801469e <_ntoa_format+0x42>
    }
    while ((flags & FLAGS_ZEROPAD) && (len < width) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
 80146ba:	e006      	b.n	80146ca <_ntoa_format+0x6e>
      buf[len++] = '0';
 80146bc:	69fb      	ldr	r3, [r7, #28]
 80146be:	1c5a      	adds	r2, r3, #1
 80146c0:	61fa      	str	r2, [r7, #28]
 80146c2:	69ba      	ldr	r2, [r7, #24]
 80146c4:	4413      	add	r3, r2
 80146c6:	2230      	movs	r2, #48	; 0x30
 80146c8:	701a      	strb	r2, [r3, #0]
    while ((flags & FLAGS_ZEROPAD) && (len < width) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
 80146ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80146cc:	f003 0301 	and.w	r3, r3, #1
 80146d0:	2b00      	cmp	r3, #0
 80146d2:	d006      	beq.n	80146e2 <_ntoa_format+0x86>
 80146d4:	69fa      	ldr	r2, [r7, #28]
 80146d6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80146d8:	429a      	cmp	r2, r3
 80146da:	d202      	bcs.n	80146e2 <_ntoa_format+0x86>
 80146dc:	69fb      	ldr	r3, [r7, #28]
 80146de:	2b1f      	cmp	r3, #31
 80146e0:	d9ec      	bls.n	80146bc <_ntoa_format+0x60>
    }
  }

  // handle hash
  if (flags & FLAGS_HASH) {
 80146e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80146e4:	f003 0310 	and.w	r3, r3, #16
 80146e8:	2b00      	cmp	r3, #0
 80146ea:	d058      	beq.n	801479e <_ntoa_format+0x142>
    if (!(flags & FLAGS_PRECISION) && len && ((len == prec) || (len == width))) {
 80146ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80146ee:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80146f2:	2b00      	cmp	r3, #0
 80146f4:	d116      	bne.n	8014724 <_ntoa_format+0xc8>
 80146f6:	69fb      	ldr	r3, [r7, #28]
 80146f8:	2b00      	cmp	r3, #0
 80146fa:	d013      	beq.n	8014724 <_ntoa_format+0xc8>
 80146fc:	69fa      	ldr	r2, [r7, #28]
 80146fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014700:	429a      	cmp	r2, r3
 8014702:	d003      	beq.n	801470c <_ntoa_format+0xb0>
 8014704:	69fa      	ldr	r2, [r7, #28]
 8014706:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014708:	429a      	cmp	r2, r3
 801470a:	d10b      	bne.n	8014724 <_ntoa_format+0xc8>
      len--;
 801470c:	69fb      	ldr	r3, [r7, #28]
 801470e:	3b01      	subs	r3, #1
 8014710:	61fb      	str	r3, [r7, #28]
      if (len && (base == 16U)) {
 8014712:	69fb      	ldr	r3, [r7, #28]
 8014714:	2b00      	cmp	r3, #0
 8014716:	d005      	beq.n	8014724 <_ntoa_format+0xc8>
 8014718:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801471a:	2b10      	cmp	r3, #16
 801471c:	d102      	bne.n	8014724 <_ntoa_format+0xc8>
        len--;
 801471e:	69fb      	ldr	r3, [r7, #28]
 8014720:	3b01      	subs	r3, #1
 8014722:	61fb      	str	r3, [r7, #28]
      }
    }
    if ((base == 16U) && !(flags & FLAGS_UPPERCASE) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
 8014724:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014726:	2b10      	cmp	r3, #16
 8014728:	d10f      	bne.n	801474a <_ntoa_format+0xee>
 801472a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801472c:	f003 0320 	and.w	r3, r3, #32
 8014730:	2b00      	cmp	r3, #0
 8014732:	d10a      	bne.n	801474a <_ntoa_format+0xee>
 8014734:	69fb      	ldr	r3, [r7, #28]
 8014736:	2b1f      	cmp	r3, #31
 8014738:	d807      	bhi.n	801474a <_ntoa_format+0xee>
      buf[len++] = 'x';
 801473a:	69fb      	ldr	r3, [r7, #28]
 801473c:	1c5a      	adds	r2, r3, #1
 801473e:	61fa      	str	r2, [r7, #28]
 8014740:	69ba      	ldr	r2, [r7, #24]
 8014742:	4413      	add	r3, r2
 8014744:	2278      	movs	r2, #120	; 0x78
 8014746:	701a      	strb	r2, [r3, #0]
 8014748:	e01f      	b.n	801478a <_ntoa_format+0x12e>
    }
    else if ((base == 16U) && (flags & FLAGS_UPPERCASE) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
 801474a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801474c:	2b10      	cmp	r3, #16
 801474e:	d10f      	bne.n	8014770 <_ntoa_format+0x114>
 8014750:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014752:	f003 0320 	and.w	r3, r3, #32
 8014756:	2b00      	cmp	r3, #0
 8014758:	d00a      	beq.n	8014770 <_ntoa_format+0x114>
 801475a:	69fb      	ldr	r3, [r7, #28]
 801475c:	2b1f      	cmp	r3, #31
 801475e:	d807      	bhi.n	8014770 <_ntoa_format+0x114>
      buf[len++] = 'X';
 8014760:	69fb      	ldr	r3, [r7, #28]
 8014762:	1c5a      	adds	r2, r3, #1
 8014764:	61fa      	str	r2, [r7, #28]
 8014766:	69ba      	ldr	r2, [r7, #24]
 8014768:	4413      	add	r3, r2
 801476a:	2258      	movs	r2, #88	; 0x58
 801476c:	701a      	strb	r2, [r3, #0]
 801476e:	e00c      	b.n	801478a <_ntoa_format+0x12e>
    }
    else if ((base == 2U) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
 8014770:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014772:	2b02      	cmp	r3, #2
 8014774:	d109      	bne.n	801478a <_ntoa_format+0x12e>
 8014776:	69fb      	ldr	r3, [r7, #28]
 8014778:	2b1f      	cmp	r3, #31
 801477a:	d806      	bhi.n	801478a <_ntoa_format+0x12e>
      buf[len++] = 'b';
 801477c:	69fb      	ldr	r3, [r7, #28]
 801477e:	1c5a      	adds	r2, r3, #1
 8014780:	61fa      	str	r2, [r7, #28]
 8014782:	69ba      	ldr	r2, [r7, #24]
 8014784:	4413      	add	r3, r2
 8014786:	2262      	movs	r2, #98	; 0x62
 8014788:	701a      	strb	r2, [r3, #0]
    }
    if (len < PRINTF_NTOA_BUFFER_SIZE) {
 801478a:	69fb      	ldr	r3, [r7, #28]
 801478c:	2b1f      	cmp	r3, #31
 801478e:	d806      	bhi.n	801479e <_ntoa_format+0x142>
      buf[len++] = '0';
 8014790:	69fb      	ldr	r3, [r7, #28]
 8014792:	1c5a      	adds	r2, r3, #1
 8014794:	61fa      	str	r2, [r7, #28]
 8014796:	69ba      	ldr	r2, [r7, #24]
 8014798:	4413      	add	r3, r2
 801479a:	2230      	movs	r2, #48	; 0x30
 801479c:	701a      	strb	r2, [r3, #0]
    }
  }

  if (len < PRINTF_NTOA_BUFFER_SIZE) {
 801479e:	69fb      	ldr	r3, [r7, #28]
 80147a0:	2b1f      	cmp	r3, #31
 80147a2:	d824      	bhi.n	80147ee <_ntoa_format+0x192>
    if (negative) {
 80147a4:	f897 3020 	ldrb.w	r3, [r7, #32]
 80147a8:	2b00      	cmp	r3, #0
 80147aa:	d007      	beq.n	80147bc <_ntoa_format+0x160>
      buf[len++] = '-';
 80147ac:	69fb      	ldr	r3, [r7, #28]
 80147ae:	1c5a      	adds	r2, r3, #1
 80147b0:	61fa      	str	r2, [r7, #28]
 80147b2:	69ba      	ldr	r2, [r7, #24]
 80147b4:	4413      	add	r3, r2
 80147b6:	222d      	movs	r2, #45	; 0x2d
 80147b8:	701a      	strb	r2, [r3, #0]
 80147ba:	e018      	b.n	80147ee <_ntoa_format+0x192>
    }
    else if (flags & FLAGS_PLUS) {
 80147bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80147be:	f003 0304 	and.w	r3, r3, #4
 80147c2:	2b00      	cmp	r3, #0
 80147c4:	d007      	beq.n	80147d6 <_ntoa_format+0x17a>
      buf[len++] = '+';  // ignore the space if the '+' exists
 80147c6:	69fb      	ldr	r3, [r7, #28]
 80147c8:	1c5a      	adds	r2, r3, #1
 80147ca:	61fa      	str	r2, [r7, #28]
 80147cc:	69ba      	ldr	r2, [r7, #24]
 80147ce:	4413      	add	r3, r2
 80147d0:	222b      	movs	r2, #43	; 0x2b
 80147d2:	701a      	strb	r2, [r3, #0]
 80147d4:	e00b      	b.n	80147ee <_ntoa_format+0x192>
    }
    else if (flags & FLAGS_SPACE) {
 80147d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80147d8:	f003 0308 	and.w	r3, r3, #8
 80147dc:	2b00      	cmp	r3, #0
 80147de:	d006      	beq.n	80147ee <_ntoa_format+0x192>
      buf[len++] = ' ';
 80147e0:	69fb      	ldr	r3, [r7, #28]
 80147e2:	1c5a      	adds	r2, r3, #1
 80147e4:	61fa      	str	r2, [r7, #28]
 80147e6:	69ba      	ldr	r2, [r7, #24]
 80147e8:	4413      	add	r3, r2
 80147ea:	2220      	movs	r2, #32
 80147ec:	701a      	strb	r2, [r3, #0]
    }
  }

  return _out_rev(out, buffer, idx, maxlen, buf, len, width, flags);
 80147ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80147f0:	9303      	str	r3, [sp, #12]
 80147f2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80147f4:	9302      	str	r3, [sp, #8]
 80147f6:	69fb      	ldr	r3, [r7, #28]
 80147f8:	9301      	str	r3, [sp, #4]
 80147fa:	69bb      	ldr	r3, [r7, #24]
 80147fc:	9300      	str	r3, [sp, #0]
 80147fe:	683b      	ldr	r3, [r7, #0]
 8014800:	687a      	ldr	r2, [r7, #4]
 8014802:	68b9      	ldr	r1, [r7, #8]
 8014804:	68f8      	ldr	r0, [r7, #12]
 8014806:	f7ff fed9 	bl	80145bc <_out_rev>
 801480a:	4603      	mov	r3, r0
}
 801480c:	4618      	mov	r0, r3
 801480e:	3710      	adds	r7, #16
 8014810:	46bd      	mov	sp, r7
 8014812:	bd80      	pop	{r7, pc}

08014814 <_ntoa_long>:


// internal itoa for 'long' type
static size_t _ntoa_long(out_fct_type out, char* buffer, size_t idx, size_t maxlen, unsigned long value, bool negative, unsigned long base, unsigned int prec, unsigned int width, unsigned int flags)
{
 8014814:	b580      	push	{r7, lr}
 8014816:	b096      	sub	sp, #88	; 0x58
 8014818:	af08      	add	r7, sp, #32
 801481a:	60f8      	str	r0, [r7, #12]
 801481c:	60b9      	str	r1, [r7, #8]
 801481e:	607a      	str	r2, [r7, #4]
 8014820:	603b      	str	r3, [r7, #0]
  char buf[PRINTF_NTOA_BUFFER_SIZE];
  size_t len = 0U;
 8014822:	2300      	movs	r3, #0
 8014824:	637b      	str	r3, [r7, #52]	; 0x34

  // no hash for 0 values
  if (!value) {
 8014826:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8014828:	2b00      	cmp	r3, #0
 801482a:	d103      	bne.n	8014834 <_ntoa_long+0x20>
    flags &= ~FLAGS_HASH;
 801482c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801482e:	f023 0310 	bic.w	r3, r3, #16
 8014832:	657b      	str	r3, [r7, #84]	; 0x54
  }

  // write if precision != 0 and value is != 0
  if (!(flags & FLAGS_PRECISION) || value) {
 8014834:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8014836:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 801483a:	2b00      	cmp	r3, #0
 801483c:	d002      	beq.n	8014844 <_ntoa_long+0x30>
 801483e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8014840:	2b00      	cmp	r3, #0
 8014842:	d033      	beq.n	80148ac <_ntoa_long+0x98>
    do {
      const char digit = (char)(value % base);
 8014844:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8014846:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8014848:	fbb3 f2f2 	udiv	r2, r3, r2
 801484c:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 801484e:	fb01 f202 	mul.w	r2, r1, r2
 8014852:	1a9b      	subs	r3, r3, r2
 8014854:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
      buf[len++] = digit < 10 ? '0' + digit : (flags & FLAGS_UPPERCASE ? 'A' : 'a') + digit - 10;
 8014858:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 801485c:	2b09      	cmp	r3, #9
 801485e:	d804      	bhi.n	801486a <_ntoa_long+0x56>
 8014860:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8014864:	3330      	adds	r3, #48	; 0x30
 8014866:	b2da      	uxtb	r2, r3
 8014868:	e00d      	b.n	8014886 <_ntoa_long+0x72>
 801486a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801486c:	f003 0320 	and.w	r3, r3, #32
 8014870:	2b00      	cmp	r3, #0
 8014872:	d001      	beq.n	8014878 <_ntoa_long+0x64>
 8014874:	2241      	movs	r2, #65	; 0x41
 8014876:	e000      	b.n	801487a <_ntoa_long+0x66>
 8014878:	2261      	movs	r2, #97	; 0x61
 801487a:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 801487e:	4413      	add	r3, r2
 8014880:	b2db      	uxtb	r3, r3
 8014882:	3b0a      	subs	r3, #10
 8014884:	b2da      	uxtb	r2, r3
 8014886:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8014888:	1c59      	adds	r1, r3, #1
 801488a:	6379      	str	r1, [r7, #52]	; 0x34
 801488c:	f107 0138 	add.w	r1, r7, #56	; 0x38
 8014890:	440b      	add	r3, r1
 8014892:	f803 2c28 	strb.w	r2, [r3, #-40]
      value /= base;
 8014896:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8014898:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 801489a:	fbb2 f3f3 	udiv	r3, r2, r3
 801489e:	643b      	str	r3, [r7, #64]	; 0x40
    } while (value && (len < PRINTF_NTOA_BUFFER_SIZE));
 80148a0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80148a2:	2b00      	cmp	r3, #0
 80148a4:	d002      	beq.n	80148ac <_ntoa_long+0x98>
 80148a6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80148a8:	2b1f      	cmp	r3, #31
 80148aa:	d9cb      	bls.n	8014844 <_ntoa_long+0x30>
  }

  return _ntoa_format(out, buffer, idx, maxlen, buf, len, negative, (unsigned int)base, prec, width, flags);
 80148ac:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80148ae:	9306      	str	r3, [sp, #24]
 80148b0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80148b2:	9305      	str	r3, [sp, #20]
 80148b4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80148b6:	9304      	str	r3, [sp, #16]
 80148b8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80148ba:	9303      	str	r3, [sp, #12]
 80148bc:	f897 3044 	ldrb.w	r3, [r7, #68]	; 0x44
 80148c0:	9302      	str	r3, [sp, #8]
 80148c2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80148c4:	9301      	str	r3, [sp, #4]
 80148c6:	f107 0310 	add.w	r3, r7, #16
 80148ca:	9300      	str	r3, [sp, #0]
 80148cc:	683b      	ldr	r3, [r7, #0]
 80148ce:	687a      	ldr	r2, [r7, #4]
 80148d0:	68b9      	ldr	r1, [r7, #8]
 80148d2:	68f8      	ldr	r0, [r7, #12]
 80148d4:	f7ff fec2 	bl	801465c <_ntoa_format>
 80148d8:	4603      	mov	r3, r0
}
 80148da:	4618      	mov	r0, r3
 80148dc:	3738      	adds	r7, #56	; 0x38
 80148de:	46bd      	mov	sp, r7
 80148e0:	bd80      	pop	{r7, pc}

080148e2 <_ntoa_long_long>:


// internal itoa for 'long long' type
#if defined(PRINTF_SUPPORT_LONG_LONG)
static size_t _ntoa_long_long(out_fct_type out, char* buffer, size_t idx, size_t maxlen, unsigned long long value, bool negative, unsigned long long base, unsigned int prec, unsigned int width, unsigned int flags)
{
 80148e2:	b590      	push	{r4, r7, lr}
 80148e4:	b097      	sub	sp, #92	; 0x5c
 80148e6:	af08      	add	r7, sp, #32
 80148e8:	60f8      	str	r0, [r7, #12]
 80148ea:	60b9      	str	r1, [r7, #8]
 80148ec:	607a      	str	r2, [r7, #4]
 80148ee:	603b      	str	r3, [r7, #0]
  char buf[PRINTF_NTOA_BUFFER_SIZE];
  size_t len = 0U;
 80148f0:	2300      	movs	r3, #0
 80148f2:	637b      	str	r3, [r7, #52]	; 0x34

  // no hash for 0 values
  if (!value) {
 80148f4:	e9d7 3412 	ldrd	r3, r4, [r7, #72]	; 0x48
 80148f8:	4323      	orrs	r3, r4
 80148fa:	d103      	bne.n	8014904 <_ntoa_long_long+0x22>
    flags &= ~FLAGS_HASH;
 80148fc:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80148fe:	f023 0310 	bic.w	r3, r3, #16
 8014902:	66bb      	str	r3, [r7, #104]	; 0x68
  }

  // write if precision != 0 and value is != 0
  if (!(flags & FLAGS_PRECISION) || value) {
 8014904:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8014906:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 801490a:	2b00      	cmp	r3, #0
 801490c:	d003      	beq.n	8014916 <_ntoa_long_long+0x34>
 801490e:	e9d7 3412 	ldrd	r3, r4, [r7, #72]	; 0x48
 8014912:	4323      	orrs	r3, r4
 8014914:	d039      	beq.n	801498a <_ntoa_long_long+0xa8>
    do {
      const char digit = (char)(value % base);
 8014916:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 801491a:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 801491e:	f7eb fe45 	bl	80005ac <__aeabi_uldivmod>
 8014922:	461c      	mov	r4, r3
 8014924:	4613      	mov	r3, r2
 8014926:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
      buf[len++] = digit < 10 ? '0' + digit : (flags & FLAGS_UPPERCASE ? 'A' : 'a') + digit - 10;
 801492a:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 801492e:	2b09      	cmp	r3, #9
 8014930:	d804      	bhi.n	801493c <_ntoa_long_long+0x5a>
 8014932:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8014936:	3330      	adds	r3, #48	; 0x30
 8014938:	b2da      	uxtb	r2, r3
 801493a:	e00d      	b.n	8014958 <_ntoa_long_long+0x76>
 801493c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 801493e:	f003 0320 	and.w	r3, r3, #32
 8014942:	2b00      	cmp	r3, #0
 8014944:	d001      	beq.n	801494a <_ntoa_long_long+0x68>
 8014946:	2241      	movs	r2, #65	; 0x41
 8014948:	e000      	b.n	801494c <_ntoa_long_long+0x6a>
 801494a:	2261      	movs	r2, #97	; 0x61
 801494c:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8014950:	4413      	add	r3, r2
 8014952:	b2db      	uxtb	r3, r3
 8014954:	3b0a      	subs	r3, #10
 8014956:	b2da      	uxtb	r2, r3
 8014958:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801495a:	1c59      	adds	r1, r3, #1
 801495c:	6379      	str	r1, [r7, #52]	; 0x34
 801495e:	f107 0138 	add.w	r1, r7, #56	; 0x38
 8014962:	440b      	add	r3, r1
 8014964:	f803 2c28 	strb.w	r2, [r3, #-40]
      value /= base;
 8014968:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 801496c:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 8014970:	f7eb fe1c 	bl	80005ac <__aeabi_uldivmod>
 8014974:	4603      	mov	r3, r0
 8014976:	460c      	mov	r4, r1
 8014978:	e9c7 3412 	strd	r3, r4, [r7, #72]	; 0x48
    } while (value && (len < PRINTF_NTOA_BUFFER_SIZE));
 801497c:	e9d7 3412 	ldrd	r3, r4, [r7, #72]	; 0x48
 8014980:	4323      	orrs	r3, r4
 8014982:	d002      	beq.n	801498a <_ntoa_long_long+0xa8>
 8014984:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8014986:	2b1f      	cmp	r3, #31
 8014988:	d9c5      	bls.n	8014916 <_ntoa_long_long+0x34>
  }

  return _ntoa_format(out, buffer, idx, maxlen, buf, len, negative, (unsigned int)base, prec, width, flags);
 801498a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 801498c:	6eba      	ldr	r2, [r7, #104]	; 0x68
 801498e:	9206      	str	r2, [sp, #24]
 8014990:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8014992:	9205      	str	r2, [sp, #20]
 8014994:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8014996:	9204      	str	r2, [sp, #16]
 8014998:	9303      	str	r3, [sp, #12]
 801499a:	f897 3050 	ldrb.w	r3, [r7, #80]	; 0x50
 801499e:	9302      	str	r3, [sp, #8]
 80149a0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80149a2:	9301      	str	r3, [sp, #4]
 80149a4:	f107 0310 	add.w	r3, r7, #16
 80149a8:	9300      	str	r3, [sp, #0]
 80149aa:	683b      	ldr	r3, [r7, #0]
 80149ac:	687a      	ldr	r2, [r7, #4]
 80149ae:	68b9      	ldr	r1, [r7, #8]
 80149b0:	68f8      	ldr	r0, [r7, #12]
 80149b2:	f7ff fe53 	bl	801465c <_ntoa_format>
 80149b6:	4603      	mov	r3, r0
}
 80149b8:	4618      	mov	r0, r3
 80149ba:	373c      	adds	r7, #60	; 0x3c
 80149bc:	46bd      	mov	sp, r7
 80149be:	bd90      	pop	{r4, r7, pc}

080149c0 <_ftoa>:
#endif


// internal ftoa for fixed decimal floating point
static size_t _ftoa(out_fct_type out, char* buffer, size_t idx, size_t maxlen, double value, unsigned int prec, unsigned int width, unsigned int flags)
{
 80149c0:	b590      	push	{r4, r7, lr}
 80149c2:	b09d      	sub	sp, #116	; 0x74
 80149c4:	af04      	add	r7, sp, #16
 80149c6:	6178      	str	r0, [r7, #20]
 80149c8:	6139      	str	r1, [r7, #16]
 80149ca:	60fa      	str	r2, [r7, #12]
 80149cc:	60bb      	str	r3, [r7, #8]
 80149ce:	ed87 0b00 	vstr	d0, [r7]
  char buf[PRINTF_FTOA_BUFFER_SIZE];
  size_t len  = 0U;
 80149d2:	2300      	movs	r3, #0
 80149d4:	65fb      	str	r3, [r7, #92]	; 0x5c
  double diff = 0.0;
 80149d6:	f04f 0300 	mov.w	r3, #0
 80149da:	f04f 0400 	mov.w	r4, #0
 80149de:	e9c7 3410 	strd	r3, r4, [r7, #64]	; 0x40

  // powers of 10
  static const double pow10[] = { 1, 10, 100, 1000, 10000, 100000, 1000000, 10000000, 100000000, 1000000000 };

  // test for special values
  if (value != value)
 80149e2:	ed97 6b00 	vldr	d6, [r7]
 80149e6:	ed97 7b00 	vldr	d7, [r7]
 80149ea:	eeb4 6b47 	vcmp.f64	d6, d7
 80149ee:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80149f2:	d00f      	beq.n	8014a14 <_ftoa+0x54>
    return _out_rev(out, buffer, idx, maxlen, "nan", 3, width, flags);
 80149f4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80149f6:	9303      	str	r3, [sp, #12]
 80149f8:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80149fa:	9302      	str	r3, [sp, #8]
 80149fc:	2303      	movs	r3, #3
 80149fe:	9301      	str	r3, [sp, #4]
 8014a00:	4bb7      	ldr	r3, [pc, #732]	; (8014ce0 <_ftoa+0x320>)
 8014a02:	9300      	str	r3, [sp, #0]
 8014a04:	68bb      	ldr	r3, [r7, #8]
 8014a06:	68fa      	ldr	r2, [r7, #12]
 8014a08:	6939      	ldr	r1, [r7, #16]
 8014a0a:	6978      	ldr	r0, [r7, #20]
 8014a0c:	f7ff fdd6 	bl	80145bc <_out_rev>
 8014a10:	4603      	mov	r3, r0
 8014a12:	e21e      	b.n	8014e52 <_ftoa+0x492>
  if (value < -DBL_MAX)
 8014a14:	ed97 7b00 	vldr	d7, [r7]
 8014a18:	ed9f 6ba7 	vldr	d6, [pc, #668]	; 8014cb8 <_ftoa+0x2f8>
 8014a1c:	eeb4 7bc6 	vcmpe.f64	d7, d6
 8014a20:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014a24:	d50f      	bpl.n	8014a46 <_ftoa+0x86>
    return _out_rev(out, buffer, idx, maxlen, "fni-", 4, width, flags);
 8014a26:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8014a28:	9303      	str	r3, [sp, #12]
 8014a2a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8014a2c:	9302      	str	r3, [sp, #8]
 8014a2e:	2304      	movs	r3, #4
 8014a30:	9301      	str	r3, [sp, #4]
 8014a32:	4bac      	ldr	r3, [pc, #688]	; (8014ce4 <_ftoa+0x324>)
 8014a34:	9300      	str	r3, [sp, #0]
 8014a36:	68bb      	ldr	r3, [r7, #8]
 8014a38:	68fa      	ldr	r2, [r7, #12]
 8014a3a:	6939      	ldr	r1, [r7, #16]
 8014a3c:	6978      	ldr	r0, [r7, #20]
 8014a3e:	f7ff fdbd 	bl	80145bc <_out_rev>
 8014a42:	4603      	mov	r3, r0
 8014a44:	e205      	b.n	8014e52 <_ftoa+0x492>
  if (value > DBL_MAX)
 8014a46:	ed97 7b00 	vldr	d7, [r7]
 8014a4a:	ed9f 6b9d 	vldr	d6, [pc, #628]	; 8014cc0 <_ftoa+0x300>
 8014a4e:	eeb4 7bc6 	vcmpe.f64	d7, d6
 8014a52:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014a56:	dd1d      	ble.n	8014a94 <_ftoa+0xd4>
    return _out_rev(out, buffer, idx, maxlen, (flags & FLAGS_PLUS) ? "fni+" : "fni", (flags & FLAGS_PLUS) ? 4U : 3U, width, flags);
 8014a58:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8014a5a:	f003 0304 	and.w	r3, r3, #4
 8014a5e:	2b00      	cmp	r3, #0
 8014a60:	d001      	beq.n	8014a66 <_ftoa+0xa6>
 8014a62:	4ba1      	ldr	r3, [pc, #644]	; (8014ce8 <_ftoa+0x328>)
 8014a64:	e000      	b.n	8014a68 <_ftoa+0xa8>
 8014a66:	4ba1      	ldr	r3, [pc, #644]	; (8014cec <_ftoa+0x32c>)
 8014a68:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8014a6a:	f002 0204 	and.w	r2, r2, #4
 8014a6e:	2a00      	cmp	r2, #0
 8014a70:	d001      	beq.n	8014a76 <_ftoa+0xb6>
 8014a72:	2204      	movs	r2, #4
 8014a74:	e000      	b.n	8014a78 <_ftoa+0xb8>
 8014a76:	2203      	movs	r2, #3
 8014a78:	6fb9      	ldr	r1, [r7, #120]	; 0x78
 8014a7a:	9103      	str	r1, [sp, #12]
 8014a7c:	6f79      	ldr	r1, [r7, #116]	; 0x74
 8014a7e:	9102      	str	r1, [sp, #8]
 8014a80:	9201      	str	r2, [sp, #4]
 8014a82:	9300      	str	r3, [sp, #0]
 8014a84:	68bb      	ldr	r3, [r7, #8]
 8014a86:	68fa      	ldr	r2, [r7, #12]
 8014a88:	6939      	ldr	r1, [r7, #16]
 8014a8a:	6978      	ldr	r0, [r7, #20]
 8014a8c:	f7ff fd96 	bl	80145bc <_out_rev>
 8014a90:	4603      	mov	r3, r0
 8014a92:	e1de      	b.n	8014e52 <_ftoa+0x492>

  // test for very large values
  // standard printf behavior is to print EVERY whole number digit -- which could be 100s of characters overflowing your buffers == bad
  if ((value > PRINTF_MAX_FLOAT) || (value < -PRINTF_MAX_FLOAT)) {
 8014a94:	ed97 7b00 	vldr	d7, [r7]
 8014a98:	ed9f 6b8b 	vldr	d6, [pc, #556]	; 8014cc8 <_ftoa+0x308>
 8014a9c:	eeb4 7bc6 	vcmpe.f64	d7, d6
 8014aa0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014aa4:	dc08      	bgt.n	8014ab8 <_ftoa+0xf8>
 8014aa6:	ed97 7b00 	vldr	d7, [r7]
 8014aaa:	ed9f 6b89 	vldr	d6, [pc, #548]	; 8014cd0 <_ftoa+0x310>
 8014aae:	eeb4 7bc6 	vcmpe.f64	d7, d6
 8014ab2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014ab6:	d50f      	bpl.n	8014ad8 <_ftoa+0x118>
#if defined(PRINTF_SUPPORT_EXPONENTIAL)
    return _etoa(out, buffer, idx, maxlen, value, prec, width, flags);
 8014ab8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8014aba:	9302      	str	r3, [sp, #8]
 8014abc:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8014abe:	9301      	str	r3, [sp, #4]
 8014ac0:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8014ac2:	9300      	str	r3, [sp, #0]
 8014ac4:	ed97 0b00 	vldr	d0, [r7]
 8014ac8:	68bb      	ldr	r3, [r7, #8]
 8014aca:	68fa      	ldr	r2, [r7, #12]
 8014acc:	6939      	ldr	r1, [r7, #16]
 8014ace:	6978      	ldr	r0, [r7, #20]
 8014ad0:	f000 f9c6 	bl	8014e60 <_etoa>
 8014ad4:	4603      	mov	r3, r0
 8014ad6:	e1bc      	b.n	8014e52 <_ftoa+0x492>
    return 0U;
#endif
  }

  // test for negative
  bool negative = false;
 8014ad8:	2300      	movs	r3, #0
 8014ada:	f887 305b 	strb.w	r3, [r7, #91]	; 0x5b
  if (value < 0) {
 8014ade:	ed97 7b00 	vldr	d7, [r7]
 8014ae2:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 8014ae6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014aea:	d50a      	bpl.n	8014b02 <_ftoa+0x142>
    negative = true;
 8014aec:	2301      	movs	r3, #1
 8014aee:	f887 305b 	strb.w	r3, [r7, #91]	; 0x5b
    value = 0 - value;
 8014af2:	ed9f 6b79 	vldr	d6, [pc, #484]	; 8014cd8 <_ftoa+0x318>
 8014af6:	ed97 7b00 	vldr	d7, [r7]
 8014afa:	ee36 7b47 	vsub.f64	d7, d6, d7
 8014afe:	ed87 7b00 	vstr	d7, [r7]
  }

  // set default precision, if not set explicitly
  if (!(flags & FLAGS_PRECISION)) {
 8014b02:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8014b04:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8014b08:	2b00      	cmp	r3, #0
 8014b0a:	d10e      	bne.n	8014b2a <_ftoa+0x16a>
    prec = PRINTF_DEFAULT_FLOAT_PRECISION;
 8014b0c:	2306      	movs	r3, #6
 8014b0e:	673b      	str	r3, [r7, #112]	; 0x70
  }
  // limit precision to 9, cause a prec >= 10 can lead to overflow errors
  while ((len < PRINTF_FTOA_BUFFER_SIZE) && (prec > 9U)) {
 8014b10:	e00b      	b.n	8014b2a <_ftoa+0x16a>
    buf[len++] = '0';
 8014b12:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8014b14:	1c5a      	adds	r2, r3, #1
 8014b16:	65fa      	str	r2, [r7, #92]	; 0x5c
 8014b18:	f107 0260 	add.w	r2, r7, #96	; 0x60
 8014b1c:	4413      	add	r3, r2
 8014b1e:	2230      	movs	r2, #48	; 0x30
 8014b20:	f803 2c48 	strb.w	r2, [r3, #-72]
    prec--;
 8014b24:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8014b26:	3b01      	subs	r3, #1
 8014b28:	673b      	str	r3, [r7, #112]	; 0x70
  while ((len < PRINTF_FTOA_BUFFER_SIZE) && (prec > 9U)) {
 8014b2a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8014b2c:	2b1f      	cmp	r3, #31
 8014b2e:	d802      	bhi.n	8014b36 <_ftoa+0x176>
 8014b30:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8014b32:	2b09      	cmp	r3, #9
 8014b34:	d8ed      	bhi.n	8014b12 <_ftoa+0x152>
  }

  int whole = (int)value;
 8014b36:	ed97 7b00 	vldr	d7, [r7]
 8014b3a:	eefd 7bc7 	vcvt.s32.f64	s15, d7
 8014b3e:	ee17 3a90 	vmov	r3, s15
 8014b42:	657b      	str	r3, [r7, #84]	; 0x54
  double tmp = (value - whole) * pow10[prec];
 8014b44:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8014b46:	ee07 3a90 	vmov	s15, r3
 8014b4a:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8014b4e:	ed97 6b00 	vldr	d6, [r7]
 8014b52:	ee36 6b47 	vsub.f64	d6, d6, d7
 8014b56:	4a66      	ldr	r2, [pc, #408]	; (8014cf0 <_ftoa+0x330>)
 8014b58:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8014b5a:	00db      	lsls	r3, r3, #3
 8014b5c:	4413      	add	r3, r2
 8014b5e:	ed93 7b00 	vldr	d7, [r3]
 8014b62:	ee26 7b07 	vmul.f64	d7, d6, d7
 8014b66:	ed87 7b0e 	vstr	d7, [r7, #56]	; 0x38
  unsigned long frac = (unsigned long)tmp;
 8014b6a:	ed97 7b0e 	vldr	d7, [r7, #56]	; 0x38
 8014b6e:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8014b72:	ee17 3a90 	vmov	r3, s15
 8014b76:	653b      	str	r3, [r7, #80]	; 0x50
  diff = tmp - frac;
 8014b78:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8014b7a:	ee07 3a90 	vmov	s15, r3
 8014b7e:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 8014b82:	ed97 6b0e 	vldr	d6, [r7, #56]	; 0x38
 8014b86:	ee36 7b47 	vsub.f64	d7, d6, d7
 8014b8a:	ed87 7b10 	vstr	d7, [r7, #64]	; 0x40

  if (diff > 0.5) {
 8014b8e:	ed97 7b10 	vldr	d7, [r7, #64]	; 0x40
 8014b92:	eeb6 6b00 	vmov.f64	d6, #96	; 0x3f000000  0.5
 8014b96:	eeb4 7bc6 	vcmpe.f64	d7, d6
 8014b9a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014b9e:	dd18      	ble.n	8014bd2 <_ftoa+0x212>
    ++frac;
 8014ba0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8014ba2:	3301      	adds	r3, #1
 8014ba4:	653b      	str	r3, [r7, #80]	; 0x50
    // handle rollover, e.g. case 0.99 with prec 1 is 1.0
    if (frac >= pow10[prec]) {
 8014ba6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8014ba8:	ee07 3a90 	vmov	s15, r3
 8014bac:	eeb8 6b67 	vcvt.f64.u32	d6, s15
 8014bb0:	4a4f      	ldr	r2, [pc, #316]	; (8014cf0 <_ftoa+0x330>)
 8014bb2:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8014bb4:	00db      	lsls	r3, r3, #3
 8014bb6:	4413      	add	r3, r2
 8014bb8:	ed93 7b00 	vldr	d7, [r3]
 8014bbc:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8014bc0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014bc4:	db19      	blt.n	8014bfa <_ftoa+0x23a>
      frac = 0;
 8014bc6:	2300      	movs	r3, #0
 8014bc8:	653b      	str	r3, [r7, #80]	; 0x50
      ++whole;
 8014bca:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8014bcc:	3301      	adds	r3, #1
 8014bce:	657b      	str	r3, [r7, #84]	; 0x54
 8014bd0:	e013      	b.n	8014bfa <_ftoa+0x23a>
    }
  }
  else if (diff < 0.5) {
 8014bd2:	ed97 7b10 	vldr	d7, [r7, #64]	; 0x40
 8014bd6:	eeb6 6b00 	vmov.f64	d6, #96	; 0x3f000000  0.5
 8014bda:	eeb4 7bc6 	vcmpe.f64	d7, d6
 8014bde:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014be2:	d40a      	bmi.n	8014bfa <_ftoa+0x23a>
  }
  else if ((frac == 0U) || (frac & 1U)) {
 8014be4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8014be6:	2b00      	cmp	r3, #0
 8014be8:	d004      	beq.n	8014bf4 <_ftoa+0x234>
 8014bea:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8014bec:	f003 0301 	and.w	r3, r3, #1
 8014bf0:	2b00      	cmp	r3, #0
 8014bf2:	d002      	beq.n	8014bfa <_ftoa+0x23a>
    // if halfway, round up if odd OR if last digit is 0
    ++frac;
 8014bf4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8014bf6:	3301      	adds	r3, #1
 8014bf8:	653b      	str	r3, [r7, #80]	; 0x50
  }

  if (prec == 0U) {
 8014bfa:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8014bfc:	2b00      	cmp	r3, #0
 8014bfe:	d12e      	bne.n	8014c5e <_ftoa+0x29e>
    diff = value - (double)whole;
 8014c00:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8014c02:	ee07 3a90 	vmov	s15, r3
 8014c06:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8014c0a:	ed97 6b00 	vldr	d6, [r7]
 8014c0e:	ee36 7b47 	vsub.f64	d7, d6, d7
 8014c12:	ed87 7b10 	vstr	d7, [r7, #64]	; 0x40
    if ((!(diff < 0.5) || (diff > 0.5)) && (whole & 1)) {
 8014c16:	ed97 7b10 	vldr	d7, [r7, #64]	; 0x40
 8014c1a:	eeb6 6b00 	vmov.f64	d6, #96	; 0x3f000000  0.5
 8014c1e:	eeb4 7bc6 	vcmpe.f64	d7, d6
 8014c22:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014c26:	bf4c      	ite	mi
 8014c28:	2301      	movmi	r3, #1
 8014c2a:	2300      	movpl	r3, #0
 8014c2c:	b2db      	uxtb	r3, r3
 8014c2e:	f083 0301 	eor.w	r3, r3, #1
 8014c32:	b2db      	uxtb	r3, r3
 8014c34:	2b00      	cmp	r3, #0
 8014c36:	d108      	bne.n	8014c4a <_ftoa+0x28a>
 8014c38:	ed97 7b10 	vldr	d7, [r7, #64]	; 0x40
 8014c3c:	eeb6 6b00 	vmov.f64	d6, #96	; 0x3f000000  0.5
 8014c40:	eeb4 7bc6 	vcmpe.f64	d7, d6
 8014c44:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014c48:	dd73      	ble.n	8014d32 <_ftoa+0x372>
 8014c4a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8014c4c:	f003 0301 	and.w	r3, r3, #1
 8014c50:	2b00      	cmp	r3, #0
 8014c52:	f000 8091 	beq.w	8014d78 <_ftoa+0x3b8>
      // exactly 0.5 and ODD, then round up
      // 1.5 -> 2, but 2.5 -> 2
      ++whole;
 8014c56:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8014c58:	3301      	adds	r3, #1
 8014c5a:	657b      	str	r3, [r7, #84]	; 0x54
 8014c5c:	e08c      	b.n	8014d78 <_ftoa+0x3b8>
    }
  }
  else {
    unsigned int count = prec;
 8014c5e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8014c60:	64fb      	str	r3, [r7, #76]	; 0x4c
    // now do fractional part, as an unsigned number
    while (len < PRINTF_FTOA_BUFFER_SIZE) {
 8014c62:	e020      	b.n	8014ca6 <_ftoa+0x2e6>
      --count;
 8014c64:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8014c66:	3b01      	subs	r3, #1
 8014c68:	64fb      	str	r3, [r7, #76]	; 0x4c
      buf[len++] = (char)(48U + (frac % 10U));
 8014c6a:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8014c6c:	4b21      	ldr	r3, [pc, #132]	; (8014cf4 <_ftoa+0x334>)
 8014c6e:	fba3 2301 	umull	r2, r3, r3, r1
 8014c72:	08da      	lsrs	r2, r3, #3
 8014c74:	4613      	mov	r3, r2
 8014c76:	009b      	lsls	r3, r3, #2
 8014c78:	4413      	add	r3, r2
 8014c7a:	005b      	lsls	r3, r3, #1
 8014c7c:	1aca      	subs	r2, r1, r3
 8014c7e:	b2d2      	uxtb	r2, r2
 8014c80:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8014c82:	1c59      	adds	r1, r3, #1
 8014c84:	65f9      	str	r1, [r7, #92]	; 0x5c
 8014c86:	3230      	adds	r2, #48	; 0x30
 8014c88:	b2d2      	uxtb	r2, r2
 8014c8a:	f107 0160 	add.w	r1, r7, #96	; 0x60
 8014c8e:	440b      	add	r3, r1
 8014c90:	f803 2c48 	strb.w	r2, [r3, #-72]
      if (!(frac /= 10U)) {
 8014c94:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8014c96:	4a17      	ldr	r2, [pc, #92]	; (8014cf4 <_ftoa+0x334>)
 8014c98:	fba2 2303 	umull	r2, r3, r2, r3
 8014c9c:	08db      	lsrs	r3, r3, #3
 8014c9e:	653b      	str	r3, [r7, #80]	; 0x50
 8014ca0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8014ca2:	2b00      	cmp	r3, #0
 8014ca4:	d003      	beq.n	8014cae <_ftoa+0x2ee>
    while (len < PRINTF_FTOA_BUFFER_SIZE) {
 8014ca6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8014ca8:	2b1f      	cmp	r3, #31
 8014caa:	d9db      	bls.n	8014c64 <_ftoa+0x2a4>
 8014cac:	e02d      	b.n	8014d0a <_ftoa+0x34a>
        break;
 8014cae:	bf00      	nop
      }
    }
    // add extra 0s
    while ((len < PRINTF_FTOA_BUFFER_SIZE) && (count-- > 0U)) {
 8014cb0:	e02b      	b.n	8014d0a <_ftoa+0x34a>
 8014cb2:	bf00      	nop
 8014cb4:	f3af 8000 	nop.w
 8014cb8:	ffffffff 	.word	0xffffffff
 8014cbc:	ffefffff 	.word	0xffefffff
 8014cc0:	ffffffff 	.word	0xffffffff
 8014cc4:	7fefffff 	.word	0x7fefffff
 8014cc8:	00000000 	.word	0x00000000
 8014ccc:	41cdcd65 	.word	0x41cdcd65
 8014cd0:	00000000 	.word	0x00000000
 8014cd4:	c1cdcd65 	.word	0xc1cdcd65
	...
 8014ce0:	0801bff4 	.word	0x0801bff4
 8014ce4:	0801bff8 	.word	0x0801bff8
 8014ce8:	0801c000 	.word	0x0801c000
 8014cec:	0801c008 	.word	0x0801c008
 8014cf0:	0801c198 	.word	0x0801c198
 8014cf4:	cccccccd 	.word	0xcccccccd
      buf[len++] = '0';
 8014cf8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8014cfa:	1c5a      	adds	r2, r3, #1
 8014cfc:	65fa      	str	r2, [r7, #92]	; 0x5c
 8014cfe:	f107 0260 	add.w	r2, r7, #96	; 0x60
 8014d02:	4413      	add	r3, r2
 8014d04:	2230      	movs	r2, #48	; 0x30
 8014d06:	f803 2c48 	strb.w	r2, [r3, #-72]
    while ((len < PRINTF_FTOA_BUFFER_SIZE) && (count-- > 0U)) {
 8014d0a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8014d0c:	2b1f      	cmp	r3, #31
 8014d0e:	d804      	bhi.n	8014d1a <_ftoa+0x35a>
 8014d10:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8014d12:	1e5a      	subs	r2, r3, #1
 8014d14:	64fa      	str	r2, [r7, #76]	; 0x4c
 8014d16:	2b00      	cmp	r3, #0
 8014d18:	d1ee      	bne.n	8014cf8 <_ftoa+0x338>
    }
    if (len < PRINTF_FTOA_BUFFER_SIZE) {
 8014d1a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8014d1c:	2b1f      	cmp	r3, #31
 8014d1e:	d82b      	bhi.n	8014d78 <_ftoa+0x3b8>
      // add decimal
      buf[len++] = '.';
 8014d20:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8014d22:	1c5a      	adds	r2, r3, #1
 8014d24:	65fa      	str	r2, [r7, #92]	; 0x5c
 8014d26:	f107 0260 	add.w	r2, r7, #96	; 0x60
 8014d2a:	4413      	add	r3, r2
 8014d2c:	222e      	movs	r2, #46	; 0x2e
 8014d2e:	f803 2c48 	strb.w	r2, [r3, #-72]
    }
  }

  // do whole part, number is reversed
  while (len < PRINTF_FTOA_BUFFER_SIZE) {
 8014d32:	e021      	b.n	8014d78 <_ftoa+0x3b8>
    buf[len++] = (char)(48 + (whole % 10));
 8014d34:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8014d36:	4b49      	ldr	r3, [pc, #292]	; (8014e5c <_ftoa+0x49c>)
 8014d38:	fb83 1302 	smull	r1, r3, r3, r2
 8014d3c:	1099      	asrs	r1, r3, #2
 8014d3e:	17d3      	asrs	r3, r2, #31
 8014d40:	1ac9      	subs	r1, r1, r3
 8014d42:	460b      	mov	r3, r1
 8014d44:	009b      	lsls	r3, r3, #2
 8014d46:	440b      	add	r3, r1
 8014d48:	005b      	lsls	r3, r3, #1
 8014d4a:	1ad1      	subs	r1, r2, r3
 8014d4c:	b2ca      	uxtb	r2, r1
 8014d4e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8014d50:	1c59      	adds	r1, r3, #1
 8014d52:	65f9      	str	r1, [r7, #92]	; 0x5c
 8014d54:	3230      	adds	r2, #48	; 0x30
 8014d56:	b2d2      	uxtb	r2, r2
 8014d58:	f107 0160 	add.w	r1, r7, #96	; 0x60
 8014d5c:	440b      	add	r3, r1
 8014d5e:	f803 2c48 	strb.w	r2, [r3, #-72]
    if (!(whole /= 10)) {
 8014d62:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8014d64:	4a3d      	ldr	r2, [pc, #244]	; (8014e5c <_ftoa+0x49c>)
 8014d66:	fb82 1203 	smull	r1, r2, r2, r3
 8014d6a:	1092      	asrs	r2, r2, #2
 8014d6c:	17db      	asrs	r3, r3, #31
 8014d6e:	1ad3      	subs	r3, r2, r3
 8014d70:	657b      	str	r3, [r7, #84]	; 0x54
 8014d72:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8014d74:	2b00      	cmp	r3, #0
 8014d76:	d003      	beq.n	8014d80 <_ftoa+0x3c0>
  while (len < PRINTF_FTOA_BUFFER_SIZE) {
 8014d78:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8014d7a:	2b1f      	cmp	r3, #31
 8014d7c:	d9da      	bls.n	8014d34 <_ftoa+0x374>
 8014d7e:	e000      	b.n	8014d82 <_ftoa+0x3c2>
      break;
 8014d80:	bf00      	nop
    }
  }

  // pad leading zeros
  if (!(flags & FLAGS_LEFT) && (flags & FLAGS_ZEROPAD)) {
 8014d82:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8014d84:	f003 0302 	and.w	r3, r3, #2
 8014d88:	2b00      	cmp	r3, #0
 8014d8a:	d124      	bne.n	8014dd6 <_ftoa+0x416>
 8014d8c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8014d8e:	f003 0301 	and.w	r3, r3, #1
 8014d92:	2b00      	cmp	r3, #0
 8014d94:	d01f      	beq.n	8014dd6 <_ftoa+0x416>
    if (width && (negative || (flags & (FLAGS_PLUS | FLAGS_SPACE)))) {
 8014d96:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8014d98:	2b00      	cmp	r3, #0
 8014d9a:	d015      	beq.n	8014dc8 <_ftoa+0x408>
 8014d9c:	f897 305b 	ldrb.w	r3, [r7, #91]	; 0x5b
 8014da0:	2b00      	cmp	r3, #0
 8014da2:	d104      	bne.n	8014dae <_ftoa+0x3ee>
 8014da4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8014da6:	f003 030c 	and.w	r3, r3, #12
 8014daa:	2b00      	cmp	r3, #0
 8014dac:	d00c      	beq.n	8014dc8 <_ftoa+0x408>
      width--;
 8014dae:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8014db0:	3b01      	subs	r3, #1
 8014db2:	677b      	str	r3, [r7, #116]	; 0x74
    }
    while ((len < width) && (len < PRINTF_FTOA_BUFFER_SIZE)) {
 8014db4:	e008      	b.n	8014dc8 <_ftoa+0x408>
      buf[len++] = '0';
 8014db6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8014db8:	1c5a      	adds	r2, r3, #1
 8014dba:	65fa      	str	r2, [r7, #92]	; 0x5c
 8014dbc:	f107 0260 	add.w	r2, r7, #96	; 0x60
 8014dc0:	4413      	add	r3, r2
 8014dc2:	2230      	movs	r2, #48	; 0x30
 8014dc4:	f803 2c48 	strb.w	r2, [r3, #-72]
    while ((len < width) && (len < PRINTF_FTOA_BUFFER_SIZE)) {
 8014dc8:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8014dca:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8014dcc:	429a      	cmp	r2, r3
 8014dce:	d202      	bcs.n	8014dd6 <_ftoa+0x416>
 8014dd0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8014dd2:	2b1f      	cmp	r3, #31
 8014dd4:	d9ef      	bls.n	8014db6 <_ftoa+0x3f6>
    }
  }

  if (len < PRINTF_FTOA_BUFFER_SIZE) {
 8014dd6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8014dd8:	2b1f      	cmp	r3, #31
 8014dda:	d82a      	bhi.n	8014e32 <_ftoa+0x472>
    if (negative) {
 8014ddc:	f897 305b 	ldrb.w	r3, [r7, #91]	; 0x5b
 8014de0:	2b00      	cmp	r3, #0
 8014de2:	d009      	beq.n	8014df8 <_ftoa+0x438>
      buf[len++] = '-';
 8014de4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8014de6:	1c5a      	adds	r2, r3, #1
 8014de8:	65fa      	str	r2, [r7, #92]	; 0x5c
 8014dea:	f107 0260 	add.w	r2, r7, #96	; 0x60
 8014dee:	4413      	add	r3, r2
 8014df0:	222d      	movs	r2, #45	; 0x2d
 8014df2:	f803 2c48 	strb.w	r2, [r3, #-72]
 8014df6:	e01c      	b.n	8014e32 <_ftoa+0x472>
    }
    else if (flags & FLAGS_PLUS) {
 8014df8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8014dfa:	f003 0304 	and.w	r3, r3, #4
 8014dfe:	2b00      	cmp	r3, #0
 8014e00:	d009      	beq.n	8014e16 <_ftoa+0x456>
      buf[len++] = '+';  // ignore the space if the '+' exists
 8014e02:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8014e04:	1c5a      	adds	r2, r3, #1
 8014e06:	65fa      	str	r2, [r7, #92]	; 0x5c
 8014e08:	f107 0260 	add.w	r2, r7, #96	; 0x60
 8014e0c:	4413      	add	r3, r2
 8014e0e:	222b      	movs	r2, #43	; 0x2b
 8014e10:	f803 2c48 	strb.w	r2, [r3, #-72]
 8014e14:	e00d      	b.n	8014e32 <_ftoa+0x472>
    }
    else if (flags & FLAGS_SPACE) {
 8014e16:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8014e18:	f003 0308 	and.w	r3, r3, #8
 8014e1c:	2b00      	cmp	r3, #0
 8014e1e:	d008      	beq.n	8014e32 <_ftoa+0x472>
      buf[len++] = ' ';
 8014e20:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8014e22:	1c5a      	adds	r2, r3, #1
 8014e24:	65fa      	str	r2, [r7, #92]	; 0x5c
 8014e26:	f107 0260 	add.w	r2, r7, #96	; 0x60
 8014e2a:	4413      	add	r3, r2
 8014e2c:	2220      	movs	r2, #32
 8014e2e:	f803 2c48 	strb.w	r2, [r3, #-72]
    }
  }

  return _out_rev(out, buffer, idx, maxlen, buf, len, width, flags);
 8014e32:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8014e34:	9303      	str	r3, [sp, #12]
 8014e36:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8014e38:	9302      	str	r3, [sp, #8]
 8014e3a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8014e3c:	9301      	str	r3, [sp, #4]
 8014e3e:	f107 0318 	add.w	r3, r7, #24
 8014e42:	9300      	str	r3, [sp, #0]
 8014e44:	68bb      	ldr	r3, [r7, #8]
 8014e46:	68fa      	ldr	r2, [r7, #12]
 8014e48:	6939      	ldr	r1, [r7, #16]
 8014e4a:	6978      	ldr	r0, [r7, #20]
 8014e4c:	f7ff fbb6 	bl	80145bc <_out_rev>
 8014e50:	4603      	mov	r3, r0
}
 8014e52:	4618      	mov	r0, r3
 8014e54:	3764      	adds	r7, #100	; 0x64
 8014e56:	46bd      	mov	sp, r7
 8014e58:	bd90      	pop	{r4, r7, pc}
 8014e5a:	bf00      	nop
 8014e5c:	66666667 	.word	0x66666667

08014e60 <_etoa>:


#if defined(PRINTF_SUPPORT_EXPONENTIAL)
// internal ftoa variant for exponential floating-point type, contributed by Martijn Jasperse <m.jasperse@gmail.com>
static size_t _etoa(out_fct_type out, char* buffer, size_t idx, size_t maxlen, double value, unsigned int prec, unsigned int width, unsigned int flags)
{
 8014e60:	e92d 4890 	stmdb	sp!, {r4, r7, fp, lr}
 8014e64:	b09a      	sub	sp, #104	; 0x68
 8014e66:	af06      	add	r7, sp, #24
 8014e68:	6178      	str	r0, [r7, #20]
 8014e6a:	6139      	str	r1, [r7, #16]
 8014e6c:	60fa      	str	r2, [r7, #12]
 8014e6e:	60bb      	str	r3, [r7, #8]
 8014e70:	ed87 0b00 	vstr	d0, [r7]
  // check for NaN and special values
  if ((value != value) || (value > DBL_MAX) || (value < -DBL_MAX)) {
 8014e74:	ed97 6b00 	vldr	d6, [r7]
 8014e78:	ed97 7b00 	vldr	d7, [r7]
 8014e7c:	eeb4 6b47 	vcmp.f64	d6, d7
 8014e80:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014e84:	d111      	bne.n	8014eaa <_etoa+0x4a>
 8014e86:	ed97 7b00 	vldr	d7, [r7]
 8014e8a:	ed9f 6bc5 	vldr	d6, [pc, #788]	; 80151a0 <_etoa+0x340>
 8014e8e:	eeb4 7bc6 	vcmpe.f64	d7, d6
 8014e92:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014e96:	dc08      	bgt.n	8014eaa <_etoa+0x4a>
 8014e98:	ed97 7b00 	vldr	d7, [r7]
 8014e9c:	ed9f 6bc2 	vldr	d6, [pc, #776]	; 80151a8 <_etoa+0x348>
 8014ea0:	eeb4 7bc6 	vcmpe.f64	d7, d6
 8014ea4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014ea8:	d50f      	bpl.n	8014eca <_etoa+0x6a>
    return _ftoa(out, buffer, idx, maxlen, value, prec, width, flags);
 8014eaa:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8014eac:	9302      	str	r3, [sp, #8]
 8014eae:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8014eb0:	9301      	str	r3, [sp, #4]
 8014eb2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8014eb4:	9300      	str	r3, [sp, #0]
 8014eb6:	ed97 0b00 	vldr	d0, [r7]
 8014eba:	68bb      	ldr	r3, [r7, #8]
 8014ebc:	68fa      	ldr	r2, [r7, #12]
 8014ebe:	6939      	ldr	r1, [r7, #16]
 8014ec0:	6978      	ldr	r0, [r7, #20]
 8014ec2:	f7ff fd7d 	bl	80149c0 <_ftoa>
 8014ec6:	4603      	mov	r3, r0
 8014ec8:	e1cd      	b.n	8015266 <_etoa+0x406>
  }

  // determine the sign
  const bool negative = value < 0;
 8014eca:	ed97 7b00 	vldr	d7, [r7]
 8014ece:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 8014ed2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014ed6:	bf4c      	ite	mi
 8014ed8:	2301      	movmi	r3, #1
 8014eda:	2300      	movpl	r3, #0
 8014edc:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
  if (negative) {
 8014ee0:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8014ee4:	2b00      	cmp	r3, #0
 8014ee6:	d005      	beq.n	8014ef4 <_etoa+0x94>
    value = -value;
 8014ee8:	ed97 7b00 	vldr	d7, [r7]
 8014eec:	eeb1 7b47 	vneg.f64	d7, d7
 8014ef0:	ed87 7b00 	vstr	d7, [r7]
  }

  // default precision
  if (!(flags & FLAGS_PRECISION)) {
 8014ef4:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8014ef6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8014efa:	2b00      	cmp	r3, #0
 8014efc:	d101      	bne.n	8014f02 <_etoa+0xa2>
    prec = PRINTF_DEFAULT_FLOAT_PRECISION;
 8014efe:	2306      	movs	r3, #6
 8014f00:	663b      	str	r3, [r7, #96]	; 0x60
  union {
    uint64_t U;
    double   F;
  } conv;

  conv.F = value;
 8014f02:	e9d7 3400 	ldrd	r3, r4, [r7]
 8014f06:	e9c7 3406 	strd	r3, r4, [r7, #24]
  int exp2 = (int)((conv.U >> 52U) & 0x07FFU) - 1023;           // effectively log2
 8014f0a:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 8014f0e:	f04f 0300 	mov.w	r3, #0
 8014f12:	f04f 0400 	mov.w	r4, #0
 8014f16:	0d13      	lsrs	r3, r2, #20
 8014f18:	2400      	movs	r4, #0
 8014f1a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8014f1e:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 8014f22:	63fb      	str	r3, [r7, #60]	; 0x3c
  conv.U = (conv.U & ((1ULL << 52U) - 1U)) | (1023ULL << 52U);  // drop the exponent so conv.F is now in [1,2)
 8014f24:	e9d7 3406 	ldrd	r3, r4, [r7, #24]
 8014f28:	f04f 31ff 	mov.w	r1, #4294967295
 8014f2c:	4ab0      	ldr	r2, [pc, #704]	; (80151f0 <_etoa+0x390>)
 8014f2e:	ea03 0b01 	and.w	fp, r3, r1
 8014f32:	ea04 0c02 	and.w	ip, r4, r2
 8014f36:	f04f 0100 	mov.w	r1, #0
 8014f3a:	4aae      	ldr	r2, [pc, #696]	; (80151f4 <_etoa+0x394>)
 8014f3c:	ea4b 0301 	orr.w	r3, fp, r1
 8014f40:	ea4c 0402 	orr.w	r4, ip, r2
 8014f44:	e9c7 3406 	strd	r3, r4, [r7, #24]
  // now approximate log10 from the log2 integer part and an expansion of ln around 1.5
  int expval = (int)(0.1760912590558 + exp2 * 0.301029995663981 + (conv.F - 1.5) * 0.289529654602168);
 8014f48:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8014f4a:	ee07 3a90 	vmov	s15, r3
 8014f4e:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8014f52:	ed9f 6b97 	vldr	d6, [pc, #604]	; 80151b0 <_etoa+0x350>
 8014f56:	ee27 7b06 	vmul.f64	d7, d7, d6
 8014f5a:	ed9f 6b97 	vldr	d6, [pc, #604]	; 80151b8 <_etoa+0x358>
 8014f5e:	ee37 6b06 	vadd.f64	d6, d7, d6
 8014f62:	ed97 7b06 	vldr	d7, [r7, #24]
 8014f66:	eeb7 5b08 	vmov.f64	d5, #120	; 0x3fc00000  1.5
 8014f6a:	ee37 7b45 	vsub.f64	d7, d7, d5
 8014f6e:	ed9f 5b94 	vldr	d5, [pc, #592]	; 80151c0 <_etoa+0x360>
 8014f72:	ee27 7b05 	vmul.f64	d7, d7, d5
 8014f76:	ee36 7b07 	vadd.f64	d7, d6, d7
 8014f7a:	eefd 7bc7 	vcvt.s32.f64	s15, d7
 8014f7e:	ee17 3a90 	vmov	r3, s15
 8014f82:	64fb      	str	r3, [r7, #76]	; 0x4c
  // now we want to compute 10^expval but we want to be sure it won't overflow
  exp2 = (int)(expval * 3.321928094887362 + 0.5);
 8014f84:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8014f86:	ee07 3a90 	vmov	s15, r3
 8014f8a:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8014f8e:	ed9f 6b8e 	vldr	d6, [pc, #568]	; 80151c8 <_etoa+0x368>
 8014f92:	ee27 7b06 	vmul.f64	d7, d7, d6
 8014f96:	eeb6 6b00 	vmov.f64	d6, #96	; 0x3f000000  0.5
 8014f9a:	ee37 7b06 	vadd.f64	d7, d7, d6
 8014f9e:	eefd 7bc7 	vcvt.s32.f64	s15, d7
 8014fa2:	ee17 3a90 	vmov	r3, s15
 8014fa6:	63fb      	str	r3, [r7, #60]	; 0x3c
  const double z  = expval * 2.302585092994046 - exp2 * 0.6931471805599453;
 8014fa8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8014faa:	ee07 3a90 	vmov	s15, r3
 8014fae:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8014fb2:	ed9f 6b87 	vldr	d6, [pc, #540]	; 80151d0 <_etoa+0x370>
 8014fb6:	ee27 6b06 	vmul.f64	d6, d7, d6
 8014fba:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8014fbc:	ee07 3a90 	vmov	s15, r3
 8014fc0:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8014fc4:	ed9f 5b84 	vldr	d5, [pc, #528]	; 80151d8 <_etoa+0x378>
 8014fc8:	ee27 7b05 	vmul.f64	d7, d7, d5
 8014fcc:	ee36 7b47 	vsub.f64	d7, d6, d7
 8014fd0:	ed87 7b0c 	vstr	d7, [r7, #48]	; 0x30
  const double z2 = z * z;
 8014fd4:	ed97 6b0c 	vldr	d6, [r7, #48]	; 0x30
 8014fd8:	ed97 7b0c 	vldr	d7, [r7, #48]	; 0x30
 8014fdc:	ee26 7b07 	vmul.f64	d7, d6, d7
 8014fe0:	ed87 7b0a 	vstr	d7, [r7, #40]	; 0x28
  conv.U = (uint64_t)(exp2 + 1023) << 52U;
 8014fe4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8014fe6:	f203 33ff 	addw	r3, r3, #1023	; 0x3ff
 8014fea:	4619      	mov	r1, r3
 8014fec:	ea4f 72e1 	mov.w	r2, r1, asr #31
 8014ff0:	f04f 0300 	mov.w	r3, #0
 8014ff4:	f04f 0400 	mov.w	r4, #0
 8014ff8:	050c      	lsls	r4, r1, #20
 8014ffa:	2300      	movs	r3, #0
 8014ffc:	e9c7 3406 	strd	r3, r4, [r7, #24]
  // compute exp(z) using continued fractions, see https://en.wikipedia.org/wiki/Exponential_function#Continued_fractions_for_ex
  conv.F *= 1 + 2 * z / (2 - z + (z2 / (6 + (z2 / (10 + z2 / 14)))));
 8015000:	ed97 6b06 	vldr	d6, [r7, #24]
 8015004:	ed97 7b0c 	vldr	d7, [r7, #48]	; 0x30
 8015008:	ee37 4b07 	vadd.f64	d4, d7, d7
 801500c:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 8015010:	ed97 7b0c 	vldr	d7, [r7, #48]	; 0x30
 8015014:	ee35 5b47 	vsub.f64	d5, d5, d7
 8015018:	ed97 3b0a 	vldr	d3, [r7, #40]	; 0x28
 801501c:	eeb2 2b0c 	vmov.f64	d2, #44	; 0x41600000  14.0
 8015020:	ee83 7b02 	vdiv.f64	d7, d3, d2
 8015024:	eeb2 3b04 	vmov.f64	d3, #36	; 0x41200000  10.0
 8015028:	ee37 3b03 	vadd.f64	d3, d7, d3
 801502c:	ed97 2b0a 	vldr	d2, [r7, #40]	; 0x28
 8015030:	ee82 7b03 	vdiv.f64	d7, d2, d3
 8015034:	eeb1 3b08 	vmov.f64	d3, #24	; 0x40c00000  6.0
 8015038:	ee37 3b03 	vadd.f64	d3, d7, d3
 801503c:	ed97 2b0a 	vldr	d2, [r7, #40]	; 0x28
 8015040:	ee82 7b03 	vdiv.f64	d7, d2, d3
 8015044:	ee35 5b07 	vadd.f64	d5, d5, d7
 8015048:	ee84 7b05 	vdiv.f64	d7, d4, d5
 801504c:	eeb7 5b00 	vmov.f64	d5, #112	; 0x3f800000  1.0
 8015050:	ee37 7b05 	vadd.f64	d7, d7, d5
 8015054:	ee26 7b07 	vmul.f64	d7, d6, d7
 8015058:	ed87 7b06 	vstr	d7, [r7, #24]
  // correct for rounding errors
  if (value < conv.F) {
 801505c:	ed97 7b06 	vldr	d7, [r7, #24]
 8015060:	ed97 6b00 	vldr	d6, [r7]
 8015064:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8015068:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801506c:	d50a      	bpl.n	8015084 <_etoa+0x224>
    expval--;
 801506e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8015070:	3b01      	subs	r3, #1
 8015072:	64fb      	str	r3, [r7, #76]	; 0x4c
    conv.F /= 10;
 8015074:	ed97 6b06 	vldr	d6, [r7, #24]
 8015078:	eeb2 5b04 	vmov.f64	d5, #36	; 0x41200000  10.0
 801507c:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8015080:	ed87 7b06 	vstr	d7, [r7, #24]
  }

  // the exponent format is "%+03d" and largest value is "307", so set aside 4-5 characters
  unsigned int minwidth = ((expval < 100) && (expval > -100)) ? 4U : 5U;
 8015084:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8015086:	2b63      	cmp	r3, #99	; 0x63
 8015088:	dc05      	bgt.n	8015096 <_etoa+0x236>
 801508a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801508c:	f113 0f63 	cmn.w	r3, #99	; 0x63
 8015090:	db01      	blt.n	8015096 <_etoa+0x236>
 8015092:	2304      	movs	r3, #4
 8015094:	e000      	b.n	8015098 <_etoa+0x238>
 8015096:	2305      	movs	r3, #5
 8015098:	64bb      	str	r3, [r7, #72]	; 0x48

  // in "%g" mode, "prec" is the number of *significant figures* not decimals
  if (flags & FLAGS_ADAPT_EXP) {
 801509a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 801509c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80150a0:	2b00      	cmp	r3, #0
 80150a2:	d031      	beq.n	8015108 <_etoa+0x2a8>
    // do we want to fall-back to "%f" mode?
    if ((value >= 1e-4) && (value < 1e6)) {
 80150a4:	ed97 7b00 	vldr	d7, [r7]
 80150a8:	ed9f 6b4d 	vldr	d6, [pc, #308]	; 80151e0 <_etoa+0x380>
 80150ac:	eeb4 7bc6 	vcmpe.f64	d7, d6
 80150b0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80150b4:	db1d      	blt.n	80150f2 <_etoa+0x292>
 80150b6:	ed97 7b00 	vldr	d7, [r7]
 80150ba:	ed9f 6b4b 	vldr	d6, [pc, #300]	; 80151e8 <_etoa+0x388>
 80150be:	eeb4 7bc6 	vcmpe.f64	d7, d6
 80150c2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80150c6:	d514      	bpl.n	80150f2 <_etoa+0x292>
      if ((int)prec > expval) {
 80150c8:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80150ca:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80150cc:	429a      	cmp	r2, r3
 80150ce:	da05      	bge.n	80150dc <_etoa+0x27c>
        prec = (unsigned)((int)prec - expval - 1);
 80150d0:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80150d2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80150d4:	1ad3      	subs	r3, r2, r3
 80150d6:	3b01      	subs	r3, #1
 80150d8:	663b      	str	r3, [r7, #96]	; 0x60
 80150da:	e001      	b.n	80150e0 <_etoa+0x280>
      }
      else {
        prec = 0;
 80150dc:	2300      	movs	r3, #0
 80150de:	663b      	str	r3, [r7, #96]	; 0x60
      }
      flags |= FLAGS_PRECISION;   // make sure _ftoa respects precision
 80150e0:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80150e2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80150e6:	66bb      	str	r3, [r7, #104]	; 0x68
      // no characters in exponent
      minwidth = 0U;
 80150e8:	2300      	movs	r3, #0
 80150ea:	64bb      	str	r3, [r7, #72]	; 0x48
      expval   = 0;
 80150ec:	2300      	movs	r3, #0
 80150ee:	64fb      	str	r3, [r7, #76]	; 0x4c
 80150f0:	e00a      	b.n	8015108 <_etoa+0x2a8>
    }
    else {
      // we use one sigfig for the whole part
      if ((prec > 0) && (flags & FLAGS_PRECISION)) {
 80150f2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80150f4:	2b00      	cmp	r3, #0
 80150f6:	d007      	beq.n	8015108 <_etoa+0x2a8>
 80150f8:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80150fa:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80150fe:	2b00      	cmp	r3, #0
 8015100:	d002      	beq.n	8015108 <_etoa+0x2a8>
        --prec;
 8015102:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8015104:	3b01      	subs	r3, #1
 8015106:	663b      	str	r3, [r7, #96]	; 0x60
      }
    }
  }

  // will everything fit?
  unsigned int fwidth = width;
 8015108:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 801510a:	647b      	str	r3, [r7, #68]	; 0x44
  if (width > minwidth) {
 801510c:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 801510e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8015110:	429a      	cmp	r2, r3
 8015112:	d904      	bls.n	801511e <_etoa+0x2be>
    // we didn't fall-back so subtract the characters required for the exponent
    fwidth -= minwidth;
 8015114:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8015116:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8015118:	1ad3      	subs	r3, r2, r3
 801511a:	647b      	str	r3, [r7, #68]	; 0x44
 801511c:	e001      	b.n	8015122 <_etoa+0x2c2>
  } else {
    // not enough characters, so go back to default sizing
    fwidth = 0U;
 801511e:	2300      	movs	r3, #0
 8015120:	647b      	str	r3, [r7, #68]	; 0x44
  }
  if ((flags & FLAGS_LEFT) && minwidth) {
 8015122:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8015124:	f003 0302 	and.w	r3, r3, #2
 8015128:	2b00      	cmp	r3, #0
 801512a:	d004      	beq.n	8015136 <_etoa+0x2d6>
 801512c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 801512e:	2b00      	cmp	r3, #0
 8015130:	d001      	beq.n	8015136 <_etoa+0x2d6>
    // if we're padding on the right, DON'T pad the floating part
    fwidth = 0U;
 8015132:	2300      	movs	r3, #0
 8015134:	647b      	str	r3, [r7, #68]	; 0x44
  }

  // rescale the float value
  if (expval) {
 8015136:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8015138:	2b00      	cmp	r3, #0
 801513a:	d007      	beq.n	801514c <_etoa+0x2ec>
    value /= conv.F;
 801513c:	ed97 6b06 	vldr	d6, [r7, #24]
 8015140:	ed97 5b00 	vldr	d5, [r7]
 8015144:	ee85 7b06 	vdiv.f64	d7, d5, d6
 8015148:	ed87 7b00 	vstr	d7, [r7]
  }

  // output the floating part
  const size_t start_idx = idx;
 801514c:	68fb      	ldr	r3, [r7, #12]
 801514e:	627b      	str	r3, [r7, #36]	; 0x24
  idx = _ftoa(out, buffer, idx, maxlen, negative ? -value : value, prec, fwidth, flags & ~FLAGS_ADAPT_EXP);
 8015150:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8015154:	2b00      	cmp	r3, #0
 8015156:	d004      	beq.n	8015162 <_etoa+0x302>
 8015158:	ed97 7b00 	vldr	d7, [r7]
 801515c:	eeb1 7b47 	vneg.f64	d7, d7
 8015160:	e001      	b.n	8015166 <_etoa+0x306>
 8015162:	ed97 7b00 	vldr	d7, [r7]
 8015166:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8015168:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 801516c:	9302      	str	r3, [sp, #8]
 801516e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8015170:	9301      	str	r3, [sp, #4]
 8015172:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8015174:	9300      	str	r3, [sp, #0]
 8015176:	eeb0 0b47 	vmov.f64	d0, d7
 801517a:	68bb      	ldr	r3, [r7, #8]
 801517c:	68fa      	ldr	r2, [r7, #12]
 801517e:	6939      	ldr	r1, [r7, #16]
 8015180:	6978      	ldr	r0, [r7, #20]
 8015182:	f7ff fc1d 	bl	80149c0 <_ftoa>
 8015186:	60f8      	str	r0, [r7, #12]

  // output the exponent part
  if (minwidth) {
 8015188:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 801518a:	2b00      	cmp	r3, #0
 801518c:	d06a      	beq.n	8015264 <_etoa+0x404>
    // output the exponential symbol
    out((flags & FLAGS_UPPERCASE) ? 'E' : 'e', buffer, idx++, maxlen);
 801518e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8015190:	f003 0320 	and.w	r3, r3, #32
 8015194:	2b00      	cmp	r3, #0
 8015196:	d02f      	beq.n	80151f8 <_etoa+0x398>
 8015198:	2045      	movs	r0, #69	; 0x45
 801519a:	e02e      	b.n	80151fa <_etoa+0x39a>
 801519c:	f3af 8000 	nop.w
 80151a0:	ffffffff 	.word	0xffffffff
 80151a4:	7fefffff 	.word	0x7fefffff
 80151a8:	ffffffff 	.word	0xffffffff
 80151ac:	ffefffff 	.word	0xffefffff
 80151b0:	509f79fb 	.word	0x509f79fb
 80151b4:	3fd34413 	.word	0x3fd34413
 80151b8:	8b60c8b3 	.word	0x8b60c8b3
 80151bc:	3fc68a28 	.word	0x3fc68a28
 80151c0:	636f4361 	.word	0x636f4361
 80151c4:	3fd287a7 	.word	0x3fd287a7
 80151c8:	0979a371 	.word	0x0979a371
 80151cc:	400a934f 	.word	0x400a934f
 80151d0:	bbb55516 	.word	0xbbb55516
 80151d4:	40026bb1 	.word	0x40026bb1
 80151d8:	fefa39ef 	.word	0xfefa39ef
 80151dc:	3fe62e42 	.word	0x3fe62e42
 80151e0:	eb1c432d 	.word	0xeb1c432d
 80151e4:	3f1a36e2 	.word	0x3f1a36e2
 80151e8:	00000000 	.word	0x00000000
 80151ec:	412e8480 	.word	0x412e8480
 80151f0:	000fffff 	.word	0x000fffff
 80151f4:	3ff00000 	.word	0x3ff00000
 80151f8:	2065      	movs	r0, #101	; 0x65
 80151fa:	68fa      	ldr	r2, [r7, #12]
 80151fc:	1c53      	adds	r3, r2, #1
 80151fe:	60fb      	str	r3, [r7, #12]
 8015200:	697c      	ldr	r4, [r7, #20]
 8015202:	68bb      	ldr	r3, [r7, #8]
 8015204:	6939      	ldr	r1, [r7, #16]
 8015206:	47a0      	blx	r4
    // output the exponent value
    idx = _ntoa_long(out, buffer, idx, maxlen, (expval < 0) ? -expval : expval, expval < 0, 10, 0, minwidth-1, FLAGS_ZEROPAD | FLAGS_PLUS);
 8015208:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801520a:	2b00      	cmp	r3, #0
 801520c:	bfb8      	it	lt
 801520e:	425b      	neglt	r3, r3
 8015210:	4618      	mov	r0, r3
 8015212:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8015214:	0fdb      	lsrs	r3, r3, #31
 8015216:	b2db      	uxtb	r3, r3
 8015218:	6cba      	ldr	r2, [r7, #72]	; 0x48
 801521a:	3a01      	subs	r2, #1
 801521c:	2105      	movs	r1, #5
 801521e:	9105      	str	r1, [sp, #20]
 8015220:	9204      	str	r2, [sp, #16]
 8015222:	2200      	movs	r2, #0
 8015224:	9203      	str	r2, [sp, #12]
 8015226:	220a      	movs	r2, #10
 8015228:	9202      	str	r2, [sp, #8]
 801522a:	9301      	str	r3, [sp, #4]
 801522c:	9000      	str	r0, [sp, #0]
 801522e:	68bb      	ldr	r3, [r7, #8]
 8015230:	68fa      	ldr	r2, [r7, #12]
 8015232:	6939      	ldr	r1, [r7, #16]
 8015234:	6978      	ldr	r0, [r7, #20]
 8015236:	f7ff faed 	bl	8014814 <_ntoa_long>
 801523a:	60f8      	str	r0, [r7, #12]
    // might need to right-pad spaces
    if (flags & FLAGS_LEFT) {
 801523c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 801523e:	f003 0302 	and.w	r3, r3, #2
 8015242:	2b00      	cmp	r3, #0
 8015244:	d00e      	beq.n	8015264 <_etoa+0x404>
      while (idx - start_idx < width) out(' ', buffer, idx++, maxlen);
 8015246:	e007      	b.n	8015258 <_etoa+0x3f8>
 8015248:	68fa      	ldr	r2, [r7, #12]
 801524a:	1c53      	adds	r3, r2, #1
 801524c:	60fb      	str	r3, [r7, #12]
 801524e:	697c      	ldr	r4, [r7, #20]
 8015250:	68bb      	ldr	r3, [r7, #8]
 8015252:	6939      	ldr	r1, [r7, #16]
 8015254:	2020      	movs	r0, #32
 8015256:	47a0      	blx	r4
 8015258:	68fa      	ldr	r2, [r7, #12]
 801525a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801525c:	1ad3      	subs	r3, r2, r3
 801525e:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8015260:	429a      	cmp	r2, r3
 8015262:	d8f1      	bhi.n	8015248 <_etoa+0x3e8>
    }
  }
  return idx;
 8015264:	68fb      	ldr	r3, [r7, #12]
}
 8015266:	4618      	mov	r0, r3
 8015268:	3750      	adds	r7, #80	; 0x50
 801526a:	46bd      	mov	sp, r7
 801526c:	e8bd 8890 	ldmia.w	sp!, {r4, r7, fp, pc}

08015270 <_vsnprintf>:
#endif  // PRINTF_SUPPORT_FLOAT


// internal vsnprintf
static int _vsnprintf(out_fct_type out, char* buffer, const size_t maxlen, const char* format, va_list va)
{
 8015270:	b5b0      	push	{r4, r5, r7, lr}
 8015272:	b0a0      	sub	sp, #128	; 0x80
 8015274:	af0a      	add	r7, sp, #40	; 0x28
 8015276:	60f8      	str	r0, [r7, #12]
 8015278:	60b9      	str	r1, [r7, #8]
 801527a:	607a      	str	r2, [r7, #4]
 801527c:	603b      	str	r3, [r7, #0]
  unsigned int flags, width, precision, n;
  size_t idx = 0U;
 801527e:	2300      	movs	r3, #0
 8015280:	647b      	str	r3, [r7, #68]	; 0x44

  if (!buffer) {
 8015282:	68bb      	ldr	r3, [r7, #8]
 8015284:	2b00      	cmp	r3, #0
 8015286:	f040 848e 	bne.w	8015ba6 <_vsnprintf+0x936>
    // use null output function
    out = _out_null;
 801528a:	4ba0      	ldr	r3, [pc, #640]	; (801550c <_vsnprintf+0x29c>)
 801528c:	60fb      	str	r3, [r7, #12]
  }

  while (*format)
 801528e:	f000 bc8a 	b.w	8015ba6 <_vsnprintf+0x936>
  {
    // format specifier?  %[flags][width][.precision][length]
    if (*format != '%') {
 8015292:	683b      	ldr	r3, [r7, #0]
 8015294:	781b      	ldrb	r3, [r3, #0]
 8015296:	2b25      	cmp	r3, #37	; 0x25
 8015298:	d00d      	beq.n	80152b6 <_vsnprintf+0x46>
      // no
      out(*format, buffer, idx++, maxlen);
 801529a:	683b      	ldr	r3, [r7, #0]
 801529c:	7818      	ldrb	r0, [r3, #0]
 801529e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80152a0:	1c53      	adds	r3, r2, #1
 80152a2:	647b      	str	r3, [r7, #68]	; 0x44
 80152a4:	68fc      	ldr	r4, [r7, #12]
 80152a6:	687b      	ldr	r3, [r7, #4]
 80152a8:	68b9      	ldr	r1, [r7, #8]
 80152aa:	47a0      	blx	r4
      format++;
 80152ac:	683b      	ldr	r3, [r7, #0]
 80152ae:	3301      	adds	r3, #1
 80152b0:	603b      	str	r3, [r7, #0]
      continue;
 80152b2:	f000 bc78 	b.w	8015ba6 <_vsnprintf+0x936>
    }
    else {
      // yes, evaluate it
      format++;
 80152b6:	683b      	ldr	r3, [r7, #0]
 80152b8:	3301      	adds	r3, #1
 80152ba:	603b      	str	r3, [r7, #0]
    }

    // evaluate flags
    flags = 0U;
 80152bc:	2300      	movs	r3, #0
 80152be:	657b      	str	r3, [r7, #84]	; 0x54
    do {
      switch (*format) {
 80152c0:	683b      	ldr	r3, [r7, #0]
 80152c2:	781b      	ldrb	r3, [r3, #0]
 80152c4:	3b20      	subs	r3, #32
 80152c6:	2b10      	cmp	r3, #16
 80152c8:	d856      	bhi.n	8015378 <_vsnprintf+0x108>
 80152ca:	a201      	add	r2, pc, #4	; (adr r2, 80152d0 <_vsnprintf+0x60>)
 80152cc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80152d0:	08015351 	.word	0x08015351
 80152d4:	08015379 	.word	0x08015379
 80152d8:	08015379 	.word	0x08015379
 80152dc:	08015365 	.word	0x08015365
 80152e0:	08015379 	.word	0x08015379
 80152e4:	08015379 	.word	0x08015379
 80152e8:	08015379 	.word	0x08015379
 80152ec:	08015379 	.word	0x08015379
 80152f0:	08015379 	.word	0x08015379
 80152f4:	08015379 	.word	0x08015379
 80152f8:	08015379 	.word	0x08015379
 80152fc:	0801533d 	.word	0x0801533d
 8015300:	08015379 	.word	0x08015379
 8015304:	08015329 	.word	0x08015329
 8015308:	08015379 	.word	0x08015379
 801530c:	08015379 	.word	0x08015379
 8015310:	08015315 	.word	0x08015315
        case '0': flags |= FLAGS_ZEROPAD; format++; n = 1U; break;
 8015314:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8015316:	f043 0301 	orr.w	r3, r3, #1
 801531a:	657b      	str	r3, [r7, #84]	; 0x54
 801531c:	683b      	ldr	r3, [r7, #0]
 801531e:	3301      	adds	r3, #1
 8015320:	603b      	str	r3, [r7, #0]
 8015322:	2301      	movs	r3, #1
 8015324:	64bb      	str	r3, [r7, #72]	; 0x48
 8015326:	e02a      	b.n	801537e <_vsnprintf+0x10e>
        case '-': flags |= FLAGS_LEFT;    format++; n = 1U; break;
 8015328:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801532a:	f043 0302 	orr.w	r3, r3, #2
 801532e:	657b      	str	r3, [r7, #84]	; 0x54
 8015330:	683b      	ldr	r3, [r7, #0]
 8015332:	3301      	adds	r3, #1
 8015334:	603b      	str	r3, [r7, #0]
 8015336:	2301      	movs	r3, #1
 8015338:	64bb      	str	r3, [r7, #72]	; 0x48
 801533a:	e020      	b.n	801537e <_vsnprintf+0x10e>
        case '+': flags |= FLAGS_PLUS;    format++; n = 1U; break;
 801533c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801533e:	f043 0304 	orr.w	r3, r3, #4
 8015342:	657b      	str	r3, [r7, #84]	; 0x54
 8015344:	683b      	ldr	r3, [r7, #0]
 8015346:	3301      	adds	r3, #1
 8015348:	603b      	str	r3, [r7, #0]
 801534a:	2301      	movs	r3, #1
 801534c:	64bb      	str	r3, [r7, #72]	; 0x48
 801534e:	e016      	b.n	801537e <_vsnprintf+0x10e>
        case ' ': flags |= FLAGS_SPACE;   format++; n = 1U; break;
 8015350:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8015352:	f043 0308 	orr.w	r3, r3, #8
 8015356:	657b      	str	r3, [r7, #84]	; 0x54
 8015358:	683b      	ldr	r3, [r7, #0]
 801535a:	3301      	adds	r3, #1
 801535c:	603b      	str	r3, [r7, #0]
 801535e:	2301      	movs	r3, #1
 8015360:	64bb      	str	r3, [r7, #72]	; 0x48
 8015362:	e00c      	b.n	801537e <_vsnprintf+0x10e>
        case '#': flags |= FLAGS_HASH;    format++; n = 1U; break;
 8015364:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8015366:	f043 0310 	orr.w	r3, r3, #16
 801536a:	657b      	str	r3, [r7, #84]	; 0x54
 801536c:	683b      	ldr	r3, [r7, #0]
 801536e:	3301      	adds	r3, #1
 8015370:	603b      	str	r3, [r7, #0]
 8015372:	2301      	movs	r3, #1
 8015374:	64bb      	str	r3, [r7, #72]	; 0x48
 8015376:	e002      	b.n	801537e <_vsnprintf+0x10e>
        default :                                   n = 0U; break;
 8015378:	2300      	movs	r3, #0
 801537a:	64bb      	str	r3, [r7, #72]	; 0x48
 801537c:	bf00      	nop
      }
    } while (n);
 801537e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8015380:	2b00      	cmp	r3, #0
 8015382:	d19d      	bne.n	80152c0 <_vsnprintf+0x50>

    // evaluate width field
    width = 0U;
 8015384:	2300      	movs	r3, #0
 8015386:	653b      	str	r3, [r7, #80]	; 0x50
    if (_is_digit(*format)) {
 8015388:	683b      	ldr	r3, [r7, #0]
 801538a:	781b      	ldrb	r3, [r3, #0]
 801538c:	4618      	mov	r0, r3
 801538e:	f7ff f8da 	bl	8014546 <_is_digit>
 8015392:	4603      	mov	r3, r0
 8015394:	2b00      	cmp	r3, #0
 8015396:	d005      	beq.n	80153a4 <_vsnprintf+0x134>
      width = _atoi(&format);
 8015398:	463b      	mov	r3, r7
 801539a:	4618      	mov	r0, r3
 801539c:	f7ff f8ea 	bl	8014574 <_atoi>
 80153a0:	6538      	str	r0, [r7, #80]	; 0x50
 80153a2:	e018      	b.n	80153d6 <_vsnprintf+0x166>
    }
    else if (*format == '*') {
 80153a4:	683b      	ldr	r3, [r7, #0]
 80153a6:	781b      	ldrb	r3, [r3, #0]
 80153a8:	2b2a      	cmp	r3, #42	; 0x2a
 80153aa:	d114      	bne.n	80153d6 <_vsnprintf+0x166>
      const int w = va_arg(va, int);
 80153ac:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80153ae:	1d1a      	adds	r2, r3, #4
 80153b0:	66ba      	str	r2, [r7, #104]	; 0x68
 80153b2:	681b      	ldr	r3, [r3, #0]
 80153b4:	633b      	str	r3, [r7, #48]	; 0x30
      if (w < 0) {
 80153b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80153b8:	2b00      	cmp	r3, #0
 80153ba:	da07      	bge.n	80153cc <_vsnprintf+0x15c>
        flags |= FLAGS_LEFT;    // reverse padding
 80153bc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80153be:	f043 0302 	orr.w	r3, r3, #2
 80153c2:	657b      	str	r3, [r7, #84]	; 0x54
        width = (unsigned int)-w;
 80153c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80153c6:	425b      	negs	r3, r3
 80153c8:	653b      	str	r3, [r7, #80]	; 0x50
 80153ca:	e001      	b.n	80153d0 <_vsnprintf+0x160>
      }
      else {
        width = (unsigned int)w;
 80153cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80153ce:	653b      	str	r3, [r7, #80]	; 0x50
      }
      format++;
 80153d0:	683b      	ldr	r3, [r7, #0]
 80153d2:	3301      	adds	r3, #1
 80153d4:	603b      	str	r3, [r7, #0]
    }

    // evaluate precision field
    precision = 0U;
 80153d6:	2300      	movs	r3, #0
 80153d8:	64fb      	str	r3, [r7, #76]	; 0x4c
    if (*format == '.') {
 80153da:	683b      	ldr	r3, [r7, #0]
 80153dc:	781b      	ldrb	r3, [r3, #0]
 80153de:	2b2e      	cmp	r3, #46	; 0x2e
 80153e0:	d124      	bne.n	801542c <_vsnprintf+0x1bc>
      flags |= FLAGS_PRECISION;
 80153e2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80153e4:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80153e8:	657b      	str	r3, [r7, #84]	; 0x54
      format++;
 80153ea:	683b      	ldr	r3, [r7, #0]
 80153ec:	3301      	adds	r3, #1
 80153ee:	603b      	str	r3, [r7, #0]
      if (_is_digit(*format)) {
 80153f0:	683b      	ldr	r3, [r7, #0]
 80153f2:	781b      	ldrb	r3, [r3, #0]
 80153f4:	4618      	mov	r0, r3
 80153f6:	f7ff f8a6 	bl	8014546 <_is_digit>
 80153fa:	4603      	mov	r3, r0
 80153fc:	2b00      	cmp	r3, #0
 80153fe:	d005      	beq.n	801540c <_vsnprintf+0x19c>
        precision = _atoi(&format);
 8015400:	463b      	mov	r3, r7
 8015402:	4618      	mov	r0, r3
 8015404:	f7ff f8b6 	bl	8014574 <_atoi>
 8015408:	64f8      	str	r0, [r7, #76]	; 0x4c
 801540a:	e00f      	b.n	801542c <_vsnprintf+0x1bc>
      }
      else if (*format == '*') {
 801540c:	683b      	ldr	r3, [r7, #0]
 801540e:	781b      	ldrb	r3, [r3, #0]
 8015410:	2b2a      	cmp	r3, #42	; 0x2a
 8015412:	d10b      	bne.n	801542c <_vsnprintf+0x1bc>
        const int prec = (int)va_arg(va, int);
 8015414:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8015416:	1d1a      	adds	r2, r3, #4
 8015418:	66ba      	str	r2, [r7, #104]	; 0x68
 801541a:	681b      	ldr	r3, [r3, #0]
 801541c:	62fb      	str	r3, [r7, #44]	; 0x2c
        precision = prec > 0 ? (unsigned int)prec : 0U;
 801541e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015420:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8015424:	64fb      	str	r3, [r7, #76]	; 0x4c
        format++;
 8015426:	683b      	ldr	r3, [r7, #0]
 8015428:	3301      	adds	r3, #1
 801542a:	603b      	str	r3, [r7, #0]
      }
    }

    // evaluate length field
    switch (*format) {
 801542c:	683b      	ldr	r3, [r7, #0]
 801542e:	781b      	ldrb	r3, [r3, #0]
 8015430:	3b68      	subs	r3, #104	; 0x68
 8015432:	2b12      	cmp	r3, #18
 8015434:	d866      	bhi.n	8015504 <_vsnprintf+0x294>
 8015436:	a201      	add	r2, pc, #4	; (adr r2, 801543c <_vsnprintf+0x1cc>)
 8015438:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801543c:	080154af 	.word	0x080154af
 8015440:	08015505 	.word	0x08015505
 8015444:	080154e5 	.word	0x080154e5
 8015448:	08015505 	.word	0x08015505
 801544c:	08015489 	.word	0x08015489
 8015450:	08015505 	.word	0x08015505
 8015454:	08015505 	.word	0x08015505
 8015458:	08015505 	.word	0x08015505
 801545c:	08015505 	.word	0x08015505
 8015460:	08015505 	.word	0x08015505
 8015464:	08015505 	.word	0x08015505
 8015468:	08015505 	.word	0x08015505
 801546c:	080154d5 	.word	0x080154d5
 8015470:	08015505 	.word	0x08015505
 8015474:	08015505 	.word	0x08015505
 8015478:	08015505 	.word	0x08015505
 801547c:	08015505 	.word	0x08015505
 8015480:	08015505 	.word	0x08015505
 8015484:	080154f5 	.word	0x080154f5
      case 'l' :
        flags |= FLAGS_LONG;
 8015488:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801548a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 801548e:	657b      	str	r3, [r7, #84]	; 0x54
        format++;
 8015490:	683b      	ldr	r3, [r7, #0]
 8015492:	3301      	adds	r3, #1
 8015494:	603b      	str	r3, [r7, #0]
        if (*format == 'l') {
 8015496:	683b      	ldr	r3, [r7, #0]
 8015498:	781b      	ldrb	r3, [r3, #0]
 801549a:	2b6c      	cmp	r3, #108	; 0x6c
 801549c:	d134      	bne.n	8015508 <_vsnprintf+0x298>
          flags |= FLAGS_LONG_LONG;
 801549e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80154a0:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80154a4:	657b      	str	r3, [r7, #84]	; 0x54
          format++;
 80154a6:	683b      	ldr	r3, [r7, #0]
 80154a8:	3301      	adds	r3, #1
 80154aa:	603b      	str	r3, [r7, #0]
        }
        break;
 80154ac:	e02c      	b.n	8015508 <_vsnprintf+0x298>
      case 'h' :
        flags |= FLAGS_SHORT;
 80154ae:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80154b0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80154b4:	657b      	str	r3, [r7, #84]	; 0x54
        format++;
 80154b6:	683b      	ldr	r3, [r7, #0]
 80154b8:	3301      	adds	r3, #1
 80154ba:	603b      	str	r3, [r7, #0]
        if (*format == 'h') {
 80154bc:	683b      	ldr	r3, [r7, #0]
 80154be:	781b      	ldrb	r3, [r3, #0]
 80154c0:	2b68      	cmp	r3, #104	; 0x68
 80154c2:	d125      	bne.n	8015510 <_vsnprintf+0x2a0>
          flags |= FLAGS_CHAR;
 80154c4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80154c6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80154ca:	657b      	str	r3, [r7, #84]	; 0x54
          format++;
 80154cc:	683b      	ldr	r3, [r7, #0]
 80154ce:	3301      	adds	r3, #1
 80154d0:	603b      	str	r3, [r7, #0]
        }
        break;
 80154d2:	e01d      	b.n	8015510 <_vsnprintf+0x2a0>
#if defined(PRINTF_SUPPORT_PTRDIFF_T)
      case 't' :
        flags |= (sizeof(ptrdiff_t) == sizeof(long) ? FLAGS_LONG : FLAGS_LONG_LONG);
 80154d4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80154d6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80154da:	657b      	str	r3, [r7, #84]	; 0x54
        format++;
 80154dc:	683b      	ldr	r3, [r7, #0]
 80154de:	3301      	adds	r3, #1
 80154e0:	603b      	str	r3, [r7, #0]
        break;
 80154e2:	e016      	b.n	8015512 <_vsnprintf+0x2a2>
#endif
      case 'j' :
        flags |= (sizeof(intmax_t) == sizeof(long) ? FLAGS_LONG : FLAGS_LONG_LONG);
 80154e4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80154e6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80154ea:	657b      	str	r3, [r7, #84]	; 0x54
        format++;
 80154ec:	683b      	ldr	r3, [r7, #0]
 80154ee:	3301      	adds	r3, #1
 80154f0:	603b      	str	r3, [r7, #0]
        break;
 80154f2:	e00e      	b.n	8015512 <_vsnprintf+0x2a2>
      case 'z' :
        flags |= (sizeof(size_t) == sizeof(long) ? FLAGS_LONG : FLAGS_LONG_LONG);
 80154f4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80154f6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80154fa:	657b      	str	r3, [r7, #84]	; 0x54
        format++;
 80154fc:	683b      	ldr	r3, [r7, #0]
 80154fe:	3301      	adds	r3, #1
 8015500:	603b      	str	r3, [r7, #0]
        break;
 8015502:	e006      	b.n	8015512 <_vsnprintf+0x2a2>
      default :
        break;
 8015504:	bf00      	nop
 8015506:	e004      	b.n	8015512 <_vsnprintf+0x2a2>
        break;
 8015508:	bf00      	nop
 801550a:	e002      	b.n	8015512 <_vsnprintf+0x2a2>
 801550c:	080144d1 	.word	0x080144d1
        break;
 8015510:	bf00      	nop
    }

    // evaluate specifier
    switch (*format) {
 8015512:	683b      	ldr	r3, [r7, #0]
 8015514:	781b      	ldrb	r3, [r3, #0]
 8015516:	3b25      	subs	r3, #37	; 0x25
 8015518:	2b53      	cmp	r3, #83	; 0x53
 801551a:	f200 8337 	bhi.w	8015b8c <_vsnprintf+0x91c>
 801551e:	a201      	add	r2, pc, #4	; (adr r2, 8015524 <_vsnprintf+0x2b4>)
 8015520:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8015524:	08015b75 	.word	0x08015b75
 8015528:	08015b8d 	.word	0x08015b8d
 801552c:	08015b8d 	.word	0x08015b8d
 8015530:	08015b8d 	.word	0x08015b8d
 8015534:	08015b8d 	.word	0x08015b8d
 8015538:	08015b8d 	.word	0x08015b8d
 801553c:	08015b8d 	.word	0x08015b8d
 8015540:	08015b8d 	.word	0x08015b8d
 8015544:	08015b8d 	.word	0x08015b8d
 8015548:	08015b8d 	.word	0x08015b8d
 801554c:	08015b8d 	.word	0x08015b8d
 8015550:	08015b8d 	.word	0x08015b8d
 8015554:	08015b8d 	.word	0x08015b8d
 8015558:	08015b8d 	.word	0x08015b8d
 801555c:	08015b8d 	.word	0x08015b8d
 8015560:	08015b8d 	.word	0x08015b8d
 8015564:	08015b8d 	.word	0x08015b8d
 8015568:	08015b8d 	.word	0x08015b8d
 801556c:	08015b8d 	.word	0x08015b8d
 8015570:	08015b8d 	.word	0x08015b8d
 8015574:	08015b8d 	.word	0x08015b8d
 8015578:	08015b8d 	.word	0x08015b8d
 801557c:	08015b8d 	.word	0x08015b8d
 8015580:	08015b8d 	.word	0x08015b8d
 8015584:	08015b8d 	.word	0x08015b8d
 8015588:	08015b8d 	.word	0x08015b8d
 801558c:	08015b8d 	.word	0x08015b8d
 8015590:	08015b8d 	.word	0x08015b8d
 8015594:	08015b8d 	.word	0x08015b8d
 8015598:	08015b8d 	.word	0x08015b8d
 801559c:	08015b8d 	.word	0x08015b8d
 80155a0:	08015b8d 	.word	0x08015b8d
 80155a4:	08015949 	.word	0x08015949
 80155a8:	08015901 	.word	0x08015901
 80155ac:	08015949 	.word	0x08015949
 80155b0:	08015b8d 	.word	0x08015b8d
 80155b4:	08015b8d 	.word	0x08015b8d
 80155b8:	08015b8d 	.word	0x08015b8d
 80155bc:	08015b8d 	.word	0x08015b8d
 80155c0:	08015b8d 	.word	0x08015b8d
 80155c4:	08015b8d 	.word	0x08015b8d
 80155c8:	08015b8d 	.word	0x08015b8d
 80155cc:	08015b8d 	.word	0x08015b8d
 80155d0:	08015b8d 	.word	0x08015b8d
 80155d4:	08015b8d 	.word	0x08015b8d
 80155d8:	08015b8d 	.word	0x08015b8d
 80155dc:	08015b8d 	.word	0x08015b8d
 80155e0:	08015b8d 	.word	0x08015b8d
 80155e4:	08015b8d 	.word	0x08015b8d
 80155e8:	08015b8d 	.word	0x08015b8d
 80155ec:	08015b8d 	.word	0x08015b8d
 80155f0:	08015675 	.word	0x08015675
 80155f4:	08015b8d 	.word	0x08015b8d
 80155f8:	08015b8d 	.word	0x08015b8d
 80155fc:	08015b8d 	.word	0x08015b8d
 8015600:	08015b8d 	.word	0x08015b8d
 8015604:	08015b8d 	.word	0x08015b8d
 8015608:	08015b8d 	.word	0x08015b8d
 801560c:	08015b8d 	.word	0x08015b8d
 8015610:	08015b8d 	.word	0x08015b8d
 8015614:	08015b8d 	.word	0x08015b8d
 8015618:	08015675 	.word	0x08015675
 801561c:	080159b1 	.word	0x080159b1
 8015620:	08015675 	.word	0x08015675
 8015624:	08015949 	.word	0x08015949
 8015628:	08015901 	.word	0x08015901
 801562c:	08015949 	.word	0x08015949
 8015630:	08015b8d 	.word	0x08015b8d
 8015634:	08015675 	.word	0x08015675
 8015638:	08015b8d 	.word	0x08015b8d
 801563c:	08015b8d 	.word	0x08015b8d
 8015640:	08015b8d 	.word	0x08015b8d
 8015644:	08015b8d 	.word	0x08015b8d
 8015648:	08015b8d 	.word	0x08015b8d
 801564c:	08015675 	.word	0x08015675
 8015650:	08015ae9 	.word	0x08015ae9
 8015654:	08015b8d 	.word	0x08015b8d
 8015658:	08015b8d 	.word	0x08015b8d
 801565c:	08015a25 	.word	0x08015a25
 8015660:	08015b8d 	.word	0x08015b8d
 8015664:	08015675 	.word	0x08015675
 8015668:	08015b8d 	.word	0x08015b8d
 801566c:	08015b8d 	.word	0x08015b8d
 8015670:	08015675 	.word	0x08015675
      case 'X' :
      case 'o' :
      case 'b' : {
        // set the base
        unsigned int base;
        if (*format == 'x' || *format == 'X') {
 8015674:	683b      	ldr	r3, [r7, #0]
 8015676:	781b      	ldrb	r3, [r3, #0]
 8015678:	2b78      	cmp	r3, #120	; 0x78
 801567a:	d003      	beq.n	8015684 <_vsnprintf+0x414>
 801567c:	683b      	ldr	r3, [r7, #0]
 801567e:	781b      	ldrb	r3, [r3, #0]
 8015680:	2b58      	cmp	r3, #88	; 0x58
 8015682:	d102      	bne.n	801568a <_vsnprintf+0x41a>
          base = 16U;
 8015684:	2310      	movs	r3, #16
 8015686:	643b      	str	r3, [r7, #64]	; 0x40
 8015688:	e013      	b.n	80156b2 <_vsnprintf+0x442>
        }
        else if (*format == 'o') {
 801568a:	683b      	ldr	r3, [r7, #0]
 801568c:	781b      	ldrb	r3, [r3, #0]
 801568e:	2b6f      	cmp	r3, #111	; 0x6f
 8015690:	d102      	bne.n	8015698 <_vsnprintf+0x428>
          base =  8U;
 8015692:	2308      	movs	r3, #8
 8015694:	643b      	str	r3, [r7, #64]	; 0x40
 8015696:	e00c      	b.n	80156b2 <_vsnprintf+0x442>
        }
        else if (*format == 'b') {
 8015698:	683b      	ldr	r3, [r7, #0]
 801569a:	781b      	ldrb	r3, [r3, #0]
 801569c:	2b62      	cmp	r3, #98	; 0x62
 801569e:	d102      	bne.n	80156a6 <_vsnprintf+0x436>
          base =  2U;
 80156a0:	2302      	movs	r3, #2
 80156a2:	643b      	str	r3, [r7, #64]	; 0x40
 80156a4:	e005      	b.n	80156b2 <_vsnprintf+0x442>
        }
        else {
          base = 10U;
 80156a6:	230a      	movs	r3, #10
 80156a8:	643b      	str	r3, [r7, #64]	; 0x40
          flags &= ~FLAGS_HASH;   // no hash for dec format
 80156aa:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80156ac:	f023 0310 	bic.w	r3, r3, #16
 80156b0:	657b      	str	r3, [r7, #84]	; 0x54
        }
        // uppercase
        if (*format == 'X') {
 80156b2:	683b      	ldr	r3, [r7, #0]
 80156b4:	781b      	ldrb	r3, [r3, #0]
 80156b6:	2b58      	cmp	r3, #88	; 0x58
 80156b8:	d103      	bne.n	80156c2 <_vsnprintf+0x452>
          flags |= FLAGS_UPPERCASE;
 80156ba:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80156bc:	f043 0320 	orr.w	r3, r3, #32
 80156c0:	657b      	str	r3, [r7, #84]	; 0x54
        }

        // no plus or space flag for u, x, X, o, b
        if ((*format != 'i') && (*format != 'd')) {
 80156c2:	683b      	ldr	r3, [r7, #0]
 80156c4:	781b      	ldrb	r3, [r3, #0]
 80156c6:	2b69      	cmp	r3, #105	; 0x69
 80156c8:	d007      	beq.n	80156da <_vsnprintf+0x46a>
 80156ca:	683b      	ldr	r3, [r7, #0]
 80156cc:	781b      	ldrb	r3, [r3, #0]
 80156ce:	2b64      	cmp	r3, #100	; 0x64
 80156d0:	d003      	beq.n	80156da <_vsnprintf+0x46a>
          flags &= ~(FLAGS_PLUS | FLAGS_SPACE);
 80156d2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80156d4:	f023 030c 	bic.w	r3, r3, #12
 80156d8:	657b      	str	r3, [r7, #84]	; 0x54
        }

        // ignore '0' flag when precision is given
        if (flags & FLAGS_PRECISION) {
 80156da:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80156dc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80156e0:	2b00      	cmp	r3, #0
 80156e2:	d003      	beq.n	80156ec <_vsnprintf+0x47c>
          flags &= ~FLAGS_ZEROPAD;
 80156e4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80156e6:	f023 0301 	bic.w	r3, r3, #1
 80156ea:	657b      	str	r3, [r7, #84]	; 0x54
        }

        // convert the integer
        if ((*format == 'i') || (*format == 'd')) {
 80156ec:	683b      	ldr	r3, [r7, #0]
 80156ee:	781b      	ldrb	r3, [r3, #0]
 80156f0:	2b69      	cmp	r3, #105	; 0x69
 80156f2:	d004      	beq.n	80156fe <_vsnprintf+0x48e>
 80156f4:	683b      	ldr	r3, [r7, #0]
 80156f6:	781b      	ldrb	r3, [r3, #0]
 80156f8:	2b64      	cmp	r3, #100	; 0x64
 80156fa:	f040 808d 	bne.w	8015818 <_vsnprintf+0x5a8>
          // signed
          if (flags & FLAGS_LONG_LONG) {
 80156fe:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8015700:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8015704:	2b00      	cmp	r3, #0
 8015706:	d02e      	beq.n	8015766 <_vsnprintf+0x4f6>
#if defined(PRINTF_SUPPORT_LONG_LONG)
            const long long value = va_arg(va, long long);
 8015708:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 801570a:	3307      	adds	r3, #7
 801570c:	f023 0307 	bic.w	r3, r3, #7
 8015710:	f103 0208 	add.w	r2, r3, #8
 8015714:	66ba      	str	r2, [r7, #104]	; 0x68
 8015716:	e9d3 3400 	ldrd	r3, r4, [r3]
 801571a:	e9c7 3404 	strd	r3, r4, [r7, #16]
            idx = _ntoa_long_long(out, buffer, idx, maxlen, (unsigned long long)(value > 0 ? value : 0 - value), value < 0, base, precision, width, flags);
 801571e:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
 8015722:	2b00      	cmp	r3, #0
 8015724:	f174 0200 	sbcs.w	r2, r4, #0
 8015728:	da02      	bge.n	8015730 <_vsnprintf+0x4c0>
 801572a:	425b      	negs	r3, r3
 801572c:	eb64 0444 	sbc.w	r4, r4, r4, lsl #1
 8015730:	4619      	mov	r1, r3
 8015732:	4622      	mov	r2, r4
 8015734:	697b      	ldr	r3, [r7, #20]
 8015736:	0fdb      	lsrs	r3, r3, #31
 8015738:	b2d8      	uxtb	r0, r3
 801573a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801573c:	f04f 0400 	mov.w	r4, #0
 8015740:	6d7d      	ldr	r5, [r7, #84]	; 0x54
 8015742:	9508      	str	r5, [sp, #32]
 8015744:	6d3d      	ldr	r5, [r7, #80]	; 0x50
 8015746:	9507      	str	r5, [sp, #28]
 8015748:	6cfd      	ldr	r5, [r7, #76]	; 0x4c
 801574a:	9506      	str	r5, [sp, #24]
 801574c:	e9cd 3404 	strd	r3, r4, [sp, #16]
 8015750:	9002      	str	r0, [sp, #8]
 8015752:	e9cd 1200 	strd	r1, r2, [sp]
 8015756:	687b      	ldr	r3, [r7, #4]
 8015758:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 801575a:	68b9      	ldr	r1, [r7, #8]
 801575c:	68f8      	ldr	r0, [r7, #12]
 801575e:	f7ff f8c0 	bl	80148e2 <_ntoa_long_long>
 8015762:	6478      	str	r0, [r7, #68]	; 0x44
          if (flags & FLAGS_LONG_LONG) {
 8015764:	e0c8      	b.n	80158f8 <_vsnprintf+0x688>
#endif
          }
          else if (flags & FLAGS_LONG) {
 8015766:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8015768:	f403 7380 	and.w	r3, r3, #256	; 0x100
 801576c:	2b00      	cmp	r3, #0
 801576e:	d01e      	beq.n	80157ae <_vsnprintf+0x53e>
            const long value = va_arg(va, long);
 8015770:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8015772:	1d1a      	adds	r2, r3, #4
 8015774:	66ba      	str	r2, [r7, #104]	; 0x68
 8015776:	681b      	ldr	r3, [r3, #0]
 8015778:	61fb      	str	r3, [r7, #28]
            idx = _ntoa_long(out, buffer, idx, maxlen, (unsigned long)(value > 0 ? value : 0 - value), value < 0, base, precision, width, flags);
 801577a:	69fb      	ldr	r3, [r7, #28]
 801577c:	2b00      	cmp	r3, #0
 801577e:	bfb8      	it	lt
 8015780:	425b      	neglt	r3, r3
 8015782:	4619      	mov	r1, r3
 8015784:	69fb      	ldr	r3, [r7, #28]
 8015786:	0fdb      	lsrs	r3, r3, #31
 8015788:	b2db      	uxtb	r3, r3
 801578a:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 801578c:	9205      	str	r2, [sp, #20]
 801578e:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8015790:	9204      	str	r2, [sp, #16]
 8015792:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8015794:	9203      	str	r2, [sp, #12]
 8015796:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8015798:	9202      	str	r2, [sp, #8]
 801579a:	9301      	str	r3, [sp, #4]
 801579c:	9100      	str	r1, [sp, #0]
 801579e:	687b      	ldr	r3, [r7, #4]
 80157a0:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80157a2:	68b9      	ldr	r1, [r7, #8]
 80157a4:	68f8      	ldr	r0, [r7, #12]
 80157a6:	f7ff f835 	bl	8014814 <_ntoa_long>
 80157aa:	6478      	str	r0, [r7, #68]	; 0x44
          if (flags & FLAGS_LONG_LONG) {
 80157ac:	e0a4      	b.n	80158f8 <_vsnprintf+0x688>
          }
          else {
            const int value = (flags & FLAGS_CHAR) ? (char)va_arg(va, int) : (flags & FLAGS_SHORT) ? (short int)va_arg(va, int) : va_arg(va, int);
 80157ae:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80157b0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80157b4:	2b00      	cmp	r3, #0
 80157b6:	d005      	beq.n	80157c4 <_vsnprintf+0x554>
 80157b8:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80157ba:	1d1a      	adds	r2, r3, #4
 80157bc:	66ba      	str	r2, [r7, #104]	; 0x68
 80157be:	681b      	ldr	r3, [r3, #0]
 80157c0:	b2db      	uxtb	r3, r3
 80157c2:	e00e      	b.n	80157e2 <_vsnprintf+0x572>
 80157c4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80157c6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80157ca:	2b00      	cmp	r3, #0
 80157cc:	d005      	beq.n	80157da <_vsnprintf+0x56a>
 80157ce:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80157d0:	1d1a      	adds	r2, r3, #4
 80157d2:	66ba      	str	r2, [r7, #104]	; 0x68
 80157d4:	681b      	ldr	r3, [r3, #0]
 80157d6:	b21b      	sxth	r3, r3
 80157d8:	e003      	b.n	80157e2 <_vsnprintf+0x572>
 80157da:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80157dc:	1d1a      	adds	r2, r3, #4
 80157de:	66ba      	str	r2, [r7, #104]	; 0x68
 80157e0:	681b      	ldr	r3, [r3, #0]
 80157e2:	623b      	str	r3, [r7, #32]
            idx = _ntoa_long(out, buffer, idx, maxlen, (unsigned int)(value > 0 ? value : 0 - value), value < 0, base, precision, width, flags);
 80157e4:	6a3b      	ldr	r3, [r7, #32]
 80157e6:	2b00      	cmp	r3, #0
 80157e8:	bfb8      	it	lt
 80157ea:	425b      	neglt	r3, r3
 80157ec:	4619      	mov	r1, r3
 80157ee:	6a3b      	ldr	r3, [r7, #32]
 80157f0:	0fdb      	lsrs	r3, r3, #31
 80157f2:	b2db      	uxtb	r3, r3
 80157f4:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80157f6:	9205      	str	r2, [sp, #20]
 80157f8:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80157fa:	9204      	str	r2, [sp, #16]
 80157fc:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80157fe:	9203      	str	r2, [sp, #12]
 8015800:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8015802:	9202      	str	r2, [sp, #8]
 8015804:	9301      	str	r3, [sp, #4]
 8015806:	9100      	str	r1, [sp, #0]
 8015808:	687b      	ldr	r3, [r7, #4]
 801580a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 801580c:	68b9      	ldr	r1, [r7, #8]
 801580e:	68f8      	ldr	r0, [r7, #12]
 8015810:	f7ff f800 	bl	8014814 <_ntoa_long>
 8015814:	6478      	str	r0, [r7, #68]	; 0x44
          if (flags & FLAGS_LONG_LONG) {
 8015816:	e06f      	b.n	80158f8 <_vsnprintf+0x688>
          }
        }
        else {
          // unsigned
          if (flags & FLAGS_LONG_LONG) {
 8015818:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801581a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 801581e:	2b00      	cmp	r3, #0
 8015820:	d020      	beq.n	8015864 <_vsnprintf+0x5f4>
#if defined(PRINTF_SUPPORT_LONG_LONG)
            idx = _ntoa_long_long(out, buffer, idx, maxlen, va_arg(va, unsigned long long), false, base, precision, width, flags);
 8015822:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8015824:	3307      	adds	r3, #7
 8015826:	f023 0307 	bic.w	r3, r3, #7
 801582a:	f103 0208 	add.w	r2, r3, #8
 801582e:	66ba      	str	r2, [r7, #104]	; 0x68
 8015830:	e9d3 3400 	ldrd	r3, r4, [r3]
 8015834:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8015836:	4611      	mov	r1, r2
 8015838:	f04f 0200 	mov.w	r2, #0
 801583c:	6d78      	ldr	r0, [r7, #84]	; 0x54
 801583e:	9008      	str	r0, [sp, #32]
 8015840:	6d38      	ldr	r0, [r7, #80]	; 0x50
 8015842:	9007      	str	r0, [sp, #28]
 8015844:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 8015846:	9006      	str	r0, [sp, #24]
 8015848:	e9cd 1204 	strd	r1, r2, [sp, #16]
 801584c:	2200      	movs	r2, #0
 801584e:	9202      	str	r2, [sp, #8]
 8015850:	e9cd 3400 	strd	r3, r4, [sp]
 8015854:	687b      	ldr	r3, [r7, #4]
 8015856:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8015858:	68b9      	ldr	r1, [r7, #8]
 801585a:	68f8      	ldr	r0, [r7, #12]
 801585c:	f7ff f841 	bl	80148e2 <_ntoa_long_long>
 8015860:	6478      	str	r0, [r7, #68]	; 0x44
 8015862:	e049      	b.n	80158f8 <_vsnprintf+0x688>
#endif
          }
          else if (flags & FLAGS_LONG) {
 8015864:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8015866:	f403 7380 	and.w	r3, r3, #256	; 0x100
 801586a:	2b00      	cmp	r3, #0
 801586c:	d016      	beq.n	801589c <_vsnprintf+0x62c>
            idx = _ntoa_long(out, buffer, idx, maxlen, va_arg(va, unsigned long), false, base, precision, width, flags);
 801586e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8015870:	1d1a      	adds	r2, r3, #4
 8015872:	66ba      	str	r2, [r7, #104]	; 0x68
 8015874:	681b      	ldr	r3, [r3, #0]
 8015876:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8015878:	9205      	str	r2, [sp, #20]
 801587a:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 801587c:	9204      	str	r2, [sp, #16]
 801587e:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8015880:	9203      	str	r2, [sp, #12]
 8015882:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8015884:	9202      	str	r2, [sp, #8]
 8015886:	2200      	movs	r2, #0
 8015888:	9201      	str	r2, [sp, #4]
 801588a:	9300      	str	r3, [sp, #0]
 801588c:	687b      	ldr	r3, [r7, #4]
 801588e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8015890:	68b9      	ldr	r1, [r7, #8]
 8015892:	68f8      	ldr	r0, [r7, #12]
 8015894:	f7fe ffbe 	bl	8014814 <_ntoa_long>
 8015898:	6478      	str	r0, [r7, #68]	; 0x44
 801589a:	e02d      	b.n	80158f8 <_vsnprintf+0x688>
          }
          else {
            const unsigned int value = (flags & FLAGS_CHAR) ? (unsigned char)va_arg(va, unsigned int) : (flags & FLAGS_SHORT) ? (unsigned short int)va_arg(va, unsigned int) : va_arg(va, unsigned int);
 801589c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801589e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80158a2:	2b00      	cmp	r3, #0
 80158a4:	d005      	beq.n	80158b2 <_vsnprintf+0x642>
 80158a6:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80158a8:	1d1a      	adds	r2, r3, #4
 80158aa:	66ba      	str	r2, [r7, #104]	; 0x68
 80158ac:	681b      	ldr	r3, [r3, #0]
 80158ae:	b2db      	uxtb	r3, r3
 80158b0:	e00e      	b.n	80158d0 <_vsnprintf+0x660>
 80158b2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80158b4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80158b8:	2b00      	cmp	r3, #0
 80158ba:	d005      	beq.n	80158c8 <_vsnprintf+0x658>
 80158bc:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80158be:	1d1a      	adds	r2, r3, #4
 80158c0:	66ba      	str	r2, [r7, #104]	; 0x68
 80158c2:	681b      	ldr	r3, [r3, #0]
 80158c4:	b29b      	uxth	r3, r3
 80158c6:	e003      	b.n	80158d0 <_vsnprintf+0x660>
 80158c8:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80158ca:	1d1a      	adds	r2, r3, #4
 80158cc:	66ba      	str	r2, [r7, #104]	; 0x68
 80158ce:	681b      	ldr	r3, [r3, #0]
 80158d0:	627b      	str	r3, [r7, #36]	; 0x24
            idx = _ntoa_long(out, buffer, idx, maxlen, value, false, base, precision, width, flags);
 80158d2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80158d4:	9305      	str	r3, [sp, #20]
 80158d6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80158d8:	9304      	str	r3, [sp, #16]
 80158da:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80158dc:	9303      	str	r3, [sp, #12]
 80158de:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80158e0:	9302      	str	r3, [sp, #8]
 80158e2:	2300      	movs	r3, #0
 80158e4:	9301      	str	r3, [sp, #4]
 80158e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80158e8:	9300      	str	r3, [sp, #0]
 80158ea:	687b      	ldr	r3, [r7, #4]
 80158ec:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80158ee:	68b9      	ldr	r1, [r7, #8]
 80158f0:	68f8      	ldr	r0, [r7, #12]
 80158f2:	f7fe ff8f 	bl	8014814 <_ntoa_long>
 80158f6:	6478      	str	r0, [r7, #68]	; 0x44
          }
        }
        format++;
 80158f8:	683b      	ldr	r3, [r7, #0]
 80158fa:	3301      	adds	r3, #1
 80158fc:	603b      	str	r3, [r7, #0]
        break;
 80158fe:	e152      	b.n	8015ba6 <_vsnprintf+0x936>
      }
#if defined(PRINTF_SUPPORT_FLOAT)
      case 'f' :
      case 'F' :
        if (*format == 'F') flags |= FLAGS_UPPERCASE;
 8015900:	683b      	ldr	r3, [r7, #0]
 8015902:	781b      	ldrb	r3, [r3, #0]
 8015904:	2b46      	cmp	r3, #70	; 0x46
 8015906:	d103      	bne.n	8015910 <_vsnprintf+0x6a0>
 8015908:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801590a:	f043 0320 	orr.w	r3, r3, #32
 801590e:	657b      	str	r3, [r7, #84]	; 0x54
        idx = _ftoa(out, buffer, idx, maxlen, va_arg(va, double), precision, width, flags);
 8015910:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8015912:	3307      	adds	r3, #7
 8015914:	f023 0307 	bic.w	r3, r3, #7
 8015918:	f103 0208 	add.w	r2, r3, #8
 801591c:	66ba      	str	r2, [r7, #104]	; 0x68
 801591e:	ed93 7b00 	vldr	d7, [r3]
 8015922:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8015924:	9302      	str	r3, [sp, #8]
 8015926:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8015928:	9301      	str	r3, [sp, #4]
 801592a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801592c:	9300      	str	r3, [sp, #0]
 801592e:	eeb0 0b47 	vmov.f64	d0, d7
 8015932:	687b      	ldr	r3, [r7, #4]
 8015934:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8015936:	68b9      	ldr	r1, [r7, #8]
 8015938:	68f8      	ldr	r0, [r7, #12]
 801593a:	f7ff f841 	bl	80149c0 <_ftoa>
 801593e:	6478      	str	r0, [r7, #68]	; 0x44
        format++;
 8015940:	683b      	ldr	r3, [r7, #0]
 8015942:	3301      	adds	r3, #1
 8015944:	603b      	str	r3, [r7, #0]
        break;
 8015946:	e12e      	b.n	8015ba6 <_vsnprintf+0x936>
#if defined(PRINTF_SUPPORT_EXPONENTIAL)
      case 'e':
      case 'E':
      case 'g':
      case 'G':
        if ((*format == 'g')||(*format == 'G')) flags |= FLAGS_ADAPT_EXP;
 8015948:	683b      	ldr	r3, [r7, #0]
 801594a:	781b      	ldrb	r3, [r3, #0]
 801594c:	2b67      	cmp	r3, #103	; 0x67
 801594e:	d003      	beq.n	8015958 <_vsnprintf+0x6e8>
 8015950:	683b      	ldr	r3, [r7, #0]
 8015952:	781b      	ldrb	r3, [r3, #0]
 8015954:	2b47      	cmp	r3, #71	; 0x47
 8015956:	d103      	bne.n	8015960 <_vsnprintf+0x6f0>
 8015958:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801595a:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 801595e:	657b      	str	r3, [r7, #84]	; 0x54
        if ((*format == 'E')||(*format == 'G')) flags |= FLAGS_UPPERCASE;
 8015960:	683b      	ldr	r3, [r7, #0]
 8015962:	781b      	ldrb	r3, [r3, #0]
 8015964:	2b45      	cmp	r3, #69	; 0x45
 8015966:	d003      	beq.n	8015970 <_vsnprintf+0x700>
 8015968:	683b      	ldr	r3, [r7, #0]
 801596a:	781b      	ldrb	r3, [r3, #0]
 801596c:	2b47      	cmp	r3, #71	; 0x47
 801596e:	d103      	bne.n	8015978 <_vsnprintf+0x708>
 8015970:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8015972:	f043 0320 	orr.w	r3, r3, #32
 8015976:	657b      	str	r3, [r7, #84]	; 0x54
        idx = _etoa(out, buffer, idx, maxlen, va_arg(va, double), precision, width, flags);
 8015978:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 801597a:	3307      	adds	r3, #7
 801597c:	f023 0307 	bic.w	r3, r3, #7
 8015980:	f103 0208 	add.w	r2, r3, #8
 8015984:	66ba      	str	r2, [r7, #104]	; 0x68
 8015986:	ed93 7b00 	vldr	d7, [r3]
 801598a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801598c:	9302      	str	r3, [sp, #8]
 801598e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8015990:	9301      	str	r3, [sp, #4]
 8015992:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8015994:	9300      	str	r3, [sp, #0]
 8015996:	eeb0 0b47 	vmov.f64	d0, d7
 801599a:	687b      	ldr	r3, [r7, #4]
 801599c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 801599e:	68b9      	ldr	r1, [r7, #8]
 80159a0:	68f8      	ldr	r0, [r7, #12]
 80159a2:	f7ff fa5d 	bl	8014e60 <_etoa>
 80159a6:	6478      	str	r0, [r7, #68]	; 0x44
        format++;
 80159a8:	683b      	ldr	r3, [r7, #0]
 80159aa:	3301      	adds	r3, #1
 80159ac:	603b      	str	r3, [r7, #0]
        break;
 80159ae:	e0fa      	b.n	8015ba6 <_vsnprintf+0x936>
#endif  // PRINTF_SUPPORT_EXPONENTIAL
#endif  // PRINTF_SUPPORT_FLOAT
      case 'c' : {
        unsigned int l = 1U;
 80159b0:	2301      	movs	r3, #1
 80159b2:	63fb      	str	r3, [r7, #60]	; 0x3c
        // pre padding
        if (!(flags & FLAGS_LEFT)) {
 80159b4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80159b6:	f003 0302 	and.w	r3, r3, #2
 80159ba:	2b00      	cmp	r3, #0
 80159bc:	d10e      	bne.n	80159dc <_vsnprintf+0x76c>
          while (l++ < width) {
 80159be:	e007      	b.n	80159d0 <_vsnprintf+0x760>
            out(' ', buffer, idx++, maxlen);
 80159c0:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80159c2:	1c53      	adds	r3, r2, #1
 80159c4:	647b      	str	r3, [r7, #68]	; 0x44
 80159c6:	68fc      	ldr	r4, [r7, #12]
 80159c8:	687b      	ldr	r3, [r7, #4]
 80159ca:	68b9      	ldr	r1, [r7, #8]
 80159cc:	2020      	movs	r0, #32
 80159ce:	47a0      	blx	r4
          while (l++ < width) {
 80159d0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80159d2:	1c5a      	adds	r2, r3, #1
 80159d4:	63fa      	str	r2, [r7, #60]	; 0x3c
 80159d6:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80159d8:	429a      	cmp	r2, r3
 80159da:	d8f1      	bhi.n	80159c0 <_vsnprintf+0x750>
          }
        }
        // char output
        out((char)va_arg(va, int), buffer, idx++, maxlen);
 80159dc:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80159de:	1d1a      	adds	r2, r3, #4
 80159e0:	66ba      	str	r2, [r7, #104]	; 0x68
 80159e2:	681b      	ldr	r3, [r3, #0]
 80159e4:	b2d8      	uxtb	r0, r3
 80159e6:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80159e8:	1c53      	adds	r3, r2, #1
 80159ea:	647b      	str	r3, [r7, #68]	; 0x44
 80159ec:	68fc      	ldr	r4, [r7, #12]
 80159ee:	687b      	ldr	r3, [r7, #4]
 80159f0:	68b9      	ldr	r1, [r7, #8]
 80159f2:	47a0      	blx	r4
        // post padding
        if (flags & FLAGS_LEFT) {
 80159f4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80159f6:	f003 0302 	and.w	r3, r3, #2
 80159fa:	2b00      	cmp	r3, #0
 80159fc:	d00e      	beq.n	8015a1c <_vsnprintf+0x7ac>
          while (l++ < width) {
 80159fe:	e007      	b.n	8015a10 <_vsnprintf+0x7a0>
            out(' ', buffer, idx++, maxlen);
 8015a00:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8015a02:	1c53      	adds	r3, r2, #1
 8015a04:	647b      	str	r3, [r7, #68]	; 0x44
 8015a06:	68fc      	ldr	r4, [r7, #12]
 8015a08:	687b      	ldr	r3, [r7, #4]
 8015a0a:	68b9      	ldr	r1, [r7, #8]
 8015a0c:	2020      	movs	r0, #32
 8015a0e:	47a0      	blx	r4
          while (l++ < width) {
 8015a10:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8015a12:	1c5a      	adds	r2, r3, #1
 8015a14:	63fa      	str	r2, [r7, #60]	; 0x3c
 8015a16:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8015a18:	429a      	cmp	r2, r3
 8015a1a:	d8f1      	bhi.n	8015a00 <_vsnprintf+0x790>
          }
        }
        format++;
 8015a1c:	683b      	ldr	r3, [r7, #0]
 8015a1e:	3301      	adds	r3, #1
 8015a20:	603b      	str	r3, [r7, #0]
        break;
 8015a22:	e0c0      	b.n	8015ba6 <_vsnprintf+0x936>
      }

      case 's' : {
        const char* p = va_arg(va, char*);
 8015a24:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8015a26:	1d1a      	adds	r2, r3, #4
 8015a28:	66ba      	str	r2, [r7, #104]	; 0x68
 8015a2a:	681b      	ldr	r3, [r3, #0]
 8015a2c:	63bb      	str	r3, [r7, #56]	; 0x38
        unsigned int l = _strnlen_s(p, precision ? precision : (size_t)-1);
 8015a2e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8015a30:	2b00      	cmp	r3, #0
 8015a32:	d001      	beq.n	8015a38 <_vsnprintf+0x7c8>
 8015a34:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8015a36:	e001      	b.n	8015a3c <_vsnprintf+0x7cc>
 8015a38:	f04f 33ff 	mov.w	r3, #4294967295
 8015a3c:	4619      	mov	r1, r3
 8015a3e:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8015a40:	f7fe fd64 	bl	801450c <_strnlen_s>
 8015a44:	6378      	str	r0, [r7, #52]	; 0x34
        // pre padding
        if (flags & FLAGS_PRECISION) {
 8015a46:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8015a48:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8015a4c:	2b00      	cmp	r3, #0
 8015a4e:	d005      	beq.n	8015a5c <_vsnprintf+0x7ec>
          l = (l < precision ? l : precision);
 8015a50:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8015a52:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8015a54:	4293      	cmp	r3, r2
 8015a56:	bf28      	it	cs
 8015a58:	4613      	movcs	r3, r2
 8015a5a:	637b      	str	r3, [r7, #52]	; 0x34
        }
        if (!(flags & FLAGS_LEFT)) {
 8015a5c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8015a5e:	f003 0302 	and.w	r3, r3, #2
 8015a62:	2b00      	cmp	r3, #0
 8015a64:	d11a      	bne.n	8015a9c <_vsnprintf+0x82c>
          while (l++ < width) {
 8015a66:	e007      	b.n	8015a78 <_vsnprintf+0x808>
            out(' ', buffer, idx++, maxlen);
 8015a68:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8015a6a:	1c53      	adds	r3, r2, #1
 8015a6c:	647b      	str	r3, [r7, #68]	; 0x44
 8015a6e:	68fc      	ldr	r4, [r7, #12]
 8015a70:	687b      	ldr	r3, [r7, #4]
 8015a72:	68b9      	ldr	r1, [r7, #8]
 8015a74:	2020      	movs	r0, #32
 8015a76:	47a0      	blx	r4
          while (l++ < width) {
 8015a78:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8015a7a:	1c5a      	adds	r2, r3, #1
 8015a7c:	637a      	str	r2, [r7, #52]	; 0x34
 8015a7e:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8015a80:	429a      	cmp	r2, r3
 8015a82:	d8f1      	bhi.n	8015a68 <_vsnprintf+0x7f8>
          }
        }
        // string output
        while ((*p != 0) && (!(flags & FLAGS_PRECISION) || precision--)) {
 8015a84:	e00a      	b.n	8015a9c <_vsnprintf+0x82c>
          out(*(p++), buffer, idx++, maxlen);
 8015a86:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8015a88:	1c5a      	adds	r2, r3, #1
 8015a8a:	63ba      	str	r2, [r7, #56]	; 0x38
 8015a8c:	7818      	ldrb	r0, [r3, #0]
 8015a8e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8015a90:	1c53      	adds	r3, r2, #1
 8015a92:	647b      	str	r3, [r7, #68]	; 0x44
 8015a94:	68fc      	ldr	r4, [r7, #12]
 8015a96:	687b      	ldr	r3, [r7, #4]
 8015a98:	68b9      	ldr	r1, [r7, #8]
 8015a9a:	47a0      	blx	r4
        while ((*p != 0) && (!(flags & FLAGS_PRECISION) || precision--)) {
 8015a9c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8015a9e:	781b      	ldrb	r3, [r3, #0]
 8015aa0:	2b00      	cmp	r3, #0
 8015aa2:	d009      	beq.n	8015ab8 <_vsnprintf+0x848>
 8015aa4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8015aa6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8015aaa:	2b00      	cmp	r3, #0
 8015aac:	d0eb      	beq.n	8015a86 <_vsnprintf+0x816>
 8015aae:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8015ab0:	1e5a      	subs	r2, r3, #1
 8015ab2:	64fa      	str	r2, [r7, #76]	; 0x4c
 8015ab4:	2b00      	cmp	r3, #0
 8015ab6:	d1e6      	bne.n	8015a86 <_vsnprintf+0x816>
        }
        // post padding
        if (flags & FLAGS_LEFT) {
 8015ab8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8015aba:	f003 0302 	and.w	r3, r3, #2
 8015abe:	2b00      	cmp	r3, #0
 8015ac0:	d00e      	beq.n	8015ae0 <_vsnprintf+0x870>
          while (l++ < width) {
 8015ac2:	e007      	b.n	8015ad4 <_vsnprintf+0x864>
            out(' ', buffer, idx++, maxlen);
 8015ac4:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8015ac6:	1c53      	adds	r3, r2, #1
 8015ac8:	647b      	str	r3, [r7, #68]	; 0x44
 8015aca:	68fc      	ldr	r4, [r7, #12]
 8015acc:	687b      	ldr	r3, [r7, #4]
 8015ace:	68b9      	ldr	r1, [r7, #8]
 8015ad0:	2020      	movs	r0, #32
 8015ad2:	47a0      	blx	r4
          while (l++ < width) {
 8015ad4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8015ad6:	1c5a      	adds	r2, r3, #1
 8015ad8:	637a      	str	r2, [r7, #52]	; 0x34
 8015ada:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8015adc:	429a      	cmp	r2, r3
 8015ade:	d8f1      	bhi.n	8015ac4 <_vsnprintf+0x854>
          }
        }
        format++;
 8015ae0:	683b      	ldr	r3, [r7, #0]
 8015ae2:	3301      	adds	r3, #1
 8015ae4:	603b      	str	r3, [r7, #0]
        break;
 8015ae6:	e05e      	b.n	8015ba6 <_vsnprintf+0x936>
      }

      case 'p' : {
        width = sizeof(void*) * 2U;
 8015ae8:	2308      	movs	r3, #8
 8015aea:	653b      	str	r3, [r7, #80]	; 0x50
        flags |= FLAGS_ZEROPAD | FLAGS_UPPERCASE;
 8015aec:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8015aee:	f043 0321 	orr.w	r3, r3, #33	; 0x21
 8015af2:	657b      	str	r3, [r7, #84]	; 0x54
#if defined(PRINTF_SUPPORT_LONG_LONG)
        const bool is_ll = sizeof(uintptr_t) == sizeof(long long);
 8015af4:	2300      	movs	r3, #0
 8015af6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        if (is_ll) {
 8015afa:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8015afe:	2b00      	cmp	r3, #0
 8015b00:	d01d      	beq.n	8015b3e <_vsnprintf+0x8ce>
          idx = _ntoa_long_long(out, buffer, idx, maxlen, (uintptr_t)va_arg(va, void*), false, 16U, precision, width, flags);
 8015b02:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8015b04:	1d1a      	adds	r2, r3, #4
 8015b06:	66ba      	str	r2, [r7, #104]	; 0x68
 8015b08:	681b      	ldr	r3, [r3, #0]
 8015b0a:	f04f 0400 	mov.w	r4, #0
 8015b0e:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8015b10:	9208      	str	r2, [sp, #32]
 8015b12:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8015b14:	9207      	str	r2, [sp, #28]
 8015b16:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8015b18:	9206      	str	r2, [sp, #24]
 8015b1a:	f04f 0110 	mov.w	r1, #16
 8015b1e:	f04f 0200 	mov.w	r2, #0
 8015b22:	e9cd 1204 	strd	r1, r2, [sp, #16]
 8015b26:	2200      	movs	r2, #0
 8015b28:	9202      	str	r2, [sp, #8]
 8015b2a:	e9cd 3400 	strd	r3, r4, [sp]
 8015b2e:	687b      	ldr	r3, [r7, #4]
 8015b30:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8015b32:	68b9      	ldr	r1, [r7, #8]
 8015b34:	68f8      	ldr	r0, [r7, #12]
 8015b36:	f7fe fed4 	bl	80148e2 <_ntoa_long_long>
 8015b3a:	6478      	str	r0, [r7, #68]	; 0x44
 8015b3c:	e016      	b.n	8015b6c <_vsnprintf+0x8fc>
        }
        else {
#endif
          idx = _ntoa_long(out, buffer, idx, maxlen, (unsigned long)((uintptr_t)va_arg(va, void*)), false, 16U, precision, width, flags);
 8015b3e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8015b40:	1d1a      	adds	r2, r3, #4
 8015b42:	66ba      	str	r2, [r7, #104]	; 0x68
 8015b44:	681b      	ldr	r3, [r3, #0]
 8015b46:	461a      	mov	r2, r3
 8015b48:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8015b4a:	9305      	str	r3, [sp, #20]
 8015b4c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8015b4e:	9304      	str	r3, [sp, #16]
 8015b50:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8015b52:	9303      	str	r3, [sp, #12]
 8015b54:	2310      	movs	r3, #16
 8015b56:	9302      	str	r3, [sp, #8]
 8015b58:	2300      	movs	r3, #0
 8015b5a:	9301      	str	r3, [sp, #4]
 8015b5c:	9200      	str	r2, [sp, #0]
 8015b5e:	687b      	ldr	r3, [r7, #4]
 8015b60:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8015b62:	68b9      	ldr	r1, [r7, #8]
 8015b64:	68f8      	ldr	r0, [r7, #12]
 8015b66:	f7fe fe55 	bl	8014814 <_ntoa_long>
 8015b6a:	6478      	str	r0, [r7, #68]	; 0x44
#if defined(PRINTF_SUPPORT_LONG_LONG)
        }
#endif
        format++;
 8015b6c:	683b      	ldr	r3, [r7, #0]
 8015b6e:	3301      	adds	r3, #1
 8015b70:	603b      	str	r3, [r7, #0]
        break;
 8015b72:	e018      	b.n	8015ba6 <_vsnprintf+0x936>
      }

      case '%' :
        out('%', buffer, idx++, maxlen);
 8015b74:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8015b76:	1c53      	adds	r3, r2, #1
 8015b78:	647b      	str	r3, [r7, #68]	; 0x44
 8015b7a:	68fc      	ldr	r4, [r7, #12]
 8015b7c:	687b      	ldr	r3, [r7, #4]
 8015b7e:	68b9      	ldr	r1, [r7, #8]
 8015b80:	2025      	movs	r0, #37	; 0x25
 8015b82:	47a0      	blx	r4
        format++;
 8015b84:	683b      	ldr	r3, [r7, #0]
 8015b86:	3301      	adds	r3, #1
 8015b88:	603b      	str	r3, [r7, #0]
        break;
 8015b8a:	e00c      	b.n	8015ba6 <_vsnprintf+0x936>

      default :
        out(*format, buffer, idx++, maxlen);
 8015b8c:	683b      	ldr	r3, [r7, #0]
 8015b8e:	7818      	ldrb	r0, [r3, #0]
 8015b90:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8015b92:	1c53      	adds	r3, r2, #1
 8015b94:	647b      	str	r3, [r7, #68]	; 0x44
 8015b96:	68fc      	ldr	r4, [r7, #12]
 8015b98:	687b      	ldr	r3, [r7, #4]
 8015b9a:	68b9      	ldr	r1, [r7, #8]
 8015b9c:	47a0      	blx	r4
        format++;
 8015b9e:	683b      	ldr	r3, [r7, #0]
 8015ba0:	3301      	adds	r3, #1
 8015ba2:	603b      	str	r3, [r7, #0]
        break;
 8015ba4:	bf00      	nop
  while (*format)
 8015ba6:	683b      	ldr	r3, [r7, #0]
 8015ba8:	781b      	ldrb	r3, [r3, #0]
 8015baa:	2b00      	cmp	r3, #0
 8015bac:	f47f ab71 	bne.w	8015292 <_vsnprintf+0x22>
    }
  }

  // termination
  out((char)0, buffer, idx < maxlen ? idx : maxlen - 1U, maxlen);
 8015bb0:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8015bb2:	687b      	ldr	r3, [r7, #4]
 8015bb4:	429a      	cmp	r2, r3
 8015bb6:	d302      	bcc.n	8015bbe <_vsnprintf+0x94e>
 8015bb8:	687b      	ldr	r3, [r7, #4]
 8015bba:	1e5a      	subs	r2, r3, #1
 8015bbc:	e000      	b.n	8015bc0 <_vsnprintf+0x950>
 8015bbe:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8015bc0:	68fc      	ldr	r4, [r7, #12]
 8015bc2:	687b      	ldr	r3, [r7, #4]
 8015bc4:	68b9      	ldr	r1, [r7, #8]
 8015bc6:	2000      	movs	r0, #0
 8015bc8:	47a0      	blx	r4

  // return written chars without terminating \0
  return (int)idx;
 8015bca:	6c7b      	ldr	r3, [r7, #68]	; 0x44
}
 8015bcc:	4618      	mov	r0, r3
 8015bce:	3758      	adds	r7, #88	; 0x58
 8015bd0:	46bd      	mov	sp, r7
 8015bd2:	bdb0      	pop	{r4, r5, r7, pc}

08015bd4 <printf_>:
#define IS_IRQ_MODE()             (__get_IPSR() != 0U)
#define IS_IRQ_MASKED()           (__get_PRIMASK() != 0U)
#define IS_IRQ()                  (IS_IRQ_MODE() || IS_IRQ_MASKED())

int printf_(const char* format, ...)
{
 8015bd4:	b40f      	push	{r0, r1, r2, r3}
 8015bd6:	b580      	push	{r7, lr}
 8015bd8:	b088      	sub	sp, #32
 8015bda:	af02      	add	r7, sp, #8
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8015bdc:	f3ef 8305 	mrs	r3, IPSR
 8015be0:	60fb      	str	r3, [r7, #12]
  return(result);
 8015be2:	68fb      	ldr	r3, [r7, #12]
  int stat;
  stat = IS_IRQ();
 8015be4:	2b00      	cmp	r3, #0
 8015be6:	d105      	bne.n	8015bf4 <printf_+0x20>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8015be8:	f3ef 8310 	mrs	r3, PRIMASK
 8015bec:	60bb      	str	r3, [r7, #8]
  return(result);
 8015bee:	68bb      	ldr	r3, [r7, #8]
 8015bf0:	2b00      	cmp	r3, #0
 8015bf2:	d001      	beq.n	8015bf8 <printf_+0x24>
 8015bf4:	2301      	movs	r3, #1
 8015bf6:	e000      	b.n	8015bfa <printf_+0x26>
 8015bf8:	2300      	movs	r3, #0
 8015bfa:	617b      	str	r3, [r7, #20]
  if (!stat){
 8015bfc:	697b      	ldr	r3, [r7, #20]
 8015bfe:	2b00      	cmp	r3, #0
 8015c00:	d101      	bne.n	8015c06 <printf_+0x32>
	  vTaskSuspendAll();
 8015c02:	f7ef fc63 	bl	80054cc <vTaskSuspendAll>
	  //__disable_irq();
  }

  va_list va;
  va_start(va, format);
 8015c06:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8015c0a:	607b      	str	r3, [r7, #4]
  char buffer[1];
  const int ret = _vsnprintf(_out_char, buffer, (size_t)-1, format, va);
 8015c0c:	4639      	mov	r1, r7
 8015c0e:	687b      	ldr	r3, [r7, #4]
 8015c10:	9300      	str	r3, [sp, #0]
 8015c12:	6a3b      	ldr	r3, [r7, #32]
 8015c14:	f04f 32ff 	mov.w	r2, #4294967295
 8015c18:	4808      	ldr	r0, [pc, #32]	; (8015c3c <printf_+0x68>)
 8015c1a:	f7ff fb29 	bl	8015270 <_vsnprintf>
 8015c1e:	6138      	str	r0, [r7, #16]
  va_end(va);

  if (!stat){
 8015c20:	697b      	ldr	r3, [r7, #20]
 8015c22:	2b00      	cmp	r3, #0
 8015c24:	d101      	bne.n	8015c2a <printf_+0x56>
	  xTaskResumeAll();
 8015c26:	f7ef fc5f 	bl	80054e8 <xTaskResumeAll>
	  //__enable_irq();
  }

  return ret;
 8015c2a:	693b      	ldr	r3, [r7, #16]

}
 8015c2c:	4618      	mov	r0, r3
 8015c2e:	3718      	adds	r7, #24
 8015c30:	46bd      	mov	sp, r7
 8015c32:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8015c36:	b004      	add	sp, #16
 8015c38:	4770      	bx	lr
 8015c3a:	bf00      	nop
 8015c3c:	080144ed 	.word	0x080144ed

08015c40 <__libc_init_array>:
 8015c40:	b570      	push	{r4, r5, r6, lr}
 8015c42:	4e0d      	ldr	r6, [pc, #52]	; (8015c78 <__libc_init_array+0x38>)
 8015c44:	4c0d      	ldr	r4, [pc, #52]	; (8015c7c <__libc_init_array+0x3c>)
 8015c46:	1ba4      	subs	r4, r4, r6
 8015c48:	10a4      	asrs	r4, r4, #2
 8015c4a:	2500      	movs	r5, #0
 8015c4c:	42a5      	cmp	r5, r4
 8015c4e:	d109      	bne.n	8015c64 <__libc_init_array+0x24>
 8015c50:	4e0b      	ldr	r6, [pc, #44]	; (8015c80 <__libc_init_array+0x40>)
 8015c52:	4c0c      	ldr	r4, [pc, #48]	; (8015c84 <__libc_init_array+0x44>)
 8015c54:	f003 fca2 	bl	801959c <_init>
 8015c58:	1ba4      	subs	r4, r4, r6
 8015c5a:	10a4      	asrs	r4, r4, #2
 8015c5c:	2500      	movs	r5, #0
 8015c5e:	42a5      	cmp	r5, r4
 8015c60:	d105      	bne.n	8015c6e <__libc_init_array+0x2e>
 8015c62:	bd70      	pop	{r4, r5, r6, pc}
 8015c64:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8015c68:	4798      	blx	r3
 8015c6a:	3501      	adds	r5, #1
 8015c6c:	e7ee      	b.n	8015c4c <__libc_init_array+0xc>
 8015c6e:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8015c72:	4798      	blx	r3
 8015c74:	3501      	adds	r5, #1
 8015c76:	e7f2      	b.n	8015c5e <__libc_init_array+0x1e>
 8015c78:	0801c4a8 	.word	0x0801c4a8
 8015c7c:	0801c4a8 	.word	0x0801c4a8
 8015c80:	0801c4a8 	.word	0x0801c4a8
 8015c84:	0801c4ac 	.word	0x0801c4ac

08015c88 <malloc>:
 8015c88:	4b02      	ldr	r3, [pc, #8]	; (8015c94 <malloc+0xc>)
 8015c8a:	4601      	mov	r1, r0
 8015c8c:	6818      	ldr	r0, [r3, #0]
 8015c8e:	f000 b873 	b.w	8015d78 <_malloc_r>
 8015c92:	bf00      	nop
 8015c94:	24000034 	.word	0x24000034

08015c98 <memcmp>:
 8015c98:	b530      	push	{r4, r5, lr}
 8015c9a:	2400      	movs	r4, #0
 8015c9c:	42a2      	cmp	r2, r4
 8015c9e:	d101      	bne.n	8015ca4 <memcmp+0xc>
 8015ca0:	2000      	movs	r0, #0
 8015ca2:	e007      	b.n	8015cb4 <memcmp+0x1c>
 8015ca4:	5d03      	ldrb	r3, [r0, r4]
 8015ca6:	3401      	adds	r4, #1
 8015ca8:	190d      	adds	r5, r1, r4
 8015caa:	f815 5c01 	ldrb.w	r5, [r5, #-1]
 8015cae:	42ab      	cmp	r3, r5
 8015cb0:	d0f4      	beq.n	8015c9c <memcmp+0x4>
 8015cb2:	1b58      	subs	r0, r3, r5
 8015cb4:	bd30      	pop	{r4, r5, pc}

08015cb6 <memcpy>:
 8015cb6:	b510      	push	{r4, lr}
 8015cb8:	1e43      	subs	r3, r0, #1
 8015cba:	440a      	add	r2, r1
 8015cbc:	4291      	cmp	r1, r2
 8015cbe:	d100      	bne.n	8015cc2 <memcpy+0xc>
 8015cc0:	bd10      	pop	{r4, pc}
 8015cc2:	f811 4b01 	ldrb.w	r4, [r1], #1
 8015cc6:	f803 4f01 	strb.w	r4, [r3, #1]!
 8015cca:	e7f7      	b.n	8015cbc <memcpy+0x6>

08015ccc <memset>:
 8015ccc:	4402      	add	r2, r0
 8015cce:	4603      	mov	r3, r0
 8015cd0:	4293      	cmp	r3, r2
 8015cd2:	d100      	bne.n	8015cd6 <memset+0xa>
 8015cd4:	4770      	bx	lr
 8015cd6:	f803 1b01 	strb.w	r1, [r3], #1
 8015cda:	e7f9      	b.n	8015cd0 <memset+0x4>

08015cdc <_free_r>:
 8015cdc:	b538      	push	{r3, r4, r5, lr}
 8015cde:	4605      	mov	r5, r0
 8015ce0:	2900      	cmp	r1, #0
 8015ce2:	d045      	beq.n	8015d70 <_free_r+0x94>
 8015ce4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8015ce8:	1f0c      	subs	r4, r1, #4
 8015cea:	2b00      	cmp	r3, #0
 8015cec:	bfb8      	it	lt
 8015cee:	18e4      	addlt	r4, r4, r3
 8015cf0:	f002 fe9e 	bl	8018a30 <__malloc_lock>
 8015cf4:	4a1f      	ldr	r2, [pc, #124]	; (8015d74 <_free_r+0x98>)
 8015cf6:	6813      	ldr	r3, [r2, #0]
 8015cf8:	4610      	mov	r0, r2
 8015cfa:	b933      	cbnz	r3, 8015d0a <_free_r+0x2e>
 8015cfc:	6063      	str	r3, [r4, #4]
 8015cfe:	6014      	str	r4, [r2, #0]
 8015d00:	4628      	mov	r0, r5
 8015d02:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8015d06:	f002 be94 	b.w	8018a32 <__malloc_unlock>
 8015d0a:	42a3      	cmp	r3, r4
 8015d0c:	d90c      	bls.n	8015d28 <_free_r+0x4c>
 8015d0e:	6821      	ldr	r1, [r4, #0]
 8015d10:	1862      	adds	r2, r4, r1
 8015d12:	4293      	cmp	r3, r2
 8015d14:	bf04      	itt	eq
 8015d16:	681a      	ldreq	r2, [r3, #0]
 8015d18:	685b      	ldreq	r3, [r3, #4]
 8015d1a:	6063      	str	r3, [r4, #4]
 8015d1c:	bf04      	itt	eq
 8015d1e:	1852      	addeq	r2, r2, r1
 8015d20:	6022      	streq	r2, [r4, #0]
 8015d22:	6004      	str	r4, [r0, #0]
 8015d24:	e7ec      	b.n	8015d00 <_free_r+0x24>
 8015d26:	4613      	mov	r3, r2
 8015d28:	685a      	ldr	r2, [r3, #4]
 8015d2a:	b10a      	cbz	r2, 8015d30 <_free_r+0x54>
 8015d2c:	42a2      	cmp	r2, r4
 8015d2e:	d9fa      	bls.n	8015d26 <_free_r+0x4a>
 8015d30:	6819      	ldr	r1, [r3, #0]
 8015d32:	1858      	adds	r0, r3, r1
 8015d34:	42a0      	cmp	r0, r4
 8015d36:	d10b      	bne.n	8015d50 <_free_r+0x74>
 8015d38:	6820      	ldr	r0, [r4, #0]
 8015d3a:	4401      	add	r1, r0
 8015d3c:	1858      	adds	r0, r3, r1
 8015d3e:	4282      	cmp	r2, r0
 8015d40:	6019      	str	r1, [r3, #0]
 8015d42:	d1dd      	bne.n	8015d00 <_free_r+0x24>
 8015d44:	6810      	ldr	r0, [r2, #0]
 8015d46:	6852      	ldr	r2, [r2, #4]
 8015d48:	605a      	str	r2, [r3, #4]
 8015d4a:	4401      	add	r1, r0
 8015d4c:	6019      	str	r1, [r3, #0]
 8015d4e:	e7d7      	b.n	8015d00 <_free_r+0x24>
 8015d50:	d902      	bls.n	8015d58 <_free_r+0x7c>
 8015d52:	230c      	movs	r3, #12
 8015d54:	602b      	str	r3, [r5, #0]
 8015d56:	e7d3      	b.n	8015d00 <_free_r+0x24>
 8015d58:	6820      	ldr	r0, [r4, #0]
 8015d5a:	1821      	adds	r1, r4, r0
 8015d5c:	428a      	cmp	r2, r1
 8015d5e:	bf04      	itt	eq
 8015d60:	6811      	ldreq	r1, [r2, #0]
 8015d62:	6852      	ldreq	r2, [r2, #4]
 8015d64:	6062      	str	r2, [r4, #4]
 8015d66:	bf04      	itt	eq
 8015d68:	1809      	addeq	r1, r1, r0
 8015d6a:	6021      	streq	r1, [r4, #0]
 8015d6c:	605c      	str	r4, [r3, #4]
 8015d6e:	e7c7      	b.n	8015d00 <_free_r+0x24>
 8015d70:	bd38      	pop	{r3, r4, r5, pc}
 8015d72:	bf00      	nop
 8015d74:	24008758 	.word	0x24008758

08015d78 <_malloc_r>:
 8015d78:	b570      	push	{r4, r5, r6, lr}
 8015d7a:	1ccd      	adds	r5, r1, #3
 8015d7c:	f025 0503 	bic.w	r5, r5, #3
 8015d80:	3508      	adds	r5, #8
 8015d82:	2d0c      	cmp	r5, #12
 8015d84:	bf38      	it	cc
 8015d86:	250c      	movcc	r5, #12
 8015d88:	2d00      	cmp	r5, #0
 8015d8a:	4606      	mov	r6, r0
 8015d8c:	db01      	blt.n	8015d92 <_malloc_r+0x1a>
 8015d8e:	42a9      	cmp	r1, r5
 8015d90:	d903      	bls.n	8015d9a <_malloc_r+0x22>
 8015d92:	230c      	movs	r3, #12
 8015d94:	6033      	str	r3, [r6, #0]
 8015d96:	2000      	movs	r0, #0
 8015d98:	bd70      	pop	{r4, r5, r6, pc}
 8015d9a:	f002 fe49 	bl	8018a30 <__malloc_lock>
 8015d9e:	4a21      	ldr	r2, [pc, #132]	; (8015e24 <_malloc_r+0xac>)
 8015da0:	6814      	ldr	r4, [r2, #0]
 8015da2:	4621      	mov	r1, r4
 8015da4:	b991      	cbnz	r1, 8015dcc <_malloc_r+0x54>
 8015da6:	4c20      	ldr	r4, [pc, #128]	; (8015e28 <_malloc_r+0xb0>)
 8015da8:	6823      	ldr	r3, [r4, #0]
 8015daa:	b91b      	cbnz	r3, 8015db4 <_malloc_r+0x3c>
 8015dac:	4630      	mov	r0, r6
 8015dae:	f000 fe4f 	bl	8016a50 <_sbrk_r>
 8015db2:	6020      	str	r0, [r4, #0]
 8015db4:	4629      	mov	r1, r5
 8015db6:	4630      	mov	r0, r6
 8015db8:	f000 fe4a 	bl	8016a50 <_sbrk_r>
 8015dbc:	1c43      	adds	r3, r0, #1
 8015dbe:	d124      	bne.n	8015e0a <_malloc_r+0x92>
 8015dc0:	230c      	movs	r3, #12
 8015dc2:	6033      	str	r3, [r6, #0]
 8015dc4:	4630      	mov	r0, r6
 8015dc6:	f002 fe34 	bl	8018a32 <__malloc_unlock>
 8015dca:	e7e4      	b.n	8015d96 <_malloc_r+0x1e>
 8015dcc:	680b      	ldr	r3, [r1, #0]
 8015dce:	1b5b      	subs	r3, r3, r5
 8015dd0:	d418      	bmi.n	8015e04 <_malloc_r+0x8c>
 8015dd2:	2b0b      	cmp	r3, #11
 8015dd4:	d90f      	bls.n	8015df6 <_malloc_r+0x7e>
 8015dd6:	600b      	str	r3, [r1, #0]
 8015dd8:	50cd      	str	r5, [r1, r3]
 8015dda:	18cc      	adds	r4, r1, r3
 8015ddc:	4630      	mov	r0, r6
 8015dde:	f002 fe28 	bl	8018a32 <__malloc_unlock>
 8015de2:	f104 000b 	add.w	r0, r4, #11
 8015de6:	1d23      	adds	r3, r4, #4
 8015de8:	f020 0007 	bic.w	r0, r0, #7
 8015dec:	1ac3      	subs	r3, r0, r3
 8015dee:	d0d3      	beq.n	8015d98 <_malloc_r+0x20>
 8015df0:	425a      	negs	r2, r3
 8015df2:	50e2      	str	r2, [r4, r3]
 8015df4:	e7d0      	b.n	8015d98 <_malloc_r+0x20>
 8015df6:	428c      	cmp	r4, r1
 8015df8:	684b      	ldr	r3, [r1, #4]
 8015dfa:	bf16      	itet	ne
 8015dfc:	6063      	strne	r3, [r4, #4]
 8015dfe:	6013      	streq	r3, [r2, #0]
 8015e00:	460c      	movne	r4, r1
 8015e02:	e7eb      	b.n	8015ddc <_malloc_r+0x64>
 8015e04:	460c      	mov	r4, r1
 8015e06:	6849      	ldr	r1, [r1, #4]
 8015e08:	e7cc      	b.n	8015da4 <_malloc_r+0x2c>
 8015e0a:	1cc4      	adds	r4, r0, #3
 8015e0c:	f024 0403 	bic.w	r4, r4, #3
 8015e10:	42a0      	cmp	r0, r4
 8015e12:	d005      	beq.n	8015e20 <_malloc_r+0xa8>
 8015e14:	1a21      	subs	r1, r4, r0
 8015e16:	4630      	mov	r0, r6
 8015e18:	f000 fe1a 	bl	8016a50 <_sbrk_r>
 8015e1c:	3001      	adds	r0, #1
 8015e1e:	d0cf      	beq.n	8015dc0 <_malloc_r+0x48>
 8015e20:	6025      	str	r5, [r4, #0]
 8015e22:	e7db      	b.n	8015ddc <_malloc_r+0x64>
 8015e24:	24008758 	.word	0x24008758
 8015e28:	2400875c 	.word	0x2400875c

08015e2c <__cvt>:
 8015e2c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8015e2e:	ed2d 8b02 	vpush	{d8}
 8015e32:	eeb0 8b40 	vmov.f64	d8, d0
 8015e36:	b085      	sub	sp, #20
 8015e38:	4617      	mov	r7, r2
 8015e3a:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 8015e3c:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 8015e3e:	ee18 2a90 	vmov	r2, s17
 8015e42:	f025 0520 	bic.w	r5, r5, #32
 8015e46:	2a00      	cmp	r2, #0
 8015e48:	bfb6      	itet	lt
 8015e4a:	222d      	movlt	r2, #45	; 0x2d
 8015e4c:	2200      	movge	r2, #0
 8015e4e:	eeb1 8b40 	vneglt.f64	d8, d0
 8015e52:	2d46      	cmp	r5, #70	; 0x46
 8015e54:	460c      	mov	r4, r1
 8015e56:	701a      	strb	r2, [r3, #0]
 8015e58:	d004      	beq.n	8015e64 <__cvt+0x38>
 8015e5a:	2d45      	cmp	r5, #69	; 0x45
 8015e5c:	d100      	bne.n	8015e60 <__cvt+0x34>
 8015e5e:	3401      	adds	r4, #1
 8015e60:	2102      	movs	r1, #2
 8015e62:	e000      	b.n	8015e66 <__cvt+0x3a>
 8015e64:	2103      	movs	r1, #3
 8015e66:	ab03      	add	r3, sp, #12
 8015e68:	9301      	str	r3, [sp, #4]
 8015e6a:	ab02      	add	r3, sp, #8
 8015e6c:	9300      	str	r3, [sp, #0]
 8015e6e:	4622      	mov	r2, r4
 8015e70:	4633      	mov	r3, r6
 8015e72:	eeb0 0b48 	vmov.f64	d0, d8
 8015e76:	f001 fd43 	bl	8017900 <_dtoa_r>
 8015e7a:	2d47      	cmp	r5, #71	; 0x47
 8015e7c:	d101      	bne.n	8015e82 <__cvt+0x56>
 8015e7e:	07fb      	lsls	r3, r7, #31
 8015e80:	d51e      	bpl.n	8015ec0 <__cvt+0x94>
 8015e82:	2d46      	cmp	r5, #70	; 0x46
 8015e84:	eb00 0304 	add.w	r3, r0, r4
 8015e88:	d10c      	bne.n	8015ea4 <__cvt+0x78>
 8015e8a:	7802      	ldrb	r2, [r0, #0]
 8015e8c:	2a30      	cmp	r2, #48	; 0x30
 8015e8e:	d107      	bne.n	8015ea0 <__cvt+0x74>
 8015e90:	eeb5 8b40 	vcmp.f64	d8, #0.0
 8015e94:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8015e98:	bf1c      	itt	ne
 8015e9a:	f1c4 0401 	rsbne	r4, r4, #1
 8015e9e:	6034      	strne	r4, [r6, #0]
 8015ea0:	6832      	ldr	r2, [r6, #0]
 8015ea2:	4413      	add	r3, r2
 8015ea4:	eeb5 8b40 	vcmp.f64	d8, #0.0
 8015ea8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8015eac:	d007      	beq.n	8015ebe <__cvt+0x92>
 8015eae:	2130      	movs	r1, #48	; 0x30
 8015eb0:	9a03      	ldr	r2, [sp, #12]
 8015eb2:	429a      	cmp	r2, r3
 8015eb4:	d204      	bcs.n	8015ec0 <__cvt+0x94>
 8015eb6:	1c54      	adds	r4, r2, #1
 8015eb8:	9403      	str	r4, [sp, #12]
 8015eba:	7011      	strb	r1, [r2, #0]
 8015ebc:	e7f8      	b.n	8015eb0 <__cvt+0x84>
 8015ebe:	9303      	str	r3, [sp, #12]
 8015ec0:	9b03      	ldr	r3, [sp, #12]
 8015ec2:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8015ec4:	1a1b      	subs	r3, r3, r0
 8015ec6:	6013      	str	r3, [r2, #0]
 8015ec8:	b005      	add	sp, #20
 8015eca:	ecbd 8b02 	vpop	{d8}
 8015ece:	bdf0      	pop	{r4, r5, r6, r7, pc}

08015ed0 <__exponent>:
 8015ed0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8015ed2:	2900      	cmp	r1, #0
 8015ed4:	4604      	mov	r4, r0
 8015ed6:	bfba      	itte	lt
 8015ed8:	4249      	neglt	r1, r1
 8015eda:	232d      	movlt	r3, #45	; 0x2d
 8015edc:	232b      	movge	r3, #43	; 0x2b
 8015ede:	2909      	cmp	r1, #9
 8015ee0:	f804 2b02 	strb.w	r2, [r4], #2
 8015ee4:	7043      	strb	r3, [r0, #1]
 8015ee6:	dd20      	ble.n	8015f2a <__exponent+0x5a>
 8015ee8:	f10d 0307 	add.w	r3, sp, #7
 8015eec:	461f      	mov	r7, r3
 8015eee:	260a      	movs	r6, #10
 8015ef0:	fb91 f5f6 	sdiv	r5, r1, r6
 8015ef4:	fb06 1115 	mls	r1, r6, r5, r1
 8015ef8:	3130      	adds	r1, #48	; 0x30
 8015efa:	2d09      	cmp	r5, #9
 8015efc:	f803 1c01 	strb.w	r1, [r3, #-1]
 8015f00:	f103 32ff 	add.w	r2, r3, #4294967295
 8015f04:	4629      	mov	r1, r5
 8015f06:	dc09      	bgt.n	8015f1c <__exponent+0x4c>
 8015f08:	3130      	adds	r1, #48	; 0x30
 8015f0a:	3b02      	subs	r3, #2
 8015f0c:	f802 1c01 	strb.w	r1, [r2, #-1]
 8015f10:	42bb      	cmp	r3, r7
 8015f12:	4622      	mov	r2, r4
 8015f14:	d304      	bcc.n	8015f20 <__exponent+0x50>
 8015f16:	1a10      	subs	r0, r2, r0
 8015f18:	b003      	add	sp, #12
 8015f1a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8015f1c:	4613      	mov	r3, r2
 8015f1e:	e7e7      	b.n	8015ef0 <__exponent+0x20>
 8015f20:	f813 2b01 	ldrb.w	r2, [r3], #1
 8015f24:	f804 2b01 	strb.w	r2, [r4], #1
 8015f28:	e7f2      	b.n	8015f10 <__exponent+0x40>
 8015f2a:	2330      	movs	r3, #48	; 0x30
 8015f2c:	4419      	add	r1, r3
 8015f2e:	7083      	strb	r3, [r0, #2]
 8015f30:	1d02      	adds	r2, r0, #4
 8015f32:	70c1      	strb	r1, [r0, #3]
 8015f34:	e7ef      	b.n	8015f16 <__exponent+0x46>
	...

08015f38 <_printf_float>:
 8015f38:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015f3c:	b08d      	sub	sp, #52	; 0x34
 8015f3e:	460c      	mov	r4, r1
 8015f40:	4616      	mov	r6, r2
 8015f42:	461f      	mov	r7, r3
 8015f44:	f8dd 8058 	ldr.w	r8, [sp, #88]	; 0x58
 8015f48:	4605      	mov	r5, r0
 8015f4a:	f002 fd51 	bl	80189f0 <_localeconv_r>
 8015f4e:	f8d0 b000 	ldr.w	fp, [r0]
 8015f52:	4658      	mov	r0, fp
 8015f54:	f7ea f9c4 	bl	80002e0 <strlen>
 8015f58:	2300      	movs	r3, #0
 8015f5a:	930a      	str	r3, [sp, #40]	; 0x28
 8015f5c:	f8d8 3000 	ldr.w	r3, [r8]
 8015f60:	9005      	str	r0, [sp, #20]
 8015f62:	3307      	adds	r3, #7
 8015f64:	f023 0307 	bic.w	r3, r3, #7
 8015f68:	f103 0108 	add.w	r1, r3, #8
 8015f6c:	f894 9018 	ldrb.w	r9, [r4, #24]
 8015f70:	6822      	ldr	r2, [r4, #0]
 8015f72:	f8c8 1000 	str.w	r1, [r8]
 8015f76:	e9d3 0100 	ldrd	r0, r1, [r3]
 8015f7a:	e9c4 0112 	strd	r0, r1, [r4, #72]	; 0x48
 8015f7e:	ed9f 7ba2 	vldr	d7, [pc, #648]	; 8016208 <_printf_float+0x2d0>
 8015f82:	ed94 0b12 	vldr	d0, [r4, #72]	; 0x48
 8015f86:	eeb0 6bc0 	vabs.f64	d6, d0
 8015f8a:	eeb4 6b47 	vcmp.f64	d6, d7
 8015f8e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8015f92:	dd24      	ble.n	8015fde <_printf_float+0xa6>
 8015f94:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 8015f98:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8015f9c:	d502      	bpl.n	8015fa4 <_printf_float+0x6c>
 8015f9e:	232d      	movs	r3, #45	; 0x2d
 8015fa0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8015fa4:	499a      	ldr	r1, [pc, #616]	; (8016210 <_printf_float+0x2d8>)
 8015fa6:	4b9b      	ldr	r3, [pc, #620]	; (8016214 <_printf_float+0x2dc>)
 8015fa8:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
 8015fac:	bf8c      	ite	hi
 8015fae:	4688      	movhi	r8, r1
 8015fb0:	4698      	movls	r8, r3
 8015fb2:	f022 0204 	bic.w	r2, r2, #4
 8015fb6:	2303      	movs	r3, #3
 8015fb8:	6123      	str	r3, [r4, #16]
 8015fba:	6022      	str	r2, [r4, #0]
 8015fbc:	f04f 0a00 	mov.w	sl, #0
 8015fc0:	9700      	str	r7, [sp, #0]
 8015fc2:	4633      	mov	r3, r6
 8015fc4:	aa0b      	add	r2, sp, #44	; 0x2c
 8015fc6:	4621      	mov	r1, r4
 8015fc8:	4628      	mov	r0, r5
 8015fca:	f000 f9e1 	bl	8016390 <_printf_common>
 8015fce:	3001      	adds	r0, #1
 8015fd0:	f040 8089 	bne.w	80160e6 <_printf_float+0x1ae>
 8015fd4:	f04f 30ff 	mov.w	r0, #4294967295
 8015fd8:	b00d      	add	sp, #52	; 0x34
 8015fda:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8015fde:	eeb4 0b40 	vcmp.f64	d0, d0
 8015fe2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8015fe6:	d702      	bvc.n	8015fee <_printf_float+0xb6>
 8015fe8:	498b      	ldr	r1, [pc, #556]	; (8016218 <_printf_float+0x2e0>)
 8015fea:	4b8c      	ldr	r3, [pc, #560]	; (801621c <_printf_float+0x2e4>)
 8015fec:	e7dc      	b.n	8015fa8 <_printf_float+0x70>
 8015fee:	6861      	ldr	r1, [r4, #4]
 8015ff0:	1c4b      	adds	r3, r1, #1
 8015ff2:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8015ff6:	ab0a      	add	r3, sp, #40	; 0x28
 8015ff8:	a809      	add	r0, sp, #36	; 0x24
 8015ffa:	d13b      	bne.n	8016074 <_printf_float+0x13c>
 8015ffc:	2106      	movs	r1, #6
 8015ffe:	6061      	str	r1, [r4, #4]
 8016000:	f04f 0c00 	mov.w	ip, #0
 8016004:	e9cd 3c02 	strd	r3, ip, [sp, #8]
 8016008:	e9cd 0900 	strd	r0, r9, [sp]
 801600c:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8016010:	6022      	str	r2, [r4, #0]
 8016012:	6861      	ldr	r1, [r4, #4]
 8016014:	4628      	mov	r0, r5
 8016016:	f7ff ff09 	bl	8015e2c <__cvt>
 801601a:	f009 03df 	and.w	r3, r9, #223	; 0xdf
 801601e:	2b47      	cmp	r3, #71	; 0x47
 8016020:	4680      	mov	r8, r0
 8016022:	d109      	bne.n	8016038 <_printf_float+0x100>
 8016024:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8016026:	1cd8      	adds	r0, r3, #3
 8016028:	db02      	blt.n	8016030 <_printf_float+0xf8>
 801602a:	6862      	ldr	r2, [r4, #4]
 801602c:	4293      	cmp	r3, r2
 801602e:	dd47      	ble.n	80160c0 <_printf_float+0x188>
 8016030:	f1a9 0902 	sub.w	r9, r9, #2
 8016034:	fa5f f989 	uxtb.w	r9, r9
 8016038:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 801603c:	9909      	ldr	r1, [sp, #36]	; 0x24
 801603e:	d824      	bhi.n	801608a <_printf_float+0x152>
 8016040:	3901      	subs	r1, #1
 8016042:	464a      	mov	r2, r9
 8016044:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8016048:	9109      	str	r1, [sp, #36]	; 0x24
 801604a:	f7ff ff41 	bl	8015ed0 <__exponent>
 801604e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8016050:	1813      	adds	r3, r2, r0
 8016052:	2a01      	cmp	r2, #1
 8016054:	4682      	mov	sl, r0
 8016056:	6123      	str	r3, [r4, #16]
 8016058:	dc02      	bgt.n	8016060 <_printf_float+0x128>
 801605a:	6822      	ldr	r2, [r4, #0]
 801605c:	07d1      	lsls	r1, r2, #31
 801605e:	d501      	bpl.n	8016064 <_printf_float+0x12c>
 8016060:	3301      	adds	r3, #1
 8016062:	6123      	str	r3, [r4, #16]
 8016064:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8016068:	2b00      	cmp	r3, #0
 801606a:	d0a9      	beq.n	8015fc0 <_printf_float+0x88>
 801606c:	232d      	movs	r3, #45	; 0x2d
 801606e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8016072:	e7a5      	b.n	8015fc0 <_printf_float+0x88>
 8016074:	f1b9 0f67 	cmp.w	r9, #103	; 0x67
 8016078:	f000 8178 	beq.w	801636c <_printf_float+0x434>
 801607c:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
 8016080:	d1be      	bne.n	8016000 <_printf_float+0xc8>
 8016082:	2900      	cmp	r1, #0
 8016084:	d1bc      	bne.n	8016000 <_printf_float+0xc8>
 8016086:	2101      	movs	r1, #1
 8016088:	e7b9      	b.n	8015ffe <_printf_float+0xc6>
 801608a:	f1b9 0f66 	cmp.w	r9, #102	; 0x66
 801608e:	d119      	bne.n	80160c4 <_printf_float+0x18c>
 8016090:	2900      	cmp	r1, #0
 8016092:	6863      	ldr	r3, [r4, #4]
 8016094:	dd0c      	ble.n	80160b0 <_printf_float+0x178>
 8016096:	6121      	str	r1, [r4, #16]
 8016098:	b913      	cbnz	r3, 80160a0 <_printf_float+0x168>
 801609a:	6822      	ldr	r2, [r4, #0]
 801609c:	07d2      	lsls	r2, r2, #31
 801609e:	d502      	bpl.n	80160a6 <_printf_float+0x16e>
 80160a0:	3301      	adds	r3, #1
 80160a2:	440b      	add	r3, r1
 80160a4:	6123      	str	r3, [r4, #16]
 80160a6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80160a8:	65a3      	str	r3, [r4, #88]	; 0x58
 80160aa:	f04f 0a00 	mov.w	sl, #0
 80160ae:	e7d9      	b.n	8016064 <_printf_float+0x12c>
 80160b0:	b913      	cbnz	r3, 80160b8 <_printf_float+0x180>
 80160b2:	6822      	ldr	r2, [r4, #0]
 80160b4:	07d0      	lsls	r0, r2, #31
 80160b6:	d501      	bpl.n	80160bc <_printf_float+0x184>
 80160b8:	3302      	adds	r3, #2
 80160ba:	e7f3      	b.n	80160a4 <_printf_float+0x16c>
 80160bc:	2301      	movs	r3, #1
 80160be:	e7f1      	b.n	80160a4 <_printf_float+0x16c>
 80160c0:	f04f 0967 	mov.w	r9, #103	; 0x67
 80160c4:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 80160c8:	4293      	cmp	r3, r2
 80160ca:	db05      	blt.n	80160d8 <_printf_float+0x1a0>
 80160cc:	6822      	ldr	r2, [r4, #0]
 80160ce:	6123      	str	r3, [r4, #16]
 80160d0:	07d1      	lsls	r1, r2, #31
 80160d2:	d5e8      	bpl.n	80160a6 <_printf_float+0x16e>
 80160d4:	3301      	adds	r3, #1
 80160d6:	e7e5      	b.n	80160a4 <_printf_float+0x16c>
 80160d8:	2b00      	cmp	r3, #0
 80160da:	bfd4      	ite	le
 80160dc:	f1c3 0302 	rsble	r3, r3, #2
 80160e0:	2301      	movgt	r3, #1
 80160e2:	4413      	add	r3, r2
 80160e4:	e7de      	b.n	80160a4 <_printf_float+0x16c>
 80160e6:	6823      	ldr	r3, [r4, #0]
 80160e8:	055a      	lsls	r2, r3, #21
 80160ea:	d407      	bmi.n	80160fc <_printf_float+0x1c4>
 80160ec:	6923      	ldr	r3, [r4, #16]
 80160ee:	4642      	mov	r2, r8
 80160f0:	4631      	mov	r1, r6
 80160f2:	4628      	mov	r0, r5
 80160f4:	47b8      	blx	r7
 80160f6:	3001      	adds	r0, #1
 80160f8:	d12a      	bne.n	8016150 <_printf_float+0x218>
 80160fa:	e76b      	b.n	8015fd4 <_printf_float+0x9c>
 80160fc:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 8016100:	f240 80de 	bls.w	80162c0 <_printf_float+0x388>
 8016104:	ed94 7b12 	vldr	d7, [r4, #72]	; 0x48
 8016108:	eeb5 7b40 	vcmp.f64	d7, #0.0
 801610c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8016110:	d133      	bne.n	801617a <_printf_float+0x242>
 8016112:	2301      	movs	r3, #1
 8016114:	4a42      	ldr	r2, [pc, #264]	; (8016220 <_printf_float+0x2e8>)
 8016116:	4631      	mov	r1, r6
 8016118:	4628      	mov	r0, r5
 801611a:	47b8      	blx	r7
 801611c:	3001      	adds	r0, #1
 801611e:	f43f af59 	beq.w	8015fd4 <_printf_float+0x9c>
 8016122:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8016126:	429a      	cmp	r2, r3
 8016128:	db02      	blt.n	8016130 <_printf_float+0x1f8>
 801612a:	6823      	ldr	r3, [r4, #0]
 801612c:	07d8      	lsls	r0, r3, #31
 801612e:	d50f      	bpl.n	8016150 <_printf_float+0x218>
 8016130:	9b05      	ldr	r3, [sp, #20]
 8016132:	465a      	mov	r2, fp
 8016134:	4631      	mov	r1, r6
 8016136:	4628      	mov	r0, r5
 8016138:	47b8      	blx	r7
 801613a:	3001      	adds	r0, #1
 801613c:	f43f af4a 	beq.w	8015fd4 <_printf_float+0x9c>
 8016140:	f04f 0800 	mov.w	r8, #0
 8016144:	f104 091a 	add.w	r9, r4, #26
 8016148:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801614a:	3b01      	subs	r3, #1
 801614c:	4543      	cmp	r3, r8
 801614e:	dc09      	bgt.n	8016164 <_printf_float+0x22c>
 8016150:	6823      	ldr	r3, [r4, #0]
 8016152:	079b      	lsls	r3, r3, #30
 8016154:	f100 8105 	bmi.w	8016362 <_printf_float+0x42a>
 8016158:	68e0      	ldr	r0, [r4, #12]
 801615a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801615c:	4298      	cmp	r0, r3
 801615e:	bfb8      	it	lt
 8016160:	4618      	movlt	r0, r3
 8016162:	e739      	b.n	8015fd8 <_printf_float+0xa0>
 8016164:	2301      	movs	r3, #1
 8016166:	464a      	mov	r2, r9
 8016168:	4631      	mov	r1, r6
 801616a:	4628      	mov	r0, r5
 801616c:	47b8      	blx	r7
 801616e:	3001      	adds	r0, #1
 8016170:	f43f af30 	beq.w	8015fd4 <_printf_float+0x9c>
 8016174:	f108 0801 	add.w	r8, r8, #1
 8016178:	e7e6      	b.n	8016148 <_printf_float+0x210>
 801617a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801617c:	2b00      	cmp	r3, #0
 801617e:	dc2b      	bgt.n	80161d8 <_printf_float+0x2a0>
 8016180:	2301      	movs	r3, #1
 8016182:	4a27      	ldr	r2, [pc, #156]	; (8016220 <_printf_float+0x2e8>)
 8016184:	4631      	mov	r1, r6
 8016186:	4628      	mov	r0, r5
 8016188:	47b8      	blx	r7
 801618a:	3001      	adds	r0, #1
 801618c:	f43f af22 	beq.w	8015fd4 <_printf_float+0x9c>
 8016190:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8016192:	b923      	cbnz	r3, 801619e <_printf_float+0x266>
 8016194:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8016196:	b913      	cbnz	r3, 801619e <_printf_float+0x266>
 8016198:	6823      	ldr	r3, [r4, #0]
 801619a:	07d9      	lsls	r1, r3, #31
 801619c:	d5d8      	bpl.n	8016150 <_printf_float+0x218>
 801619e:	9b05      	ldr	r3, [sp, #20]
 80161a0:	465a      	mov	r2, fp
 80161a2:	4631      	mov	r1, r6
 80161a4:	4628      	mov	r0, r5
 80161a6:	47b8      	blx	r7
 80161a8:	3001      	adds	r0, #1
 80161aa:	f43f af13 	beq.w	8015fd4 <_printf_float+0x9c>
 80161ae:	f04f 0900 	mov.w	r9, #0
 80161b2:	f104 0a1a 	add.w	sl, r4, #26
 80161b6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80161b8:	425b      	negs	r3, r3
 80161ba:	454b      	cmp	r3, r9
 80161bc:	dc01      	bgt.n	80161c2 <_printf_float+0x28a>
 80161be:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80161c0:	e795      	b.n	80160ee <_printf_float+0x1b6>
 80161c2:	2301      	movs	r3, #1
 80161c4:	4652      	mov	r2, sl
 80161c6:	4631      	mov	r1, r6
 80161c8:	4628      	mov	r0, r5
 80161ca:	47b8      	blx	r7
 80161cc:	3001      	adds	r0, #1
 80161ce:	f43f af01 	beq.w	8015fd4 <_printf_float+0x9c>
 80161d2:	f109 0901 	add.w	r9, r9, #1
 80161d6:	e7ee      	b.n	80161b6 <_printf_float+0x27e>
 80161d8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80161da:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80161dc:	429a      	cmp	r2, r3
 80161de:	bfa8      	it	ge
 80161e0:	461a      	movge	r2, r3
 80161e2:	2a00      	cmp	r2, #0
 80161e4:	4691      	mov	r9, r2
 80161e6:	dd07      	ble.n	80161f8 <_printf_float+0x2c0>
 80161e8:	4613      	mov	r3, r2
 80161ea:	4631      	mov	r1, r6
 80161ec:	4642      	mov	r2, r8
 80161ee:	4628      	mov	r0, r5
 80161f0:	47b8      	blx	r7
 80161f2:	3001      	adds	r0, #1
 80161f4:	f43f aeee 	beq.w	8015fd4 <_printf_float+0x9c>
 80161f8:	f104 031a 	add.w	r3, r4, #26
 80161fc:	f04f 0a00 	mov.w	sl, #0
 8016200:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8016204:	9307      	str	r3, [sp, #28]
 8016206:	e017      	b.n	8016238 <_printf_float+0x300>
 8016208:	ffffffff 	.word	0xffffffff
 801620c:	7fefffff 	.word	0x7fefffff
 8016210:	0801c1ec 	.word	0x0801c1ec
 8016214:	0801c1e8 	.word	0x0801c1e8
 8016218:	0801c1f4 	.word	0x0801c1f4
 801621c:	0801c1f0 	.word	0x0801c1f0
 8016220:	0801c1f8 	.word	0x0801c1f8
 8016224:	2301      	movs	r3, #1
 8016226:	9a07      	ldr	r2, [sp, #28]
 8016228:	4631      	mov	r1, r6
 801622a:	4628      	mov	r0, r5
 801622c:	47b8      	blx	r7
 801622e:	3001      	adds	r0, #1
 8016230:	f43f aed0 	beq.w	8015fd4 <_printf_float+0x9c>
 8016234:	f10a 0a01 	add.w	sl, sl, #1
 8016238:	6da3      	ldr	r3, [r4, #88]	; 0x58
 801623a:	9306      	str	r3, [sp, #24]
 801623c:	eba3 0309 	sub.w	r3, r3, r9
 8016240:	4553      	cmp	r3, sl
 8016242:	dcef      	bgt.n	8016224 <_printf_float+0x2ec>
 8016244:	9b06      	ldr	r3, [sp, #24]
 8016246:	4498      	add	r8, r3
 8016248:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 801624c:	429a      	cmp	r2, r3
 801624e:	db15      	blt.n	801627c <_printf_float+0x344>
 8016250:	6823      	ldr	r3, [r4, #0]
 8016252:	07da      	lsls	r2, r3, #31
 8016254:	d412      	bmi.n	801627c <_printf_float+0x344>
 8016256:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8016258:	9a06      	ldr	r2, [sp, #24]
 801625a:	9909      	ldr	r1, [sp, #36]	; 0x24
 801625c:	1a9a      	subs	r2, r3, r2
 801625e:	eba3 0a01 	sub.w	sl, r3, r1
 8016262:	4592      	cmp	sl, r2
 8016264:	bfa8      	it	ge
 8016266:	4692      	movge	sl, r2
 8016268:	f1ba 0f00 	cmp.w	sl, #0
 801626c:	dc0e      	bgt.n	801628c <_printf_float+0x354>
 801626e:	f04f 0800 	mov.w	r8, #0
 8016272:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8016276:	f104 091a 	add.w	r9, r4, #26
 801627a:	e019      	b.n	80162b0 <_printf_float+0x378>
 801627c:	9b05      	ldr	r3, [sp, #20]
 801627e:	465a      	mov	r2, fp
 8016280:	4631      	mov	r1, r6
 8016282:	4628      	mov	r0, r5
 8016284:	47b8      	blx	r7
 8016286:	3001      	adds	r0, #1
 8016288:	d1e5      	bne.n	8016256 <_printf_float+0x31e>
 801628a:	e6a3      	b.n	8015fd4 <_printf_float+0x9c>
 801628c:	4653      	mov	r3, sl
 801628e:	4642      	mov	r2, r8
 8016290:	4631      	mov	r1, r6
 8016292:	4628      	mov	r0, r5
 8016294:	47b8      	blx	r7
 8016296:	3001      	adds	r0, #1
 8016298:	d1e9      	bne.n	801626e <_printf_float+0x336>
 801629a:	e69b      	b.n	8015fd4 <_printf_float+0x9c>
 801629c:	2301      	movs	r3, #1
 801629e:	464a      	mov	r2, r9
 80162a0:	4631      	mov	r1, r6
 80162a2:	4628      	mov	r0, r5
 80162a4:	47b8      	blx	r7
 80162a6:	3001      	adds	r0, #1
 80162a8:	f43f ae94 	beq.w	8015fd4 <_printf_float+0x9c>
 80162ac:	f108 0801 	add.w	r8, r8, #1
 80162b0:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80162b4:	1a9b      	subs	r3, r3, r2
 80162b6:	eba3 030a 	sub.w	r3, r3, sl
 80162ba:	4543      	cmp	r3, r8
 80162bc:	dcee      	bgt.n	801629c <_printf_float+0x364>
 80162be:	e747      	b.n	8016150 <_printf_float+0x218>
 80162c0:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80162c2:	2a01      	cmp	r2, #1
 80162c4:	dc01      	bgt.n	80162ca <_printf_float+0x392>
 80162c6:	07db      	lsls	r3, r3, #31
 80162c8:	d539      	bpl.n	801633e <_printf_float+0x406>
 80162ca:	2301      	movs	r3, #1
 80162cc:	4642      	mov	r2, r8
 80162ce:	4631      	mov	r1, r6
 80162d0:	4628      	mov	r0, r5
 80162d2:	47b8      	blx	r7
 80162d4:	3001      	adds	r0, #1
 80162d6:	f43f ae7d 	beq.w	8015fd4 <_printf_float+0x9c>
 80162da:	9b05      	ldr	r3, [sp, #20]
 80162dc:	465a      	mov	r2, fp
 80162de:	4631      	mov	r1, r6
 80162e0:	4628      	mov	r0, r5
 80162e2:	47b8      	blx	r7
 80162e4:	3001      	adds	r0, #1
 80162e6:	f108 0801 	add.w	r8, r8, #1
 80162ea:	f43f ae73 	beq.w	8015fd4 <_printf_float+0x9c>
 80162ee:	ed94 7b12 	vldr	d7, [r4, #72]	; 0x48
 80162f2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80162f4:	eeb5 7b40 	vcmp.f64	d7, #0.0
 80162f8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80162fc:	f103 33ff 	add.w	r3, r3, #4294967295
 8016300:	d018      	beq.n	8016334 <_printf_float+0x3fc>
 8016302:	4642      	mov	r2, r8
 8016304:	4631      	mov	r1, r6
 8016306:	4628      	mov	r0, r5
 8016308:	47b8      	blx	r7
 801630a:	3001      	adds	r0, #1
 801630c:	d10e      	bne.n	801632c <_printf_float+0x3f4>
 801630e:	e661      	b.n	8015fd4 <_printf_float+0x9c>
 8016310:	2301      	movs	r3, #1
 8016312:	464a      	mov	r2, r9
 8016314:	4631      	mov	r1, r6
 8016316:	4628      	mov	r0, r5
 8016318:	47b8      	blx	r7
 801631a:	3001      	adds	r0, #1
 801631c:	f43f ae5a 	beq.w	8015fd4 <_printf_float+0x9c>
 8016320:	f108 0801 	add.w	r8, r8, #1
 8016324:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8016326:	3b01      	subs	r3, #1
 8016328:	4543      	cmp	r3, r8
 801632a:	dcf1      	bgt.n	8016310 <_printf_float+0x3d8>
 801632c:	4653      	mov	r3, sl
 801632e:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8016332:	e6dd      	b.n	80160f0 <_printf_float+0x1b8>
 8016334:	f04f 0800 	mov.w	r8, #0
 8016338:	f104 091a 	add.w	r9, r4, #26
 801633c:	e7f2      	b.n	8016324 <_printf_float+0x3ec>
 801633e:	2301      	movs	r3, #1
 8016340:	e7df      	b.n	8016302 <_printf_float+0x3ca>
 8016342:	2301      	movs	r3, #1
 8016344:	464a      	mov	r2, r9
 8016346:	4631      	mov	r1, r6
 8016348:	4628      	mov	r0, r5
 801634a:	47b8      	blx	r7
 801634c:	3001      	adds	r0, #1
 801634e:	f43f ae41 	beq.w	8015fd4 <_printf_float+0x9c>
 8016352:	f108 0801 	add.w	r8, r8, #1
 8016356:	68e3      	ldr	r3, [r4, #12]
 8016358:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 801635a:	1a9b      	subs	r3, r3, r2
 801635c:	4543      	cmp	r3, r8
 801635e:	dcf0      	bgt.n	8016342 <_printf_float+0x40a>
 8016360:	e6fa      	b.n	8016158 <_printf_float+0x220>
 8016362:	f04f 0800 	mov.w	r8, #0
 8016366:	f104 0919 	add.w	r9, r4, #25
 801636a:	e7f4      	b.n	8016356 <_printf_float+0x41e>
 801636c:	2900      	cmp	r1, #0
 801636e:	f43f ae8a 	beq.w	8016086 <_printf_float+0x14e>
 8016372:	f04f 0c00 	mov.w	ip, #0
 8016376:	e9cd 3c02 	strd	r3, ip, [sp, #8]
 801637a:	e9cd 0900 	strd	r0, r9, [sp]
 801637e:	6022      	str	r2, [r4, #0]
 8016380:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8016384:	4628      	mov	r0, r5
 8016386:	f7ff fd51 	bl	8015e2c <__cvt>
 801638a:	4680      	mov	r8, r0
 801638c:	e64a      	b.n	8016024 <_printf_float+0xec>
 801638e:	bf00      	nop

08016390 <_printf_common>:
 8016390:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8016394:	4691      	mov	r9, r2
 8016396:	461f      	mov	r7, r3
 8016398:	688a      	ldr	r2, [r1, #8]
 801639a:	690b      	ldr	r3, [r1, #16]
 801639c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80163a0:	4293      	cmp	r3, r2
 80163a2:	bfb8      	it	lt
 80163a4:	4613      	movlt	r3, r2
 80163a6:	f8c9 3000 	str.w	r3, [r9]
 80163aa:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80163ae:	4606      	mov	r6, r0
 80163b0:	460c      	mov	r4, r1
 80163b2:	b112      	cbz	r2, 80163ba <_printf_common+0x2a>
 80163b4:	3301      	adds	r3, #1
 80163b6:	f8c9 3000 	str.w	r3, [r9]
 80163ba:	6823      	ldr	r3, [r4, #0]
 80163bc:	0699      	lsls	r1, r3, #26
 80163be:	bf42      	ittt	mi
 80163c0:	f8d9 3000 	ldrmi.w	r3, [r9]
 80163c4:	3302      	addmi	r3, #2
 80163c6:	f8c9 3000 	strmi.w	r3, [r9]
 80163ca:	6825      	ldr	r5, [r4, #0]
 80163cc:	f015 0506 	ands.w	r5, r5, #6
 80163d0:	d107      	bne.n	80163e2 <_printf_common+0x52>
 80163d2:	f104 0a19 	add.w	sl, r4, #25
 80163d6:	68e3      	ldr	r3, [r4, #12]
 80163d8:	f8d9 2000 	ldr.w	r2, [r9]
 80163dc:	1a9b      	subs	r3, r3, r2
 80163de:	42ab      	cmp	r3, r5
 80163e0:	dc28      	bgt.n	8016434 <_printf_common+0xa4>
 80163e2:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 80163e6:	6822      	ldr	r2, [r4, #0]
 80163e8:	3300      	adds	r3, #0
 80163ea:	bf18      	it	ne
 80163ec:	2301      	movne	r3, #1
 80163ee:	0692      	lsls	r2, r2, #26
 80163f0:	d42d      	bmi.n	801644e <_printf_common+0xbe>
 80163f2:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80163f6:	4639      	mov	r1, r7
 80163f8:	4630      	mov	r0, r6
 80163fa:	47c0      	blx	r8
 80163fc:	3001      	adds	r0, #1
 80163fe:	d020      	beq.n	8016442 <_printf_common+0xb2>
 8016400:	6823      	ldr	r3, [r4, #0]
 8016402:	68e5      	ldr	r5, [r4, #12]
 8016404:	f8d9 2000 	ldr.w	r2, [r9]
 8016408:	f003 0306 	and.w	r3, r3, #6
 801640c:	2b04      	cmp	r3, #4
 801640e:	bf08      	it	eq
 8016410:	1aad      	subeq	r5, r5, r2
 8016412:	68a3      	ldr	r3, [r4, #8]
 8016414:	6922      	ldr	r2, [r4, #16]
 8016416:	bf0c      	ite	eq
 8016418:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 801641c:	2500      	movne	r5, #0
 801641e:	4293      	cmp	r3, r2
 8016420:	bfc4      	itt	gt
 8016422:	1a9b      	subgt	r3, r3, r2
 8016424:	18ed      	addgt	r5, r5, r3
 8016426:	f04f 0900 	mov.w	r9, #0
 801642a:	341a      	adds	r4, #26
 801642c:	454d      	cmp	r5, r9
 801642e:	d11a      	bne.n	8016466 <_printf_common+0xd6>
 8016430:	2000      	movs	r0, #0
 8016432:	e008      	b.n	8016446 <_printf_common+0xb6>
 8016434:	2301      	movs	r3, #1
 8016436:	4652      	mov	r2, sl
 8016438:	4639      	mov	r1, r7
 801643a:	4630      	mov	r0, r6
 801643c:	47c0      	blx	r8
 801643e:	3001      	adds	r0, #1
 8016440:	d103      	bne.n	801644a <_printf_common+0xba>
 8016442:	f04f 30ff 	mov.w	r0, #4294967295
 8016446:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801644a:	3501      	adds	r5, #1
 801644c:	e7c3      	b.n	80163d6 <_printf_common+0x46>
 801644e:	18e1      	adds	r1, r4, r3
 8016450:	1c5a      	adds	r2, r3, #1
 8016452:	2030      	movs	r0, #48	; 0x30
 8016454:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8016458:	4422      	add	r2, r4
 801645a:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 801645e:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8016462:	3302      	adds	r3, #2
 8016464:	e7c5      	b.n	80163f2 <_printf_common+0x62>
 8016466:	2301      	movs	r3, #1
 8016468:	4622      	mov	r2, r4
 801646a:	4639      	mov	r1, r7
 801646c:	4630      	mov	r0, r6
 801646e:	47c0      	blx	r8
 8016470:	3001      	adds	r0, #1
 8016472:	d0e6      	beq.n	8016442 <_printf_common+0xb2>
 8016474:	f109 0901 	add.w	r9, r9, #1
 8016478:	e7d8      	b.n	801642c <_printf_common+0x9c>
	...

0801647c <_printf_i>:
 801647c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8016480:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 8016484:	460c      	mov	r4, r1
 8016486:	7e09      	ldrb	r1, [r1, #24]
 8016488:	b085      	sub	sp, #20
 801648a:	296e      	cmp	r1, #110	; 0x6e
 801648c:	4617      	mov	r7, r2
 801648e:	4606      	mov	r6, r0
 8016490:	4698      	mov	r8, r3
 8016492:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8016494:	f000 80b3 	beq.w	80165fe <_printf_i+0x182>
 8016498:	d822      	bhi.n	80164e0 <_printf_i+0x64>
 801649a:	2963      	cmp	r1, #99	; 0x63
 801649c:	d036      	beq.n	801650c <_printf_i+0x90>
 801649e:	d80a      	bhi.n	80164b6 <_printf_i+0x3a>
 80164a0:	2900      	cmp	r1, #0
 80164a2:	f000 80b9 	beq.w	8016618 <_printf_i+0x19c>
 80164a6:	2958      	cmp	r1, #88	; 0x58
 80164a8:	f000 8083 	beq.w	80165b2 <_printf_i+0x136>
 80164ac:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80164b0:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 80164b4:	e032      	b.n	801651c <_printf_i+0xa0>
 80164b6:	2964      	cmp	r1, #100	; 0x64
 80164b8:	d001      	beq.n	80164be <_printf_i+0x42>
 80164ba:	2969      	cmp	r1, #105	; 0x69
 80164bc:	d1f6      	bne.n	80164ac <_printf_i+0x30>
 80164be:	6820      	ldr	r0, [r4, #0]
 80164c0:	6813      	ldr	r3, [r2, #0]
 80164c2:	0605      	lsls	r5, r0, #24
 80164c4:	f103 0104 	add.w	r1, r3, #4
 80164c8:	d52a      	bpl.n	8016520 <_printf_i+0xa4>
 80164ca:	681b      	ldr	r3, [r3, #0]
 80164cc:	6011      	str	r1, [r2, #0]
 80164ce:	2b00      	cmp	r3, #0
 80164d0:	da03      	bge.n	80164da <_printf_i+0x5e>
 80164d2:	222d      	movs	r2, #45	; 0x2d
 80164d4:	425b      	negs	r3, r3
 80164d6:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 80164da:	486f      	ldr	r0, [pc, #444]	; (8016698 <_printf_i+0x21c>)
 80164dc:	220a      	movs	r2, #10
 80164de:	e039      	b.n	8016554 <_printf_i+0xd8>
 80164e0:	2973      	cmp	r1, #115	; 0x73
 80164e2:	f000 809d 	beq.w	8016620 <_printf_i+0x1a4>
 80164e6:	d808      	bhi.n	80164fa <_printf_i+0x7e>
 80164e8:	296f      	cmp	r1, #111	; 0x6f
 80164ea:	d020      	beq.n	801652e <_printf_i+0xb2>
 80164ec:	2970      	cmp	r1, #112	; 0x70
 80164ee:	d1dd      	bne.n	80164ac <_printf_i+0x30>
 80164f0:	6823      	ldr	r3, [r4, #0]
 80164f2:	f043 0320 	orr.w	r3, r3, #32
 80164f6:	6023      	str	r3, [r4, #0]
 80164f8:	e003      	b.n	8016502 <_printf_i+0x86>
 80164fa:	2975      	cmp	r1, #117	; 0x75
 80164fc:	d017      	beq.n	801652e <_printf_i+0xb2>
 80164fe:	2978      	cmp	r1, #120	; 0x78
 8016500:	d1d4      	bne.n	80164ac <_printf_i+0x30>
 8016502:	2378      	movs	r3, #120	; 0x78
 8016504:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8016508:	4864      	ldr	r0, [pc, #400]	; (801669c <_printf_i+0x220>)
 801650a:	e055      	b.n	80165b8 <_printf_i+0x13c>
 801650c:	6813      	ldr	r3, [r2, #0]
 801650e:	1d19      	adds	r1, r3, #4
 8016510:	681b      	ldr	r3, [r3, #0]
 8016512:	6011      	str	r1, [r2, #0]
 8016514:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8016518:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 801651c:	2301      	movs	r3, #1
 801651e:	e08c      	b.n	801663a <_printf_i+0x1be>
 8016520:	681b      	ldr	r3, [r3, #0]
 8016522:	6011      	str	r1, [r2, #0]
 8016524:	f010 0f40 	tst.w	r0, #64	; 0x40
 8016528:	bf18      	it	ne
 801652a:	b21b      	sxthne	r3, r3
 801652c:	e7cf      	b.n	80164ce <_printf_i+0x52>
 801652e:	6813      	ldr	r3, [r2, #0]
 8016530:	6825      	ldr	r5, [r4, #0]
 8016532:	1d18      	adds	r0, r3, #4
 8016534:	6010      	str	r0, [r2, #0]
 8016536:	0628      	lsls	r0, r5, #24
 8016538:	d501      	bpl.n	801653e <_printf_i+0xc2>
 801653a:	681b      	ldr	r3, [r3, #0]
 801653c:	e002      	b.n	8016544 <_printf_i+0xc8>
 801653e:	0668      	lsls	r0, r5, #25
 8016540:	d5fb      	bpl.n	801653a <_printf_i+0xbe>
 8016542:	881b      	ldrh	r3, [r3, #0]
 8016544:	4854      	ldr	r0, [pc, #336]	; (8016698 <_printf_i+0x21c>)
 8016546:	296f      	cmp	r1, #111	; 0x6f
 8016548:	bf14      	ite	ne
 801654a:	220a      	movne	r2, #10
 801654c:	2208      	moveq	r2, #8
 801654e:	2100      	movs	r1, #0
 8016550:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8016554:	6865      	ldr	r5, [r4, #4]
 8016556:	60a5      	str	r5, [r4, #8]
 8016558:	2d00      	cmp	r5, #0
 801655a:	f2c0 8095 	blt.w	8016688 <_printf_i+0x20c>
 801655e:	6821      	ldr	r1, [r4, #0]
 8016560:	f021 0104 	bic.w	r1, r1, #4
 8016564:	6021      	str	r1, [r4, #0]
 8016566:	2b00      	cmp	r3, #0
 8016568:	d13d      	bne.n	80165e6 <_printf_i+0x16a>
 801656a:	2d00      	cmp	r5, #0
 801656c:	f040 808e 	bne.w	801668c <_printf_i+0x210>
 8016570:	4665      	mov	r5, ip
 8016572:	2a08      	cmp	r2, #8
 8016574:	d10b      	bne.n	801658e <_printf_i+0x112>
 8016576:	6823      	ldr	r3, [r4, #0]
 8016578:	07db      	lsls	r3, r3, #31
 801657a:	d508      	bpl.n	801658e <_printf_i+0x112>
 801657c:	6923      	ldr	r3, [r4, #16]
 801657e:	6862      	ldr	r2, [r4, #4]
 8016580:	429a      	cmp	r2, r3
 8016582:	bfde      	ittt	le
 8016584:	2330      	movle	r3, #48	; 0x30
 8016586:	f805 3c01 	strble.w	r3, [r5, #-1]
 801658a:	f105 35ff 	addle.w	r5, r5, #4294967295
 801658e:	ebac 0305 	sub.w	r3, ip, r5
 8016592:	6123      	str	r3, [r4, #16]
 8016594:	f8cd 8000 	str.w	r8, [sp]
 8016598:	463b      	mov	r3, r7
 801659a:	aa03      	add	r2, sp, #12
 801659c:	4621      	mov	r1, r4
 801659e:	4630      	mov	r0, r6
 80165a0:	f7ff fef6 	bl	8016390 <_printf_common>
 80165a4:	3001      	adds	r0, #1
 80165a6:	d14d      	bne.n	8016644 <_printf_i+0x1c8>
 80165a8:	f04f 30ff 	mov.w	r0, #4294967295
 80165ac:	b005      	add	sp, #20
 80165ae:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80165b2:	4839      	ldr	r0, [pc, #228]	; (8016698 <_printf_i+0x21c>)
 80165b4:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 80165b8:	6813      	ldr	r3, [r2, #0]
 80165ba:	6821      	ldr	r1, [r4, #0]
 80165bc:	1d1d      	adds	r5, r3, #4
 80165be:	681b      	ldr	r3, [r3, #0]
 80165c0:	6015      	str	r5, [r2, #0]
 80165c2:	060a      	lsls	r2, r1, #24
 80165c4:	d50b      	bpl.n	80165de <_printf_i+0x162>
 80165c6:	07ca      	lsls	r2, r1, #31
 80165c8:	bf44      	itt	mi
 80165ca:	f041 0120 	orrmi.w	r1, r1, #32
 80165ce:	6021      	strmi	r1, [r4, #0]
 80165d0:	b91b      	cbnz	r3, 80165da <_printf_i+0x15e>
 80165d2:	6822      	ldr	r2, [r4, #0]
 80165d4:	f022 0220 	bic.w	r2, r2, #32
 80165d8:	6022      	str	r2, [r4, #0]
 80165da:	2210      	movs	r2, #16
 80165dc:	e7b7      	b.n	801654e <_printf_i+0xd2>
 80165de:	064d      	lsls	r5, r1, #25
 80165e0:	bf48      	it	mi
 80165e2:	b29b      	uxthmi	r3, r3
 80165e4:	e7ef      	b.n	80165c6 <_printf_i+0x14a>
 80165e6:	4665      	mov	r5, ip
 80165e8:	fbb3 f1f2 	udiv	r1, r3, r2
 80165ec:	fb02 3311 	mls	r3, r2, r1, r3
 80165f0:	5cc3      	ldrb	r3, [r0, r3]
 80165f2:	f805 3d01 	strb.w	r3, [r5, #-1]!
 80165f6:	460b      	mov	r3, r1
 80165f8:	2900      	cmp	r1, #0
 80165fa:	d1f5      	bne.n	80165e8 <_printf_i+0x16c>
 80165fc:	e7b9      	b.n	8016572 <_printf_i+0xf6>
 80165fe:	6813      	ldr	r3, [r2, #0]
 8016600:	6825      	ldr	r5, [r4, #0]
 8016602:	6961      	ldr	r1, [r4, #20]
 8016604:	1d18      	adds	r0, r3, #4
 8016606:	6010      	str	r0, [r2, #0]
 8016608:	0628      	lsls	r0, r5, #24
 801660a:	681b      	ldr	r3, [r3, #0]
 801660c:	d501      	bpl.n	8016612 <_printf_i+0x196>
 801660e:	6019      	str	r1, [r3, #0]
 8016610:	e002      	b.n	8016618 <_printf_i+0x19c>
 8016612:	066a      	lsls	r2, r5, #25
 8016614:	d5fb      	bpl.n	801660e <_printf_i+0x192>
 8016616:	8019      	strh	r1, [r3, #0]
 8016618:	2300      	movs	r3, #0
 801661a:	6123      	str	r3, [r4, #16]
 801661c:	4665      	mov	r5, ip
 801661e:	e7b9      	b.n	8016594 <_printf_i+0x118>
 8016620:	6813      	ldr	r3, [r2, #0]
 8016622:	1d19      	adds	r1, r3, #4
 8016624:	6011      	str	r1, [r2, #0]
 8016626:	681d      	ldr	r5, [r3, #0]
 8016628:	6862      	ldr	r2, [r4, #4]
 801662a:	2100      	movs	r1, #0
 801662c:	4628      	mov	r0, r5
 801662e:	f7e9 fe5f 	bl	80002f0 <memchr>
 8016632:	b108      	cbz	r0, 8016638 <_printf_i+0x1bc>
 8016634:	1b40      	subs	r0, r0, r5
 8016636:	6060      	str	r0, [r4, #4]
 8016638:	6863      	ldr	r3, [r4, #4]
 801663a:	6123      	str	r3, [r4, #16]
 801663c:	2300      	movs	r3, #0
 801663e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8016642:	e7a7      	b.n	8016594 <_printf_i+0x118>
 8016644:	6923      	ldr	r3, [r4, #16]
 8016646:	462a      	mov	r2, r5
 8016648:	4639      	mov	r1, r7
 801664a:	4630      	mov	r0, r6
 801664c:	47c0      	blx	r8
 801664e:	3001      	adds	r0, #1
 8016650:	d0aa      	beq.n	80165a8 <_printf_i+0x12c>
 8016652:	6823      	ldr	r3, [r4, #0]
 8016654:	079b      	lsls	r3, r3, #30
 8016656:	d413      	bmi.n	8016680 <_printf_i+0x204>
 8016658:	68e0      	ldr	r0, [r4, #12]
 801665a:	9b03      	ldr	r3, [sp, #12]
 801665c:	4298      	cmp	r0, r3
 801665e:	bfb8      	it	lt
 8016660:	4618      	movlt	r0, r3
 8016662:	e7a3      	b.n	80165ac <_printf_i+0x130>
 8016664:	2301      	movs	r3, #1
 8016666:	464a      	mov	r2, r9
 8016668:	4639      	mov	r1, r7
 801666a:	4630      	mov	r0, r6
 801666c:	47c0      	blx	r8
 801666e:	3001      	adds	r0, #1
 8016670:	d09a      	beq.n	80165a8 <_printf_i+0x12c>
 8016672:	3501      	adds	r5, #1
 8016674:	68e3      	ldr	r3, [r4, #12]
 8016676:	9a03      	ldr	r2, [sp, #12]
 8016678:	1a9b      	subs	r3, r3, r2
 801667a:	42ab      	cmp	r3, r5
 801667c:	dcf2      	bgt.n	8016664 <_printf_i+0x1e8>
 801667e:	e7eb      	b.n	8016658 <_printf_i+0x1dc>
 8016680:	2500      	movs	r5, #0
 8016682:	f104 0919 	add.w	r9, r4, #25
 8016686:	e7f5      	b.n	8016674 <_printf_i+0x1f8>
 8016688:	2b00      	cmp	r3, #0
 801668a:	d1ac      	bne.n	80165e6 <_printf_i+0x16a>
 801668c:	7803      	ldrb	r3, [r0, #0]
 801668e:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8016692:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8016696:	e76c      	b.n	8016572 <_printf_i+0xf6>
 8016698:	0801c1fa 	.word	0x0801c1fa
 801669c:	0801c20b 	.word	0x0801c20b

080166a0 <_scanf_float>:
 80166a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80166a4:	469a      	mov	sl, r3
 80166a6:	688b      	ldr	r3, [r1, #8]
 80166a8:	4616      	mov	r6, r2
 80166aa:	1e5a      	subs	r2, r3, #1
 80166ac:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 80166b0:	b087      	sub	sp, #28
 80166b2:	bf83      	ittte	hi
 80166b4:	f46f 72ae 	mvnhi.w	r2, #348	; 0x15c
 80166b8:	189b      	addhi	r3, r3, r2
 80166ba:	9301      	strhi	r3, [sp, #4]
 80166bc:	2300      	movls	r3, #0
 80166be:	bf86      	itte	hi
 80166c0:	f240 135d 	movwhi	r3, #349	; 0x15d
 80166c4:	608b      	strhi	r3, [r1, #8]
 80166c6:	9301      	strls	r3, [sp, #4]
 80166c8:	680b      	ldr	r3, [r1, #0]
 80166ca:	4688      	mov	r8, r1
 80166cc:	f04f 0b00 	mov.w	fp, #0
 80166d0:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 80166d4:	f848 3b1c 	str.w	r3, [r8], #28
 80166d8:	e9cd bb03 	strd	fp, fp, [sp, #12]
 80166dc:	4607      	mov	r7, r0
 80166de:	460c      	mov	r4, r1
 80166e0:	4645      	mov	r5, r8
 80166e2:	465a      	mov	r2, fp
 80166e4:	46d9      	mov	r9, fp
 80166e6:	f8cd b008 	str.w	fp, [sp, #8]
 80166ea:	68a1      	ldr	r1, [r4, #8]
 80166ec:	b181      	cbz	r1, 8016710 <_scanf_float+0x70>
 80166ee:	6833      	ldr	r3, [r6, #0]
 80166f0:	781b      	ldrb	r3, [r3, #0]
 80166f2:	2b49      	cmp	r3, #73	; 0x49
 80166f4:	d071      	beq.n	80167da <_scanf_float+0x13a>
 80166f6:	d84d      	bhi.n	8016794 <_scanf_float+0xf4>
 80166f8:	2b39      	cmp	r3, #57	; 0x39
 80166fa:	d840      	bhi.n	801677e <_scanf_float+0xde>
 80166fc:	2b31      	cmp	r3, #49	; 0x31
 80166fe:	f080 8088 	bcs.w	8016812 <_scanf_float+0x172>
 8016702:	2b2d      	cmp	r3, #45	; 0x2d
 8016704:	f000 8090 	beq.w	8016828 <_scanf_float+0x188>
 8016708:	d815      	bhi.n	8016736 <_scanf_float+0x96>
 801670a:	2b2b      	cmp	r3, #43	; 0x2b
 801670c:	f000 808c 	beq.w	8016828 <_scanf_float+0x188>
 8016710:	f1b9 0f00 	cmp.w	r9, #0
 8016714:	d003      	beq.n	801671e <_scanf_float+0x7e>
 8016716:	6823      	ldr	r3, [r4, #0]
 8016718:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 801671c:	6023      	str	r3, [r4, #0]
 801671e:	3a01      	subs	r2, #1
 8016720:	2a01      	cmp	r2, #1
 8016722:	f200 80ea 	bhi.w	80168fa <_scanf_float+0x25a>
 8016726:	4545      	cmp	r5, r8
 8016728:	f200 80dc 	bhi.w	80168e4 <_scanf_float+0x244>
 801672c:	2601      	movs	r6, #1
 801672e:	4630      	mov	r0, r6
 8016730:	b007      	add	sp, #28
 8016732:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8016736:	2b2e      	cmp	r3, #46	; 0x2e
 8016738:	f000 809f 	beq.w	801687a <_scanf_float+0x1da>
 801673c:	2b30      	cmp	r3, #48	; 0x30
 801673e:	d1e7      	bne.n	8016710 <_scanf_float+0x70>
 8016740:	6820      	ldr	r0, [r4, #0]
 8016742:	f410 7f80 	tst.w	r0, #256	; 0x100
 8016746:	d064      	beq.n	8016812 <_scanf_float+0x172>
 8016748:	9b01      	ldr	r3, [sp, #4]
 801674a:	f020 0080 	bic.w	r0, r0, #128	; 0x80
 801674e:	6020      	str	r0, [r4, #0]
 8016750:	f109 0901 	add.w	r9, r9, #1
 8016754:	b11b      	cbz	r3, 801675e <_scanf_float+0xbe>
 8016756:	3b01      	subs	r3, #1
 8016758:	3101      	adds	r1, #1
 801675a:	9301      	str	r3, [sp, #4]
 801675c:	60a1      	str	r1, [r4, #8]
 801675e:	68a3      	ldr	r3, [r4, #8]
 8016760:	3b01      	subs	r3, #1
 8016762:	60a3      	str	r3, [r4, #8]
 8016764:	6923      	ldr	r3, [r4, #16]
 8016766:	3301      	adds	r3, #1
 8016768:	6123      	str	r3, [r4, #16]
 801676a:	6873      	ldr	r3, [r6, #4]
 801676c:	3b01      	subs	r3, #1
 801676e:	2b00      	cmp	r3, #0
 8016770:	6073      	str	r3, [r6, #4]
 8016772:	f340 80ac 	ble.w	80168ce <_scanf_float+0x22e>
 8016776:	6833      	ldr	r3, [r6, #0]
 8016778:	3301      	adds	r3, #1
 801677a:	6033      	str	r3, [r6, #0]
 801677c:	e7b5      	b.n	80166ea <_scanf_float+0x4a>
 801677e:	2b45      	cmp	r3, #69	; 0x45
 8016780:	f000 8085 	beq.w	801688e <_scanf_float+0x1ee>
 8016784:	2b46      	cmp	r3, #70	; 0x46
 8016786:	d06a      	beq.n	801685e <_scanf_float+0x1be>
 8016788:	2b41      	cmp	r3, #65	; 0x41
 801678a:	d1c1      	bne.n	8016710 <_scanf_float+0x70>
 801678c:	2a01      	cmp	r2, #1
 801678e:	d1bf      	bne.n	8016710 <_scanf_float+0x70>
 8016790:	2202      	movs	r2, #2
 8016792:	e046      	b.n	8016822 <_scanf_float+0x182>
 8016794:	2b65      	cmp	r3, #101	; 0x65
 8016796:	d07a      	beq.n	801688e <_scanf_float+0x1ee>
 8016798:	d818      	bhi.n	80167cc <_scanf_float+0x12c>
 801679a:	2b54      	cmp	r3, #84	; 0x54
 801679c:	d066      	beq.n	801686c <_scanf_float+0x1cc>
 801679e:	d811      	bhi.n	80167c4 <_scanf_float+0x124>
 80167a0:	2b4e      	cmp	r3, #78	; 0x4e
 80167a2:	d1b5      	bne.n	8016710 <_scanf_float+0x70>
 80167a4:	2a00      	cmp	r2, #0
 80167a6:	d146      	bne.n	8016836 <_scanf_float+0x196>
 80167a8:	f1b9 0f00 	cmp.w	r9, #0
 80167ac:	d145      	bne.n	801683a <_scanf_float+0x19a>
 80167ae:	6821      	ldr	r1, [r4, #0]
 80167b0:	f401 60e0 	and.w	r0, r1, #1792	; 0x700
 80167b4:	f5b0 6fe0 	cmp.w	r0, #1792	; 0x700
 80167b8:	d13f      	bne.n	801683a <_scanf_float+0x19a>
 80167ba:	f421 61f0 	bic.w	r1, r1, #1920	; 0x780
 80167be:	6021      	str	r1, [r4, #0]
 80167c0:	2201      	movs	r2, #1
 80167c2:	e02e      	b.n	8016822 <_scanf_float+0x182>
 80167c4:	2b59      	cmp	r3, #89	; 0x59
 80167c6:	d01e      	beq.n	8016806 <_scanf_float+0x166>
 80167c8:	2b61      	cmp	r3, #97	; 0x61
 80167ca:	e7de      	b.n	801678a <_scanf_float+0xea>
 80167cc:	2b6e      	cmp	r3, #110	; 0x6e
 80167ce:	d0e9      	beq.n	80167a4 <_scanf_float+0x104>
 80167d0:	d815      	bhi.n	80167fe <_scanf_float+0x15e>
 80167d2:	2b66      	cmp	r3, #102	; 0x66
 80167d4:	d043      	beq.n	801685e <_scanf_float+0x1be>
 80167d6:	2b69      	cmp	r3, #105	; 0x69
 80167d8:	d19a      	bne.n	8016710 <_scanf_float+0x70>
 80167da:	f1bb 0f00 	cmp.w	fp, #0
 80167de:	d138      	bne.n	8016852 <_scanf_float+0x1b2>
 80167e0:	f1b9 0f00 	cmp.w	r9, #0
 80167e4:	d197      	bne.n	8016716 <_scanf_float+0x76>
 80167e6:	6821      	ldr	r1, [r4, #0]
 80167e8:	f401 60e0 	and.w	r0, r1, #1792	; 0x700
 80167ec:	f5b0 6fe0 	cmp.w	r0, #1792	; 0x700
 80167f0:	d195      	bne.n	801671e <_scanf_float+0x7e>
 80167f2:	f421 61f0 	bic.w	r1, r1, #1920	; 0x780
 80167f6:	6021      	str	r1, [r4, #0]
 80167f8:	f04f 0b01 	mov.w	fp, #1
 80167fc:	e011      	b.n	8016822 <_scanf_float+0x182>
 80167fe:	2b74      	cmp	r3, #116	; 0x74
 8016800:	d034      	beq.n	801686c <_scanf_float+0x1cc>
 8016802:	2b79      	cmp	r3, #121	; 0x79
 8016804:	d184      	bne.n	8016710 <_scanf_float+0x70>
 8016806:	f1bb 0f07 	cmp.w	fp, #7
 801680a:	d181      	bne.n	8016710 <_scanf_float+0x70>
 801680c:	f04f 0b08 	mov.w	fp, #8
 8016810:	e007      	b.n	8016822 <_scanf_float+0x182>
 8016812:	eb12 0f0b 	cmn.w	r2, fp
 8016816:	f47f af7b 	bne.w	8016710 <_scanf_float+0x70>
 801681a:	6821      	ldr	r1, [r4, #0]
 801681c:	f421 71c0 	bic.w	r1, r1, #384	; 0x180
 8016820:	6021      	str	r1, [r4, #0]
 8016822:	702b      	strb	r3, [r5, #0]
 8016824:	3501      	adds	r5, #1
 8016826:	e79a      	b.n	801675e <_scanf_float+0xbe>
 8016828:	6821      	ldr	r1, [r4, #0]
 801682a:	0608      	lsls	r0, r1, #24
 801682c:	f57f af70 	bpl.w	8016710 <_scanf_float+0x70>
 8016830:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 8016834:	e7f4      	b.n	8016820 <_scanf_float+0x180>
 8016836:	2a02      	cmp	r2, #2
 8016838:	d047      	beq.n	80168ca <_scanf_float+0x22a>
 801683a:	f1bb 0f01 	cmp.w	fp, #1
 801683e:	d003      	beq.n	8016848 <_scanf_float+0x1a8>
 8016840:	f1bb 0f04 	cmp.w	fp, #4
 8016844:	f47f af64 	bne.w	8016710 <_scanf_float+0x70>
 8016848:	f10b 0b01 	add.w	fp, fp, #1
 801684c:	fa5f fb8b 	uxtb.w	fp, fp
 8016850:	e7e7      	b.n	8016822 <_scanf_float+0x182>
 8016852:	f1bb 0f03 	cmp.w	fp, #3
 8016856:	d0f7      	beq.n	8016848 <_scanf_float+0x1a8>
 8016858:	f1bb 0f05 	cmp.w	fp, #5
 801685c:	e7f2      	b.n	8016844 <_scanf_float+0x1a4>
 801685e:	f1bb 0f02 	cmp.w	fp, #2
 8016862:	f47f af55 	bne.w	8016710 <_scanf_float+0x70>
 8016866:	f04f 0b03 	mov.w	fp, #3
 801686a:	e7da      	b.n	8016822 <_scanf_float+0x182>
 801686c:	f1bb 0f06 	cmp.w	fp, #6
 8016870:	f47f af4e 	bne.w	8016710 <_scanf_float+0x70>
 8016874:	f04f 0b07 	mov.w	fp, #7
 8016878:	e7d3      	b.n	8016822 <_scanf_float+0x182>
 801687a:	6821      	ldr	r1, [r4, #0]
 801687c:	0588      	lsls	r0, r1, #22
 801687e:	f57f af47 	bpl.w	8016710 <_scanf_float+0x70>
 8016882:	f421 7120 	bic.w	r1, r1, #640	; 0x280
 8016886:	6021      	str	r1, [r4, #0]
 8016888:	f8cd 9008 	str.w	r9, [sp, #8]
 801688c:	e7c9      	b.n	8016822 <_scanf_float+0x182>
 801688e:	6821      	ldr	r1, [r4, #0]
 8016890:	f401 60a0 	and.w	r0, r1, #1280	; 0x500
 8016894:	f5b0 6f80 	cmp.w	r0, #1024	; 0x400
 8016898:	d006      	beq.n	80168a8 <_scanf_float+0x208>
 801689a:	0548      	lsls	r0, r1, #21
 801689c:	f57f af38 	bpl.w	8016710 <_scanf_float+0x70>
 80168a0:	f1b9 0f00 	cmp.w	r9, #0
 80168a4:	f43f af3b 	beq.w	801671e <_scanf_float+0x7e>
 80168a8:	0588      	lsls	r0, r1, #22
 80168aa:	bf58      	it	pl
 80168ac:	9802      	ldrpl	r0, [sp, #8]
 80168ae:	f421 61f0 	bic.w	r1, r1, #1920	; 0x780
 80168b2:	bf58      	it	pl
 80168b4:	eba9 0000 	subpl.w	r0, r9, r0
 80168b8:	f441 71c0 	orr.w	r1, r1, #384	; 0x180
 80168bc:	bf58      	it	pl
 80168be:	e9cd 0503 	strdpl	r0, r5, [sp, #12]
 80168c2:	6021      	str	r1, [r4, #0]
 80168c4:	f04f 0900 	mov.w	r9, #0
 80168c8:	e7ab      	b.n	8016822 <_scanf_float+0x182>
 80168ca:	2203      	movs	r2, #3
 80168cc:	e7a9      	b.n	8016822 <_scanf_float+0x182>
 80168ce:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 80168d2:	9205      	str	r2, [sp, #20]
 80168d4:	4631      	mov	r1, r6
 80168d6:	4638      	mov	r0, r7
 80168d8:	4798      	blx	r3
 80168da:	9a05      	ldr	r2, [sp, #20]
 80168dc:	2800      	cmp	r0, #0
 80168de:	f43f af04 	beq.w	80166ea <_scanf_float+0x4a>
 80168e2:	e715      	b.n	8016710 <_scanf_float+0x70>
 80168e4:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80168e8:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
 80168ec:	4632      	mov	r2, r6
 80168ee:	4638      	mov	r0, r7
 80168f0:	4798      	blx	r3
 80168f2:	6923      	ldr	r3, [r4, #16]
 80168f4:	3b01      	subs	r3, #1
 80168f6:	6123      	str	r3, [r4, #16]
 80168f8:	e715      	b.n	8016726 <_scanf_float+0x86>
 80168fa:	f10b 33ff 	add.w	r3, fp, #4294967295
 80168fe:	2b06      	cmp	r3, #6
 8016900:	d80a      	bhi.n	8016918 <_scanf_float+0x278>
 8016902:	f1bb 0f02 	cmp.w	fp, #2
 8016906:	d966      	bls.n	80169d6 <_scanf_float+0x336>
 8016908:	f1ab 0b03 	sub.w	fp, fp, #3
 801690c:	fa5f fb8b 	uxtb.w	fp, fp
 8016910:	eba5 0b0b 	sub.w	fp, r5, fp
 8016914:	455d      	cmp	r5, fp
 8016916:	d149      	bne.n	80169ac <_scanf_float+0x30c>
 8016918:	6823      	ldr	r3, [r4, #0]
 801691a:	05da      	lsls	r2, r3, #23
 801691c:	d51f      	bpl.n	801695e <_scanf_float+0x2be>
 801691e:	055b      	lsls	r3, r3, #21
 8016920:	d466      	bmi.n	80169f0 <_scanf_float+0x350>
 8016922:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 8016926:	6923      	ldr	r3, [r4, #16]
 8016928:	2965      	cmp	r1, #101	; 0x65
 801692a:	f103 33ff 	add.w	r3, r3, #4294967295
 801692e:	f105 3bff 	add.w	fp, r5, #4294967295
 8016932:	6123      	str	r3, [r4, #16]
 8016934:	d00d      	beq.n	8016952 <_scanf_float+0x2b2>
 8016936:	2945      	cmp	r1, #69	; 0x45
 8016938:	d00b      	beq.n	8016952 <_scanf_float+0x2b2>
 801693a:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 801693e:	4632      	mov	r2, r6
 8016940:	4638      	mov	r0, r7
 8016942:	4798      	blx	r3
 8016944:	6923      	ldr	r3, [r4, #16]
 8016946:	f815 1c02 	ldrb.w	r1, [r5, #-2]
 801694a:	3b01      	subs	r3, #1
 801694c:	f1a5 0b02 	sub.w	fp, r5, #2
 8016950:	6123      	str	r3, [r4, #16]
 8016952:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8016956:	4632      	mov	r2, r6
 8016958:	4638      	mov	r0, r7
 801695a:	4798      	blx	r3
 801695c:	465d      	mov	r5, fp
 801695e:	6826      	ldr	r6, [r4, #0]
 8016960:	f016 0610 	ands.w	r6, r6, #16
 8016964:	d170      	bne.n	8016a48 <_scanf_float+0x3a8>
 8016966:	702e      	strb	r6, [r5, #0]
 8016968:	6823      	ldr	r3, [r4, #0]
 801696a:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 801696e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8016972:	d140      	bne.n	80169f6 <_scanf_float+0x356>
 8016974:	9b02      	ldr	r3, [sp, #8]
 8016976:	eba9 0303 	sub.w	r3, r9, r3
 801697a:	425a      	negs	r2, r3
 801697c:	2b00      	cmp	r3, #0
 801697e:	d147      	bne.n	8016a10 <_scanf_float+0x370>
 8016980:	2200      	movs	r2, #0
 8016982:	4638      	mov	r0, r7
 8016984:	4641      	mov	r1, r8
 8016986:	f000 fe8f 	bl	80176a8 <_strtod_r>
 801698a:	6820      	ldr	r0, [r4, #0]
 801698c:	f8da 3000 	ldr.w	r3, [sl]
 8016990:	f010 0f02 	tst.w	r0, #2
 8016994:	f103 0204 	add.w	r2, r3, #4
 8016998:	f8ca 2000 	str.w	r2, [sl]
 801699c:	d043      	beq.n	8016a26 <_scanf_float+0x386>
 801699e:	681b      	ldr	r3, [r3, #0]
 80169a0:	ed83 0b00 	vstr	d0, [r3]
 80169a4:	68e3      	ldr	r3, [r4, #12]
 80169a6:	3301      	adds	r3, #1
 80169a8:	60e3      	str	r3, [r4, #12]
 80169aa:	e6c0      	b.n	801672e <_scanf_float+0x8e>
 80169ac:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80169b0:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
 80169b4:	4632      	mov	r2, r6
 80169b6:	4638      	mov	r0, r7
 80169b8:	4798      	blx	r3
 80169ba:	6923      	ldr	r3, [r4, #16]
 80169bc:	3b01      	subs	r3, #1
 80169be:	6123      	str	r3, [r4, #16]
 80169c0:	e7a8      	b.n	8016914 <_scanf_float+0x274>
 80169c2:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80169c6:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
 80169ca:	4632      	mov	r2, r6
 80169cc:	4638      	mov	r0, r7
 80169ce:	4798      	blx	r3
 80169d0:	6923      	ldr	r3, [r4, #16]
 80169d2:	3b01      	subs	r3, #1
 80169d4:	6123      	str	r3, [r4, #16]
 80169d6:	4545      	cmp	r5, r8
 80169d8:	d8f3      	bhi.n	80169c2 <_scanf_float+0x322>
 80169da:	e6a7      	b.n	801672c <_scanf_float+0x8c>
 80169dc:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80169e0:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
 80169e4:	4632      	mov	r2, r6
 80169e6:	4638      	mov	r0, r7
 80169e8:	4798      	blx	r3
 80169ea:	6923      	ldr	r3, [r4, #16]
 80169ec:	3b01      	subs	r3, #1
 80169ee:	6123      	str	r3, [r4, #16]
 80169f0:	4545      	cmp	r5, r8
 80169f2:	d8f3      	bhi.n	80169dc <_scanf_float+0x33c>
 80169f4:	e69a      	b.n	801672c <_scanf_float+0x8c>
 80169f6:	9b03      	ldr	r3, [sp, #12]
 80169f8:	2b00      	cmp	r3, #0
 80169fa:	d0c1      	beq.n	8016980 <_scanf_float+0x2e0>
 80169fc:	9904      	ldr	r1, [sp, #16]
 80169fe:	230a      	movs	r3, #10
 8016a00:	4632      	mov	r2, r6
 8016a02:	3101      	adds	r1, #1
 8016a04:	4638      	mov	r0, r7
 8016a06:	f000 fedb 	bl	80177c0 <_strtol_r>
 8016a0a:	9b03      	ldr	r3, [sp, #12]
 8016a0c:	9d04      	ldr	r5, [sp, #16]
 8016a0e:	1ac2      	subs	r2, r0, r3
 8016a10:	f204 136f 	addw	r3, r4, #367	; 0x16f
 8016a14:	429d      	cmp	r5, r3
 8016a16:	bf28      	it	cs
 8016a18:	f504 75b7 	addcs.w	r5, r4, #366	; 0x16e
 8016a1c:	490b      	ldr	r1, [pc, #44]	; (8016a4c <_scanf_float+0x3ac>)
 8016a1e:	4628      	mov	r0, r5
 8016a20:	f000 f82c 	bl	8016a7c <siprintf>
 8016a24:	e7ac      	b.n	8016980 <_scanf_float+0x2e0>
 8016a26:	f010 0004 	ands.w	r0, r0, #4
 8016a2a:	d1b8      	bne.n	801699e <_scanf_float+0x2fe>
 8016a2c:	eeb4 0b40 	vcmp.f64	d0, d0
 8016a30:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8016a34:	681d      	ldr	r5, [r3, #0]
 8016a36:	d704      	bvc.n	8016a42 <_scanf_float+0x3a2>
 8016a38:	f000 f81a 	bl	8016a70 <nanf>
 8016a3c:	ed85 0a00 	vstr	s0, [r5]
 8016a40:	e7b0      	b.n	80169a4 <_scanf_float+0x304>
 8016a42:	eeb7 0bc0 	vcvt.f32.f64	s0, d0
 8016a46:	e7f9      	b.n	8016a3c <_scanf_float+0x39c>
 8016a48:	2600      	movs	r6, #0
 8016a4a:	e670      	b.n	801672e <_scanf_float+0x8e>
 8016a4c:	0801c21c 	.word	0x0801c21c

08016a50 <_sbrk_r>:
 8016a50:	b538      	push	{r3, r4, r5, lr}
 8016a52:	4c06      	ldr	r4, [pc, #24]	; (8016a6c <_sbrk_r+0x1c>)
 8016a54:	2300      	movs	r3, #0
 8016a56:	4605      	mov	r5, r0
 8016a58:	4608      	mov	r0, r1
 8016a5a:	6023      	str	r3, [r4, #0]
 8016a5c:	f7fd fc48 	bl	80142f0 <_sbrk>
 8016a60:	1c43      	adds	r3, r0, #1
 8016a62:	d102      	bne.n	8016a6a <_sbrk_r+0x1a>
 8016a64:	6823      	ldr	r3, [r4, #0]
 8016a66:	b103      	cbz	r3, 8016a6a <_sbrk_r+0x1a>
 8016a68:	602b      	str	r3, [r5, #0]
 8016a6a:	bd38      	pop	{r3, r4, r5, pc}
 8016a6c:	2400f304 	.word	0x2400f304

08016a70 <nanf>:
 8016a70:	ed9f 0a01 	vldr	s0, [pc, #4]	; 8016a78 <nanf+0x8>
 8016a74:	4770      	bx	lr
 8016a76:	bf00      	nop
 8016a78:	7fc00000 	.word	0x7fc00000

08016a7c <siprintf>:
 8016a7c:	b40e      	push	{r1, r2, r3}
 8016a7e:	b500      	push	{lr}
 8016a80:	b09c      	sub	sp, #112	; 0x70
 8016a82:	ab1d      	add	r3, sp, #116	; 0x74
 8016a84:	9002      	str	r0, [sp, #8]
 8016a86:	9006      	str	r0, [sp, #24]
 8016a88:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8016a8c:	4809      	ldr	r0, [pc, #36]	; (8016ab4 <siprintf+0x38>)
 8016a8e:	9107      	str	r1, [sp, #28]
 8016a90:	9104      	str	r1, [sp, #16]
 8016a92:	4909      	ldr	r1, [pc, #36]	; (8016ab8 <siprintf+0x3c>)
 8016a94:	f853 2b04 	ldr.w	r2, [r3], #4
 8016a98:	9105      	str	r1, [sp, #20]
 8016a9a:	6800      	ldr	r0, [r0, #0]
 8016a9c:	9301      	str	r3, [sp, #4]
 8016a9e:	a902      	add	r1, sp, #8
 8016aa0:	f002 fc30 	bl	8019304 <_svfiprintf_r>
 8016aa4:	9b02      	ldr	r3, [sp, #8]
 8016aa6:	2200      	movs	r2, #0
 8016aa8:	701a      	strb	r2, [r3, #0]
 8016aaa:	b01c      	add	sp, #112	; 0x70
 8016aac:	f85d eb04 	ldr.w	lr, [sp], #4
 8016ab0:	b003      	add	sp, #12
 8016ab2:	4770      	bx	lr
 8016ab4:	24000034 	.word	0x24000034
 8016ab8:	ffff0208 	.word	0xffff0208

08016abc <strncmp>:
 8016abc:	b510      	push	{r4, lr}
 8016abe:	b16a      	cbz	r2, 8016adc <strncmp+0x20>
 8016ac0:	3901      	subs	r1, #1
 8016ac2:	1884      	adds	r4, r0, r2
 8016ac4:	f810 3b01 	ldrb.w	r3, [r0], #1
 8016ac8:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 8016acc:	4293      	cmp	r3, r2
 8016ace:	d103      	bne.n	8016ad8 <strncmp+0x1c>
 8016ad0:	42a0      	cmp	r0, r4
 8016ad2:	d001      	beq.n	8016ad8 <strncmp+0x1c>
 8016ad4:	2b00      	cmp	r3, #0
 8016ad6:	d1f5      	bne.n	8016ac4 <strncmp+0x8>
 8016ad8:	1a98      	subs	r0, r3, r2
 8016ada:	bd10      	pop	{r4, pc}
 8016adc:	4610      	mov	r0, r2
 8016ade:	e7fc      	b.n	8016ada <strncmp+0x1e>

08016ae0 <sulp>:
 8016ae0:	b570      	push	{r4, r5, r6, lr}
 8016ae2:	4604      	mov	r4, r0
 8016ae4:	460d      	mov	r5, r1
 8016ae6:	4616      	mov	r6, r2
 8016ae8:	ec45 4b10 	vmov	d0, r4, r5
 8016aec:	f002 fa6e 	bl	8018fcc <__ulp>
 8016af0:	b17e      	cbz	r6, 8016b12 <sulp+0x32>
 8016af2:	f3c5 530a 	ubfx	r3, r5, #20, #11
 8016af6:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8016afa:	2b00      	cmp	r3, #0
 8016afc:	dd09      	ble.n	8016b12 <sulp+0x32>
 8016afe:	051b      	lsls	r3, r3, #20
 8016b00:	f103 517f 	add.w	r1, r3, #1069547520	; 0x3fc00000
 8016b04:	2000      	movs	r0, #0
 8016b06:	f501 1140 	add.w	r1, r1, #3145728	; 0x300000
 8016b0a:	ec41 0b17 	vmov	d7, r0, r1
 8016b0e:	ee20 0b07 	vmul.f64	d0, d0, d7
 8016b12:	bd70      	pop	{r4, r5, r6, pc}
 8016b14:	0000      	movs	r0, r0
	...

08016b18 <_strtod_l>:
 8016b18:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016b1c:	ed2d 8b0c 	vpush	{d8-d13}
 8016b20:	4698      	mov	r8, r3
 8016b22:	b09d      	sub	sp, #116	; 0x74
 8016b24:	2300      	movs	r3, #0
 8016b26:	4604      	mov	r4, r0
 8016b28:	4640      	mov	r0, r8
 8016b2a:	460e      	mov	r6, r1
 8016b2c:	9214      	str	r2, [sp, #80]	; 0x50
 8016b2e:	9318      	str	r3, [sp, #96]	; 0x60
 8016b30:	f001 ff5b 	bl	80189ea <__localeconv_l>
 8016b34:	4681      	mov	r9, r0
 8016b36:	6800      	ldr	r0, [r0, #0]
 8016b38:	f7e9 fbd2 	bl	80002e0 <strlen>
 8016b3c:	f04f 0a00 	mov.w	sl, #0
 8016b40:	4607      	mov	r7, r0
 8016b42:	f04f 0b00 	mov.w	fp, #0
 8016b46:	9617      	str	r6, [sp, #92]	; 0x5c
 8016b48:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8016b4a:	781a      	ldrb	r2, [r3, #0]
 8016b4c:	2a0d      	cmp	r2, #13
 8016b4e:	d834      	bhi.n	8016bba <_strtod_l+0xa2>
 8016b50:	2a09      	cmp	r2, #9
 8016b52:	d238      	bcs.n	8016bc6 <_strtod_l+0xae>
 8016b54:	2a00      	cmp	r2, #0
 8016b56:	d040      	beq.n	8016bda <_strtod_l+0xc2>
 8016b58:	2300      	movs	r3, #0
 8016b5a:	930d      	str	r3, [sp, #52]	; 0x34
 8016b5c:	9d17      	ldr	r5, [sp, #92]	; 0x5c
 8016b5e:	782b      	ldrb	r3, [r5, #0]
 8016b60:	2b30      	cmp	r3, #48	; 0x30
 8016b62:	f040 80b3 	bne.w	8016ccc <_strtod_l+0x1b4>
 8016b66:	786b      	ldrb	r3, [r5, #1]
 8016b68:	2b58      	cmp	r3, #88	; 0x58
 8016b6a:	d001      	beq.n	8016b70 <_strtod_l+0x58>
 8016b6c:	2b78      	cmp	r3, #120	; 0x78
 8016b6e:	d169      	bne.n	8016c44 <_strtod_l+0x12c>
 8016b70:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8016b72:	9301      	str	r3, [sp, #4]
 8016b74:	ab18      	add	r3, sp, #96	; 0x60
 8016b76:	9300      	str	r3, [sp, #0]
 8016b78:	f8cd 8008 	str.w	r8, [sp, #8]
 8016b7c:	ab19      	add	r3, sp, #100	; 0x64
 8016b7e:	4a8f      	ldr	r2, [pc, #572]	; (8016dbc <_strtod_l+0x2a4>)
 8016b80:	a917      	add	r1, sp, #92	; 0x5c
 8016b82:	4620      	mov	r0, r4
 8016b84:	f001 fc57 	bl	8018436 <__gethex>
 8016b88:	f010 0607 	ands.w	r6, r0, #7
 8016b8c:	4607      	mov	r7, r0
 8016b8e:	d005      	beq.n	8016b9c <_strtod_l+0x84>
 8016b90:	2e06      	cmp	r6, #6
 8016b92:	d12c      	bne.n	8016bee <_strtod_l+0xd6>
 8016b94:	3501      	adds	r5, #1
 8016b96:	2300      	movs	r3, #0
 8016b98:	9517      	str	r5, [sp, #92]	; 0x5c
 8016b9a:	930d      	str	r3, [sp, #52]	; 0x34
 8016b9c:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8016b9e:	2b00      	cmp	r3, #0
 8016ba0:	f040 855e 	bne.w	8017660 <_strtod_l+0xb48>
 8016ba4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8016ba6:	b1eb      	cbz	r3, 8016be4 <_strtod_l+0xcc>
 8016ba8:	ec4b ab17 	vmov	d7, sl, fp
 8016bac:	eeb1 0b47 	vneg.f64	d0, d7
 8016bb0:	b01d      	add	sp, #116	; 0x74
 8016bb2:	ecbd 8b0c 	vpop	{d8-d13}
 8016bb6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8016bba:	2a2b      	cmp	r2, #43	; 0x2b
 8016bbc:	d015      	beq.n	8016bea <_strtod_l+0xd2>
 8016bbe:	2a2d      	cmp	r2, #45	; 0x2d
 8016bc0:	d004      	beq.n	8016bcc <_strtod_l+0xb4>
 8016bc2:	2a20      	cmp	r2, #32
 8016bc4:	d1c8      	bne.n	8016b58 <_strtod_l+0x40>
 8016bc6:	3301      	adds	r3, #1
 8016bc8:	9317      	str	r3, [sp, #92]	; 0x5c
 8016bca:	e7bd      	b.n	8016b48 <_strtod_l+0x30>
 8016bcc:	2201      	movs	r2, #1
 8016bce:	920d      	str	r2, [sp, #52]	; 0x34
 8016bd0:	1c5a      	adds	r2, r3, #1
 8016bd2:	9217      	str	r2, [sp, #92]	; 0x5c
 8016bd4:	785b      	ldrb	r3, [r3, #1]
 8016bd6:	2b00      	cmp	r3, #0
 8016bd8:	d1c0      	bne.n	8016b5c <_strtod_l+0x44>
 8016bda:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8016bdc:	9617      	str	r6, [sp, #92]	; 0x5c
 8016bde:	2b00      	cmp	r3, #0
 8016be0:	f040 853c 	bne.w	801765c <_strtod_l+0xb44>
 8016be4:	ec4b ab10 	vmov	d0, sl, fp
 8016be8:	e7e2      	b.n	8016bb0 <_strtod_l+0x98>
 8016bea:	2200      	movs	r2, #0
 8016bec:	e7ef      	b.n	8016bce <_strtod_l+0xb6>
 8016bee:	9a18      	ldr	r2, [sp, #96]	; 0x60
 8016bf0:	b13a      	cbz	r2, 8016c02 <_strtod_l+0xea>
 8016bf2:	2135      	movs	r1, #53	; 0x35
 8016bf4:	a81a      	add	r0, sp, #104	; 0x68
 8016bf6:	f002 fae2 	bl	80191be <__copybits>
 8016bfa:	9918      	ldr	r1, [sp, #96]	; 0x60
 8016bfc:	4620      	mov	r0, r4
 8016bfe:	f001 ff4d 	bl	8018a9c <_Bfree>
 8016c02:	3e01      	subs	r6, #1
 8016c04:	2e04      	cmp	r6, #4
 8016c06:	d806      	bhi.n	8016c16 <_strtod_l+0xfe>
 8016c08:	e8df f006 	tbb	[pc, r6]
 8016c0c:	1714030a 	.word	0x1714030a
 8016c10:	0a          	.byte	0x0a
 8016c11:	00          	.byte	0x00
 8016c12:	e9dd ab1a 	ldrd	sl, fp, [sp, #104]	; 0x68
 8016c16:	073b      	lsls	r3, r7, #28
 8016c18:	d5c0      	bpl.n	8016b9c <_strtod_l+0x84>
 8016c1a:	f04b 4b00 	orr.w	fp, fp, #2147483648	; 0x80000000
 8016c1e:	e7bd      	b.n	8016b9c <_strtod_l+0x84>
 8016c20:	e9dd a31a 	ldrd	sl, r3, [sp, #104]	; 0x68
 8016c24:	9a19      	ldr	r2, [sp, #100]	; 0x64
 8016c26:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8016c2a:	f202 4233 	addw	r2, r2, #1075	; 0x433
 8016c2e:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 8016c32:	e7f0      	b.n	8016c16 <_strtod_l+0xfe>
 8016c34:	f8df b188 	ldr.w	fp, [pc, #392]	; 8016dc0 <_strtod_l+0x2a8>
 8016c38:	e7ed      	b.n	8016c16 <_strtod_l+0xfe>
 8016c3a:	f06f 4b00 	mvn.w	fp, #2147483648	; 0x80000000
 8016c3e:	f04f 3aff 	mov.w	sl, #4294967295
 8016c42:	e7e8      	b.n	8016c16 <_strtod_l+0xfe>
 8016c44:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8016c46:	1c5a      	adds	r2, r3, #1
 8016c48:	9217      	str	r2, [sp, #92]	; 0x5c
 8016c4a:	785b      	ldrb	r3, [r3, #1]
 8016c4c:	2b30      	cmp	r3, #48	; 0x30
 8016c4e:	d0f9      	beq.n	8016c44 <_strtod_l+0x12c>
 8016c50:	2b00      	cmp	r3, #0
 8016c52:	d0a3      	beq.n	8016b9c <_strtod_l+0x84>
 8016c54:	2301      	movs	r3, #1
 8016c56:	930a      	str	r3, [sp, #40]	; 0x28
 8016c58:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8016c5a:	930c      	str	r3, [sp, #48]	; 0x30
 8016c5c:	2300      	movs	r3, #0
 8016c5e:	9306      	str	r3, [sp, #24]
 8016c60:	9308      	str	r3, [sp, #32]
 8016c62:	461d      	mov	r5, r3
 8016c64:	220a      	movs	r2, #10
 8016c66:	9817      	ldr	r0, [sp, #92]	; 0x5c
 8016c68:	f890 8000 	ldrb.w	r8, [r0]
 8016c6c:	f1a8 0330 	sub.w	r3, r8, #48	; 0x30
 8016c70:	b2d9      	uxtb	r1, r3
 8016c72:	2909      	cmp	r1, #9
 8016c74:	d92c      	bls.n	8016cd0 <_strtod_l+0x1b8>
 8016c76:	463a      	mov	r2, r7
 8016c78:	f8d9 1000 	ldr.w	r1, [r9]
 8016c7c:	f7ff ff1e 	bl	8016abc <strncmp>
 8016c80:	2800      	cmp	r0, #0
 8016c82:	d035      	beq.n	8016cf0 <_strtod_l+0x1d8>
 8016c84:	2000      	movs	r0, #0
 8016c86:	4642      	mov	r2, r8
 8016c88:	462b      	mov	r3, r5
 8016c8a:	4601      	mov	r1, r0
 8016c8c:	9004      	str	r0, [sp, #16]
 8016c8e:	2a65      	cmp	r2, #101	; 0x65
 8016c90:	d001      	beq.n	8016c96 <_strtod_l+0x17e>
 8016c92:	2a45      	cmp	r2, #69	; 0x45
 8016c94:	d117      	bne.n	8016cc6 <_strtod_l+0x1ae>
 8016c96:	b923      	cbnz	r3, 8016ca2 <_strtod_l+0x18a>
 8016c98:	b910      	cbnz	r0, 8016ca0 <_strtod_l+0x188>
 8016c9a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8016c9c:	2b00      	cmp	r3, #0
 8016c9e:	d09c      	beq.n	8016bda <_strtod_l+0xc2>
 8016ca0:	2300      	movs	r3, #0
 8016ca2:	9e17      	ldr	r6, [sp, #92]	; 0x5c
 8016ca4:	1c72      	adds	r2, r6, #1
 8016ca6:	9217      	str	r2, [sp, #92]	; 0x5c
 8016ca8:	7872      	ldrb	r2, [r6, #1]
 8016caa:	2a2b      	cmp	r2, #43	; 0x2b
 8016cac:	f000 8082 	beq.w	8016db4 <_strtod_l+0x29c>
 8016cb0:	2a2d      	cmp	r2, #45	; 0x2d
 8016cb2:	d079      	beq.n	8016da8 <_strtod_l+0x290>
 8016cb4:	f04f 0e00 	mov.w	lr, #0
 8016cb8:	f1a2 0c30 	sub.w	ip, r2, #48	; 0x30
 8016cbc:	f1bc 0f09 	cmp.w	ip, #9
 8016cc0:	f240 8086 	bls.w	8016dd0 <_strtod_l+0x2b8>
 8016cc4:	9617      	str	r6, [sp, #92]	; 0x5c
 8016cc6:	f04f 0800 	mov.w	r8, #0
 8016cca:	e0a8      	b.n	8016e1e <_strtod_l+0x306>
 8016ccc:	2300      	movs	r3, #0
 8016cce:	e7c2      	b.n	8016c56 <_strtod_l+0x13e>
 8016cd0:	2d08      	cmp	r5, #8
 8016cd2:	bfd5      	itete	le
 8016cd4:	9908      	ldrle	r1, [sp, #32]
 8016cd6:	9906      	ldrgt	r1, [sp, #24]
 8016cd8:	fb02 3301 	mlale	r3, r2, r1, r3
 8016cdc:	fb02 3301 	mlagt	r3, r2, r1, r3
 8016ce0:	f100 0001 	add.w	r0, r0, #1
 8016ce4:	bfd4      	ite	le
 8016ce6:	9308      	strle	r3, [sp, #32]
 8016ce8:	9306      	strgt	r3, [sp, #24]
 8016cea:	3501      	adds	r5, #1
 8016cec:	9017      	str	r0, [sp, #92]	; 0x5c
 8016cee:	e7ba      	b.n	8016c66 <_strtod_l+0x14e>
 8016cf0:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8016cf2:	19da      	adds	r2, r3, r7
 8016cf4:	9217      	str	r2, [sp, #92]	; 0x5c
 8016cf6:	5dda      	ldrb	r2, [r3, r7]
 8016cf8:	2d00      	cmp	r5, #0
 8016cfa:	d038      	beq.n	8016d6e <_strtod_l+0x256>
 8016cfc:	4601      	mov	r1, r0
 8016cfe:	462b      	mov	r3, r5
 8016d00:	f1a2 0730 	sub.w	r7, r2, #48	; 0x30
 8016d04:	2f09      	cmp	r7, #9
 8016d06:	d913      	bls.n	8016d30 <_strtod_l+0x218>
 8016d08:	2701      	movs	r7, #1
 8016d0a:	9704      	str	r7, [sp, #16]
 8016d0c:	e7bf      	b.n	8016c8e <_strtod_l+0x176>
 8016d0e:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8016d10:	1c5a      	adds	r2, r3, #1
 8016d12:	9217      	str	r2, [sp, #92]	; 0x5c
 8016d14:	785a      	ldrb	r2, [r3, #1]
 8016d16:	3001      	adds	r0, #1
 8016d18:	2a30      	cmp	r2, #48	; 0x30
 8016d1a:	d0f8      	beq.n	8016d0e <_strtod_l+0x1f6>
 8016d1c:	f1a2 0331 	sub.w	r3, r2, #49	; 0x31
 8016d20:	2b08      	cmp	r3, #8
 8016d22:	f200 84a2 	bhi.w	801766a <_strtod_l+0xb52>
 8016d26:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8016d28:	930c      	str	r3, [sp, #48]	; 0x30
 8016d2a:	4601      	mov	r1, r0
 8016d2c:	2000      	movs	r0, #0
 8016d2e:	4603      	mov	r3, r0
 8016d30:	f1b2 0830 	subs.w	r8, r2, #48	; 0x30
 8016d34:	f100 0701 	add.w	r7, r0, #1
 8016d38:	d013      	beq.n	8016d62 <_strtod_l+0x24a>
 8016d3a:	4439      	add	r1, r7
 8016d3c:	eb00 0e03 	add.w	lr, r0, r3
 8016d40:	461f      	mov	r7, r3
 8016d42:	f04f 0c0a 	mov.w	ip, #10
 8016d46:	45be      	cmp	lr, r7
 8016d48:	d113      	bne.n	8016d72 <_strtod_l+0x25a>
 8016d4a:	181f      	adds	r7, r3, r0
 8016d4c:	2f08      	cmp	r7, #8
 8016d4e:	f103 0301 	add.w	r3, r3, #1
 8016d52:	4403      	add	r3, r0
 8016d54:	dc1d      	bgt.n	8016d92 <_strtod_l+0x27a>
 8016d56:	9a08      	ldr	r2, [sp, #32]
 8016d58:	200a      	movs	r0, #10
 8016d5a:	fb00 8202 	mla	r2, r0, r2, r8
 8016d5e:	9208      	str	r2, [sp, #32]
 8016d60:	2700      	movs	r7, #0
 8016d62:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8016d64:	1c50      	adds	r0, r2, #1
 8016d66:	9017      	str	r0, [sp, #92]	; 0x5c
 8016d68:	7852      	ldrb	r2, [r2, #1]
 8016d6a:	4638      	mov	r0, r7
 8016d6c:	e7c8      	b.n	8016d00 <_strtod_l+0x1e8>
 8016d6e:	4628      	mov	r0, r5
 8016d70:	e7d2      	b.n	8016d18 <_strtod_l+0x200>
 8016d72:	2f08      	cmp	r7, #8
 8016d74:	f107 0701 	add.w	r7, r7, #1
 8016d78:	dc04      	bgt.n	8016d84 <_strtod_l+0x26c>
 8016d7a:	9a08      	ldr	r2, [sp, #32]
 8016d7c:	fb0c f202 	mul.w	r2, ip, r2
 8016d80:	9208      	str	r2, [sp, #32]
 8016d82:	e7e0      	b.n	8016d46 <_strtod_l+0x22e>
 8016d84:	2f10      	cmp	r7, #16
 8016d86:	bfde      	ittt	le
 8016d88:	9a06      	ldrle	r2, [sp, #24]
 8016d8a:	fb0c f202 	mulle.w	r2, ip, r2
 8016d8e:	9206      	strle	r2, [sp, #24]
 8016d90:	e7d9      	b.n	8016d46 <_strtod_l+0x22e>
 8016d92:	2b10      	cmp	r3, #16
 8016d94:	bfdf      	itttt	le
 8016d96:	9a06      	ldrle	r2, [sp, #24]
 8016d98:	200a      	movle	r0, #10
 8016d9a:	fb00 8202 	mlale	r2, r0, r2, r8
 8016d9e:	9206      	strle	r2, [sp, #24]
 8016da0:	e7de      	b.n	8016d60 <_strtod_l+0x248>
 8016da2:	2301      	movs	r3, #1
 8016da4:	9304      	str	r3, [sp, #16]
 8016da6:	e777      	b.n	8016c98 <_strtod_l+0x180>
 8016da8:	f04f 0e01 	mov.w	lr, #1
 8016dac:	1cb2      	adds	r2, r6, #2
 8016dae:	9217      	str	r2, [sp, #92]	; 0x5c
 8016db0:	78b2      	ldrb	r2, [r6, #2]
 8016db2:	e781      	b.n	8016cb8 <_strtod_l+0x1a0>
 8016db4:	f04f 0e00 	mov.w	lr, #0
 8016db8:	e7f8      	b.n	8016dac <_strtod_l+0x294>
 8016dba:	bf00      	nop
 8016dbc:	0801c224 	.word	0x0801c224
 8016dc0:	7ff00000 	.word	0x7ff00000
 8016dc4:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8016dc6:	f102 0c01 	add.w	ip, r2, #1
 8016dca:	f8cd c05c 	str.w	ip, [sp, #92]	; 0x5c
 8016dce:	7852      	ldrb	r2, [r2, #1]
 8016dd0:	2a30      	cmp	r2, #48	; 0x30
 8016dd2:	d0f7      	beq.n	8016dc4 <_strtod_l+0x2ac>
 8016dd4:	f1a2 0c31 	sub.w	ip, r2, #49	; 0x31
 8016dd8:	f1bc 0f08 	cmp.w	ip, #8
 8016ddc:	f63f af73 	bhi.w	8016cc6 <_strtod_l+0x1ae>
 8016de0:	f1a2 0830 	sub.w	r8, r2, #48	; 0x30
 8016de4:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8016de6:	920e      	str	r2, [sp, #56]	; 0x38
 8016de8:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8016dea:	f102 0c01 	add.w	ip, r2, #1
 8016dee:	f8cd c05c 	str.w	ip, [sp, #92]	; 0x5c
 8016df2:	7852      	ldrb	r2, [r2, #1]
 8016df4:	f1a2 0930 	sub.w	r9, r2, #48	; 0x30
 8016df8:	f1b9 0f09 	cmp.w	r9, #9
 8016dfc:	d939      	bls.n	8016e72 <_strtod_l+0x35a>
 8016dfe:	9f0e      	ldr	r7, [sp, #56]	; 0x38
 8016e00:	ebac 0c07 	sub.w	ip, ip, r7
 8016e04:	f1bc 0f08 	cmp.w	ip, #8
 8016e08:	f644 6c1f 	movw	ip, #19999	; 0x4e1f
 8016e0c:	dc37      	bgt.n	8016e7e <_strtod_l+0x366>
 8016e0e:	45e0      	cmp	r8, ip
 8016e10:	bfa8      	it	ge
 8016e12:	46e0      	movge	r8, ip
 8016e14:	f1be 0f00 	cmp.w	lr, #0
 8016e18:	d001      	beq.n	8016e1e <_strtod_l+0x306>
 8016e1a:	f1c8 0800 	rsb	r8, r8, #0
 8016e1e:	2b00      	cmp	r3, #0
 8016e20:	d151      	bne.n	8016ec6 <_strtod_l+0x3ae>
 8016e22:	2800      	cmp	r0, #0
 8016e24:	f47f aeba 	bne.w	8016b9c <_strtod_l+0x84>
 8016e28:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8016e2a:	2b00      	cmp	r3, #0
 8016e2c:	f47f aeb6 	bne.w	8016b9c <_strtod_l+0x84>
 8016e30:	9b04      	ldr	r3, [sp, #16]
 8016e32:	2b00      	cmp	r3, #0
 8016e34:	f47f aed1 	bne.w	8016bda <_strtod_l+0xc2>
 8016e38:	2a4e      	cmp	r2, #78	; 0x4e
 8016e3a:	d027      	beq.n	8016e8c <_strtod_l+0x374>
 8016e3c:	dc21      	bgt.n	8016e82 <_strtod_l+0x36a>
 8016e3e:	2a49      	cmp	r2, #73	; 0x49
 8016e40:	f47f aecb 	bne.w	8016bda <_strtod_l+0xc2>
 8016e44:	499a      	ldr	r1, [pc, #616]	; (80170b0 <_strtod_l+0x598>)
 8016e46:	a817      	add	r0, sp, #92	; 0x5c
 8016e48:	f001 fd28 	bl	801889c <__match>
 8016e4c:	2800      	cmp	r0, #0
 8016e4e:	f43f aec4 	beq.w	8016bda <_strtod_l+0xc2>
 8016e52:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8016e54:	4997      	ldr	r1, [pc, #604]	; (80170b4 <_strtod_l+0x59c>)
 8016e56:	3b01      	subs	r3, #1
 8016e58:	a817      	add	r0, sp, #92	; 0x5c
 8016e5a:	9317      	str	r3, [sp, #92]	; 0x5c
 8016e5c:	f001 fd1e 	bl	801889c <__match>
 8016e60:	b910      	cbnz	r0, 8016e68 <_strtod_l+0x350>
 8016e62:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8016e64:	3301      	adds	r3, #1
 8016e66:	9317      	str	r3, [sp, #92]	; 0x5c
 8016e68:	f8df b260 	ldr.w	fp, [pc, #608]	; 80170cc <_strtod_l+0x5b4>
 8016e6c:	f04f 0a00 	mov.w	sl, #0
 8016e70:	e694      	b.n	8016b9c <_strtod_l+0x84>
 8016e72:	270a      	movs	r7, #10
 8016e74:	fb07 2808 	mla	r8, r7, r8, r2
 8016e78:	f1a8 0830 	sub.w	r8, r8, #48	; 0x30
 8016e7c:	e7b4      	b.n	8016de8 <_strtod_l+0x2d0>
 8016e7e:	46e0      	mov	r8, ip
 8016e80:	e7c8      	b.n	8016e14 <_strtod_l+0x2fc>
 8016e82:	2a69      	cmp	r2, #105	; 0x69
 8016e84:	d0de      	beq.n	8016e44 <_strtod_l+0x32c>
 8016e86:	2a6e      	cmp	r2, #110	; 0x6e
 8016e88:	f47f aea7 	bne.w	8016bda <_strtod_l+0xc2>
 8016e8c:	498a      	ldr	r1, [pc, #552]	; (80170b8 <_strtod_l+0x5a0>)
 8016e8e:	a817      	add	r0, sp, #92	; 0x5c
 8016e90:	f001 fd04 	bl	801889c <__match>
 8016e94:	2800      	cmp	r0, #0
 8016e96:	f43f aea0 	beq.w	8016bda <_strtod_l+0xc2>
 8016e9a:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8016e9c:	781b      	ldrb	r3, [r3, #0]
 8016e9e:	2b28      	cmp	r3, #40	; 0x28
 8016ea0:	d10e      	bne.n	8016ec0 <_strtod_l+0x3a8>
 8016ea2:	aa1a      	add	r2, sp, #104	; 0x68
 8016ea4:	4985      	ldr	r1, [pc, #532]	; (80170bc <_strtod_l+0x5a4>)
 8016ea6:	a817      	add	r0, sp, #92	; 0x5c
 8016ea8:	f001 fd0c 	bl	80188c4 <__hexnan>
 8016eac:	2805      	cmp	r0, #5
 8016eae:	d107      	bne.n	8016ec0 <_strtod_l+0x3a8>
 8016eb0:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8016eb2:	f8dd a068 	ldr.w	sl, [sp, #104]	; 0x68
 8016eb6:	f043 4bff 	orr.w	fp, r3, #2139095040	; 0x7f800000
 8016eba:	f44b 0be0 	orr.w	fp, fp, #7340032	; 0x700000
 8016ebe:	e66d      	b.n	8016b9c <_strtod_l+0x84>
 8016ec0:	f8df b20c 	ldr.w	fp, [pc, #524]	; 80170d0 <_strtod_l+0x5b8>
 8016ec4:	e7d2      	b.n	8016e6c <_strtod_l+0x354>
 8016ec6:	eddd 7a08 	vldr	s15, [sp, #32]
 8016eca:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 8016ece:	eba8 0201 	sub.w	r2, r8, r1
 8016ed2:	2d00      	cmp	r5, #0
 8016ed4:	bf08      	it	eq
 8016ed6:	461d      	moveq	r5, r3
 8016ed8:	2b10      	cmp	r3, #16
 8016eda:	9204      	str	r2, [sp, #16]
 8016edc:	ed8d 7b0a 	vstr	d7, [sp, #40]	; 0x28
 8016ee0:	461a      	mov	r2, r3
 8016ee2:	bfa8      	it	ge
 8016ee4:	2210      	movge	r2, #16
 8016ee6:	2b09      	cmp	r3, #9
 8016ee8:	e9dd ab0a 	ldrd	sl, fp, [sp, #40]	; 0x28
 8016eec:	dc14      	bgt.n	8016f18 <_strtod_l+0x400>
 8016eee:	9904      	ldr	r1, [sp, #16]
 8016ef0:	2900      	cmp	r1, #0
 8016ef2:	f43f ae53 	beq.w	8016b9c <_strtod_l+0x84>
 8016ef6:	9904      	ldr	r1, [sp, #16]
 8016ef8:	dd72      	ble.n	8016fe0 <_strtod_l+0x4c8>
 8016efa:	2916      	cmp	r1, #22
 8016efc:	dc5a      	bgt.n	8016fb4 <_strtod_l+0x49c>
 8016efe:	4970      	ldr	r1, [pc, #448]	; (80170c0 <_strtod_l+0x5a8>)
 8016f00:	9b04      	ldr	r3, [sp, #16]
 8016f02:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8016f06:	ed91 7b00 	vldr	d7, [r1]
 8016f0a:	ec4b ab16 	vmov	d6, sl, fp
 8016f0e:	ee27 7b06 	vmul.f64	d7, d7, d6
 8016f12:	ec5b ab17 	vmov	sl, fp, d7
 8016f16:	e641      	b.n	8016b9c <_strtod_l+0x84>
 8016f18:	4969      	ldr	r1, [pc, #420]	; (80170c0 <_strtod_l+0x5a8>)
 8016f1a:	eddd 7a06 	vldr	s15, [sp, #24]
 8016f1e:	eb01 01c2 	add.w	r1, r1, r2, lsl #3
 8016f22:	ed11 6b12 	vldr	d6, [r1, #-72]	; 0xffffffb8
 8016f26:	ed9d 5b0a 	vldr	d5, [sp, #40]	; 0x28
 8016f2a:	2b0f      	cmp	r3, #15
 8016f2c:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 8016f30:	eea5 7b06 	vfma.f64	d7, d5, d6
 8016f34:	ec5b ab17 	vmov	sl, fp, d7
 8016f38:	ddd9      	ble.n	8016eee <_strtod_l+0x3d6>
 8016f3a:	9904      	ldr	r1, [sp, #16]
 8016f3c:	1a9a      	subs	r2, r3, r2
 8016f3e:	440a      	add	r2, r1
 8016f40:	2a00      	cmp	r2, #0
 8016f42:	f340 8096 	ble.w	8017072 <_strtod_l+0x55a>
 8016f46:	f012 000f 	ands.w	r0, r2, #15
 8016f4a:	d00a      	beq.n	8016f62 <_strtod_l+0x44a>
 8016f4c:	495c      	ldr	r1, [pc, #368]	; (80170c0 <_strtod_l+0x5a8>)
 8016f4e:	eb01 01c0 	add.w	r1, r1, r0, lsl #3
 8016f52:	ed91 7b00 	vldr	d7, [r1]
 8016f56:	ec4b ab16 	vmov	d6, sl, fp
 8016f5a:	ee27 7b06 	vmul.f64	d7, d7, d6
 8016f5e:	ec5b ab17 	vmov	sl, fp, d7
 8016f62:	f032 020f 	bics.w	r2, r2, #15
 8016f66:	d072      	beq.n	801704e <_strtod_l+0x536>
 8016f68:	f5b2 7f9a 	cmp.w	r2, #308	; 0x134
 8016f6c:	dd45      	ble.n	8016ffa <_strtod_l+0x4e2>
 8016f6e:	2500      	movs	r5, #0
 8016f70:	46a8      	mov	r8, r5
 8016f72:	9506      	str	r5, [sp, #24]
 8016f74:	46a9      	mov	r9, r5
 8016f76:	2322      	movs	r3, #34	; 0x22
 8016f78:	f8df b150 	ldr.w	fp, [pc, #336]	; 80170cc <_strtod_l+0x5b4>
 8016f7c:	6023      	str	r3, [r4, #0]
 8016f7e:	f04f 0a00 	mov.w	sl, #0
 8016f82:	9b06      	ldr	r3, [sp, #24]
 8016f84:	2b00      	cmp	r3, #0
 8016f86:	f43f ae09 	beq.w	8016b9c <_strtod_l+0x84>
 8016f8a:	9918      	ldr	r1, [sp, #96]	; 0x60
 8016f8c:	4620      	mov	r0, r4
 8016f8e:	f001 fd85 	bl	8018a9c <_Bfree>
 8016f92:	4649      	mov	r1, r9
 8016f94:	4620      	mov	r0, r4
 8016f96:	f001 fd81 	bl	8018a9c <_Bfree>
 8016f9a:	4641      	mov	r1, r8
 8016f9c:	4620      	mov	r0, r4
 8016f9e:	f001 fd7d 	bl	8018a9c <_Bfree>
 8016fa2:	9906      	ldr	r1, [sp, #24]
 8016fa4:	4620      	mov	r0, r4
 8016fa6:	f001 fd79 	bl	8018a9c <_Bfree>
 8016faa:	4629      	mov	r1, r5
 8016fac:	4620      	mov	r0, r4
 8016fae:	f001 fd75 	bl	8018a9c <_Bfree>
 8016fb2:	e5f3      	b.n	8016b9c <_strtod_l+0x84>
 8016fb4:	9804      	ldr	r0, [sp, #16]
 8016fb6:	f1c3 0125 	rsb	r1, r3, #37	; 0x25
 8016fba:	4281      	cmp	r1, r0
 8016fbc:	dbbd      	blt.n	8016f3a <_strtod_l+0x422>
 8016fbe:	4a40      	ldr	r2, [pc, #256]	; (80170c0 <_strtod_l+0x5a8>)
 8016fc0:	f1c3 030f 	rsb	r3, r3, #15
 8016fc4:	eb02 01c3 	add.w	r1, r2, r3, lsl #3
 8016fc8:	ed91 7b00 	vldr	d7, [r1]
 8016fcc:	ec4b ab16 	vmov	d6, sl, fp
 8016fd0:	1ac3      	subs	r3, r0, r3
 8016fd2:	eb02 02c3 	add.w	r2, r2, r3, lsl #3
 8016fd6:	ee27 7b06 	vmul.f64	d7, d7, d6
 8016fda:	ed92 6b00 	vldr	d6, [r2]
 8016fde:	e796      	b.n	8016f0e <_strtod_l+0x3f6>
 8016fe0:	3116      	adds	r1, #22
 8016fe2:	dbaa      	blt.n	8016f3a <_strtod_l+0x422>
 8016fe4:	4936      	ldr	r1, [pc, #216]	; (80170c0 <_strtod_l+0x5a8>)
 8016fe6:	9b04      	ldr	r3, [sp, #16]
 8016fe8:	eba1 01c3 	sub.w	r1, r1, r3, lsl #3
 8016fec:	ed91 7b00 	vldr	d7, [r1]
 8016ff0:	ec4b ab16 	vmov	d6, sl, fp
 8016ff4:	ee86 7b07 	vdiv.f64	d7, d6, d7
 8016ff8:	e78b      	b.n	8016f12 <_strtod_l+0x3fa>
 8016ffa:	e9cd ab06 	strd	sl, fp, [sp, #24]
 8016ffe:	2000      	movs	r0, #0
 8017000:	4e30      	ldr	r6, [pc, #192]	; (80170c4 <_strtod_l+0x5ac>)
 8017002:	1112      	asrs	r2, r2, #4
 8017004:	4601      	mov	r1, r0
 8017006:	2a01      	cmp	r2, #1
 8017008:	dc23      	bgt.n	8017052 <_strtod_l+0x53a>
 801700a:	b108      	cbz	r0, 8017010 <_strtod_l+0x4f8>
 801700c:	e9dd ab06 	ldrd	sl, fp, [sp, #24]
 8017010:	4a2c      	ldr	r2, [pc, #176]	; (80170c4 <_strtod_l+0x5ac>)
 8017012:	482d      	ldr	r0, [pc, #180]	; (80170c8 <_strtod_l+0x5b0>)
 8017014:	eb02 01c1 	add.w	r1, r2, r1, lsl #3
 8017018:	f1ab 7b54 	sub.w	fp, fp, #55574528	; 0x3500000
 801701c:	ed91 7b00 	vldr	d7, [r1]
 8017020:	ec4b ab16 	vmov	d6, sl, fp
 8017024:	ee27 7b06 	vmul.f64	d7, d7, d6
 8017028:	ed8d 7b06 	vstr	d7, [sp, #24]
 801702c:	9907      	ldr	r1, [sp, #28]
 801702e:	4a27      	ldr	r2, [pc, #156]	; (80170cc <_strtod_l+0x5b4>)
 8017030:	400a      	ands	r2, r1
 8017032:	4282      	cmp	r2, r0
 8017034:	e9dd ab06 	ldrd	sl, fp, [sp, #24]
 8017038:	d899      	bhi.n	8016f6e <_strtod_l+0x456>
 801703a:	f5a0 1080 	sub.w	r0, r0, #1048576	; 0x100000
 801703e:	4282      	cmp	r2, r0
 8017040:	bf86      	itte	hi
 8017042:	f8df b090 	ldrhi.w	fp, [pc, #144]	; 80170d4 <_strtod_l+0x5bc>
 8017046:	f04f 3aff 	movhi.w	sl, #4294967295
 801704a:	f101 7b54 	addls.w	fp, r1, #55574528	; 0x3500000
 801704e:	2700      	movs	r7, #0
 8017050:	e070      	b.n	8017134 <_strtod_l+0x61c>
 8017052:	07d7      	lsls	r7, r2, #31
 8017054:	d50a      	bpl.n	801706c <_strtod_l+0x554>
 8017056:	eb06 00c1 	add.w	r0, r6, r1, lsl #3
 801705a:	ed90 7b00 	vldr	d7, [r0]
 801705e:	ed9d 6b06 	vldr	d6, [sp, #24]
 8017062:	ee26 7b07 	vmul.f64	d7, d6, d7
 8017066:	ed8d 7b06 	vstr	d7, [sp, #24]
 801706a:	2001      	movs	r0, #1
 801706c:	3101      	adds	r1, #1
 801706e:	1052      	asrs	r2, r2, #1
 8017070:	e7c9      	b.n	8017006 <_strtod_l+0x4ee>
 8017072:	d0ec      	beq.n	801704e <_strtod_l+0x536>
 8017074:	4252      	negs	r2, r2
 8017076:	f012 000f 	ands.w	r0, r2, #15
 801707a:	d00a      	beq.n	8017092 <_strtod_l+0x57a>
 801707c:	4910      	ldr	r1, [pc, #64]	; (80170c0 <_strtod_l+0x5a8>)
 801707e:	eb01 01c0 	add.w	r1, r1, r0, lsl #3
 8017082:	ed91 7b00 	vldr	d7, [r1]
 8017086:	ec4b ab16 	vmov	d6, sl, fp
 801708a:	ee86 7b07 	vdiv.f64	d7, d6, d7
 801708e:	ec5b ab17 	vmov	sl, fp, d7
 8017092:	1112      	asrs	r2, r2, #4
 8017094:	d0db      	beq.n	801704e <_strtod_l+0x536>
 8017096:	2a1f      	cmp	r2, #31
 8017098:	dd1e      	ble.n	80170d8 <_strtod_l+0x5c0>
 801709a:	2500      	movs	r5, #0
 801709c:	46a8      	mov	r8, r5
 801709e:	9506      	str	r5, [sp, #24]
 80170a0:	46a9      	mov	r9, r5
 80170a2:	2322      	movs	r3, #34	; 0x22
 80170a4:	f04f 0a00 	mov.w	sl, #0
 80170a8:	f04f 0b00 	mov.w	fp, #0
 80170ac:	6023      	str	r3, [r4, #0]
 80170ae:	e768      	b.n	8016f82 <_strtod_l+0x46a>
 80170b0:	0801c1ed 	.word	0x0801c1ed
 80170b4:	0801c27b 	.word	0x0801c27b
 80170b8:	0801c1f5 	.word	0x0801c1f5
 80170bc:	0801c238 	.word	0x0801c238
 80170c0:	0801c2b8 	.word	0x0801c2b8
 80170c4:	0801c290 	.word	0x0801c290
 80170c8:	7ca00000 	.word	0x7ca00000
 80170cc:	7ff00000 	.word	0x7ff00000
 80170d0:	fff80000 	.word	0xfff80000
 80170d4:	7fefffff 	.word	0x7fefffff
 80170d8:	e9cd ab06 	strd	sl, fp, [sp, #24]
 80170dc:	f012 0710 	ands.w	r7, r2, #16
 80170e0:	49ab      	ldr	r1, [pc, #684]	; (8017390 <_strtod_l+0x878>)
 80170e2:	bf18      	it	ne
 80170e4:	276a      	movne	r7, #106	; 0x6a
 80170e6:	2000      	movs	r0, #0
 80170e8:	2a00      	cmp	r2, #0
 80170ea:	f300 8113 	bgt.w	8017314 <_strtod_l+0x7fc>
 80170ee:	b108      	cbz	r0, 80170f4 <_strtod_l+0x5dc>
 80170f0:	e9dd ab06 	ldrd	sl, fp, [sp, #24]
 80170f4:	b1bf      	cbz	r7, 8017126 <_strtod_l+0x60e>
 80170f6:	f3cb 520a 	ubfx	r2, fp, #20, #11
 80170fa:	f1c2 026b 	rsb	r2, r2, #107	; 0x6b
 80170fe:	2a00      	cmp	r2, #0
 8017100:	4659      	mov	r1, fp
 8017102:	dd10      	ble.n	8017126 <_strtod_l+0x60e>
 8017104:	2a1f      	cmp	r2, #31
 8017106:	f340 8113 	ble.w	8017330 <_strtod_l+0x818>
 801710a:	2a34      	cmp	r2, #52	; 0x34
 801710c:	bfde      	ittt	le
 801710e:	3a20      	suble	r2, #32
 8017110:	f04f 30ff 	movle.w	r0, #4294967295
 8017114:	fa00 f202 	lslle.w	r2, r0, r2
 8017118:	f04f 0a00 	mov.w	sl, #0
 801711c:	bfcc      	ite	gt
 801711e:	f04f 7b5c 	movgt.w	fp, #57671680	; 0x3700000
 8017122:	ea02 0b01 	andle.w	fp, r2, r1
 8017126:	ec4b ab17 	vmov	d7, sl, fp
 801712a:	eeb5 7b40 	vcmp.f64	d7, #0.0
 801712e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8017132:	d0b2      	beq.n	801709a <_strtod_l+0x582>
 8017134:	9a08      	ldr	r2, [sp, #32]
 8017136:	9200      	str	r2, [sp, #0]
 8017138:	990c      	ldr	r1, [sp, #48]	; 0x30
 801713a:	462a      	mov	r2, r5
 801713c:	4620      	mov	r0, r4
 801713e:	f001 fcff 	bl	8018b40 <__s2b>
 8017142:	9006      	str	r0, [sp, #24]
 8017144:	2800      	cmp	r0, #0
 8017146:	f43f af12 	beq.w	8016f6e <_strtod_l+0x456>
 801714a:	9a04      	ldr	r2, [sp, #16]
 801714c:	9b04      	ldr	r3, [sp, #16]
 801714e:	2a00      	cmp	r2, #0
 8017150:	f1c3 0300 	rsb	r3, r3, #0
 8017154:	ed9f 9b88 	vldr	d9, [pc, #544]	; 8017378 <_strtod_l+0x860>
 8017158:	bfa8      	it	ge
 801715a:	2300      	movge	r3, #0
 801715c:	ed9f ab88 	vldr	d10, [pc, #544]	; 8017380 <_strtod_l+0x868>
 8017160:	ed9f bb89 	vldr	d11, [pc, #548]	; 8017388 <_strtod_l+0x870>
 8017164:	930e      	str	r3, [sp, #56]	; 0x38
 8017166:	2500      	movs	r5, #0
 8017168:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 801716c:	9310      	str	r3, [sp, #64]	; 0x40
 801716e:	46a8      	mov	r8, r5
 8017170:	9b06      	ldr	r3, [sp, #24]
 8017172:	4620      	mov	r0, r4
 8017174:	6859      	ldr	r1, [r3, #4]
 8017176:	f001 fc5d 	bl	8018a34 <_Balloc>
 801717a:	4681      	mov	r9, r0
 801717c:	2800      	cmp	r0, #0
 801717e:	f43f aefa 	beq.w	8016f76 <_strtod_l+0x45e>
 8017182:	9b06      	ldr	r3, [sp, #24]
 8017184:	691a      	ldr	r2, [r3, #16]
 8017186:	3202      	adds	r2, #2
 8017188:	f103 010c 	add.w	r1, r3, #12
 801718c:	0092      	lsls	r2, r2, #2
 801718e:	300c      	adds	r0, #12
 8017190:	f7fe fd91 	bl	8015cb6 <memcpy>
 8017194:	aa1a      	add	r2, sp, #104	; 0x68
 8017196:	a919      	add	r1, sp, #100	; 0x64
 8017198:	ec4b ab10 	vmov	d0, sl, fp
 801719c:	4620      	mov	r0, r4
 801719e:	e9cd ab0a 	strd	sl, fp, [sp, #40]	; 0x28
 80171a2:	f001 ff89 	bl	80190b8 <__d2b>
 80171a6:	9018      	str	r0, [sp, #96]	; 0x60
 80171a8:	2800      	cmp	r0, #0
 80171aa:	f43f aee4 	beq.w	8016f76 <_strtod_l+0x45e>
 80171ae:	2101      	movs	r1, #1
 80171b0:	4620      	mov	r0, r4
 80171b2:	f001 fd51 	bl	8018c58 <__i2b>
 80171b6:	4680      	mov	r8, r0
 80171b8:	2800      	cmp	r0, #0
 80171ba:	f43f aedc 	beq.w	8016f76 <_strtod_l+0x45e>
 80171be:	9e19      	ldr	r6, [sp, #100]	; 0x64
 80171c0:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 80171c2:	2e00      	cmp	r6, #0
 80171c4:	bfb1      	iteee	lt
 80171c6:	9b10      	ldrlt	r3, [sp, #64]	; 0x40
 80171c8:	9b0e      	ldrge	r3, [sp, #56]	; 0x38
 80171ca:	9810      	ldrge	r0, [sp, #64]	; 0x40
 80171cc:	18f3      	addge	r3, r6, r3
 80171ce:	bfba      	itte	lt
 80171d0:	1b98      	sublt	r0, r3, r6
 80171d2:	9b0e      	ldrlt	r3, [sp, #56]	; 0x38
 80171d4:	9308      	strge	r3, [sp, #32]
 80171d6:	eba6 0607 	sub.w	r6, r6, r7
 80171da:	bfb8      	it	lt
 80171dc:	9308      	strlt	r3, [sp, #32]
 80171de:	4416      	add	r6, r2
 80171e0:	4b6c      	ldr	r3, [pc, #432]	; (8017394 <_strtod_l+0x87c>)
 80171e2:	3e01      	subs	r6, #1
 80171e4:	429e      	cmp	r6, r3
 80171e6:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 80171ea:	f280 80b4 	bge.w	8017356 <_strtod_l+0x83e>
 80171ee:	1b9b      	subs	r3, r3, r6
 80171f0:	2b1f      	cmp	r3, #31
 80171f2:	eba2 0203 	sub.w	r2, r2, r3
 80171f6:	f04f 0101 	mov.w	r1, #1
 80171fa:	f300 80a0 	bgt.w	801733e <_strtod_l+0x826>
 80171fe:	fa01 f303 	lsl.w	r3, r1, r3
 8017202:	9311      	str	r3, [sp, #68]	; 0x44
 8017204:	2300      	movs	r3, #0
 8017206:	930f      	str	r3, [sp, #60]	; 0x3c
 8017208:	9b08      	ldr	r3, [sp, #32]
 801720a:	4413      	add	r3, r2
 801720c:	4402      	add	r2, r0
 801720e:	18be      	adds	r6, r7, r2
 8017210:	9a08      	ldr	r2, [sp, #32]
 8017212:	429a      	cmp	r2, r3
 8017214:	bfa8      	it	ge
 8017216:	461a      	movge	r2, r3
 8017218:	42b2      	cmp	r2, r6
 801721a:	bfa8      	it	ge
 801721c:	4632      	movge	r2, r6
 801721e:	2a00      	cmp	r2, #0
 8017220:	dd04      	ble.n	801722c <_strtod_l+0x714>
 8017222:	9908      	ldr	r1, [sp, #32]
 8017224:	1a9b      	subs	r3, r3, r2
 8017226:	1ab6      	subs	r6, r6, r2
 8017228:	1a8a      	subs	r2, r1, r2
 801722a:	9208      	str	r2, [sp, #32]
 801722c:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 801722e:	b1c2      	cbz	r2, 8017262 <_strtod_l+0x74a>
 8017230:	4641      	mov	r1, r8
 8017232:	4620      	mov	r0, r4
 8017234:	9315      	str	r3, [sp, #84]	; 0x54
 8017236:	f001 fdaf 	bl	8018d98 <__pow5mult>
 801723a:	4680      	mov	r8, r0
 801723c:	2800      	cmp	r0, #0
 801723e:	f43f ae9a 	beq.w	8016f76 <_strtod_l+0x45e>
 8017242:	4601      	mov	r1, r0
 8017244:	9a18      	ldr	r2, [sp, #96]	; 0x60
 8017246:	4620      	mov	r0, r4
 8017248:	f001 fd0f 	bl	8018c6a <__multiply>
 801724c:	900c      	str	r0, [sp, #48]	; 0x30
 801724e:	2800      	cmp	r0, #0
 8017250:	f43f ae91 	beq.w	8016f76 <_strtod_l+0x45e>
 8017254:	9918      	ldr	r1, [sp, #96]	; 0x60
 8017256:	4620      	mov	r0, r4
 8017258:	f001 fc20 	bl	8018a9c <_Bfree>
 801725c:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 801725e:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8017260:	9218      	str	r2, [sp, #96]	; 0x60
 8017262:	2b00      	cmp	r3, #0
 8017264:	dc7c      	bgt.n	8017360 <_strtod_l+0x848>
 8017266:	9b04      	ldr	r3, [sp, #16]
 8017268:	2b00      	cmp	r3, #0
 801726a:	dd08      	ble.n	801727e <_strtod_l+0x766>
 801726c:	4649      	mov	r1, r9
 801726e:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8017270:	4620      	mov	r0, r4
 8017272:	f001 fd91 	bl	8018d98 <__pow5mult>
 8017276:	4681      	mov	r9, r0
 8017278:	2800      	cmp	r0, #0
 801727a:	f43f ae7c 	beq.w	8016f76 <_strtod_l+0x45e>
 801727e:	2e00      	cmp	r6, #0
 8017280:	dd08      	ble.n	8017294 <_strtod_l+0x77c>
 8017282:	4649      	mov	r1, r9
 8017284:	4632      	mov	r2, r6
 8017286:	4620      	mov	r0, r4
 8017288:	f001 fdd4 	bl	8018e34 <__lshift>
 801728c:	4681      	mov	r9, r0
 801728e:	2800      	cmp	r0, #0
 8017290:	f43f ae71 	beq.w	8016f76 <_strtod_l+0x45e>
 8017294:	9b08      	ldr	r3, [sp, #32]
 8017296:	2b00      	cmp	r3, #0
 8017298:	dd08      	ble.n	80172ac <_strtod_l+0x794>
 801729a:	4641      	mov	r1, r8
 801729c:	461a      	mov	r2, r3
 801729e:	4620      	mov	r0, r4
 80172a0:	f001 fdc8 	bl	8018e34 <__lshift>
 80172a4:	4680      	mov	r8, r0
 80172a6:	2800      	cmp	r0, #0
 80172a8:	f43f ae65 	beq.w	8016f76 <_strtod_l+0x45e>
 80172ac:	464a      	mov	r2, r9
 80172ae:	9918      	ldr	r1, [sp, #96]	; 0x60
 80172b0:	4620      	mov	r0, r4
 80172b2:	f001 fe2d 	bl	8018f10 <__mdiff>
 80172b6:	4605      	mov	r5, r0
 80172b8:	2800      	cmp	r0, #0
 80172ba:	f43f ae5c 	beq.w	8016f76 <_strtod_l+0x45e>
 80172be:	68c3      	ldr	r3, [r0, #12]
 80172c0:	930c      	str	r3, [sp, #48]	; 0x30
 80172c2:	2300      	movs	r3, #0
 80172c4:	60c3      	str	r3, [r0, #12]
 80172c6:	4641      	mov	r1, r8
 80172c8:	f001 fe08 	bl	8018edc <__mcmp>
 80172cc:	2800      	cmp	r0, #0
 80172ce:	da63      	bge.n	8017398 <_strtod_l+0x880>
 80172d0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80172d2:	b9e3      	cbnz	r3, 801730e <_strtod_l+0x7f6>
 80172d4:	f1ba 0f00 	cmp.w	sl, #0
 80172d8:	d119      	bne.n	801730e <_strtod_l+0x7f6>
 80172da:	f3cb 0313 	ubfx	r3, fp, #0, #20
 80172de:	b9b3      	cbnz	r3, 801730e <_strtod_l+0x7f6>
 80172e0:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 80172e4:	0d1b      	lsrs	r3, r3, #20
 80172e6:	051b      	lsls	r3, r3, #20
 80172e8:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 80172ec:	d90f      	bls.n	801730e <_strtod_l+0x7f6>
 80172ee:	696b      	ldr	r3, [r5, #20]
 80172f0:	b913      	cbnz	r3, 80172f8 <_strtod_l+0x7e0>
 80172f2:	692b      	ldr	r3, [r5, #16]
 80172f4:	2b01      	cmp	r3, #1
 80172f6:	dd0a      	ble.n	801730e <_strtod_l+0x7f6>
 80172f8:	4629      	mov	r1, r5
 80172fa:	2201      	movs	r2, #1
 80172fc:	4620      	mov	r0, r4
 80172fe:	f001 fd99 	bl	8018e34 <__lshift>
 8017302:	4641      	mov	r1, r8
 8017304:	4605      	mov	r5, r0
 8017306:	f001 fde9 	bl	8018edc <__mcmp>
 801730a:	2800      	cmp	r0, #0
 801730c:	dc75      	bgt.n	80173fa <_strtod_l+0x8e2>
 801730e:	2f00      	cmp	r7, #0
 8017310:	d17f      	bne.n	8017412 <_strtod_l+0x8fa>
 8017312:	e63a      	b.n	8016f8a <_strtod_l+0x472>
 8017314:	07d6      	lsls	r6, r2, #31
 8017316:	d508      	bpl.n	801732a <_strtod_l+0x812>
 8017318:	ed9d 6b06 	vldr	d6, [sp, #24]
 801731c:	ed91 7b00 	vldr	d7, [r1]
 8017320:	ee26 7b07 	vmul.f64	d7, d6, d7
 8017324:	ed8d 7b06 	vstr	d7, [sp, #24]
 8017328:	2001      	movs	r0, #1
 801732a:	1052      	asrs	r2, r2, #1
 801732c:	3108      	adds	r1, #8
 801732e:	e6db      	b.n	80170e8 <_strtod_l+0x5d0>
 8017330:	f04f 31ff 	mov.w	r1, #4294967295
 8017334:	fa01 f202 	lsl.w	r2, r1, r2
 8017338:	ea02 0a0a 	and.w	sl, r2, sl
 801733c:	e6f3      	b.n	8017126 <_strtod_l+0x60e>
 801733e:	f1c6 467f 	rsb	r6, r6, #4278190080	; 0xff000000
 8017342:	f506 067f 	add.w	r6, r6, #16711680	; 0xff0000
 8017346:	f506 467b 	add.w	r6, r6, #64256	; 0xfb00
 801734a:	36e2      	adds	r6, #226	; 0xe2
 801734c:	fa01 f306 	lsl.w	r3, r1, r6
 8017350:	930f      	str	r3, [sp, #60]	; 0x3c
 8017352:	9111      	str	r1, [sp, #68]	; 0x44
 8017354:	e758      	b.n	8017208 <_strtod_l+0x6f0>
 8017356:	2300      	movs	r3, #0
 8017358:	930f      	str	r3, [sp, #60]	; 0x3c
 801735a:	2301      	movs	r3, #1
 801735c:	9311      	str	r3, [sp, #68]	; 0x44
 801735e:	e753      	b.n	8017208 <_strtod_l+0x6f0>
 8017360:	461a      	mov	r2, r3
 8017362:	9918      	ldr	r1, [sp, #96]	; 0x60
 8017364:	4620      	mov	r0, r4
 8017366:	f001 fd65 	bl	8018e34 <__lshift>
 801736a:	9018      	str	r0, [sp, #96]	; 0x60
 801736c:	2800      	cmp	r0, #0
 801736e:	f47f af7a 	bne.w	8017266 <_strtod_l+0x74e>
 8017372:	e600      	b.n	8016f76 <_strtod_l+0x45e>
 8017374:	f3af 8000 	nop.w
 8017378:	94a03595 	.word	0x94a03595
 801737c:	3fdfffff 	.word	0x3fdfffff
 8017380:	35afe535 	.word	0x35afe535
 8017384:	3fe00000 	.word	0x3fe00000
 8017388:	94a03595 	.word	0x94a03595
 801738c:	3fcfffff 	.word	0x3fcfffff
 8017390:	0801c250 	.word	0x0801c250
 8017394:	fffffc02 	.word	0xfffffc02
 8017398:	f8cd b020 	str.w	fp, [sp, #32]
 801739c:	f040 8085 	bne.w	80174aa <_strtod_l+0x992>
 80173a0:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80173a2:	f3cb 0313 	ubfx	r3, fp, #0, #20
 80173a6:	b322      	cbz	r2, 80173f2 <_strtod_l+0x8da>
 80173a8:	4ab7      	ldr	r2, [pc, #732]	; (8017688 <_strtod_l+0xb70>)
 80173aa:	4293      	cmp	r3, r2
 80173ac:	d154      	bne.n	8017458 <_strtod_l+0x940>
 80173ae:	4651      	mov	r1, sl
 80173b0:	b1e7      	cbz	r7, 80173ec <_strtod_l+0x8d4>
 80173b2:	4bb6      	ldr	r3, [pc, #728]	; (801768c <_strtod_l+0xb74>)
 80173b4:	465a      	mov	r2, fp
 80173b6:	4013      	ands	r3, r2
 80173b8:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 80173bc:	f04f 32ff 	mov.w	r2, #4294967295
 80173c0:	d803      	bhi.n	80173ca <_strtod_l+0x8b2>
 80173c2:	0d1b      	lsrs	r3, r3, #20
 80173c4:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 80173c8:	409a      	lsls	r2, r3
 80173ca:	4291      	cmp	r1, r2
 80173cc:	d144      	bne.n	8017458 <_strtod_l+0x940>
 80173ce:	4bb0      	ldr	r3, [pc, #704]	; (8017690 <_strtod_l+0xb78>)
 80173d0:	9a08      	ldr	r2, [sp, #32]
 80173d2:	429a      	cmp	r2, r3
 80173d4:	d102      	bne.n	80173dc <_strtod_l+0x8c4>
 80173d6:	3101      	adds	r1, #1
 80173d8:	f43f adcd 	beq.w	8016f76 <_strtod_l+0x45e>
 80173dc:	4bab      	ldr	r3, [pc, #684]	; (801768c <_strtod_l+0xb74>)
 80173de:	9a08      	ldr	r2, [sp, #32]
 80173e0:	401a      	ands	r2, r3
 80173e2:	f502 1b80 	add.w	fp, r2, #1048576	; 0x100000
 80173e6:	f04f 0a00 	mov.w	sl, #0
 80173ea:	e790      	b.n	801730e <_strtod_l+0x7f6>
 80173ec:	f04f 32ff 	mov.w	r2, #4294967295
 80173f0:	e7eb      	b.n	80173ca <_strtod_l+0x8b2>
 80173f2:	bb8b      	cbnz	r3, 8017458 <_strtod_l+0x940>
 80173f4:	f1ba 0f00 	cmp.w	sl, #0
 80173f8:	d12e      	bne.n	8017458 <_strtod_l+0x940>
 80173fa:	465b      	mov	r3, fp
 80173fc:	4aa3      	ldr	r2, [pc, #652]	; (801768c <_strtod_l+0xb74>)
 80173fe:	b30f      	cbz	r7, 8017444 <_strtod_l+0x92c>
 8017400:	ea02 010b 	and.w	r1, r2, fp
 8017404:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 8017408:	dc1c      	bgt.n	8017444 <_strtod_l+0x92c>
 801740a:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 801740e:	f77f ae48 	ble.w	80170a2 <_strtod_l+0x58a>
 8017412:	4aa0      	ldr	r2, [pc, #640]	; (8017694 <_strtod_l+0xb7c>)
 8017414:	2300      	movs	r3, #0
 8017416:	e9cd 3212 	strd	r3, r2, [sp, #72]	; 0x48
 801741a:	ed9d 6b12 	vldr	d6, [sp, #72]	; 0x48
 801741e:	ec4b ab17 	vmov	d7, sl, fp
 8017422:	ee27 7b06 	vmul.f64	d7, d7, d6
 8017426:	ed8d 7b04 	vstr	d7, [sp, #16]
 801742a:	9b05      	ldr	r3, [sp, #20]
 801742c:	e9dd ab04 	ldrd	sl, fp, [sp, #16]
 8017430:	2b00      	cmp	r3, #0
 8017432:	f47f adaa 	bne.w	8016f8a <_strtod_l+0x472>
 8017436:	9b04      	ldr	r3, [sp, #16]
 8017438:	2b00      	cmp	r3, #0
 801743a:	f47f ada6 	bne.w	8016f8a <_strtod_l+0x472>
 801743e:	2322      	movs	r3, #34	; 0x22
 8017440:	6023      	str	r3, [r4, #0]
 8017442:	e5a2      	b.n	8016f8a <_strtod_l+0x472>
 8017444:	4013      	ands	r3, r2
 8017446:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 801744a:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 801744e:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 8017452:	f04f 3aff 	mov.w	sl, #4294967295
 8017456:	e75a      	b.n	801730e <_strtod_l+0x7f6>
 8017458:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801745a:	b18b      	cbz	r3, 8017480 <_strtod_l+0x968>
 801745c:	9a08      	ldr	r2, [sp, #32]
 801745e:	4213      	tst	r3, r2
 8017460:	f43f af55 	beq.w	801730e <_strtod_l+0x7f6>
 8017464:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8017466:	463a      	mov	r2, r7
 8017468:	4650      	mov	r0, sl
 801746a:	4659      	mov	r1, fp
 801746c:	b163      	cbz	r3, 8017488 <_strtod_l+0x970>
 801746e:	f7ff fb37 	bl	8016ae0 <sulp>
 8017472:	ed9d 7b0a 	vldr	d7, [sp, #40]	; 0x28
 8017476:	ee37 7b00 	vadd.f64	d7, d7, d0
 801747a:	ec5b ab17 	vmov	sl, fp, d7
 801747e:	e746      	b.n	801730e <_strtod_l+0x7f6>
 8017480:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8017482:	ea13 0f0a 	tst.w	r3, sl
 8017486:	e7eb      	b.n	8017460 <_strtod_l+0x948>
 8017488:	f7ff fb2a 	bl	8016ae0 <sulp>
 801748c:	ed9d 7b0a 	vldr	d7, [sp, #40]	; 0x28
 8017490:	ee37 7b40 	vsub.f64	d7, d7, d0
 8017494:	ed8d 7b04 	vstr	d7, [sp, #16]
 8017498:	eeb5 7b40 	vcmp.f64	d7, #0.0
 801749c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80174a0:	e9dd ab04 	ldrd	sl, fp, [sp, #16]
 80174a4:	f43f adfd 	beq.w	80170a2 <_strtod_l+0x58a>
 80174a8:	e731      	b.n	801730e <_strtod_l+0x7f6>
 80174aa:	4641      	mov	r1, r8
 80174ac:	4628      	mov	r0, r5
 80174ae:	f001 fe52 	bl	8019156 <__ratio>
 80174b2:	eeb0 7b00 	vmov.f64	d7, #0	; 0x40000000  2.0
 80174b6:	eeb4 0bc7 	vcmpe.f64	d0, d7
 80174ba:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80174be:	d869      	bhi.n	8017594 <_strtod_l+0xa7c>
 80174c0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80174c2:	2b00      	cmp	r3, #0
 80174c4:	d045      	beq.n	8017552 <_strtod_l+0xa3a>
 80174c6:	4b74      	ldr	r3, [pc, #464]	; (8017698 <_strtod_l+0xb80>)
 80174c8:	2200      	movs	r2, #0
 80174ca:	eeb7 8b00 	vmov.f64	d8, #112	; 0x3f800000  1.0
 80174ce:	9808      	ldr	r0, [sp, #32]
 80174d0:	496e      	ldr	r1, [pc, #440]	; (801768c <_strtod_l+0xb74>)
 80174d2:	ea00 0601 	and.w	r6, r0, r1
 80174d6:	4871      	ldr	r0, [pc, #452]	; (801769c <_strtod_l+0xb84>)
 80174d8:	4286      	cmp	r6, r0
 80174da:	f040 8089 	bne.w	80175f0 <_strtod_l+0xad8>
 80174de:	910f      	str	r1, [sp, #60]	; 0x3c
 80174e0:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 80174e4:	e9cd 0112 	strd	r0, r1, [sp, #72]	; 0x48
 80174e8:	9908      	ldr	r1, [sp, #32]
 80174ea:	f1a1 7b54 	sub.w	fp, r1, #55574528	; 0x3500000
 80174ee:	ec4b ab10 	vmov	d0, sl, fp
 80174f2:	ec43 2b1c 	vmov	d12, r2, r3
 80174f6:	f001 fd69 	bl	8018fcc <__ulp>
 80174fa:	ec4b ab1d 	vmov	d13, sl, fp
 80174fe:	eeac db00 	vfma.f64	d13, d12, d0
 8017502:	ed8d db08 	vstr	d13, [sp, #32]
 8017506:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8017508:	990f      	ldr	r1, [sp, #60]	; 0x3c
 801750a:	4a65      	ldr	r2, [pc, #404]	; (80176a0 <_strtod_l+0xb88>)
 801750c:	4019      	ands	r1, r3
 801750e:	4291      	cmp	r1, r2
 8017510:	e9dd ab08 	ldrd	sl, fp, [sp, #32]
 8017514:	d948      	bls.n	80175a8 <_strtod_l+0xa90>
 8017516:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8017518:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 801751c:	4293      	cmp	r3, r2
 801751e:	d103      	bne.n	8017528 <_strtod_l+0xa10>
 8017520:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8017522:	3301      	adds	r3, #1
 8017524:	f43f ad27 	beq.w	8016f76 <_strtod_l+0x45e>
 8017528:	f8df b164 	ldr.w	fp, [pc, #356]	; 8017690 <_strtod_l+0xb78>
 801752c:	f04f 3aff 	mov.w	sl, #4294967295
 8017530:	9918      	ldr	r1, [sp, #96]	; 0x60
 8017532:	4620      	mov	r0, r4
 8017534:	f001 fab2 	bl	8018a9c <_Bfree>
 8017538:	4649      	mov	r1, r9
 801753a:	4620      	mov	r0, r4
 801753c:	f001 faae 	bl	8018a9c <_Bfree>
 8017540:	4641      	mov	r1, r8
 8017542:	4620      	mov	r0, r4
 8017544:	f001 faaa 	bl	8018a9c <_Bfree>
 8017548:	4629      	mov	r1, r5
 801754a:	4620      	mov	r0, r4
 801754c:	f001 faa6 	bl	8018a9c <_Bfree>
 8017550:	e60e      	b.n	8017170 <_strtod_l+0x658>
 8017552:	f1ba 0f00 	cmp.w	sl, #0
 8017556:	d113      	bne.n	8017580 <_strtod_l+0xa68>
 8017558:	9b08      	ldr	r3, [sp, #32]
 801755a:	f3c3 0313 	ubfx	r3, r3, #0, #20
 801755e:	b9b3      	cbnz	r3, 801758e <_strtod_l+0xa76>
 8017560:	eeb7 7b00 	vmov.f64	d7, #112	; 0x3f800000  1.0
 8017564:	eeb4 0bc7 	vcmpe.f64	d0, d7
 8017568:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801756c:	eeb6 8b00 	vmov.f64	d8, #96	; 0x3f000000  0.5
 8017570:	d401      	bmi.n	8017576 <_strtod_l+0xa5e>
 8017572:	ee20 8b08 	vmul.f64	d8, d0, d8
 8017576:	eeb1 7b48 	vneg.f64	d7, d8
 801757a:	ec53 2b17 	vmov	r2, r3, d7
 801757e:	e7a6      	b.n	80174ce <_strtod_l+0x9b6>
 8017580:	f1ba 0f01 	cmp.w	sl, #1
 8017584:	d103      	bne.n	801758e <_strtod_l+0xa76>
 8017586:	9b08      	ldr	r3, [sp, #32]
 8017588:	2b00      	cmp	r3, #0
 801758a:	f43f ad8a 	beq.w	80170a2 <_strtod_l+0x58a>
 801758e:	2200      	movs	r2, #0
 8017590:	4b44      	ldr	r3, [pc, #272]	; (80176a4 <_strtod_l+0xb8c>)
 8017592:	e79a      	b.n	80174ca <_strtod_l+0x9b2>
 8017594:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8017596:	eeb6 8b00 	vmov.f64	d8, #96	; 0x3f000000  0.5
 801759a:	ee20 8b08 	vmul.f64	d8, d0, d8
 801759e:	2b00      	cmp	r3, #0
 80175a0:	d0e9      	beq.n	8017576 <_strtod_l+0xa5e>
 80175a2:	ec53 2b18 	vmov	r2, r3, d8
 80175a6:	e792      	b.n	80174ce <_strtod_l+0x9b6>
 80175a8:	f103 7b54 	add.w	fp, r3, #55574528	; 0x3500000
 80175ac:	2f00      	cmp	r7, #0
 80175ae:	d1bf      	bne.n	8017530 <_strtod_l+0xa18>
 80175b0:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 80175b4:	0d1b      	lsrs	r3, r3, #20
 80175b6:	051b      	lsls	r3, r3, #20
 80175b8:	429e      	cmp	r6, r3
 80175ba:	d1b9      	bne.n	8017530 <_strtod_l+0xa18>
 80175bc:	eebd 0bc8 	vcvt.s32.f64	s0, d8
 80175c0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80175c2:	eeb8 0bc0 	vcvt.f64.s32	d0, s0
 80175c6:	ee38 8b40 	vsub.f64	d8, d8, d0
 80175ca:	b92b      	cbnz	r3, 80175d8 <_strtod_l+0xac0>
 80175cc:	f1ba 0f00 	cmp.w	sl, #0
 80175d0:	d102      	bne.n	80175d8 <_strtod_l+0xac0>
 80175d2:	f3cb 0213 	ubfx	r2, fp, #0, #20
 80175d6:	b3d2      	cbz	r2, 801764e <_strtod_l+0xb36>
 80175d8:	eeb4 8bc9 	vcmpe.f64	d8, d9
 80175dc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80175e0:	f53f acd3 	bmi.w	8016f8a <_strtod_l+0x472>
 80175e4:	eeb4 8bca 	vcmpe.f64	d8, d10
 80175e8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80175ec:	dda0      	ble.n	8017530 <_strtod_l+0xa18>
 80175ee:	e4cc      	b.n	8016f8a <_strtod_l+0x472>
 80175f0:	b1ef      	cbz	r7, 801762e <_strtod_l+0xb16>
 80175f2:	f1b6 6fd4 	cmp.w	r6, #111149056	; 0x6a00000
 80175f6:	d81a      	bhi.n	801762e <_strtod_l+0xb16>
 80175f8:	ed9f 7b21 	vldr	d7, [pc, #132]	; 8017680 <_strtod_l+0xb68>
 80175fc:	eeb4 8bc7 	vcmpe.f64	d8, d7
 8017600:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8017604:	d810      	bhi.n	8017628 <_strtod_l+0xb10>
 8017606:	eefc 7bc8 	vcvt.u32.f64	s15, d8
 801760a:	ee17 3a90 	vmov	r3, s15
 801760e:	2b00      	cmp	r3, #0
 8017610:	bf08      	it	eq
 8017612:	2301      	moveq	r3, #1
 8017614:	ee07 3a90 	vmov	s15, r3
 8017618:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801761a:	eeb8 8b67 	vcvt.f64.u32	d8, s15
 801761e:	b99b      	cbnz	r3, 8017648 <_strtod_l+0xb30>
 8017620:	eeb1 7b48 	vneg.f64	d7, d8
 8017624:	ec53 2b17 	vmov	r2, r3, d7
 8017628:	f103 61d6 	add.w	r1, r3, #112197632	; 0x6b00000
 801762c:	1b8b      	subs	r3, r1, r6
 801762e:	ed9d 0b0a 	vldr	d0, [sp, #40]	; 0x28
 8017632:	ec43 2b1c 	vmov	d12, r2, r3
 8017636:	f001 fcc9 	bl	8018fcc <__ulp>
 801763a:	ed9d 7b0a 	vldr	d7, [sp, #40]	; 0x28
 801763e:	eeac 7b00 	vfma.f64	d7, d12, d0
 8017642:	ec5b ab17 	vmov	sl, fp, d7
 8017646:	e7b1      	b.n	80175ac <_strtod_l+0xa94>
 8017648:	ec53 2b18 	vmov	r2, r3, d8
 801764c:	e7ec      	b.n	8017628 <_strtod_l+0xb10>
 801764e:	eeb4 8bcb 	vcmpe.f64	d8, d11
 8017652:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8017656:	f57f af6b 	bpl.w	8017530 <_strtod_l+0xa18>
 801765a:	e496      	b.n	8016f8a <_strtod_l+0x472>
 801765c:	2300      	movs	r3, #0
 801765e:	930d      	str	r3, [sp, #52]	; 0x34
 8017660:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8017662:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8017664:	6013      	str	r3, [r2, #0]
 8017666:	f7ff ba9d 	b.w	8016ba4 <_strtod_l+0x8c>
 801766a:	2a65      	cmp	r2, #101	; 0x65
 801766c:	f04f 0100 	mov.w	r1, #0
 8017670:	f43f ab97 	beq.w	8016da2 <_strtod_l+0x28a>
 8017674:	2701      	movs	r7, #1
 8017676:	460b      	mov	r3, r1
 8017678:	9704      	str	r7, [sp, #16]
 801767a:	f7ff bb0a 	b.w	8016c92 <_strtod_l+0x17a>
 801767e:	bf00      	nop
 8017680:	ffc00000 	.word	0xffc00000
 8017684:	41dfffff 	.word	0x41dfffff
 8017688:	000fffff 	.word	0x000fffff
 801768c:	7ff00000 	.word	0x7ff00000
 8017690:	7fefffff 	.word	0x7fefffff
 8017694:	39500000 	.word	0x39500000
 8017698:	3ff00000 	.word	0x3ff00000
 801769c:	7fe00000 	.word	0x7fe00000
 80176a0:	7c9fffff 	.word	0x7c9fffff
 80176a4:	bff00000 	.word	0xbff00000

080176a8 <_strtod_r>:
 80176a8:	4b05      	ldr	r3, [pc, #20]	; (80176c0 <_strtod_r+0x18>)
 80176aa:	681b      	ldr	r3, [r3, #0]
 80176ac:	b410      	push	{r4}
 80176ae:	6a1b      	ldr	r3, [r3, #32]
 80176b0:	4c04      	ldr	r4, [pc, #16]	; (80176c4 <_strtod_r+0x1c>)
 80176b2:	2b00      	cmp	r3, #0
 80176b4:	bf08      	it	eq
 80176b6:	4623      	moveq	r3, r4
 80176b8:	f85d 4b04 	ldr.w	r4, [sp], #4
 80176bc:	f7ff ba2c 	b.w	8016b18 <_strtod_l>
 80176c0:	24000034 	.word	0x24000034
 80176c4:	24000098 	.word	0x24000098

080176c8 <_strtol_l.isra.0>:
 80176c8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80176cc:	4680      	mov	r8, r0
 80176ce:	4689      	mov	r9, r1
 80176d0:	4692      	mov	sl, r2
 80176d2:	461e      	mov	r6, r3
 80176d4:	460f      	mov	r7, r1
 80176d6:	463d      	mov	r5, r7
 80176d8:	9808      	ldr	r0, [sp, #32]
 80176da:	f815 4b01 	ldrb.w	r4, [r5], #1
 80176de:	f001 f981 	bl	80189e4 <__locale_ctype_ptr_l>
 80176e2:	4420      	add	r0, r4
 80176e4:	7843      	ldrb	r3, [r0, #1]
 80176e6:	f013 0308 	ands.w	r3, r3, #8
 80176ea:	d132      	bne.n	8017752 <_strtol_l.isra.0+0x8a>
 80176ec:	2c2d      	cmp	r4, #45	; 0x2d
 80176ee:	d132      	bne.n	8017756 <_strtol_l.isra.0+0x8e>
 80176f0:	787c      	ldrb	r4, [r7, #1]
 80176f2:	1cbd      	adds	r5, r7, #2
 80176f4:	2201      	movs	r2, #1
 80176f6:	2e00      	cmp	r6, #0
 80176f8:	d05d      	beq.n	80177b6 <_strtol_l.isra.0+0xee>
 80176fa:	2e10      	cmp	r6, #16
 80176fc:	d109      	bne.n	8017712 <_strtol_l.isra.0+0x4a>
 80176fe:	2c30      	cmp	r4, #48	; 0x30
 8017700:	d107      	bne.n	8017712 <_strtol_l.isra.0+0x4a>
 8017702:	782b      	ldrb	r3, [r5, #0]
 8017704:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8017708:	2b58      	cmp	r3, #88	; 0x58
 801770a:	d14f      	bne.n	80177ac <_strtol_l.isra.0+0xe4>
 801770c:	786c      	ldrb	r4, [r5, #1]
 801770e:	2610      	movs	r6, #16
 8017710:	3502      	adds	r5, #2
 8017712:	2a00      	cmp	r2, #0
 8017714:	bf14      	ite	ne
 8017716:	f04f 4100 	movne.w	r1, #2147483648	; 0x80000000
 801771a:	f06f 4100 	mvneq.w	r1, #2147483648	; 0x80000000
 801771e:	2700      	movs	r7, #0
 8017720:	fbb1 fcf6 	udiv	ip, r1, r6
 8017724:	4638      	mov	r0, r7
 8017726:	fb06 1e1c 	mls	lr, r6, ip, r1
 801772a:	f1a4 0330 	sub.w	r3, r4, #48	; 0x30
 801772e:	2b09      	cmp	r3, #9
 8017730:	d817      	bhi.n	8017762 <_strtol_l.isra.0+0x9a>
 8017732:	461c      	mov	r4, r3
 8017734:	42a6      	cmp	r6, r4
 8017736:	dd23      	ble.n	8017780 <_strtol_l.isra.0+0xb8>
 8017738:	1c7b      	adds	r3, r7, #1
 801773a:	d007      	beq.n	801774c <_strtol_l.isra.0+0x84>
 801773c:	4584      	cmp	ip, r0
 801773e:	d31c      	bcc.n	801777a <_strtol_l.isra.0+0xb2>
 8017740:	d101      	bne.n	8017746 <_strtol_l.isra.0+0x7e>
 8017742:	45a6      	cmp	lr, r4
 8017744:	db19      	blt.n	801777a <_strtol_l.isra.0+0xb2>
 8017746:	fb00 4006 	mla	r0, r0, r6, r4
 801774a:	2701      	movs	r7, #1
 801774c:	f815 4b01 	ldrb.w	r4, [r5], #1
 8017750:	e7eb      	b.n	801772a <_strtol_l.isra.0+0x62>
 8017752:	462f      	mov	r7, r5
 8017754:	e7bf      	b.n	80176d6 <_strtol_l.isra.0+0xe>
 8017756:	2c2b      	cmp	r4, #43	; 0x2b
 8017758:	bf04      	itt	eq
 801775a:	1cbd      	addeq	r5, r7, #2
 801775c:	787c      	ldrbeq	r4, [r7, #1]
 801775e:	461a      	mov	r2, r3
 8017760:	e7c9      	b.n	80176f6 <_strtol_l.isra.0+0x2e>
 8017762:	f1a4 0341 	sub.w	r3, r4, #65	; 0x41
 8017766:	2b19      	cmp	r3, #25
 8017768:	d801      	bhi.n	801776e <_strtol_l.isra.0+0xa6>
 801776a:	3c37      	subs	r4, #55	; 0x37
 801776c:	e7e2      	b.n	8017734 <_strtol_l.isra.0+0x6c>
 801776e:	f1a4 0361 	sub.w	r3, r4, #97	; 0x61
 8017772:	2b19      	cmp	r3, #25
 8017774:	d804      	bhi.n	8017780 <_strtol_l.isra.0+0xb8>
 8017776:	3c57      	subs	r4, #87	; 0x57
 8017778:	e7dc      	b.n	8017734 <_strtol_l.isra.0+0x6c>
 801777a:	f04f 37ff 	mov.w	r7, #4294967295
 801777e:	e7e5      	b.n	801774c <_strtol_l.isra.0+0x84>
 8017780:	1c7b      	adds	r3, r7, #1
 8017782:	d108      	bne.n	8017796 <_strtol_l.isra.0+0xce>
 8017784:	2322      	movs	r3, #34	; 0x22
 8017786:	f8c8 3000 	str.w	r3, [r8]
 801778a:	4608      	mov	r0, r1
 801778c:	f1ba 0f00 	cmp.w	sl, #0
 8017790:	d107      	bne.n	80177a2 <_strtol_l.isra.0+0xda>
 8017792:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8017796:	b102      	cbz	r2, 801779a <_strtol_l.isra.0+0xd2>
 8017798:	4240      	negs	r0, r0
 801779a:	f1ba 0f00 	cmp.w	sl, #0
 801779e:	d0f8      	beq.n	8017792 <_strtol_l.isra.0+0xca>
 80177a0:	b10f      	cbz	r7, 80177a6 <_strtol_l.isra.0+0xde>
 80177a2:	f105 39ff 	add.w	r9, r5, #4294967295
 80177a6:	f8ca 9000 	str.w	r9, [sl]
 80177aa:	e7f2      	b.n	8017792 <_strtol_l.isra.0+0xca>
 80177ac:	2430      	movs	r4, #48	; 0x30
 80177ae:	2e00      	cmp	r6, #0
 80177b0:	d1af      	bne.n	8017712 <_strtol_l.isra.0+0x4a>
 80177b2:	2608      	movs	r6, #8
 80177b4:	e7ad      	b.n	8017712 <_strtol_l.isra.0+0x4a>
 80177b6:	2c30      	cmp	r4, #48	; 0x30
 80177b8:	d0a3      	beq.n	8017702 <_strtol_l.isra.0+0x3a>
 80177ba:	260a      	movs	r6, #10
 80177bc:	e7a9      	b.n	8017712 <_strtol_l.isra.0+0x4a>
	...

080177c0 <_strtol_r>:
 80177c0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80177c2:	4c06      	ldr	r4, [pc, #24]	; (80177dc <_strtol_r+0x1c>)
 80177c4:	4d06      	ldr	r5, [pc, #24]	; (80177e0 <_strtol_r+0x20>)
 80177c6:	6824      	ldr	r4, [r4, #0]
 80177c8:	6a24      	ldr	r4, [r4, #32]
 80177ca:	2c00      	cmp	r4, #0
 80177cc:	bf08      	it	eq
 80177ce:	462c      	moveq	r4, r5
 80177d0:	9400      	str	r4, [sp, #0]
 80177d2:	f7ff ff79 	bl	80176c8 <_strtol_l.isra.0>
 80177d6:	b003      	add	sp, #12
 80177d8:	bd30      	pop	{r4, r5, pc}
 80177da:	bf00      	nop
 80177dc:	24000034 	.word	0x24000034
 80177e0:	24000098 	.word	0x24000098

080177e4 <quorem>:
 80177e4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80177e8:	6903      	ldr	r3, [r0, #16]
 80177ea:	690c      	ldr	r4, [r1, #16]
 80177ec:	42a3      	cmp	r3, r4
 80177ee:	4680      	mov	r8, r0
 80177f0:	f2c0 8082 	blt.w	80178f8 <quorem+0x114>
 80177f4:	3c01      	subs	r4, #1
 80177f6:	f101 0714 	add.w	r7, r1, #20
 80177fa:	ea4f 0c84 	mov.w	ip, r4, lsl #2
 80177fe:	f100 0614 	add.w	r6, r0, #20
 8017802:	f857 5024 	ldr.w	r5, [r7, r4, lsl #2]
 8017806:	f856 0024 	ldr.w	r0, [r6, r4, lsl #2]
 801780a:	eb06 030c 	add.w	r3, r6, ip
 801780e:	3501      	adds	r5, #1
 8017810:	eb07 090c 	add.w	r9, r7, ip
 8017814:	9301      	str	r3, [sp, #4]
 8017816:	fbb0 f5f5 	udiv	r5, r0, r5
 801781a:	b395      	cbz	r5, 8017882 <quorem+0x9e>
 801781c:	f04f 0a00 	mov.w	sl, #0
 8017820:	4638      	mov	r0, r7
 8017822:	46b6      	mov	lr, r6
 8017824:	46d3      	mov	fp, sl
 8017826:	f850 2b04 	ldr.w	r2, [r0], #4
 801782a:	b293      	uxth	r3, r2
 801782c:	fb05 a303 	mla	r3, r5, r3, sl
 8017830:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8017834:	b29b      	uxth	r3, r3
 8017836:	ebab 0303 	sub.w	r3, fp, r3
 801783a:	0c12      	lsrs	r2, r2, #16
 801783c:	f8de b000 	ldr.w	fp, [lr]
 8017840:	fb05 a202 	mla	r2, r5, r2, sl
 8017844:	fa13 f38b 	uxtah	r3, r3, fp
 8017848:	ea4f 4a12 	mov.w	sl, r2, lsr #16
 801784c:	fa1f fb82 	uxth.w	fp, r2
 8017850:	f8de 2000 	ldr.w	r2, [lr]
 8017854:	ebcb 4212 	rsb	r2, fp, r2, lsr #16
 8017858:	eb02 4223 	add.w	r2, r2, r3, asr #16
 801785c:	b29b      	uxth	r3, r3
 801785e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8017862:	4581      	cmp	r9, r0
 8017864:	ea4f 4b22 	mov.w	fp, r2, asr #16
 8017868:	f84e 3b04 	str.w	r3, [lr], #4
 801786c:	d2db      	bcs.n	8017826 <quorem+0x42>
 801786e:	f856 300c 	ldr.w	r3, [r6, ip]
 8017872:	b933      	cbnz	r3, 8017882 <quorem+0x9e>
 8017874:	9b01      	ldr	r3, [sp, #4]
 8017876:	3b04      	subs	r3, #4
 8017878:	429e      	cmp	r6, r3
 801787a:	461a      	mov	r2, r3
 801787c:	d330      	bcc.n	80178e0 <quorem+0xfc>
 801787e:	f8c8 4010 	str.w	r4, [r8, #16]
 8017882:	4640      	mov	r0, r8
 8017884:	f001 fb2a 	bl	8018edc <__mcmp>
 8017888:	2800      	cmp	r0, #0
 801788a:	db25      	blt.n	80178d8 <quorem+0xf4>
 801788c:	3501      	adds	r5, #1
 801788e:	4630      	mov	r0, r6
 8017890:	f04f 0c00 	mov.w	ip, #0
 8017894:	f857 2b04 	ldr.w	r2, [r7], #4
 8017898:	f8d0 e000 	ldr.w	lr, [r0]
 801789c:	b293      	uxth	r3, r2
 801789e:	ebac 0303 	sub.w	r3, ip, r3
 80178a2:	0c12      	lsrs	r2, r2, #16
 80178a4:	fa13 f38e 	uxtah	r3, r3, lr
 80178a8:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 80178ac:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80178b0:	b29b      	uxth	r3, r3
 80178b2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80178b6:	45b9      	cmp	r9, r7
 80178b8:	ea4f 4c22 	mov.w	ip, r2, asr #16
 80178bc:	f840 3b04 	str.w	r3, [r0], #4
 80178c0:	d2e8      	bcs.n	8017894 <quorem+0xb0>
 80178c2:	f856 2024 	ldr.w	r2, [r6, r4, lsl #2]
 80178c6:	eb06 0384 	add.w	r3, r6, r4, lsl #2
 80178ca:	b92a      	cbnz	r2, 80178d8 <quorem+0xf4>
 80178cc:	3b04      	subs	r3, #4
 80178ce:	429e      	cmp	r6, r3
 80178d0:	461a      	mov	r2, r3
 80178d2:	d30b      	bcc.n	80178ec <quorem+0x108>
 80178d4:	f8c8 4010 	str.w	r4, [r8, #16]
 80178d8:	4628      	mov	r0, r5
 80178da:	b003      	add	sp, #12
 80178dc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80178e0:	6812      	ldr	r2, [r2, #0]
 80178e2:	3b04      	subs	r3, #4
 80178e4:	2a00      	cmp	r2, #0
 80178e6:	d1ca      	bne.n	801787e <quorem+0x9a>
 80178e8:	3c01      	subs	r4, #1
 80178ea:	e7c5      	b.n	8017878 <quorem+0x94>
 80178ec:	6812      	ldr	r2, [r2, #0]
 80178ee:	3b04      	subs	r3, #4
 80178f0:	2a00      	cmp	r2, #0
 80178f2:	d1ef      	bne.n	80178d4 <quorem+0xf0>
 80178f4:	3c01      	subs	r4, #1
 80178f6:	e7ea      	b.n	80178ce <quorem+0xea>
 80178f8:	2000      	movs	r0, #0
 80178fa:	e7ee      	b.n	80178da <quorem+0xf6>
 80178fc:	0000      	movs	r0, r0
	...

08017900 <_dtoa_r>:
 8017900:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8017904:	ec57 6b10 	vmov	r6, r7, d0
 8017908:	b095      	sub	sp, #84	; 0x54
 801790a:	6a45      	ldr	r5, [r0, #36]	; 0x24
 801790c:	9108      	str	r1, [sp, #32]
 801790e:	4604      	mov	r4, r0
 8017910:	920a      	str	r2, [sp, #40]	; 0x28
 8017912:	9311      	str	r3, [sp, #68]	; 0x44
 8017914:	f8dd 8078 	ldr.w	r8, [sp, #120]	; 0x78
 8017918:	e9cd 6702 	strd	r6, r7, [sp, #8]
 801791c:	b93d      	cbnz	r5, 801792e <_dtoa_r+0x2e>
 801791e:	2010      	movs	r0, #16
 8017920:	f7fe f9b2 	bl	8015c88 <malloc>
 8017924:	6260      	str	r0, [r4, #36]	; 0x24
 8017926:	e9c0 5501 	strd	r5, r5, [r0, #4]
 801792a:	6005      	str	r5, [r0, #0]
 801792c:	60c5      	str	r5, [r0, #12]
 801792e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8017930:	6819      	ldr	r1, [r3, #0]
 8017932:	b151      	cbz	r1, 801794a <_dtoa_r+0x4a>
 8017934:	685a      	ldr	r2, [r3, #4]
 8017936:	604a      	str	r2, [r1, #4]
 8017938:	2301      	movs	r3, #1
 801793a:	4093      	lsls	r3, r2
 801793c:	608b      	str	r3, [r1, #8]
 801793e:	4620      	mov	r0, r4
 8017940:	f001 f8ac 	bl	8018a9c <_Bfree>
 8017944:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8017946:	2200      	movs	r2, #0
 8017948:	601a      	str	r2, [r3, #0]
 801794a:	1e3b      	subs	r3, r7, #0
 801794c:	bfb9      	ittee	lt
 801794e:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8017952:	9303      	strlt	r3, [sp, #12]
 8017954:	2300      	movge	r3, #0
 8017956:	f8c8 3000 	strge.w	r3, [r8]
 801795a:	9d03      	ldr	r5, [sp, #12]
 801795c:	4bac      	ldr	r3, [pc, #688]	; (8017c10 <_dtoa_r+0x310>)
 801795e:	bfbc      	itt	lt
 8017960:	2201      	movlt	r2, #1
 8017962:	f8c8 2000 	strlt.w	r2, [r8]
 8017966:	43ab      	bics	r3, r5
 8017968:	d11b      	bne.n	80179a2 <_dtoa_r+0xa2>
 801796a:	9a11      	ldr	r2, [sp, #68]	; 0x44
 801796c:	f242 730f 	movw	r3, #9999	; 0x270f
 8017970:	6013      	str	r3, [r2, #0]
 8017972:	9b02      	ldr	r3, [sp, #8]
 8017974:	b923      	cbnz	r3, 8017980 <_dtoa_r+0x80>
 8017976:	f3c5 0513 	ubfx	r5, r5, #0, #20
 801797a:	2d00      	cmp	r5, #0
 801797c:	f000 84dd 	beq.w	801833a <_dtoa_r+0xa3a>
 8017980:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8017982:	b953      	cbnz	r3, 801799a <_dtoa_r+0x9a>
 8017984:	4ba3      	ldr	r3, [pc, #652]	; (8017c14 <_dtoa_r+0x314>)
 8017986:	e020      	b.n	80179ca <_dtoa_r+0xca>
 8017988:	4ba3      	ldr	r3, [pc, #652]	; (8017c18 <_dtoa_r+0x318>)
 801798a:	9304      	str	r3, [sp, #16]
 801798c:	3308      	adds	r3, #8
 801798e:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
 8017990:	6013      	str	r3, [r2, #0]
 8017992:	9804      	ldr	r0, [sp, #16]
 8017994:	b015      	add	sp, #84	; 0x54
 8017996:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801799a:	4b9e      	ldr	r3, [pc, #632]	; (8017c14 <_dtoa_r+0x314>)
 801799c:	9304      	str	r3, [sp, #16]
 801799e:	3303      	adds	r3, #3
 80179a0:	e7f5      	b.n	801798e <_dtoa_r+0x8e>
 80179a2:	ed9d 7b02 	vldr	d7, [sp, #8]
 80179a6:	eeb5 7b40 	vcmp.f64	d7, #0.0
 80179aa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80179ae:	ed8d 7b04 	vstr	d7, [sp, #16]
 80179b2:	d10c      	bne.n	80179ce <_dtoa_r+0xce>
 80179b4:	9a11      	ldr	r2, [sp, #68]	; 0x44
 80179b6:	2301      	movs	r3, #1
 80179b8:	6013      	str	r3, [r2, #0]
 80179ba:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 80179bc:	2b00      	cmp	r3, #0
 80179be:	f000 84b9 	beq.w	8018334 <_dtoa_r+0xa34>
 80179c2:	4b96      	ldr	r3, [pc, #600]	; (8017c1c <_dtoa_r+0x31c>)
 80179c4:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
 80179c6:	6013      	str	r3, [r2, #0]
 80179c8:	3b01      	subs	r3, #1
 80179ca:	9304      	str	r3, [sp, #16]
 80179cc:	e7e1      	b.n	8017992 <_dtoa_r+0x92>
 80179ce:	a913      	add	r1, sp, #76	; 0x4c
 80179d0:	aa12      	add	r2, sp, #72	; 0x48
 80179d2:	ed9d 0b04 	vldr	d0, [sp, #16]
 80179d6:	4620      	mov	r0, r4
 80179d8:	f001 fb6e 	bl	80190b8 <__d2b>
 80179dc:	f3c5 560a 	ubfx	r6, r5, #20, #11
 80179e0:	9001      	str	r0, [sp, #4]
 80179e2:	9912      	ldr	r1, [sp, #72]	; 0x48
 80179e4:	2e00      	cmp	r6, #0
 80179e6:	d046      	beq.n	8017a76 <_dtoa_r+0x176>
 80179e8:	9805      	ldr	r0, [sp, #20]
 80179ea:	f3c0 0013 	ubfx	r0, r0, #0, #20
 80179ee:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80179f2:	f040 537f 	orr.w	r3, r0, #1069547520	; 0x3fc00000
 80179f6:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 80179fa:	f2a6 3aff 	subw	sl, r6, #1023	; 0x3ff
 80179fe:	2700      	movs	r7, #0
 8017a00:	ee07 aa90 	vmov	s15, sl
 8017a04:	ec43 2b16 	vmov	d6, r2, r3
 8017a08:	eeb8 5be7 	vcvt.f64.s32	d5, s15
 8017a0c:	ed9f 4b7a 	vldr	d4, [pc, #488]	; 8017bf8 <_dtoa_r+0x2f8>
 8017a10:	eeb7 7b08 	vmov.f64	d7, #120	; 0x3fc00000  1.5
 8017a14:	ee36 7b47 	vsub.f64	d7, d6, d7
 8017a18:	ed9f 6b79 	vldr	d6, [pc, #484]	; 8017c00 <_dtoa_r+0x300>
 8017a1c:	eea7 6b04 	vfma.f64	d6, d7, d4
 8017a20:	eeb0 7b46 	vmov.f64	d7, d6
 8017a24:	ed9f 6b78 	vldr	d6, [pc, #480]	; 8017c08 <_dtoa_r+0x308>
 8017a28:	eea5 7b06 	vfma.f64	d7, d5, d6
 8017a2c:	eefd 6bc7 	vcvt.s32.f64	s13, d7
 8017a30:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 8017a34:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8017a38:	ee16 ba90 	vmov	fp, s13
 8017a3c:	d508      	bpl.n	8017a50 <_dtoa_r+0x150>
 8017a3e:	eeb8 6be6 	vcvt.f64.s32	d6, s13
 8017a42:	eeb4 6b47 	vcmp.f64	d6, d7
 8017a46:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8017a4a:	bf18      	it	ne
 8017a4c:	f10b 3bff 	addne.w	fp, fp, #4294967295
 8017a50:	f1bb 0f16 	cmp.w	fp, #22
 8017a54:	d834      	bhi.n	8017ac0 <_dtoa_r+0x1c0>
 8017a56:	4b72      	ldr	r3, [pc, #456]	; (8017c20 <_dtoa_r+0x320>)
 8017a58:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 8017a5c:	ed93 7b00 	vldr	d7, [r3]
 8017a60:	ed9d 6b02 	vldr	d6, [sp, #8]
 8017a64:	eeb4 7bc6 	vcmpe.f64	d7, d6
 8017a68:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8017a6c:	dd01      	ble.n	8017a72 <_dtoa_r+0x172>
 8017a6e:	f10b 3bff 	add.w	fp, fp, #4294967295
 8017a72:	2300      	movs	r3, #0
 8017a74:	e025      	b.n	8017ac2 <_dtoa_r+0x1c2>
 8017a76:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8017a78:	eb01 0a03 	add.w	sl, r1, r3
 8017a7c:	f20a 4332 	addw	r3, sl, #1074	; 0x432
 8017a80:	2b20      	cmp	r3, #32
 8017a82:	dd17      	ble.n	8017ab4 <_dtoa_r+0x1b4>
 8017a84:	f1c3 0340 	rsb	r3, r3, #64	; 0x40
 8017a88:	9a02      	ldr	r2, [sp, #8]
 8017a8a:	409d      	lsls	r5, r3
 8017a8c:	f20a 4312 	addw	r3, sl, #1042	; 0x412
 8017a90:	fa22 f303 	lsr.w	r3, r2, r3
 8017a94:	432b      	orrs	r3, r5
 8017a96:	ee07 3a90 	vmov	s15, r3
 8017a9a:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 8017a9e:	f10a 3aff 	add.w	sl, sl, #4294967295
 8017aa2:	ed8d 7b04 	vstr	d7, [sp, #16]
 8017aa6:	9805      	ldr	r0, [sp, #20]
 8017aa8:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8017aac:	2701      	movs	r7, #1
 8017aae:	f1a0 73f8 	sub.w	r3, r0, #32505856	; 0x1f00000
 8017ab2:	e7a5      	b.n	8017a00 <_dtoa_r+0x100>
 8017ab4:	9a02      	ldr	r2, [sp, #8]
 8017ab6:	f1c3 0320 	rsb	r3, r3, #32
 8017aba:	fa02 f303 	lsl.w	r3, r2, r3
 8017abe:	e7ea      	b.n	8017a96 <_dtoa_r+0x196>
 8017ac0:	2301      	movs	r3, #1
 8017ac2:	eba1 0a0a 	sub.w	sl, r1, sl
 8017ac6:	9310      	str	r3, [sp, #64]	; 0x40
 8017ac8:	f1ba 0301 	subs.w	r3, sl, #1
 8017acc:	9307      	str	r3, [sp, #28]
 8017ace:	bf43      	ittte	mi
 8017ad0:	2300      	movmi	r3, #0
 8017ad2:	f1ca 0a01 	rsbmi	sl, sl, #1
 8017ad6:	9307      	strmi	r3, [sp, #28]
 8017ad8:	f04f 0a00 	movpl.w	sl, #0
 8017adc:	f1bb 0f00 	cmp.w	fp, #0
 8017ae0:	db19      	blt.n	8017b16 <_dtoa_r+0x216>
 8017ae2:	9b07      	ldr	r3, [sp, #28]
 8017ae4:	f8cd b02c 	str.w	fp, [sp, #44]	; 0x2c
 8017ae8:	445b      	add	r3, fp
 8017aea:	9307      	str	r3, [sp, #28]
 8017aec:	f04f 0800 	mov.w	r8, #0
 8017af0:	9b08      	ldr	r3, [sp, #32]
 8017af2:	2b09      	cmp	r3, #9
 8017af4:	d866      	bhi.n	8017bc4 <_dtoa_r+0x2c4>
 8017af6:	2b05      	cmp	r3, #5
 8017af8:	bfc4      	itt	gt
 8017afa:	3b04      	subgt	r3, #4
 8017afc:	9308      	strgt	r3, [sp, #32]
 8017afe:	9b08      	ldr	r3, [sp, #32]
 8017b00:	f1a3 0302 	sub.w	r3, r3, #2
 8017b04:	bfcc      	ite	gt
 8017b06:	2500      	movgt	r5, #0
 8017b08:	2501      	movle	r5, #1
 8017b0a:	2b03      	cmp	r3, #3
 8017b0c:	d866      	bhi.n	8017bdc <_dtoa_r+0x2dc>
 8017b0e:	e8df f003 	tbb	[pc, r3]
 8017b12:	5755      	.short	0x5755
 8017b14:	4909      	.short	0x4909
 8017b16:	2300      	movs	r3, #0
 8017b18:	ebaa 0a0b 	sub.w	sl, sl, fp
 8017b1c:	f1cb 0800 	rsb	r8, fp, #0
 8017b20:	930b      	str	r3, [sp, #44]	; 0x2c
 8017b22:	e7e5      	b.n	8017af0 <_dtoa_r+0x1f0>
 8017b24:	2301      	movs	r3, #1
 8017b26:	9309      	str	r3, [sp, #36]	; 0x24
 8017b28:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8017b2a:	2b00      	cmp	r3, #0
 8017b2c:	dd59      	ble.n	8017be2 <_dtoa_r+0x2e2>
 8017b2e:	9306      	str	r3, [sp, #24]
 8017b30:	4699      	mov	r9, r3
 8017b32:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8017b34:	2200      	movs	r2, #0
 8017b36:	6072      	str	r2, [r6, #4]
 8017b38:	2204      	movs	r2, #4
 8017b3a:	f102 0014 	add.w	r0, r2, #20
 8017b3e:	4298      	cmp	r0, r3
 8017b40:	6871      	ldr	r1, [r6, #4]
 8017b42:	d953      	bls.n	8017bec <_dtoa_r+0x2ec>
 8017b44:	4620      	mov	r0, r4
 8017b46:	f000 ff75 	bl	8018a34 <_Balloc>
 8017b4a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8017b4c:	6030      	str	r0, [r6, #0]
 8017b4e:	681b      	ldr	r3, [r3, #0]
 8017b50:	9304      	str	r3, [sp, #16]
 8017b52:	f1b9 0f0e 	cmp.w	r9, #14
 8017b56:	f200 80c2 	bhi.w	8017cde <_dtoa_r+0x3de>
 8017b5a:	2d00      	cmp	r5, #0
 8017b5c:	f000 80bf 	beq.w	8017cde <_dtoa_r+0x3de>
 8017b60:	ed9d 7b02 	vldr	d7, [sp, #8]
 8017b64:	f1bb 0f00 	cmp.w	fp, #0
 8017b68:	ed8d 7b0e 	vstr	d7, [sp, #56]	; 0x38
 8017b6c:	f340 80e6 	ble.w	8017d3c <_dtoa_r+0x43c>
 8017b70:	4a2b      	ldr	r2, [pc, #172]	; (8017c20 <_dtoa_r+0x320>)
 8017b72:	f00b 030f 	and.w	r3, fp, #15
 8017b76:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8017b7a:	ed93 7b00 	vldr	d7, [r3]
 8017b7e:	ea4f 132b 	mov.w	r3, fp, asr #4
 8017b82:	06da      	lsls	r2, r3, #27
 8017b84:	f140 80d8 	bpl.w	8017d38 <_dtoa_r+0x438>
 8017b88:	4a26      	ldr	r2, [pc, #152]	; (8017c24 <_dtoa_r+0x324>)
 8017b8a:	ed9d 5b0e 	vldr	d5, [sp, #56]	; 0x38
 8017b8e:	ed92 6b08 	vldr	d6, [r2, #32]
 8017b92:	ee85 6b06 	vdiv.f64	d6, d5, d6
 8017b96:	ed8d 6b02 	vstr	d6, [sp, #8]
 8017b9a:	f003 030f 	and.w	r3, r3, #15
 8017b9e:	2203      	movs	r2, #3
 8017ba0:	4920      	ldr	r1, [pc, #128]	; (8017c24 <_dtoa_r+0x324>)
 8017ba2:	e04a      	b.n	8017c3a <_dtoa_r+0x33a>
 8017ba4:	2301      	movs	r3, #1
 8017ba6:	9309      	str	r3, [sp, #36]	; 0x24
 8017ba8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8017baa:	445b      	add	r3, fp
 8017bac:	f103 0901 	add.w	r9, r3, #1
 8017bb0:	9306      	str	r3, [sp, #24]
 8017bb2:	464b      	mov	r3, r9
 8017bb4:	2b01      	cmp	r3, #1
 8017bb6:	bfb8      	it	lt
 8017bb8:	2301      	movlt	r3, #1
 8017bba:	e7ba      	b.n	8017b32 <_dtoa_r+0x232>
 8017bbc:	2300      	movs	r3, #0
 8017bbe:	e7b2      	b.n	8017b26 <_dtoa_r+0x226>
 8017bc0:	2300      	movs	r3, #0
 8017bc2:	e7f0      	b.n	8017ba6 <_dtoa_r+0x2a6>
 8017bc4:	2501      	movs	r5, #1
 8017bc6:	2300      	movs	r3, #0
 8017bc8:	e9cd 3508 	strd	r3, r5, [sp, #32]
 8017bcc:	f04f 33ff 	mov.w	r3, #4294967295
 8017bd0:	9306      	str	r3, [sp, #24]
 8017bd2:	4699      	mov	r9, r3
 8017bd4:	2200      	movs	r2, #0
 8017bd6:	2312      	movs	r3, #18
 8017bd8:	920a      	str	r2, [sp, #40]	; 0x28
 8017bda:	e7aa      	b.n	8017b32 <_dtoa_r+0x232>
 8017bdc:	2301      	movs	r3, #1
 8017bde:	9309      	str	r3, [sp, #36]	; 0x24
 8017be0:	e7f4      	b.n	8017bcc <_dtoa_r+0x2cc>
 8017be2:	2301      	movs	r3, #1
 8017be4:	9306      	str	r3, [sp, #24]
 8017be6:	4699      	mov	r9, r3
 8017be8:	461a      	mov	r2, r3
 8017bea:	e7f5      	b.n	8017bd8 <_dtoa_r+0x2d8>
 8017bec:	3101      	adds	r1, #1
 8017bee:	6071      	str	r1, [r6, #4]
 8017bf0:	0052      	lsls	r2, r2, #1
 8017bf2:	e7a2      	b.n	8017b3a <_dtoa_r+0x23a>
 8017bf4:	f3af 8000 	nop.w
 8017bf8:	636f4361 	.word	0x636f4361
 8017bfc:	3fd287a7 	.word	0x3fd287a7
 8017c00:	8b60c8b3 	.word	0x8b60c8b3
 8017c04:	3fc68a28 	.word	0x3fc68a28
 8017c08:	509f79fb 	.word	0x509f79fb
 8017c0c:	3fd34413 	.word	0x3fd34413
 8017c10:	7ff00000 	.word	0x7ff00000
 8017c14:	0801c281 	.word	0x0801c281
 8017c18:	0801c278 	.word	0x0801c278
 8017c1c:	0801c1f9 	.word	0x0801c1f9
 8017c20:	0801c2b8 	.word	0x0801c2b8
 8017c24:	0801c290 	.word	0x0801c290
 8017c28:	07de      	lsls	r6, r3, #31
 8017c2a:	d504      	bpl.n	8017c36 <_dtoa_r+0x336>
 8017c2c:	ed91 6b00 	vldr	d6, [r1]
 8017c30:	3201      	adds	r2, #1
 8017c32:	ee27 7b06 	vmul.f64	d7, d7, d6
 8017c36:	105b      	asrs	r3, r3, #1
 8017c38:	3108      	adds	r1, #8
 8017c3a:	2b00      	cmp	r3, #0
 8017c3c:	d1f4      	bne.n	8017c28 <_dtoa_r+0x328>
 8017c3e:	ed9d 6b02 	vldr	d6, [sp, #8]
 8017c42:	ee86 7b07 	vdiv.f64	d7, d6, d7
 8017c46:	ed8d 7b02 	vstr	d7, [sp, #8]
 8017c4a:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8017c4c:	2b00      	cmp	r3, #0
 8017c4e:	f000 80a7 	beq.w	8017da0 <_dtoa_r+0x4a0>
 8017c52:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 8017c56:	ed9d 7b02 	vldr	d7, [sp, #8]
 8017c5a:	eeb4 7bc6 	vcmpe.f64	d7, d6
 8017c5e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8017c62:	f140 809d 	bpl.w	8017da0 <_dtoa_r+0x4a0>
 8017c66:	f1b9 0f00 	cmp.w	r9, #0
 8017c6a:	f000 8099 	beq.w	8017da0 <_dtoa_r+0x4a0>
 8017c6e:	9b06      	ldr	r3, [sp, #24]
 8017c70:	2b00      	cmp	r3, #0
 8017c72:	dd30      	ble.n	8017cd6 <_dtoa_r+0x3d6>
 8017c74:	eeb2 6b04 	vmov.f64	d6, #36	; 0x41200000  10.0
 8017c78:	ee27 7b06 	vmul.f64	d7, d7, d6
 8017c7c:	ed8d 7b02 	vstr	d7, [sp, #8]
 8017c80:	9d06      	ldr	r5, [sp, #24]
 8017c82:	f10b 33ff 	add.w	r3, fp, #4294967295
 8017c86:	3201      	adds	r2, #1
 8017c88:	ed9d 6b02 	vldr	d6, [sp, #8]
 8017c8c:	eeb1 5b0c 	vmov.f64	d5, #28	; 0x40e00000  7.0
 8017c90:	ee07 2a90 	vmov	s15, r2
 8017c94:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8017c98:	eea7 5b06 	vfma.f64	d5, d7, d6
 8017c9c:	ed8d 5b02 	vstr	d5, [sp, #8]
 8017ca0:	9a03      	ldr	r2, [sp, #12]
 8017ca2:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8017ca6:	f1a2 7150 	sub.w	r1, r2, #54525952	; 0x3400000
 8017caa:	2d00      	cmp	r5, #0
 8017cac:	d17b      	bne.n	8017da6 <_dtoa_r+0x4a6>
 8017cae:	eeb1 7b04 	vmov.f64	d7, #20	; 0x40a00000  5.0
 8017cb2:	ee36 6b47 	vsub.f64	d6, d6, d7
 8017cb6:	ec41 0b17 	vmov	d7, r0, r1
 8017cba:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8017cbe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8017cc2:	f300 8253 	bgt.w	801816c <_dtoa_r+0x86c>
 8017cc6:	eeb1 7b47 	vneg.f64	d7, d7
 8017cca:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8017cce:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8017cd2:	f100 8249 	bmi.w	8018168 <_dtoa_r+0x868>
 8017cd6:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
 8017cda:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8017cde:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8017ce0:	2b00      	cmp	r3, #0
 8017ce2:	f2c0 8119 	blt.w	8017f18 <_dtoa_r+0x618>
 8017ce6:	f1bb 0f0e 	cmp.w	fp, #14
 8017cea:	f300 8115 	bgt.w	8017f18 <_dtoa_r+0x618>
 8017cee:	4bc3      	ldr	r3, [pc, #780]	; (8017ffc <_dtoa_r+0x6fc>)
 8017cf0:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 8017cf4:	ed93 6b00 	vldr	d6, [r3]
 8017cf8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8017cfa:	2b00      	cmp	r3, #0
 8017cfc:	f280 80ba 	bge.w	8017e74 <_dtoa_r+0x574>
 8017d00:	f1b9 0f00 	cmp.w	r9, #0
 8017d04:	f300 80b6 	bgt.w	8017e74 <_dtoa_r+0x574>
 8017d08:	f040 822d 	bne.w	8018166 <_dtoa_r+0x866>
 8017d0c:	eeb1 7b04 	vmov.f64	d7, #20	; 0x40a00000  5.0
 8017d10:	ee26 6b07 	vmul.f64	d6, d6, d7
 8017d14:	ed9d 7b02 	vldr	d7, [sp, #8]
 8017d18:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8017d1c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8017d20:	464d      	mov	r5, r9
 8017d22:	464f      	mov	r7, r9
 8017d24:	f280 8204 	bge.w	8018130 <_dtoa_r+0x830>
 8017d28:	9b04      	ldr	r3, [sp, #16]
 8017d2a:	9a04      	ldr	r2, [sp, #16]
 8017d2c:	1c5e      	adds	r6, r3, #1
 8017d2e:	2331      	movs	r3, #49	; 0x31
 8017d30:	7013      	strb	r3, [r2, #0]
 8017d32:	f10b 0b01 	add.w	fp, fp, #1
 8017d36:	e1ff      	b.n	8018138 <_dtoa_r+0x838>
 8017d38:	2202      	movs	r2, #2
 8017d3a:	e731      	b.n	8017ba0 <_dtoa_r+0x2a0>
 8017d3c:	d02e      	beq.n	8017d9c <_dtoa_r+0x49c>
 8017d3e:	f1cb 0300 	rsb	r3, fp, #0
 8017d42:	4aae      	ldr	r2, [pc, #696]	; (8017ffc <_dtoa_r+0x6fc>)
 8017d44:	f003 010f 	and.w	r1, r3, #15
 8017d48:	eb02 02c1 	add.w	r2, r2, r1, lsl #3
 8017d4c:	ed92 7b00 	vldr	d7, [r2]
 8017d50:	ed9d 6b0e 	vldr	d6, [sp, #56]	; 0x38
 8017d54:	ee26 7b07 	vmul.f64	d7, d6, d7
 8017d58:	ed8d 7b0c 	vstr	d7, [sp, #48]	; 0x30
 8017d5c:	e9dd 120c 	ldrd	r1, r2, [sp, #48]	; 0x30
 8017d60:	e9cd 1202 	strd	r1, r2, [sp, #8]
 8017d64:	49a6      	ldr	r1, [pc, #664]	; (8018000 <_dtoa_r+0x700>)
 8017d66:	111b      	asrs	r3, r3, #4
 8017d68:	2000      	movs	r0, #0
 8017d6a:	2202      	movs	r2, #2
 8017d6c:	b93b      	cbnz	r3, 8017d7e <_dtoa_r+0x47e>
 8017d6e:	2800      	cmp	r0, #0
 8017d70:	f43f af6b 	beq.w	8017c4a <_dtoa_r+0x34a>
 8017d74:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8017d78:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8017d7c:	e765      	b.n	8017c4a <_dtoa_r+0x34a>
 8017d7e:	07dd      	lsls	r5, r3, #31
 8017d80:	d509      	bpl.n	8017d96 <_dtoa_r+0x496>
 8017d82:	ed9d 6b0c 	vldr	d6, [sp, #48]	; 0x30
 8017d86:	ed91 7b00 	vldr	d7, [r1]
 8017d8a:	ee26 7b07 	vmul.f64	d7, d6, d7
 8017d8e:	ed8d 7b0c 	vstr	d7, [sp, #48]	; 0x30
 8017d92:	3201      	adds	r2, #1
 8017d94:	2001      	movs	r0, #1
 8017d96:	105b      	asrs	r3, r3, #1
 8017d98:	3108      	adds	r1, #8
 8017d9a:	e7e7      	b.n	8017d6c <_dtoa_r+0x46c>
 8017d9c:	2202      	movs	r2, #2
 8017d9e:	e754      	b.n	8017c4a <_dtoa_r+0x34a>
 8017da0:	465b      	mov	r3, fp
 8017da2:	464d      	mov	r5, r9
 8017da4:	e770      	b.n	8017c88 <_dtoa_r+0x388>
 8017da6:	4a95      	ldr	r2, [pc, #596]	; (8017ffc <_dtoa_r+0x6fc>)
 8017da8:	eb02 02c5 	add.w	r2, r2, r5, lsl #3
 8017dac:	ed12 4b02 	vldr	d4, [r2, #-8]
 8017db0:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8017db2:	ec41 0b17 	vmov	d7, r0, r1
 8017db6:	b35a      	cbz	r2, 8017e10 <_dtoa_r+0x510>
 8017db8:	eeb6 3b00 	vmov.f64	d3, #96	; 0x3f000000  0.5
 8017dbc:	eeb7 2b00 	vmov.f64	d2, #112	; 0x3f800000  1.0
 8017dc0:	9e04      	ldr	r6, [sp, #16]
 8017dc2:	ee83 5b04 	vdiv.f64	d5, d3, d4
 8017dc6:	eeb2 3b04 	vmov.f64	d3, #36	; 0x41200000  10.0
 8017dca:	ee35 7b47 	vsub.f64	d7, d5, d7
 8017dce:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 8017dd2:	ee14 2a90 	vmov	r2, s9
 8017dd6:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 8017dda:	3230      	adds	r2, #48	; 0x30
 8017ddc:	ee36 6b45 	vsub.f64	d6, d6, d5
 8017de0:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8017de4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8017de8:	f806 2b01 	strb.w	r2, [r6], #1
 8017dec:	d43b      	bmi.n	8017e66 <_dtoa_r+0x566>
 8017dee:	ee32 5b46 	vsub.f64	d5, d2, d6
 8017df2:	eeb4 5bc7 	vcmpe.f64	d5, d7
 8017df6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8017dfa:	d472      	bmi.n	8017ee2 <_dtoa_r+0x5e2>
 8017dfc:	9a04      	ldr	r2, [sp, #16]
 8017dfe:	1ab2      	subs	r2, r6, r2
 8017e00:	4295      	cmp	r5, r2
 8017e02:	f77f af68 	ble.w	8017cd6 <_dtoa_r+0x3d6>
 8017e06:	ee27 7b03 	vmul.f64	d7, d7, d3
 8017e0a:	ee26 6b03 	vmul.f64	d6, d6, d3
 8017e0e:	e7de      	b.n	8017dce <_dtoa_r+0x4ce>
 8017e10:	9a04      	ldr	r2, [sp, #16]
 8017e12:	ee24 7b07 	vmul.f64	d7, d4, d7
 8017e16:	1956      	adds	r6, r2, r5
 8017e18:	4611      	mov	r1, r2
 8017e1a:	eeb2 3b04 	vmov.f64	d3, #36	; 0x41200000  10.0
 8017e1e:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 8017e22:	ee14 2a90 	vmov	r2, s9
 8017e26:	3230      	adds	r2, #48	; 0x30
 8017e28:	f801 2b01 	strb.w	r2, [r1], #1
 8017e2c:	42b1      	cmp	r1, r6
 8017e2e:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 8017e32:	ee36 6b45 	vsub.f64	d6, d6, d5
 8017e36:	d11a      	bne.n	8017e6e <_dtoa_r+0x56e>
 8017e38:	eeb6 5b00 	vmov.f64	d5, #96	; 0x3f000000  0.5
 8017e3c:	ee37 4b05 	vadd.f64	d4, d7, d5
 8017e40:	eeb4 6bc4 	vcmpe.f64	d6, d4
 8017e44:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8017e48:	dc4b      	bgt.n	8017ee2 <_dtoa_r+0x5e2>
 8017e4a:	ee35 7b47 	vsub.f64	d7, d5, d7
 8017e4e:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8017e52:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8017e56:	f57f af3e 	bpl.w	8017cd6 <_dtoa_r+0x3d6>
 8017e5a:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 8017e5e:	2a30      	cmp	r2, #48	; 0x30
 8017e60:	f106 31ff 	add.w	r1, r6, #4294967295
 8017e64:	d001      	beq.n	8017e6a <_dtoa_r+0x56a>
 8017e66:	469b      	mov	fp, r3
 8017e68:	e02a      	b.n	8017ec0 <_dtoa_r+0x5c0>
 8017e6a:	460e      	mov	r6, r1
 8017e6c:	e7f5      	b.n	8017e5a <_dtoa_r+0x55a>
 8017e6e:	ee26 6b03 	vmul.f64	d6, d6, d3
 8017e72:	e7d4      	b.n	8017e1e <_dtoa_r+0x51e>
 8017e74:	ed9d 7b02 	vldr	d7, [sp, #8]
 8017e78:	eeb2 4b04 	vmov.f64	d4, #36	; 0x41200000  10.0
 8017e7c:	9e04      	ldr	r6, [sp, #16]
 8017e7e:	ee87 5b06 	vdiv.f64	d5, d7, d6
 8017e82:	eebd 5bc5 	vcvt.s32.f64	s10, d5
 8017e86:	ee15 3a10 	vmov	r3, s10
 8017e8a:	3330      	adds	r3, #48	; 0x30
 8017e8c:	f806 3b01 	strb.w	r3, [r6], #1
 8017e90:	9b04      	ldr	r3, [sp, #16]
 8017e92:	1af3      	subs	r3, r6, r3
 8017e94:	4599      	cmp	r9, r3
 8017e96:	eeb8 3bc5 	vcvt.f64.s32	d3, s10
 8017e9a:	eea3 7b46 	vfms.f64	d7, d3, d6
 8017e9e:	d133      	bne.n	8017f08 <_dtoa_r+0x608>
 8017ea0:	ee37 7b07 	vadd.f64	d7, d7, d7
 8017ea4:	eeb4 7bc6 	vcmpe.f64	d7, d6
 8017ea8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8017eac:	dc18      	bgt.n	8017ee0 <_dtoa_r+0x5e0>
 8017eae:	eeb4 7b46 	vcmp.f64	d7, d6
 8017eb2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8017eb6:	d103      	bne.n	8017ec0 <_dtoa_r+0x5c0>
 8017eb8:	ee15 3a10 	vmov	r3, s10
 8017ebc:	07db      	lsls	r3, r3, #31
 8017ebe:	d40f      	bmi.n	8017ee0 <_dtoa_r+0x5e0>
 8017ec0:	9901      	ldr	r1, [sp, #4]
 8017ec2:	4620      	mov	r0, r4
 8017ec4:	f000 fdea 	bl	8018a9c <_Bfree>
 8017ec8:	2300      	movs	r3, #0
 8017eca:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8017ecc:	7033      	strb	r3, [r6, #0]
 8017ece:	f10b 0301 	add.w	r3, fp, #1
 8017ed2:	6013      	str	r3, [r2, #0]
 8017ed4:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8017ed6:	2b00      	cmp	r3, #0
 8017ed8:	f43f ad5b 	beq.w	8017992 <_dtoa_r+0x92>
 8017edc:	601e      	str	r6, [r3, #0]
 8017ede:	e558      	b.n	8017992 <_dtoa_r+0x92>
 8017ee0:	465b      	mov	r3, fp
 8017ee2:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 8017ee6:	2939      	cmp	r1, #57	; 0x39
 8017ee8:	f106 32ff 	add.w	r2, r6, #4294967295
 8017eec:	d106      	bne.n	8017efc <_dtoa_r+0x5fc>
 8017eee:	9904      	ldr	r1, [sp, #16]
 8017ef0:	4291      	cmp	r1, r2
 8017ef2:	d107      	bne.n	8017f04 <_dtoa_r+0x604>
 8017ef4:	2230      	movs	r2, #48	; 0x30
 8017ef6:	700a      	strb	r2, [r1, #0]
 8017ef8:	3301      	adds	r3, #1
 8017efa:	460a      	mov	r2, r1
 8017efc:	7811      	ldrb	r1, [r2, #0]
 8017efe:	3101      	adds	r1, #1
 8017f00:	7011      	strb	r1, [r2, #0]
 8017f02:	e7b0      	b.n	8017e66 <_dtoa_r+0x566>
 8017f04:	4616      	mov	r6, r2
 8017f06:	e7ec      	b.n	8017ee2 <_dtoa_r+0x5e2>
 8017f08:	ee27 7b04 	vmul.f64	d7, d7, d4
 8017f0c:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8017f10:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8017f14:	d1b3      	bne.n	8017e7e <_dtoa_r+0x57e>
 8017f16:	e7d3      	b.n	8017ec0 <_dtoa_r+0x5c0>
 8017f18:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8017f1a:	2a00      	cmp	r2, #0
 8017f1c:	f000 808d 	beq.w	801803a <_dtoa_r+0x73a>
 8017f20:	9a08      	ldr	r2, [sp, #32]
 8017f22:	2a01      	cmp	r2, #1
 8017f24:	dc72      	bgt.n	801800c <_dtoa_r+0x70c>
 8017f26:	2f00      	cmp	r7, #0
 8017f28:	d06c      	beq.n	8018004 <_dtoa_r+0x704>
 8017f2a:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8017f2e:	4645      	mov	r5, r8
 8017f30:	4656      	mov	r6, sl
 8017f32:	9a07      	ldr	r2, [sp, #28]
 8017f34:	2101      	movs	r1, #1
 8017f36:	441a      	add	r2, r3
 8017f38:	4620      	mov	r0, r4
 8017f3a:	449a      	add	sl, r3
 8017f3c:	9207      	str	r2, [sp, #28]
 8017f3e:	f000 fe8b 	bl	8018c58 <__i2b>
 8017f42:	4607      	mov	r7, r0
 8017f44:	2e00      	cmp	r6, #0
 8017f46:	dd0b      	ble.n	8017f60 <_dtoa_r+0x660>
 8017f48:	9b07      	ldr	r3, [sp, #28]
 8017f4a:	2b00      	cmp	r3, #0
 8017f4c:	dd08      	ble.n	8017f60 <_dtoa_r+0x660>
 8017f4e:	42b3      	cmp	r3, r6
 8017f50:	9a07      	ldr	r2, [sp, #28]
 8017f52:	bfa8      	it	ge
 8017f54:	4633      	movge	r3, r6
 8017f56:	ebaa 0a03 	sub.w	sl, sl, r3
 8017f5a:	1af6      	subs	r6, r6, r3
 8017f5c:	1ad3      	subs	r3, r2, r3
 8017f5e:	9307      	str	r3, [sp, #28]
 8017f60:	f1b8 0f00 	cmp.w	r8, #0
 8017f64:	d01d      	beq.n	8017fa2 <_dtoa_r+0x6a2>
 8017f66:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8017f68:	2b00      	cmp	r3, #0
 8017f6a:	d06a      	beq.n	8018042 <_dtoa_r+0x742>
 8017f6c:	b18d      	cbz	r5, 8017f92 <_dtoa_r+0x692>
 8017f6e:	4639      	mov	r1, r7
 8017f70:	462a      	mov	r2, r5
 8017f72:	4620      	mov	r0, r4
 8017f74:	f000 ff10 	bl	8018d98 <__pow5mult>
 8017f78:	9a01      	ldr	r2, [sp, #4]
 8017f7a:	4601      	mov	r1, r0
 8017f7c:	4607      	mov	r7, r0
 8017f7e:	4620      	mov	r0, r4
 8017f80:	f000 fe73 	bl	8018c6a <__multiply>
 8017f84:	9901      	ldr	r1, [sp, #4]
 8017f86:	900c      	str	r0, [sp, #48]	; 0x30
 8017f88:	4620      	mov	r0, r4
 8017f8a:	f000 fd87 	bl	8018a9c <_Bfree>
 8017f8e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8017f90:	9301      	str	r3, [sp, #4]
 8017f92:	ebb8 0205 	subs.w	r2, r8, r5
 8017f96:	d004      	beq.n	8017fa2 <_dtoa_r+0x6a2>
 8017f98:	9901      	ldr	r1, [sp, #4]
 8017f9a:	4620      	mov	r0, r4
 8017f9c:	f000 fefc 	bl	8018d98 <__pow5mult>
 8017fa0:	9001      	str	r0, [sp, #4]
 8017fa2:	2101      	movs	r1, #1
 8017fa4:	4620      	mov	r0, r4
 8017fa6:	f000 fe57 	bl	8018c58 <__i2b>
 8017faa:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8017fac:	4605      	mov	r5, r0
 8017fae:	2b00      	cmp	r3, #0
 8017fb0:	f000 81ca 	beq.w	8018348 <_dtoa_r+0xa48>
 8017fb4:	461a      	mov	r2, r3
 8017fb6:	4601      	mov	r1, r0
 8017fb8:	4620      	mov	r0, r4
 8017fba:	f000 feed 	bl	8018d98 <__pow5mult>
 8017fbe:	9b08      	ldr	r3, [sp, #32]
 8017fc0:	2b01      	cmp	r3, #1
 8017fc2:	4605      	mov	r5, r0
 8017fc4:	dc44      	bgt.n	8018050 <_dtoa_r+0x750>
 8017fc6:	9b02      	ldr	r3, [sp, #8]
 8017fc8:	2b00      	cmp	r3, #0
 8017fca:	d13c      	bne.n	8018046 <_dtoa_r+0x746>
 8017fcc:	9b03      	ldr	r3, [sp, #12]
 8017fce:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8017fd2:	2b00      	cmp	r3, #0
 8017fd4:	d137      	bne.n	8018046 <_dtoa_r+0x746>
 8017fd6:	9b03      	ldr	r3, [sp, #12]
 8017fd8:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8017fdc:	0d1b      	lsrs	r3, r3, #20
 8017fde:	051b      	lsls	r3, r3, #20
 8017fe0:	2b00      	cmp	r3, #0
 8017fe2:	d033      	beq.n	801804c <_dtoa_r+0x74c>
 8017fe4:	9b07      	ldr	r3, [sp, #28]
 8017fe6:	3301      	adds	r3, #1
 8017fe8:	f10a 0a01 	add.w	sl, sl, #1
 8017fec:	9307      	str	r3, [sp, #28]
 8017fee:	f04f 0801 	mov.w	r8, #1
 8017ff2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8017ff4:	bb73      	cbnz	r3, 8018054 <_dtoa_r+0x754>
 8017ff6:	2001      	movs	r0, #1
 8017ff8:	e034      	b.n	8018064 <_dtoa_r+0x764>
 8017ffa:	bf00      	nop
 8017ffc:	0801c2b8 	.word	0x0801c2b8
 8018000:	0801c290 	.word	0x0801c290
 8018004:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8018006:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 801800a:	e790      	b.n	8017f2e <_dtoa_r+0x62e>
 801800c:	f109 35ff 	add.w	r5, r9, #4294967295
 8018010:	45a8      	cmp	r8, r5
 8018012:	bfbf      	itttt	lt
 8018014:	9b0b      	ldrlt	r3, [sp, #44]	; 0x2c
 8018016:	eba5 0808 	sublt.w	r8, r5, r8
 801801a:	4443      	addlt	r3, r8
 801801c:	930b      	strlt	r3, [sp, #44]	; 0x2c
 801801e:	bfb6      	itet	lt
 8018020:	46a8      	movlt	r8, r5
 8018022:	eba8 0505 	subge.w	r5, r8, r5
 8018026:	2500      	movlt	r5, #0
 8018028:	f1b9 0f00 	cmp.w	r9, #0
 801802c:	bfb9      	ittee	lt
 801802e:	ebaa 0609 	sublt.w	r6, sl, r9
 8018032:	2300      	movlt	r3, #0
 8018034:	4656      	movge	r6, sl
 8018036:	464b      	movge	r3, r9
 8018038:	e77b      	b.n	8017f32 <_dtoa_r+0x632>
 801803a:	4645      	mov	r5, r8
 801803c:	4656      	mov	r6, sl
 801803e:	9f09      	ldr	r7, [sp, #36]	; 0x24
 8018040:	e780      	b.n	8017f44 <_dtoa_r+0x644>
 8018042:	4642      	mov	r2, r8
 8018044:	e7a8      	b.n	8017f98 <_dtoa_r+0x698>
 8018046:	f04f 0800 	mov.w	r8, #0
 801804a:	e7d2      	b.n	8017ff2 <_dtoa_r+0x6f2>
 801804c:	4698      	mov	r8, r3
 801804e:	e7d0      	b.n	8017ff2 <_dtoa_r+0x6f2>
 8018050:	f04f 0800 	mov.w	r8, #0
 8018054:	692b      	ldr	r3, [r5, #16]
 8018056:	eb05 0383 	add.w	r3, r5, r3, lsl #2
 801805a:	6918      	ldr	r0, [r3, #16]
 801805c:	f000 fdae 	bl	8018bbc <__hi0bits>
 8018060:	f1c0 0020 	rsb	r0, r0, #32
 8018064:	9b07      	ldr	r3, [sp, #28]
 8018066:	4418      	add	r0, r3
 8018068:	f010 001f 	ands.w	r0, r0, #31
 801806c:	d047      	beq.n	80180fe <_dtoa_r+0x7fe>
 801806e:	f1c0 0320 	rsb	r3, r0, #32
 8018072:	2b04      	cmp	r3, #4
 8018074:	dd3b      	ble.n	80180ee <_dtoa_r+0x7ee>
 8018076:	9b07      	ldr	r3, [sp, #28]
 8018078:	f1c0 001c 	rsb	r0, r0, #28
 801807c:	4482      	add	sl, r0
 801807e:	4406      	add	r6, r0
 8018080:	4403      	add	r3, r0
 8018082:	9307      	str	r3, [sp, #28]
 8018084:	f1ba 0f00 	cmp.w	sl, #0
 8018088:	dd05      	ble.n	8018096 <_dtoa_r+0x796>
 801808a:	4652      	mov	r2, sl
 801808c:	9901      	ldr	r1, [sp, #4]
 801808e:	4620      	mov	r0, r4
 8018090:	f000 fed0 	bl	8018e34 <__lshift>
 8018094:	9001      	str	r0, [sp, #4]
 8018096:	9b07      	ldr	r3, [sp, #28]
 8018098:	2b00      	cmp	r3, #0
 801809a:	dd05      	ble.n	80180a8 <_dtoa_r+0x7a8>
 801809c:	4629      	mov	r1, r5
 801809e:	461a      	mov	r2, r3
 80180a0:	4620      	mov	r0, r4
 80180a2:	f000 fec7 	bl	8018e34 <__lshift>
 80180a6:	4605      	mov	r5, r0
 80180a8:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80180aa:	b353      	cbz	r3, 8018102 <_dtoa_r+0x802>
 80180ac:	4629      	mov	r1, r5
 80180ae:	9801      	ldr	r0, [sp, #4]
 80180b0:	f000 ff14 	bl	8018edc <__mcmp>
 80180b4:	2800      	cmp	r0, #0
 80180b6:	da24      	bge.n	8018102 <_dtoa_r+0x802>
 80180b8:	2300      	movs	r3, #0
 80180ba:	220a      	movs	r2, #10
 80180bc:	9901      	ldr	r1, [sp, #4]
 80180be:	4620      	mov	r0, r4
 80180c0:	f000 fd03 	bl	8018aca <__multadd>
 80180c4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80180c6:	9001      	str	r0, [sp, #4]
 80180c8:	f10b 3bff 	add.w	fp, fp, #4294967295
 80180cc:	2b00      	cmp	r3, #0
 80180ce:	f000 8142 	beq.w	8018356 <_dtoa_r+0xa56>
 80180d2:	2300      	movs	r3, #0
 80180d4:	4639      	mov	r1, r7
 80180d6:	220a      	movs	r2, #10
 80180d8:	4620      	mov	r0, r4
 80180da:	f000 fcf6 	bl	8018aca <__multadd>
 80180de:	9b06      	ldr	r3, [sp, #24]
 80180e0:	2b00      	cmp	r3, #0
 80180e2:	4607      	mov	r7, r0
 80180e4:	dc4b      	bgt.n	801817e <_dtoa_r+0x87e>
 80180e6:	9b08      	ldr	r3, [sp, #32]
 80180e8:	2b02      	cmp	r3, #2
 80180ea:	dd48      	ble.n	801817e <_dtoa_r+0x87e>
 80180ec:	e011      	b.n	8018112 <_dtoa_r+0x812>
 80180ee:	d0c9      	beq.n	8018084 <_dtoa_r+0x784>
 80180f0:	9a07      	ldr	r2, [sp, #28]
 80180f2:	331c      	adds	r3, #28
 80180f4:	441a      	add	r2, r3
 80180f6:	449a      	add	sl, r3
 80180f8:	441e      	add	r6, r3
 80180fa:	4613      	mov	r3, r2
 80180fc:	e7c1      	b.n	8018082 <_dtoa_r+0x782>
 80180fe:	4603      	mov	r3, r0
 8018100:	e7f6      	b.n	80180f0 <_dtoa_r+0x7f0>
 8018102:	f1b9 0f00 	cmp.w	r9, #0
 8018106:	dc34      	bgt.n	8018172 <_dtoa_r+0x872>
 8018108:	9b08      	ldr	r3, [sp, #32]
 801810a:	2b02      	cmp	r3, #2
 801810c:	dd31      	ble.n	8018172 <_dtoa_r+0x872>
 801810e:	f8cd 9018 	str.w	r9, [sp, #24]
 8018112:	9b06      	ldr	r3, [sp, #24]
 8018114:	b963      	cbnz	r3, 8018130 <_dtoa_r+0x830>
 8018116:	4629      	mov	r1, r5
 8018118:	2205      	movs	r2, #5
 801811a:	4620      	mov	r0, r4
 801811c:	f000 fcd5 	bl	8018aca <__multadd>
 8018120:	4601      	mov	r1, r0
 8018122:	4605      	mov	r5, r0
 8018124:	9801      	ldr	r0, [sp, #4]
 8018126:	f000 fed9 	bl	8018edc <__mcmp>
 801812a:	2800      	cmp	r0, #0
 801812c:	f73f adfc 	bgt.w	8017d28 <_dtoa_r+0x428>
 8018130:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8018132:	9e04      	ldr	r6, [sp, #16]
 8018134:	ea6f 0b03 	mvn.w	fp, r3
 8018138:	f04f 0900 	mov.w	r9, #0
 801813c:	4629      	mov	r1, r5
 801813e:	4620      	mov	r0, r4
 8018140:	f000 fcac 	bl	8018a9c <_Bfree>
 8018144:	2f00      	cmp	r7, #0
 8018146:	f43f aebb 	beq.w	8017ec0 <_dtoa_r+0x5c0>
 801814a:	f1b9 0f00 	cmp.w	r9, #0
 801814e:	d005      	beq.n	801815c <_dtoa_r+0x85c>
 8018150:	45b9      	cmp	r9, r7
 8018152:	d003      	beq.n	801815c <_dtoa_r+0x85c>
 8018154:	4649      	mov	r1, r9
 8018156:	4620      	mov	r0, r4
 8018158:	f000 fca0 	bl	8018a9c <_Bfree>
 801815c:	4639      	mov	r1, r7
 801815e:	4620      	mov	r0, r4
 8018160:	f000 fc9c 	bl	8018a9c <_Bfree>
 8018164:	e6ac      	b.n	8017ec0 <_dtoa_r+0x5c0>
 8018166:	2500      	movs	r5, #0
 8018168:	462f      	mov	r7, r5
 801816a:	e7e1      	b.n	8018130 <_dtoa_r+0x830>
 801816c:	469b      	mov	fp, r3
 801816e:	462f      	mov	r7, r5
 8018170:	e5da      	b.n	8017d28 <_dtoa_r+0x428>
 8018172:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8018174:	f8cd 9018 	str.w	r9, [sp, #24]
 8018178:	2b00      	cmp	r3, #0
 801817a:	f000 80f3 	beq.w	8018364 <_dtoa_r+0xa64>
 801817e:	2e00      	cmp	r6, #0
 8018180:	dd05      	ble.n	801818e <_dtoa_r+0x88e>
 8018182:	4639      	mov	r1, r7
 8018184:	4632      	mov	r2, r6
 8018186:	4620      	mov	r0, r4
 8018188:	f000 fe54 	bl	8018e34 <__lshift>
 801818c:	4607      	mov	r7, r0
 801818e:	f1b8 0f00 	cmp.w	r8, #0
 8018192:	d04c      	beq.n	801822e <_dtoa_r+0x92e>
 8018194:	6879      	ldr	r1, [r7, #4]
 8018196:	4620      	mov	r0, r4
 8018198:	f000 fc4c 	bl	8018a34 <_Balloc>
 801819c:	693a      	ldr	r2, [r7, #16]
 801819e:	3202      	adds	r2, #2
 80181a0:	4606      	mov	r6, r0
 80181a2:	0092      	lsls	r2, r2, #2
 80181a4:	f107 010c 	add.w	r1, r7, #12
 80181a8:	300c      	adds	r0, #12
 80181aa:	f7fd fd84 	bl	8015cb6 <memcpy>
 80181ae:	2201      	movs	r2, #1
 80181b0:	4631      	mov	r1, r6
 80181b2:	4620      	mov	r0, r4
 80181b4:	f000 fe3e 	bl	8018e34 <__lshift>
 80181b8:	9b02      	ldr	r3, [sp, #8]
 80181ba:	f8dd a010 	ldr.w	sl, [sp, #16]
 80181be:	f003 0301 	and.w	r3, r3, #1
 80181c2:	46b9      	mov	r9, r7
 80181c4:	9307      	str	r3, [sp, #28]
 80181c6:	4607      	mov	r7, r0
 80181c8:	4629      	mov	r1, r5
 80181ca:	9801      	ldr	r0, [sp, #4]
 80181cc:	f7ff fb0a 	bl	80177e4 <quorem>
 80181d0:	4649      	mov	r1, r9
 80181d2:	4606      	mov	r6, r0
 80181d4:	f100 0830 	add.w	r8, r0, #48	; 0x30
 80181d8:	9801      	ldr	r0, [sp, #4]
 80181da:	f000 fe7f 	bl	8018edc <__mcmp>
 80181de:	463a      	mov	r2, r7
 80181e0:	9002      	str	r0, [sp, #8]
 80181e2:	4629      	mov	r1, r5
 80181e4:	4620      	mov	r0, r4
 80181e6:	f000 fe93 	bl	8018f10 <__mdiff>
 80181ea:	68c3      	ldr	r3, [r0, #12]
 80181ec:	4602      	mov	r2, r0
 80181ee:	bb03      	cbnz	r3, 8018232 <_dtoa_r+0x932>
 80181f0:	4601      	mov	r1, r0
 80181f2:	9009      	str	r0, [sp, #36]	; 0x24
 80181f4:	9801      	ldr	r0, [sp, #4]
 80181f6:	f000 fe71 	bl	8018edc <__mcmp>
 80181fa:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80181fc:	4603      	mov	r3, r0
 80181fe:	4611      	mov	r1, r2
 8018200:	4620      	mov	r0, r4
 8018202:	9309      	str	r3, [sp, #36]	; 0x24
 8018204:	f000 fc4a 	bl	8018a9c <_Bfree>
 8018208:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801820a:	b9a3      	cbnz	r3, 8018236 <_dtoa_r+0x936>
 801820c:	9a08      	ldr	r2, [sp, #32]
 801820e:	b992      	cbnz	r2, 8018236 <_dtoa_r+0x936>
 8018210:	9a07      	ldr	r2, [sp, #28]
 8018212:	b982      	cbnz	r2, 8018236 <_dtoa_r+0x936>
 8018214:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 8018218:	d029      	beq.n	801826e <_dtoa_r+0x96e>
 801821a:	9b02      	ldr	r3, [sp, #8]
 801821c:	2b00      	cmp	r3, #0
 801821e:	dd01      	ble.n	8018224 <_dtoa_r+0x924>
 8018220:	f106 0831 	add.w	r8, r6, #49	; 0x31
 8018224:	f10a 0601 	add.w	r6, sl, #1
 8018228:	f88a 8000 	strb.w	r8, [sl]
 801822c:	e786      	b.n	801813c <_dtoa_r+0x83c>
 801822e:	4638      	mov	r0, r7
 8018230:	e7c2      	b.n	80181b8 <_dtoa_r+0x8b8>
 8018232:	2301      	movs	r3, #1
 8018234:	e7e3      	b.n	80181fe <_dtoa_r+0x8fe>
 8018236:	9a02      	ldr	r2, [sp, #8]
 8018238:	2a00      	cmp	r2, #0
 801823a:	db04      	blt.n	8018246 <_dtoa_r+0x946>
 801823c:	d124      	bne.n	8018288 <_dtoa_r+0x988>
 801823e:	9a08      	ldr	r2, [sp, #32]
 8018240:	bb12      	cbnz	r2, 8018288 <_dtoa_r+0x988>
 8018242:	9a07      	ldr	r2, [sp, #28]
 8018244:	bb02      	cbnz	r2, 8018288 <_dtoa_r+0x988>
 8018246:	2b00      	cmp	r3, #0
 8018248:	ddec      	ble.n	8018224 <_dtoa_r+0x924>
 801824a:	2201      	movs	r2, #1
 801824c:	9901      	ldr	r1, [sp, #4]
 801824e:	4620      	mov	r0, r4
 8018250:	f000 fdf0 	bl	8018e34 <__lshift>
 8018254:	4629      	mov	r1, r5
 8018256:	9001      	str	r0, [sp, #4]
 8018258:	f000 fe40 	bl	8018edc <__mcmp>
 801825c:	2800      	cmp	r0, #0
 801825e:	dc03      	bgt.n	8018268 <_dtoa_r+0x968>
 8018260:	d1e0      	bne.n	8018224 <_dtoa_r+0x924>
 8018262:	f018 0f01 	tst.w	r8, #1
 8018266:	d0dd      	beq.n	8018224 <_dtoa_r+0x924>
 8018268:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 801826c:	d1d8      	bne.n	8018220 <_dtoa_r+0x920>
 801826e:	2339      	movs	r3, #57	; 0x39
 8018270:	f10a 0601 	add.w	r6, sl, #1
 8018274:	f88a 3000 	strb.w	r3, [sl]
 8018278:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 801827c:	2b39      	cmp	r3, #57	; 0x39
 801827e:	f106 32ff 	add.w	r2, r6, #4294967295
 8018282:	d04c      	beq.n	801831e <_dtoa_r+0xa1e>
 8018284:	3301      	adds	r3, #1
 8018286:	e051      	b.n	801832c <_dtoa_r+0xa2c>
 8018288:	2b00      	cmp	r3, #0
 801828a:	f10a 0601 	add.w	r6, sl, #1
 801828e:	dd05      	ble.n	801829c <_dtoa_r+0x99c>
 8018290:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 8018294:	d0eb      	beq.n	801826e <_dtoa_r+0x96e>
 8018296:	f108 0801 	add.w	r8, r8, #1
 801829a:	e7c5      	b.n	8018228 <_dtoa_r+0x928>
 801829c:	9b04      	ldr	r3, [sp, #16]
 801829e:	9a06      	ldr	r2, [sp, #24]
 80182a0:	f806 8c01 	strb.w	r8, [r6, #-1]
 80182a4:	1af3      	subs	r3, r6, r3
 80182a6:	4293      	cmp	r3, r2
 80182a8:	d021      	beq.n	80182ee <_dtoa_r+0x9ee>
 80182aa:	2300      	movs	r3, #0
 80182ac:	220a      	movs	r2, #10
 80182ae:	9901      	ldr	r1, [sp, #4]
 80182b0:	4620      	mov	r0, r4
 80182b2:	f000 fc0a 	bl	8018aca <__multadd>
 80182b6:	45b9      	cmp	r9, r7
 80182b8:	9001      	str	r0, [sp, #4]
 80182ba:	f04f 0300 	mov.w	r3, #0
 80182be:	f04f 020a 	mov.w	r2, #10
 80182c2:	4649      	mov	r1, r9
 80182c4:	4620      	mov	r0, r4
 80182c6:	d105      	bne.n	80182d4 <_dtoa_r+0x9d4>
 80182c8:	f000 fbff 	bl	8018aca <__multadd>
 80182cc:	4681      	mov	r9, r0
 80182ce:	4607      	mov	r7, r0
 80182d0:	46b2      	mov	sl, r6
 80182d2:	e779      	b.n	80181c8 <_dtoa_r+0x8c8>
 80182d4:	f000 fbf9 	bl	8018aca <__multadd>
 80182d8:	4639      	mov	r1, r7
 80182da:	4681      	mov	r9, r0
 80182dc:	2300      	movs	r3, #0
 80182de:	220a      	movs	r2, #10
 80182e0:	4620      	mov	r0, r4
 80182e2:	f000 fbf2 	bl	8018aca <__multadd>
 80182e6:	4607      	mov	r7, r0
 80182e8:	e7f2      	b.n	80182d0 <_dtoa_r+0x9d0>
 80182ea:	f04f 0900 	mov.w	r9, #0
 80182ee:	2201      	movs	r2, #1
 80182f0:	9901      	ldr	r1, [sp, #4]
 80182f2:	4620      	mov	r0, r4
 80182f4:	f000 fd9e 	bl	8018e34 <__lshift>
 80182f8:	4629      	mov	r1, r5
 80182fa:	9001      	str	r0, [sp, #4]
 80182fc:	f000 fdee 	bl	8018edc <__mcmp>
 8018300:	2800      	cmp	r0, #0
 8018302:	dcb9      	bgt.n	8018278 <_dtoa_r+0x978>
 8018304:	d102      	bne.n	801830c <_dtoa_r+0xa0c>
 8018306:	f018 0f01 	tst.w	r8, #1
 801830a:	d1b5      	bne.n	8018278 <_dtoa_r+0x978>
 801830c:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8018310:	2b30      	cmp	r3, #48	; 0x30
 8018312:	f106 32ff 	add.w	r2, r6, #4294967295
 8018316:	f47f af11 	bne.w	801813c <_dtoa_r+0x83c>
 801831a:	4616      	mov	r6, r2
 801831c:	e7f6      	b.n	801830c <_dtoa_r+0xa0c>
 801831e:	9b04      	ldr	r3, [sp, #16]
 8018320:	4293      	cmp	r3, r2
 8018322:	d105      	bne.n	8018330 <_dtoa_r+0xa30>
 8018324:	9a04      	ldr	r2, [sp, #16]
 8018326:	f10b 0b01 	add.w	fp, fp, #1
 801832a:	2331      	movs	r3, #49	; 0x31
 801832c:	7013      	strb	r3, [r2, #0]
 801832e:	e705      	b.n	801813c <_dtoa_r+0x83c>
 8018330:	4616      	mov	r6, r2
 8018332:	e7a1      	b.n	8018278 <_dtoa_r+0x978>
 8018334:	4b16      	ldr	r3, [pc, #88]	; (8018390 <_dtoa_r+0xa90>)
 8018336:	f7ff bb48 	b.w	80179ca <_dtoa_r+0xca>
 801833a:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 801833c:	2b00      	cmp	r3, #0
 801833e:	f47f ab23 	bne.w	8017988 <_dtoa_r+0x88>
 8018342:	4b14      	ldr	r3, [pc, #80]	; (8018394 <_dtoa_r+0xa94>)
 8018344:	f7ff bb41 	b.w	80179ca <_dtoa_r+0xca>
 8018348:	9b08      	ldr	r3, [sp, #32]
 801834a:	2b01      	cmp	r3, #1
 801834c:	f77f ae3b 	ble.w	8017fc6 <_dtoa_r+0x6c6>
 8018350:	f8dd 802c 	ldr.w	r8, [sp, #44]	; 0x2c
 8018354:	e64f      	b.n	8017ff6 <_dtoa_r+0x6f6>
 8018356:	9b06      	ldr	r3, [sp, #24]
 8018358:	2b00      	cmp	r3, #0
 801835a:	dc03      	bgt.n	8018364 <_dtoa_r+0xa64>
 801835c:	9b08      	ldr	r3, [sp, #32]
 801835e:	2b02      	cmp	r3, #2
 8018360:	f73f aed7 	bgt.w	8018112 <_dtoa_r+0x812>
 8018364:	9e04      	ldr	r6, [sp, #16]
 8018366:	9801      	ldr	r0, [sp, #4]
 8018368:	4629      	mov	r1, r5
 801836a:	f7ff fa3b 	bl	80177e4 <quorem>
 801836e:	f100 0830 	add.w	r8, r0, #48	; 0x30
 8018372:	f806 8b01 	strb.w	r8, [r6], #1
 8018376:	9b04      	ldr	r3, [sp, #16]
 8018378:	9a06      	ldr	r2, [sp, #24]
 801837a:	1af3      	subs	r3, r6, r3
 801837c:	429a      	cmp	r2, r3
 801837e:	ddb4      	ble.n	80182ea <_dtoa_r+0x9ea>
 8018380:	2300      	movs	r3, #0
 8018382:	220a      	movs	r2, #10
 8018384:	9901      	ldr	r1, [sp, #4]
 8018386:	4620      	mov	r0, r4
 8018388:	f000 fb9f 	bl	8018aca <__multadd>
 801838c:	9001      	str	r0, [sp, #4]
 801838e:	e7ea      	b.n	8018366 <_dtoa_r+0xa66>
 8018390:	0801c1f8 	.word	0x0801c1f8
 8018394:	0801c278 	.word	0x0801c278

08018398 <rshift>:
 8018398:	b5f0      	push	{r4, r5, r6, r7, lr}
 801839a:	6906      	ldr	r6, [r0, #16]
 801839c:	114b      	asrs	r3, r1, #5
 801839e:	429e      	cmp	r6, r3
 80183a0:	f100 0414 	add.w	r4, r0, #20
 80183a4:	dd30      	ble.n	8018408 <rshift+0x70>
 80183a6:	f011 011f 	ands.w	r1, r1, #31
 80183aa:	eb04 0686 	add.w	r6, r4, r6, lsl #2
 80183ae:	eb04 0283 	add.w	r2, r4, r3, lsl #2
 80183b2:	d108      	bne.n	80183c6 <rshift+0x2e>
 80183b4:	4621      	mov	r1, r4
 80183b6:	42b2      	cmp	r2, r6
 80183b8:	460b      	mov	r3, r1
 80183ba:	d211      	bcs.n	80183e0 <rshift+0x48>
 80183bc:	f852 3b04 	ldr.w	r3, [r2], #4
 80183c0:	f841 3b04 	str.w	r3, [r1], #4
 80183c4:	e7f7      	b.n	80183b6 <rshift+0x1e>
 80183c6:	f854 5023 	ldr.w	r5, [r4, r3, lsl #2]
 80183ca:	f1c1 0c20 	rsb	ip, r1, #32
 80183ce:	40cd      	lsrs	r5, r1
 80183d0:	3204      	adds	r2, #4
 80183d2:	4623      	mov	r3, r4
 80183d4:	42b2      	cmp	r2, r6
 80183d6:	4617      	mov	r7, r2
 80183d8:	d30c      	bcc.n	80183f4 <rshift+0x5c>
 80183da:	601d      	str	r5, [r3, #0]
 80183dc:	b105      	cbz	r5, 80183e0 <rshift+0x48>
 80183de:	3304      	adds	r3, #4
 80183e0:	1b1a      	subs	r2, r3, r4
 80183e2:	42a3      	cmp	r3, r4
 80183e4:	ea4f 02a2 	mov.w	r2, r2, asr #2
 80183e8:	bf08      	it	eq
 80183ea:	2300      	moveq	r3, #0
 80183ec:	6102      	str	r2, [r0, #16]
 80183ee:	bf08      	it	eq
 80183f0:	6143      	streq	r3, [r0, #20]
 80183f2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80183f4:	683f      	ldr	r7, [r7, #0]
 80183f6:	fa07 f70c 	lsl.w	r7, r7, ip
 80183fa:	433d      	orrs	r5, r7
 80183fc:	f843 5b04 	str.w	r5, [r3], #4
 8018400:	f852 5b04 	ldr.w	r5, [r2], #4
 8018404:	40cd      	lsrs	r5, r1
 8018406:	e7e5      	b.n	80183d4 <rshift+0x3c>
 8018408:	4623      	mov	r3, r4
 801840a:	e7e9      	b.n	80183e0 <rshift+0x48>

0801840c <__hexdig_fun>:
 801840c:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 8018410:	2b09      	cmp	r3, #9
 8018412:	d802      	bhi.n	801841a <__hexdig_fun+0xe>
 8018414:	3820      	subs	r0, #32
 8018416:	b2c0      	uxtb	r0, r0
 8018418:	4770      	bx	lr
 801841a:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 801841e:	2b05      	cmp	r3, #5
 8018420:	d801      	bhi.n	8018426 <__hexdig_fun+0x1a>
 8018422:	3847      	subs	r0, #71	; 0x47
 8018424:	e7f7      	b.n	8018416 <__hexdig_fun+0xa>
 8018426:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 801842a:	2b05      	cmp	r3, #5
 801842c:	d801      	bhi.n	8018432 <__hexdig_fun+0x26>
 801842e:	3827      	subs	r0, #39	; 0x27
 8018430:	e7f1      	b.n	8018416 <__hexdig_fun+0xa>
 8018432:	2000      	movs	r0, #0
 8018434:	4770      	bx	lr

08018436 <__gethex>:
 8018436:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801843a:	b08b      	sub	sp, #44	; 0x2c
 801843c:	468a      	mov	sl, r1
 801843e:	9002      	str	r0, [sp, #8]
 8018440:	9816      	ldr	r0, [sp, #88]	; 0x58
 8018442:	9306      	str	r3, [sp, #24]
 8018444:	4690      	mov	r8, r2
 8018446:	f000 fad0 	bl	80189ea <__localeconv_l>
 801844a:	6803      	ldr	r3, [r0, #0]
 801844c:	9303      	str	r3, [sp, #12]
 801844e:	4618      	mov	r0, r3
 8018450:	f7e7 ff46 	bl	80002e0 <strlen>
 8018454:	9b03      	ldr	r3, [sp, #12]
 8018456:	9001      	str	r0, [sp, #4]
 8018458:	4403      	add	r3, r0
 801845a:	f04f 0b00 	mov.w	fp, #0
 801845e:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 8018462:	9307      	str	r3, [sp, #28]
 8018464:	f8da 3000 	ldr.w	r3, [sl]
 8018468:	3302      	adds	r3, #2
 801846a:	461f      	mov	r7, r3
 801846c:	f813 0b01 	ldrb.w	r0, [r3], #1
 8018470:	2830      	cmp	r0, #48	; 0x30
 8018472:	d06c      	beq.n	801854e <__gethex+0x118>
 8018474:	f7ff ffca 	bl	801840c <__hexdig_fun>
 8018478:	4604      	mov	r4, r0
 801847a:	2800      	cmp	r0, #0
 801847c:	d16a      	bne.n	8018554 <__gethex+0x11e>
 801847e:	9a01      	ldr	r2, [sp, #4]
 8018480:	9903      	ldr	r1, [sp, #12]
 8018482:	4638      	mov	r0, r7
 8018484:	f7fe fb1a 	bl	8016abc <strncmp>
 8018488:	2800      	cmp	r0, #0
 801848a:	d166      	bne.n	801855a <__gethex+0x124>
 801848c:	9b01      	ldr	r3, [sp, #4]
 801848e:	5cf8      	ldrb	r0, [r7, r3]
 8018490:	18fe      	adds	r6, r7, r3
 8018492:	f7ff ffbb 	bl	801840c <__hexdig_fun>
 8018496:	2800      	cmp	r0, #0
 8018498:	d062      	beq.n	8018560 <__gethex+0x12a>
 801849a:	4633      	mov	r3, r6
 801849c:	7818      	ldrb	r0, [r3, #0]
 801849e:	2830      	cmp	r0, #48	; 0x30
 80184a0:	461f      	mov	r7, r3
 80184a2:	f103 0301 	add.w	r3, r3, #1
 80184a6:	d0f9      	beq.n	801849c <__gethex+0x66>
 80184a8:	f7ff ffb0 	bl	801840c <__hexdig_fun>
 80184ac:	fab0 f580 	clz	r5, r0
 80184b0:	096d      	lsrs	r5, r5, #5
 80184b2:	4634      	mov	r4, r6
 80184b4:	f04f 0b01 	mov.w	fp, #1
 80184b8:	463a      	mov	r2, r7
 80184ba:	4616      	mov	r6, r2
 80184bc:	3201      	adds	r2, #1
 80184be:	7830      	ldrb	r0, [r6, #0]
 80184c0:	f7ff ffa4 	bl	801840c <__hexdig_fun>
 80184c4:	2800      	cmp	r0, #0
 80184c6:	d1f8      	bne.n	80184ba <__gethex+0x84>
 80184c8:	9a01      	ldr	r2, [sp, #4]
 80184ca:	9903      	ldr	r1, [sp, #12]
 80184cc:	4630      	mov	r0, r6
 80184ce:	f7fe faf5 	bl	8016abc <strncmp>
 80184d2:	b950      	cbnz	r0, 80184ea <__gethex+0xb4>
 80184d4:	b954      	cbnz	r4, 80184ec <__gethex+0xb6>
 80184d6:	9b01      	ldr	r3, [sp, #4]
 80184d8:	18f4      	adds	r4, r6, r3
 80184da:	4622      	mov	r2, r4
 80184dc:	4616      	mov	r6, r2
 80184de:	3201      	adds	r2, #1
 80184e0:	7830      	ldrb	r0, [r6, #0]
 80184e2:	f7ff ff93 	bl	801840c <__hexdig_fun>
 80184e6:	2800      	cmp	r0, #0
 80184e8:	d1f8      	bne.n	80184dc <__gethex+0xa6>
 80184ea:	b10c      	cbz	r4, 80184f0 <__gethex+0xba>
 80184ec:	1ba4      	subs	r4, r4, r6
 80184ee:	00a4      	lsls	r4, r4, #2
 80184f0:	7833      	ldrb	r3, [r6, #0]
 80184f2:	2b50      	cmp	r3, #80	; 0x50
 80184f4:	d001      	beq.n	80184fa <__gethex+0xc4>
 80184f6:	2b70      	cmp	r3, #112	; 0x70
 80184f8:	d140      	bne.n	801857c <__gethex+0x146>
 80184fa:	7873      	ldrb	r3, [r6, #1]
 80184fc:	2b2b      	cmp	r3, #43	; 0x2b
 80184fe:	d031      	beq.n	8018564 <__gethex+0x12e>
 8018500:	2b2d      	cmp	r3, #45	; 0x2d
 8018502:	d033      	beq.n	801856c <__gethex+0x136>
 8018504:	1c71      	adds	r1, r6, #1
 8018506:	f04f 0900 	mov.w	r9, #0
 801850a:	7808      	ldrb	r0, [r1, #0]
 801850c:	f7ff ff7e 	bl	801840c <__hexdig_fun>
 8018510:	1e43      	subs	r3, r0, #1
 8018512:	b2db      	uxtb	r3, r3
 8018514:	2b18      	cmp	r3, #24
 8018516:	d831      	bhi.n	801857c <__gethex+0x146>
 8018518:	f1a0 0210 	sub.w	r2, r0, #16
 801851c:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 8018520:	f7ff ff74 	bl	801840c <__hexdig_fun>
 8018524:	1e43      	subs	r3, r0, #1
 8018526:	b2db      	uxtb	r3, r3
 8018528:	2b18      	cmp	r3, #24
 801852a:	d922      	bls.n	8018572 <__gethex+0x13c>
 801852c:	f1b9 0f00 	cmp.w	r9, #0
 8018530:	d000      	beq.n	8018534 <__gethex+0xfe>
 8018532:	4252      	negs	r2, r2
 8018534:	4414      	add	r4, r2
 8018536:	f8ca 1000 	str.w	r1, [sl]
 801853a:	b30d      	cbz	r5, 8018580 <__gethex+0x14a>
 801853c:	f1bb 0f00 	cmp.w	fp, #0
 8018540:	bf0c      	ite	eq
 8018542:	2706      	moveq	r7, #6
 8018544:	2700      	movne	r7, #0
 8018546:	4638      	mov	r0, r7
 8018548:	b00b      	add	sp, #44	; 0x2c
 801854a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801854e:	f10b 0b01 	add.w	fp, fp, #1
 8018552:	e78a      	b.n	801846a <__gethex+0x34>
 8018554:	2500      	movs	r5, #0
 8018556:	462c      	mov	r4, r5
 8018558:	e7ae      	b.n	80184b8 <__gethex+0x82>
 801855a:	463e      	mov	r6, r7
 801855c:	2501      	movs	r5, #1
 801855e:	e7c7      	b.n	80184f0 <__gethex+0xba>
 8018560:	4604      	mov	r4, r0
 8018562:	e7fb      	b.n	801855c <__gethex+0x126>
 8018564:	f04f 0900 	mov.w	r9, #0
 8018568:	1cb1      	adds	r1, r6, #2
 801856a:	e7ce      	b.n	801850a <__gethex+0xd4>
 801856c:	f04f 0901 	mov.w	r9, #1
 8018570:	e7fa      	b.n	8018568 <__gethex+0x132>
 8018572:	230a      	movs	r3, #10
 8018574:	fb03 0202 	mla	r2, r3, r2, r0
 8018578:	3a10      	subs	r2, #16
 801857a:	e7cf      	b.n	801851c <__gethex+0xe6>
 801857c:	4631      	mov	r1, r6
 801857e:	e7da      	b.n	8018536 <__gethex+0x100>
 8018580:	1bf3      	subs	r3, r6, r7
 8018582:	3b01      	subs	r3, #1
 8018584:	4629      	mov	r1, r5
 8018586:	2b07      	cmp	r3, #7
 8018588:	dc49      	bgt.n	801861e <__gethex+0x1e8>
 801858a:	9802      	ldr	r0, [sp, #8]
 801858c:	f000 fa52 	bl	8018a34 <_Balloc>
 8018590:	9b01      	ldr	r3, [sp, #4]
 8018592:	f100 0914 	add.w	r9, r0, #20
 8018596:	f04f 0b00 	mov.w	fp, #0
 801859a:	f1c3 0301 	rsb	r3, r3, #1
 801859e:	4605      	mov	r5, r0
 80185a0:	f8cd 9010 	str.w	r9, [sp, #16]
 80185a4:	46da      	mov	sl, fp
 80185a6:	9308      	str	r3, [sp, #32]
 80185a8:	42b7      	cmp	r7, r6
 80185aa:	d33b      	bcc.n	8018624 <__gethex+0x1ee>
 80185ac:	9804      	ldr	r0, [sp, #16]
 80185ae:	f840 ab04 	str.w	sl, [r0], #4
 80185b2:	eba0 0009 	sub.w	r0, r0, r9
 80185b6:	1080      	asrs	r0, r0, #2
 80185b8:	6128      	str	r0, [r5, #16]
 80185ba:	0147      	lsls	r7, r0, #5
 80185bc:	4650      	mov	r0, sl
 80185be:	f000 fafd 	bl	8018bbc <__hi0bits>
 80185c2:	f8d8 6000 	ldr.w	r6, [r8]
 80185c6:	1a3f      	subs	r7, r7, r0
 80185c8:	42b7      	cmp	r7, r6
 80185ca:	dd64      	ble.n	8018696 <__gethex+0x260>
 80185cc:	1bbf      	subs	r7, r7, r6
 80185ce:	4639      	mov	r1, r7
 80185d0:	4628      	mov	r0, r5
 80185d2:	f000 fe0e 	bl	80191f2 <__any_on>
 80185d6:	4682      	mov	sl, r0
 80185d8:	b178      	cbz	r0, 80185fa <__gethex+0x1c4>
 80185da:	1e7b      	subs	r3, r7, #1
 80185dc:	1159      	asrs	r1, r3, #5
 80185de:	f003 021f 	and.w	r2, r3, #31
 80185e2:	f04f 0a01 	mov.w	sl, #1
 80185e6:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 80185ea:	fa0a f202 	lsl.w	r2, sl, r2
 80185ee:	420a      	tst	r2, r1
 80185f0:	d003      	beq.n	80185fa <__gethex+0x1c4>
 80185f2:	4553      	cmp	r3, sl
 80185f4:	dc46      	bgt.n	8018684 <__gethex+0x24e>
 80185f6:	f04f 0a02 	mov.w	sl, #2
 80185fa:	4639      	mov	r1, r7
 80185fc:	4628      	mov	r0, r5
 80185fe:	f7ff fecb 	bl	8018398 <rshift>
 8018602:	443c      	add	r4, r7
 8018604:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8018608:	42a3      	cmp	r3, r4
 801860a:	da52      	bge.n	80186b2 <__gethex+0x27c>
 801860c:	4629      	mov	r1, r5
 801860e:	9802      	ldr	r0, [sp, #8]
 8018610:	f000 fa44 	bl	8018a9c <_Bfree>
 8018614:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8018616:	2300      	movs	r3, #0
 8018618:	6013      	str	r3, [r2, #0]
 801861a:	27a3      	movs	r7, #163	; 0xa3
 801861c:	e793      	b.n	8018546 <__gethex+0x110>
 801861e:	3101      	adds	r1, #1
 8018620:	105b      	asrs	r3, r3, #1
 8018622:	e7b0      	b.n	8018586 <__gethex+0x150>
 8018624:	1e73      	subs	r3, r6, #1
 8018626:	9305      	str	r3, [sp, #20]
 8018628:	9a07      	ldr	r2, [sp, #28]
 801862a:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 801862e:	4293      	cmp	r3, r2
 8018630:	d018      	beq.n	8018664 <__gethex+0x22e>
 8018632:	f1bb 0f20 	cmp.w	fp, #32
 8018636:	d107      	bne.n	8018648 <__gethex+0x212>
 8018638:	9b04      	ldr	r3, [sp, #16]
 801863a:	f8c3 a000 	str.w	sl, [r3]
 801863e:	3304      	adds	r3, #4
 8018640:	f04f 0a00 	mov.w	sl, #0
 8018644:	9304      	str	r3, [sp, #16]
 8018646:	46d3      	mov	fp, sl
 8018648:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 801864c:	f7ff fede 	bl	801840c <__hexdig_fun>
 8018650:	f000 000f 	and.w	r0, r0, #15
 8018654:	fa00 f00b 	lsl.w	r0, r0, fp
 8018658:	ea4a 0a00 	orr.w	sl, sl, r0
 801865c:	f10b 0b04 	add.w	fp, fp, #4
 8018660:	9b05      	ldr	r3, [sp, #20]
 8018662:	e00d      	b.n	8018680 <__gethex+0x24a>
 8018664:	9b05      	ldr	r3, [sp, #20]
 8018666:	9a08      	ldr	r2, [sp, #32]
 8018668:	4413      	add	r3, r2
 801866a:	42bb      	cmp	r3, r7
 801866c:	d3e1      	bcc.n	8018632 <__gethex+0x1fc>
 801866e:	4618      	mov	r0, r3
 8018670:	9a01      	ldr	r2, [sp, #4]
 8018672:	9903      	ldr	r1, [sp, #12]
 8018674:	9309      	str	r3, [sp, #36]	; 0x24
 8018676:	f7fe fa21 	bl	8016abc <strncmp>
 801867a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801867c:	2800      	cmp	r0, #0
 801867e:	d1d8      	bne.n	8018632 <__gethex+0x1fc>
 8018680:	461e      	mov	r6, r3
 8018682:	e791      	b.n	80185a8 <__gethex+0x172>
 8018684:	1eb9      	subs	r1, r7, #2
 8018686:	4628      	mov	r0, r5
 8018688:	f000 fdb3 	bl	80191f2 <__any_on>
 801868c:	2800      	cmp	r0, #0
 801868e:	d0b2      	beq.n	80185f6 <__gethex+0x1c0>
 8018690:	f04f 0a03 	mov.w	sl, #3
 8018694:	e7b1      	b.n	80185fa <__gethex+0x1c4>
 8018696:	da09      	bge.n	80186ac <__gethex+0x276>
 8018698:	1bf7      	subs	r7, r6, r7
 801869a:	4629      	mov	r1, r5
 801869c:	463a      	mov	r2, r7
 801869e:	9802      	ldr	r0, [sp, #8]
 80186a0:	f000 fbc8 	bl	8018e34 <__lshift>
 80186a4:	1be4      	subs	r4, r4, r7
 80186a6:	4605      	mov	r5, r0
 80186a8:	f100 0914 	add.w	r9, r0, #20
 80186ac:	f04f 0a00 	mov.w	sl, #0
 80186b0:	e7a8      	b.n	8018604 <__gethex+0x1ce>
 80186b2:	f8d8 0004 	ldr.w	r0, [r8, #4]
 80186b6:	42a0      	cmp	r0, r4
 80186b8:	dd6a      	ble.n	8018790 <__gethex+0x35a>
 80186ba:	1b04      	subs	r4, r0, r4
 80186bc:	42a6      	cmp	r6, r4
 80186be:	dc2e      	bgt.n	801871e <__gethex+0x2e8>
 80186c0:	f8d8 300c 	ldr.w	r3, [r8, #12]
 80186c4:	2b02      	cmp	r3, #2
 80186c6:	d022      	beq.n	801870e <__gethex+0x2d8>
 80186c8:	2b03      	cmp	r3, #3
 80186ca:	d024      	beq.n	8018716 <__gethex+0x2e0>
 80186cc:	2b01      	cmp	r3, #1
 80186ce:	d115      	bne.n	80186fc <__gethex+0x2c6>
 80186d0:	42a6      	cmp	r6, r4
 80186d2:	d113      	bne.n	80186fc <__gethex+0x2c6>
 80186d4:	2e01      	cmp	r6, #1
 80186d6:	dc0b      	bgt.n	80186f0 <__gethex+0x2ba>
 80186d8:	9a06      	ldr	r2, [sp, #24]
 80186da:	f8d8 3004 	ldr.w	r3, [r8, #4]
 80186de:	6013      	str	r3, [r2, #0]
 80186e0:	2301      	movs	r3, #1
 80186e2:	612b      	str	r3, [r5, #16]
 80186e4:	f8c9 3000 	str.w	r3, [r9]
 80186e8:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80186ea:	2762      	movs	r7, #98	; 0x62
 80186ec:	601d      	str	r5, [r3, #0]
 80186ee:	e72a      	b.n	8018546 <__gethex+0x110>
 80186f0:	1e71      	subs	r1, r6, #1
 80186f2:	4628      	mov	r0, r5
 80186f4:	f000 fd7d 	bl	80191f2 <__any_on>
 80186f8:	2800      	cmp	r0, #0
 80186fa:	d1ed      	bne.n	80186d8 <__gethex+0x2a2>
 80186fc:	4629      	mov	r1, r5
 80186fe:	9802      	ldr	r0, [sp, #8]
 8018700:	f000 f9cc 	bl	8018a9c <_Bfree>
 8018704:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8018706:	2300      	movs	r3, #0
 8018708:	6013      	str	r3, [r2, #0]
 801870a:	2750      	movs	r7, #80	; 0x50
 801870c:	e71b      	b.n	8018546 <__gethex+0x110>
 801870e:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8018710:	2b00      	cmp	r3, #0
 8018712:	d0e1      	beq.n	80186d8 <__gethex+0x2a2>
 8018714:	e7f2      	b.n	80186fc <__gethex+0x2c6>
 8018716:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8018718:	2b00      	cmp	r3, #0
 801871a:	d1dd      	bne.n	80186d8 <__gethex+0x2a2>
 801871c:	e7ee      	b.n	80186fc <__gethex+0x2c6>
 801871e:	1e67      	subs	r7, r4, #1
 8018720:	f1ba 0f00 	cmp.w	sl, #0
 8018724:	d131      	bne.n	801878a <__gethex+0x354>
 8018726:	b127      	cbz	r7, 8018732 <__gethex+0x2fc>
 8018728:	4639      	mov	r1, r7
 801872a:	4628      	mov	r0, r5
 801872c:	f000 fd61 	bl	80191f2 <__any_on>
 8018730:	4682      	mov	sl, r0
 8018732:	117a      	asrs	r2, r7, #5
 8018734:	2301      	movs	r3, #1
 8018736:	f007 071f 	and.w	r7, r7, #31
 801873a:	fa03 f707 	lsl.w	r7, r3, r7
 801873e:	f859 3022 	ldr.w	r3, [r9, r2, lsl #2]
 8018742:	4621      	mov	r1, r4
 8018744:	421f      	tst	r7, r3
 8018746:	4628      	mov	r0, r5
 8018748:	bf18      	it	ne
 801874a:	f04a 0a02 	orrne.w	sl, sl, #2
 801874e:	1b36      	subs	r6, r6, r4
 8018750:	f7ff fe22 	bl	8018398 <rshift>
 8018754:	f8d8 4004 	ldr.w	r4, [r8, #4]
 8018758:	2702      	movs	r7, #2
 801875a:	f1ba 0f00 	cmp.w	sl, #0
 801875e:	d048      	beq.n	80187f2 <__gethex+0x3bc>
 8018760:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8018764:	2b02      	cmp	r3, #2
 8018766:	d015      	beq.n	8018794 <__gethex+0x35e>
 8018768:	2b03      	cmp	r3, #3
 801876a:	d017      	beq.n	801879c <__gethex+0x366>
 801876c:	2b01      	cmp	r3, #1
 801876e:	d109      	bne.n	8018784 <__gethex+0x34e>
 8018770:	f01a 0f02 	tst.w	sl, #2
 8018774:	d006      	beq.n	8018784 <__gethex+0x34e>
 8018776:	f8d9 3000 	ldr.w	r3, [r9]
 801877a:	ea4a 0a03 	orr.w	sl, sl, r3
 801877e:	f01a 0f01 	tst.w	sl, #1
 8018782:	d10e      	bne.n	80187a2 <__gethex+0x36c>
 8018784:	f047 0710 	orr.w	r7, r7, #16
 8018788:	e033      	b.n	80187f2 <__gethex+0x3bc>
 801878a:	f04f 0a01 	mov.w	sl, #1
 801878e:	e7d0      	b.n	8018732 <__gethex+0x2fc>
 8018790:	2701      	movs	r7, #1
 8018792:	e7e2      	b.n	801875a <__gethex+0x324>
 8018794:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8018796:	f1c3 0301 	rsb	r3, r3, #1
 801879a:	9315      	str	r3, [sp, #84]	; 0x54
 801879c:	9b15      	ldr	r3, [sp, #84]	; 0x54
 801879e:	2b00      	cmp	r3, #0
 80187a0:	d0f0      	beq.n	8018784 <__gethex+0x34e>
 80187a2:	f8d5 9010 	ldr.w	r9, [r5, #16]
 80187a6:	f105 0314 	add.w	r3, r5, #20
 80187aa:	ea4f 0a89 	mov.w	sl, r9, lsl #2
 80187ae:	eb03 010a 	add.w	r1, r3, sl
 80187b2:	f04f 0c00 	mov.w	ip, #0
 80187b6:	4618      	mov	r0, r3
 80187b8:	f853 2b04 	ldr.w	r2, [r3], #4
 80187bc:	f1b2 3fff 	cmp.w	r2, #4294967295
 80187c0:	d01c      	beq.n	80187fc <__gethex+0x3c6>
 80187c2:	3201      	adds	r2, #1
 80187c4:	6002      	str	r2, [r0, #0]
 80187c6:	2f02      	cmp	r7, #2
 80187c8:	f105 0314 	add.w	r3, r5, #20
 80187cc:	d138      	bne.n	8018840 <__gethex+0x40a>
 80187ce:	f8d8 2000 	ldr.w	r2, [r8]
 80187d2:	3a01      	subs	r2, #1
 80187d4:	42b2      	cmp	r2, r6
 80187d6:	d10a      	bne.n	80187ee <__gethex+0x3b8>
 80187d8:	1171      	asrs	r1, r6, #5
 80187da:	2201      	movs	r2, #1
 80187dc:	f006 061f 	and.w	r6, r6, #31
 80187e0:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 80187e4:	fa02 f606 	lsl.w	r6, r2, r6
 80187e8:	421e      	tst	r6, r3
 80187ea:	bf18      	it	ne
 80187ec:	4617      	movne	r7, r2
 80187ee:	f047 0720 	orr.w	r7, r7, #32
 80187f2:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80187f4:	601d      	str	r5, [r3, #0]
 80187f6:	9b06      	ldr	r3, [sp, #24]
 80187f8:	601c      	str	r4, [r3, #0]
 80187fa:	e6a4      	b.n	8018546 <__gethex+0x110>
 80187fc:	4299      	cmp	r1, r3
 80187fe:	f843 cc04 	str.w	ip, [r3, #-4]
 8018802:	d8d8      	bhi.n	80187b6 <__gethex+0x380>
 8018804:	68ab      	ldr	r3, [r5, #8]
 8018806:	4599      	cmp	r9, r3
 8018808:	db12      	blt.n	8018830 <__gethex+0x3fa>
 801880a:	6869      	ldr	r1, [r5, #4]
 801880c:	9802      	ldr	r0, [sp, #8]
 801880e:	3101      	adds	r1, #1
 8018810:	f000 f910 	bl	8018a34 <_Balloc>
 8018814:	692a      	ldr	r2, [r5, #16]
 8018816:	3202      	adds	r2, #2
 8018818:	f105 010c 	add.w	r1, r5, #12
 801881c:	4683      	mov	fp, r0
 801881e:	0092      	lsls	r2, r2, #2
 8018820:	300c      	adds	r0, #12
 8018822:	f7fd fa48 	bl	8015cb6 <memcpy>
 8018826:	4629      	mov	r1, r5
 8018828:	9802      	ldr	r0, [sp, #8]
 801882a:	f000 f937 	bl	8018a9c <_Bfree>
 801882e:	465d      	mov	r5, fp
 8018830:	692b      	ldr	r3, [r5, #16]
 8018832:	1c5a      	adds	r2, r3, #1
 8018834:	eb05 0383 	add.w	r3, r5, r3, lsl #2
 8018838:	612a      	str	r2, [r5, #16]
 801883a:	2201      	movs	r2, #1
 801883c:	615a      	str	r2, [r3, #20]
 801883e:	e7c2      	b.n	80187c6 <__gethex+0x390>
 8018840:	692a      	ldr	r2, [r5, #16]
 8018842:	454a      	cmp	r2, r9
 8018844:	dd0b      	ble.n	801885e <__gethex+0x428>
 8018846:	2101      	movs	r1, #1
 8018848:	4628      	mov	r0, r5
 801884a:	f7ff fda5 	bl	8018398 <rshift>
 801884e:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8018852:	3401      	adds	r4, #1
 8018854:	42a3      	cmp	r3, r4
 8018856:	f6ff aed9 	blt.w	801860c <__gethex+0x1d6>
 801885a:	2701      	movs	r7, #1
 801885c:	e7c7      	b.n	80187ee <__gethex+0x3b8>
 801885e:	f016 061f 	ands.w	r6, r6, #31
 8018862:	d0fa      	beq.n	801885a <__gethex+0x424>
 8018864:	449a      	add	sl, r3
 8018866:	f1c6 0620 	rsb	r6, r6, #32
 801886a:	f85a 0c04 	ldr.w	r0, [sl, #-4]
 801886e:	f000 f9a5 	bl	8018bbc <__hi0bits>
 8018872:	42b0      	cmp	r0, r6
 8018874:	dbe7      	blt.n	8018846 <__gethex+0x410>
 8018876:	e7f0      	b.n	801885a <__gethex+0x424>

08018878 <L_shift>:
 8018878:	f1c2 0208 	rsb	r2, r2, #8
 801887c:	0092      	lsls	r2, r2, #2
 801887e:	b570      	push	{r4, r5, r6, lr}
 8018880:	f1c2 0620 	rsb	r6, r2, #32
 8018884:	6843      	ldr	r3, [r0, #4]
 8018886:	6804      	ldr	r4, [r0, #0]
 8018888:	fa03 f506 	lsl.w	r5, r3, r6
 801888c:	432c      	orrs	r4, r5
 801888e:	40d3      	lsrs	r3, r2
 8018890:	6004      	str	r4, [r0, #0]
 8018892:	f840 3f04 	str.w	r3, [r0, #4]!
 8018896:	4288      	cmp	r0, r1
 8018898:	d3f4      	bcc.n	8018884 <L_shift+0xc>
 801889a:	bd70      	pop	{r4, r5, r6, pc}

0801889c <__match>:
 801889c:	b530      	push	{r4, r5, lr}
 801889e:	6803      	ldr	r3, [r0, #0]
 80188a0:	3301      	adds	r3, #1
 80188a2:	f811 4b01 	ldrb.w	r4, [r1], #1
 80188a6:	b914      	cbnz	r4, 80188ae <__match+0x12>
 80188a8:	6003      	str	r3, [r0, #0]
 80188aa:	2001      	movs	r0, #1
 80188ac:	bd30      	pop	{r4, r5, pc}
 80188ae:	f813 2b01 	ldrb.w	r2, [r3], #1
 80188b2:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 80188b6:	2d19      	cmp	r5, #25
 80188b8:	bf98      	it	ls
 80188ba:	3220      	addls	r2, #32
 80188bc:	42a2      	cmp	r2, r4
 80188be:	d0f0      	beq.n	80188a2 <__match+0x6>
 80188c0:	2000      	movs	r0, #0
 80188c2:	e7f3      	b.n	80188ac <__match+0x10>

080188c4 <__hexnan>:
 80188c4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80188c8:	680b      	ldr	r3, [r1, #0]
 80188ca:	6801      	ldr	r1, [r0, #0]
 80188cc:	115f      	asrs	r7, r3, #5
 80188ce:	eb02 0787 	add.w	r7, r2, r7, lsl #2
 80188d2:	f013 031f 	ands.w	r3, r3, #31
 80188d6:	b087      	sub	sp, #28
 80188d8:	bf18      	it	ne
 80188da:	3704      	addne	r7, #4
 80188dc:	2500      	movs	r5, #0
 80188de:	1f3e      	subs	r6, r7, #4
 80188e0:	4682      	mov	sl, r0
 80188e2:	4690      	mov	r8, r2
 80188e4:	9301      	str	r3, [sp, #4]
 80188e6:	f847 5c04 	str.w	r5, [r7, #-4]
 80188ea:	46b1      	mov	r9, r6
 80188ec:	4634      	mov	r4, r6
 80188ee:	9502      	str	r5, [sp, #8]
 80188f0:	46ab      	mov	fp, r5
 80188f2:	784a      	ldrb	r2, [r1, #1]
 80188f4:	1c4b      	adds	r3, r1, #1
 80188f6:	9303      	str	r3, [sp, #12]
 80188f8:	b342      	cbz	r2, 801894c <__hexnan+0x88>
 80188fa:	4610      	mov	r0, r2
 80188fc:	9105      	str	r1, [sp, #20]
 80188fe:	9204      	str	r2, [sp, #16]
 8018900:	f7ff fd84 	bl	801840c <__hexdig_fun>
 8018904:	2800      	cmp	r0, #0
 8018906:	d143      	bne.n	8018990 <__hexnan+0xcc>
 8018908:	9a04      	ldr	r2, [sp, #16]
 801890a:	9905      	ldr	r1, [sp, #20]
 801890c:	2a20      	cmp	r2, #32
 801890e:	d818      	bhi.n	8018942 <__hexnan+0x7e>
 8018910:	9b02      	ldr	r3, [sp, #8]
 8018912:	459b      	cmp	fp, r3
 8018914:	dd13      	ble.n	801893e <__hexnan+0x7a>
 8018916:	454c      	cmp	r4, r9
 8018918:	d206      	bcs.n	8018928 <__hexnan+0x64>
 801891a:	2d07      	cmp	r5, #7
 801891c:	dc04      	bgt.n	8018928 <__hexnan+0x64>
 801891e:	462a      	mov	r2, r5
 8018920:	4649      	mov	r1, r9
 8018922:	4620      	mov	r0, r4
 8018924:	f7ff ffa8 	bl	8018878 <L_shift>
 8018928:	4544      	cmp	r4, r8
 801892a:	d944      	bls.n	80189b6 <__hexnan+0xf2>
 801892c:	2300      	movs	r3, #0
 801892e:	f1a4 0904 	sub.w	r9, r4, #4
 8018932:	f844 3c04 	str.w	r3, [r4, #-4]
 8018936:	f8cd b008 	str.w	fp, [sp, #8]
 801893a:	464c      	mov	r4, r9
 801893c:	461d      	mov	r5, r3
 801893e:	9903      	ldr	r1, [sp, #12]
 8018940:	e7d7      	b.n	80188f2 <__hexnan+0x2e>
 8018942:	2a29      	cmp	r2, #41	; 0x29
 8018944:	d14a      	bne.n	80189dc <__hexnan+0x118>
 8018946:	3102      	adds	r1, #2
 8018948:	f8ca 1000 	str.w	r1, [sl]
 801894c:	f1bb 0f00 	cmp.w	fp, #0
 8018950:	d044      	beq.n	80189dc <__hexnan+0x118>
 8018952:	454c      	cmp	r4, r9
 8018954:	d206      	bcs.n	8018964 <__hexnan+0xa0>
 8018956:	2d07      	cmp	r5, #7
 8018958:	dc04      	bgt.n	8018964 <__hexnan+0xa0>
 801895a:	462a      	mov	r2, r5
 801895c:	4649      	mov	r1, r9
 801895e:	4620      	mov	r0, r4
 8018960:	f7ff ff8a 	bl	8018878 <L_shift>
 8018964:	4544      	cmp	r4, r8
 8018966:	d928      	bls.n	80189ba <__hexnan+0xf6>
 8018968:	4643      	mov	r3, r8
 801896a:	f854 2b04 	ldr.w	r2, [r4], #4
 801896e:	f843 2b04 	str.w	r2, [r3], #4
 8018972:	42a6      	cmp	r6, r4
 8018974:	d2f9      	bcs.n	801896a <__hexnan+0xa6>
 8018976:	2200      	movs	r2, #0
 8018978:	f843 2b04 	str.w	r2, [r3], #4
 801897c:	429e      	cmp	r6, r3
 801897e:	d2fb      	bcs.n	8018978 <__hexnan+0xb4>
 8018980:	6833      	ldr	r3, [r6, #0]
 8018982:	b91b      	cbnz	r3, 801898c <__hexnan+0xc8>
 8018984:	4546      	cmp	r6, r8
 8018986:	d127      	bne.n	80189d8 <__hexnan+0x114>
 8018988:	2301      	movs	r3, #1
 801898a:	6033      	str	r3, [r6, #0]
 801898c:	2005      	movs	r0, #5
 801898e:	e026      	b.n	80189de <__hexnan+0x11a>
 8018990:	3501      	adds	r5, #1
 8018992:	2d08      	cmp	r5, #8
 8018994:	f10b 0b01 	add.w	fp, fp, #1
 8018998:	dd06      	ble.n	80189a8 <__hexnan+0xe4>
 801899a:	4544      	cmp	r4, r8
 801899c:	d9cf      	bls.n	801893e <__hexnan+0x7a>
 801899e:	2300      	movs	r3, #0
 80189a0:	f844 3c04 	str.w	r3, [r4, #-4]
 80189a4:	2501      	movs	r5, #1
 80189a6:	3c04      	subs	r4, #4
 80189a8:	6822      	ldr	r2, [r4, #0]
 80189aa:	f000 000f 	and.w	r0, r0, #15
 80189ae:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 80189b2:	6020      	str	r0, [r4, #0]
 80189b4:	e7c3      	b.n	801893e <__hexnan+0x7a>
 80189b6:	2508      	movs	r5, #8
 80189b8:	e7c1      	b.n	801893e <__hexnan+0x7a>
 80189ba:	9b01      	ldr	r3, [sp, #4]
 80189bc:	2b00      	cmp	r3, #0
 80189be:	d0df      	beq.n	8018980 <__hexnan+0xbc>
 80189c0:	f04f 32ff 	mov.w	r2, #4294967295
 80189c4:	f1c3 0320 	rsb	r3, r3, #32
 80189c8:	fa22 f303 	lsr.w	r3, r2, r3
 80189cc:	f857 2c04 	ldr.w	r2, [r7, #-4]
 80189d0:	401a      	ands	r2, r3
 80189d2:	f847 2c04 	str.w	r2, [r7, #-4]
 80189d6:	e7d3      	b.n	8018980 <__hexnan+0xbc>
 80189d8:	3e04      	subs	r6, #4
 80189da:	e7d1      	b.n	8018980 <__hexnan+0xbc>
 80189dc:	2004      	movs	r0, #4
 80189de:	b007      	add	sp, #28
 80189e0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080189e4 <__locale_ctype_ptr_l>:
 80189e4:	f8d0 00ec 	ldr.w	r0, [r0, #236]	; 0xec
 80189e8:	4770      	bx	lr

080189ea <__localeconv_l>:
 80189ea:	30f0      	adds	r0, #240	; 0xf0
 80189ec:	4770      	bx	lr
	...

080189f0 <_localeconv_r>:
 80189f0:	4b04      	ldr	r3, [pc, #16]	; (8018a04 <_localeconv_r+0x14>)
 80189f2:	681b      	ldr	r3, [r3, #0]
 80189f4:	6a18      	ldr	r0, [r3, #32]
 80189f6:	4b04      	ldr	r3, [pc, #16]	; (8018a08 <_localeconv_r+0x18>)
 80189f8:	2800      	cmp	r0, #0
 80189fa:	bf08      	it	eq
 80189fc:	4618      	moveq	r0, r3
 80189fe:	30f0      	adds	r0, #240	; 0xf0
 8018a00:	4770      	bx	lr
 8018a02:	bf00      	nop
 8018a04:	24000034 	.word	0x24000034
 8018a08:	24000098 	.word	0x24000098

08018a0c <__ascii_mbtowc>:
 8018a0c:	b082      	sub	sp, #8
 8018a0e:	b901      	cbnz	r1, 8018a12 <__ascii_mbtowc+0x6>
 8018a10:	a901      	add	r1, sp, #4
 8018a12:	b142      	cbz	r2, 8018a26 <__ascii_mbtowc+0x1a>
 8018a14:	b14b      	cbz	r3, 8018a2a <__ascii_mbtowc+0x1e>
 8018a16:	7813      	ldrb	r3, [r2, #0]
 8018a18:	600b      	str	r3, [r1, #0]
 8018a1a:	7812      	ldrb	r2, [r2, #0]
 8018a1c:	1c10      	adds	r0, r2, #0
 8018a1e:	bf18      	it	ne
 8018a20:	2001      	movne	r0, #1
 8018a22:	b002      	add	sp, #8
 8018a24:	4770      	bx	lr
 8018a26:	4610      	mov	r0, r2
 8018a28:	e7fb      	b.n	8018a22 <__ascii_mbtowc+0x16>
 8018a2a:	f06f 0001 	mvn.w	r0, #1
 8018a2e:	e7f8      	b.n	8018a22 <__ascii_mbtowc+0x16>

08018a30 <__malloc_lock>:
 8018a30:	4770      	bx	lr

08018a32 <__malloc_unlock>:
 8018a32:	4770      	bx	lr

08018a34 <_Balloc>:
 8018a34:	b570      	push	{r4, r5, r6, lr}
 8018a36:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8018a38:	4604      	mov	r4, r0
 8018a3a:	460e      	mov	r6, r1
 8018a3c:	b93d      	cbnz	r5, 8018a4e <_Balloc+0x1a>
 8018a3e:	2010      	movs	r0, #16
 8018a40:	f7fd f922 	bl	8015c88 <malloc>
 8018a44:	6260      	str	r0, [r4, #36]	; 0x24
 8018a46:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8018a4a:	6005      	str	r5, [r0, #0]
 8018a4c:	60c5      	str	r5, [r0, #12]
 8018a4e:	6a65      	ldr	r5, [r4, #36]	; 0x24
 8018a50:	68eb      	ldr	r3, [r5, #12]
 8018a52:	b183      	cbz	r3, 8018a76 <_Balloc+0x42>
 8018a54:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8018a56:	68db      	ldr	r3, [r3, #12]
 8018a58:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 8018a5c:	b9b8      	cbnz	r0, 8018a8e <_Balloc+0x5a>
 8018a5e:	2101      	movs	r1, #1
 8018a60:	fa01 f506 	lsl.w	r5, r1, r6
 8018a64:	1d6a      	adds	r2, r5, #5
 8018a66:	0092      	lsls	r2, r2, #2
 8018a68:	4620      	mov	r0, r4
 8018a6a:	f000 fbe3 	bl	8019234 <_calloc_r>
 8018a6e:	b160      	cbz	r0, 8018a8a <_Balloc+0x56>
 8018a70:	e9c0 6501 	strd	r6, r5, [r0, #4]
 8018a74:	e00e      	b.n	8018a94 <_Balloc+0x60>
 8018a76:	2221      	movs	r2, #33	; 0x21
 8018a78:	2104      	movs	r1, #4
 8018a7a:	4620      	mov	r0, r4
 8018a7c:	f000 fbda 	bl	8019234 <_calloc_r>
 8018a80:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8018a82:	60e8      	str	r0, [r5, #12]
 8018a84:	68db      	ldr	r3, [r3, #12]
 8018a86:	2b00      	cmp	r3, #0
 8018a88:	d1e4      	bne.n	8018a54 <_Balloc+0x20>
 8018a8a:	2000      	movs	r0, #0
 8018a8c:	bd70      	pop	{r4, r5, r6, pc}
 8018a8e:	6802      	ldr	r2, [r0, #0]
 8018a90:	f843 2026 	str.w	r2, [r3, r6, lsl #2]
 8018a94:	2300      	movs	r3, #0
 8018a96:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8018a9a:	e7f7      	b.n	8018a8c <_Balloc+0x58>

08018a9c <_Bfree>:
 8018a9c:	b570      	push	{r4, r5, r6, lr}
 8018a9e:	6a44      	ldr	r4, [r0, #36]	; 0x24
 8018aa0:	4606      	mov	r6, r0
 8018aa2:	460d      	mov	r5, r1
 8018aa4:	b93c      	cbnz	r4, 8018ab6 <_Bfree+0x1a>
 8018aa6:	2010      	movs	r0, #16
 8018aa8:	f7fd f8ee 	bl	8015c88 <malloc>
 8018aac:	6270      	str	r0, [r6, #36]	; 0x24
 8018aae:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8018ab2:	6004      	str	r4, [r0, #0]
 8018ab4:	60c4      	str	r4, [r0, #12]
 8018ab6:	b13d      	cbz	r5, 8018ac8 <_Bfree+0x2c>
 8018ab8:	6a73      	ldr	r3, [r6, #36]	; 0x24
 8018aba:	686a      	ldr	r2, [r5, #4]
 8018abc:	68db      	ldr	r3, [r3, #12]
 8018abe:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8018ac2:	6029      	str	r1, [r5, #0]
 8018ac4:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
 8018ac8:	bd70      	pop	{r4, r5, r6, pc}

08018aca <__multadd>:
 8018aca:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8018ace:	690d      	ldr	r5, [r1, #16]
 8018ad0:	461f      	mov	r7, r3
 8018ad2:	4606      	mov	r6, r0
 8018ad4:	460c      	mov	r4, r1
 8018ad6:	f101 0c14 	add.w	ip, r1, #20
 8018ada:	2300      	movs	r3, #0
 8018adc:	f8dc 0000 	ldr.w	r0, [ip]
 8018ae0:	b281      	uxth	r1, r0
 8018ae2:	fb02 7101 	mla	r1, r2, r1, r7
 8018ae6:	0c0f      	lsrs	r7, r1, #16
 8018ae8:	0c00      	lsrs	r0, r0, #16
 8018aea:	fb02 7000 	mla	r0, r2, r0, r7
 8018aee:	b289      	uxth	r1, r1
 8018af0:	3301      	adds	r3, #1
 8018af2:	eb01 4100 	add.w	r1, r1, r0, lsl #16
 8018af6:	429d      	cmp	r5, r3
 8018af8:	ea4f 4710 	mov.w	r7, r0, lsr #16
 8018afc:	f84c 1b04 	str.w	r1, [ip], #4
 8018b00:	dcec      	bgt.n	8018adc <__multadd+0x12>
 8018b02:	b1d7      	cbz	r7, 8018b3a <__multadd+0x70>
 8018b04:	68a3      	ldr	r3, [r4, #8]
 8018b06:	42ab      	cmp	r3, r5
 8018b08:	dc12      	bgt.n	8018b30 <__multadd+0x66>
 8018b0a:	6861      	ldr	r1, [r4, #4]
 8018b0c:	4630      	mov	r0, r6
 8018b0e:	3101      	adds	r1, #1
 8018b10:	f7ff ff90 	bl	8018a34 <_Balloc>
 8018b14:	6922      	ldr	r2, [r4, #16]
 8018b16:	3202      	adds	r2, #2
 8018b18:	f104 010c 	add.w	r1, r4, #12
 8018b1c:	4680      	mov	r8, r0
 8018b1e:	0092      	lsls	r2, r2, #2
 8018b20:	300c      	adds	r0, #12
 8018b22:	f7fd f8c8 	bl	8015cb6 <memcpy>
 8018b26:	4621      	mov	r1, r4
 8018b28:	4630      	mov	r0, r6
 8018b2a:	f7ff ffb7 	bl	8018a9c <_Bfree>
 8018b2e:	4644      	mov	r4, r8
 8018b30:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8018b34:	3501      	adds	r5, #1
 8018b36:	615f      	str	r7, [r3, #20]
 8018b38:	6125      	str	r5, [r4, #16]
 8018b3a:	4620      	mov	r0, r4
 8018b3c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08018b40 <__s2b>:
 8018b40:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8018b44:	460c      	mov	r4, r1
 8018b46:	4615      	mov	r5, r2
 8018b48:	461f      	mov	r7, r3
 8018b4a:	2209      	movs	r2, #9
 8018b4c:	3308      	adds	r3, #8
 8018b4e:	4606      	mov	r6, r0
 8018b50:	fb93 f3f2 	sdiv	r3, r3, r2
 8018b54:	2100      	movs	r1, #0
 8018b56:	2201      	movs	r2, #1
 8018b58:	429a      	cmp	r2, r3
 8018b5a:	db20      	blt.n	8018b9e <__s2b+0x5e>
 8018b5c:	4630      	mov	r0, r6
 8018b5e:	f7ff ff69 	bl	8018a34 <_Balloc>
 8018b62:	9b08      	ldr	r3, [sp, #32]
 8018b64:	6143      	str	r3, [r0, #20]
 8018b66:	2d09      	cmp	r5, #9
 8018b68:	f04f 0301 	mov.w	r3, #1
 8018b6c:	6103      	str	r3, [r0, #16]
 8018b6e:	dd19      	ble.n	8018ba4 <__s2b+0x64>
 8018b70:	f104 0809 	add.w	r8, r4, #9
 8018b74:	46c1      	mov	r9, r8
 8018b76:	442c      	add	r4, r5
 8018b78:	f819 3b01 	ldrb.w	r3, [r9], #1
 8018b7c:	4601      	mov	r1, r0
 8018b7e:	3b30      	subs	r3, #48	; 0x30
 8018b80:	220a      	movs	r2, #10
 8018b82:	4630      	mov	r0, r6
 8018b84:	f7ff ffa1 	bl	8018aca <__multadd>
 8018b88:	45a1      	cmp	r9, r4
 8018b8a:	d1f5      	bne.n	8018b78 <__s2b+0x38>
 8018b8c:	eb08 0405 	add.w	r4, r8, r5
 8018b90:	3c08      	subs	r4, #8
 8018b92:	1b2d      	subs	r5, r5, r4
 8018b94:	1963      	adds	r3, r4, r5
 8018b96:	42bb      	cmp	r3, r7
 8018b98:	db07      	blt.n	8018baa <__s2b+0x6a>
 8018b9a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8018b9e:	0052      	lsls	r2, r2, #1
 8018ba0:	3101      	adds	r1, #1
 8018ba2:	e7d9      	b.n	8018b58 <__s2b+0x18>
 8018ba4:	340a      	adds	r4, #10
 8018ba6:	2509      	movs	r5, #9
 8018ba8:	e7f3      	b.n	8018b92 <__s2b+0x52>
 8018baa:	f814 3b01 	ldrb.w	r3, [r4], #1
 8018bae:	4601      	mov	r1, r0
 8018bb0:	3b30      	subs	r3, #48	; 0x30
 8018bb2:	220a      	movs	r2, #10
 8018bb4:	4630      	mov	r0, r6
 8018bb6:	f7ff ff88 	bl	8018aca <__multadd>
 8018bba:	e7eb      	b.n	8018b94 <__s2b+0x54>

08018bbc <__hi0bits>:
 8018bbc:	0c02      	lsrs	r2, r0, #16
 8018bbe:	0412      	lsls	r2, r2, #16
 8018bc0:	4603      	mov	r3, r0
 8018bc2:	b9b2      	cbnz	r2, 8018bf2 <__hi0bits+0x36>
 8018bc4:	0403      	lsls	r3, r0, #16
 8018bc6:	2010      	movs	r0, #16
 8018bc8:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 8018bcc:	bf04      	itt	eq
 8018bce:	021b      	lsleq	r3, r3, #8
 8018bd0:	3008      	addeq	r0, #8
 8018bd2:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 8018bd6:	bf04      	itt	eq
 8018bd8:	011b      	lsleq	r3, r3, #4
 8018bda:	3004      	addeq	r0, #4
 8018bdc:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 8018be0:	bf04      	itt	eq
 8018be2:	009b      	lsleq	r3, r3, #2
 8018be4:	3002      	addeq	r0, #2
 8018be6:	2b00      	cmp	r3, #0
 8018be8:	db06      	blt.n	8018bf8 <__hi0bits+0x3c>
 8018bea:	005b      	lsls	r3, r3, #1
 8018bec:	d503      	bpl.n	8018bf6 <__hi0bits+0x3a>
 8018bee:	3001      	adds	r0, #1
 8018bf0:	4770      	bx	lr
 8018bf2:	2000      	movs	r0, #0
 8018bf4:	e7e8      	b.n	8018bc8 <__hi0bits+0xc>
 8018bf6:	2020      	movs	r0, #32
 8018bf8:	4770      	bx	lr

08018bfa <__lo0bits>:
 8018bfa:	6803      	ldr	r3, [r0, #0]
 8018bfc:	f013 0207 	ands.w	r2, r3, #7
 8018c00:	4601      	mov	r1, r0
 8018c02:	d00b      	beq.n	8018c1c <__lo0bits+0x22>
 8018c04:	07da      	lsls	r2, r3, #31
 8018c06:	d423      	bmi.n	8018c50 <__lo0bits+0x56>
 8018c08:	0798      	lsls	r0, r3, #30
 8018c0a:	bf49      	itett	mi
 8018c0c:	085b      	lsrmi	r3, r3, #1
 8018c0e:	089b      	lsrpl	r3, r3, #2
 8018c10:	2001      	movmi	r0, #1
 8018c12:	600b      	strmi	r3, [r1, #0]
 8018c14:	bf5c      	itt	pl
 8018c16:	600b      	strpl	r3, [r1, #0]
 8018c18:	2002      	movpl	r0, #2
 8018c1a:	4770      	bx	lr
 8018c1c:	b298      	uxth	r0, r3
 8018c1e:	b9a8      	cbnz	r0, 8018c4c <__lo0bits+0x52>
 8018c20:	0c1b      	lsrs	r3, r3, #16
 8018c22:	2010      	movs	r0, #16
 8018c24:	f013 0fff 	tst.w	r3, #255	; 0xff
 8018c28:	bf04      	itt	eq
 8018c2a:	0a1b      	lsreq	r3, r3, #8
 8018c2c:	3008      	addeq	r0, #8
 8018c2e:	071a      	lsls	r2, r3, #28
 8018c30:	bf04      	itt	eq
 8018c32:	091b      	lsreq	r3, r3, #4
 8018c34:	3004      	addeq	r0, #4
 8018c36:	079a      	lsls	r2, r3, #30
 8018c38:	bf04      	itt	eq
 8018c3a:	089b      	lsreq	r3, r3, #2
 8018c3c:	3002      	addeq	r0, #2
 8018c3e:	07da      	lsls	r2, r3, #31
 8018c40:	d402      	bmi.n	8018c48 <__lo0bits+0x4e>
 8018c42:	085b      	lsrs	r3, r3, #1
 8018c44:	d006      	beq.n	8018c54 <__lo0bits+0x5a>
 8018c46:	3001      	adds	r0, #1
 8018c48:	600b      	str	r3, [r1, #0]
 8018c4a:	4770      	bx	lr
 8018c4c:	4610      	mov	r0, r2
 8018c4e:	e7e9      	b.n	8018c24 <__lo0bits+0x2a>
 8018c50:	2000      	movs	r0, #0
 8018c52:	4770      	bx	lr
 8018c54:	2020      	movs	r0, #32
 8018c56:	4770      	bx	lr

08018c58 <__i2b>:
 8018c58:	b510      	push	{r4, lr}
 8018c5a:	460c      	mov	r4, r1
 8018c5c:	2101      	movs	r1, #1
 8018c5e:	f7ff fee9 	bl	8018a34 <_Balloc>
 8018c62:	2201      	movs	r2, #1
 8018c64:	6144      	str	r4, [r0, #20]
 8018c66:	6102      	str	r2, [r0, #16]
 8018c68:	bd10      	pop	{r4, pc}

08018c6a <__multiply>:
 8018c6a:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8018c6e:	4614      	mov	r4, r2
 8018c70:	690a      	ldr	r2, [r1, #16]
 8018c72:	6923      	ldr	r3, [r4, #16]
 8018c74:	429a      	cmp	r2, r3
 8018c76:	bfb8      	it	lt
 8018c78:	460b      	movlt	r3, r1
 8018c7a:	4688      	mov	r8, r1
 8018c7c:	bfbc      	itt	lt
 8018c7e:	46a0      	movlt	r8, r4
 8018c80:	461c      	movlt	r4, r3
 8018c82:	f8d8 7010 	ldr.w	r7, [r8, #16]
 8018c86:	f8d4 9010 	ldr.w	r9, [r4, #16]
 8018c8a:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8018c8e:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8018c92:	eb07 0609 	add.w	r6, r7, r9
 8018c96:	42b3      	cmp	r3, r6
 8018c98:	bfb8      	it	lt
 8018c9a:	3101      	addlt	r1, #1
 8018c9c:	f7ff feca 	bl	8018a34 <_Balloc>
 8018ca0:	f100 0514 	add.w	r5, r0, #20
 8018ca4:	eb05 0e86 	add.w	lr, r5, r6, lsl #2
 8018ca8:	462b      	mov	r3, r5
 8018caa:	2200      	movs	r2, #0
 8018cac:	4573      	cmp	r3, lr
 8018cae:	d316      	bcc.n	8018cde <__multiply+0x74>
 8018cb0:	f104 0214 	add.w	r2, r4, #20
 8018cb4:	f108 0114 	add.w	r1, r8, #20
 8018cb8:	eb02 0389 	add.w	r3, r2, r9, lsl #2
 8018cbc:	eb01 0787 	add.w	r7, r1, r7, lsl #2
 8018cc0:	9300      	str	r3, [sp, #0]
 8018cc2:	9b00      	ldr	r3, [sp, #0]
 8018cc4:	9201      	str	r2, [sp, #4]
 8018cc6:	4293      	cmp	r3, r2
 8018cc8:	d80c      	bhi.n	8018ce4 <__multiply+0x7a>
 8018cca:	2e00      	cmp	r6, #0
 8018ccc:	dd03      	ble.n	8018cd6 <__multiply+0x6c>
 8018cce:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 8018cd2:	2b00      	cmp	r3, #0
 8018cd4:	d05d      	beq.n	8018d92 <__multiply+0x128>
 8018cd6:	6106      	str	r6, [r0, #16]
 8018cd8:	b003      	add	sp, #12
 8018cda:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8018cde:	f843 2b04 	str.w	r2, [r3], #4
 8018ce2:	e7e3      	b.n	8018cac <__multiply+0x42>
 8018ce4:	f8b2 b000 	ldrh.w	fp, [r2]
 8018ce8:	f1bb 0f00 	cmp.w	fp, #0
 8018cec:	d023      	beq.n	8018d36 <__multiply+0xcc>
 8018cee:	4689      	mov	r9, r1
 8018cf0:	46ac      	mov	ip, r5
 8018cf2:	f04f 0800 	mov.w	r8, #0
 8018cf6:	f859 4b04 	ldr.w	r4, [r9], #4
 8018cfa:	f8dc a000 	ldr.w	sl, [ip]
 8018cfe:	b2a3      	uxth	r3, r4
 8018d00:	fa1f fa8a 	uxth.w	sl, sl
 8018d04:	fb0b a303 	mla	r3, fp, r3, sl
 8018d08:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 8018d0c:	f8dc 4000 	ldr.w	r4, [ip]
 8018d10:	4443      	add	r3, r8
 8018d12:	ea4f 4814 	mov.w	r8, r4, lsr #16
 8018d16:	fb0b 840a 	mla	r4, fp, sl, r8
 8018d1a:	eb04 4413 	add.w	r4, r4, r3, lsr #16
 8018d1e:	46e2      	mov	sl, ip
 8018d20:	b29b      	uxth	r3, r3
 8018d22:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8018d26:	454f      	cmp	r7, r9
 8018d28:	ea4f 4814 	mov.w	r8, r4, lsr #16
 8018d2c:	f84a 3b04 	str.w	r3, [sl], #4
 8018d30:	d82b      	bhi.n	8018d8a <__multiply+0x120>
 8018d32:	f8cc 8004 	str.w	r8, [ip, #4]
 8018d36:	9b01      	ldr	r3, [sp, #4]
 8018d38:	f8b3 a002 	ldrh.w	sl, [r3, #2]
 8018d3c:	3204      	adds	r2, #4
 8018d3e:	f1ba 0f00 	cmp.w	sl, #0
 8018d42:	d020      	beq.n	8018d86 <__multiply+0x11c>
 8018d44:	682b      	ldr	r3, [r5, #0]
 8018d46:	4689      	mov	r9, r1
 8018d48:	46a8      	mov	r8, r5
 8018d4a:	f04f 0b00 	mov.w	fp, #0
 8018d4e:	f8b9 c000 	ldrh.w	ip, [r9]
 8018d52:	f8b8 4002 	ldrh.w	r4, [r8, #2]
 8018d56:	fb0a 440c 	mla	r4, sl, ip, r4
 8018d5a:	445c      	add	r4, fp
 8018d5c:	46c4      	mov	ip, r8
 8018d5e:	b29b      	uxth	r3, r3
 8018d60:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8018d64:	f84c 3b04 	str.w	r3, [ip], #4
 8018d68:	f859 3b04 	ldr.w	r3, [r9], #4
 8018d6c:	f8b8 b004 	ldrh.w	fp, [r8, #4]
 8018d70:	0c1b      	lsrs	r3, r3, #16
 8018d72:	fb0a b303 	mla	r3, sl, r3, fp
 8018d76:	eb03 4314 	add.w	r3, r3, r4, lsr #16
 8018d7a:	454f      	cmp	r7, r9
 8018d7c:	ea4f 4b13 	mov.w	fp, r3, lsr #16
 8018d80:	d805      	bhi.n	8018d8e <__multiply+0x124>
 8018d82:	f8c8 3004 	str.w	r3, [r8, #4]
 8018d86:	3504      	adds	r5, #4
 8018d88:	e79b      	b.n	8018cc2 <__multiply+0x58>
 8018d8a:	46d4      	mov	ip, sl
 8018d8c:	e7b3      	b.n	8018cf6 <__multiply+0x8c>
 8018d8e:	46e0      	mov	r8, ip
 8018d90:	e7dd      	b.n	8018d4e <__multiply+0xe4>
 8018d92:	3e01      	subs	r6, #1
 8018d94:	e799      	b.n	8018cca <__multiply+0x60>
	...

08018d98 <__pow5mult>:
 8018d98:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8018d9c:	4615      	mov	r5, r2
 8018d9e:	f012 0203 	ands.w	r2, r2, #3
 8018da2:	4606      	mov	r6, r0
 8018da4:	460f      	mov	r7, r1
 8018da6:	d007      	beq.n	8018db8 <__pow5mult+0x20>
 8018da8:	3a01      	subs	r2, #1
 8018daa:	4c21      	ldr	r4, [pc, #132]	; (8018e30 <__pow5mult+0x98>)
 8018dac:	2300      	movs	r3, #0
 8018dae:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8018db2:	f7ff fe8a 	bl	8018aca <__multadd>
 8018db6:	4607      	mov	r7, r0
 8018db8:	10ad      	asrs	r5, r5, #2
 8018dba:	d035      	beq.n	8018e28 <__pow5mult+0x90>
 8018dbc:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8018dbe:	b93c      	cbnz	r4, 8018dd0 <__pow5mult+0x38>
 8018dc0:	2010      	movs	r0, #16
 8018dc2:	f7fc ff61 	bl	8015c88 <malloc>
 8018dc6:	6270      	str	r0, [r6, #36]	; 0x24
 8018dc8:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8018dcc:	6004      	str	r4, [r0, #0]
 8018dce:	60c4      	str	r4, [r0, #12]
 8018dd0:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8018dd4:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8018dd8:	b94c      	cbnz	r4, 8018dee <__pow5mult+0x56>
 8018dda:	f240 2171 	movw	r1, #625	; 0x271
 8018dde:	4630      	mov	r0, r6
 8018de0:	f7ff ff3a 	bl	8018c58 <__i2b>
 8018de4:	2300      	movs	r3, #0
 8018de6:	f8c8 0008 	str.w	r0, [r8, #8]
 8018dea:	4604      	mov	r4, r0
 8018dec:	6003      	str	r3, [r0, #0]
 8018dee:	f04f 0800 	mov.w	r8, #0
 8018df2:	07eb      	lsls	r3, r5, #31
 8018df4:	d50a      	bpl.n	8018e0c <__pow5mult+0x74>
 8018df6:	4639      	mov	r1, r7
 8018df8:	4622      	mov	r2, r4
 8018dfa:	4630      	mov	r0, r6
 8018dfc:	f7ff ff35 	bl	8018c6a <__multiply>
 8018e00:	4639      	mov	r1, r7
 8018e02:	4681      	mov	r9, r0
 8018e04:	4630      	mov	r0, r6
 8018e06:	f7ff fe49 	bl	8018a9c <_Bfree>
 8018e0a:	464f      	mov	r7, r9
 8018e0c:	106d      	asrs	r5, r5, #1
 8018e0e:	d00b      	beq.n	8018e28 <__pow5mult+0x90>
 8018e10:	6820      	ldr	r0, [r4, #0]
 8018e12:	b938      	cbnz	r0, 8018e24 <__pow5mult+0x8c>
 8018e14:	4622      	mov	r2, r4
 8018e16:	4621      	mov	r1, r4
 8018e18:	4630      	mov	r0, r6
 8018e1a:	f7ff ff26 	bl	8018c6a <__multiply>
 8018e1e:	6020      	str	r0, [r4, #0]
 8018e20:	f8c0 8000 	str.w	r8, [r0]
 8018e24:	4604      	mov	r4, r0
 8018e26:	e7e4      	b.n	8018df2 <__pow5mult+0x5a>
 8018e28:	4638      	mov	r0, r7
 8018e2a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8018e2e:	bf00      	nop
 8018e30:	0801c380 	.word	0x0801c380

08018e34 <__lshift>:
 8018e34:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8018e38:	460c      	mov	r4, r1
 8018e3a:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8018e3e:	6923      	ldr	r3, [r4, #16]
 8018e40:	6849      	ldr	r1, [r1, #4]
 8018e42:	eb0a 0903 	add.w	r9, sl, r3
 8018e46:	68a3      	ldr	r3, [r4, #8]
 8018e48:	4607      	mov	r7, r0
 8018e4a:	4616      	mov	r6, r2
 8018e4c:	f109 0501 	add.w	r5, r9, #1
 8018e50:	42ab      	cmp	r3, r5
 8018e52:	db32      	blt.n	8018eba <__lshift+0x86>
 8018e54:	4638      	mov	r0, r7
 8018e56:	f7ff fded 	bl	8018a34 <_Balloc>
 8018e5a:	2300      	movs	r3, #0
 8018e5c:	4680      	mov	r8, r0
 8018e5e:	f100 0114 	add.w	r1, r0, #20
 8018e62:	461a      	mov	r2, r3
 8018e64:	4553      	cmp	r3, sl
 8018e66:	db2b      	blt.n	8018ec0 <__lshift+0x8c>
 8018e68:	6920      	ldr	r0, [r4, #16]
 8018e6a:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8018e6e:	f104 0314 	add.w	r3, r4, #20
 8018e72:	f016 021f 	ands.w	r2, r6, #31
 8018e76:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8018e7a:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8018e7e:	d025      	beq.n	8018ecc <__lshift+0x98>
 8018e80:	f1c2 0e20 	rsb	lr, r2, #32
 8018e84:	2000      	movs	r0, #0
 8018e86:	681e      	ldr	r6, [r3, #0]
 8018e88:	468a      	mov	sl, r1
 8018e8a:	4096      	lsls	r6, r2
 8018e8c:	4330      	orrs	r0, r6
 8018e8e:	f84a 0b04 	str.w	r0, [sl], #4
 8018e92:	f853 0b04 	ldr.w	r0, [r3], #4
 8018e96:	459c      	cmp	ip, r3
 8018e98:	fa20 f00e 	lsr.w	r0, r0, lr
 8018e9c:	d814      	bhi.n	8018ec8 <__lshift+0x94>
 8018e9e:	6048      	str	r0, [r1, #4]
 8018ea0:	b108      	cbz	r0, 8018ea6 <__lshift+0x72>
 8018ea2:	f109 0502 	add.w	r5, r9, #2
 8018ea6:	3d01      	subs	r5, #1
 8018ea8:	4638      	mov	r0, r7
 8018eaa:	f8c8 5010 	str.w	r5, [r8, #16]
 8018eae:	4621      	mov	r1, r4
 8018eb0:	f7ff fdf4 	bl	8018a9c <_Bfree>
 8018eb4:	4640      	mov	r0, r8
 8018eb6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8018eba:	3101      	adds	r1, #1
 8018ebc:	005b      	lsls	r3, r3, #1
 8018ebe:	e7c7      	b.n	8018e50 <__lshift+0x1c>
 8018ec0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 8018ec4:	3301      	adds	r3, #1
 8018ec6:	e7cd      	b.n	8018e64 <__lshift+0x30>
 8018ec8:	4651      	mov	r1, sl
 8018eca:	e7dc      	b.n	8018e86 <__lshift+0x52>
 8018ecc:	3904      	subs	r1, #4
 8018ece:	f853 2b04 	ldr.w	r2, [r3], #4
 8018ed2:	f841 2f04 	str.w	r2, [r1, #4]!
 8018ed6:	459c      	cmp	ip, r3
 8018ed8:	d8f9      	bhi.n	8018ece <__lshift+0x9a>
 8018eda:	e7e4      	b.n	8018ea6 <__lshift+0x72>

08018edc <__mcmp>:
 8018edc:	6903      	ldr	r3, [r0, #16]
 8018ede:	690a      	ldr	r2, [r1, #16]
 8018ee0:	1a9b      	subs	r3, r3, r2
 8018ee2:	b530      	push	{r4, r5, lr}
 8018ee4:	d10c      	bne.n	8018f00 <__mcmp+0x24>
 8018ee6:	0092      	lsls	r2, r2, #2
 8018ee8:	3014      	adds	r0, #20
 8018eea:	3114      	adds	r1, #20
 8018eec:	1884      	adds	r4, r0, r2
 8018eee:	4411      	add	r1, r2
 8018ef0:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8018ef4:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8018ef8:	4295      	cmp	r5, r2
 8018efa:	d003      	beq.n	8018f04 <__mcmp+0x28>
 8018efc:	d305      	bcc.n	8018f0a <__mcmp+0x2e>
 8018efe:	2301      	movs	r3, #1
 8018f00:	4618      	mov	r0, r3
 8018f02:	bd30      	pop	{r4, r5, pc}
 8018f04:	42a0      	cmp	r0, r4
 8018f06:	d3f3      	bcc.n	8018ef0 <__mcmp+0x14>
 8018f08:	e7fa      	b.n	8018f00 <__mcmp+0x24>
 8018f0a:	f04f 33ff 	mov.w	r3, #4294967295
 8018f0e:	e7f7      	b.n	8018f00 <__mcmp+0x24>

08018f10 <__mdiff>:
 8018f10:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8018f14:	460d      	mov	r5, r1
 8018f16:	4607      	mov	r7, r0
 8018f18:	4611      	mov	r1, r2
 8018f1a:	4628      	mov	r0, r5
 8018f1c:	4614      	mov	r4, r2
 8018f1e:	f7ff ffdd 	bl	8018edc <__mcmp>
 8018f22:	1e06      	subs	r6, r0, #0
 8018f24:	d108      	bne.n	8018f38 <__mdiff+0x28>
 8018f26:	4631      	mov	r1, r6
 8018f28:	4638      	mov	r0, r7
 8018f2a:	f7ff fd83 	bl	8018a34 <_Balloc>
 8018f2e:	2301      	movs	r3, #1
 8018f30:	e9c0 3604 	strd	r3, r6, [r0, #16]
 8018f34:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8018f38:	bfa4      	itt	ge
 8018f3a:	4623      	movge	r3, r4
 8018f3c:	462c      	movge	r4, r5
 8018f3e:	4638      	mov	r0, r7
 8018f40:	6861      	ldr	r1, [r4, #4]
 8018f42:	bfa6      	itte	ge
 8018f44:	461d      	movge	r5, r3
 8018f46:	2600      	movge	r6, #0
 8018f48:	2601      	movlt	r6, #1
 8018f4a:	f7ff fd73 	bl	8018a34 <_Balloc>
 8018f4e:	692b      	ldr	r3, [r5, #16]
 8018f50:	60c6      	str	r6, [r0, #12]
 8018f52:	6926      	ldr	r6, [r4, #16]
 8018f54:	f105 0914 	add.w	r9, r5, #20
 8018f58:	f104 0214 	add.w	r2, r4, #20
 8018f5c:	eb02 0786 	add.w	r7, r2, r6, lsl #2
 8018f60:	eb09 0883 	add.w	r8, r9, r3, lsl #2
 8018f64:	f100 0514 	add.w	r5, r0, #20
 8018f68:	f04f 0e00 	mov.w	lr, #0
 8018f6c:	f852 ab04 	ldr.w	sl, [r2], #4
 8018f70:	f859 4b04 	ldr.w	r4, [r9], #4
 8018f74:	fa1e f18a 	uxtah	r1, lr, sl
 8018f78:	b2a3      	uxth	r3, r4
 8018f7a:	1ac9      	subs	r1, r1, r3
 8018f7c:	0c23      	lsrs	r3, r4, #16
 8018f7e:	ebc3 431a 	rsb	r3, r3, sl, lsr #16
 8018f82:	eb03 4321 	add.w	r3, r3, r1, asr #16
 8018f86:	b289      	uxth	r1, r1
 8018f88:	ea4f 4e23 	mov.w	lr, r3, asr #16
 8018f8c:	45c8      	cmp	r8, r9
 8018f8e:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8018f92:	4694      	mov	ip, r2
 8018f94:	f845 3b04 	str.w	r3, [r5], #4
 8018f98:	d8e8      	bhi.n	8018f6c <__mdiff+0x5c>
 8018f9a:	45bc      	cmp	ip, r7
 8018f9c:	d304      	bcc.n	8018fa8 <__mdiff+0x98>
 8018f9e:	f855 3d04 	ldr.w	r3, [r5, #-4]!
 8018fa2:	b183      	cbz	r3, 8018fc6 <__mdiff+0xb6>
 8018fa4:	6106      	str	r6, [r0, #16]
 8018fa6:	e7c5      	b.n	8018f34 <__mdiff+0x24>
 8018fa8:	f85c 1b04 	ldr.w	r1, [ip], #4
 8018fac:	fa1e f381 	uxtah	r3, lr, r1
 8018fb0:	141a      	asrs	r2, r3, #16
 8018fb2:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8018fb6:	b29b      	uxth	r3, r3
 8018fb8:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8018fbc:	ea4f 4e22 	mov.w	lr, r2, asr #16
 8018fc0:	f845 3b04 	str.w	r3, [r5], #4
 8018fc4:	e7e9      	b.n	8018f9a <__mdiff+0x8a>
 8018fc6:	3e01      	subs	r6, #1
 8018fc8:	e7e9      	b.n	8018f9e <__mdiff+0x8e>
	...

08018fcc <__ulp>:
 8018fcc:	4b12      	ldr	r3, [pc, #72]	; (8019018 <__ulp+0x4c>)
 8018fce:	ee10 2a90 	vmov	r2, s1
 8018fd2:	401a      	ands	r2, r3
 8018fd4:	f1a2 7350 	sub.w	r3, r2, #54525952	; 0x3400000
 8018fd8:	2b00      	cmp	r3, #0
 8018fda:	dd04      	ble.n	8018fe6 <__ulp+0x1a>
 8018fdc:	2000      	movs	r0, #0
 8018fde:	4619      	mov	r1, r3
 8018fe0:	ec41 0b10 	vmov	d0, r0, r1
 8018fe4:	4770      	bx	lr
 8018fe6:	425b      	negs	r3, r3
 8018fe8:	151b      	asrs	r3, r3, #20
 8018fea:	2b13      	cmp	r3, #19
 8018fec:	f04f 0000 	mov.w	r0, #0
 8018ff0:	f04f 0100 	mov.w	r1, #0
 8018ff4:	dc04      	bgt.n	8019000 <__ulp+0x34>
 8018ff6:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8018ffa:	fa42 f103 	asr.w	r1, r2, r3
 8018ffe:	e7ef      	b.n	8018fe0 <__ulp+0x14>
 8019000:	3b14      	subs	r3, #20
 8019002:	2b1e      	cmp	r3, #30
 8019004:	f04f 0201 	mov.w	r2, #1
 8019008:	bfda      	itte	le
 801900a:	f1c3 031f 	rsble	r3, r3, #31
 801900e:	fa02 f303 	lslle.w	r3, r2, r3
 8019012:	4613      	movgt	r3, r2
 8019014:	4618      	mov	r0, r3
 8019016:	e7e3      	b.n	8018fe0 <__ulp+0x14>
 8019018:	7ff00000 	.word	0x7ff00000

0801901c <__b2d>:
 801901c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801901e:	6905      	ldr	r5, [r0, #16]
 8019020:	f100 0714 	add.w	r7, r0, #20
 8019024:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 8019028:	1f2e      	subs	r6, r5, #4
 801902a:	f855 4c04 	ldr.w	r4, [r5, #-4]
 801902e:	4620      	mov	r0, r4
 8019030:	f7ff fdc4 	bl	8018bbc <__hi0bits>
 8019034:	f1c0 0320 	rsb	r3, r0, #32
 8019038:	280a      	cmp	r0, #10
 801903a:	600b      	str	r3, [r1, #0]
 801903c:	f8df c074 	ldr.w	ip, [pc, #116]	; 80190b4 <__b2d+0x98>
 8019040:	dc14      	bgt.n	801906c <__b2d+0x50>
 8019042:	f1c0 0e0b 	rsb	lr, r0, #11
 8019046:	fa24 f10e 	lsr.w	r1, r4, lr
 801904a:	42b7      	cmp	r7, r6
 801904c:	ea41 030c 	orr.w	r3, r1, ip
 8019050:	bf34      	ite	cc
 8019052:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 8019056:	2100      	movcs	r1, #0
 8019058:	3015      	adds	r0, #21
 801905a:	fa04 f000 	lsl.w	r0, r4, r0
 801905e:	fa21 f10e 	lsr.w	r1, r1, lr
 8019062:	ea40 0201 	orr.w	r2, r0, r1
 8019066:	ec43 2b10 	vmov	d0, r2, r3
 801906a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801906c:	42b7      	cmp	r7, r6
 801906e:	bf3a      	itte	cc
 8019070:	f1a5 0608 	subcc.w	r6, r5, #8
 8019074:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 8019078:	2100      	movcs	r1, #0
 801907a:	380b      	subs	r0, #11
 801907c:	d015      	beq.n	80190aa <__b2d+0x8e>
 801907e:	4084      	lsls	r4, r0
 8019080:	f1c0 0520 	rsb	r5, r0, #32
 8019084:	f044 547f 	orr.w	r4, r4, #1069547520	; 0x3fc00000
 8019088:	f444 1440 	orr.w	r4, r4, #3145728	; 0x300000
 801908c:	42be      	cmp	r6, r7
 801908e:	fa21 fc05 	lsr.w	ip, r1, r5
 8019092:	ea44 030c 	orr.w	r3, r4, ip
 8019096:	bf8c      	ite	hi
 8019098:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
 801909c:	2400      	movls	r4, #0
 801909e:	fa01 f000 	lsl.w	r0, r1, r0
 80190a2:	40ec      	lsrs	r4, r5
 80190a4:	ea40 0204 	orr.w	r2, r0, r4
 80190a8:	e7dd      	b.n	8019066 <__b2d+0x4a>
 80190aa:	ea44 030c 	orr.w	r3, r4, ip
 80190ae:	460a      	mov	r2, r1
 80190b0:	e7d9      	b.n	8019066 <__b2d+0x4a>
 80190b2:	bf00      	nop
 80190b4:	3ff00000 	.word	0x3ff00000

080190b8 <__d2b>:
 80190b8:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 80190bc:	460e      	mov	r6, r1
 80190be:	2101      	movs	r1, #1
 80190c0:	ec59 8b10 	vmov	r8, r9, d0
 80190c4:	4615      	mov	r5, r2
 80190c6:	f7ff fcb5 	bl	8018a34 <_Balloc>
 80190ca:	f3c9 540a 	ubfx	r4, r9, #20, #11
 80190ce:	4607      	mov	r7, r0
 80190d0:	f3c9 0313 	ubfx	r3, r9, #0, #20
 80190d4:	bb34      	cbnz	r4, 8019124 <__d2b+0x6c>
 80190d6:	9301      	str	r3, [sp, #4]
 80190d8:	f1b8 0300 	subs.w	r3, r8, #0
 80190dc:	d027      	beq.n	801912e <__d2b+0x76>
 80190de:	a802      	add	r0, sp, #8
 80190e0:	f840 3d08 	str.w	r3, [r0, #-8]!
 80190e4:	f7ff fd89 	bl	8018bfa <__lo0bits>
 80190e8:	9900      	ldr	r1, [sp, #0]
 80190ea:	b1f0      	cbz	r0, 801912a <__d2b+0x72>
 80190ec:	9a01      	ldr	r2, [sp, #4]
 80190ee:	f1c0 0320 	rsb	r3, r0, #32
 80190f2:	fa02 f303 	lsl.w	r3, r2, r3
 80190f6:	430b      	orrs	r3, r1
 80190f8:	40c2      	lsrs	r2, r0
 80190fa:	617b      	str	r3, [r7, #20]
 80190fc:	9201      	str	r2, [sp, #4]
 80190fe:	9b01      	ldr	r3, [sp, #4]
 8019100:	61bb      	str	r3, [r7, #24]
 8019102:	2b00      	cmp	r3, #0
 8019104:	bf14      	ite	ne
 8019106:	2102      	movne	r1, #2
 8019108:	2101      	moveq	r1, #1
 801910a:	6139      	str	r1, [r7, #16]
 801910c:	b1c4      	cbz	r4, 8019140 <__d2b+0x88>
 801910e:	f2a4 4433 	subw	r4, r4, #1075	; 0x433
 8019112:	4404      	add	r4, r0
 8019114:	6034      	str	r4, [r6, #0]
 8019116:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 801911a:	6028      	str	r0, [r5, #0]
 801911c:	4638      	mov	r0, r7
 801911e:	b003      	add	sp, #12
 8019120:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8019124:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8019128:	e7d5      	b.n	80190d6 <__d2b+0x1e>
 801912a:	6179      	str	r1, [r7, #20]
 801912c:	e7e7      	b.n	80190fe <__d2b+0x46>
 801912e:	a801      	add	r0, sp, #4
 8019130:	f7ff fd63 	bl	8018bfa <__lo0bits>
 8019134:	9b01      	ldr	r3, [sp, #4]
 8019136:	617b      	str	r3, [r7, #20]
 8019138:	2101      	movs	r1, #1
 801913a:	6139      	str	r1, [r7, #16]
 801913c:	3020      	adds	r0, #32
 801913e:	e7e5      	b.n	801910c <__d2b+0x54>
 8019140:	eb07 0381 	add.w	r3, r7, r1, lsl #2
 8019144:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8019148:	6030      	str	r0, [r6, #0]
 801914a:	6918      	ldr	r0, [r3, #16]
 801914c:	f7ff fd36 	bl	8018bbc <__hi0bits>
 8019150:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
 8019154:	e7e1      	b.n	801911a <__d2b+0x62>

08019156 <__ratio>:
 8019156:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801915a:	4688      	mov	r8, r1
 801915c:	4669      	mov	r1, sp
 801915e:	4681      	mov	r9, r0
 8019160:	f7ff ff5c 	bl	801901c <__b2d>
 8019164:	a901      	add	r1, sp, #4
 8019166:	4640      	mov	r0, r8
 8019168:	ec57 6b10 	vmov	r6, r7, d0
 801916c:	ee10 4a10 	vmov	r4, s0
 8019170:	f7ff ff54 	bl	801901c <__b2d>
 8019174:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8019178:	f8d8 2010 	ldr.w	r2, [r8, #16]
 801917c:	eba3 0c02 	sub.w	ip, r3, r2
 8019180:	e9dd 3200 	ldrd	r3, r2, [sp]
 8019184:	1a9b      	subs	r3, r3, r2
 8019186:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 801918a:	ec51 0b10 	vmov	r0, r1, d0
 801918e:	2b00      	cmp	r3, #0
 8019190:	ee10 aa10 	vmov	sl, s0
 8019194:	bfce      	itee	gt
 8019196:	463a      	movgt	r2, r7
 8019198:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 801919c:	460a      	movle	r2, r1
 801919e:	463d      	mov	r5, r7
 80191a0:	468b      	mov	fp, r1
 80191a2:	bfcc      	ite	gt
 80191a4:	eb02 5503 	addgt.w	r5, r2, r3, lsl #20
 80191a8:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 80191ac:	ec45 4b17 	vmov	d7, r4, r5
 80191b0:	ec4b ab16 	vmov	d6, sl, fp
 80191b4:	ee87 0b06 	vdiv.f64	d0, d7, d6
 80191b8:	b003      	add	sp, #12
 80191ba:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080191be <__copybits>:
 80191be:	3901      	subs	r1, #1
 80191c0:	b510      	push	{r4, lr}
 80191c2:	1149      	asrs	r1, r1, #5
 80191c4:	6914      	ldr	r4, [r2, #16]
 80191c6:	3101      	adds	r1, #1
 80191c8:	f102 0314 	add.w	r3, r2, #20
 80191cc:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 80191d0:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 80191d4:	42a3      	cmp	r3, r4
 80191d6:	4602      	mov	r2, r0
 80191d8:	d303      	bcc.n	80191e2 <__copybits+0x24>
 80191da:	2300      	movs	r3, #0
 80191dc:	428a      	cmp	r2, r1
 80191de:	d305      	bcc.n	80191ec <__copybits+0x2e>
 80191e0:	bd10      	pop	{r4, pc}
 80191e2:	f853 2b04 	ldr.w	r2, [r3], #4
 80191e6:	f840 2b04 	str.w	r2, [r0], #4
 80191ea:	e7f3      	b.n	80191d4 <__copybits+0x16>
 80191ec:	f842 3b04 	str.w	r3, [r2], #4
 80191f0:	e7f4      	b.n	80191dc <__copybits+0x1e>

080191f2 <__any_on>:
 80191f2:	f100 0214 	add.w	r2, r0, #20
 80191f6:	6900      	ldr	r0, [r0, #16]
 80191f8:	114b      	asrs	r3, r1, #5
 80191fa:	4298      	cmp	r0, r3
 80191fc:	b510      	push	{r4, lr}
 80191fe:	db11      	blt.n	8019224 <__any_on+0x32>
 8019200:	dd0a      	ble.n	8019218 <__any_on+0x26>
 8019202:	f011 011f 	ands.w	r1, r1, #31
 8019206:	d007      	beq.n	8019218 <__any_on+0x26>
 8019208:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 801920c:	fa24 f001 	lsr.w	r0, r4, r1
 8019210:	fa00 f101 	lsl.w	r1, r0, r1
 8019214:	428c      	cmp	r4, r1
 8019216:	d10b      	bne.n	8019230 <__any_on+0x3e>
 8019218:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 801921c:	4293      	cmp	r3, r2
 801921e:	d803      	bhi.n	8019228 <__any_on+0x36>
 8019220:	2000      	movs	r0, #0
 8019222:	bd10      	pop	{r4, pc}
 8019224:	4603      	mov	r3, r0
 8019226:	e7f7      	b.n	8019218 <__any_on+0x26>
 8019228:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 801922c:	2900      	cmp	r1, #0
 801922e:	d0f5      	beq.n	801921c <__any_on+0x2a>
 8019230:	2001      	movs	r0, #1
 8019232:	e7f6      	b.n	8019222 <__any_on+0x30>

08019234 <_calloc_r>:
 8019234:	b538      	push	{r3, r4, r5, lr}
 8019236:	fb02 f401 	mul.w	r4, r2, r1
 801923a:	4621      	mov	r1, r4
 801923c:	f7fc fd9c 	bl	8015d78 <_malloc_r>
 8019240:	4605      	mov	r5, r0
 8019242:	b118      	cbz	r0, 801924c <_calloc_r+0x18>
 8019244:	4622      	mov	r2, r4
 8019246:	2100      	movs	r1, #0
 8019248:	f7fc fd40 	bl	8015ccc <memset>
 801924c:	4628      	mov	r0, r5
 801924e:	bd38      	pop	{r3, r4, r5, pc}

08019250 <__ssputs_r>:
 8019250:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8019254:	688e      	ldr	r6, [r1, #8]
 8019256:	429e      	cmp	r6, r3
 8019258:	4682      	mov	sl, r0
 801925a:	460c      	mov	r4, r1
 801925c:	4690      	mov	r8, r2
 801925e:	4699      	mov	r9, r3
 8019260:	d837      	bhi.n	80192d2 <__ssputs_r+0x82>
 8019262:	898a      	ldrh	r2, [r1, #12]
 8019264:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8019268:	d031      	beq.n	80192ce <__ssputs_r+0x7e>
 801926a:	6825      	ldr	r5, [r4, #0]
 801926c:	6909      	ldr	r1, [r1, #16]
 801926e:	1a6f      	subs	r7, r5, r1
 8019270:	6965      	ldr	r5, [r4, #20]
 8019272:	2302      	movs	r3, #2
 8019274:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8019278:	fb95 f5f3 	sdiv	r5, r5, r3
 801927c:	f109 0301 	add.w	r3, r9, #1
 8019280:	443b      	add	r3, r7
 8019282:	429d      	cmp	r5, r3
 8019284:	bf38      	it	cc
 8019286:	461d      	movcc	r5, r3
 8019288:	0553      	lsls	r3, r2, #21
 801928a:	d530      	bpl.n	80192ee <__ssputs_r+0x9e>
 801928c:	4629      	mov	r1, r5
 801928e:	f7fc fd73 	bl	8015d78 <_malloc_r>
 8019292:	4606      	mov	r6, r0
 8019294:	b950      	cbnz	r0, 80192ac <__ssputs_r+0x5c>
 8019296:	230c      	movs	r3, #12
 8019298:	f8ca 3000 	str.w	r3, [sl]
 801929c:	89a3      	ldrh	r3, [r4, #12]
 801929e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80192a2:	81a3      	strh	r3, [r4, #12]
 80192a4:	f04f 30ff 	mov.w	r0, #4294967295
 80192a8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80192ac:	463a      	mov	r2, r7
 80192ae:	6921      	ldr	r1, [r4, #16]
 80192b0:	f7fc fd01 	bl	8015cb6 <memcpy>
 80192b4:	89a3      	ldrh	r3, [r4, #12]
 80192b6:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80192ba:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80192be:	81a3      	strh	r3, [r4, #12]
 80192c0:	6126      	str	r6, [r4, #16]
 80192c2:	6165      	str	r5, [r4, #20]
 80192c4:	443e      	add	r6, r7
 80192c6:	1bed      	subs	r5, r5, r7
 80192c8:	6026      	str	r6, [r4, #0]
 80192ca:	60a5      	str	r5, [r4, #8]
 80192cc:	464e      	mov	r6, r9
 80192ce:	454e      	cmp	r6, r9
 80192d0:	d900      	bls.n	80192d4 <__ssputs_r+0x84>
 80192d2:	464e      	mov	r6, r9
 80192d4:	4632      	mov	r2, r6
 80192d6:	4641      	mov	r1, r8
 80192d8:	6820      	ldr	r0, [r4, #0]
 80192da:	f000 f918 	bl	801950e <memmove>
 80192de:	68a3      	ldr	r3, [r4, #8]
 80192e0:	1b9b      	subs	r3, r3, r6
 80192e2:	60a3      	str	r3, [r4, #8]
 80192e4:	6823      	ldr	r3, [r4, #0]
 80192e6:	441e      	add	r6, r3
 80192e8:	6026      	str	r6, [r4, #0]
 80192ea:	2000      	movs	r0, #0
 80192ec:	e7dc      	b.n	80192a8 <__ssputs_r+0x58>
 80192ee:	462a      	mov	r2, r5
 80192f0:	f000 f926 	bl	8019540 <_realloc_r>
 80192f4:	4606      	mov	r6, r0
 80192f6:	2800      	cmp	r0, #0
 80192f8:	d1e2      	bne.n	80192c0 <__ssputs_r+0x70>
 80192fa:	6921      	ldr	r1, [r4, #16]
 80192fc:	4650      	mov	r0, sl
 80192fe:	f7fc fced 	bl	8015cdc <_free_r>
 8019302:	e7c8      	b.n	8019296 <__ssputs_r+0x46>

08019304 <_svfiprintf_r>:
 8019304:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8019308:	461d      	mov	r5, r3
 801930a:	898b      	ldrh	r3, [r1, #12]
 801930c:	061f      	lsls	r7, r3, #24
 801930e:	b09d      	sub	sp, #116	; 0x74
 8019310:	4680      	mov	r8, r0
 8019312:	460c      	mov	r4, r1
 8019314:	4616      	mov	r6, r2
 8019316:	d50f      	bpl.n	8019338 <_svfiprintf_r+0x34>
 8019318:	690b      	ldr	r3, [r1, #16]
 801931a:	b96b      	cbnz	r3, 8019338 <_svfiprintf_r+0x34>
 801931c:	2140      	movs	r1, #64	; 0x40
 801931e:	f7fc fd2b 	bl	8015d78 <_malloc_r>
 8019322:	6020      	str	r0, [r4, #0]
 8019324:	6120      	str	r0, [r4, #16]
 8019326:	b928      	cbnz	r0, 8019334 <_svfiprintf_r+0x30>
 8019328:	230c      	movs	r3, #12
 801932a:	f8c8 3000 	str.w	r3, [r8]
 801932e:	f04f 30ff 	mov.w	r0, #4294967295
 8019332:	e0c8      	b.n	80194c6 <_svfiprintf_r+0x1c2>
 8019334:	2340      	movs	r3, #64	; 0x40
 8019336:	6163      	str	r3, [r4, #20]
 8019338:	2300      	movs	r3, #0
 801933a:	9309      	str	r3, [sp, #36]	; 0x24
 801933c:	2320      	movs	r3, #32
 801933e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8019342:	2330      	movs	r3, #48	; 0x30
 8019344:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8019348:	9503      	str	r5, [sp, #12]
 801934a:	f04f 0b01 	mov.w	fp, #1
 801934e:	4637      	mov	r7, r6
 8019350:	463d      	mov	r5, r7
 8019352:	f815 3b01 	ldrb.w	r3, [r5], #1
 8019356:	b10b      	cbz	r3, 801935c <_svfiprintf_r+0x58>
 8019358:	2b25      	cmp	r3, #37	; 0x25
 801935a:	d13e      	bne.n	80193da <_svfiprintf_r+0xd6>
 801935c:	ebb7 0a06 	subs.w	sl, r7, r6
 8019360:	d00b      	beq.n	801937a <_svfiprintf_r+0x76>
 8019362:	4653      	mov	r3, sl
 8019364:	4632      	mov	r2, r6
 8019366:	4621      	mov	r1, r4
 8019368:	4640      	mov	r0, r8
 801936a:	f7ff ff71 	bl	8019250 <__ssputs_r>
 801936e:	3001      	adds	r0, #1
 8019370:	f000 80a4 	beq.w	80194bc <_svfiprintf_r+0x1b8>
 8019374:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8019376:	4453      	add	r3, sl
 8019378:	9309      	str	r3, [sp, #36]	; 0x24
 801937a:	783b      	ldrb	r3, [r7, #0]
 801937c:	2b00      	cmp	r3, #0
 801937e:	f000 809d 	beq.w	80194bc <_svfiprintf_r+0x1b8>
 8019382:	2300      	movs	r3, #0
 8019384:	f04f 32ff 	mov.w	r2, #4294967295
 8019388:	e9cd 2305 	strd	r2, r3, [sp, #20]
 801938c:	9304      	str	r3, [sp, #16]
 801938e:	9307      	str	r3, [sp, #28]
 8019390:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8019394:	931a      	str	r3, [sp, #104]	; 0x68
 8019396:	462f      	mov	r7, r5
 8019398:	2205      	movs	r2, #5
 801939a:	f817 1b01 	ldrb.w	r1, [r7], #1
 801939e:	4850      	ldr	r0, [pc, #320]	; (80194e0 <_svfiprintf_r+0x1dc>)
 80193a0:	f7e6 ffa6 	bl	80002f0 <memchr>
 80193a4:	9b04      	ldr	r3, [sp, #16]
 80193a6:	b9d0      	cbnz	r0, 80193de <_svfiprintf_r+0xda>
 80193a8:	06d9      	lsls	r1, r3, #27
 80193aa:	bf44      	itt	mi
 80193ac:	2220      	movmi	r2, #32
 80193ae:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 80193b2:	071a      	lsls	r2, r3, #28
 80193b4:	bf44      	itt	mi
 80193b6:	222b      	movmi	r2, #43	; 0x2b
 80193b8:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 80193bc:	782a      	ldrb	r2, [r5, #0]
 80193be:	2a2a      	cmp	r2, #42	; 0x2a
 80193c0:	d015      	beq.n	80193ee <_svfiprintf_r+0xea>
 80193c2:	9a07      	ldr	r2, [sp, #28]
 80193c4:	462f      	mov	r7, r5
 80193c6:	2000      	movs	r0, #0
 80193c8:	250a      	movs	r5, #10
 80193ca:	4639      	mov	r1, r7
 80193cc:	f811 3b01 	ldrb.w	r3, [r1], #1
 80193d0:	3b30      	subs	r3, #48	; 0x30
 80193d2:	2b09      	cmp	r3, #9
 80193d4:	d94d      	bls.n	8019472 <_svfiprintf_r+0x16e>
 80193d6:	b1b8      	cbz	r0, 8019408 <_svfiprintf_r+0x104>
 80193d8:	e00f      	b.n	80193fa <_svfiprintf_r+0xf6>
 80193da:	462f      	mov	r7, r5
 80193dc:	e7b8      	b.n	8019350 <_svfiprintf_r+0x4c>
 80193de:	4a40      	ldr	r2, [pc, #256]	; (80194e0 <_svfiprintf_r+0x1dc>)
 80193e0:	1a80      	subs	r0, r0, r2
 80193e2:	fa0b f000 	lsl.w	r0, fp, r0
 80193e6:	4318      	orrs	r0, r3
 80193e8:	9004      	str	r0, [sp, #16]
 80193ea:	463d      	mov	r5, r7
 80193ec:	e7d3      	b.n	8019396 <_svfiprintf_r+0x92>
 80193ee:	9a03      	ldr	r2, [sp, #12]
 80193f0:	1d11      	adds	r1, r2, #4
 80193f2:	6812      	ldr	r2, [r2, #0]
 80193f4:	9103      	str	r1, [sp, #12]
 80193f6:	2a00      	cmp	r2, #0
 80193f8:	db01      	blt.n	80193fe <_svfiprintf_r+0xfa>
 80193fa:	9207      	str	r2, [sp, #28]
 80193fc:	e004      	b.n	8019408 <_svfiprintf_r+0x104>
 80193fe:	4252      	negs	r2, r2
 8019400:	f043 0302 	orr.w	r3, r3, #2
 8019404:	9207      	str	r2, [sp, #28]
 8019406:	9304      	str	r3, [sp, #16]
 8019408:	783b      	ldrb	r3, [r7, #0]
 801940a:	2b2e      	cmp	r3, #46	; 0x2e
 801940c:	d10c      	bne.n	8019428 <_svfiprintf_r+0x124>
 801940e:	787b      	ldrb	r3, [r7, #1]
 8019410:	2b2a      	cmp	r3, #42	; 0x2a
 8019412:	d133      	bne.n	801947c <_svfiprintf_r+0x178>
 8019414:	9b03      	ldr	r3, [sp, #12]
 8019416:	1d1a      	adds	r2, r3, #4
 8019418:	681b      	ldr	r3, [r3, #0]
 801941a:	9203      	str	r2, [sp, #12]
 801941c:	2b00      	cmp	r3, #0
 801941e:	bfb8      	it	lt
 8019420:	f04f 33ff 	movlt.w	r3, #4294967295
 8019424:	3702      	adds	r7, #2
 8019426:	9305      	str	r3, [sp, #20]
 8019428:	4d2e      	ldr	r5, [pc, #184]	; (80194e4 <_svfiprintf_r+0x1e0>)
 801942a:	7839      	ldrb	r1, [r7, #0]
 801942c:	2203      	movs	r2, #3
 801942e:	4628      	mov	r0, r5
 8019430:	f7e6 ff5e 	bl	80002f0 <memchr>
 8019434:	b138      	cbz	r0, 8019446 <_svfiprintf_r+0x142>
 8019436:	2340      	movs	r3, #64	; 0x40
 8019438:	1b40      	subs	r0, r0, r5
 801943a:	fa03 f000 	lsl.w	r0, r3, r0
 801943e:	9b04      	ldr	r3, [sp, #16]
 8019440:	4303      	orrs	r3, r0
 8019442:	3701      	adds	r7, #1
 8019444:	9304      	str	r3, [sp, #16]
 8019446:	7839      	ldrb	r1, [r7, #0]
 8019448:	4827      	ldr	r0, [pc, #156]	; (80194e8 <_svfiprintf_r+0x1e4>)
 801944a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 801944e:	2206      	movs	r2, #6
 8019450:	1c7e      	adds	r6, r7, #1
 8019452:	f7e6 ff4d 	bl	80002f0 <memchr>
 8019456:	2800      	cmp	r0, #0
 8019458:	d038      	beq.n	80194cc <_svfiprintf_r+0x1c8>
 801945a:	4b24      	ldr	r3, [pc, #144]	; (80194ec <_svfiprintf_r+0x1e8>)
 801945c:	bb13      	cbnz	r3, 80194a4 <_svfiprintf_r+0x1a0>
 801945e:	9b03      	ldr	r3, [sp, #12]
 8019460:	3307      	adds	r3, #7
 8019462:	f023 0307 	bic.w	r3, r3, #7
 8019466:	3308      	adds	r3, #8
 8019468:	9303      	str	r3, [sp, #12]
 801946a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801946c:	444b      	add	r3, r9
 801946e:	9309      	str	r3, [sp, #36]	; 0x24
 8019470:	e76d      	b.n	801934e <_svfiprintf_r+0x4a>
 8019472:	fb05 3202 	mla	r2, r5, r2, r3
 8019476:	2001      	movs	r0, #1
 8019478:	460f      	mov	r7, r1
 801947a:	e7a6      	b.n	80193ca <_svfiprintf_r+0xc6>
 801947c:	2300      	movs	r3, #0
 801947e:	3701      	adds	r7, #1
 8019480:	9305      	str	r3, [sp, #20]
 8019482:	4619      	mov	r1, r3
 8019484:	250a      	movs	r5, #10
 8019486:	4638      	mov	r0, r7
 8019488:	f810 2b01 	ldrb.w	r2, [r0], #1
 801948c:	3a30      	subs	r2, #48	; 0x30
 801948e:	2a09      	cmp	r2, #9
 8019490:	d903      	bls.n	801949a <_svfiprintf_r+0x196>
 8019492:	2b00      	cmp	r3, #0
 8019494:	d0c8      	beq.n	8019428 <_svfiprintf_r+0x124>
 8019496:	9105      	str	r1, [sp, #20]
 8019498:	e7c6      	b.n	8019428 <_svfiprintf_r+0x124>
 801949a:	fb05 2101 	mla	r1, r5, r1, r2
 801949e:	2301      	movs	r3, #1
 80194a0:	4607      	mov	r7, r0
 80194a2:	e7f0      	b.n	8019486 <_svfiprintf_r+0x182>
 80194a4:	ab03      	add	r3, sp, #12
 80194a6:	9300      	str	r3, [sp, #0]
 80194a8:	4622      	mov	r2, r4
 80194aa:	4b11      	ldr	r3, [pc, #68]	; (80194f0 <_svfiprintf_r+0x1ec>)
 80194ac:	a904      	add	r1, sp, #16
 80194ae:	4640      	mov	r0, r8
 80194b0:	f7fc fd42 	bl	8015f38 <_printf_float>
 80194b4:	f1b0 3fff 	cmp.w	r0, #4294967295
 80194b8:	4681      	mov	r9, r0
 80194ba:	d1d6      	bne.n	801946a <_svfiprintf_r+0x166>
 80194bc:	89a3      	ldrh	r3, [r4, #12]
 80194be:	065b      	lsls	r3, r3, #25
 80194c0:	f53f af35 	bmi.w	801932e <_svfiprintf_r+0x2a>
 80194c4:	9809      	ldr	r0, [sp, #36]	; 0x24
 80194c6:	b01d      	add	sp, #116	; 0x74
 80194c8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80194cc:	ab03      	add	r3, sp, #12
 80194ce:	9300      	str	r3, [sp, #0]
 80194d0:	4622      	mov	r2, r4
 80194d2:	4b07      	ldr	r3, [pc, #28]	; (80194f0 <_svfiprintf_r+0x1ec>)
 80194d4:	a904      	add	r1, sp, #16
 80194d6:	4640      	mov	r0, r8
 80194d8:	f7fc ffd0 	bl	801647c <_printf_i>
 80194dc:	e7ea      	b.n	80194b4 <_svfiprintf_r+0x1b0>
 80194de:	bf00      	nop
 80194e0:	0801c38c 	.word	0x0801c38c
 80194e4:	0801c392 	.word	0x0801c392
 80194e8:	0801c396 	.word	0x0801c396
 80194ec:	08015f39 	.word	0x08015f39
 80194f0:	08019251 	.word	0x08019251

080194f4 <__ascii_wctomb>:
 80194f4:	b149      	cbz	r1, 801950a <__ascii_wctomb+0x16>
 80194f6:	2aff      	cmp	r2, #255	; 0xff
 80194f8:	bf85      	ittet	hi
 80194fa:	238a      	movhi	r3, #138	; 0x8a
 80194fc:	6003      	strhi	r3, [r0, #0]
 80194fe:	700a      	strbls	r2, [r1, #0]
 8019500:	f04f 30ff 	movhi.w	r0, #4294967295
 8019504:	bf98      	it	ls
 8019506:	2001      	movls	r0, #1
 8019508:	4770      	bx	lr
 801950a:	4608      	mov	r0, r1
 801950c:	4770      	bx	lr

0801950e <memmove>:
 801950e:	4288      	cmp	r0, r1
 8019510:	b510      	push	{r4, lr}
 8019512:	eb01 0302 	add.w	r3, r1, r2
 8019516:	d807      	bhi.n	8019528 <memmove+0x1a>
 8019518:	1e42      	subs	r2, r0, #1
 801951a:	4299      	cmp	r1, r3
 801951c:	d00a      	beq.n	8019534 <memmove+0x26>
 801951e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8019522:	f802 4f01 	strb.w	r4, [r2, #1]!
 8019526:	e7f8      	b.n	801951a <memmove+0xc>
 8019528:	4283      	cmp	r3, r0
 801952a:	d9f5      	bls.n	8019518 <memmove+0xa>
 801952c:	1881      	adds	r1, r0, r2
 801952e:	1ad2      	subs	r2, r2, r3
 8019530:	42d3      	cmn	r3, r2
 8019532:	d100      	bne.n	8019536 <memmove+0x28>
 8019534:	bd10      	pop	{r4, pc}
 8019536:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 801953a:	f801 4d01 	strb.w	r4, [r1, #-1]!
 801953e:	e7f7      	b.n	8019530 <memmove+0x22>

08019540 <_realloc_r>:
 8019540:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8019542:	4607      	mov	r7, r0
 8019544:	4614      	mov	r4, r2
 8019546:	460e      	mov	r6, r1
 8019548:	b921      	cbnz	r1, 8019554 <_realloc_r+0x14>
 801954a:	4611      	mov	r1, r2
 801954c:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8019550:	f7fc bc12 	b.w	8015d78 <_malloc_r>
 8019554:	b922      	cbnz	r2, 8019560 <_realloc_r+0x20>
 8019556:	f7fc fbc1 	bl	8015cdc <_free_r>
 801955a:	4625      	mov	r5, r4
 801955c:	4628      	mov	r0, r5
 801955e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8019560:	f000 f814 	bl	801958c <_malloc_usable_size_r>
 8019564:	42a0      	cmp	r0, r4
 8019566:	d20f      	bcs.n	8019588 <_realloc_r+0x48>
 8019568:	4621      	mov	r1, r4
 801956a:	4638      	mov	r0, r7
 801956c:	f7fc fc04 	bl	8015d78 <_malloc_r>
 8019570:	4605      	mov	r5, r0
 8019572:	2800      	cmp	r0, #0
 8019574:	d0f2      	beq.n	801955c <_realloc_r+0x1c>
 8019576:	4631      	mov	r1, r6
 8019578:	4622      	mov	r2, r4
 801957a:	f7fc fb9c 	bl	8015cb6 <memcpy>
 801957e:	4631      	mov	r1, r6
 8019580:	4638      	mov	r0, r7
 8019582:	f7fc fbab 	bl	8015cdc <_free_r>
 8019586:	e7e9      	b.n	801955c <_realloc_r+0x1c>
 8019588:	4635      	mov	r5, r6
 801958a:	e7e7      	b.n	801955c <_realloc_r+0x1c>

0801958c <_malloc_usable_size_r>:
 801958c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8019590:	1f18      	subs	r0, r3, #4
 8019592:	2b00      	cmp	r3, #0
 8019594:	bfbc      	itt	lt
 8019596:	580b      	ldrlt	r3, [r1, r0]
 8019598:	18c0      	addlt	r0, r0, r3
 801959a:	4770      	bx	lr

0801959c <_init>:
 801959c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801959e:	bf00      	nop
 80195a0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80195a2:	bc08      	pop	{r3}
 80195a4:	469e      	mov	lr, r3
 80195a6:	4770      	bx	lr

080195a8 <_fini>:
 80195a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80195aa:	bf00      	nop
 80195ac:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80195ae:	bc08      	pop	{r3}
 80195b0:	469e      	mov	lr, r3
 80195b2:	4770      	bx	lr
